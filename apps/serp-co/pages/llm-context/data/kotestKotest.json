[
  {
    "owner": "kotest",
    "repo": "kotest",
    "content": "TITLE: Adding Kotest JUnit5 Runner Dependency (Maven)\nDESCRIPTION: Adds the Kotest JUnit5 runner dependency to a Maven project. This is required for running Kotest tests on the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-runner-junit5-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Tests with Kotest in Kotlin\nDESCRIPTION: Demonstrates how to use Kotest's withData function to create data-driven tests. This example tests the isPythagTriple function with multiple input sets, showcasing automatic test case generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  context(\"Pythag triples tests\") {\n    withData(\n      PythagTriple(3, 4, 5),\n      PythagTriple(6, 8, 10),\n      PythagTriple(8, 15, 17),\n      PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n      isPythagTriple(a, b, c) shouldBe true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Map Assertions in Kotlin\nDESCRIPTION: Comprehensive set of matchers for validating map contents, keys, values, and exact matches.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldContain(\"key\", \"value\")\nmap.shouldContainAll(other)\nmap.shouldContainExactly(other)\nmap.shouldContainKey(key)\nmap.shouldContainKeys(keys)\nmap.shouldContainValue(value)\nmap.shouldContainValues(values)\nmap.shouldBeEmpty()\nmap.shouldMatchAll(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\nmap.shouldMatchExactly(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Tests in Kotest using StringSpec\nDESCRIPTION: Demonstrates basic test writing in Kotest using the StringSpec style. Shows string length and prefix testing examples using Kotest's assertion syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n   \"length should return size of string\" {\n      \"hello\".length shouldBe 5\n   }\n   \"startsWith should test for a prefix\" {\n      \"world\" should startWith(\"wor\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions in Kotlin\nDESCRIPTION: Shows how to chain multiple assertions using Kotest's matchers with the fluent API style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n           .shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n           .shouldStartWith(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Android for Kotest Unit Tests\nDESCRIPTION: Sets up Android project to use JUnit Platform for running Kotest unit tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      useJUnitPlatform()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FunSpec Testing Style in Kotest\nDESCRIPTION: FunSpec allows creating tests by invoking a function called 'test' with a string description and a lambda for the test implementation. This is the recommended style for new users.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    test(\"String length should return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Concurrent Operation Assertions in Kotest\nDESCRIPTION: Methods for asserting behavior of concurrent operations including timeout and completion checks\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nshouldCompleteWithin(timeout, unit, function)\nshouldTimeout(timeout, unit, function)\nshouldTimeout(duration, suspendableFunction)\n```\n\n----------------------------------------\n\nTITLE: Basic Test Writing in Kotlin using Kotest StringSpec\nDESCRIPTION: Demonstrates basic test writing using Kotest's StringSpec style with assertion examples using shouldBe and should startWith matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n   \"length should return size of string\" {\n      \"hello\".length shouldBe 5\n   }\n   \"startsWith should test for a prefix\" {\n      \"world\" should startWith(\"wor\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Tests with Kotest in Kotlin\nDESCRIPTION: Demonstrates how to use Kotest's withData function to create data-driven tests for the Pythagorean triple function. This example shows how to structure tests within a context block and use data classes as input.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  context(\"Pythag triples tests\") {\n    withData(\n      PythagTriple(3, 4, 5),\n      PythagTriple(6, 8, 10),\n      PythagTriple(8, 15, 17),\n      PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n      isPythagTriple(a, b, c) shouldBe true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing FunSpec in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use FunSpec style for writing tests in Kotest. It shows basic test creation, context blocks, and how to disable tests using xcontext and xtest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    test(\"String length should return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    context(\"this outer block is enabled\") {\n        xtest(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        test(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tests with FunSpec in Kotest\nDESCRIPTION: Demonstrates how to create a simple test class using the FunSpec style in Kotest. Tests are defined using the 'test' keyword with a string name and a function block containing assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/writing_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFirstTestClass : FunSpec({\n\n   test(\"my first test\") {\n      1 + 2 shouldBe 3\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using assertSoftly Block in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates how to use the assertSoftly function to perform multiple assertions in a block. If any assertions fail, the test will continue running and report all failures in a single exception at the end of the block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/soft_assertions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: General Assertions in Kotest\nDESCRIPTION: Core matchers for general purpose assertions in Kotest, including equality checks, boolean assertions, and exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nobj.shouldBe(other)\nexpr.shouldBeTrue()\nexpr.shouldBeFalse()\nshouldThrow<T> { block }\nshouldThrowExactly<T> { block }\nshouldThrowAny { block }\nshouldThrowMessage(message) { block }\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Tests with StringSpec in Kotlin using Kotest\nDESCRIPTION: Demonstrates how to write basic tests using Kotest's StringSpec style. The example shows how to test string properties like length and prefix checking using Kotest's expressive assertion syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"length should return size of string\" {\n    \"hello\".length shouldBe 5\n  }\n  \"startsWith should test for a prefix\" {\n    \"world\" should startWith(\"wor\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Data Driven Testing with Kotest\nDESCRIPTION: Shows how to implement data driven tests using Kotest's forAll function with row parameters to test multiple scenarios in a single test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n   \"maximum of two numbers\" {\n      forAll(\n         row(1, 5, 5),\n         row(1, 0, 1),\n         row(0, 0, 0)\n      ) { a, b, max ->\n         Math.max(a, b) shouldBe max\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Nesting Tests in Kotest using DescribeSpec\nDESCRIPTION: This example illustrates how to create nested tests in Kotest using the DescribeSpec style. It shows the use of 'describe' for outer tests and 'it' for inner tests, demonstrating Kotest's support for hierarchical test structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/writing_tests.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NestedTestExamples : DescribeSpec({\n\n   describe(\"an outer test\") {\n\n      it(\"an inner test\") {\n        1 + 2 shouldBe 3\n      }\n\n      it(\"an inner test too!\") {\n        3 + 4 shouldBe 7\n      }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with shouldThrow in Kotlin using Kotest\nDESCRIPTION: This snippet demonstrates how to test for expected exceptions using Kotest's shouldThrow function. It captures an IllegalAccessException and then performs an additional assertion on the exception's message property using the infix 'should' function with a matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n   // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Basic Test Structure in Kotest Using FunSpec\nDESCRIPTION: Demonstrates how to write a basic test using Kotest's FunSpec style. Shows the fundamental structure of a test class with a simple assertion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/writing_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFirstTestClass : FunSpec({\n\n   test(\"my first test\") {\n      1 + 2 shouldBe 3\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Test Generation in Kotest\nDESCRIPTION: Demonstrates how to generate tests dynamically at runtime using a list of values, showcasing Kotest's ability to create tests conditionally.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/writing_tests.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n    listOf(\n      \"sam\",\n      \"pam\",\n      \"tim\",\n    ).forEach {\n       test(\"$it should be a three letter name\") {\n           it.shouldHaveLength(3)\n       }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Test Structure in Kotest using FunSpec\nDESCRIPTION: Demonstrates the basic structure of a Kotest test class using FunSpec style, showing how to create a simple test with an assertion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/writing_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFirstTestClass : FunSpec({\n\n   test(\"my first test\") {\n      1 + 2 shouldBe 3\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tests with StringSpec in Kotlin\nDESCRIPTION: Demonstrates the StringSpec testing style in Kotest, which allows for simple and readable test declarations. The example shows basic string assertions using the shouldBe and should startWith matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"length should return size of string\" {\n    \"hello\".length shouldBe 5\n  }\n  \"startsWith should test for a prefix\" {\n    \"world\" should startWith(\"wor\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing for JVM/Maven\nDESCRIPTION: Adds the Kotest property testing library dependency for JVM projects using Maven.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Matchers for Assertions in Kotlin\nDESCRIPTION: Shows various matchers provided by Kotest for different types of assertions, including string operations, email validation, file extension checking, and map key presence.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n\nuser.email.shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n\ncityMap.shouldContainKey(\"London\")\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Tests with StringSpec in Kotlin\nDESCRIPTION: Demonstrates how to write simple tests using Kotest's StringSpec style. It includes examples of string length and prefix checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"length should return size of string\" {\n    \"hello\".length shouldBe 5\n  }\n  \"startsWith should test for a prefix\" {\n    \"world\" should startWith(\"wor\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Test with FunSpec in Kotest\nDESCRIPTION: Demonstrates how to create a simple test using the FunSpec style in Kotest. The test validates that 1 + 2 equals 3 using Kotest's shouldBe matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/writing_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFirstTestClass : FunSpec({\n\n   test(\"my first test\") {\n      1 + 2 shouldBe 3\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Reusable Callbacks in Kotest\nDESCRIPTION: This snippet shows how to create reusable callbacks in Kotest. It defines a 'resetDatabase' function that can be used as a 'beforeTest' callback across multiple test classes, demonstrating how to extract common setup logic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/writing_tests.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval resetDatabase: BeforeTest = {\n  // truncate all tables here\n}\n\nclass ReusableCallbacks : FunSpec({\n\n   beforeTest(resetDatabase)\n\n   test(\"this test will have a sparkling clean database!\") {\n       // test logic here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Thread Properties in Kotlin with Kotest\nDESCRIPTION: These assertions check various states of Thread objects, including whether a thread is blocked, a daemon, or alive. They are useful for testing multi-threaded applications and ensuring correct thread behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nthread.shouldBeBlocked()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nthread.shouldBeDaemon()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nthread.shouldBeAlive()\n```\n\n----------------------------------------\n\nTITLE: Property-Based Testing with Kotest in Kotlin\nDESCRIPTION: Illustrates how to use property-based testing in Kotest to automatically generate test data and verify properties of the code under test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n  \"String size\" {\n    checkAll<String, String> { a, b ->\n      (a + b) shouldHaveLength a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Matchers for Various Assertions\nDESCRIPTION: Shows examples of Kotest's rich matcher library with different data types. The examples demonstrate string content checking, case validation, file extension verification, and map key presence testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n\nuser.email.shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n\ncityMap.shouldContainKey(\"London\")\n```\n\n----------------------------------------\n\nTITLE: Implementing AnnotationSpec in Kotlin\nDESCRIPTION: Shows how to use AnnotationSpec in Kotest, which mimics JUnit-style annotations for test lifecycle methods and test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n    @BeforeEach\n    fun beforeTest() {\n        println(\"Before each test\")\n    }\n\n    @Test\n    fun test1() {\n        1 shouldBe 1\n    }\n\n    @Test\n    fun test2() {\n        3 shouldBe 3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Using shouldBe in Kotlin\nDESCRIPTION: Demonstrates the basic usage of Kotest's shouldBe matcher to assert equality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nname shouldBe \"sam\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Test Timeout in Kotest FunSpec\nDESCRIPTION: Shows how to set a timeout for a single test using test config with a duration of 100 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n   test(\"this test will timeout quickly!\").config(timeout = 100.milliseconds) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Tests with StringSpec in Kotlin\nDESCRIPTION: Demonstrates how to write simple tests using Kotest's StringSpec style. It shows two example tests: one checking string length and another testing string prefix.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"length should return size of string\" {\n    \"hello\".length shouldBe 5\n  }\n  \"startsWith should test for a prefix\" {\n    \"world\" should startWith(\"wor\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing in Kotest with StringSpec\nDESCRIPTION: Shows how to perform data-driven testing in Kotest using the forAll function with multiple input combinations for finding the maximum of two numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n   \"maximum of two numbers\" {\n      forAll(\n         row(1, 5, 5),\n         row(1, 0, 1),\n         row(0, 0, 0)\n      ) { a, b, max ->\n         Math.max(a, b) shouldBe max\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Writing Simple Tests in Kotest using StringSpec\nDESCRIPTION: Demonstrates how to write basic tests using Kotest's StringSpec style. It shows assertions for string length and prefix checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n   \"length should return size of string\" {\n      \"hello\".length shouldBe 5\n   }\n   \"startsWith should test for a prefix\" {\n      \"world\" should startWith(\"wor\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Callbacks in Kotest\nDESCRIPTION: This example demonstrates the use of lifecycle callbacks in Kotest. It shows how to define 'beforeEach' and 'afterEach' callbacks that run before and after each test case, respectively. These callbacks are useful for setup and teardown operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/writing_tests.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Callbacks : FunSpec({\n\n   beforeEach {\n      println(\"Hello from $it\")\n   }\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   afterEach {\n      println(\"Goodbye from $it\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Matchers for Assertions in Kotlin\nDESCRIPTION: Illustrates the use of various matchers provided by Kotest for different types of assertions. It includes examples of string, email, file, and map assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n\nuser.email.shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n\ncityMap.shouldContainKey(\"London\")\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Matchers for Various Assertions in Kotlin\nDESCRIPTION: Shows examples of Kotest's rich matcher library for different types of assertions. Includes matchers for strings, user data, files, and maps, demonstrating the expressive and readable syntax for test assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n\nuser.email.shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n\ncityMap.shouldContainKey(\"London\")\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Lifecycle Callbacks in Kotest\nDESCRIPTION: Demonstrates how to create reusable lifecycle callbacks in Kotest by defining named functions that can be referenced across multiple test files, which helps maintain consistent setup and teardown logic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/writing_tests.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval resetDatabase: BeforeTest = {\n  // truncate all tables here\n}\n\nclass ReusableCallbacks : FunSpec({\n\n   beforeTest(resetDatabase)\n\n   test(\"this test will have a sparkling clean database!\") {\n       // test logic here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Composing a Complex Person Matcher in Kotlin using Kotest\nDESCRIPTION: This snippet demonstrates how to compose a complex matcher for a Person object by combining individual property matchers using Matcher.all() and havingProperty().\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/composed_matchers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun personMatcher(name: String, age: Int) = Matcher.all(\n  havingProperty(nameMatcher(name) to Person::name),\n  havingProperty(ageMatcher(age) to Person::age),\n  havingProperty(addressMatcher to Person::address)\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Generated Values in Kotest Property Tests\nDESCRIPTION: This snippet demonstrates how to use the filter method to constrain the values generated by an Arb (arbitrary) in Kotest property tests. It creates an Arb that only generates even integers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/assumptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\n```\n\n----------------------------------------\n\nTITLE: Capturing and Verifying Exceptions with shouldThrow in Kotlin using Kotest\nDESCRIPTION: Demonstrates how to use Kotest's shouldThrow function to test that code throws an expected exception type, and how to perform assertions on the captured exception's properties. The example shows capturing an IllegalAccessException and verifying its message content.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n   // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Full Example of Database Testing with Kotest and Testcontainers\nDESCRIPTION: A complete example showing how to set up a MySQL container, install the JDBC extension, and perform database operations in a Kotest test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass QueryDatastoreTest : FunSpec({\n\n  val mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n    startupAttempts = 1\n    withUrlParam(\"connectionTimeZone\", \"Z\")\n    withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n  }\n\n  val ds = install(JdbcDatabaseContainerExtension(mysql)) {\n    poolName = \"myconnectionpool\"\n    maximumPoolSize = 8\n    idleTimeout = 10000\n  }\n\n  val datastore = PersonDatastore(ds)\n\n  test(\"insert happy path\") {\n\n    datastore.insert(Person(\"sam\", \"Chicago\"))\n    datastore.insert(Person(\"jim\", \"Seattle\"))\n\n    datastore.findAll().shouldBe(listOf(\n      Person(\"sam\", \"Chicago\"),\n      Person(\"jim\", \"Seattle\"),\n    ))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing DescribeSpec Style in Kotest\nDESCRIPTION: DescribeSpec uses describe/it keywords familiar to developers from Ruby or JavaScript backgrounds. Tests must be nested within describe blocks and can be disabled with xdescribe/xit variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"score\") {\n        it(\"start as zero\") {\n            // test here\n        }\n        describe(\"with a strike\") {\n            it(\"adds ten\") {\n                // test here\n            }\n            it(\"carries strike to the next frame\") {\n                // test here\n            }\n        }\n\n        describe(\"for the opposite team\") {\n            it(\"Should negate one score\") {\n                // test here\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"this outer block is enabled\") {\n        xit(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xdescribe(\"this block is disabled\") {\n        it(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Matchers with Infix Functions\nDESCRIPTION: Shows how to use Kotest matchers with infix notation for a cleaner syntax. Also demonstrates negation using shouldNot.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\na shouldBe b\na should startWith(\"foo\")\na shouldNot startWith(\"boo\")\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Matchers with Infix Style\nDESCRIPTION: Shows the infix notation style for Kotest matchers, which provides a more readable and cleaner syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\na shouldBe b\na should startWith(\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Matchers for Assertions\nDESCRIPTION: Shows various matcher examples for different types of assertions including string operations and custom object validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n\nuser.email.shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n\ncityMap.shouldContainKey(\"London\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Test in Kotest using FunSpec\nDESCRIPTION: This snippet demonstrates how to create a simple test class in Kotest using the FunSpec style. It shows the basic structure of a test, including the test function and an assertion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/writing_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFirstTestClass : FunSpec({\n\n   test(\"my first test\") {\n      1 + 2 shouldBe 3\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Collection Inspector Example\nDESCRIPTION: Shows how to use Kotest's inspector functionality to test elements in a collection.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nmylist.forExactly(3) {\n    it.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Test Definition Using StringSpec in Kotlin\nDESCRIPTION: Demonstrates writing basic tests using Kotest's StringSpec style with assertion examples for string operations\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n   \"length should return size of string\" {\n      \"hello\".length shouldBe 5\n   }\n   \"startsWith should test for a prefix\" {\n      \"world\" should startWith(\"wor\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Kotest BDD Style Testing\nDESCRIPTION: Illustrates Kotest's flexible test layout styles including BDD-style syntax using given/when/then and describe/it patterns.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/why.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"my test\" should \"do foo\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Channels in Kotest\nDESCRIPTION: Assertion functions for validating Kotlin coroutine channels in Kotest tests, including timing, size, and state verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldReceiveWithin(duration)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldReceiveNoElementsWithin(duration)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldHaveSize(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldReceiveAtLeast(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldReceiveAtMost(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldBeClosed()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldBeOpen()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Using Test Factory in a Test Suite in Kotlin\nDESCRIPTION: This snippet demonstrates how to include a test factory in a test suite for multiple implementations of IndexedSeq.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_factories.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IndexedSeqTestSuite : WordSpec({\n   include(indexedSeqTests(\"vector\"), Vector())\n   include(indexedSeqTests(\"list\"), List())\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Project-Wide Extensions with @AutoScan in Kotest\nDESCRIPTION: Demonstrates how to create project-level extensions using the BeforeProjectListener and AfterProjectListener interfaces. The @AutoScan annotation is used to automatically register this listener for all tests in the project without additional configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/extensions/extensions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@AutoScan\nobject MyProjectListener : BeforeProjectListener, AfterProjectListener {\n  override suspend fun beforeProject() {\n    println(\"Project starting\")\n  }\n  override suspend fun afterProject() {\n    println(\"Project complete\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Arbitrary Generators in Kotlin\nDESCRIPTION: Demonstrates the use of 'bind' operation to combine multiple Arb instances. The example shows how to create an Arb for a data class by binding string and integer arbitraries.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genops.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb: Arb<Person> = Arb.bind(\n   Arb.string(),\n   Arb.int()\n) { name, age -> Person(name, age) }\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with Kotest in Kotlin\nDESCRIPTION: Demonstrates how to test for exceptions using Kotest's shouldThrow function. The example checks for an IllegalAccessException and verifies its message content.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/index.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Implementing BehaviorSpec Testing Style in Kotest\nDESCRIPTION: BehaviorSpec allows writing tests in Behavior-Driven Development (BDD) style, using 'given', 'when', and 'then' keywords. This style is popular for tests that describe system behavior from a user perspective.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        `when`(\"I sit on it\") {\n            then(\"I should be able to fly\") {\n                // test code\n            }\n        }\n        `when`(\"I throw it away\") {\n            then(\"it should come back\") {\n                // test code\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Tests with StringSpec in Kotlin\nDESCRIPTION: Demonstrates how to write simple tests using the StringSpec style in Kotest. It shows two example tests: one checking string length and another testing string prefix.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"length should return size of string\" {\n    \"hello\".length shouldBe 5\n  }\n  \"startsWith should test for a prefix\" {\n    \"world\" should startWith(\"wor\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions in Kotest with Kotlin\nDESCRIPTION: Shows how to test for exceptions in Kotest using the shouldThrow function. The example captures the thrown exception and verifies properties of the exception message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/index.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with Kotest shouldThrow\nDESCRIPTION: Example showing how to test for expected exceptions and verify exception properties using Kotest's shouldThrow function. The snippet demonstrates catching an IllegalAccessException and verifying its message content.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n   // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Basic Soft Assertions Block in Kotlin using Kotest\nDESCRIPTION: Demonstrates the basic usage of assertSoftly block to perform multiple assertions and collect all failures. Instead of stopping at the first failure, all assertions are evaluated and failures are reported together.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/soft_assertions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Using General Purpose Assertions in Kotlin with Kotest\nDESCRIPTION: General purpose assertions for checking equality, boolean values, and exception handling. These include basic equality checking with shouldBe, property value checking, boolean assertions, and various methods for verifying exceptions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBe(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobj::prop.shouldHaveValue(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nexpr.shouldBeTrue()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nexpr.shouldBeFalse()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<T> { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrowExactly<T> { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrowAny { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrowMessage(message) { block }\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Exception Throwing in Kotlin using Kotest\nDESCRIPTION: Demonstrates how to use the shouldThrow function to verify that a code block throws a specific exception type. This is the basic way to test exception scenarios in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Spec Test in Kotlin using Kotest\nDESCRIPTION: Demonstrates basic test case writing using Kotest's StringSpec style with assertion examples using shouldBe and should startWith matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n   \"length should return size of string\" {\n      \"hello\".length shouldBe 5\n   }\n   \"startsWith should test for a prefix\" {\n      \"world\" should startWith(\"wor\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Exception Throw in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use the 'shouldThrow' function to assert that a specific exception is thrown in a block of code. This method is used to verify that expected exceptions occur during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Statistical Properties of Collections in Kotlin\nDESCRIPTION: Assertion matchers for statistical properties of collections in Kotlin, including mean, variance, and standard deviation calculations with optional precision.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveMean(mean)\ncollection.shouldHaveMean(mean, precision)\ncollection.shouldHaveVariance(mean)\ncollection.shouldHaveVariance(mean, precision)\ncollection.shouldHaveStandardDeviation(mean)\ncollection.shouldHaveStandardDeviation(mean, precision)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tests with FunSpec in Kotlin\nDESCRIPTION: Shows how to write tests using FunSpec style, which uses test() function to define test cases. Includes examples of enabled and disabled tests using xcontext and xtest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    test(\"String length should return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    context(\"this outer block is enabled\") {\n        xtest(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        test(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using General Purpose Matchers in Kotlin with Kotest\nDESCRIPTION: Examples of general purpose assertions in Kotest for equality testing, boolean assertions, and exception handling. These matchers provide the foundation for basic test assertions in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBe(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nexpr.shouldBeTrue()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nexpr.shouldBeFalse()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<T> { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrowExactly<T> { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrowAny { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrowMessage(message) { block }\n```\n\n----------------------------------------\n\nTITLE: Asserting Double and Float Values in Kotest\nDESCRIPTION: Collection of assertion functions for validating floating-point numbers in Kotest tests, including equality with tolerance, range checking, and special value verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBe(value plusOrMinus(tolerance))\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeBetween(x, y)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeLessThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeLessThanOrEqual(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeGreaterThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeGreaterThanOrEqual(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBePositive()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeNegative()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBePositiveInfinity()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeNegativeInfinity()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeNaN()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing in Kotest with Kotlin\nDESCRIPTION: Demonstrates data-driven testing using Kotest's forAll function with row objects. This approach allows testing multiple input combinations easily with clear expected outputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/index.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"maximum of two numbers\" {\n    forAll(\n        row(1, 5, 5),\n        row(1, 0, 1),\n        row(0, 0, 0)\n    ) { a, b, max ->\n      Math.max(a, b) shouldBe max\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Assertions with withClue and asClue in Kotlin\nDESCRIPTION: Demonstrates how to use withClue and asClue helpers to add extra context to assertions, making test failures more informative.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") { user.name shouldNotBe null }\n\ndata class HttpResponse(val status: Int, body: String)\nval response = HttpResponse(200, \"the content\")\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pythagorean Triple Validator in Kotlin\nDESCRIPTION: A function that validates if three numbers form a Pythagorean triple by checking if a² + b² = c².\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Testing Broker Message Reception with Fixed Interval in Kotlin\nDESCRIPTION: This example shows how to use the 'until' function with a custom fixed interval. It checks for a message every 250 milliseconds for up to 5 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/until.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 250.milliseconds.fixed()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Collection Assertions in Kotlin Kotest\nDESCRIPTION: Common collection assertion methods for checking emptiness, uniqueness, and containment of elements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/collections.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeEmpty()\ncollection.shouldBeUnique()\ncollection.shouldBeUnique(comparator)\ncollection.shouldContain(element)\ncollection.shouldContainAll(e1, e2, ..., en)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Kafka Producer and Consumer in Kotest Tests\nDESCRIPTION: Demonstrates how to create and use a Kafka producer and consumer within a Kotest test, including producing a message and consuming it using the convenient helper methods provided by the embedded Kafka listener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/kafka.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n\n   test(\"send / receive\") {\n\n     val producer = embeddedKafkaListener.stringStringProducer()\n     producer.send(ProducerRecord(\"foo\", \"a\"))\n     producer.close()\n\n     val consumer = embeddedKafkaListener.stringStringConsumer(\"foo\")\n     eventually(10.seconds) {\n       consumer.poll(1000).first().value() shouldBe \"a\"\n     }\n     consumer.close()\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Mocking Example with Kotest and mockk\nDESCRIPTION: Demonstrates a simple test using mockk for mocking within a Kotest FunSpec. It shows how to create a mock, set expectations, and verify calls.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/integrations/mocks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using @Order Annotation for Spec Execution in Kotest\nDESCRIPTION: This example demonstrates how to use the @Order annotation to control the execution order of spec classes in Kotest. Lower order values are executed first, and classes without annotations are executed last. The actual execution order would be BarTest, then FooTest and FarTest (in undefined order), and finally BooTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/spec_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Order(1)\nclass FooTest : FunSpec() { }\n\n@Order(0)\nclass BarTest: FunSpec() {}\n\n@Order(1)\nclass FarTest : FunSpec() { }\n\nclass BooTest : FunSpec() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Driven Testing with forAll in Kotlin using Kotest\nDESCRIPTION: This snippet demonstrates how to use the 'forAll' function with 'row' objects to test square roots. It shows how Kotest automatically infers parameter types and provides detailed error messages for failed tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forAll(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Data Test with Custom Test Names in Kotest\nDESCRIPTION: Shows how to implement nested data tests with custom test name formatting for the inner test cases. Uses a lambda to generate dynamic test names based on the HTTP method being tested.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/nested.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n    val services = listOf(\n       \"http://internal.foo\",\n       \"http://internal.bar\",\n       \"http://public.baz\",\n    )\n\n    val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n    withData(services) { service ->\n       withData<String>({ \"should support HTTP $it\" }, methods) { method ->\n          // test service against method\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BDD Testing with BehaviorSpec in Kotlin\nDESCRIPTION: Demonstrates BDD-style testing using BehaviorSpec with given/when/then blocks and support for nested contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    context(\"a broomstick should be able to be fly and come back on it's own\") {\n        given(\"a broomstick\") {\n            `when`(\"I sit on it\") {\n                then(\"I should be able to fly\") {\n                    // test code\n                }\n            }\n            `when`(\"I throw it away\") {\n                then(\"it should come back\") {\n                    // test code\n                }\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Tests with StringSpec in Kotlin\nDESCRIPTION: Demonstrates the StringSpec testing style in Kotest, showing how to write simple and readable tests using string descriptions and lambda expressions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"length should return size of string\" {\n    \"hello\".length shouldBe 5\n  }\n  \"startsWith should test for a prefix\" {\n    \"world\" should startWith(\"wor\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retry Configuration with Duration in Kotlin\nDESCRIPTION: Configuring both retry count and maximum duration for eventually testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/eventually.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  initialDelay = 8.seconds\n  retries = 10\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ShouldSpec in Kotlin for Kotest\nDESCRIPTION: Example of using ShouldSpec in Kotest, which is similar to FunSpec but uses 'should' instead of 'test'. It demonstrates basic usage and nesting tests in context blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    should(\"return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"String.length\") {\n        should(\"return the length of the string\") {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"this outer block is enabled\") {\n        xshould(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        should(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Result Properties in Kotlin using Kotest\nDESCRIPTION: Demonstrates assertions for Result objects in Kotest. Includes checks for success, failure, and specific failure types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_25\n\nLANGUAGE: Kotlin\nCODE:\n```\nresult.shouldBeSuccess()\nresult.shouldBeSuccess(value)\nresult.shouldBeSuccess(block)\nresult.shouldBeFailure()\nresult.shouldBeFailureOfType<Type : Throwable>()\nresult.shouldBeFailure(block)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin for Kotest\nDESCRIPTION: Sets up the Maven Surefire plugin to work with Kotest and JUnit5.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest with Gradle (Groovy)\nDESCRIPTION: Gradle setup example for including Kotest in a JVM project using Groovy build script. It shows how to enable JUnit platform and add dependencies for the test framework, assertions, and property testing modules.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  useJUnitPlatform()\n}\n\ndependencies {\n  testImplementation 'io.kotest:kotest-runner-junit5:<version>' // for kotest framework\n  testImplementation 'io.kotest:kotest-assertions-core:<version>' // for kotest core jvm assertions\n  testImplementation 'io.kotest:kotest-property:<version>' // for kotest property test\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec Testing Style in Kotest\nDESCRIPTION: StringSpec offers the most minimal syntax for writing tests in Kotest. Tests are created by providing a descriptive string followed by a lambda containing the test code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\" {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Reusing Lifecycle Callbacks Across Test Classes in Kotest\nDESCRIPTION: Shows how to create reusable lifecycle callbacks that can be shared across multiple test classes. This example demonstrates database reset functionality that can be applied to different test files.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/writing_tests.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval resetDatabase: BeforeTest = {\n  // truncate all tables here\n}\n\nclass ReusableCallbacks : FunSpec({\n\n   beforeTest(resetDatabase)\n\n   test(\"this test will have a sparkling clean database!\") {\n       // test logic here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Eventually with Predicates\nDESCRIPTION: Demonstrates using eventually with a predicate function to validate the result of the operation, checking that a counter eventually reaches the expected value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"check that predicate eventually succeeds in time\" {\n    var i = 0\n    eventually<Int>(25.seconds, predicate = { it == 5 }) {\n      delay(1.seconds)\n      i++\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Assertions on All Table Rows in Kotest\nDESCRIPTION: This code shows how to run assertions on all rows of a previously defined table using Kotest's forAll method. It checks if the id is greater than 0 and the username is not empty for each row.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/table_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"table-driven testing\") {\n    table.forAll { id, name, username ->\n      id shouldBeGreaterThan 0\n      username shouldNotBe \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Table Testing with forAll in Kotest\nDESCRIPTION: Demonstrates basic table testing using forAll function with square root calculations. Uses row objects to define test cases with integer parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forAll(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Tests in Kotest\nDESCRIPTION: This snippet showcases Kotest's ability to generate tests dynamically at runtime. It demonstrates how to create multiple tests based on a list of items, highlighting Kotest's flexibility in test creation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/writing_tests.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n    listOf(\n      \"sam\",\n      \"pam\",\n      \"tim\",\n    ).forEach {\n       test(\"$it should be a three letter name\") {\n           it.shouldHaveLength(3)\n       }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing FreeSpec Testing Style in Kotest\nDESCRIPTION: FreeSpec allows nesting tests with arbitrary depth using the minus sign (-) for outer tests. This flexible style enables creating deeply nested test hierarchies to match complex domain structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FreeSpec({\n    \"String.length\" - {\n        \"should return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n    \"containers can be nested as deep as you want\" - {\n        \"and so we nest another container\" - {\n            \"yet another container\" - {\n                \"finally a real test\" {\n                    1 + 1 shouldBe 2\n                }\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schemas with Kotest DSL\nDESCRIPTION: Demonstrates how to create JSON schemas using Kotest's Kotlin DSL. This example creates nested schemas for address and person objects, with validation rules for fields and the ability to reuse schemas.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/json/schema.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval addressSchema = jsonSchema {\n  obj {   // object is reserved, obj was chosen over jsonObject for brevity but could be changed ofc, or jsonObject could be added as alternative.\n    withProperty(\"street\", required = true) { string() }\n    withProperty(\"zipCode\", required = true) {\n      integer {\n        beEven() and beInRange(10000..99999)   // supports constructing a matcher that will be used to test values\n      }\n    }\n    additionalProperties = false   // triggers failure if other properties are defined in actual\n  }\n}\n\nval personSchema = jsonSchema {\n  obj {\n    withProperty(\"name\", required = true) { string() }\n    withProperty(\"address\") { addressSchema() } // Schemas can re-use other schemas 🎉\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Kotest Arb Generators\nDESCRIPTION: Demonstrates how to use bind to combine multiple arbitraries to create complex objects. The example shows creating a Person data class from string and int generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genops.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb: Arb<Person> = Arb.bind(\n   Arb.string(),\n   Arb.int()\n) { name, age -> Person(name, age) }\n```\n\n----------------------------------------\n\nTITLE: Using forAtLeast Inspector in Kotlin Kotest\nDESCRIPTION: Demonstrates how to use the forAtLeast inspector to verify that at least 2 elements in a collection meet a minimum length requirement.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/inspectors.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval xs = listOf(\"sam\", \"gareth\", \"timothy\", \"muhammad\")\nxs.forAtLeast(2) {\n    it.shouldHaveMinLength(7)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec Style in Kotest\nDESCRIPTION: StringSpec offers minimal syntax where tests are defined with a string description followed by a lambda. Additional configuration can be applied using the config method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\" {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\".config(enabled = false, invocations = 3) {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Property Test with Unbounded Shrinking Configuration\nDESCRIPTION: Shows how to configure a property test to use unbounded shrinking instead of the default 1000 attempts. This allows the shrinking process to continue indefinitely until the minimal failing case is found.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/shrinking.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll(PropTestConfig(shrinkingMode = ShrinkingMode.Unbounded)) { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Throwing with Kotest in Kotlin\nDESCRIPTION: Example showing how to test for an expected IllegalAccessException and verify its message using Kotest's shouldThrow function. The code demonstrates both catching the exception and asserting on its properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n   // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Basic Test Structure in Kotest using FunSpec\nDESCRIPTION: Demonstrates how to write a basic test class using Kotest's FunSpec style. Shows the fundamental structure of creating a test with an assertion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/writing_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFirstTestClass : FunSpec({\n\n   test(\"my first test\") {\n      1 + 2 shouldBe 3\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Basic DSL Method Lifecycle Hooks in Kotest\nDESCRIPTION: Demonstrates the basic usage of beforeTest and afterTest hooks using DSL methods within a WordSpec test class. Shows how to execute code before and after individual test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/lifecycle_hooks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec({\n  beforeTest {\n    println(\"Starting a test $it\")\n  }\n  afterTest { (test, result) ->\n    println(\"Finished spec with result $result\")\n  }\n  \"this test\" should {\n    \"be alive\" {\n      println(\"Johnny5 is alive!\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Focusing Top-Level Tests in Kotest StringSpec\nDESCRIPTION: Demonstrates how to use the 'f:' prefix to focus on a specific top-level test in a Kotest StringSpec, causing only that test to be executed while others are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/focus.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Nested Data Tests in Kotest\nDESCRIPTION: This snippet demonstrates a two-level nested data test structure in Kotest, testing multiple HTTP methods against multiple services. It creates a cartesian join of all test combinations, with each combination appearing as a nested test in the output.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/nested.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n  val services = listOf(\n    \"http://internal.foo\",\n    \"http://internal.bar\",\n    \"http://public.baz\",\n  )\n\n  val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n   withData(services) { service ->\n     withData(methods) { method ->\n       // test service against method\n     }\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Property Testing with checkAll in Kotlin Kotest\nDESCRIPTION: Shows how to use checkAll function for property testing with assertions. Tests the same string concatenation property using Kotest's assertion style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/test_functions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      checkAll<String, String> { a, b ->\n         a + b shouldHaveLength a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit Platform with Kotlin\nDESCRIPTION: Configures Gradle to use JUnit Platform for running Kotest tests when using Kotlin DSL build scripts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing for Multiplatform Projects\nDESCRIPTION: Adds the Kotest property testing library dependency for Kotlin multiplatform projects, with an example for JavaScript-specific configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-property:$version'\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: General Purpose Assertions in Kotlin\nDESCRIPTION: Basic assertion functions for equality, boolean expressions, and exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBe(other)\nexpr.shouldBeTrue()\nexpr.shouldBeFalse()\nshouldThrow<T> { block }\nshouldThrowExactly<T> { block }\nshouldThrowAny { block }\nshouldThrowMessage(message) { block }\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit Platform Integration in KoTest\nDESCRIPTION: Basic Gradle configuration to enable JUnit Platform for KoTest. This is required to run KoTest tests as it uses the JUnit Platform under the hood.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Kotlin)\nDESCRIPTION: Enables JUnit Platform test runner for Gradle using Kotlin DSL\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/quick_start.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tests with FunSpec in Kotest\nDESCRIPTION: Demonstrates how to write a simple test using Kotest's FunSpec style, which creates test functions using the 'test' keyword and assertions with the 'shouldBe' operator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/writing_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFirstTestClass : FunSpec({\n\n   test(\"my first test\") {\n      1 + 2 shouldBe 3\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Regex Properties in Kotlin\nDESCRIPTION: Assertion matchers for Regex properties in Kotlin, including pattern comparison, regex options, and pattern matching.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldBeRegex(anotherRegex)\nregex.shouldHavePattern(regexPattern)\nregex.shouldHaveExactRegexOptions(regexOptions)\nregex.shouldIncludeRegexOption(regexOption)\nregex.shouldIncludeRegexOptions(regexOptions)\n```\n\n----------------------------------------\n\nTITLE: Implementing WordSpec Testing Style in Kotest\nDESCRIPTION: WordSpec uses the 'should' keyword to create tests after a context string. This creates a readable test structure that forms sentences in natural language.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"String.length\" should {\n        \"return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing with ShouldSpec in Kotlin\nDESCRIPTION: Shows how to use ShouldSpec style which uses 'should' keyword for test cases and supports nested contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    should(\"return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"String.length\") {\n        should(\"return the length of the string\") {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Tests using DescribeSpec in Kotest\nDESCRIPTION: Demonstrates how to create nested tests using the DescribeSpec style, which allows organizing tests in a hierarchical structure using describe and it blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/writing_tests.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NestedTestExamples : DescribeSpec({\n\n   describe(\"an outer test\") {\n\n      it(\"an inner test\") {\n        1 + 2 shouldBe 3\n      }\n\n      it(\"an inner test too!\") {\n        3 + 4 shouldBe 7\n      }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing FeatureSpec Testing Style in Kotest\nDESCRIPTION: FeatureSpec uses 'feature' and 'scenario' keywords, similar to Cucumber, for organizing tests. This style is ideal for teams familiar with Gherkin syntax or wanting to align tests with feature-based requirements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"the can of coke\") {\n        scenario(\"should be fizzy when I shake it\") {\n            // test here\n        }\n        scenario(\"and should be tasty\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Callbacks in Kotest Tests\nDESCRIPTION: Demonstrates how to use lifecycle callbacks (beforeEach and afterEach) to execute code before and after each test case. The example shows logging before and after test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/writing_tests.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Callbacks : FunSpec({\n\n   beforeEach {\n      println(\"Hello from $it\")\n   }\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   afterEach {\n      println(\"Goodbye from $it\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Specific Exception Type in Kotest\nDESCRIPTION: This snippet shows how to use the shouldThrow function to assert that a specific type of exception is thrown. It expects an IllegalAccessException to be thrown by the code block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in ShouldSpec\nDESCRIPTION: Shows how to disable tests in ShouldSpec using the xcontext and xshould variants. These allow selectively disabling specific tests or entire test blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"this outer block is enabled\") {\n        xshould(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        should(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining IndexedSeq Interface in Kotlin\nDESCRIPTION: This snippet defines an interface called IndexedSeq with methods for size, adding elements, and checking containment.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_factories.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface IndexedSeq<T> {\n\n    // returns the size of t\n    fun size(): Int\n\n    // returns a new seq with t added\n    fun add(t: T): IndexedSeq<T>\n\n    // returns true if this seq contains t\n    fun contains(t: T): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration to StringSpec Tests\nDESCRIPTION: StringSpec allows adding configuration to tests using the config() function. This example shows how to disable a test and set it to run multiple times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\".config(enabled = false, invocations = 3) {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing AnnotationSpec with JUnit-style Annotations\nDESCRIPTION: Shows how to use AnnotationSpec with JUnit-style annotations (@BeforeEach, @Test) for defining test lifecycle and test methods. This approach is particularly useful when migrating from JUnit to Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n    @BeforeEach\n    fun beforeTest() {\n        println(\"Before each test\")\n    }\n\n    @Test\n    fun test1() {\n        1 shouldBe 1\n    }\n\n    @Test\n    fun test2() {\n        3 shouldBe 3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Kotest JVM Tests\nDESCRIPTION: Configures Gradle to use JUnit Platform for running Kotest tests on the JVM. Adds the necessary task configuration and dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-runner-junit5:$version'\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Tests with Context in Kotest\nDESCRIPTION: Example showing how to write data-driven tests using Kotest's FunSpec with a context wrapper for better organization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  context(\"Pythag triples tests\") {\n    withData(\n      PythagTriple(3, 4, 5),\n      PythagTriple(6, 8, 10),\n      PythagTriple(8, 15, 17),\n      PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n      isPythagTriple(a, b, c) shouldBe true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Table Testing with forAll in Kotest\nDESCRIPTION: Demonstrates how to use the forAll function with row objects to test square root calculations with multiple input combinations. The test will automatically infer parameter types and provide detailed failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forAll(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Library to Multiplatform Projects\nDESCRIPTION: Configures the Kotest assertions library for a Kotlin multiplatform project, with an example for JavaScript-specific configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-assertions-core:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core Dependency in Gradle\nDESCRIPTION: Adds the Kotest assertions core library as a test dependency in a Gradle build file. This provides the assertion functions for test verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest with Gradle and Kotlin DSL\nDESCRIPTION: Sets up the JUnit Platform for Kotest testing in a Gradle project using Kotlin DSL. Configures all Test tasks to use JUnit Platform.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertSoftly for Multiple Assertions in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use the assertSoftly function to perform multiple assertions in a single block. If any assertions fail, the test continues and all failures are reported at the end of the block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/soft_assertions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions in Kotlin with Kotest\nDESCRIPTION: Shows how to chain multiple assertions in Kotest. This example demonstrates string-specific matchers and file-related matchers, illustrating the versatility of Kotest's assertion library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n           .shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n           .shouldStartWith(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest with Gradle and Groovy\nDESCRIPTION: Sets up the JUnit Platform for Kotest testing in a Gradle project using Groovy DSL. This enables the test framework to run Kotest tests through JUnit5.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: BDD Testing with BehaviorSpec in Kotlin\nDESCRIPTION: Shows BehaviorSpec style which supports BDD-style testing using given/when/then keywords. Includes examples of nested contexts and disabled tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    context(\"a broomstick should be able to be fly and come back on it's own\") {\n        given(\"a broomstick\") {\n            `when`(\"I sit on it\") {\n                then(\"I should be able to fly\") {\n                    // test code\n                }\n            }\n            `when`(\"I throw it away\") {\n                then(\"it should come back\") {\n                    // test code\n                }\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        and(\"a witch\") {\n            `when`(\"The witch sits on it\") {\n                and(\"she laughs hysterically\") {\n                    then(\"She should be able to fly\") {\n                        // test code\n                    }\n                }\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    xgiven(\"this is disabled\") {\n        When(\"disabled by inheritance from the parent\") {\n            then(\"disabled by inheritance from its grandparent\") {\n                // disabled test\n            }\n        }\n    }\n    given(\"this is active\") {\n        When(\"this is active too\") {\n            xthen(\"this is disabled\") {\n               // disabled test\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using EnabledIf Function for Dynamic Test Activation in Kotest\nDESCRIPTION: Demonstrates using the 'enabledIf' function that is evaluated at runtime for each test execution. The function has access to the TestCase object, allowing complex conditional logic based on test properties and external factors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/config_enabled.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: EnabledIf = { !(it.name.testName.startsWith(\"danger\") && isFriday()) }\n\n\"danger Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Table in Kotlin for Kotest\nDESCRIPTION: This snippet demonstrates how to define a table of data in Kotlin code for use in Kotest table-driven tests. It includes headers and rows with different data types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/table_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval table = table(\n  headers(\"id\", \"name\", \"username\"),\n  row(4, \"Jean-Michel Fayard\", \"jmfayard\"),\n  row(6, \"Louis CAD\", \"LouisCAD\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Nested Data Tests with Custom Test Names in Kotest\nDESCRIPTION: This example extends the basic nested data tests by adding custom test names to the second level of nesting. It uses a lambda function to generate descriptive test names based on the HTTP method being tested.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/nested.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n    val services = listOf(\n       \"http://internal.foo\",\n       \"http://internal.bar\",\n       \"http://public.baz\",\n    )\n\n    val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n    withData(services) { service ->\n       withData<String>({ \"should support HTTP $it\" }, methods) { method ->\n          // test service against method\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WordSpec in Kotlin with Kotest\nDESCRIPTION: Shows how to use WordSpec style in Kotest, which uses the 'should' keyword and allows nesting with 'When'. It demonstrates basic usage and nested blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"String.length\" should {\n        \"return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"Hello\" When {\n        \"asked for length\" should {\n            \"return 5\" {\n                \"Hello\".length shouldBe 5\n            }\n        }\n        \"appended to Bob\" should {\n            \"return Hello Bob\" {\n                \"Hello \" + \"Bob\" shouldBe \"Hello Bob\"\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing MockServer Test in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to set up a MockServer test using Kotest's FunSpec. The example shows configuration of mock HTTP endpoints, request/response handling, and validation using Kotest assertions. It includes setup of a login endpoint that accepts POST requests with JSON payload and returns specific status codes and headers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/mockserver.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyMockServerTest : FunSpec() {\n  init {\n\n      // this attaches the server to the lifeycle of the spec\n      listener(MockServerListener(1080))\n\n      // we can use the client to create routes. Here we are setting them up\n      // before each test by using the beforeTest callback.\n      beforeTest {\n         MockServerClient(\"localhost\", 1080).`when`(\n            HttpRequest.request()\n               .withMethod(\"POST\")\n               .withPath(\"/login\")\n               .withHeader(\"Content-Type\", \"application/json\")\n               .withBody(\"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\")\n         ).respond(\n            HttpResponse.response()\n               .withStatusCode(202)\n               .withHeader(\"X-Test\", \"foo\")\n         )\n      }\n\n      // this test will confirm the endpoint works\n      test(\"login endpoint should accept username and password json\") {\n\n         // using the ktor client to send requests\n         val client = HttpClient(CIO)\n         val resp = client.post<io.ktor.client.statement.HttpResponse>(\"http://localhost:1080/login\") {\n            contentType(ContentType.Application.Json)\n            body = \"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\"\n         }\n\n         // these handy matchers come from the kotest-assertions-ktor module\n         resp.shouldHaveStatus(HttpStatusCode.Accepted)\n         resp.shouldHaveHeader(\"X-Test\", \"foo\")\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with WordSpec in Kotlin\nDESCRIPTION: Shows WordSpec style which uses 'should' keyword with nested contexts for organizing tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"String.length\" should {\n        \"return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Property Testing with checkAll in Kotlin\nDESCRIPTION: Shows how to use checkAll function for property testing with assertions. Instead of returning a boolean, this approach uses assertion functions to verify properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/test_functions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      checkAll<String, String> { a, b ->\n         a + b shouldHaveLength a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Matcher Usage Styles in Kotlin\nDESCRIPTION: This snippet illustrates the two styles of using Kotest matchers: extension functions and infix functions. It also shows how to negate matchers using 'shouldNot' and 'shouldNot' prefixed functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldBe(b)\na.shouldStartWith(\"foo\")\n\na shouldBe b\na should startWith(\"foo\")\n\na shouldNot startWith(\"boo\")\na.shouldNotStartWith(\"boo\")\n```\n\n----------------------------------------\n\nTITLE: Combining Spec and Test Filters in Kotest\nDESCRIPTION: Command demonstrating how to combine both spec and test filters to run only tests containing 'Foo' within a specific package structure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/gradle.md#2025-04-13_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*' -Dkotest.filter.tests='*Foo*'\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Tests at Runtime in Kotest\nDESCRIPTION: Demonstrates how to dynamically generate tests at runtime using Kotlin collections and iteration, a powerful feature that allows for programmatic test creation rather than being limited to compile-time definition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/writing_tests.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n    listOf(\n      \"sam\",\n      \"pam\",\n      \"tim\",\n    ).forEach {\n       test(\"$it should be a three letter name\") {\n           it.shouldHaveLength(3)\n       }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   test(\"pam should be a three letter name\") {\n      \"pam\".shouldHaveLength(3)\n   }\n\n   test(\"tim should be a three letter name\") {\n     \"tim\".shouldHaveLength(3)\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Tests with StringSpec Style in Kotest\nDESCRIPTION: This snippet demonstrates how to write basic tests using Kotest's StringSpec style. It shows two simple test cases: one verifying string length and another checking for string prefix using Kotest's assertion syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n   \"length should return size of string\" {\n      \"hello\".length shouldBe 5\n   }\n   \"startsWith should test for a prefix\" {\n      \"world\" should startWith(\"wor\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Functions for Custom Matcher in Kotlin\nDESCRIPTION: This snippet demonstrates how to create extension functions for the custom string length matcher, following Kotest's naming conventions and allowing for method chaining.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/custom.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldHaveLength(length: Int): String {\n  this should haveLength(length)\n  return this\n}\n\nfun String.shouldNotHaveLength(length: Int): String {\n  this shouldNot haveLength(length)\n  return this\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Tests with StringSpec in Kotest\nDESCRIPTION: This example demonstrates how to write simple tests using Kotest's StringSpec style. The test checks string operations including length verification and prefix testing using Kotest's assertion syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n   \"length should return size of string\" {\n      \"hello\".length shouldBe 5\n   }\n   \"startsWith should test for a prefix\" {\n      \"world\" should startWith(\"wor\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Simple Eventually Testing in Kotlin with Kotest\nDESCRIPTION: Demonstrates basic usage of eventually function to test asynchronous operations. The example shows checking a user repository after sending an asynchronous message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"check if user repository has one row after message is sent\") {\n      sendMessage()\n      eventually(5.seconds) {\n        userRepository.size() shouldBe 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ShouldSpec Style in Kotest\nDESCRIPTION: ShouldSpec is similar to FunSpec but uses the 'should' keyword instead of 'test'. Tests can be nested in context blocks and disabled with xshould/xcontext variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    should(\"return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"String.length\") {\n        should(\"return the length of the string\") {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"this outer block is enabled\") {\n        xshould(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        should(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Collection Content Validation in Kotlin Kotest\nDESCRIPTION: Methods for validating collection contents including duplicate checking, null checking, and exact content matching.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/collections.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainDuplicates()\ncollection.shouldContainExactly(e1, e2, ..., en)\ncollection.shouldContainExactlyInAnyOrder(e1, e2, ..., en)\ncollection.shouldContainNoNulls()\ncollection.shouldContainNull()\ncollection.shouldContainOnlyNulls()\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core for JavaScript (Gradle)\nDESCRIPTION: Adds the Kotest assertions core dependency specifically to the JavaScript target in a multiplatform project using Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-assertions-core:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tests with DescribeSpec in Kotlin\nDESCRIPTION: Examples of using DescribeSpec style which follows describe/it pattern common in Ruby and JavaScript testing frameworks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"score\") {\n        it(\"start as zero\") {\n            // test here\n        }\n        describe(\"with a strike\") {\n            it(\"adds ten\") {\n                // test here\n            }\n            it(\"carries strike to the next frame\") {\n                // test here\n            }\n        }\n\n        describe(\"for the opposite team\") {\n            it(\"Should negate one score\") {\n                // test here\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Writing Simple Tests with Kotest StringSpec in Kotlin\nDESCRIPTION: Demonstrates how to write basic tests using Kotest's StringSpec style. It shows examples of string length and prefix testing using Kotest's assertion functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n   \"length should return size of string\" {\n      \"hello\".length shouldBe 5\n   }\n   \"startsWith should test for a prefix\" {\n      \"world\" should startWith(\"wor\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Receiver-Based Soft Assertions in Kotest\nDESCRIPTION: An alternative version of assertSoftly that takes a test target as its first parameter and a lambda with the test target as its receiver, which reduces repetition when making multiple assertions on the same object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/soft_assertions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly(foo) {\n    shouldNotEndWith(\"b\")\n    length shouldBe 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FunSpec Testing Style in Kotlin\nDESCRIPTION: Demonstrates how to create tests using FunSpec style, which uses test functions with string descriptions and lambda implementations. Shows both basic test creation and test disabling using xcontext and xtest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    test(\"String length should return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    context(\"this outer block is enabled\") {\n        xtest(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        test(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Tests in Kotlin for Kotest\nDESCRIPTION: Demonstrates how to use Property Tests in Kotest to automatically generate values for testing. It shows an example of testing string concatenation properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_42\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n\n  \"String size\" {\n    forAll({ a: String, b: String ->\n      (a + b).length == a.length + b.length\n    })\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Soft Assertion Block in Kotlin\nDESCRIPTION: Demonstrates the basic usage of assertSoftly block to perform multiple assertions that will all be evaluated regardless of failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/soft_assertions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a MockServer Test with Kotest\nDESCRIPTION: A complete example showing how to set up and use MockServer in a Kotest test. It demonstrates configuring the MockServerListener, setting up HTTP routes with MockServerClient, and validating responses using Ktor client and Kotest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/mockserver.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyMockServerTest : FunSpec() {\n  init {\n\n      // this attaches the server to the lifeycle of the spec\n      listener(MockServerListener(1080))\n\n      // we can use the client to create routes. Here we are setting them up\n      // before each test by using the beforeTest callback.\n      beforeTest {\n         MockServerClient(\"localhost\", 1080).`when`(\n            HttpRequest.request()\n               .withMethod(\"POST\")\n               .withPath(\"/login\")\n               .withHeader(\"Content-Type\", \"application/json\")\n               .withBody(\"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\")\n         ).respond(\n            HttpResponse.response()\n               .withStatusCode(202)\n               .withHeader(\"X-Test\", \"foo\")\n         )\n      }\n\n      // this test will confirm the endpoint works\n      test(\"login endpoint should accept username and password json\") {\n\n         // using the ktor client to send requests\n         val client = HttpClient(CIO)\n         val resp = client.post<io.ktor.client.statement.HttpResponse>(\"http://localhost:1080/login\") {\n            contentType(ContentType.Application.Json)\n            body = \"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\"\n         }\n\n         // these handy matchers come from the kotest-assertions-ktor module\n         resp.shouldHaveStatus(HttpStatusCode.Accepted)\n         resp.shouldHaveHeader(\"X-Test\", \"foo\")\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions in Kotlin with Kotest\nDESCRIPTION: Shows how to chain multiple assertions in Kotest. This example demonstrates string-specific matchers and file-related matchers, illustrating the versatility of Kotest's assertion library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n           .shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n           .shouldStartWith(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Test in Kotest using FunSpec\nDESCRIPTION: This snippet demonstrates how to create a simple test class in Kotest using the FunSpec style. It shows the basic structure of a test, including the use of the 'test' keyword and an assertion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/writing_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFirstTestClass : FunSpec({\n\n   test(\"my first test\") {\n      1 + 2 shouldBe 3\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Mapping Values in Kotest Arb Generators\nDESCRIPTION: Demonstrates how to transform the values generated by an Arb using the map function. The example shows converting integers to their string representation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genops.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval integerStrings: Arb<String> = Arb.int().map { it.toString() }\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Matchers with Extension Functions\nDESCRIPTION: Demonstrates how to use Kotest matchers with the extension function style, which provides IDE autocompletion support.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldBe(b)\na.shouldStartWith(\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Running Assertions Against All Table Rows\nDESCRIPTION: Executes assertions against each row in the data table. This approach runs all test cases even if one fails, allowing for comprehensive reporting of multiple failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/table_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"table-driven testing\") {\n    table.forAll { id, name, username ->\n      id shouldBeGreaterThan 0\n      username shouldNotBe \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Driven Testing with Kotest forAll Function\nDESCRIPTION: Demonstrates how to use Kotest's data driven testing feature with the forAll function to test multiple Pythagorean triples. Each input row automatically generates a separate test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.3.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n    forAll(\n       PythagTriple(3, 4, 5),\n       PythagTriple(6, 8, 10),\n       PythagTriple(8, 15, 17),\n       PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n        isPythagTriple(a, b, c) shouldBe true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Time Component Comparison Matchers in Kotlin with Klock\nDESCRIPTION: Assertion methods for comparing time components between two time instances including hours, minutes, seconds, and milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/klock.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(time)\ntime.shouldHaveHours(hours)\ntime.shouldHaveSameMinutesAs(time)\ntime.shouldHaveMinutes(minutes)\ntime.shouldHaveSameSeconds(time)\ntime.shouldHaveSeconds(seconds)\ntime.shouldHaveSameMillisecondsAs(time)\ntime.shouldHaveMilliseconds(millis)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tests with FunSpec in Kotlin\nDESCRIPTION: Example showing how to write tests using FunSpec style, which uses 'test' functions for defining test cases. Includes basic test case and disabled test examples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    test(\"String length should return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    context(\"this outer block is enabled\") {\n        xtest(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        test(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using StringSpec in Kotlin with Kotest\nDESCRIPTION: Shows how to use StringSpec style in Kotest, which offers a minimal syntax for writing tests. It also demonstrates how to add configuration to tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\" {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\".config(enabled = false, invocations = 3) {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Soft Assertions in Kotlin using Kotest\nDESCRIPTION: This snippet demonstrates the basic usage of the 'assertSoftly' function in Kotest. It allows multiple assertions to be performed, with all failures reported at the end of the block rather than stopping at the first failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/soft_assertions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Test Configuration in Kotest\nDESCRIPTION: Demonstrates how to configure test execution parameters including timeout, invocations, threads, and tags using the config block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n   \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing BehaviorSpec in Kotlin with Kotest\nDESCRIPTION: Demonstrates the BehaviorSpec style in Kotest, which uses 'given', 'when', and 'then' keywords. It shows basic usage, nested blocks with 'and', and how to disable tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        `when`(\"I sit on it\") {\n            then(\"I should be able to fly\") {\n                // test code\n            }\n        }\n        `when`(\"I throw it away\") {\n            then(\"it should come back\") {\n                // test code\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        and(\"a witch\") {\n            `when`(\"The witch sits on it\") {\n                and(\"she laughs hysterically\") {\n                    then(\"She should be able to fly\") {\n                        // test code\n                    }\n                }\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    xgiven(\"this is disabled\") {\n        When(\"disabled by inheritance from the parent\") {\n            then(\"disabled by inheritance from its grandparent\") {\n                // disabled test\n            }\n        }\n    }\n    given(\"this is active\") {\n        When(\"this is active too\") {\n            xthen(\"this is disabled\") {\n               // disabled test\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using DSL Methods for Lifecycle Hooks in Kotest\nDESCRIPTION: Example demonstrating how to use inline DSL methods like beforeTest and afterTest directly within a Kotest WordSpec. These methods create and register a TestListener behind the scenes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/lifecycle_hooks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec({\n  beforeTest {\n    println(\"Starting a test $it\")\n  }\n  afterTest { (test, result) ->\n    println(\"Finished spec with result $result\")\n  }\n  \"this test\" should {\n    \"be alive\" {\n      println(\"Johnny5 is alive!\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Testing with forAll in Kotlin\nDESCRIPTION: Demonstrates how to use the forAll function for data-driven testing in Kotest. It tests square root calculations using multiple input-output pairs.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forall(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Coroutines in Kotest vs JUnit\nDESCRIPTION: Demonstrates how Kotest simplifies coroutine testing by making every test a coroutine, eliminating the need for runBlocking and providing built-in coroutine debugging.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/why.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrunBlocking {} // Not needed in Kotest as tests are already coroutines\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exhaustive Generator for Single Digit Primes in Kotlin\nDESCRIPTION: Demonstrates how to create a custom Exhaustive generator for single digit prime numbers using the exhaustive() extension function on a List in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/customgens.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval singleDigitPrimes = listOf(2,3,5,7).exhaustive()\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Throws in Kotlin using Kotest\nDESCRIPTION: Demonstrates how to test for a specific exception type and verify its message content using Kotest's shouldThrow function. The example shows testing for IllegalAccessException and checking its message using string matching.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n   // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Test with checkAll in Kotlin\nDESCRIPTION: Shows how to use checkAll function to test the same string concatenation property using assertions instead of boolean returns.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/test_functions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      checkAll<String, String> { a, b ->\n         a + b shouldHaveLength a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Test with forAll in Kotlin\nDESCRIPTION: Demonstrates using forAll function to test a string concatenation property. The test verifies that the length of two concatenated strings equals the sum of their individual lengths.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/test_functions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String> { a, b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Spec Lifecycle Extensions in Kotlin\nDESCRIPTION: Example of creating a custom extension that implements BeforeSpecListener and AfterSpecListener interfaces to perform setup and teardown operations before and after a spec runs. The extension is registered with a WordSpec using the extension() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/extensions/extensions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestListener : BeforeSpecListener, AfterSpecListener {\n   override suspend fun beforeSpec(spec:Spec) {\n      // power up kafka\n   }\n   override suspend fun afterSpec(spec: Spec) {\n      // shutdown kafka\n   }\n}\n\n\nclass TestSpec : WordSpec({\n    extension(MyTestListener())\n    // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocking and Non-blocking Tests in Kotest\nDESCRIPTION: Demonstrates how to configure tests for both blocking and non-blocking operations in Kotest. Shows the usage of blockingTest flag for thread-blocking operations and timeout configuration for both scenarios. The blocking test uses Thread.sleep() while the non-blocking test uses delay().\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/timeouts/blocking_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyBlockingTest : FunSpec() {\n  init {\n\n    test(\"interrupt me!\").config(blockingTest = true, timeout = 10.seconds) {\n       Thread.sleep(100000000)\n    }\n\n    test(\"uses suspension\").config(timeout = 10.seconds) {\n      delay(100000000)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Test Ordering in Kotest\nDESCRIPTION: Configures a Kotest StringSpec to run tests in a random order. This is achieved by overriding the testCaseOrder function to return TestCaseOrder.Random, allowing tests to execute in an unpredictable sequence.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RandomSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Random\n\n    init {\n      \"foo\" {\n        // This test may run first or second\n      }\n\n      \"bar\" {\n        // This test may run first or second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Property-Based Testing in Kotest with Kotlin\nDESCRIPTION: Shows how to implement property-based testing using Kotest's checkAll function. The example demonstrates testing a property of string concatenation with automatically generated test data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n  \"String size\" {\n    checkAll<String, String> { a, b ->\n      (a + b) shouldHaveLength a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Spec Level Extensions in Kotlin\nDESCRIPTION: Example showing how to create and register before/after spec listeners to handle setup and teardown operations. The listener implements BeforeSpecListener and AfterSpecListener interfaces to execute code before and after spec execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/extensions/extensions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestListener : BeforeSpecListener, AfterSpecListener {\n   override suspend fun beforeSpec(spec:Spec) {\n      // power up kafka\n   }\n   override suspend fun afterSpec(spec: Spec) {\n      // shutdown kafka\n   }\n}\n\n\nclass TestSpec : WordSpec({\n    extension(MyTestListener())\n    // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Defining System Properties for Kotest Framework Configuration in Kotlin\nDESCRIPTION: This Kotlin object defines all the system properties that can be used to configure the Kotest testing framework. It includes properties for controlling test execution, filtering, timeouts, assertion behavior, parallelism, and many other aspects of the framework's functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/config_props.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotest.core.internal\n\nobject KotestEngineProperties {\n\n   const val scriptsEnabled = \"kotest.framework.scripts.enabled\"\n\n   const val dumpConfig = \"kotest.framework.dump.config\"\n\n   /**\n    * Sets the tag expression that determines included/excluded tags.\n    */\n   const val tagExpression = \"kotest.tags\"\n\n   const val excludeTags = \"kotest.tags.exclude\"\n\n   const val includeTags = \"kotest.tags.include\"\n\n   /**\n    * A regex expression that is used to match the test [io.kotest.core.descriptors.Descriptor]'s path\n    * to determine if a test should be included in the test plan or not.\n    */\n   const val filterTests = \"kotest.filter.tests\"\n\n   /**\n    * A regex expression that is used to match the [io.kotest.mpp.bestName] of a class\n    * to determine if a spec should be included in the test plan or not.\n    */\n   const val filterSpecs = \"kotest.filter.specs\"\n\n   const val propertiesFilename = \"kotest.properties.filename\"\n\n   /**\n    * If set to true, then source ref's will not be created for test cases.\n    * This may speed up builds (as the engine will not need to create stack traces to\n    * generate line numbers) but will also reduce functionality in the intellij plugin\n    * (by limiting the ability to drill directly into the test inside a file).\n    */\n   const val disableSourceRef = \"kotest.framework.sourceref.disable\"\n\n   /**\n    * If set to true, disables the use of '!' as a prefix to disable tests.\n    */\n   const val disableBangPrefix = \"kotest.bang.disable\"\n\n   /**\n    * The default [io.kotest.core.spec.IsolationMode] for specs.\n    */\n   const val isolationMode = \"kotest.framework.isolation.mode\"\n\n   /**\n    * The default [io.kotest.core.test.AssertionMode] for tests.\n    */\n   const val assertionMode = \"kotest.framework.assertion.mode\"\n\n   /**\n    * The default parallelism for specs.\n    */\n   const val parallelism = \"kotest.framework.parallelism\"\n\n   /**\n    * The default timeout for test cases.\n    */\n   const val timeout = \"kotest.framework.timeout\"\n\n   /**\n    * The default timeout for the entire test suite.\n    */\n   const val projectTimeout = \"kotest.framework.projecttimeout\"\n\n   const val logLevel = \"kotest.framework.loglevel\"\n\n   /**\n    * The default timeout for each invocation of a test case.\n    */\n   const val invocationTimeout = \"kotest.framework.invocation.timeout\"\n\n   const val disableTestNestedJarScanning = \"kotest.framework.disable.test.nested.jar.scanning\"\n\n   const val concurrentSpecs = \"kotest.framework.spec.concurrent\"\n\n   const val concurrentTests = \"kotest.framework.test.concurrent\"\n\n   /**\n    * Disable scanning the classpath for configuration classes by setting this property to true\n    */\n   const val disableConfigurationClassPathScanning = \"kotest.framework.classpath.scanning.config.disable\"\n\n   /**\n    * Specify a fully qualified name to use for project config.\n    * This class will be instantiated via reflection.\n    */\n   const val configurationClassName = \"kotest.framework.config.fqn\"\n\n   /**\n    * Disable scanning the classpath for listeners with @AutoScan by setting this property to true\n    */\n   const val disableAutoScanClassPathScanning = \"kotest.framework.classpath.scanning.autoscan.disable\"\n\n   const val allowMultilineTestName = \"kotest.framework.testname.multiline\"\n\n   /**\n    *  If set -> filter testCases by this severity level and higher, else running all\n    */\n   const val testSeverity = \"kotest.framework.test.severity\"\n\n   /**\n    * Enable assert softly globally.\n    * */\n   const val globalAssertSoftly = \"kotest.framework.assertion.globalassertsoftly\"\n\n   /**\n    * Appends all tags associated with a test case to its display name.\n    * */\n   const val testNameAppendTags = \"kotest.framework.testname.append.tags\"\n\n   /**\n    * Controls whether classes will inherit tags from their supertypes. Default false\n    */\n   const val tagInheritance = \"kotest.framework.tag.inheritance\"\n\n   /**\n    * Controls the [io.kotest.core.names.DuplicateTestNameMode] mode.\n    */\n   const val duplicateTestNameMode = \"kotest.framework.testname.duplicate.mode\"\n\n   const val disableJarDiscovery = \"kotest.framework.discovery.jar.scan.disable\"\n}\n```\n\n----------------------------------------\n\nTITLE: Type Assertion Matchers in Kotest\nDESCRIPTION: Matchers for type checking, instance verification, and null checking in Kotest\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBeSameInstanceAs(other)\nobj.shouldBeTypeOf<T>()\nobj.shouldBeInstanceOf<T>()\nobj.shouldHaveAnnotation(annotationClass)\nobj.shouldBeNull()\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing with Kotest's forAll Function\nDESCRIPTION: This snippet demonstrates data-driven testing in Kotest using the forAll function with row parameters. The test verifies that Math.max returns the correct maximum value for different number pairs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n   \"maximum of two numbers\" {\n      forAll(\n         row(1, 5, 5),\n         row(1, 0, 1),\n         row(0, 0, 0)\n      ) { a, b, max ->\n         Math.max(a, b) shouldBe max\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Dependency for JVM/Gradle\nDESCRIPTION: This snippet shows how to add the Kotest property testing dependency to a Gradle build file for JVM projects. It includes the dependency in the testImplementation configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n   testImplementation(\"io.kotest:kotest-property:$version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Collection Operations in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates various assertion functions for collections in Kotest. It includes checks for subset matching, element containment, and value presence.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\niterable.shouldMatchInOrderSubset(assertions)\nvalue.shouldBeOneOf(collection)\ncollection.shouldContainAnyOf(collection)\nvalue.shouldBeIn(collection)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Kotest JVM Tests\nDESCRIPTION: Sets up Gradle to use JUnit Platform for running Kotest tests on the JVM. Includes configuration for both Groovy and Kotlin DSL.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-runner-junit5:$version'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher Extension Functions in Kotest\nDESCRIPTION: Shows how to use the extension function variants of custom matchers for a more concise and readable testing syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/custom.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\".shouldHaveLength(9)\n\"hello bar\".shouldNotHaveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Writing Tests with StringSpec in Kotlin\nDESCRIPTION: Demonstrates StringSpec style which offers minimal syntax for writing tests. Shows basic test definition and configuration options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\" {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\".config(enabled = false, invocations = 3) {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Callbacks in Kotest Tests\nDESCRIPTION: Shows how to implement lifecycle callbacks in Kotest tests using 'beforeEach' and 'afterEach' blocks to set up and tear down test resources.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/writing_tests.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Callbacks : FunSpec({\n\n   beforeEach {\n      println(\"Hello from $it\")\n   }\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   afterEach {\n      println(\"Goodbye from $it\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Tests at Runtime in Kotest\nDESCRIPTION: Demonstrates how to dynamically generate tests at runtime by iterating over a list and creating a test for each element. This showcases Kotest's ability to define tests conditionally during execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/writing_tests.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n    listOf(\n      \"sam\",\n      \"pam\",\n      \"tim\",\n    ).forEach {\n       test(\"$it should be a three letter name\") {\n           it.shouldHaveLength(3)\n       }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependencies with Gradle for JVM\nDESCRIPTION: This snippet shows how to add the kotest-property dependency to a JVM project using Gradle. The dependency provides the property testing functionality and should be added to the testImplementation configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n   testImplementation(\"io.kotest:kotest-property:$version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Numeric Float Values in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces numeric Float values within a specified range, including various edge cases if within range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.numericFloat(min, max)\n```\n\n----------------------------------------\n\nTITLE: Enabling Project-Wide Coroutine Debugging in Kotest\nDESCRIPTION: Demonstrates how to enable coroutine debugging for all tests in a project by configuring it in the ProjectConfig class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val coroutineDebugProbes = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Parallelism Configuration in Kotest\nDESCRIPTION: Configures Kotest to run specs in parallel by setting the parallelism level to 3, allowing multiple specs to execute concurrently to take advantage of multi-core processors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/project_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val parallelism = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Data Driven Testing in Kotest\nDESCRIPTION: This snippet demonstrates how to use the 'forAll' function with 'row' objects to test square roots. It shows how Kotest automatically infers parameter types and provides detailed error messages for failed tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forAll(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Isolation Mode in Kotest Project Config\nDESCRIPTION: Shows how to configure the default isolation mode globally using Kotest's ProjectConfig. This applies the specified isolation mode to all specs unless overridden at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/isolation_mode.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig: AbstractProjectConfig() {\n   override val isolationMode = IsolationMode.InstancePerLeaf\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertSoftly for Multiple Assertions in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates how to use the assertSoftly function in Kotest to perform multiple assertions. If any assertions fail, the test continues to run, and all failures are reported in a single exception at the end of the block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/soft_assertions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency in Gradle\nDESCRIPTION: Adds the Kotest property testing library as a test dependency in a Gradle build file. This provides property-based testing capabilities for JVM projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_14\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-property:$version'\n```\n\n----------------------------------------\n\nTITLE: Asserting Thread Termination in Kotlin\nDESCRIPTION: This snippet demonstrates how to assert that a thread has been terminated using Kotest's assertion library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_24\n\nLANGUAGE: Kotlin\nCODE:\n```\nthread.shouldBeTerminated()\n```\n\n----------------------------------------\n\nTITLE: Building JSON Schema using Kotest DSL\nDESCRIPTION: Shows how to build JSON schemas using Kotest's DSL, including nested schemas and property validation rules.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/json/schema.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval addressSchema = jsonSchema {\n  obj {   // object is reserved, obj was chosen over jsonObject for brevity but could be changed ofc, or jsonObject could be added as alternative.\n    withProperty(\"street\", required = true) { string() }\n    withProperty(\"zipCode\", required = true) {\n      integer {\n        beEven() and beInRange(10000..99999)   // supports constructing a matcher that will be used to test values\n      }\n    }\n    additionalProperties = false   // triggers failure if other properties are defined in actual\n  }\n}\n\nval personSchema = jsonSchema {\n  obj {\n    withProperty(\"name\", required = true) { string() }\n    withProperty(\"address\") { addressSchema() } // Schemas can re-use other schemas 🎉\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DescribeSpec in Kotlin for Kotest\nDESCRIPTION: Demonstration of DescribeSpec, which uses 'describe' and 'it' keywords familiar to Ruby and JavaScript developers. It shows how to nest tests and disable them using 'xdescribe' and 'xit'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"score\") {\n        it(\"start as zero\") {\n            // test here\n        }\n        describe(\"with a strike\") {\n            it(\"adds ten\") {\n                // test here\n            }\n            it(\"carries strike to the next frame\") {\n                // test here\n            }\n        }\n\n        describe(\"for the opposite team\") {\n            it(\"Should negate one score\") {\n                // test here\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"this outer block is enabled\") {\n        xit(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xdescribe(\"this block is disabled\") {\n        it(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor HTTP Client\nDESCRIPTION: Example of using Kotest assertions with Ktor HTTP client to test API responses. Demonstrates how to verify response status and headers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/ktor.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\nval response = client.post(\"http://mydomain.com/foo\")\nresponse.shouldHaveStatus(HttpStatusCode.OK)\nresponse.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n\n```\n\n----------------------------------------\n\nTITLE: Testing Any Exception with shouldThrowAny\nDESCRIPTION: Shows how to test that any exception is thrown using shouldThrowAny, which will catch any type of Throwable. This is useful when the specific exception type is not important.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/exceptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowAny {\n  // test here can throw any type of Throwable!\n}\n```\n\n----------------------------------------\n\nTITLE: Registering TimerListener Project-wide in Kotest (Kotlin)\nDESCRIPTION: This snippet shows how to register the custom TimerListener extension project-wide in Kotest by implementing the AbstractProjectConfig class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/extensions/examples.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyConfig : AbstractProjectConfig() {\n    override fun extensions(): List<Extension> = listOf(TimerListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Lifecycle Callbacks in Kotest\nDESCRIPTION: Shows how to create reusable lifecycle callbacks by defining a named function that can be applied to multiple test classes. This example demonstrates a database reset function used before tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/writing_tests.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval resetDatabase: BeforeTest = {\n  // truncate all tables here\n}\n\nclass ReusableCallbacks : FunSpec({\n\n   beforeTest(resetDatabase)\n\n   test(\"this test will have a sparkling clean database!\") {\n       // test logic here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Tests at Runtime in Kotest\nDESCRIPTION: Demonstrates how to dynamically generate tests at runtime based on a list of values. Each element in the list creates a separate test case, showing the flexibility of Kotest's approach.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/writing_tests.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n    listOf(\n      \"sam\",\n      \"pam\",\n      \"tim\",\n    ).forEach {\n       test(\"$it should be a three letter name\") {\n           it.shouldHaveLength(3)\n       }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Automatically Closing Resources in Kotest with autoClose Method\nDESCRIPTION: This example demonstrates how to use the autoClose method in Kotest to automatically close resources after test execution. The resource (StringReader) implements AutoCloseable and will be closed in reversed declaration order after all tests have completed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/autoclose.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher Extension Functions in Kotlin\nDESCRIPTION: Shows how to use the custom string length matcher extension functions for a more readable and fluent assertion syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/custom.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\".shouldHaveLength(9)\n\"hello bar\".shouldNotHaveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Functions for Custom Matchers in Kotest\nDESCRIPTION: Demonstrates how to create extension functions that wrap custom matchers to provide a more fluent API, following Kotest's shouldXYZ naming convention and allowing method chaining.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/custom.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldHaveLength(length: Int): String {\n  this should haveLength(length)\n  return this\n}\n\nfun String.shouldNotHaveLength(length: Int): String {\n  this shouldNot haveLength(length)\n  return this\n}\n```\n\n----------------------------------------\n\nTITLE: Reflection-based Assertions in Kotest\nDESCRIPTION: Comprehensive set of methods for testing class properties, functions, annotations, and other reflection-based features in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveAnnotations()\nkclass.shouldHaveAnnotations(n)\nkclass.shouldBeAnnotatedWith<T>()\nkclass.shouldBeAnnotatedWith<T> { block }\nkclass.shouldHaveFunction(name)\nkclass.shouldHaveFunction(name) { block }\nkclass.shouldHaveMemberProperty(name)\nkclass.shouldHaveMemberProperty(name) { block }\nkclass.shouldBeSubtypeOf<T>()\nkclass.shouldBeSupertypeOf<T>()\nkclass.shouldBeData()\nkclass.shouldBeSealed()\nkclass.shouldBeCompanion()\nkclass.shouldHavePrimaryConstructor()\nkclass.shouldHaveVisibility(visibility)\n```\n\n----------------------------------------\n\nTITLE: Implementing forAll Property Test in Kotlin with Kotest\nDESCRIPTION: Example of using the forAll function to test a string concatenation property. The test verifies that the length of two concatenated strings equals the sum of their individual lengths, returning a boolean result.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/test_functions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String> { a, b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing FunSpec Style in Kotest\nDESCRIPTION: FunSpec allows you to create tests by using the 'test' function with a string description and a lambda. Tests can be organized in context blocks and disabled using xtest/xcontext variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    test(\"String length should return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    context(\"this outer block is enabled\") {\n        xtest(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        test(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Lifecycle Hook Implementation in Kotest\nDESCRIPTION: Demonstrates basic usage of beforeTest and afterTest hooks in a WordSpec test class using DSL methods. Shows how to execute code before and after individual test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/lifecycle_hooks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec({\n  beforeTest {\n    println(\"Starting a test $it\")\n  }\n  afterTest { (test, result) ->\n    println(\"Finished spec with result $result\")\n  }\n  \"this test\" should {\n    \"be alive\" {\n      println(\"Johnny5 is alive!\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: String Assertions in Kotest\nDESCRIPTION: Assertions for validating string properties and contents in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nstr.shouldBeBlank()\nstr.shouldBeEmpty()\nstr.shouldBeLowerCase()\nstr.shouldBeUpperCase()\nstr.shouldContain(\"substr\")\nstr.shouldContain(regex)\nstr.shouldContainADigit()\nstr.shouldContainIgnoringCase(substring)\nstr.shouldContainOnlyDigits()\nstr.shouldBeInteger([radix])\nstr.shouldContainOnlyOnce(substring)\nstr.shouldEndWith(\"suffix\")\nstr.shouldHaveLength(length)\nstr.shouldHaveLineCount(count)\nstr.shouldHaveMaxLength(max)\nstr.shouldHaveMinLength(min)\nstr.shouldHaveSameLengthAs(anotherString)\nstr.shouldMatch(regex)\nstr.shouldStartWith(\"prefix\")\nstr.shouldBeEqualIgnoringCase(other)\nstr.shouldBeTruthy()\nstr.shouldBeFalsy()\n```\n\n----------------------------------------\n\nTITLE: Exception and Result Handling Assertions in Kotest\nDESCRIPTION: Methods for verifying exception details and Result type outcomes. Includes success/failure checking and exception type verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nthrowable.shouldHaveMessage(message)\nthrowable.shouldHaveCause()\nthrowable.shouldHaveCause { block }\nthrowable.shouldHaveCauseInstanceOf<T>()\nthrowable.shouldHaveCauseOfType<T>()\n\nresult.shouldBeSuccess()\nresult.shouldBeSuccess(value)\nresult.shouldBeSuccess(block)\nresult.shouldBeFailure()\nresult.shouldBeFailureOfType<Type : Throwable>()\nresult.shouldBeFailure(block)\n```\n\n----------------------------------------\n\nTITLE: Collection Assertions in Kotest\nDESCRIPTION: Comprehensive set of methods for asserting Collection properties including content verification, size checks, ordering, and element validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeEmpty()\ncollection.shouldBeUnique()\ncollection.shouldContain(element)\ncollection.shouldContainAll(e1, e2, ..., en)\ncollection.shouldContainDuplicates()\ncollection.shouldContainExactly()\ncollection.shouldContainExactlyInAnyOrder()\ncollection.shouldContainAllInAnyOrder()\ncollection.shouldContainNoNulls()\ncollection.shouldContainNull()\ncollection.shouldContainOnlyNulls()\ncollection.shouldHaveSingleElement(element)\ncollection.shouldHaveSingleElement { block }\ncollection.shouldHaveSize(length)\ncollection.shouldBeSingleton()\ncollection.shouldBeSingleton { block }\ncollection.shouldHaveLowerBound(element)\ncollection.shouldHaveUpperBound(element)\ncollection.shouldBeSmallerThan(col)\ncollection.shouldBeLargerThan(col)\ncollection.shouldBeSameSizeAs(col)\ncollection.shouldHaveAtLeastSize(n)\ncollection.shouldHaveAtMostSize(n)\nlist.shouldBeSorted()\nlist.shouldBeSortedBy { transform }\nlist.shouldContainInOrder(other)\nlist.shouldExistInOrder({ element }, ...)\nlist.shouldHaveElementAt(index, element)\nlist.shouldStartWith(lst)\nlist.shouldEndWith(lst)\niterable.shouldMatchEach(assertions)\niterable.shouldMatchInOrder(assertions)\n```\n\n----------------------------------------\n\nTITLE: Basic Mockk Usage with Kotest FunSpec\nDESCRIPTION: Demonstrates how to use mockk mocking library in a Kotest FunSpec test. This example shows the basic setup for creating a mock repository and verifying interactions with it.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/integrations/mocks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution in Kotest with Kotlin\nDESCRIPTION: Shows how to use the config function in Kotest to fine-tune test execution, including setting timeout, invocations, threads, and tags for individual tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/index.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n  \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n    // test here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Table Testing with Square Roots\nDESCRIPTION: Demonstrates basic table testing using forAll function to test square root calculations with multiple input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forAll(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Mocking Example with Kotest and mockk\nDESCRIPTION: Demonstrates a simple test using mockk for mocking within a Kotest FunSpec. Shows how to create a mock, set expectations, and verify calls.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/integrations/mocks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Property Test Iterations in Kotest\nDESCRIPTION: Example showing how to customize the number of iterations for a property test. Instead of the default 1000 iterations, this test will run 10,000 times with two double parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/test_functions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"a many iterations test\" {\n      checkAll<Double, Double>(10_000) { a, b ->\n         // test here\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Nesting Tests in ShouldSpec\nDESCRIPTION: Demonstrates how to nest test cases within context blocks in ShouldSpec. This allows for grouping related tests and providing additional context for test organization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"String.length\") {\n        should(\"return the length of the string\") {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks with DSL Methods in Kotest\nDESCRIPTION: This example demonstrates how to use DSL methods to define lifecycle hooks directly within a test specification. The beforeTest and afterTest hooks are used to execute code before and after each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/lifecycle_hooks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec({\n  beforeTest {\n    println(\"Starting a test $it\")\n  }\n  afterTest { (test, result) ->\n    println(\"Finished spec with result $result\")\n  }\n  \"this test\" should {\n    \"be alive\" {\n      println(\"Johnny5 is alive!\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting ZonedDateTime Properties in Kotlin using Kotest\nDESCRIPTION: Shows assertions for ZonedDateTime objects in Kotest. Includes checks for current date, instant equality, and time proximity.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nzonedDateTime.shouldBeToday()\nzonedDateTime.shouldHaveSameInstantAs(other: ZonedDateTime)\nzonedDateTime.shouldBe(other plusOrMinus 1.minutes)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in FunSpec with xcontext and xtest\nDESCRIPTION: FunSpec provides xcontext and xtest variants to disable specific tests or blocks of tests while keeping them in the codebase. This allows for temporarily skipping tests without removing them.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    context(\"this outer block is enabled\") {\n        xtest(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        test(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Table Testing in StringSpec with Multiple Parameters\nDESCRIPTION: Example of using table testing within a StringSpec to test string concatenation with multiple input combinations. This demonstrates how to test with three input parameters and one expected output.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forAll(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Writing Tests with StringSpec in Kotlin\nDESCRIPTION: Demonstrates the minimal syntax of StringSpec style, allowing direct string-to-lambda test definitions with optional configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\" {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\".config(enabled = false, invocations = 3) {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Property Test with Built-in Integer Shrinking\nDESCRIPTION: Demonstrates a simple property test using Kotest's built-in positive integer generator with default shrinking behavior. The test verifies a property calculation against generated integers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/shrinking.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Using PropTestListener for Setup and Teardown in Kotest Property Tests\nDESCRIPTION: Demonstrates how to register a PropTestListener with PropTestConfig to perform setup and teardown operations for each iteration of a property test. This allows for proper resource management during testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some property test which require setup and tear down in each iteration\" {\n      forAll<String, String>(PropTestConfig(listeners = listOf(MyPropTestListener))) { a,b ->\n         // some assertion\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Table Testing with forAll in Kotest\nDESCRIPTION: A simple example showing how to use the forAll function with rows of test data to verify square root calculations. The test automatically infers parameter types and provides clear error messages when tests fail.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forAll(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using forAll Function for Property Testing in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the forAll function to test a property that the length of two concatenated strings equals the sum of their individual lengths. The test passes if the boolean condition is true for all randomly generated inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/test_functions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String> { a, b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: BDD Testing with BehaviorSpec in Kotlin\nDESCRIPTION: Demonstration of BehaviorSpec which supports BDD style testing using given/when/then keywords.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        `when`(\"I sit on it\") {\n            then(\"I should be able to fly\") {\n                // test code\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Eval Generator in Kotest with Arrow\nDESCRIPTION: Generator for Arrow's Eval type, creating Eval.now instances from arbitrary values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/arrow.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nArb<A>.evalNow()\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Tests in Kotest with StringSpec\nDESCRIPTION: This snippet shows how to use Kotest's data-driven testing capabilities with the forAll function and row entries. It tests the Math.max function with different input combinations, allowing efficient handling of multiple test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n   \"maximum of two numbers\" {\n      forAll(\n         row(1, 5, 5),\n         row(1, 0, 1),\n         row(0, 0, 0)\n      ) { a, b, max ->\n         Math.max(a, b) shouldBe max\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Specific Exception Type in Kotlin using Kotest\nDESCRIPTION: Demonstrates how to use the shouldThrow function to assert that a specific type of exception is thrown. It also shows how to access and check properties of the caught exception.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Soft Assertions in Kotlin using Kotest\nDESCRIPTION: This snippet demonstrates how to use the assertSoftly function to perform multiple assertions without stopping at the first failure. All failures are reported in a single exception at the end of the block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/soft_assertions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Arbitrary Generator for Random Integer in Kotlin\nDESCRIPTION: Demonstrates how to create a custom Arbitrary generator that produces random integers between 3 and 6 using the 'arbitrary' builder in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/customgens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval sillyArb = arbitrary { rs: RandomSource ->\n   rs.random.nextInt(3..6)\n}\n```\n\n----------------------------------------\n\nTITLE: Type Testing Assertions in Kotlin\nDESCRIPTION: Functions for checking object types, instances, and null references.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBeSameInstanceAs(other)\nobj.shouldBeTypeOf<T>()\nobj.shouldBeInstanceOf<T>()\nobj.shouldHaveAnnotation(annotationClass)\nobj.shouldBeNull()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest for Kotlin/Native Projects\nDESCRIPTION: Sets up a Kotlin multiplatform project for Native testing with Kotest. Adds the Kotest multiplatform plugin and necessary dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n\nkotlin {\n  targets {\n    linuxX64()\n  }\n}\nsourceSets {\n  val commonTest by getting {\n    dependencies {\n      implementation(\"io.kotest:kotest-framework-engine:$version\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Non-deterministic Testing Functions in Markdown Table\nDESCRIPTION: This markdown table defines four Kotest functions used for non-deterministic testing: Eventually, Continually, Until, and Retry. It outlines the role of each function in handling tests with variable outcomes or execution times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/nondeterministic_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function                      | Role                                                                                                                                                                        |\n|-------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Eventually](eventually.md)   | Used to ensure that a test will _eventually_ pass within a specified time duration. The test is repeatedly executed until the test passes or the duration expires.          |\n| [Continually](continually.md) | Used to ensure that a test _continually_ passes for a period of time. Will repeatedly execute a test until the duration has expired or the test fails.                      |\n| [Until](until.md)             | Used to ensure that a predicate will eventually hold true within a specified time duration. The predicate is repeatedly executed until true or the duration expires.        |\n| [Retry](retry.md)             | Used to ensure that a test willi eventually pass within a given number of retries. The test is repeatedly executed until the test passes or the iteration count is reached. |\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Custom Arbitrary Generator in Kotlin\nDESCRIPTION: Creates a custom arbitrary generator that generates random integers between 3 and 6. It uses the arbitrary builder function which accepts a lambda that takes a RandomSource parameter and returns the generated value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/customgens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval sillyArb = arbitrary { rs: RandomSource ->\n   rs.random.nextInt(3..6)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Data Driven Testing with Kotest\nDESCRIPTION: Shows how to implement data driven tests using Kotest's forAll function with row parameters to test multiple input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n   \"maximum of two numbers\" {\n      forAll(\n         row(1, 5, 5),\n         row(1, 0, 1),\n         row(0, 0, 0)\n      ) { a, b, max ->\n         Math.max(a, b) shouldBe max\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shrinker for Coordinate Data Class in Kotest\nDESCRIPTION: This snippet demonstrates how to create a custom Shrinker for a Coordinate data class in Kotest. It defines a Coordinate class, implements a custom Shrinker that returns neighboring coordinates, and uses it in a property-based test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/shrinking.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Coordinate(val x: Int, val y: Int)\n\nclass CoordinateTest : FunSpec({\n    context(\"Coordinate Transformations\") {\n        // Shrinker takes the four neighbouring coordinates\n        val coordinateShrinker = Shrinker<Coordinate> { c ->\n            listOf(\n                Coordinate(c.x - 1, c.y),\n                Coordinate(c.x, c.y - 1),\n                Coordinate(c.x + 1, c.y),\n                Coordinate(c.x, c.y + 1),\n            )\n        }\n        val coordinateArb = arbitrary(coordinateShrinker) {\n            Coordinate(Arb.nonNegativeInt().bind(), Arb.nonNegativeInt().bind())\n        }\n\n        test(\"Coordinates are always positive after transformation\") {\n            coordinateArb.checkAll {\n                transform(it).x shouldBeGreaterThanOrEqualTo 0\n                transform(it).y shouldBeGreaterThanOrEqualTo 0\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Blocking and Non-Blocking Tests in Kotest\nDESCRIPTION: This snippet demonstrates how to configure both blocking and non-blocking tests in Kotest using the FunSpec style. It shows the usage of the 'blockingTest' flag for a blocking operation (Thread.sleep) and a regular timeout for a suspendable operation (delay).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/timeouts/blocking_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyBlockingTest : FunSpec() {\n  init {\n\n    test(\"interrupt me!\").config(blockingTest = true, timeout = 10.seconds) {\n       Thread.sleep(100000000)\n    }\n\n    test(\"uses suspension\").config(timeout = 10.seconds) {\n      delay(100000000)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Matcher in Kotlin with Kotest\nDESCRIPTION: Demonstrates the use of the 'shouldBe' matcher to assert equality in Kotest. This is a fundamental assertion used to compare values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nname shouldBe \"sam\"\n```\n\n----------------------------------------\n\nTITLE: Using Field by Field Comparison Matchers in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to compare objects by their fields instead of using the equals method. These matchers allow you to compare objects field by field with options to include or ignore private fields.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFields(other: T)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFields(other: T, ignorePrivateFields: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Test Configuration via Property\nDESCRIPTION: Shows how to set default test configuration for all test cases in a spec using defaultTestConfig property assignment.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_case_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n\n    defaultTestConfig = TestCaseConfig(enabled = true, invocations = 3)\n\n    test(\"FunSpec should support Spec config syntax in init{} block\") {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integer Assertions in Kotest\nDESCRIPTION: Assertions for validating integer values and properties in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nint.shouldBeBetween(x, y)\nint.shouldBeLessThan(n)\nint.shouldBeLessThanOrEqual(n)\nint.shouldBeGreaterThan(n)\nint.shouldBeGreaterThanOrEqual(n)\nint.shouldBeEven()\nint.shouldBeOdd()\nint.shouldBeInRange(range)\nint.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Solution: Setup Mocks Before Each Test\nDESCRIPTION: Demonstrates how to set up mocks before each test using the beforeTest listener to avoid mock reuse issues.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/integrations/mocks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    lateinit var repository: MyRepository\n    lateinit var target: MyService\n\n    beforeTest {\n        repository = mockk()\n        target = MyService(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Arbitrary Generator Values in Kotlin\nDESCRIPTION: Shows how to use the 'filter' operation to create new Arb instances that generate a subset of values based on a predicate. Examples include generating even and odd numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genops.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\nval odds = Arb.int().filter { it.value % 2 == 1 }\n```\n\n----------------------------------------\n\nTITLE: Test Configuration in Kotest\nDESCRIPTION: Demonstrates how to configure test execution parameters including timeout, invocations, threads, and tags using the config block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n   \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: BDD Testing with BehaviorSpec in Kotlin\nDESCRIPTION: Demonstrates BehaviorSpec style which follows BDD pattern using given/when/then keywords. Shows both basic and nested structures with And keyword usage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        `when`(\"I sit on it\") {\n            then(\"I should be able to fly\") {\n                // test code\n            }\n        }\n        `when`(\"I throw it away\") {\n            then(\"it should come back\") {\n                // test code\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        and(\"a witch\") {\n            `when`(\"The witch sits on it\") {\n                and(\"she laughs hysterically\") {\n                    then(\"She should be able to fly\") {\n                        // test code\n                    }\n                }\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    xgiven(\"this is disabled\") {\n        When(\"disabled by inheritance from the parent\") {\n            then(\"disabled by inheritance from its grandparent\") {\n                // disabled test\n            }\n        }\n    }\n    given(\"this is active\") {\n        When(\"this is active too\") {\n            xthen(\"this is disabled\") {\n               // disabled test\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generators with Enums in Kotest Property Tests\nDESCRIPTION: Example showing how to use exhaustive generators with enums in a property test. This demonstrates testing with a finite set of enum values (Season) alongside arbitrary integers, where each enum value will be used multiple times across the 100 test iterations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/gens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Season { Winter, Fall, Spring, Summer }\n\nforAll<Int, Season>(100) { a, season -> ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data Table in Kotlin\nDESCRIPTION: Creates a test data table with headers and rows using Kotest's table function. The table includes columns for id, name, and username with sample data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/table_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval table = table(\n  headers(\"id\", \"name\", \"username\"),\n  row(4, \"Jean-Michel Fayard\", \"jmfayard\"),\n  row(6, \"Louis CAD\", \"LouisCAD\"),\n)\n```\n\n----------------------------------------\n\nTITLE: General Purpose Assertions in Kotlin\nDESCRIPTION: Basic assertion methods for equality, boolean expressions, and exception handling provided by Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBe(other)\nexpr.shouldBeTrue()\nexpr.shouldBeFalse()\nshouldThrow<T> { block }\nshouldThrowExactly<T> { block }\nshouldThrowAny { block }\nshouldThrowMessage(message) { block }\n```\n\n----------------------------------------\n\nTITLE: Implementing BehaviorSpec Testing Style in Kotest\nDESCRIPTION: BehaviorSpec is designed for BDD-style testing using given/when/then keywords. This style helps structure tests to match business requirements and acceptance criteria.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        `when`(\"I sit on it\") {\n            then(\"I should be able to fly\") {\n                // test code\n            }\n        }\n        `when`(\"I throw it away\") {\n            then(\"it should come back\") {\n                // test code\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Callbacks in Kotest\nDESCRIPTION: Demonstrates how to use beforeEach and afterEach lifecycle callbacks to execute code before and after each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/writing_tests.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Callbacks : FunSpec({\n\n   beforeEach {\n      println(\"Hello from $it\")\n   }\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   afterEach {\n      println(\"Goodbye from $it\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing for Any Exception in Kotest\nDESCRIPTION: Shows how to use shouldThrowAny to verify that a code block throws any type of exception, regardless of the specific exception class. Useful when only the presence of an exception matters, not its type.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/exceptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowAny {\n  // test here can throw any type of Throwable!\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertSoftly with Test Target in Kotlin with Kotest\nDESCRIPTION: This snippet shows how to use an alternative version of assertSoftly that takes a test target and a lambda with the test target as its receiver. This approach allows more concise assertions on the same object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/soft_assertions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly(foo) {\n    shouldNotEndWith(\"b\")\n    length shouldBe 3\n}\n```\n\n----------------------------------------\n\nTITLE: Using Coroutines in Kotest Test Cases\nDESCRIPTION: Kotest now supports using coroutines directly in test cases. This allows for testing asynchronous code more easily and naturally in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyTest : StringSpec({\n  \"test using coroutines\" {\n    runBlocking {\n      val result = async { someAsyncOperation() }\n      result.await() shouldBe expectedValue\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Enum Exhaustive Generator with Property Test\nDESCRIPTION: Example of property testing with an exhaustive generator for an enum alongside an arbitrary integer generator. The example shows how to run a property test for 100 iterations where each enum value will be provided multiple times in a round-robin fashion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/gens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Season { Winter, Fall, Spring, Summer }\n\nforAll<Int, Season>(100) { a, season -> ... }\n```\n\n----------------------------------------\n\nTITLE: Collection Assertions in Kotlin with Kotest\nDESCRIPTION: Matchers for validating collections in various ways, including checking for emptiness, uniqueness, content matching, size validation, and sorting. These assertions provide comprehensive collection testing capabilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeEmpty()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeUnique()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeUnique(comparator)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContain(element)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainAll(e1, e2, ..., en)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainDuplicates()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainExactly()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainExactlyInAnyOrder()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainAllInAnyOrder()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainNoNulls()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainNull()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainOnlyNulls()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainAllIgnoringFields()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveSingleElement(element)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveSingleElement { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveSize(length)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeSingleton()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeSingleton { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveLowerBound(element)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveUpperBound(element)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeSmallerThan(col)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeLargerThan(col)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeSameSizeAs(col)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveAtLeastSize(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveAtMostSize(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.shouldBeSorted()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.shouldBeSortedBy { transform }\n```\n\n----------------------------------------\n\nTITLE: Nested Tests in Kotest using DescribeSpec\nDESCRIPTION: Shows how to create nested tests using the DescribeSpec style, which allows grouping related tests using describe and it blocks, similar to JavaScript and Ruby testing frameworks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/writing_tests.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NestedTestExamples : DescribeSpec({\n\n   describe(\"an outer test\") {\n\n      it(\"an inner test\") {\n        1 + 2 shouldBe 3\n      }\n\n      it(\"an inner test too!\") {\n        3 + 4 shouldBe 7\n      }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Exhaustive Generator in a Kotest Property Test\nDESCRIPTION: Shows how to use a custom exhaustive generator in a Kotest property test. This example tests that single-digit primes are prime and that their squares are not prime.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/customgens.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n    \"testing single digit primes\" {\n        checkAll(singleDigitPrimes) { prime ->\n           isPrime(prime) shouldBe true\n           isPrime(prime * prime) shouldBe false\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Kotest Framework Configuration Properties in Kotlin\nDESCRIPTION: This snippet defines the KotestEngineProperties object containing all system properties that can be used to configure the Kotest testing framework. Each property is a string constant with a descriptive comment explaining its purpose, including settings for test filtering, parallelism, timeouts, tag handling, and various framework behaviors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/config_props.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotest.core.internal\n\nobject KotestEngineProperties {\n\n   const val scriptsEnabled = \"kotest.framework.scripts.enabled\"\n\n   const val dumpConfig = \"kotest.framework.dump.config\"\n\n   /**\n    * Sets the tag expression that determines included/excluded tags.\n    */\n   const val tagExpression = \"kotest.tags\"\n\n   const val excludeTags = \"kotest.tags.exclude\"\n\n   const val includeTags = \"kotest.tags.include\"\n\n   /**\n    * A regex expression that is used to match the test [io.kotest.core.descriptors.Descriptor]'s path\n    * to determine if a test should be included in the test plan or not.\n    */\n   const val filterTests = \"kotest.filter.tests\"\n\n   /**\n    * A regex expression that is used to match the [io.kotest.mpp.bestName] of a class\n    * to determine if a spec should be included in the test plan or not.\n    */\n   const val filterSpecs = \"kotest.filter.specs\"\n\n   const val propertiesFilename = \"kotest.properties.filename\"\n\n   /**\n    * If set to true, then source ref's will not be created for test cases.\n    * This may speed up builds (as the engine will not need to create stack traces to\n    * generate line numbers) but will also reduce functionality in the intellij plugin\n    * (by limiting the ability to drill directly into the test inside a file).\n    */\n   const val disableSourceRef = \"kotest.framework.sourceref.disable\"\n\n   /**\n    * If set to true, disables the use of '!' as a prefix to disable tests.\n    */\n   const val disableBangPrefix = \"kotest.bang.disable\"\n\n   /**\n    * The default [io.kotest.core.spec.IsolationMode] for specs.\n    */\n   const val isolationMode = \"kotest.framework.isolation.mode\"\n\n   /**\n    * The default [io.kotest.core.test.AssertionMode] for tests.\n    */\n   const val assertionMode = \"kotest.framework.assertion.mode\"\n\n   /**\n    * The default parallelism for specs.\n    */\n   const val parallelism = \"kotest.framework.parallelism\"\n\n   /**\n    * The default timeout for test cases.\n    */\n   const val timeout = \"kotest.framework.timeout\"\n\n   /**\n    * The default timeout for the entire test suite.\n    */\n   const val projectTimeout = \"kotest.framework.projecttimeout\"\n\n   const val logLevel = \"kotest.framework.loglevel\"\n\n   /**\n    * The default timeout for each invocation of a test case.\n    */\n   const val invocationTimeout = \"kotest.framework.invocation.timeout\"\n\n   const val disableTestNestedJarScanning = \"kotest.framework.disable.test.nested.jar.scanning\"\n\n   const val concurrentSpecs = \"kotest.framework.spec.concurrent\"\n\n   const val concurrentTests = \"kotest.framework.test.concurrent\"\n\n   /**\n    * Disable scanning the classpath for configuration classes by setting this property to true\n    */\n   const val disableConfigurationClassPathScanning = \"kotest.framework.classpath.scanning.config.disable\"\n\n   /**\n    * Specify a fully qualified name to use for project config.\n    * This class will be instantiated via reflection.\n    */\n   const val configurationClassName = \"kotest.framework.config.fqn\"\n\n   /**\n    * Disable scanning the classpath for listeners with @AutoScan by setting this property to true\n    */\n   const val disableAutoScanClassPathScanning = \"kotest.framework.classpath.scanning.autoscan.disable\"\n\n   const val allowMultilineTestName = \"kotest.framework.testname.multiline\"\n\n   /**\n    *  If set -> filter testCases by this severity level and higher, else running all\n    */\n   const val testSeverity = \"kotest.framework.test.severity\"\n\n   /**\n    * Enable assert softly globally.\n    * */\n   const val globalAssertSoftly = \"kotest.framework.assertion.globalassertsoftly\"\n\n   /**\n    * Appends all tags associated with a test case to its display name.\n    * */\n   const val testNameAppendTags = \"kotest.framework.testname.append.tags\"\n\n   /**\n    * Controls whether classes will inherit tags from their supertypes. Default false\n    */\n   const val tagInheritance = \"kotest.framework.tag.inheritance\"\n\n   /**\n    * Controls the [io.kotest.core.names.DuplicateTestNameMode] mode.\n    */\n   const val duplicateTestNameMode = \"kotest.framework.testname.duplicate.mode\"\n\n   /**\n    * Disable scanning for project config in (third-party) JARs on the classpath.\n    */\n   const val disableJarDiscovery = \"kotest.framework.discovery.jar.scan.disable\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Test Iterations in Property-Based Testing\nDESCRIPTION: This example demonstrates how to increase the number of test iterations from the default 1000 to 10,000 for a property test using checkAll. This allows for more extensive testing of the property with a larger number of generated values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/test_functions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"a many iterations test\" {\n      checkAll<Double, Double>(10_000) { a, b ->\n         // test here\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Type Assertion Methods in Kotlin\nDESCRIPTION: Matchers for verifying object types, instances, and null checks in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBeSameInstanceAs(other)\nobj.shouldBeTypeOf<T>()\nobj.shouldBeInstanceOf<T>()\nobj.shouldHaveAnnotation(annotationClass)\nobj.shouldBeNull()\n```\n\n----------------------------------------\n\nTITLE: Collection Assertions in Kotest\nDESCRIPTION: Comprehensive assertion functions for Collections and Lists, including size checks, content verification, ordering, and element validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeEmpty()\ncollection.shouldBeUnique()\ncollection.shouldContain(element)\ncollection.shouldContainAll(e1, e2, ..., en)\ncollection.shouldContainDuplicates()\ncollection.shouldContainExactly()\ncollection.shouldContainExactlyInAnyOrder()\ncollection.shouldContainAllInAnyOrder()\ncollection.shouldContainNoNulls()\ncollection.shouldContainNull()\ncollection.shouldContainOnlyNulls()\ncollection.shouldHaveSingleElement(element)\ncollection.shouldHaveSingleElement { block }\ncollection.shouldHaveSize(length)\ncollection.shouldBeSingleton()\ncollection.shouldBeSingleton { block }\ncollection.shouldHaveLowerBound(element)\ncollection.shouldHaveUpperBound(element)\ncollection.shouldBeSmallerThan(col)\ncollection.shouldBeLargerThan(col)\ncollection.shouldBeSameSizeAs(col)\ncollection.shouldHaveAtLeastSize(n)\ncollection.shouldHaveAtMostSize(n)\nlist.shouldBeSorted()\nlist.shouldBeSortedBy { transform }\nlist.shouldContainInOrder(other)\nlist.shouldExistInOrder({ element }, ...)\nlist.shouldHaveElementAt(index, element)\nlist.shouldStartWith(lst)\nlist.shouldEndWith(lst)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Library for JVM/Maven\nDESCRIPTION: Adds the Kotest assertions library dependency for JVM projects using Maven.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-assertions-core-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Callbacks in Kotest\nDESCRIPTION: This example demonstrates the use of lifecycle callbacks in Kotest. It shows how to define 'beforeEach' and 'afterEach' callbacks that run before and after each test case, respectively. These callbacks are useful for setup and teardown operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/writing_tests.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Callbacks : FunSpec({\n\n   beforeEach {\n      println(\"Hello from $it\")\n   }\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   afterEach {\n      println(\"Goodbye from $it\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Assert Softly in Kotest (Kotlin)\nDESCRIPTION: Activates global assert softly mode, which batches up multiple assertion errors into a single failure. This allows all assertions in a test to be evaluated before failing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/project_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val globalAssertSoftly = true\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Conditional Statistics in Kotest Property Tests\nDESCRIPTION: Shows how to collect statistics based on conditional logic, categorizing integers as 'EVEN' or 'ODD' in a Kotest property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/statistics.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"EVEN\")\n    else -> collect(\"ODD\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Compiler Assertion Tests in Kotlin\nDESCRIPTION: Example test class demonstrating how to use compiler matchers to verify code compilation. Shows both positive and negative compilation tests using string and file inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/compiler.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CompilationTest: StringSpec() {\n        init {\n            \"shouldCompile test\" {\n                val codeSnippet = \"\"\" val aString: String = \"A valid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldCompile()\n                File(\"SourceFile.kt\").shouldCompile()\n            }\n\n            \"shouldNotCompile test\" {\n                val codeSnippet = \"\"\" val aInteger: Int = \"A invalid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldNotCompile()\n                File(\"SourceFile.kt\").shouldNotCompile()\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Generators for Property Tests in Kotest\nDESCRIPTION: Shows how to use custom generators to control the sample space for property tests. This example demonstrates creating age-based tests with different ranges for Chicago and London drinking ages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/test_functions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"is allowed to drink in Chicago\" {\n      forAll(Arb.int(21..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n   \"is allowed to drink in London\" {\n      forAll(Arb.int(18..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Type Checking Matchers in Kotlin with Kotest\nDESCRIPTION: Shows matchers for type checking, instance comparison, and null assertion in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nobj.shouldBeSameInstanceAs(other)\nobj.shouldBeTypeOf<T>()\nobj.shouldBeInstanceOf<T>()\nobj.shouldHaveAnnotation(annotationClass)\nobj.shouldBeNull()\n```\n\n----------------------------------------\n\nTITLE: Property-based Testing with Kotest in Kotlin\nDESCRIPTION: Illustrates how to use property-based testing in Kotest to automatically generate test data. The example tests the property that the length of two concatenated strings equals the sum of their individual lengths.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n  \"String size\" {\n    checkAll<String, String> { a, b ->\n      (a + b) shouldHaveLength a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Mocking Example with Kotest and mockk\nDESCRIPTION: Demonstrates a simple test using mockk for mocking within a Kotest FunSpec. Shows how to create a mock, set expectations, and verify calls.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/integrations/mocks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing FreeSpec in Kotlin for Kotest\nDESCRIPTION: Example of using FreeSpec in Kotest, which allows nesting of arbitrary levels using the '-' keyword for outer tests. It demonstrates how to create deeply nested tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FreeSpec({\n    \"String.length\" - {\n        \"should return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n    \"containers can be nested as deep as you want\" - {\n        \"and so we nest another container\" - {\n            \"yet another container\" - {\n                \"finally a real test\" {\n                    1 + 1 shouldBe 2\n                }\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Matchers for Assertions\nDESCRIPTION: Shows various matcher examples for testing different types of assertions, including string operations and collection checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n\nuser.email.shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n\ncityMap.shouldContainKey(\"London\")\n```\n\n----------------------------------------\n\nTITLE: Creating Data-Driven Tests with FunSpec in Kotest\nDESCRIPTION: Implementing data-driven tests using the withData function in a FunSpec test class, with multiple test cases organized within a context block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  context(\"Pythag triples tests\") {\n    withData(\n      PythagTriple(3, 4, 5),\n      PythagTriple(6, 8, 10),\n      PythagTriple(8, 15, 17),\n      PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n      isPythagTriple(a, b, c) shouldBe true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions Using shouldThrow in Kotest\nDESCRIPTION: This example demonstrates how to test that a specific exception is thrown and how to make assertions on the exception properties. The code uses shouldThrow to capture the exception and then verifies its message content using string matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n   // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: General Assertions in Kotlin using Kotest\nDESCRIPTION: Basic assertions for equality, boolean values, and exception handling in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nobj.shouldBe(other)\nobj::prop.shouldHaveValue(other)\nexpr.shouldBeTrue()\nexpr.shouldBeFalse()\nshouldThrow<T> { block }\nshouldThrowExactly<T> { block }\nshouldThrowAny { block }\nshouldThrowMessage(message) { block }\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven for Kotest JVM Tests\nDESCRIPTION: Sets up Maven to use the Surefire plugin for running Kotest tests on the JVM. Adds the necessary plugin configuration and dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-runner-junit5-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding PropTestListener for Setup and Teardown\nDESCRIPTION: Demonstrates how to add a PropTestListener to handle setup and teardown for each iteration of a property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some property test which require setup and tear down in each iteration\" {\n      forAll<String, String>(PropTestConfig(listeners = listOf(MyPropTestListener))) { a,b ->\n         // some assertion\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Using shouldBe in Kotlin\nDESCRIPTION: Demonstrates the basic usage of shouldBe matcher for equality assertion in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nname shouldBe \"sam\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging at Spec Level in Kotest\nDESCRIPTION: Shows how to enable coroutine debugging for all tests within a spec by setting the coroutineDebugProbes property in the spec initialization block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n  init {\n\n    coroutineDebugProbes = true\n\n    test(\"foo\") {\n      // debugging enabled here\n    }\n\n    test(\"bar\") {\n      // debugging enabled here\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Generators for Property Tests in Kotest\nDESCRIPTION: This example shows how to specify custom generators for property tests in Kotest. It demonstrates creating tests with specific integer ranges for checking drinking age in different locations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/test_functions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"is allowed to drink in Chicago\" {\n      forAll(Arb.int(21..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n   \"is allowed to drink in London\" {\n      forAll(Arb.int(18..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher Extension Functions in Kotlin\nDESCRIPTION: Demonstrating the usage of the custom string length matcher extension functions in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/custom.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\".shouldHaveLength(9)\n\"hello bar\".shouldNotHaveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Failures for Property Tests in Kotest\nDESCRIPTION: Example of configuring a property test to tolerate a specific number of failures. This is useful for non-deterministic tests where occasional failures are acceptable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some flakey test\" {\n      forAll<String, String>(PropTestConfig(maxFailure = 3)) { a,b ->\n         // max of 3 inputs can fail\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency for JavaScript Target in Kotlin Multiplatform\nDESCRIPTION: This snippet demonstrates how to add the Kotest property testing dependency specifically to the JavaScript target in a Kotlin Multiplatform project. It configures both browser and Node.js targets and adds the dependency to the jsTest sourceset.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/index.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data Tests with Kotest in Kotlin\nDESCRIPTION: This snippet demonstrates how to create nested data tests using Kotest. It tests multiple services against different HTTP methods, creating a cartesian join of all inputs. The nested structure is reflected in the test output.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/nested.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n  val services = listOf(\n    \"http://internal.foo\",\n    \"http://internal.bar\",\n    \"http://public.baz\",\n  )\n\n  val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n   withData(services) { service ->\n     withData(methods) { method ->\n       // test service against method\n     }\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Testing in Kotlin using Kotest ShouldSpec\nDESCRIPTION: Demonstrates how to use the retry function in Kotest to attempt a test block multiple times. The example shows retrying a test up to 4 times with a 10-minute timeout period. The retry function supports additional options like delay between attempts, exponential backoff multiplier, and specific exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/retry.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"retry up to 4 times\") {\n      retry(4, 10.minutes) {\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testcontainers Integration Example\nDESCRIPTION: Demonstrates how to integrate Testcontainers with Kotest using the new kotest-extensions-testcontainers module\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.1.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perTest())\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin for Kotest\nDESCRIPTION: Sets up the Maven Surefire plugin to work with Kotest via JUnit 5.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/setup.mdx#2025-04-13_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Composed Matcher with Matcher.all in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a composed matcher using the logical AND operation (Matcher.all) to validate that a string contains a digit, lowercase letter, and uppercase letter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/composed_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval passwordMatcher = Matcher.all(\n   containADigit(), contain(Regex(\"[a-z]\")), contain(Regex(\"[A-Z]\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Data-driven Testing in StringSpec\nDESCRIPTION: Shows how to implement data-driven testing in a StringSpec class, testing string concatenation with multiple input combinations using the forAll function.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/data_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forAll(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Compiler Matchers in Kotest Tests\nDESCRIPTION: Example test class demonstrating how to use shouldCompile() and shouldNotCompile() matchers with both string code snippets and files. The test validates compilation of valid and invalid Kotlin code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/compiler.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CompilationTest: StringSpec() {\n        init {\n            \"shouldCompile test\" {\n                val codeSnippet = \"\"\" val aString: String = \"A valid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldCompile()\n                File(\"SourceFile.kt\").shouldCompile()\n            }\n\n            \"shouldNotCompile test\" {\n                val codeSnippet = \"\"\" val aInteger: Int = \"A invalid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldNotCompile()\n                File(\"SourceFile.kt\").shouldNotCompile()\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Nesting Tests in Kotest using DescribeSpec\nDESCRIPTION: This example illustrates how to create nested tests in Kotest using the DescribeSpec style. It shows the use of 'describe' for outer tests and 'it' for inner tests, demonstrating Kotest's support for hierarchical test structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/writing_tests.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NestedTestExamples : DescribeSpec({\n\n   describe(\"an outer test\") {\n\n      it(\"an inner test\") {\n        1 + 2 shouldBe 3\n      }\n\n      it(\"an inner test too!\") {\n        3 + 4 shouldBe 7\n      }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Testing with DescribeSpec in Kotlin\nDESCRIPTION: Demonstrates DescribeSpec style which uses describe/it blocks similar to Ruby and JavaScript testing frameworks. Shows nested describe blocks and test disabling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"score\") {\n        it(\"start as zero\") {\n            // test here\n        }\n        describe(\"with a strike\") {\n            it(\"adds ten\") {\n                // test here\n            }\n            it(\"carries strike to the next frame\") {\n                // test here\n            }\n        }\n\n        describe(\"for the opposite team\") {\n            it(\"Should negate one score\") {\n                // test here\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"this outer block is enabled\") {\n        xit(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xdescribe(\"this block is disabled\") {\n        it(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Table in Kotlin for Table-Driven Testing\nDESCRIPTION: Creates a data table with headers and rows of test data. This is the foundation of table-driven testing, allowing you to define structured test inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/table_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval table = table(\n  headers(\"id\", \"name\", \"username\"),\n  row(4, \"Jean-Michel Fayard\", \"jmfayard\"),\n  row(6, \"Louis CAD\", \"LouisCAD\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Callback Functions in a Kotest Spec Class\nDESCRIPTION: This snippet demonstrates how to implement lifecycle hooks by overriding callback methods directly in a spec class. This approach separates the setup logic from the test definition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/lifecycle_hooks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec() {\n    override fun beforeTest(testCase: TestCase) {\n        println(\"Starting a test $testCase\")\n    }\n\n    init {\n        \"this test\" should {\n            \"be alive\" {\n                println(\"Johnny5 is alive!\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Tests in Kotest using DescribeSpec\nDESCRIPTION: Shows how to create nested tests using DescribeSpec style, which allows grouping related tests together using describe and it blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/writing_tests.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NestedTestExamples : DescribeSpec({\n\n   describe(\"an outer test\") {\n\n      it(\"an inner test\") {\n        1 + 2 shouldBe 3\n      }\n\n      it(\"an inner test too!\") {\n        3 + 4 shouldBe 7\n      }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Driven Testing with forAll in Kotest\nDESCRIPTION: This snippet demonstrates how to use the 'forAll' function with multiple 'row' objects to test square roots. It shows how Kotest automatically infers parameter types and provides detailed error messages for failed tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forAll(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using forAtLeast Inspector in Kotlin with Kotest\nDESCRIPTION: Example demonstrating how to use the forAtLeast inspector to verify that at least 2 elements in a list meet a minimum length requirement. The code checks that at least 2 strings in the list have a length of 7 or more characters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/inspectors.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval xs = listOf(\"sam\", \"gareth\", \"timothy\", \"muhammad\")\nxs.forAtLeast(2) {\n    it.shouldHaveMinLength(7)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Callbacks in DescribeSpec\nDESCRIPTION: Demonstrates the use of the new extended callback functions (beforeEach, afterEach, beforeContainer, afterContainer) in a DescribeSpec. Shows how different callbacks are triggered for different test scope levels.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.2.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CallbacksTest : DescribeSpec({\n\n   beforeEach {\n      println(\"Test: \" + it.displayName)\n   }\n\n   beforeContainer {\n      println(\"Container: \" + it.displayName)\n   }\n\n   beforeTest {\n      println(\"All: \" + it.displayName)\n   }\n\n   describe(\"I am a container scope\") {\n      it(\"And I am a test scope\") { }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting URIs in Kotest\nDESCRIPTION: Assertion functions for validating URI components in Kotest tests, including scheme, host, port, path, and query parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveAuthority(fragment)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveFragment(fragment)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveHost(scheme)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveParameter(scheme)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHavePath(scheme)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHavePort(scheme)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveQuery(fragment)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveScheme(scheme)\n```\n\n----------------------------------------\n\nTITLE: Applying @EnabledIf Annotation for Conditional Spec Execution in Kotlin\nDESCRIPTION: This snippet shows how to apply the @EnabledIf annotation with a custom EnabledCondition to multiple test specs, enabling conditional execution based on the defined logic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/annotations.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest1 : FunSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest2 : DescribeSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyWindowsTests : DescribeSpec() {\n  // tests here\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Exact Exception Type with shouldThrowExactly\nDESCRIPTION: Demonstrates using shouldThrowExactly to test for a specific exception type without catching its parent exceptions. This is useful when you need to ensure exactly the specified exception type is thrown.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/exceptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowExactly<FileNotFoundException> {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Result Objects in Kotlin\nDESCRIPTION: These snippets demonstrate how to assert properties of Result objects, including success, failure, and specific value or exception type checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_26\n\nLANGUAGE: Kotlin\nCODE:\n```\nresult.shouldBeSuccess()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nresult.shouldBeSuccess(value)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nresult.shouldBeSuccess(block)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nresult.shouldBeFailure()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nresult.shouldBeFailureOfType<Type : Throwable>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nresult.shouldBeFailure(block)\n```\n\n----------------------------------------\n\nTITLE: Implementing WithDataTestName Interface in Kotest\nDESCRIPTION: This example demonstrates how to implement the WithDataTestName interface to customize test names. The dataTestName() function will be called instead of toString() to generate the test name for each row.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/test_names.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int) : WithDataTestName {\n  override fun dataTestName() = \"wibble $a, $b, $c wobble\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Extensions and Log Level in Kotest\nDESCRIPTION: This snippet shows how to set up logging in a Kotest project by configuring a LogExtension and setting the log level in the AbstractProjectConfig. It demonstrates creating a custom LogExtension that prints log messages to the console.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/logging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n    override val logLevel = LogLevel.Error\n    override fun extensions() = listOf(\n        object : LogExtension {\n            override suspend fun handleLogs(testCase: TestCase, logs: List<LogEntry>) {\n                logs.forEach { println(it.level.name + \" - \" + it.message) }\n            }\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Data Driven Testing in Kotest\nDESCRIPTION: Shows how to implement data driven tests using Kotest's forAll function with row parameters to test multiple input combinations for finding maximum values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n   \"maximum of two numbers\" {\n      forAll(\n         row(1, 5, 5),\n         row(1, 0, 1),\n         row(0, 0, 0)\n      ) { a, b, max ->\n         Math.max(a, b) shouldBe max\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Kafka Integration Test Example\nDESCRIPTION: Full example showing Kafka container setup and message producer/consumer test\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KafkaTestContainerExtensionTest : FunSpec() {\n  init {\n\n    val kafka = install(TestContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n      withEmbeddedZookeeper()\n    }\n\n    test(\"should send/receive message\") {\n\n      val producer = kafka.createStringStringProducer()\n      producer.send(ProducerRecord(\"foo\", null, \"bubble bobble\"))\n      producer.close()\n\n      val consumer = kafka.createStringStringConsumer {\n        this[ConsumerConfig.MAX_POLL_RECORDS_CONFIG] = 1\n      }\n\n      consumer.subscribe(listOf(\"foo\"))\n      val records = consumer.poll(Duration.ofSeconds(100))\n      records.shouldHaveSize(1)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Extensions for Assertions\nDESCRIPTION: Illustrates how Kotest provides extension function assertions for Kotlin-specific types like Sequence, Pair, and Regex, with multiplatform support.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/why.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nsequence.shouldHaveSize(3)\npair.shouldBeIn(listOf())\nregex.shouldMatch(\"text\")\n```\n\n----------------------------------------\n\nTITLE: Kotlin Function and Property Matchers\nDESCRIPTION: Assertion functions for testing Kotlin function and property characteristics including annotations, return types, modifiers and visibility.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nkfunction.shouldHaveAnnotations()\nkfunction.shouldHaveAnnotations(n)\nkfunction.shouldBeAnnotatedWith<T>()\nkfunction.shouldBeAnnotatedWith<T> { block }\nkfunction.shouldHaveReturnType<T>()\nkfunction.shouldBeInline()\nkfunction.shouldBeInfix()\nkproperty.shouldBeOfType<T>()\nkproperty.shouldBeConst()\nkproperty.shouldBeLateInit()\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Functions for Custom Matchers in Kotlin\nDESCRIPTION: Demonstrates how to create extension functions that provide a more concise syntax for custom matchers and allow for method chaining by returning the original value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/custom.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldHaveLength(length: Int): String {\n  this should haveLength(length)\n  return this\n}\n\nfun String.shouldNotHaveLength(length: Int): String {\n  this shouldNot haveLength(length)\n  return this\n}\n```\n\n----------------------------------------\n\nTITLE: General Assertions in Kotest\nDESCRIPTION: Basic assertion methods for general use in Kotest, including equality checks, boolean assertions, and exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nobj.shouldBe(other)\nexpr.shouldBeTrue()\nexpr.shouldBeFalse()\nshouldThrow<T> { block }\nshouldThrowExactly<T> { block }\nshouldThrowAny { block }\nshouldThrowMessage(message) { block }\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions in Kotlin\nDESCRIPTION: Shows how to chain multiple assertions together using Kotest's fluent API. Demonstrates string and file assertions with method chaining.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n           .shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n           .shouldStartWith(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Configuration in Kotlin\nDESCRIPTION: Specifying which exceptions to handle during eventually testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/eventually.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  expectedExceptions = setOf(UserNotFoundException::class)\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Classes for Complex Matcher Example in Kotlin\nDESCRIPTION: This snippet defines two data classes, Person and Address, which will be used to demonstrate creating composed matchers for complex structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/composed_matchers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(\n  val name: String,\n  val age: Int,\n  val address: Address,\n)\n\ndata class Address(\n  val city: String,\n  val street: String,\n  val buildingNumber: String,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tests with FunSpec in Kotlin\nDESCRIPTION: Example of writing tests using FunSpec style, which uses the 'test' function to define test cases and supports nested contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    test(\"String length should return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing ShouldSpec Testing Style in Kotlin\nDESCRIPTION: Demonstrates the ShouldSpec style which uses 'should' keyword instead of 'test'. Shows both basic implementation and nested contexts with test disabling options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    should(\"return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"String.length\") {\n        should(\"return the length of the string\") {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"this outer block is enabled\") {\n        xshould(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        should(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using withClue for Enhanced Assertion Messages in Kotlin\nDESCRIPTION: Demonstrates how to use the withClue helper to add a custom message to an assertion, providing more context in case of failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/clues.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Table Testing in StringSpec with Multiple Parameters\nDESCRIPTION: Demonstrates table testing in a StringSpec class with multiple string concatenation examples. Shows how to test with varying numbers of parameters and validate expected outputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forAll(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Exception Type in Kotest\nDESCRIPTION: Demonstrates the use of shouldThrowExactly to test for a specific exception type without catching its subclasses. This is useful for ensuring that only the exact expected exception is thrown.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/exceptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowExactly<FileNotFoundException> {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Using PropTestListener for Setup and Teardown in Kotest Property Tests\nDESCRIPTION: Example of registering a PropTestListener to perform setup and teardown operations in each iteration of a property test. This allows for proper resource management during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some property test which require setup and tear down in each iteration\" {\n      forAll<String, String>(PropTestConfig(listeners = listOf(MyPropTestListener))) { a,b ->\n         // some assertion\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Function in Kotlin for Kotest\nDESCRIPTION: This snippet demonstrates the basic structure of a test in Kotest. A test is essentially a function that takes a TestContext and returns Unit. The function typically contains assertions (called matchers in Kotest) that throw exceptions if they fail.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/dsl.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nTestContext -> Unit\n```\n\n----------------------------------------\n\nTITLE: Content-Based JSON Matchers\nDESCRIPTION: Advanced JSON matchers for comparing content, checking specific paths and values, and matching against resource files. Includes both multiplatform and JVM-specific matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/json/overview.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Matcher                                                                         | Description                                                                                          | Targets       |\n|---------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|:--------------||\n| [shouldEqualJson](content-json-matchers.html#shouldequaljson)                   | Verifies that a String matches a given JSON structure.                                               | Multiplatform |\n| [shouldEqualSpecifiedJson](content-json-matchers.html#shouldequalspecifiedjson) | Verifies that a String matches a given JSON structure, but allows additional unspecified properties. | Multiplatform |\n| [shouldContainJsonKey](content-json-matchers.html#shouldcontainjsonkey)         | Verifies that a String is JSON, and contains a given JSON path                                       | JVM           |\n| [shouldContainJsonKeyValue](content-json-matchers.html#shouldcontainjsonkey)    | Verifies that a String is JSON, and contains a given JSON path with the specified value              | JVM           |\n| [shouldMatchJsonResource](content-json-matchers.html#shouldcontainjsonkey)      | Verifies that a String is matches the JSON content of a given test resource                          | JVM           |\n```\n\n----------------------------------------\n\nTITLE: Setting Default Configuration for All Tests via Property Assignment (Kotlin)\nDESCRIPTION: Example of setting default test configuration for all tests in a spec by assigning to the defaultTestConfig property. This configures all tests to be enabled and run 3 times each.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_case_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n\n    defaultTestConfig = TestCaseConfig(enabled = true, invocations = 3)\n\n    test(\"FunSpec should support Spec config syntax in init{} block\") {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocalDate Matchers in Kotest with Kotlinx Datetime\nDESCRIPTION: A collection of matcher functions for asserting properties and relationships of LocalDate objects in tests. These matchers allow comparison of dates, verification of specific date components, and checking temporal relationships.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameMonthAs(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameDayAs(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeBefore(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeAfter(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeWithin(period, otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeWithin(duration, otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeBetween(firstDate, secondDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveYear(year)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveMonth(month)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveDayOfYear(day)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveDayOfMonth(day)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveDayOfWeek(day)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveHour(hour)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveMinute(Minute)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSecond(second)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveNano(nano)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Running Tests Based on Operating System in Kotest\nDESCRIPTION: Shows how to conditionally run tests only on specific operating systems using Apache Commons Lang's SystemUtils to check for Linux OS.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/config_enabled.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = IS_OS_LINUX) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Test Ordering in Kotest\nDESCRIPTION: Shows how to configure random test ordering where tests are executed in a non-deterministic order. This is useful for detecting test dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RandomSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Random\n\n    init {\n      \"foo\" {\n        // This test may run first or second\n      }\n\n      \"bar\" {\n        // This test may run first or second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Exception Type in Kotest\nDESCRIPTION: This snippet shows how to use shouldThrowExactly to assert that a specific exception type is thrown, without catching its subclasses. It expects a FileNotFoundException to be thrown.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/exceptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowExactly<FileNotFoundException> {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Generators in Property Tests\nDESCRIPTION: Demonstrates how to use custom generators with specific ranges for testing age-related functions in different locations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/test_functions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"is allowed to drink in Chicago\" {\n      forAll(Arb.int(21..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n   \"is allowed to drink in London\" {\n      forAll(Arb.int(18..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Properties with shouldThrow\nDESCRIPTION: Shows how to capture and verify properties of a thrown exception, such as checking the exception message content using assertion functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/exceptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Seed Value in Property Tests with Kotest\nDESCRIPTION: This example demonstrates how to manually specify a seed value for property-based tests using PropTestConfig. This approach is useful for creating regression tests by ensuring the same test values are generated across test runs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/seed.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample : StringSpec({\n  \"String size\" {\n    forAll<String, String>(PropTestConfig(seed = 127305235)) { a, b ->\n      (a + b).length == a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Double and Float Matchers in Kotlin with Kotest\nDESCRIPTION: Demonstrates matchers for floating-point comparisons, including tolerance-based equality and sign checks in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBe(value plusOrMinus(tolerance))\ndouble.shouldBeBetween(x, y)\ndouble.shouldBeLessThan(n)\ndouble.shouldBeLessThanOrEqual(n)\ndouble.shouldBeGreaterThan(n)\ndouble.shouldBeGreaterThanOrEqual(n)\ndouble.shouldBePositive()\ndouble.shouldBeNegative()\n```\n\n----------------------------------------\n\nTITLE: Using Inspectors in Kotest for Collection Testing\nDESCRIPTION: Demonstrates the use of Kotest's inspectors to test elements in a collection. This example checks that exactly 3 elements in 'mylist' have their 'city' property set to 'Chicago'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nmylist.forExactly(3) {\n    it.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Data Driven Testing with Kotest\nDESCRIPTION: Shows how to implement data driven tests using Kotest's forAll function with row parameters to test multiple combinations of inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n   \"maximum of two numbers\" {\n      forAll(\n         row(1, 5, 5),\n         row(1, 0, 1),\n         row(0, 0, 0)\n      ) { a, b, max ->\n         Math.max(a, b) shouldBe max\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Server Responses with Kotest Assertions\nDESCRIPTION: Example of using Kotest matchers with Ktor's server-side test support. The code demonstrates verifying HTTP status codes, content, headers, and cookies in a TestApplicationResponse.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithTestApplication({ module(testing = true) }) {\n   handleRequest(HttpMethod.Get, \"/\").apply {\n      response shouldHaveStatus HttpStatusCode.OK\n      response shouldNotHaveContent \"failure\"\n      response.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n      response.shouldNotHaveCookie(name = \"Set-Cookie\", cookieValue = \"id=1234\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Invocations in ShouldSpec\nDESCRIPTION: Example showing how to configure a test case with multiple invocations and parallel threads using ShouldSpec style. The test will run 10 times across 2 threads.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_case_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Using shouldBe in Kotlin\nDESCRIPTION: Demonstrates the basic usage of shouldBe matcher to assert equality between values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nname shouldBe \"sam\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Factory Inclusion Example\nDESCRIPTION: Demonstration of including multiple test factories along with regular tests in a spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_factories.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HugeTestFile : FunSpec({\n\n   test(\"first test\") {\n     // test here\n   }\n\n   include(factory1(\"foo\"))\n   include(factory2(1, 4))\n\n   test(\"another test\") {\n     //  testhere\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Regex Properties in Kotlin\nDESCRIPTION: These matchers are used to assert various properties of regex objects in Kotlin, such as pattern equality, specific patterns, and regex options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldBeRegex(anotherRegex)\nregex.shouldHavePattern(regexPattern)\nregex.shouldHaveExactRegexOptions(regexOptions)\nregex.shouldIncludeRegexOption(regexOption)\nregex.shouldIncludeRegexOptions(regexOptions)\n```\n\n----------------------------------------\n\nTITLE: Asserting NonEmptyList Types in Kotlin with Kotest Arrow\nDESCRIPTION: Examples of assertions for NonEmptyList types using Kotest Arrow matchers. These matchers check for contents, nulls, duplicates, sorting, and more.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nnel.shouldContain(e)\nnel.shouldContainAll(e1,e2,...,en)\nnel.shouldContainNull()\nnel.shouldContainNoNulls()\nnel.shouldContainOnlyNulls()\nnel.shouldHaveDuplicates()\nnel.shouldBeSingleElement(e)\nnel.shouldBeSorted()\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Kotest Arbs\nDESCRIPTION: Demonstrates how to combine multiple arbitraries to construct complex objects using bind operation, shown with a Person data class example.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genops.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb: Arb<Person> = Arb.bind(\n   Arb.string(),\n   Arb.int()\n) { name, age -> Person(name, age) }\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Test Execution with EnabledCondition in Kotest\nDESCRIPTION: Demonstrates how to create a custom EnabledCondition implementation that controls test execution based on the operating system. This example enables tests containing 'Linux' in their name only when running on Linux systems.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/annotations.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LinuxOnlyCondition : EnabledCondition {\n  override fun enabled(kclass: KClass<out Spec>): Boolean = when {\n    kclass.simpleName?.contains(\"Linux\") == true -> IS_OS_LINUX\n    else -> true // non Linux tests always run\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing to Multiplatform Project\nDESCRIPTION: Adds the Kotest property testing library to the common test dependencies in a Kotlin Multiplatform project. This enables property-based testing across all targeted platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_16\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-property:$version'\n```\n\n----------------------------------------\n\nTITLE: Map Matchers in Kotlin with Kotest\nDESCRIPTION: Demonstrates matchers for asserting map contents, keys, and values in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nmap.shouldContain(\"key\", \"value\")\nmap.shouldContainAll(other)\nmap.shouldContainExactly(other)\nmap.shouldContainKey(key)\nmap.shouldContainKeys(keys)\nmap.shouldContainValue(value)\nmap.shouldContainValues(values)\nmap.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Test Generation in Kotest\nDESCRIPTION: Demonstrates how to create tests dynamically at runtime using a list of values, showing both the dynamic and equivalent static implementations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/writing_tests.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n    listOf(\n      \"sam\",\n      \"pam\",\n      \"tim\",\n    ).forEach {\n       test(\"$it should be a three letter name\") {\n           it.shouldHaveLength(3)\n       }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   test(\"pam should be a three letter name\") {\n      \"pam\".shouldHaveLength(3)\n   }\n\n   test(\"tim should be a three letter name\") {\n     \"tim\".shouldHaveLength(3)\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling TestDispatcher for Individual Test in Kotest\nDESCRIPTION: This snippet shows how to enable a TestDispatcher for a single test in a Kotest FunSpec. It uses the coroutineTestScope configuration option to activate the TestDispatcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineTestScope = true) {\n         // this test will run with a test dispatcher\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Assertions in Kotlin using Kotest\nDESCRIPTION: Assertions for checking object types, instances, and annotations in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nobj.shouldBeSameInstanceAs(other)\nobj.shouldBeTypeOf<T>()\nobj.shouldBeInstanceOf<T>()\nobj.shouldHaveAnnotation(annotationClass)\nobj.shouldBeNull()\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions in Kotest\nDESCRIPTION: Shows how to test for expected exceptions and verify their properties using Kotest's shouldThrow function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/index.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Timer Listener in Kotest\nDESCRIPTION: Implementation of a custom listener that measures and logs the execution time of each test case. The listener implements both BeforeTestListener and AfterTestListener interfaces to track start and end times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/extensions/examples.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : BeforeTestListener, AfterTestListener {\n\n  var started = 0L\n\n  override fun beforeTest(testCase: TestCase): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(testCase: TestCase, result: TestResult): Unit {\n    println(\"Duration of ${testCase.descriptor} = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Property Testing with forAll in Kotlin\nDESCRIPTION: Demonstrates using forAll function to test string concatenation property. The test verifies that the length of concatenated strings equals the sum of individual string lengths.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/test_functions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String> { a, b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Message in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to capture and verify the thrown exception's properties, such as the exception message. The example shows combining exception catching with message assertion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/exceptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Property-Based Testing in Kotest\nDESCRIPTION: Example of property-based testing where the framework automatically generates test data to verify string concatenation properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n  \"String size\" {\n    checkAll<String, String> { a, b ->\n      (a + b) shouldHaveLength a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin for Kotest\nDESCRIPTION: Sets up the Maven Surefire plugin to run JUnit5 tests, which is required for Kotest integration with Maven. This configuration enables Maven to recognize and execute Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions in Kotest with shouldThrow\nDESCRIPTION: Shows how to test for exceptions using the shouldThrow function, which captures the thrown exception and allows for additional assertions on its properties like the message content.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/index.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Using Testcontainers with Kotest for Database Testing\nDESCRIPTION: Example showing how to use a Redis container with Kotest. The perTest() extension method converts the container into a TestListener that starts before each test and stops after each test completion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers_46x.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Generators in Property Testing\nDESCRIPTION: Demonstrates using custom generators with specific ranges for testing age-related functions in different locations. Shows how to control the sample space of test inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/test_functions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"is allowed to drink in Chicago\" {\n      forAll(Arb.int(21..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n   \"is allowed to drink in London\" {\n      forAll(Arb.int(18..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution with Reason Using EnabledOrReasonIf in Kotlin\nDESCRIPTION: Demonstrates the use of 'enabledOrReasonIf' to provide a reason for test disablement. This example disables 'danger' tests on Fridays with a custom message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/config_enabled.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: (TestCase) -> Enabled = {\n   if (it.name.testName.startsWith(\"danger\") && isFriday())\n      Enabled.disabled(\"It's a friday, and we don't like danger!\")\n   else\n      Enabled.enabled\n}\n\n\"danger Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Single Instance Isolation Mode Example in Kotlin\nDESCRIPTION: This example demonstrates the behavior of SingleInstance isolation mode, where the same instance is used for all tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/isolation_mode.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SingleInstanceExample : WordSpec({\n   val id = UUID.randomUUID()\n   \"a\" should {\n      println(id)\n      \"b\" {\n         println(id)\n      }\n      \"c\" {\n         println(id)\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Individual Tests per Data Row in FreeSpec\nDESCRIPTION: Shows how to create separate named tests for each row of data in a FreeSpec. This pattern allows for individual test reporting and better test organization using map to transform rows into test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using StringSpec in Kotlin for Kotest\nDESCRIPTION: Demonstration of StringSpec, which provides a minimal syntax for writing tests in Kotest. It shows how to write a basic test and how to add configuration to a test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\" {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\".config(enabled = false, invocations = 3) {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Arbitrary Generator for Person Class in Kotlin\nDESCRIPTION: Shows how to create a custom Arbitrary generator for a Person class, composing String and Int arbitraries using the ArbitraryBuilderSyntax context in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/customgens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb = arbitrary {\n   val name = Arb.string(10..12).bind()\n   val age = Arb.int(21, 150).bind()\n   Person(name, age)\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution with System Check in Kotlin\nDESCRIPTION: Shows how to run tests conditionally based on system properties, specifically using Apache Commons Lang's SystemUtils to check for Linux OS.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/config_enabled.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = IS_OS_LINUX) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FunSpec in Kotlin for Kotest\nDESCRIPTION: Example of using FunSpec to create tests in Kotest. It demonstrates how to create a test using the 'test' function and how to disable tests using 'xcontext' and 'xtest'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    test(\"String length should return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    context(\"this outer block is enabled\") {\n        xtest(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        test(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Server Responses with Kotest Matchers\nDESCRIPTION: Demonstrates how to use Kotest matchers with Ktor's server-side test support. The example shows verifying HTTP status, content, headers, and cookies in a test application response.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithTestApplication({ module(testing = true) }) {\n   handleRequest(HttpMethod.Get, \"/\").apply {\n      response shouldHaveStatus HttpStatusCode.OK\n      response shouldNotHaveContent \"failure\"\n      response.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n      response.shouldNotHaveCookie(name = \"Set-Cookie\", cookieValue = \"id=1234\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom String Length Matcher in Kotest\nDESCRIPTION: Demonstrates how to implement a custom matcher that checks if a string has a specific length. The matcher includes appropriate failure messages for both regular and negated cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/custom.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun haveLength(length: Int) = Matcher<String> { value ->\n  MatcherResult(\n    value.length == length,\n    { \"string had length ${value.length} but we expected length $length\" },\n    { \"string should not have length $length\" },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kotlin Reflection Matchers in Kotest\nDESCRIPTION: Kotlin reflection matchers for testing function annotations, return types, property types, and member properties in Kotest. These matchers allow assertions about Kotlin's reflection capabilities, including visibility, annotations, and parameter checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nkfunction.shouldHaveAnnotations()\nkfunction.shouldHaveAnnotations(n)\nkfunction.shouldBeAnnotatedWith<T>()\nkfunction.shouldBeAnnotatedWith<T> { block }\nkfunction.shouldHaveReturnType<T>()\nkfunction.shouldBeInline()\nkfunction.shouldBeInfix()\nkproperty.shouldBeOfType<T>()\nkproperty.shouldBeConst()\nkproperty.shouldBeLateInit()\nkcallable.shouldHaveVisibility(visibility)\nkcallable.shouldBeFinal()\nkcallable.shouldBeOpen()\nkcallable.shouldBeAbstract()\nkcallable.shouldBeSuspendable()\nkcallable.shouldAcceptParameters(parameters)\nkcallable.shouldAcceptParameters(parameters) { block }\nkcallable.shouldHaveParametersWithName(parameters)\nkcallable.shouldHaveParametersWithName(parameters) { block }\nktype.shouldBeOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Map Assertions in Kotlin\nDESCRIPTION: Functions for verifying map contents, keys, and values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldContain(\"key\", \"value\")\nmap.shouldContainAll(other)\nmap.shouldContainExactly(other)\nmap.shouldContainKey(key)\nmap.shouldContainKeys(keys)\nmap.shouldContainValue(value)\nmap.shouldContainValues(values)\nmap.shouldBeEmpty()\nmap.shouldMatchAll(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\n```\n\n----------------------------------------\n\nTITLE: Property-Based Testing in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use property-based testing in Kotest to automatically generate test data. This example tests the property that the length of two concatenated strings equals the sum of their individual lengths.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n  \"String size\" {\n    checkAll<String, String> { a, b ->\n      (a + b) shouldHaveLength a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using DSL Methods for Lifecycle Hooks in Kotest\nDESCRIPTION: This snippet demonstrates how to use DSL methods like beforeTest and afterTest to define lifecycle hooks directly inside a Kotest spec. These methods create and register a TestListener automatically.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/lifecycle_hooks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec({\n  beforeTest {\n    println(\"Starting a test $it\")\n  }\n  afterTest { (test, result) ->\n    println(\"Finished spec with result $result\")\n  }\n  \"this test\" should {\n    \"be alive\" {\n      println(\"Johnny5 is alive!\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Ktor Matchers with Server-Side Testing\nDESCRIPTION: This example demonstrates how to use Kotest Ktor matchers with the server-side test support. It shows how to assert HTTP response status, content, headers, and cookies in a test application.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithTestApplication({ module(testing = true) }) {\n   handleRequest(HttpMethod.Get, \"/\").apply {\n      response shouldHaveStatus HttpStatusCode.OK\n      response shouldNotHaveContent \"failure\"\n      response.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n      response.shouldNotHaveCookie(name = \"Set-Cookie\", cookieValue = \"id=1234\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Tests with StringSpec in Kotlin\nDESCRIPTION: Demonstrates the basic usage of StringSpec style testing in Kotest with simple string assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"length should return size of string\" {\n    \"hello\".length shouldBe 5\n  }\n  \"startsWith should test for a prefix\" {\n    \"world\" should startWith(\"wor\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Eventually with Configuration Block in Kotlin\nDESCRIPTION: Example demonstrating how to use 'eventually' with a configuration block to set custom duration and interval settings for more control over the test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 1.seconds\n  interval = 100.milliseconds\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using shouldEqualSpecifiedJson for Lenient Field Comparison in Kotlin\nDESCRIPTION: Demonstrates the use of shouldEqualSpecifiedJson, which is similar to shouldEqualJson but with FieldComparison set to Lenient by default. This allows for additional fields in the actual JSON.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/json/content.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = \"\"\" { \"a\": true, \"date\": \"2019-11-03\" } \"\"\"\nval b = \"\"\" { \"a\": true } \"\"\"\n\n// this would pass\na shouldEqualSpecifiedJson b\n\n// this would fail\na shouldEqualJson b\n```\n\n----------------------------------------\n\nTITLE: Asserting Concurrent Operations in Kotlin using Kotest\nDESCRIPTION: Demonstrates assertions for concurrent operations in Kotest. Includes checks for completion within a timeout and timeouts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_21\n\nLANGUAGE: Kotlin\nCODE:\n```\nshouldCompleteWithin(timeout, unit, function)\nshouldTimeout(timeout, unit, function)\nshouldTimeout(duration, suspendableFunction)\n```\n\n----------------------------------------\n\nTITLE: Kafka Producer and Consumer Test with Kotest and Testcontainers\nDESCRIPTION: Demonstrates a full test scenario for Kafka using Kotest and Testcontainers, including producing and consuming messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KafkaTestContainerExtensionTest : FunSpec() {\n  init {\n\n    val kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n      withEmbeddedZookeeper()\n    }\n\n    test(\"should send/receive message\") {\n\n      val producer = kafka.createStringStringProducer()\n      producer.send(ProducerRecord(\"foo\", null, \"bubble bobble\"))\n      producer.close()\n\n      val consumer = kafka.createStringStringConsumer {\n        this[ConsumerConfig.MAX_POLL_RECORDS_CONFIG] = 1\n      }\n\n      consumer.subscribe(listOf(\"foo\"))\n      val records = consumer.poll(Duration.ofSeconds(100))\n      records.shouldHaveSize(1)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of 'eventually' with Duration in Kotlin\nDESCRIPTION: Shows how to use the 'eventually' function with a simple duration parameter. This code will repeatedly try to verify that a user with ID 1 has the name 'bob', retrying for up to 5 seconds until the condition passes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\neventually(5.seconds) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using forAll for Boolean-Based Property Testing in Kotlin\nDESCRIPTION: This code demonstrates how to use the 'forAll' function to test a property where the concatenated string length equals the sum of individual string lengths. The test passes if the boolean function returns true for all generated input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/test_functions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String> { a, b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Server Endpoints\nDESCRIPTION: Example of testing a Ktor server endpoint using TestApplicationResponse matchers. Shows how to verify response status, content, headers, and cookies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithTestApplication({ module(testing = true) }) {\n   handleRequest(HttpMethod.Get, \"/\").apply {\n      response shouldHaveStatus HttpStatusCode.OK\n      response shouldNotHaveContent \"failure\"\n      response.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n      response.shouldNotHaveCookie(name = \"Set-Cookie\", cookieValue = \"id=1234\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Tests in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use Property Tests in Kotest. These tests automatically generate values for testing, allowing for more comprehensive test coverage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n\n  \"String size\" {\n    forAll({ a: String, b: String ->\n      (a + b).length == a.length + b.length\n    })\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockServer Test in Kotest FunSpec\nDESCRIPTION: Demonstrates how to set up a MockServer test using Kotest's FunSpec. The example shows configuration of mock HTTP endpoints, request/response handling, and validation using Ktor client. It includes lifecycle management with MockServerListener and request verification using kotest-assertions-ktor matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/mockserver.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyMockServerTest : FunSpec() {\n  init {\n\n      // this attaches the server to the lifeycle of the spec\n      listener(MockServerListener(1080))\n\n      // we can use the client to create routes. Here we are setting them up\n      // before each test by using the beforeTest callback.\n      beforeTest {\n         MockServerClient(\"localhost\", 1080).`when`(\n            HttpRequest.request()\n               .withMethod(\"POST\")\n               .withPath(\"/login\")\n               .withHeader(\"Content-Type\", \"application/json\")\n               .withBody(\"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\")\n         ).respond(\n            HttpResponse.response()\n               .withStatusCode(202)\n               .withHeader(\"X-Test\", \"foo\")\n         )\n      }\n\n      // this test will confirm the endpoint works\n      test(\"login endpoint should accept username and password json\") {\n\n         // using the ktor client to send requests\n         val client = HttpClient(CIO)\n         val resp = client.post<io.ktor.client.statement.HttpResponse>(\"http://localhost:1080/login\") {\n            contentType(ContentType.Application.Json)\n            body = \"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\"\n         }\n\n         // these handy matchers come from the kotest-assertions-ktor module\n         resp.shouldHaveStatus(HttpStatusCode.Accepted)\n         resp.shouldHaveHeader(\"X-Test\", \"foo\")\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Driven Testing in StringSpec with Kotest\nDESCRIPTION: This example shows how to use data driven testing within a StringSpec in Kotest. It tests string concatenation with multiple input combinations using the 'forAll' function and 'row' objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forAll(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions with a Test Target in Kotlin with Kotest\nDESCRIPTION: This snippet shows an alternative version of 'assertSoftly' that takes a test target and a lambda with the test target as its receiver. This allows for more focused assertions on a specific object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/soft_assertions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly(foo) {\n    shouldNotEndWith(\"b\")\n    length shouldBe 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Test Listeners in Kotlin using Kotest\nDESCRIPTION: This code snippet demonstrates how to create and use a PropTestListener with a property test in Kotest. It shows the setup of a listener with beforeTest and afterTest methods, and how to apply it to a checkAll property test using PropTestConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.1.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = object : PropTestListener {\n  override suspend fun beforeTest() {\n    println(\"Startup\")\n  }\n\n  override suspend fun afterTest() {\n    println(\"Shutdown\")\n  }\n}\n\nval propConfig = PropTestConfig(listeners = listOf(listener))\n\ncheckAll<String, String>(10, propConfig) { a, b ->\n  a.length + b.length shouldBe (a + b).length\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Password Matcher Using Logical Product\nDESCRIPTION: Demonstrates creating a composed matcher for password validation using Matcher.all to ensure the password contains a digit, lowercase, and uppercase letters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/composed_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval passwordMatcher = Matcher.all(\n   containADigit(), contain(Regex(\"[a-z]\")), contain(Regex(\"[A-Z]\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Callbacks to Data-Driven Tests in Kotest\nDESCRIPTION: Example demonstrating how to use beforeTest/afterTest callbacks with data-driven tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nbeforeTest {\n  // reset test setup\n}\n\ncontext(\"...\") {\n  withData(X, Y, Z) { x,y,z ->\n    // test code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparable Assertions in Kotest\nDESCRIPTION: Matchers for comparing objects using the Comparable interface in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ncomp.shouldBeLessThan(other)\ncomp.shouldBeLessThanOrEqualTo(other)\ncomp.shouldBeEqualComparingTo(other)\ncomp.shouldBeEqualComparingTo(other, comparator)\ncomp.shouldBeGreaterThan(other)\ncomp.shouldBeGreaterThanOrEqualTo(other)\n```\n\n----------------------------------------\n\nTITLE: Using forAll Function for Property Testing in Kotlin\nDESCRIPTION: Demonstrates how to use the forAll function in Kotest to test the property that the length of two concatenated strings equals the sum of their individual lengths. The function returns a boolean value that must be true for all inputs to pass the test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/test_functions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String> { a, b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Double and Float Assertions in Kotest\nDESCRIPTION: Extension functions for asserting properties of Double and Float values. Includes methods for equality within tolerance, range checking, comparison, and special value verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBe(value plusOrMinus(tolerance))\ndouble.shouldBeBetween(x, y)\ndouble.shouldBeLessThan(n)\ndouble.shouldBeLessThanOrEqual(n)\ndouble.shouldBeGreaterThan(n)\ndouble.shouldBeGreaterThanOrEqual(n)\ndouble.shouldBePositive()\ndouble.shouldBeNegative()\ndouble.shouldBePositiveInfinity()\ndouble.shouldBeNegativeInfinity()\ndouble.shouldBeNaN()\ndouble.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout for Individual Test in Kotlin with Kotest\nDESCRIPTION: Example of setting a timeout for a specific test using the config method with a timeout parameter. The timeout is set to 100 milliseconds, after which the test will fail if not completed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n   test(\"this test will timeout quickly!\").config(timeout = 100.milliseconds) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Building JSON Schema with Kotest DSL\nDESCRIPTION: Demonstrates creating JSON schemas using Kotest's DSL, including nested schemas, property requirements, and validation rules for numeric values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/json/schema.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval addressSchema = jsonSchema {\n  obj {   // object is reserved, obj was chosen over jsonObject for brevity but could be changed ofc, or jsonObject could be added as alternative.\n    withProperty(\"street\", required = true) { string() }\n    withProperty(\"zipCode\", required = true) {\n      integer {\n        beEven() and beInRange(10000..99999)   // supports constructing a matcher that will be used to test values\n      }\n    }\n    additionalProperties = false   // triggers failure if other properties are defined in actual\n  }\n}\n\nval personSchema = jsonSchema {\n  obj {\n    withProperty(\"name\", required = true) { string() }\n    withProperty(\"address\") { addressSchema() } // Schemas can re-use other schemas 🎉\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Regional Data Arbitraries in Kotlin\nDESCRIPTION: Functions for generating locale, timezone, and geolocation data in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.locale()\nArb.timezoneCodeThree()\nArb.geoLocation()\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Test Function in Kotlin for Kotest\nDESCRIPTION: This snippet demonstrates the fundamental structure of a test in Kotest. A test is essentially a function that takes a TestContext and returns Unit. The function typically contains assertions (matchers) that throw exceptions if they fail.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/dsl.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nTestContext -> Unit\n```\n\n----------------------------------------\n\nTITLE: Using Assumptions in Kotest Property Testing (Kotlin)\nDESCRIPTION: Demonstrates the use of assumptions in Kotest property testing to filter out unwanted input combinations while tracking the discard rate. This approach is safer and more maintainable than naive filtering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/assumptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  withAssumptions(a != b) {\n    levenshtein(a, b) shouldBeGreaterThan 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Table Driven Testing in StringSpec with Kotest\nDESCRIPTION: This example shows how to use table-driven testing within a StringSpec in Kotest. It tests string concatenation with multiple input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forAll(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: String Assertions in Kotlin\nDESCRIPTION: String validation matchers for content, case, length, patterns and specific character types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldBeBlank()\nstr.shouldBeEmpty()\nstr.shouldBeLowerCase()\nstr.shouldBeUpperCase()\nstr.shouldContain(\"substr\")\nstr.shouldContain(regex)\nstr.shouldContainADigit()\nstr.shouldContainIgnoringCase(substring)\nstr.shouldContainOnlyDigits()\nstr.shouldBeInteger([radix])\nstr.shouldContainOnlyOnce(substring)\nstr.shouldEndWith(\"suffix\")\nstr.shouldHaveLength(length)\nstr.shouldHaveLineCount(count)\nstr.shouldHaveMaxLength(max)\nstr.shouldHaveMinLength(min)\nstr.shouldHaveSameLengthAs(anotherString)\nstr.shouldMatch(regex)\nstr.shouldStartWith(\"prefix\")\nstr.shouldBeEqualIgnoringCase(other)\nstr.shouldBeTruthy()\nstr.shouldBeFalsy()\n```\n\n----------------------------------------\n\nTITLE: Building JSON Schema using Kotest DSL in Kotlin\nDESCRIPTION: Shows how to construct JSON schemas using Kotest's built-in DSL. It creates an address schema and a person schema, demonstrating property definitions, nested schemas, and custom matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/json/schema.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval addressSchema = jsonSchema {\n  obj {   // object is reserved, obj was chosen over jsonObject for brevity but could be changed ofc, or jsonObject could be added as alternative.\n    withProperty(\"street\", required = true) { string() }\n    withProperty(\"zipCode\", required = true) {\n      integer {\n        beEven() and beInRange(10000..99999)   // supports constructing a matcher that will be used to test values\n      }\n    }\n    additionalProperties = false   // triggers failure if other properties are defined in actual\n  }\n}\n\nval personSchema = jsonSchema {\n  obj {\n    withProperty(\"name\", required = true) { string() }\n    withProperty(\"address\") { addressSchema() } // Schemas can re-use other schemas 🎉\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Tests in FunSpec\nDESCRIPTION: Shows how to add tags to a test case using FunSpec style for test organization and filtering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_case_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Wide Timeouts in Kotest\nDESCRIPTION: This example demonstrates how to set project-wide timeouts using AbstractProjectConfig. It sets a default test timeout of 100 milliseconds and an invocation timeout of 33 milliseconds for all tests in the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig {\n    override val timeout = 100.milliseconds\n    override val invocationTimeout = 33.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PropTestConfig Usage in Kotlin Property Test\nDESCRIPTION: Example showing basic usage of PropTestConfig in a property test that verifies string concatenation length properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String>(PropTestConfig(options here...)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Testcontainers to Kotest TestListeners\nDESCRIPTION: This example demonstrates how to convert a Docker container (Redis) into a Kotest TestListener using the perTest() extension method. This allows Kotest to automatically start the container before each test and stop it afterward, managing the container lifecycle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generator with Enum in Kotest Property Test\nDESCRIPTION: This snippet demonstrates how to use an Exhaustive generator with an enum class in a Kotest property test. It shows a forAll test that combines an Int generator with a Season enum generator for 100 iterations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/gens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Season { Winter, Fall, Spring, Summer }\n\nforAll<Int, Season>(100) { a, season -> ... }\n```\n\n----------------------------------------\n\nTITLE: Using assertSoftly with Test Target in Kotlin with Kotest\nDESCRIPTION: This snippet shows an alternative version of assertSoftly that takes a test target and a lambda with the test target as its receiver. This allows for more concise assertions on a specific object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/soft_assertions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly(foo) {\n    shouldNotEndWith(\"b\")\n    length shouldBe 3\n}\n```\n\n----------------------------------------\n\nTITLE: Statistical Collection Matchers\nDESCRIPTION: Assertion functions for testing statistical properties of collections including mean, variance and standard deviation with configurable precision.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveMean(mean)\ncollection.shouldHaveMean(mean, precision)\ncollection.shouldHaveVariance(mean)\ncollection.shouldHaveVariance(mean, precision)\ncollection.shouldHaveStandardDeviation(mean)\ncollection.shouldHaveStandardDeviation(mean, precision)\n```\n\n----------------------------------------\n\nTITLE: Element Matchers in Kotlin\nDESCRIPTION: Basic element matchers for checking child tags, text content, and attributes. These matchers allow assertions on individual HTML elements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/jsoup.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nelement.shouldHaveChildWithTag(tag)\nelement.shouldHaveText(text)\nelement.shouldHaveAttribute(name)\nelement.shouldHaveAttributeValue(name, value)\n```\n\n----------------------------------------\n\nTITLE: Either Assertions in Kotest Arrow\nDESCRIPTION: Assertion methods for Arrow Either type including shouldBeRight() and shouldBeLeft() variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\neither.shouldBeRight()  // Asserts either is Right and returns value\neither.shouldBeRight(v) // Asserts either is Right with value v\neither.shouldBeLeft()   // Asserts either is Left and returns value\neither.shouldBeLeft(v)  // Asserts either is Left with value v\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Timer Listener in Kotest\nDESCRIPTION: Implementation of a custom listener that measures and logs the execution time of each test case. The listener implements both BeforeTestListener and AfterTestListener interfaces.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/extensions/examples.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : BeforeTestListener, AfterTestListener {\n\n  var started = 0L\n\n  override fun beforeTest(testCase: TestCase): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(testCase: TestCase, result: TestResult): Unit {\n    println(\"Duration of ${testCase.descriptor} = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Lifecycle Callback Functions in Kotest Spec\nDESCRIPTION: Shows how to override lifecycle callback functions directly in a Spec class by implementing the beforeTest method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/lifecycle_hooks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec() {\n    override fun beforeTest(testCase: TestCase) {\n        println(\"Starting a test $testCase\")\n    }\n\n    init {\n        \"this test\" should {\n            \"be alive\" {\n                println(\"Johnny5 is alive!\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Test Specification in Kotest\nDESCRIPTION: Demonstrates the basic syntax for writing tests using Kotest's StringSpec style. Shows how to write simple assertions using shouldBe and should matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n   \"length should return size of string\" {\n      \"hello\".length shouldBe 5\n   }\n   \"startsWith should test for a prefix\" {\n      \"world\" should startWith(\"wor\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom EnabledCondition for Conditional Test Execution\nDESCRIPTION: This snippet shows how to implement a custom EnabledCondition class that determines whether a test specification should run based on the operating system. It enables tests containing 'Linux' in their name only when running on Linux.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/annotations.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LinuxOnlyCondition : EnabledCondition {\n  override fun enabled(kclass: KClass<out Spec>): Boolean = when {\n    kclass.simpleName?.contains(\"Linux\") == true -> IS_OS_LINUX\n    else -> true // non Linux tests always run\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution with EnabledIf in Kotlin\nDESCRIPTION: This example shows how to use the 'enabledIf' configuration to dynamically determine whether a test should run based on a function that evaluates the test case at runtime.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/config_enabled.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: EnabledIf = { !(it.name.testName.startsWith(\"danger\") && isFriday()) }\n\n\"danger Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Library for Multiplatform Projects\nDESCRIPTION: Adds the Kotest assertions library dependency for Kotlin multiplatform projects, with an example for JavaScript-specific configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-assertions-core:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution in Kotest\nDESCRIPTION: Demonstrates how to configure test execution parameters including timeout, invocations, thread count, and tags using Kotest's config block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n   \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Throwing with Kotest in Kotlin\nDESCRIPTION: This snippet demonstrates how to test that a specific exception is thrown and verify properties of the thrown exception. It uses Kotest's shouldThrow function to capture the exception and then performs additional assertions on the exception's message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n   // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode via Function Override in Kotest\nDESCRIPTION: Example demonstrating how to set isolation mode by overriding the isolationMode() function\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/isolation_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n  override fun isolationMode() = IsolationMode.SingleInstance\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withConstantNow Function in Kotest for Fixed Time Testing\nDESCRIPTION: This snippet demonstrates how to use the 'withConstantNow' function to fix the value returned by LocalDateTime.now() during test execution. This allows testing time-dependent code with consistent results, even if the test execution spans across multiple statements with delays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/instant.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval foreverNow = LocalDateTime.now()\n\nwithConstantNow(foreverNow) {\n  LocalDateTime.now() shouldBe foreverNow\n  delay(10) // Code is taking a small amount of time to execute, but `now` changed!\n  LocalDateTime.now() shouldBe foreverNow\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest Spec\nDESCRIPTION: Demonstrates how to configure assertion mode in a Kotest specification to detect tests without assertions. The example shows setting AssertionMode.Error which will cause the test to fail if no assertions are executed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/assertion_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec() {\n   init {\n      assertions = AssertionMode.Error\n      test(\"this test has no assertions\") {\n         val name = \"sam\"\n         name.length == 3 // this isn't actually testing anything\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with Enabled Flag in Kotlin\nDESCRIPTION: This snippet demonstrates how to disable a test case by setting the 'enabled' configuration parameter to false. It also shows how to conditionally enable tests based on system properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/config_enabled.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = false) {\n  // test here\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = IS_OS_LINUX) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Seed in Property Tests with Kotest\nDESCRIPTION: Demonstrates how to manually specify a seed value using PropTestConfig in a property test. This ensures the same random values are generated on each test run, which is useful for regression testing after discovering a failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/seed.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample : StringSpec({\n  \"String size\" {\n    forAll<String, String>(PropTestConfig(seed = 127305235)) { a, b ->\n      (a + b).length == a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Tests Using DescribeSpec in Kotest\nDESCRIPTION: Shows how to create nested tests using Kotest's DescribeSpec style, which is similar to JavaScript and Ruby testing patterns with describe and it blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/writing_tests.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NestedTestExamples : DescribeSpec({\n\n   describe(\"an outer test\") {\n\n      it(\"an inner test\") {\n        1 + 2 shouldBe 3\n      }\n\n      it(\"an inner test too!\") {\n        3 + 4 shouldBe 7\n      }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Understanding the MatcherResult Interface in Kotest\nDESCRIPTION: Explains the MatcherResult interface which contains three methods: passed() to indicate success or failure, and two message methods for standard and negated failure scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/custom.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MatcherResult {\n  fun passed(): Boolean\n  fun failureMessage(): String\n  fun negatedFailureMessage(): String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution in Kotest with Kotlin\nDESCRIPTION: Demonstrates how to configure test execution parameters like timeout, invocations, threads, and tags using Kotest's config function. This allows fine-tuning test behavior for specific requirements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/index.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n  \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n    // test here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Long Number Assertions in Kotlin\nDESCRIPTION: Numeric validation matchers specifically for long numbers, including range checks and even/odd validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeBetween(x, y)\nlong.shouldBeLessThan(n)\nlong.shouldBeLessThanOrEqual(n)\nlong.shouldBeGreaterThan(n)\nlong.shouldBeGreaterThanOrEqual(n)\nlong.shouldBeInRange(range)\nlong.shouldBeEven()\nlong.shouldBeOdd()\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing in Kotlin with Kotest\nDESCRIPTION: Shows how to perform data-driven testing in Kotest using the forAll function. This example tests the maximum of two numbers with multiple input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/index.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"maximum of two numbers\" {\n    forAll(\n        row(1, 5, 5),\n        row(1, 0, 1),\n        row(0, 0, 0)\n    ) { a, b, max ->\n      Math.max(a, b) shouldBe max\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with Data Driven Tests in Kotest\nDESCRIPTION: An example showing how to use beforeTest callback with data driven tests. This allows for setup operations before each generated test case runs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nbeforeTest {\n  // reset test setup\n}\n\ncontext(\"...\") {\n  withData(X, Y, Z) { x,y,z ->\n    // test code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Testing with FreeSpec in Kotlin\nDESCRIPTION: Demonstrates FreeSpec style which allows arbitrary nesting levels using the minus operator for test organization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FreeSpec({\n    \"String.length\" - {\n        \"should return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n    \"containers can be nested as deep as you want\" - {\n        \"and so we nest another container\" - {\n            \"yet another container\" - {\n                \"finally a real test\" {\n                    1 + 1 shouldBe 2\n                }\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Non-deterministic Testing Functions Table in Markdown\nDESCRIPTION: A markdown table describing four key Kotest functions (Eventually, Continually, Until, and Retry) used for non-deterministic testing scenarios. Each row details the function name and its specific role in testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/nondeterministic_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Role |\n| --- | --- |\n| [Eventually](eventually.md) | Used to ensure that a test will _eventually_ pass within a specified time duration. The test is repeatedly executed until the test passes or the duration expires. |\n| [Continually](continually.md) | Used to ensure that a test _continually_ passes for a period of time. Will repeatedly execute a test until the duration has expired or the test fails.  |\n| [Until](until.md) | Used to ensure that a predicate will eventually hold true within a specified time duration. The predicate is repeatedly executed until true or the duration expires. |\n| [Retry](retry.md) | Used to ensure that a test willi eventually pass within a given number of retries. The test is repeatedly executed until the test passes or the iteration count is reached. |\n```\n\n----------------------------------------\n\nTITLE: Asserting KCallable Properties in Kotlin\nDESCRIPTION: Assertion matchers for KCallable properties in Kotlin, including visibility, modifiers, and parameter checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nkcallable.shouldHaveVisibility(visibility)\nkcallable.shouldBeFinal()\nkcallable.shouldBeOpen()\nkcallable.shouldBeAbstract()\nkcallable.shouldBeSuspendable()\nkcallable.shouldAcceptParameters(parameters)\nkcallable.shouldAcceptParameters(parameters) { block }\nkcallable.shouldHaveParametersWithName(parameters)\nkcallable.shouldHaveParametersWithName(parameters) { block }\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Elements with forNone in Kotlin\nDESCRIPTION: Shows how to use the forNone inspector to verify that no elements in a collection match multiple conditions. The example tests that no strings contain 'x' and start with 'bb'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/inspectors.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with Data-Driven Tests in Kotest\nDESCRIPTION: Example of using beforeTest callback with data-driven tests to reset test setup before each test case execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nbeforeTest {\n  // reset test setup\n}\n\ncontext(\"...\") {\n  withData(X, Y, Z) { x,y,z ->\n    // test code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener with PER_TEST Mode in Kotest\nDESCRIPTION: Shows how to use WireMockListener in PER_TEST mode, which starts a WireMockServer before each test and stops it after each test. This example includes setting up a stub and making a test request.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/wiremock.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_TEST))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n  //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Data Driven Testing in Kotest\nDESCRIPTION: Shows how to implement data driven tests using forAll and row functions to test multiple input combinations\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n   \"maximum of two numbers\" {\n      forAll(\n         row(1, 5, 5),\n         row(1, 0, 1),\n         row(0, 0, 0)\n      ) { a, b, max ->\n         Math.max(a, b) shouldBe max\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Reusable Lifecycle Hooks with Function References\nDESCRIPTION: Shows how to create reusable lifecycle hook functions that can be shared across multiple test specs. Uses type alias BeforeTest for better code organization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/lifecycle_hooks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval startTest: BeforeTest = {\n   println(\"Starting a test $it\")\n}\n\nclass TestSpec : WordSpec({\n\n   // used once\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"be alive\" {\n         println(\"Johnny5 is alive!\")\n      }\n   }\n})\n\nclass OtherSpec : WordSpec({\n\n   // used twice\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"fail\" {\n         fail(\"boom\")\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Driven Tests at Root Level in Kotest FunSpec\nDESCRIPTION: A FunSpec test class using withData directly at the root level without a context wrapper. This approach is more concise but provides less context in test output.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  withData(\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    isPythagTriple(a, b, c) shouldBe true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic DSL Lifecycle Hooks in Kotest\nDESCRIPTION: Example showing how to use beforeTest and afterTest DSL methods in a Kotest WordSpec. The hooks print messages before and after test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/lifecycle_hooks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec({\n  beforeTest {\n    println(\"Starting a test $it\")\n  }\n  afterTest { (test, result) ->\n    println(\"Finished spec with result $result\")\n  }\n  \"this test\" should {\n    \"be alive\" {\n      println(\"Johnny5 is alive!\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of until Function with Duration in Kotest\nDESCRIPTION: Demonstrates using the 'until' function with a specified duration (5 seconds). The test polls a broker until a message is received, waiting up to the specified duration before failing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/until.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging Per Test in Kotest\nDESCRIPTION: Example showing how to enable coroutine debugging for a specific test using the 'coroutineDebugProbes' configuration option. When enabled, any coroutines launched within the test will be included in a coroutine dump after test completion or when an exception is thrown.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineDebugProbes = true) {\n         someMethodThatLaunchesACoroutine() // launches a new coroutine\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Server Endpoints\nDESCRIPTION: Example showing how to test a Ktor server application using Kotest assertions to verify response status, content, headers, and cookies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithTestApplication({ module(testing = true) }) {\n   handleRequest(HttpMethod.Get, \"/\").apply {\n      response shouldHaveStatus HttpStatusCode.OK\n      response shouldNotHaveContent \"failure\"\n      response.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n      response.shouldNotHaveCookie(name = \"Set-Cookie\", cookieValue = \"id=1234\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Driven Tests with Context in Kotest FunSpec\nDESCRIPTION: A FunSpec test class using withData to test multiple Pythagorean triple cases with a context wrapper. The test destructures the data class to access individual properties for verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  context(\"Pythag triples tests\") {\n    withData(\n      PythagTriple(3, 4, 5),\n      PythagTriple(6, 8, 10),\n      PythagTriple(8, 15, 17),\n      PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n      isPythagTriple(a, b, c) shouldBe true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Tests with Kotest in Kotlin\nDESCRIPTION: Demonstrates how to use withData function in Kotest to create data-driven tests for Pythagorean triples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  context(\"Pythag triples tests\") {\n    withData(\n      PythagTriple(3, 4, 5),\n      PythagTriple(6, 8, 10),\n      PythagTriple(8, 15, 17),\n      PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n      isPythagTriple(a, b, c) shouldBe true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec Testing Style in Kotest\nDESCRIPTION: StringSpec provides a minimal syntax where tests are defined by a string followed by a lambda containing the test code. This style offers the most concise way to write tests in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\" {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Assert Softly\nDESCRIPTION: Enables assert softly globally for all tests to batch up errors into a single failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/project_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val globalAssertSoftly = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using checkAll for Property Testing in Kotlin with Kotest\nDESCRIPTION: This example shows how to use the 'checkAll' function in Kotest for property testing. It allows executing assertions against the inputs and considers the test valid if no exceptions are thrown.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/test_functions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      checkAll<String, String> { a, b ->\n         a + b shouldHaveLength a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in FeatureSpec with xfeature and xscenario\nDESCRIPTION: FeatureSpec provides xfeature and xscenario variants to disable specific features or scenarios. This allows keeping disabled tests in the codebase without executing them during test runs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"this outer block is enabled\") {\n        xscenario(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xfeature(\"this block is disabled\") {\n        scenario(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions with Receiver in Kotest\nDESCRIPTION: Demonstrates the new receiver-based soft assertion feature in Kotest 4.1, allowing for more concise and readable assertion blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.1.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nperson.assertSoftly {\n  name shouldBe \"sam\"\n  age shouldBe 99\n  city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Data-driven Testing with forAll in Kotest\nDESCRIPTION: Demonstrates basic usage of the forAll function to test the square root operation with multiple input combinations. Each row contains a root value and its expected square, with automatic type inference.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/data_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forAll(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Lifecycle Mode\nDESCRIPTION: Example of configuring the container lifecycle mode to control when containers are started and stopped during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcDatabaseContainerExtension(mysql, ContainerLifecycleMode.Spec)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Lifecycle Callback Functions in a Kotest Spec\nDESCRIPTION: This example demonstrates how to implement lifecycle hooks by overriding callback functions directly in a Spec class. The beforeTest method is overridden to execute custom logic before each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/lifecycle_hooks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec() {\n    override fun beforeTest(testCase: TestCase) {\n        println(\"Starting a test $testCase\")\n    }\n\n    init {\n        \"this test\" should {\n            \"be alive\" {\n                println(\"Johnny5 is alive!\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Domain Objects as Clues in Kotlin\nDESCRIPTION: Shows how to use domain objects as clues to provide rich context in assertion failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/clues.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class HttpResponse(val status: Int, val body: String)\n\nval response = HttpResponse(404, \"the content\")\n\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Person Class Arbitrary in Kotlin\nDESCRIPTION: Demonstrates creation of a custom arbitrary for a Person class by composing multiple arbitraries using bind() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/customgens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb = arbitrary {\n   val name = Arb.string(10..12).bind()\n   val age = Arb.int(21, 150).bind()\n   Person(name, age)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast at the Spec Level in Kotest\nDESCRIPTION: Shows how to enable fail fast at the specification level, affecting all test contexts within the spec. Once enabled, any test failure will cause all subsequent tests in the spec to be skipped. This example demonstrates the same test structure with spec-level fail fast configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/fail_fast.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n\n      failfast = true\n\n      context(\"context with fail fast enabled at the spec level\") {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Assertions in Kotest Assumptions\nDESCRIPTION: This snippet shows how to use multiple assertions within an assumption in Kotest. It ensures that the input strings are not equal and have the same length before comparing them.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/assumptions.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.string(3..4, Codepoint.az()), Arb.string(3..4, Codepoint.az())) { a, b ->\n  withAssumptions({\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }) {\n     a.compareTo(b) shouldNotBe 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Assertions in Kotlin with Kotest\nDESCRIPTION: Extension methods for asserting properties of Kotlin Channels, including receiving behavior, size verification, and state checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldReceiveWithin(duration)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldReceiveNoElementsWithin(duration)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldHaveSize(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldReceiveAtLeast(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldReceiveAtMost(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldBeClosed()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldBeOpen()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Asserting Double and Float Values in Kotest\nDESCRIPTION: Methods for asserting various properties of double and float values in Kotest, including equality within tolerance, range checks, and special value assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBe(value plusOrMinus(tolerance))\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBeBetween(x, y)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBeLessThan(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBeLessThanOrEqual(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBeGreaterThan(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBeGreaterThanOrEqual(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBePositive()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBeNegative()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBePositiveInfinity()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBeNegativeInfinity()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBeNaN()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Using checkAll Function for Property Testing in Kotlin\nDESCRIPTION: Shows how to use the checkAll function in Kotest as an alternative to forAll. This approach uses assertions within the test block and passes if no exceptions are thrown during execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/test_functions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      checkAll<String, String> { a, b ->\n         a + b shouldHaveLength a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallelism in Kotest\nDESCRIPTION: Example implementation of AbstractProjectConfig to set parallel test execution across multiple specs. This sets the concurrency level to 3 specs running simultaneously.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/project_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val parallelism = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Throwable Properties in Kotlin with Kotest\nDESCRIPTION: Functions for validating properties of exceptions and throwables, including message content and cause validation with various type checking capabilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveMessage(message)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveCause()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveCause { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveCauseInstanceOf<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveCauseOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Preferred Test Configuration Approach in Kotest 5.0 with Kotlin\nDESCRIPTION: Shows the recommended way to configure test settings in Kotest 5.0, using direct configuration methods that support proper inheritance through test levels.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_5.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n\n    tags(Foo, Bar)\n    timeout = 100.seconds\n\n    test(\"foo\") {\n       // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DSL Methods for Lifecycle Hooks in Kotest\nDESCRIPTION: This snippet demonstrates how to use DSL methods like beforeTest and afterTest to define lifecycle hooks directly inside a Kotest spec. These methods create and register a TestListener automatically.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/lifecycle_hooks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec({\n  beforeTest {\n    println(\"Starting a test $it\")\n  }\n  afterTest { (test, result) ->\n    println(\"Finished spec with result $result\")\n  }\n  \"this test\" should {\n    \"be alive\" {\n      println(\"Johnny5 is alive!\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Numeric Double Values in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces numeric Double values within a specified range, including various edge cases if within range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_21\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.numericDouble(min, max)\n```\n\n----------------------------------------\n\nTITLE: Instant Assertions in Kotest\nDESCRIPTION: Methods for comparing Instant objects including before, after, and between checks\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\ninstant.shouldBeBefore(anotherInstant)\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\n----------------------------------------\n\nTITLE: Asserting File Properties in Kotest\nDESCRIPTION: This snippet demonstrates assertion methods for Files in Kotest. It includes checks for file attributes, content, and directory operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeAbsolute()\nfile.shouldBeADirectory()\nfile.shouldBeAFile()\nfile.shouldBeCanonical()\nfile.shouldBeEmpty()\nfile.shouldBeExecutable()\nfile.shouldBeHidden()\nfile.shouldBeReadable()\nfile.shouldBeRelative()\nfile.shouldBeSmaller(file)\nfile.shouldBeLarger(file)\nfile.shouldBeWriteable()\ndir.shouldBeNonEmptyDirectory()\ndir.shouldContainFile(name)\ndir.shouldContainNFiles(name)\nfile.shouldExist()\nfile.shouldHaveExtension(ext)\nfile.shouldHaveFileSize(size)\nfile.shouldHaveName(name)\nfile.shouldHavePath(path)\nfile.shouldStartWithPath(prefix)\ndir.shouldContainFileDeep(name)\ndir.shouldContainFiles(name1, name2, ..., nameN)\nfile.shouldBeSymbolicLink()\nfile.shouldHaveParent(name)\n```\n\n----------------------------------------\n\nTITLE: Coroutine Integration Example\nDESCRIPTION: Example showing how Kotest allows direct use of suspension functions in tests without requiring runBlocking\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/why.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"my test\" should \"do foo\"\n```\n\n----------------------------------------\n\nTITLE: Reflection-based Assertions\nDESCRIPTION: Methods for testing class and function properties through reflection including annotations, member properties, and class characteristics.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveAnnotations()\nkclass.shouldBeAnnotatedWith<T>()\nkclass.shouldHaveFunction(name)\nkclass.shouldHaveMemberProperty(name)\nkclass.shouldBeSubtypeOf<T>()\nkfunction.shouldHaveAnnotations()\nkfunction.shouldBeAnnotatedWith<T>()\nkfunction.shouldHaveReturnType<T>()\n```\n\n----------------------------------------\n\nTITLE: Table Testing Error Message Example in Kotest\nDESCRIPTION: An example of the error message format produced when a table test fails, showing how Kotest matches input values to parameter names for clear debugging.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nTest failed for (root, 5), (square, 55) with error expected: 55 but was: 25\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Property Testing with Gradle (JVM)\nDESCRIPTION: Shows how to add the Kotest property testing dependency to a JVM project using Gradle. This snippet adds the required dependency to enable property-based testing functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n   testImplementation(\"io.kotest:kotest-property:$version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Generator with Default Shrinking in Kotest\nDESCRIPTION: This snippet demonstrates how to use a built-in generator (positive integers) with its default shrinking behavior in a property-based test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/shrinking.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom String Length Matcher in Kotlin\nDESCRIPTION: Demonstrates how to create a custom matcher function that checks if a string has a specific length. The matcher returns a properly formatted MatcherResult with appropriate success and failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/custom.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun haveLength(length: Int) = Matcher<String> {\n  return MatcherResult(\n    value.length == length,\n    { \"string had length ${value.length} but we expected length $length\" },\n    { \"string should not have length $length\" },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Matcher-based Property Testing in KotlinTest\nDESCRIPTION: Example of property testing in KotlinTest using matchers with assertAll. This newer approach allows using multiple matchers in a single property test without combining results into a boolean.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  assertAll(Gen.string(), Gen.string(), { a, b ->\n    a + b should startWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable Test Callbacks in Kotest\nDESCRIPTION: Shows how to create reusable callback functions that can be shared across multiple test files, using beforeTest hook.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/writing_tests.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval resetDatabase: BeforeTest = {\n  // truncate all tables here\n}\n\nclass ReusableCallbacks : FunSpec({\n\n   beforeTest(resetDatabase)\n\n   test(\"this test will have a sparkling clean database!\") {\n       // test logic here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Random Sets in Kotlin using Kotest\nDESCRIPTION: Generates sets where values are produced by the given element generator. The size of each set is determined randomly within the specified range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_30\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.set(gen, range)\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Classes with Kotest Assertions in Kotlin\nDESCRIPTION: Demonstrates how to compare two instances of the 'Foo' data class using Kotest assertions, showcasing the new diff highlighting feature.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.1.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = Foo(\"hello\", true, 1.0)\nval b = Foo(\"world\", true, 1.3)\na shouldBe b\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Exhaustive Generator with Enum in Kotest Property Test\nDESCRIPTION: Shows how to use an Exhaustive generator with an enum class Season in a property test that iterates 100 times. The test will cycle through all enum values repeatedly, with each value appearing 25 times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/gens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Season { Winter, Fall, Spring, Summer }\n\nforAll<Int, Season>(100) { a, season -> ... }\n```\n\n----------------------------------------\n\nTITLE: Using Basic Soft Assertions in Kotest\nDESCRIPTION: The basic usage of assertSoftly in Kotest, which allows multiple assertions to be performed and all failures to be collected and reported at the end of the block instead of stopping at the first failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/soft_assertions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Data Tests in Kotest\nDESCRIPTION: This example shows how to create nested data tests using two layers of withData functions in Kotest. The outer layer iterates through services while the inner layer tests each service against different HTTP methods, creating a cartesian product of test combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/nested.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n  val services = listOf(\n    \"http://internal.foo\",\n    \"http://internal.bar\",\n    \"http://public.baz\",\n  )\n\n  val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n   withData(services) { service ->\n     withData(methods) { method ->\n       // test service against method\n     }\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Assertions in Kotest\nDESCRIPTION: Comprehensive set of assertions for collections including size checks, content validation, ordering, and element property verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeEmpty()\ncollection.shouldBeUnique()\ncollection.shouldContain(element)\ncollection.shouldContainAll(e1, e2, ..., en)\ncollection.shouldContainDuplicates()\ncollection.shouldContainExactly()\ncollection.shouldContainExactlyInAnyOrder()\ncollection.shouldContainAllInAnyOrder()\ncollection.shouldContainNoNulls()\ncollection.shouldContainNull()\ncollection.shouldContainOnlyNulls()\ncollection.shouldHaveSingleElement(element)\ncollection.shouldHaveSingleElement { block }\ncollection.shouldHaveSize(length)\ncollection.shouldBeSingleton()\ncollection.shouldBeSingleton { block }\ncollection.shouldHaveLowerBound(element)\ncollection.shouldHaveUpperBound(element)\ncollection.shouldBeSmallerThan(col)\ncollection.shouldBeLargerThan(col)\ncollection.shouldBeSameSizeAs(col)\ncollection.shouldHaveAtLeastSize(n)\ncollection.shouldHaveAtMostSize(n)\nlist.shouldBeSorted()\nlist.shouldContainInOrder(other)\nlist.shouldExistInOrder({ element }, ...)\nlist.shouldHaveElementAt(index, element)\nlist.shouldStartWith(lst)\nlist.shouldEndWith(lst)\niterable.shouldMatchEach(assertions)\niterable.shouldMatchInOrder(assertions)\niterable.shouldMatchInOrderSubset(assertions)\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Test Ordering in Kotest\nDESCRIPTION: Shows how to configure tests to run in random order by setting TestCaseOrder.Random in the testCaseOrder() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RandomSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Random\n\n    init {\n      \"foo\" {\n        // This test may run first or second\n      }\n\n      \"bar\" {\n        // This test may run first or second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Comparison Operations in Kotlin Kotest\nDESCRIPTION: Methods for comparing collections and their elements including bounds checking and size comparison.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/collections.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveLowerBound(element)\ncollection.shouldHaveUpperBound(element)\ncollection.shouldBeSmallerThan(col)\ncollection.shouldBeLargerThan(col)\ncollection.shouldBeSameSizeAs(col)\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging for Single Test in Kotest\nDESCRIPTION: Example showing how to enable coroutine debugging for a single test using test configuration. When enabled, the test will generate a coroutine dump after completion or on exception.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineDebugProbes = true) {\n         someMethodThatLaunchesACoroutine() // launches a new coroutine\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Person Class Arbitrary Generator in Kotlin\nDESCRIPTION: Shows how to create an arbitrary generator for a custom Person class by composing multiple arbitrary generators using bind() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/customgens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb = arbitrary {\n   val name = Arb.string(10..12).bind()\n   val age = Arb.int(21, 150).bind()\n   Person(name, age)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Function in Kotlin for Kotest\nDESCRIPTION: This snippet demonstrates the basic structure of a test function in Kotest. It shows that a test is essentially a function that takes a TestContext and returns Unit. The function typically contains assertions that throw exceptions if they fail.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/dsl.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nTestContext -> Unit\n```\n\n----------------------------------------\n\nTITLE: Basic Generator Usage in Kotest\nDESCRIPTION: Examples of fundamental generator usage for different data types. Includes null handling, boolean generation, and numeric type generation with configurable ranges and constraints.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genslist.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.int().orNull() // Generates integers with null values mixed in\nArb.boolean() // Generates random booleans\nArb.char('A'..'Z') // Generates chars in range A-Z\nArb.int(min = 0, max = 100) // Generates ints between 0 and 100\nArb.double(min = 0.0, max = 1.0) // Generates doubles between 0.0 and 1.0\n```\n\n----------------------------------------\n\nTITLE: Map Matchers in Kotest\nDESCRIPTION: Matchers for verifying map contents, keys, values, and emptiness\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldContain(\"key\", \"value\")\nmap.shouldContainAll(other)\nmap.shouldContainExactly(other)\nmap.shouldContainKey(key)\nmap.shouldContainKeys(keys)\nmap.shouldContainValue(value)\nmap.shouldContainValues(values)\nmap.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Enhancing Test Failures with Context Using withClue and asClue\nDESCRIPTION: Demonstrates how to add contextual information to test assertions using withClue and asClue helpers. This improves failure messages by providing additional context about what is being tested.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") { user.name shouldNotBe null }\n\ndata class HttpResponse(val status: Int, body: String)\nval response = HttpResponse(200, \"the content\")\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Eventually Configuration in Kotlin Tests\nDESCRIPTION: This example shows how to create and share Eventually configurations for different test scenarios. It demonstrates setting up 'slow' and 'fast' configurations, and customizing them for specific test suites with custom logging.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = EventuallyConfig<ServerResponse, ServerException>(5.minutes, interval = 25.milliseconds.fibonacci(), exceptionClass = ServerException::class)\nval fast = slow.copy(duration = 5.seconds)\n\nclass FooTests : StringSpec({\n  val logger = logger(\"FooTests\")\n  val fSlow = slow.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\")})\n\n  \"server eventually provides a result for /foo\" {\n    eventually(fSlow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : StringSpec({\n  val logger = logger(\"BarTests\")\n  val bFast = fast.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\")})\n\n  \"server eventually provides a result for /bar\" {\n    eventually(bFast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Generator with Default Shrinker in Kotest\nDESCRIPTION: This snippet demonstrates how to use a built-in generator (Arb.positiveInt()) in a property-based test. If the test fails, Kotest will automatically apply shrinking to find the minimal failing case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/shrinking.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Data Driven Testing in Kotest StringSpec\nDESCRIPTION: This example shows how to implement data driven testing within a StringSpec. It tests string concatenation using multiple input rows.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forAll(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Result Assertions in Kotest\nDESCRIPTION: Methods for testing Result objects including success/failure verification, value validation, and failure type checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeSuccess()\nresult.shouldBeSuccess(value)\nresult.shouldBeSuccess(block)\nresult.shouldBeFailure()\nresult.shouldBeFailureOfType<Type : Throwable>()\nresult.shouldBeFailure(block)\n```\n\n----------------------------------------\n\nTITLE: Content-based JSON Matchers in Kotest\nDESCRIPTION: Advanced JSON matchers for comparing JSON content, checking specific paths and values, and matching against resource files. Some matchers are JVM-specific while others support multiplatform.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/json/overview.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Matcher                                                                         | Description                                                                                          | Targets       |\n|---------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|:--------------||\n| [shouldEqualJson](content-json-matchers.html#shouldequaljson)                   | Verifies that a String matches a given JSON structure.                                               | Multiplatform |\n| [shouldEqualSpecifiedJson](content-json-matchers.html#shouldequalspecifiedjson) | Verifies that a String matches a given JSON structure, but allows additional unspecified properties. | Multiplatform |\n| [shouldContainJsonKey](content-json-matchers.html#shouldcontainjsonkey)         | Verifies that a String is JSON, and contains a given JSON path                                       | JVM           |\n| [shouldContainJsonKeyValue](content-json-matchers.html#shouldcontainjsonkey)    | Verifies that a String is JSON, and contains a given JSON path with the specified value              | JVM           |\n| [shouldMatchJsonResource](content-json-matchers.html#shouldcontainjsonkey)      | Verifies that a String is matches the JSON content of a given test resource                          | JVM           |\n```\n\n----------------------------------------\n\nTITLE: Inspecting Caught Exceptions in Kotest\nDESCRIPTION: Shows how to catch and inspect an exception thrown in a test block. This allows for additional assertions on the exception's properties, such as its message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/exceptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Exception Type with shouldThrow\nDESCRIPTION: Demonstrates how to test that a specific exception type is thrown using the shouldThrow function. This example expects an IllegalAccessException to be thrown.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Generated Values in Kotest Property Testing (Kotlin)\nDESCRIPTION: Demonstrates how to use the filter method to constrain generated values from an Arb (arbitrary) in Kotest property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/assumptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Property Tests Using Project Config\nDESCRIPTION: Shows how to configure property test settings using Kotest's project configuration class, implementing the configuration in the beforeProject hook.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/globalconfig.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestConfig : AbstractProjectConfig() {\n   override suspend fun beforeProject() {\n      PropertyTesting.defaultIterationCount = 123\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Clue with Computed Values in Kotlin\nDESCRIPTION: Shows how to use a lazy clue with computed values, which is only evaluated if the test fails. This approach is useful for including dynamic information in the error message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/clues.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue({ \"Name should be present (user_id=${user.id})\" }) {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Using Option Matchers in Kotest with Arrow\nDESCRIPTION: Matchers for asserting the state and value of Option types from Arrow. These matchers allow checking if an Option is Some or None, and verifying its contained value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\noption.shouldBeSome()  // Asserts that the option is of type Some and returns value\noption.shouldBeSome(v) // Asserts that the option is of type Some with value v\noption.shouldBeNone()  // Asserts that the option is of type None\n```\n\n----------------------------------------\n\nTITLE: Dynamic Test Generation in Kotest\nDESCRIPTION: Demonstrates how to dynamically generate tests at runtime using a list of values with FunSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/writing_tests.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n    listOf(\n      \"sam\",\n      \"pam\",\n      \"tim\",\n    ).forEach {\n       test(\"$it should be a three letter name\") {\n           it.shouldHaveLength(3)\n       }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Test Cases\nDESCRIPTION: Data class that represents a single test case row containing three integers for Pythagorean triple testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Test Configuration via Assignment in Kotest FunSpec\nDESCRIPTION: This snippet demonstrates how to set a default test configuration for all test cases in a FunSpec by assigning to the defaultTestConfig property. It enables all tests and sets the default number of invocations to 3.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_case_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n\n    defaultTestConfig = TestCaseConfig(enabled = true, invocations = 3)\n\n    test(\"FunSpec should support Spec config syntax in init{} block\") {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kotest for Android Projects\nDESCRIPTION: Configures an Android project to use Kotest for unit and integration tests. Adds necessary Gradle configuration and dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      it.useJUnitPlatform()\n   }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n   testImplementation 'io.kotest:kotest-runner-junit5:version'\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Using shouldBe in Kotlin\nDESCRIPTION: Demonstrates the basic usage of the shouldBe matcher to assert equality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nname shouldBe \"sam\"\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency in Gradle\nDESCRIPTION: Adds the Kotest JUnit5 runner as a test dependency in a Gradle build file. This dependency is required to run Kotest tests through JUnit5.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-runner-junit5:$version'\n```\n\n----------------------------------------\n\nTITLE: Enabling Fail on Empty Test Suite in Kotest Project Config\nDESCRIPTION: This code snippet demonstrates how to enable the 'failOnEmptyTestSuite' option in a Kotest project configuration. When set to true, this option causes the build to fail if no tests are executed in a module, regardless of whether tests are defined.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/fail_on_empty.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val failOnEmptyTestSuite = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inspectors in Kotlin with Kotest\nDESCRIPTION: Demonstrates the use of inspectors in Kotest to test elements in a collection. This example checks that exactly 3 elements in the list have 'Chicago' as their city.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nmylist.forExactly(3) {\n    it.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Case with Multiple Invocations and Threads in ShouldSpec\nDESCRIPTION: Example showing how to configure a test case with multiple invocations and parallel execution threads using ShouldSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_case_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with Enabled Flag in Kotlin\nDESCRIPTION: Demonstrates how to disable a test case by setting the 'enabled' configuration parameter to false. This is similar to JUnit's @Ignore annotation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/config_enabled.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = false) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data Tests with Custom Names in Kotest\nDESCRIPTION: This snippet showcases nested data tests in Kotest with custom test naming. It tests multiple services against different HTTP methods, using a custom naming function for the second level of tests to provide more descriptive test names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/nested.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n    val services = listOf(\n       \"http://internal.foo\",\n       \"http://internal.bar\",\n       \"http://public.baz\",\n    )\n\n    val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n    withData(services) { service ->\n       withData<String>({ \"should support HTTP $it\" }, methods) { method ->\n          // test service against method\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing and Registering Spec-level Extensions in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a custom test listener implementing BeforeSpecListener and AfterSpecListener interfaces. It shows how to register the listener with a specific test spec using the extension() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/extensions/extensions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestListener : BeforeSpecListener, AfterSpecListener {\n   override suspend fun beforeSpec(spec:Spec) {\n      // power up kafka\n   }\n   override suspend fun afterSpec(spec: Spec) {\n      // shutdown kafka\n   }\n}\n\n\nclass TestSpec : WordSpec({\n    extension(MyTestListener())\n    // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Test Lifecycle Callbacks in Kotest\nDESCRIPTION: Demonstrates how to use lifecycle callbacks (beforeEach and afterEach) to execute code before and after each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/writing_tests.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Callbacks : FunSpec({\n\n   beforeEach {\n      println(\"Hello from $it\")\n   }\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   afterEach {\n      println(\"Goodbye from $it\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Until Usage with Duration in Kotlin Tests\nDESCRIPTION: Demonstrates the basic usage of the until function with a 5-second timeout to verify message delivery to a broker. The predicate is checked every second by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/until.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Table Testing with Square Roots in Kotest\nDESCRIPTION: Demonstrates basic table driven testing using forAll function to test square root calculations. Shows how to define test cases using row objects with automatically inferred integer parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forAll(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DescribeSpec for Nested Test Structures\nDESCRIPTION: Shows how to use DescribeSpec style which follows describe/it pattern common in Ruby and JavaScript testing. Includes nested test structures and test disabling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"score\") {\n        it(\"start as zero\") {\n            // test here\n        }\n        describe(\"with a strike\") {\n            it(\"adds ten\") {\n                // test here\n            }\n            it(\"carries strike to the next frame\") {\n                // test here\n            }\n        }\n\n        describe(\"for the opposite team\") {\n            it(\"Should negate one score\") {\n                // test here\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"this outer block is enabled\") {\n        xit(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xdescribe(\"this block is disabled\") {\n        it(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing the Matcher Interface in Kotlin\nDESCRIPTION: Shows the Matcher interface definition in Kotest, which is the foundation for creating custom matchers. It requires implementing a test method that returns a MatcherResult.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/custom.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Matcher<in T> {\n  fun test(value: T): MatcherResult\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Result Properties in Kotlin with Kotest\nDESCRIPTION: Functions for checking the state and content of Result objects, supporting both success and failure assertions with type checking and value validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeSuccess()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeSuccess(value)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeSuccess(block)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeFailure()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeFailureOfType<Type : Throwable>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeFailure(block)\n```\n\n----------------------------------------\n\nTITLE: Using withClue with Lambda in Kotlin\nDESCRIPTION: Using withClue with a lambda function to provide dynamic information in the clue message, which is only evaluated when the test fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue({ \"Name should be present (user_id=${user.id})\" }) {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Project Timeout in Kotest using ProjectConfig\nDESCRIPTION: This code snippet shows how to set a project-level timeout in Kotest by extending AbstractProjectConfig. It sets a timeout of 10 minutes for all tests in the module, including setup and teardown time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/timeouts/project_timeout.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val projectTimeout: Duration = 10.minutes\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Duration and Interval for 'eventually' in Kotlin\nDESCRIPTION: Example of creating an 'eventually' configuration with specific duration and interval settings. The test will run for up to 5 seconds, with retry attempts every 250 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  interval = 250.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Server Endpoints\nDESCRIPTION: Example of testing a Ktor server endpoint using TestApplicationResponse matchers. Shows how to verify response status, content, headers, and cookies in a test environment.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithTestApplication({ module(testing = true) }) {\n   handleRequest(HttpMethod.Get, \"/\").apply {\n      response shouldHaveStatus HttpStatusCode.OK\n      response shouldNotHaveContent \"failure\"\n      response.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n      response.shouldNotHaveCookie(name = \"Set-Cookie\", cookieValue = \"id=1234\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Kotest Multiplatform Gradle Plugin\nDESCRIPTION: This snippet demonstrates how to apply the Kotest multiplatform Gradle plugin. This plugin is necessary for setting up Kotest in multiplatform projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/setup.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Callbacks to Data-Driven Tests with Kotest in Kotlin\nDESCRIPTION: Demonstrates how to add before and after test callbacks when using data-driven testing in Kotest. This example shows that standard callback mechanisms work with data-driven tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nbeforeTest {\n  // reset test setup\n}\n\ncontext(\"...\") {\n  withData(X, Y, Z) { x,y,z ->\n    // test code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Custom Arbitrary Generator for Person Class\nDESCRIPTION: Shows how to create an arbitrary generator for a custom data class by composing multiple generators using bind() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/customgens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb = arbitrary {\n   val name = Arb.string(10..12).bind()\n   val age = Arb.int(21, 150).bind()\n   Person(name, age)\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Database Integration Test Example\nDESCRIPTION: Full example showing database container setup and usage in a test scenario.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass QueryDatastoreTest : FunSpec({\n\n  val mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n    startupAttempts = 1\n    withUrlParam(\"connectionTimeZone\", \"Z\")\n    withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n  }\n\n  val ds = install(JdbcTestContainerExtension(mysql)) {\n    poolName = \"myconnectionpool\"\n    maximumPoolSize = 8\n    idleTimeout = 10000\n  }\n\n  val datastore = PersonDatastore(ds)\n\n  test(\"insert happy path\") {\n\n    datastore.insert(Person(\"sam\", \"Chicago\"))\n    datastore.insert(Person(\"jim\", \"Seattle\"))\n\n    datastore.findAll().shouldBe(listOf(\n      Person(\"sam\", \"Chicago\"),\n      Person(\"jim\", \"Seattle\"),\n    ))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Operations with Eventually in Kotest\nDESCRIPTION: A simple example of using the 'eventually' function to test if a user repository contains data after sending a message to an asynchronous service. The test will repeatedly check the condition for up to 5 seconds until it passes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"check if user repository has one row after message is sent\") {\n      sendMessage()\n      eventually(5.seconds) {\n        userRepository.size() shouldBe 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Kotest Negated Matcher Syntax\nDESCRIPTION: Shows how to use the negated version of Kotest matchers using extension function style. The example demonstrates the shouldNotStartWith matcher function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldNotStartWith(\"boo\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom String Length Matcher in Kotlin\nDESCRIPTION: A complete example of implementing a custom matcher for checking string length. The matcher creates a MatcherResult with appropriate success conditions and failure messages for both normal and negated cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/custom.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun haveLength(length: Int) = Matcher<String> { value ->\n  MatcherResult(\n    value.length == length,\n    { \"string had length ${value.length} but we expected length $length\" },\n    { \"string should not have length $length\" },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Mockk Usage in Kotest FunSpec\nDESCRIPTION: Demonstrates basic usage of mockk library within a Kotest FunSpec test class. Shows how to create and verify mocks for a repository pattern.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/integrations/mocks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Iterations in Property Tests with Kotest\nDESCRIPTION: Demonstrates how to customize the number of test iterations for a property test. By default, Kotest runs 1000 iterations, but this example shows how to increase it to 10,000 iterations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/test_functions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"a many iterations test\" {\n      checkAll<Double, Double>(10_000) { a, b ->\n         // test here\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Nested ExpectSpec with Context Blocks\nDESCRIPTION: Demonstrates how to organize tests in ExpectSpec using nested context blocks for better test organization and readability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"a calculator\") {\n        expect(\"simple addition\") {\n            // test here\n        }\n        expect(\"integer overflow\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Assertions with Kotest Matchers\nDESCRIPTION: Shows how to chain Kotest matchers together on a single object for more concise test code. Each assertion returns the original object, allowing for fluent method chaining.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.3.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval employees: List<Employee> = ...\nemployees.shouldBeSorted()\n          shouldHaveSize(4)\n          shouldContain(Employee(\"Sam\", \"Chicago\"))\n```\n\n----------------------------------------\n\nTITLE: Using autoClose for Resource Management in Kotest\nDESCRIPTION: Example showing how to register Closeable resources for automatic closing using the autoClose function. This ensures resources are properly closed after tests complete.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout in WordSpec\nDESCRIPTION: Demonstrates setting a timeout duration for a test case using WordSpec style. The test will fail if it doesn't complete within 2 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_case_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency for Android\nDESCRIPTION: Adds the Kotest JUnit5 runner as a test dependency in an Android Gradle build file. This dependency is required to run Kotest tests in Android projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n   testImplementation 'io.kotest:kotest-runner-junit5:version'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table Tests in Kotlin for KotlinTest\nDESCRIPTION: Shows how to use Table Tests in KotlinTest to specify combinations of values for testing. It demonstrates creating a table with headers and rows, and using forAll to test all combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_50\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TableExample : StringSpec(), TableTesting {\n  init {\n    \"numbers should be prime\" {\n      val table = table(\n          headers(\"a\", \"b\"),\n          row(5, 5),\n          row(4, 6),\n          row(3, 7)\n      )\n      forAll(table) { a, b ->\n        a + b == 10\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Matchers with Extension Functions\nDESCRIPTION: Demonstrates usage of Kotest matchers using extension function style, which provides better IDE autocompletion support.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldBe(b)\na.shouldStartWith(\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout for All Tests in a Spec in Kotest\nDESCRIPTION: This example shows how to apply a test timeout for all tests within a spec file in Kotest. The timeout is set to 100 milliseconds for all tests in the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   timeout = 100.milliseconds\n\n   test(\"this test will timeout quickly!\") {\n      // test here\n   }\n\n   test(\"so will this one!\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using enabledOrReasonIf to Provide Explanations for Disabled Tests in Kotest\nDESCRIPTION: Shows how to use enabledOrReasonIf to not only conditionally disable tests but also provide a reason that will be included in test reports. The example disables tests with names starting with \"danger\" on Fridays with a custom message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/config_enabled.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: (TestCase) -> Enabled = {\n   if (it.name.testName.startsWith(\"danger\") && isFriday())\n      Enabled.disabled(\"It's a friday, and we don't like danger!\")\n   else\n      Enabled.enabled\n}\n\n\"danger Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Exception Details in Kotlin using Kotest\nDESCRIPTION: This example shows how to catch an exception using shouldThrow and then verify its properties. It catches an IllegalAccessException and checks if its message starts with a specific string.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/exceptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Asserting Collection Membership in Kotlin with Kotest\nDESCRIPTION: These assertions check for the presence of elements in collections. They include checking if a value is in a collection, if a collection contains any of a given set of elements, and if a value is contained in a collection by value rather than reference.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nvalue.shouldBeOneOf(collection)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ncollection.shouldContainAnyOf(collection)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nvalue.shouldBeIn(collection)\n```\n\n----------------------------------------\n\nTITLE: Koin Integration with DescribeSpec and Root Lifecycle\nDESCRIPTION: Advanced example showing Koin integration with DescribeSpec style and root lifecycle mode for shared context between nested tests\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/koin.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : DescribeSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(module = myKoinModule, mode = KoinLifecycleMode.Root))\n\n    val userService by inject<UserService>()\n\n    init {\n        describe(\"use userService\") {\n            it(\"inside a leaf test\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n            it(\"this shares the same context\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Invocation Timeout in Kotest FunSpec\nDESCRIPTION: This snippet shows how to set an invocation timeout for all tests in a spec. Both tests in this FunSpec will have an invocation timeout of 25 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   invocationTimeout = 25.milliseconds\n\n   test(\"foo\") {\n      // test here\n   }\n\n   test(\"bar\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Property-Based Composed Matcher in Kotlin\nDESCRIPTION: Creates a composed matcher for Person objects that combines multiple property-specific matchers using havingProperty to extract and validate individual properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/composed_matchers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun personMatcher(name: String, age: Int) = Matcher.all(\n  havingProperty(nameMatcher(name) to Person::name),\n  havingProperty(ageMatcher(age) to Person::age),\n  havingProperty(addressMatcher to Person::address)\n)\n```\n\n----------------------------------------\n\nTITLE: Using String Generation Functions in Kotest\nDESCRIPTION: Various functions for generating random and exhaustive string values, including basic strings, pattern-matched strings, email addresses, UUIDs, and domain names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.string(range)\nArb.stringPattern(pattern)\nExhaustive.azstring(range)\nArb.email(localPartGen, domainGen)\nArb.emailLocalPart()\nArb.uuid(type)\nArb.domain(tlds, labelArb)\n```\n\n----------------------------------------\n\nTITLE: Using Either Matchers in Kotest with Arrow\nDESCRIPTION: Matchers for asserting the state and value of Either types from Arrow. These matchers allow checking if an Either is Right or Left, and verifying its contained value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\neither.shouldBeRight()  // Asserts that the either is of type Right and returns the Right value\neither.shouldBeRight(v) // Asserts that the either is of type Right with specified value v\neither.shouldBeLeft()   // Asserts that the either is of type Left and returns the Left value\neither.shouldBeLeft(v)  // Asserts that the either is of type Left with specific value v\n```\n\n----------------------------------------\n\nTITLE: Sharing Eventually Configuration in Kotest\nDESCRIPTION: Demonstrates how to create reusable eventually configurations for different test scenarios, such as 'slow' and 'fast' operations with shared settings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/eventually.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = eventuallyConfig {\n  duration = 5.minutes\n  interval = 25.milliseconds.fibonacci()\n  listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") }\n}\n\nval fast = slow.copy(duration = 5.seconds)\n\nclass FooTests : FunSpec({\n  test(\"server eventually provides a result for /foo\") {\n    eventually(slow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : FunSpec({\n  test(\"server eventually provides a result for /bar\") {\n    eventually(fast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Eventually with Simple Duration Parameter in Kotlin\nDESCRIPTION: Example showing how to use the 'eventually' function with a simple millisecond duration parameter. The code will continue retrying until the assertion passes or the timeout is reached.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/concurrency/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\neventually(5000) { // duration in millis\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Invocations and Threads in ShouldSpec\nDESCRIPTION: Example showing how to configure a test case with multiple invocations running in parallel threads using ShouldSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_case_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Redis Container with Kotest FunSpec\nDESCRIPTION: This snippet demonstrates how to use a Redis container in a Kotest FunSpec. It shows how to create a GenericContainer for Redis, convert it to a TestListener using the perTest() extension method, and register it with Kotest. This ensures the Redis container is started before each test and stopped after each test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/test_containers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using LocalDate Matchers in Kotest\nDESCRIPTION: Matchers for asserting conditions on LocalDate objects, including year, month, day comparisons, and relative date positioning.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameMonthAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameDayAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeBefore(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeAfter(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeWithin(period, otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeWithin(duration, otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeBetween(firstDate, secondDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveYear(year)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveMonth(month)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfYear(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfMonth(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfWeek(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveHour(hour)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveMinute(Minute)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSecond(second)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveNano(nano)\n```\n\n----------------------------------------\n\nTITLE: Accessing Spring TestContext in Kotest Tests\nDESCRIPTION: Shows how to access the Spring TestContextManager and TestContext within Kotest test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/spring.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"provide the test context manager\" {\n         println(\"The context is \" + testContextManager().testContext)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Assertions in Kotest\nDESCRIPTION: Matchers for asserting object types, instances, and annotations in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nobj.shouldBeSameInstanceAs(other)\nobj.shouldBeTypeOf<T>()\nobj.shouldBeInstanceOf<T>()\nobj.shouldHaveAnnotation(annotationClass)\nobj.shouldBeNull()\n```\n\n----------------------------------------\n\nTITLE: Basic Soft Assertions Block in Kotlin using Kotest\nDESCRIPTION: Demonstrates how to use assertSoftly block to perform multiple assertions that will all be evaluated regardless of individual failures. All failures are collected and reported together at the end of the block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/soft_assertions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Data Structure in Kotlin\nDESCRIPTION: Shows how to create a table structure with headers and rows for testing. Demonstrates defining typed data with headers for id, name, and username.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/table_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval table = table(\n  headers(\"id\", \"name\", \"username\"),\n  row(4, \"Jean-Michel Fayard\", \"jmfayard\"),\n  row(6, \"Louis CAD\", \"LouisCAD\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Using 'eventually' with Configuration Block in Kotlin\nDESCRIPTION: Demonstrates how to use 'eventually' with a configuration block that allows more granular control over behavior. This example sets both the total duration (1 second) and interval between retries (100 milliseconds).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 1.seconds\n  interval = 100.milliseconds\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Exception Type in Kotlin using Kotest\nDESCRIPTION: Shows how to use shouldThrowExactly to assert that a specific exception type is thrown, without catching its subtypes. This is useful for precise exception type checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/exceptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowExactly<FileNotFoundException> {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Selective and Field-by-Field Comparison Matchers in Kotlin\nDESCRIPTION: Assertion matchers for selective and field-by-field comparisons in Kotlin, including comparing specific fields, ignoring fields, and comparing all fields with various options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToUsingFields(other: T, vararg properties: KProperty<*>)\nany.shouldBeEqualToIgnoringFields(other: T, vararg properties: KProperty<*>)\nany.shouldBeEqualToComparingFields(other: T)\nany.shouldBeEqualToComparingFields(other: T, ignorePrivateFields: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Using Resource Matchers for Strings in Kotlin with Kotest\nDESCRIPTION: Shows how to compare strings with resource file content. These matchers allow verification that strings match or don't match the content of resource files, with options for custom matchers and ignoring line separator differences.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nstr shouldMatchResource \"/path/to/test_resource.txt\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr shouldNotMatchResource \"/path/to/test_resource.txt\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldMatchResource(\"/path/to/test_resource.txt\", ::providedMatcher)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldNotMatchResource(\"/path/to/test_resource.txt\", ::providedMatcher)\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Validation Matchers\nDESCRIPTION: Core JSON validation matchers that verify JSON string parsing, object structure, and array format. These matchers are available across all supported platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/json/overview.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Matcher              | Description                                        | Targets       |\n|----------------------|----------------------------------------------------|:--------------||\n| `shouldBeValidJson`  | verifies that a given string parses to valid json  | Multiplatform |\n| `shouldBeJsonObject` | asserts that a string is a valid JSON **_object_** | Multiplatform |\n| `shouldBeJsonArray`  | asserts that a string is a valid JSON **_array_**  | Multiplatform |\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Kafka Producer and Consumer in Kotest (Kotlin)\nDESCRIPTION: Shows how to create and use a string-based producer and consumer with the embedded Kafka instance. It demonstrates sending a message and then consuming it within a test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/kafka.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n\n   test(\"send / receive\") {\n\n     val producer = embeddedKafkaListener.stringStringProducer()\n     producer.send(ProducerRecord(\"foo\", \"a\"))\n     producer.close()\n\n     val consumer = embeddedKafkaListener.stringStringConsumer(\"foo\")\n     eventually(10.seconds) {\n       consumer.poll(1000).first().value() shouldBe \"a\"\n     }\n     consumer.close()\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing List Tests in WordSpec Style\nDESCRIPTION: Example of testing a List implementation using Kotest's WordSpec style, demonstrating size and contains functionality tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_factories.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ListTest : WordSpec({\n\n   val empty = List<Int>()\n\n   \"List\" should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Labeled Statistics in Kotest Property Tests\nDESCRIPTION: Demonstrates how to use labeled statistics to create orthogonal sets of statistics in a Kotest property test. This example collects statistics on even/odd and positive/negative numbers separately.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/statistics.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"even_odd\", \"EVEN\")\n    else -> collect(\"even_odd\", \"ODD\")\n  }\n  when {\n    k > 0 -> collect(\"pos_neg\", \"POS\")\n    else -> collect(\"pos_neg\", \"NEG\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Time with TestCoroutineScheduler in Kotest\nDESCRIPTION: Demonstrates how to use testCoroutineScheduler to control virtual time in coroutine tests, including advancing time and checking current time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.test.testCoroutineScheduler\n\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"advance time\").config(coroutineTestScope = true) {\n        val duration = 1.days\n        // launch a coroutine that would normally sleep for 1 day\n        launch {\n          delay(duration.inWholeMilliseconds)\n        }\n        // move the clock on and the delay in the above coroutine will finish immediately.\n        testCoroutineScheduler.advanceTimeBy(duration.inWholeMilliseconds)\n        val currentTime = testCoroutineScheduler.currentTime\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests Using Gradle Build Script\nDESCRIPTION: Demonstrates how to configure test filtering in the Gradle build script to include tests matching specific package patterns.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/gradle.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.test {\n    filter {\n        //include all tests from package\n        includeTestsMatching(\"com.somepackage.*\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TimerListener Extension in Kotest\nDESCRIPTION: This snippet shows how to create a custom extension that logs the execution time of each test. It implements both BeforeTestListener and AfterTestListener interfaces to capture start and end times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/extensions/examples.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : BeforeTestListener, AfterTestListener {\n\n  var started = 0L\n\n  override fun beforeTest(testCase: TestCase): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(testCase: TestCase, result: TestResult): Unit {\n    println(\"Duration of ${testCase.descriptor} = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integer Number Generation in Kotest\nDESCRIPTION: Collection of Arb functions for generating Int numbers with various constraints including positive, negative, non-negative, non-positive, and array variants. Includes functions for multiples and factors generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.int(min, max)\nArb.positiveInt(min, max)\nArb.nonNegativeInt(min, max)\nArb.negativeInt(min, max)\nArb.nonPositiveInt(min, max)\nArb.intArray(length, content)\nArb.uInt(min, max)\nArb.uIntArray(length, content)\nExhaustive.ints(range)\nArb.multiple(k, max)\nArb.factor(k)\n```\n\n----------------------------------------\n\nTITLE: Using Tag Annotations\nDESCRIPTION: Demonstrates how to use @Tags and @RequiresTag annotations at the spec level\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/tags.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Tags(\"Linux\")\nclass MyTestClass : FunSpec({\n\n  tags(UnitTest)\n\n  beforeSpec { println(\"Before\") }\n\n  test(\"A\").config(tags = setOf(Mysql)) {}\n  test(\"B\").config(tags = setOf(Postgres)) {}\n  test(\"C\") {}\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresTag(\"Linux\", \"Mysql\")\nclass MyTestClass : FunSpec()\n```\n\n----------------------------------------\n\nTITLE: BigDecimal Assertions in Kotest\nDESCRIPTION: Extension functions for asserting properties of BigDecimal values. Includes methods for checking precision, scale, sign, comparison with other values, and range verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldHavePrecision(n)\nbigDecimal.shouldHaveScale(n)\nbigDecimal.shouldBePositive()\nbigDecimal.shouldBeNegative()\nbigDecimal.shouldNotBePositive()\nbigDecimal.shouldNotBeNegative()\nbigDecimal.shouldBeZero()\nbigDecimal.shouldBeLessThan(n)\nbigDecimal.shouldBeLessThanOrEquals(n)\nbigDecimal.shouldBeGreaterThan(n)\nbigDecimal.shouldBeGreaterThanOrEquals(n)\nbigDecimal.shouldBeInRange(r)\n```\n\n----------------------------------------\n\nTITLE: Maven Surefire Plugin Configuration\nDESCRIPTION: Configures Maven Surefire plugin for running Kotest tests with JUnit5.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/quick_start.mdx#2025-04-13_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Listener at Test Class Level in Kotest\nDESCRIPTION: This example demonstrates how to register a custom listener (TimerListener) at the test class level using the extensions function. The listener will only affect tests within this specific test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/extensions/examples.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n  extensions(TimerListener)\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Exhaustive Generator Example with Enum in Kotest\nDESCRIPTION: Demonstrates using an Exhaustive generator with an enum class Season to test all possible enum values in property testing. The test will iterate 100 times, cycling through each season value 25 times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/gens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Season { Winter, Fall, Spring, Summer }\n\nforAll<Int, Season>(100) { a, season -> ... }\n```\n\n----------------------------------------\n\nTITLE: Using withClue for Basic Context in Kotlin\nDESCRIPTION: Demonstrates how to use 'withClue' to add a simple string message to an assertion, providing more context in case of failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/clues.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Operations with Eventually in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the 'eventually' function to check if a user repository has one row after sending a message. It waits for up to 5 seconds for the condition to be true.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"check if user repository has one row after message is sent\") {\n      sendMessage()\n      eventually(5.seconds) {\n        userRepository.size() shouldBe 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Optional Values in Kotlin\nDESCRIPTION: These snippets show how to assert properties of Optional objects, including presence, emptiness, and value access.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\noptional.shouldBePresent()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\noptional.shouldBePresent { value -> .. }\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\noptional.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Test Configuration in Kotest\nDESCRIPTION: Illustrates how to configure test execution parameters including timeout, invocations, threads, and tags\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n   \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Logging Extension\nDESCRIPTION: Sets up logging configuration in AbstractProjectConfig by implementing LogExtension and setting logLevel. Demonstrates how to handle log entries and configure the logging level for the testing framework.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/logging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n    override val logLevel = LogLevel.Error\n    override fun extensions() = listOf(\n        object : LogExtension {\n            override suspend fun handleLogs(testCase: TestCase, logs: List<LogEntry>) {\n                logs.forEach { println(it.level.name + \" - \" + it.message) }\n            }\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform with Gradle (Kotlin DSL)\nDESCRIPTION: Sets up the JUnit Platform in Gradle using Kotlin DSL to enable Kotest to run tests via JUnit.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/setup.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest\nDESCRIPTION: Example implementation of AbstractProjectConfig to set assertion mode to Error, which fails tests that don't use Kotest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/project_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val assertionMode = AssertionMode.Error\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Iterable Matching in Kotest\nDESCRIPTION: Validates iterables against assertions, checking each element or subsequences with various matching strategies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/collections.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\niterable.shouldMatchEach(assertions)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\niterable.shouldMatchInOrder(assertions)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\niterable.shouldMatchInOrderSubset(assertions)\n```\n\n----------------------------------------\n\nTITLE: Asserting Exception Throws in Kotest\nDESCRIPTION: Demonstrates how to use the shouldThrow function to assert that a specific exception is thrown. This method is used to test that a block of code throws an expected exception type.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom EnabledCondition for Conditional Spec Execution\nDESCRIPTION: Implements an EnabledCondition that only allows test execution at midnight. This condition can be attached to specs using the EnabledIf annotation for conditional execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.3.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EnabledIfMidnight : EnabledCondition {\n   override fun enabled(specKlass: KClass<out Spec>): Boolean = LocalTime.now().hour == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Instances with Konform and Kotest in Kotlin\nDESCRIPTION: Demonstrates how to test that an instance fails validation with specific error messages. The example uses shouldBeInvalid with a block to verify the exact validation errors for each field.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/konform.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval bob = UserProfile(\"bob\", 18)\nvalidateUser.shouldBeInvalid(a) {\n  it.shouldContainError(UserProfile::fullName, \"must have at least 4 characters\")\n  it.shouldContainError(UserProfile::age, \"must be at least '21'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Assertions in Kotest\nDESCRIPTION: Examples of traditional and new chained assertion syntax in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.3.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval employees: List<Employee> = ...\nemployees.shouldBeSorted()\nemployees.shouldHaveSize(4)\nemployees.shouldContain(Employee(\"Sam\", \"Chicago\"))\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval employees: List<Employee> = ...\nemployees.shouldBeSorted()\n          .shouldHaveSize(4)\n          .shouldContain(Employee(\"Sam\", \"Chicago\"))\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Spec-Level Extension in Kotest\nDESCRIPTION: This snippet demonstrates how to create a custom extension that implements both BeforeSpecListener and AfterSpecListener interfaces, and how to register it with a specific spec. The extension performs setup before a spec runs and cleanup after it completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/extensions/extensions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestListener : BeforeSpecListener, AfterSpecListener {\n   override suspend fun beforeSpec(spec:Spec) {\n      // power up kafka\n   }\n   override suspend fun afterSpec(spec: Spec) {\n      // shutdown kafka\n   }\n}\n\n\nclass TestSpec : WordSpec({\n    extension(MyTestListener())\n    // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest with Gradle Kotlin DSL\nDESCRIPTION: Gradle Kotlin DSL setup for Kotest that works for both Android and non-Android projects. It shows how to enable the JUnit platform for test tasks and add the necessary dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test> {\n  useJUnitPlatform()\n}\n\ndependencies {\n  testImplementation(\"io.kotest:kotest-runner-junit5:<version>\") // for kotest framework\n  testImplementation(\"io.kotest:kotest-assertions-core:<version>\") // for kotest core jvm assertions\n  testImplementation(\"io.kotest:kotest-property:<version>\") // for kotest property test\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'When' Keyword in WordSpec for Additional Nesting\nDESCRIPTION: WordSpec supports the 'When' keyword to add another level of nesting in tests. Since 'when' is a keyword in Kotlin, backticks or the uppercase variant must be used.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"Hello\" When {\n        \"asked for length\" should {\n            \"return 5\" {\n                \"Hello\".length shouldBe 5\n            }\n        }\n        \"appended to Bob\" should {\n            \"return Hello Bob\" {\n                \"Hello \" + \"Bob\" shouldBe \"Hello Bob\"\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Security Manager in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use the withSecurityManager extension function to temporarily override the system security manager for testing purposes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSecurityManager(myManager) {\n      // Usage of security manager\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Kotest Project\nDESCRIPTION: This snippet shows how to set up logging in a Kotest project by configuring the log level and adding a LogExtension in the AbstractProjectConfig. It demonstrates setting the log level to Error and implementing a basic LogExtension that prints log entries.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/logging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n    override val logLevel = LogLevel.Error\n    override fun extensions() = listOf(\n        object : LogExtension {\n            override suspend fun handleLogs(testCase: TestCase, logs: List<LogEntry>) {\n                logs.forEach { println(it.level.name + \" - \" + it.message) }\n            }\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inspectors for Collection Testing in Kotlin with Kotest\nDESCRIPTION: Demonstrates the use of Kotest's inspector feature for testing collections. This example uses 'forExactly' to assert that exactly 3 elements in the collection meet a specific condition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nmylist.forExactly(3) {\n    it.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Matcher with Kotest Assertion Syntax\nDESCRIPTION: Shows how to use a custom matcher with Kotest's infix functions 'should' and 'shouldNot' to create readable test assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/custom.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should haveLength(9)\n\"hello bar\" shouldNot haveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection Example in Kotest with Spring\nDESCRIPTION: This snippet illustrates how to use constructor injection in a Kotest test class with Spring. It shows a WordSpec that requires a UserService bean in its constructor.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/spring.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"have autowired the service\" {\n        service.repository.findUser().name shouldBe \"system_user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reflective Arbs in Kotest for Property Testing\nDESCRIPTION: This example demonstrates how to use Kotest's reflective Arb generation with a custom CurrencyAmount class. It shows two test contexts: one that filters currency amounts to exclude EUR and tests conversion to EUR, and another that tests bidirectional currency conversion using automatic Arb generation for both CurrencyAmount and Currency types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/reflective_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Currency {\n  USD, GBP, EUR\n}\n\nclass CurrencyAmount(\n  val amount: Long,\n  val currency: Currency\n)\n\ncontext(\"Currencies converts to EUR\") { // In some spec\n  checkAll(Arb.bind<CurrencyAmount>().filter { it.currency != EUR }) { currencyAmount ->\n    val converted = currencyAmount.convertTo(EUR)\n    converted.currency shouldBe EUR\n  }\n}\n\ncontext(\"Converting to a currency and back yields the same amount\") { // In some spec\n  checkAll<CurrencyAmount, Currency>() { currencyAmount, currency ->\n    val converted = currencyAmount.convertTo(currency).convertTo(currencyAmount.currency)\n    converted.currency shouldBe currencyAmount.currency\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property-Based Testing with checkAll\nDESCRIPTION: Shows how to use property-based testing in Kotest to automatically generate test data. The example verifies that the length of two concatenated strings equals the sum of their individual lengths.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n  \"String size\" {\n    checkAll<String, String> { a, b ->\n      (a + b) shouldHaveLength a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Exception Type in Kotlin with Kotest\nDESCRIPTION: Illustrates the use of 'shouldThrowExactly' to test for a specific exception type. This method ensures that only the exact specified exception type is caught, not its superclasses.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/exceptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowExactly<FileNotFoundException> {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Coroutine Time with TestDispatcher in Kotest\nDESCRIPTION: Demonstrates how to use testCoroutineScheduler to control virtual time and handle delays in coroutine tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.test.testCoroutineScheduler\n\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"advance time\").config(coroutineTestScope = true) {\n        val duration = 1.days\n        // launch a coroutine that would normally sleep for 1 day\n        launch {\n          delay(duration.inWholeMilliseconds)\n        }\n        // move the clock on and the delay in the above coroutine will finish immediately.\n        testCoroutineScheduler.advanceTimeBy(duration.inWholeMilliseconds)\n        val currentTime = testCoroutineScheduler.currentTime\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the MatcherResult Interface in Kotlin\nDESCRIPTION: Demonstrates the MatcherResult interface which represents the outcome of a matcher test. It includes methods for the pass/fail status and messages for both normal and negated assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/custom.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MatcherResult {\n  fun passed(): Boolean\n  fun failureMessage(): String\n  fun negatedFailureMessage(): String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pythagorean Triple Validator in Kotlin\nDESCRIPTION: Function that validates if three numbers form a valid Pythagorean triple by checking if a² + b² = c².\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generator with Enum in Kotest Property Test\nDESCRIPTION: This snippet demonstrates how to use an Exhaustive generator with an enum class in a Kotest property test. It shows a forAll test that combines an Int generator with a Season enum generator, running for 100 iterations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/gens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Season { Winter, Fall, Spring, Summer }\n\nforAll<Int, Season>(100) { a, season -> ... }\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor HTTP Client Responses with Kotest Matchers\nDESCRIPTION: Example of using Kotest matchers with the Ktor HTTP client. This shows how to verify HTTP response status and headers when making actual HTTP requests with Ktor's client.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/ktor.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\nval response = client.post(\"http://mydomain.com/foo\")\nresponse.shouldHaveStatus(HttpStatusCode.OK)\nresponse.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n\n```\n\n----------------------------------------\n\nTITLE: Basic Property Testing with forAll in Kotlin Kotest\nDESCRIPTION: Demonstrates using forAll function to test string concatenation property. The test verifies that the length of concatenated strings equals the sum of individual string lengths.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/test_functions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String> { a, b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode in Kotlin Using DSL\nDESCRIPTION: Example of setting an isolation mode using Kotest's DSL approach within a spec class. This snippet shows how to set the isolation mode to SingleInstance using the DSL property assignment pattern.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/isolation_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec({\n isolationMode = IsolationMode.SingleInstance\n // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Lifecycle Methods to Test Factories in Kotlin\nDESCRIPTION: This snippet demonstrates how to add lifecycle methods (beforeTest) to a test factory in Kotest, which will only apply to tests within that factory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_factories.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval factory1 = funSpec {\n  beforeTest {\n     println(\"Executing $it\")\n  }\n  test(\"a\") {  }\n  test(\"b\") {  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using next() Operation on Kotest Arb\nDESCRIPTION: Demonstrates how to retrieve the next value from an Arb generator, either using the default Random or a custom Random source.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genops.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval arbA: Arb<A> = ...\nval a = arbA.next() // use Random.Default\nval a2 = arbA.next(rs) // pass in Random\n```\n\n----------------------------------------\n\nTITLE: Disabling a Spec with @Ignored Annotation in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the @Ignored annotation to completely disable a spec in Kotest. The spec will not be instantiated, avoiding any expensive setup or teardown.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/annotations.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Ignored\nclass IgnoredSpec : FunSpec() {\n  init {\n    error(\"boom\") // spec will not be created so this error will not happen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Elements with forAtLeast in Kotlin\nDESCRIPTION: Demonstrates using the forAtLeast inspector to verify that at least 2 elements in a list meet a minimum length requirement. The example shows testing string lengths in a collection of names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/inspectors.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval xs = listOf(\"sam\", \"gareth\", \"timothy\", \"muhammad\")\nxs.forAtLeast(2) {\n    it.shouldHaveMinLength(7)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Matchers for Person Properties in Kotlin using Kotest\nDESCRIPTION: This snippet defines individual matchers for name, age, and address properties of a Person object, which will be used to compose a more complex matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/composed_matchers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun nameMatcher(name: String) = Matcher<String> {\n  MatcherResult(\n    value == name,\n    { \"Name $value should be $name\" },\n    { \"Name $value should not be $name\" }\n  )\n}\n\nfun ageMatcher(age: Int) = Matcher<Int> {\n  MatcherResult(\n    value == age,\n    { \"Age $value should be $age\" },\n    { \"Age $value should not be $age\" }\n  )\n}\n\nval addressMatcher = Matcher<Address> {\n  MatcherResult(\n    value == Address(\"Warsaw\", \"Test\", \"1/1\"),\n    { \"Address $value should be Test 1/1 Warsaw\" },\n    { \"Address $value should not be Test 1/1 Warsaw\" }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockServer Test in Kotest with Kotlin\nDESCRIPTION: Example showing how to set up a MockServer test in Kotest using FunSpec. Demonstrates configuring mock HTTP endpoints, sending requests, and verifying responses using assertions. Uses MockServerListener for lifecycle management and MockServerClient for route configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/mockserver.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyMockServerTest : FunSpec() {\n  init {\n\n      // this attaches the server to the lifeycle of the spec\n      listener(MockServerListener(1080))\n\n      // we can use the client to create routes. Here we are setting them up\n      // before each test by using the beforeTest callback.\n      beforeTest {\n         MockServerClient(\"localhost\", 1080).`when`(\n            HttpRequest.request()\n               .withMethod(\"POST\")\n               .withPath(\"/login\")\n               .withHeader(\"Content-Type\", \"application/json\")\n               .withBody(\"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\")\n         ).respond(\n            HttpResponse.response()\n               .withStatusCode(202)\n               .withHeader(\"X-Test\", \"foo\")\n         )\n      }\n\n      // this test will confirm the endpoint works\n      test(\"login endpoint should accept username and password json\") {\n\n         // using the ktor client to send requests\n         val client = HttpClient(CIO)\n         val resp = client.post<io.ktor.client.statement.HttpResponse>(\"http://localhost:1080/login\") {\n            contentType(ContentType.Application.Json)\n            body = \"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\"\n         }\n\n         // these handy matchers come from the kotest-assertions-ktor module\n         resp.shouldHaveStatus(HttpStatusCode.Accepted)\n         resp.shouldHaveHeader(\"X-Test\", \"foo\")\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Floating-Point Matchers in Kotlin with Kotest\nDESCRIPTION: Matchers for validating floating-point values (doubles or floats) in Kotest. These assertions address the specific challenges of comparing floating-point numbers, including tolerance-based equality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBe(value plusOrMinus(tolerance))\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeBetween(x, y)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeLessThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeLessThanOrEqual(n)\n```\n\n----------------------------------------\n\nTITLE: Generating Enum Values in Kotlin with Kotest\nDESCRIPTION: Randomly selects constants from a given enum. Useful for testing functions that accept enum parameters, ensuring all possible enum values are considered.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.enum<T>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec Level Timeouts in Kotest\nDESCRIPTION: Shows how to set timeout configurations at both spec and individual test levels using DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.2.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   timeout = 1000\n\n   describe(\"I will timeout in 1000 millis\") {\n      it(\"And so will I\") { }\n      it(\"But I'm a little faster\").config(timeout = 500.milliseconds) { }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dispatcher Globally with ProjectConfig\nDESCRIPTION: Demonstrates how to enable TestDispatcher globally for all tests in a module using ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override var coroutineTestScope = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blocking and Non-Blocking Tests with Timeouts in Kotest\nDESCRIPTION: This snippet demonstrates how to configure both blocking and non-blocking tests with timeouts in Kotest. It shows the usage of the 'blockingTest' flag for thread-blocking operations and how to set timeouts for both types of tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/timeouts/blocking_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyBlockingTest : FunSpec() {\n  init {\n\n    test(\"interrupt me!\").config(blockingTest = true, timeout = 10.seconds) {\n       Thread.sleep(100000000)\n    }\n\n    test(\"uses suspension\").config(timeout = 10.seconds) {\n      delay(100000000)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Iterations in Property Tests with Kotest\nDESCRIPTION: This snippet demonstrates how to customize the number of iterations for a property test in Kotest. It shows setting the test to run 10,000 times instead of the default 1,000.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/test_functions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"a many iterations test\" {\n      checkAll<Double, Double>(10_000) { a, b ->\n         // test here\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Date and Time Assertions in Kotest\nDESCRIPTION: Methods for asserting date and time properties including comparisons, period checks, and component validations\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\ndate.shouldHaveSameMonthAs(otherDate)\ndate.shouldHaveSameDayAs(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeWithin(period, otherDate)\ndate.shouldBeWithin(duration, otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDayOfYear(day)\ndate.shouldHaveDayOfMonth(day)\ndate.shouldHaveDayOfWeek(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\ndate.shouldHaveNano(nao)\n```\n\n----------------------------------------\n\nTITLE: Setting Default TestCaseConfig for Kotest Spec via Property Assignment\nDESCRIPTION: This snippet demonstrates how to set a default TestCaseConfig for all test cases in a Kotest Spec by assigning to the defaultTestConfig property. It enables all tests and sets them to run 3 times by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_case_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n\n    defaultTestConfig = TestCaseConfig(enabled = true, invocations = 3)\n\n    test(\"FunSpec should support Spec config syntax in init{} block\") {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Concurrent Execution in Kotlin with Kotest\nDESCRIPTION: These assertions check the behavior of concurrent operations, including verifying completion within a specified time frame and asserting timeouts. They are useful for testing the performance and timing constraints of asynchronous code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_21\n\nLANGUAGE: Kotlin\nCODE:\n```\nshouldCompleteWithin(timeout, unit, function)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nshouldTimeout(timeout, unit, function)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nshouldTimeout(duration, suspendableFunction)\n```\n\n----------------------------------------\n\nTITLE: Using Logging Functions in Kotest Tests\nDESCRIPTION: This example shows how to use the built-in logging functions within a Kotest test scope. The warn function is used with a lambda expression that will only be evaluated when the appropriate log level is configured.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/logging.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something\") {\n  warn { \"something weird happened\" }\n}\n```\n\n----------------------------------------\n\nTITLE: BigDecimal Assertions in Kotlin with Kotest\nDESCRIPTION: Extension methods for asserting properties of BigDecimal values, including precision, scale, comparison operations, and sign checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldHavePrecision(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldHaveScale(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBePositive()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeNegative()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeZero()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeLessThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeLessThanOrEquals(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeGreaterThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeGreaterThanOrEquals(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeInRange(r)\n```\n\n----------------------------------------\n\nTITLE: Basic Eventually Usage with Duration in Kotlin\nDESCRIPTION: Simple example of using eventually with a duration to test asynchronous operations. Waits up to 5 seconds for the condition to be true.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\neventually(5.seconds) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project-Level Listeners with @AutoScan in Kotlin\nDESCRIPTION: This snippet shows how to implement project-wide listeners using BeforeProjectListener and AfterProjectListener interfaces. The @AutoScan annotation ensures the listener is automatically registered for all specs in the project without manual registration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/extensions/extensions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@AutoScan\nobject MyProjectListener : BeforeProjectListener, AfterProjectListener {\n  override suspend fun beforeProject() {\n    println(\"Project starting\")\n  }\n  override suspend fun afterProject() {\n    println(\"Project complete\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatcherResult Interface in Kotlin\nDESCRIPTION: This code defines the MatcherResult interface, which is used to return the result of a matcher test, including pass/fail status and failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/custom.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MatcherResult {\n  fun passed(): Boolean\n  fun failureMessage(): String\n  fun negatedFailureMessage(): String\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with Kotest in Kotlin\nDESCRIPTION: Demonstrates how to test for exceptions using Kotest's shouldThrow function, including verifying the exception message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/index.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Validation Type Matchers\nDESCRIPTION: Shows matchers for Arrow's Validation type, allowing verification of Valid and Invalid cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nValid(\"foo\") should beValid()\nInvalid(RuntimeException()) should beInvalid()\n```\n\n----------------------------------------\n\nTITLE: File Assertions in Kotlin with Kotest\nDESCRIPTION: Extension methods for asserting properties of files and directories, including existence, permissions, content, and relationships with other files.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeAbsolute()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeADirectory()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeAFile()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeCanonical()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeEmpty()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeExecutable()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeHidden()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeReadable()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeRelative()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeSmaller(file)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeLarger(file)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeWriteable()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndir.shouldBeNonEmptyDirectory()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndir.shouldContainFile(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndir.shouldContainNFiles(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldExist()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldHaveExtension(ext)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldHaveFileSize(size)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldHaveName(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldHavePath(path)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldStartWithPath(prefix)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndir.shouldContainFileDeep(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndir.shouldContainFiles(name1, name2, ..., nameN)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeSymbolicLink()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldHaveParent(name)\n```\n\n----------------------------------------\n\nTITLE: Using autoClose for Resource Management in KotlinTest\nDESCRIPTION: Shows how to use the autoClose feature to automatically close resources that implement Closeable. The example registers a StringReader for automatic closing when the test completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging at Spec Level\nDESCRIPTION: Example demonstrating how to enable coroutine debugging for all tests within a spec by setting coroutineDebugProbes at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n  init {\n\n    coroutineDebugProbes = true\n\n    test(\"foo\") {\n      // debugging enabled here\n    }\n\n    test(\"bar\") {\n      // debugging enabled here\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable Function-Based Lifecycle Hooks in Kotest\nDESCRIPTION: This example shows how to create reusable lifecycle hooks by defining functions and passing them to DSL methods. It uses type aliases like BeforeTest for improved readability and demonstrates hook reuse across multiple specs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/lifecycle_hooks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval startTest: BeforeTest = {\n   println(\"Starting a test $it\")\n}\n\nclass TestSpec : WordSpec({\n\n   // used once\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"be alive\" {\n         println(\"Johnny5 is alive!\")\n      }\n   }\n})\n\nclass OtherSpec : WordSpec({\n\n   // used twice\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"fail\" {\n         fail(\"boom\")\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Testcontainers with Kotest (Kotlin)\nDESCRIPTION: This Kotlin code snippet shows how to use Testcontainers with Kotest. It demonstrates creating a Redis container, converting it to a Kotest TestListener using the perTest() extension method, and registering it with a FunSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers_46x.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Koin Integration with FunSpec\nDESCRIPTION: Example showing basic Koin integration with Kotest's FunSpec style, demonstrating dependency injection and test execution with KoinExtension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/koin.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : FunSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(myKoinModule))\n\n    val userService by inject<UserService>()\n\n    init {\n        test(\"use userService\") {\n            userService.getUser().username shouldBe \"LeoColman\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Eventually Usage with Duration\nDESCRIPTION: Simple example of using eventually with a duration in milliseconds to test a condition that should pass within the given time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/concurrency/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\neventually(5000) { // duration in millis\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Continually with Default Poll Interval in Kotest\nDESCRIPTION: Example showing how to use the 'continually' function to verify that code succeeds and continues to succeed for a specified duration (60 seconds). The function executes the provided block every 10 milliseconds (default poll interval).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/continually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Any Exception in Kotest\nDESCRIPTION: This snippet demonstrates how to use shouldThrowAny to assert that any type of exception is thrown. It can catch any Throwable instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/exceptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowAny {\n  // test here can throw any type of Throwable!\n}\n```\n\n----------------------------------------\n\nTITLE: Future State Assertions\nDESCRIPTION: Methods for verifying the state and completion status of Future objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nfuture.shouldBeCancelled()\nfuture.shouldBeCompleted()\nfuture.shouldBeCompletedExceptionally()\nfuture.shouldCompleteExceptionallyWith(throwable)\n```\n\n----------------------------------------\n\nTITLE: Using Matchers for Assertions in Kotlin Tests\nDESCRIPTION: Showcases various matchers provided by Kotest for making assertions on different types. Examples include string containment, case checking, file extension verification, and map key presence.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n\nuser.email.shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n\ncityMap.shouldContainKey(\"London\")\n```\n\n----------------------------------------\n\nTITLE: Example of Merged Arbitraries with Equal Sampling\nDESCRIPTION: Shows a concrete example of merging arbitraries with the resulting distribution of generated values, displaying approximately equal sampling from both sources.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genops.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = arbitrary { \"a\" }\nval b = arbitrary { \"b\" }\nval ab = a.merge(b)\n\nprintln(ab.take(1000).groupingBy { it }.eachCount())\n// {a=493, b=507}\n```\n\n----------------------------------------\n\nTITLE: Using Compiler Matchers in Kotest Tests\nDESCRIPTION: Example test class showing how to use shouldCompile() and shouldNotCompile() matchers with both String and File objects in a Kotest StringSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/compiler.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CompilationTest: StringSpec() {\n        init {\n            \"shouldCompile test\" {\n                val codeSnippet = \"\"\" val aString: String = \"A valid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldCompile()\n                File(\"SourceFile.kt\").shouldCompile()\n            }\n\n            \"shouldNotCompile test\" {\n                val codeSnippet = \"\"\" val aInteger: Int = \"A invalid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldNotCompile()\n                File(\"SourceFile.kt\").shouldNotCompile()\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing ShouldSpec in Kotlin with Kotest\nDESCRIPTION: Demonstrates the ShouldSpec style in Kotest, which uses the 'should' keyword for tests. It shows basic usage, nested contexts, and how to disable tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    should(\"return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"String.length\") {\n        should(\"return the length of the string\") {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"this outer block is enabled\") {\n        xshould(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        should(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Kotest Arbitrary Values\nDESCRIPTION: Shows how to create filtered arbitraries that generate a subset of values matching a predicate, demonstrated with even and odd number generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genops.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\nval odds = Arb.int().filter { it.value % 2 == 1 }\n```\n\n----------------------------------------\n\nTITLE: Reading Table Data from File\nDESCRIPTION: Demonstrates how to read test data from a .table file, including header definition and data transformation from strings to typed values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/table_driven_testing.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval tableFromFile = table(\n    headers = headers(\"id\", \"username\", \"fullName\"),\n    source = testResources.resolve(\"users.table\"),\n    transform = { a: String, b: String, c: String ->\n        row(a.toInt(), b, c)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Duration and Interval Configuration in Kotlin\nDESCRIPTION: Configuring duration and interval settings for eventually testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  interval = 250.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing EventuallyConfig Between Test Classes in Kotlin\nDESCRIPTION: Example showing how to create reusable EventuallyConfig objects that can be shared and customized across different test classes, promoting consistency and reducing code duplication.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/concurrency/eventually.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = EventuallyConfig<ServerResponse>(\n  duration = 5.minutes,\n  interval = 25.milliseconds.fibonacci(),\n  suppressExceptions = setOf(ServerException::class)\n)\n\nclass FooTests : StringSpec({\n  val logger = logger(\"FooTests\")\n  val fSlow = slow.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") })\n\n  \"server eventually provides a result for /foo\" {\n    eventually(fSlow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : StringSpec({\n  val logger = logger(\"BarTests\")\n  val bFast = fast.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") })\n\n  \"server eventually provides a result for /bar\" {\n    eventually(bFast) {\n      barApi()\n    }\n  }\n})\n\n```\n\n----------------------------------------\n\nTITLE: Implementing the Matcher Interface in Kotlin\nDESCRIPTION: Shows the basic Matcher interface that needs to be implemented when creating custom matchers in Kotest. The interface requires a test method that returns a MatcherResult.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/custom.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Matcher<in T> {\n  fun test(value: T): MatcherResult\n}\n```\n\n----------------------------------------\n\nTITLE: Data Driven Testing with Multiple Parameters\nDESCRIPTION: Demonstrates data driven testing using row-based test cases for validating mathematical operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/index.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"maximum of two numbers\" {\n    forAll(\n        row(1, 5, 5),\n        row(1, 0, 1),\n        row(0, 0, 0)\n    ) { a, b, max ->\n      Math.max(a, b) shouldBe max\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Arbitrary Generator in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a custom Arbitrary generator that produces random integers between 3 and 6 using the 'arbitrary' builder in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/customgens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval sillyArb = arbitrary { rs: RandomSource ->\n   rs.random.nextInt(3..6)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Assumptions in Kotest Property Tests\nDESCRIPTION: This snippet shows how to use the withAssumptions function in Kotest to filter out unwanted combinations of inputs while tracking that not too many are filtered. It ensures that the Levenshtein distance is only checked for non-equal strings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/assumptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  withAssumptions(a != b) {\n    levenshtein(a, b) shouldBeGreaterThan 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Tests for Pythagorean Triples in Kotest\nDESCRIPTION: Demonstrates how to use Kotest's forAll function for data-driven testing of Pythagorean triples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.3.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n    forAll(\n       PythagTriple(3, 4, 5),\n       PythagTriple(6, 8, 10),\n       PythagTriple(8, 15, 17),\n       PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n        isPythagTriple(a, b, c) shouldBe true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom String Length Matcher\nDESCRIPTION: Example implementation of a custom matcher that checks string length. Returns a MatcherResult with appropriate success/failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/custom.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun haveLength(length: Int) = Matcher<String> { value ->\n  MatcherResult(\n    value.length == length,\n    { \"string had length ${value.length} but we expected length $length\" },\n    { \"string should not have length $length\" },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using forAtLeast Inspector in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates how to use the forAtLeast inspector to test that at least two elements in a list of names have a length of 7 or more characters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/inspectors.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval xs = listOf(\"sam\", \"gareth\", \"timothy\", \"muhammad\")\nxs.forAtLeast(2) {\n    it.shouldHaveMinLength(7)\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Structures with shouldEqualJson in Kotlin\nDESCRIPTION: Demonstrates the use of shouldEqualJson matcher to compare two JSON structures, allowing for different formatting and key order. The example shows two JSON strings that would be considered equal.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/json/content.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"sam\",\n   \"location\": \"chicago\",\n   \"age\" : 41\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\" : 41, \"name\": \"sam\", \"location\": \"chicago\" }\n```\n\n----------------------------------------\n\nTITLE: Using Custom Generators for Property Testing in Kotlin\nDESCRIPTION: This snippet demonstrates how to specify custom generators for property tests using Arb.int() with specific ranges. The examples test a drinking age function with different legal age requirements for Chicago (21+) and London (18+).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/test_functions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"is allowed to drink in Chicago\" {\n      forAll(Arb.int(21..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n   \"is allowed to drink in London\" {\n      forAll(Arb.int(18..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Mocking Solution: Setup Mocks Before Each Test\nDESCRIPTION: Demonstrates how to properly set up mocks before each test using Kotest's beforeTest listener, ensuring clean mock state for each test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/integrations/mocks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    lateinit var repository: MyRepository\n    lateinit var target: MyService\n\n    beforeTest {\n        repository = mockk()\n        target = MyService(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Assert Softly in Kotest\nDESCRIPTION: Example implementation of AbstractProjectConfig to enable global assert softly, which allows batching multiple assertion failures into a single test failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/project_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val globalAssertSoftly = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using PropTestListener for Setup and Teardown in Kotlin Property Tests\nDESCRIPTION: This example shows how to register a PropTestListener with PropTestConfig to perform setup and teardown operations in each iteration of a property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some property test which require setup and tear down in each iteration\" {\n      forAll<String, String>(PropTestConfig(listeners = listOf(MyPropTestListener))) { a,b ->\n         // some assertion\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting Table Data to File in Kotlin\nDESCRIPTION: Shows how to export a table structure to a .table file for persistent storage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/table_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval tableFile = testResources.resolve(\"users.table\")\ntable.writeTo(tableFile)\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Throwing and Message Assertion in Kotlin using Kotest\nDESCRIPTION: This code snippet demonstrates how to test for an expected exception and assert its message using Kotest. It uses the 'shouldThrow' function to catch an IllegalAccessException and then checks if the exception message starts with a specific string.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n   // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: LocalDate Generation in Kotest\nDESCRIPTION: Creates random LocalDate instances between specified minimum and maximum dates inclusively.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_51\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.localDate(minDate, maxDate)\n```\n\n----------------------------------------\n\nTITLE: Including Test Factories in a Test Suite in Kotlin\nDESCRIPTION: This snippet shows how to include test factories for multiple implementations (Vector and List) in a single test suite using the WordSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_factories.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IndexedSeqTestSuite : WordSpec({\n   include(indexedSeqTests(\"vector\"), Vector())\n   include(indexedSeqTests(\"list\"), List())\n})\n```\n\n----------------------------------------\n\nTITLE: Eventually with Exception Handling\nDESCRIPTION: Shows how to configure eventually to handle specific exceptions while testing, ignoring expected exceptions like UserNotFoundException until the condition passes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"check if user repository has one row\") {\n      eventually(5.seconds, UserNotFoundException::class.java) {\n        userRepository.findBy(1) shouldNotBe null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Conditional Statistics in Kotest Property Tests\nDESCRIPTION: Shows how to use conditional logic to collect statistics on even and odd numbers in a Kotest property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/statistics.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"EVEN\")\n    else -> collect(\"ODD\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Using forAtLeast Inspector in Kotlin\nDESCRIPTION: This example demonstrates how to use the forAtLeast inspector to test that at least 2 elements in a collection meet a specific condition. In this case, it verifies that at least 2 strings have a minimum length of 7 characters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/inspectors.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval xs = listOf(\"sam\", \"gareth\", \"timothy\", \"muhammad\")\nxs.forAtLeast(2) {\n    it.shouldHaveMinLength(7)\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveKey Matcher for Maps in Kotlin for Kotest\nDESCRIPTION: Demonstrates the usage of the haveKey matcher for Maps in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_48\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveKey(1)\n```\n\n----------------------------------------\n\nTITLE: Setting Default TestCaseConfig for Kotest Spec by Overriding Function\nDESCRIPTION: This example shows how to set a default TestCaseConfig for all test cases in a Kotest Spec by overriding the defaultTestCaseConfig function. It sets all tests to run 3 times by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_case_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Concurrent Operation Assertions\nDESCRIPTION: Methods for testing completion time and timeout behavior of functions in concurrent scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldCompleteWithin(timeout, unit, function)\nshouldTimeout(timeout, unit, function)\nshouldTimeout(duration, suspendableFunction)\n```\n\n----------------------------------------\n\nTITLE: Configuring JunitXmlReporter in Kotest ProjectConfig\nDESCRIPTION: Shows how to set up the JunitXmlReporter with custom options in the project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.2.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override fun listeners(): List<Listener> = listOf(\n     JunitXmlReporter(\n        includeContainers = true, // write out status for all tests\n        useTestPathAsName = true // use the full test path (ie, includes parent test names)\n     )\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Expected Exceptions in 'eventually' with Kotlin\nDESCRIPTION: Example of configuring 'eventually' to only catch specific exceptions. This configuration tells 'eventually' to suppress UserNotFoundException but allow any other exceptions to immediately fail the test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/eventually.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  expectedExceptions = setOf(UserNotFoundException::class)\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Project Timeout in Kotest using AbstractProjectConfig\nDESCRIPTION: This snippet demonstrates how to configure a project-level timeout by extending AbstractProjectConfig. The timeout is set to 10 minutes and will apply to all tests and specs in the module, including setup and teardown time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/timeouts/project_timeout.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val projectTimeout: Duration = 10.minutes\n}\n```\n\n----------------------------------------\n\nTITLE: Using checkAll for Assertion-Based Property Testing in Kotlin\nDESCRIPTION: This code demonstrates how to use the 'checkAll' function to test the same string property using Kotest assertions. The test passes if no exceptions are thrown during execution of all generated input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/test_functions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      checkAll<String, String> { a, b ->\n         a + b shouldHaveLength a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using forNone Inspector in Kotlin Kotest\nDESCRIPTION: Shows how to use the forNone inspector to verify that no elements in a collection satisfy the given conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/inspectors.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: Full Example of Database Testing with Kotest and Testcontainers\nDESCRIPTION: Demonstrates a complete test scenario using Kotest, Testcontainers, and a MySQL database. Includes container setup, data insertion, and assertion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass QueryDatastoreTest : FunSpec({\n\n  val mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n    startupAttempts = 1\n    withUrlParam(\"connectionTimeZone\", \"Z\")\n    withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n  }\n\n  val ds = install(JdbcDatabaseContainerExtension(mysql)) {\n    poolName = \"myconnectionpool\"\n    maximumPoolSize = 8\n    idleTimeout = 10000\n  }\n\n  val datastore = PersonDatastore(ds)\n\n  test(\"insert happy path\") {\n\n    datastore.insert(Person(\"sam\", \"Chicago\"))\n    datastore.insert(Person(\"jim\", \"Seattle\"))\n\n    datastore.findAll().shouldBe(listOf(\n      Person(\"sam\", \"Chicago\"),\n      Person(\"jim\", \"Seattle\"),\n    ))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Test Case in Kotest WordSpec\nDESCRIPTION: This example shows how to set a timeout of 2 seconds for a test case in a WordSpec using the config function. The test will fail if it doesn't complete within the specified time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_case_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Koin Integration with FunSpec\nDESCRIPTION: Example showing basic integration of Koin with Kotest using FunSpec style, demonstrating dependency injection and test execution\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/koin.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : FunSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(myKoinModule))\n\n    val userService by inject<UserService>()\n\n    init {\n        test(\"use userService\") {\n            userService.getUser().username shouldBe \"LeoColman\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data Table in Kotlin\nDESCRIPTION: Creates a data table with headers and rows for testing. The table structure includes id, name, and username columns with corresponding test data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/table_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval table = table(\n  headers(\"id\", \"name\", \"username\"),\n  row(4, \"Jean-Michel Fayard\", \"jmfayard\"),\n  row(6, \"Louis CAD\", \"LouisCAD\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Spec-Level Fail Fast in Kotest\nDESCRIPTION: Shows how to enable fail-fast behavior at the spec level, affecting all test contexts within the specification. When enabled, any test failure will cause all subsequent tests to be skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/fail_fast.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n\n      failfast = true\n\n      context(\"context with fail fast enabled at the spec level\") {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Solution 1: Setup Mocks Before Each Test\nDESCRIPTION: Resolves mock persistence by initializing mocks before each test using the beforeTest listener. This ensures each test gets fresh mock instances without accumulated state.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/integrations/mocks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    lateinit var repository: MyRepository\n    lateinit var target: MyService\n\n    beforeTest {\n        repository = mockk()\n        target = MyService(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Mapping Kotest Arbitrary Values\nDESCRIPTION: Demonstrates how to transform values from one arbitrary into another type using map operation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genops.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval integerStrings: Arb<String> = Arb.int().map { it.toString() }\n```\n\n----------------------------------------\n\nTITLE: Comparable Object Assertions in Kotlin with Kotest\nDESCRIPTION: Assertions for comparing objects that implement Comparable or using custom comparators. These matchers verify relationships like less than, greater than, equality, and range checking between comparable objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeLessThan(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeLessThanOrEqualTo(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeEqualComparingTo(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeEqualComparingTo(other, comparator)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeGreaterThan(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeGreaterThanOrEqualTo(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeBetween(lower, upper)\n```\n\n----------------------------------------\n\nTITLE: Using until Function with Fibonacci Interval in Kotest\nDESCRIPTION: Demonstrates configuring the 'until' function with a fibonacci interval, which increases the delay between checks. This is useful for reducing system load when polling over longer periods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/until.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 100.milliseconds.fibonacci()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Using Reflective Arbs in Kotest\nDESCRIPTION: This snippet demonstrates how to use reflective Arbs in Kotest for generating test data. It shows the definition of a Currency enum and a CurrencyAmount class, and then provides two test contexts using checkAll with reflective Arbs. The first test filters out EUR currency, while the second test checks currency conversion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/reflective_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Currency {\n  USD, GBP, EUR\n}\n\nclass CurrencyAmount(\n  val amount: Long,\n  val currency: Currency\n)\n\ncontext(\"Currencies converts to EUR\") { // In some spec\n  checkAll(Arb.bind<CurrencyAmount>().filter { it.currency != EUR }) { currencyAmount ->\n    val converted = currencyAmount.convertTo(EUR)\n    converted.currency shouldBe EUR\n  }\n}\n\ncontext(\"Converting to a currency and back yields the same amount\") { // In some spec\n  checkAll<CurrencyAmount, Currency>() { currencyAmount, currency ->\n    val converted = currencyAmount.convertTo(currency).convertTo(currencyAmount.currency)\n    converted.currency shouldBe currencyAmount.currency\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Int Values with Kotest Arb\nDESCRIPTION: This snippet demonstrates various Arb generators for Int values in Kotest. It includes generators for regular, positive, negative, non-negative, and non-positive Ints, as well as Int arrays and UInt values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.int(min, max)\nArb.positiveInt(max)\nArb.nonNegativeInt(max)\nArb.negativeInt(min)\nArb.nonPositiveInt(min)\nArb.intArray(length, content)\nArb.uInt(min, max)\nArb.uIntArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with Data-Driven Tests in Kotest\nDESCRIPTION: Illustrates how to use beforeTest and afterTest callbacks with data-driven tests in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nbeforeTest {\n  // reset test setup\n}\n\ncontext(\"...\") {\n  withData(X, Y, Z) { x,y,z ->\n    // test code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EnabledCondition for Conditional Spec Execution in Kotlin\nDESCRIPTION: This code defines a custom EnabledCondition implementation that enables tests containing 'Linux' in their name only when run on a Linux machine. It demonstrates how to create conditional logic for test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/annotations.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LinuxOnlyCondition : EnabledCondition {\n  override fun enabled(kclass: KClass<out Spec>): Boolean = when {\n    kclass.simpleName?.contains(\"Linux\") == true -> IS_OS_LINUX\n    else -> true // non Linux tests always run\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Statistical Assertion Functions in Kotlin\nDESCRIPTION: Collection of statistical assertion functions for numerical collections, including mean, variance, and standard deviation calculations with configurable precision.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveMean(mean)\ncollection.shouldHaveMean(mean, precision)\ncollection.shouldHaveVariance(mean)\ncollection.shouldHaveVariance(mean, precision)\ncollection.shouldHaveStandardDeviation(mean)\ncollection.shouldHaveStandardDeviation(mean, precision)\n```\n\n----------------------------------------\n\nTITLE: Registering SpringExtension Per Test Class\nDESCRIPTION: Demonstrates how to activate the Spring extension for a specific test class by overriding the extensions method in a spec class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/spring.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : FunSpec() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Blocks with xdescribe in Kotest DescribeSpec\nDESCRIPTION: This example demonstrates how to disable an entire test block and all its nested tests by using the 'xdescribe' prefix in a DescribeSpec. When 'xdescribe' is used, the block and all its child tests will be skipped during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/xmethods.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  xdescribe(\"this block and it's children are now disabled\") {\n    it(\"will not run\") {\n      // disabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: String Matchers in Kotlin with Kotest\nDESCRIPTION: Comprehensive matchers for string validation in Kotest. These assertions offer detailed verification of string contents, format, case, length, and pattern matching capabilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldBeBlank()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldBeEmpty()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldBeLowerCase()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldBeUpperCase()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldContain(\"substr\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldContain(regex)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldContainADigit()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldContainIgnoringCase(substring)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldContainOnlyDigits()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldBeInteger([radix])\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldContainOnlyOnce(substring)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldEndWith(\"suffix\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldHaveLength(length)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldHaveLineCount(count)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldHaveMaxLength(max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldHaveMinLength(min)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldHaveSameLengthAs(anotherString)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldMatch(regex)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldStartWith(\"prefix\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldBeEqualIgnoringCase(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldBeTruthy()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldBeFalsy()\n```\n\n----------------------------------------\n\nTITLE: Using withConstantNow Function in Kotest\nDESCRIPTION: Example demonstrating how to use withConstantNow function to maintain a constant time value during test execution. This approach freezes time to a specific instant for all now() calls within its scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/instant.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval foreverNow = LocalDateTime.now()\n\nwithConstantNow(foreverNow) {\n  LocalDateTime.now() shouldBe foreverNow\n  delay(10) // Code is taking a small amount of time to execute, but `now` changed!\n  LocalDateTime.now() shouldBe foreverNow\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertSoftly with a Test Target in Kotlin with Kotest\nDESCRIPTION: Shows an alternative version of assertSoftly that takes a test target and a lambda with the test target as its receiver. This allows for more concise assertions on a specific object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/soft_assertions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly(foo) {\n    shouldNotEndWith(\"b\")\n    length shouldBe 3\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Kafka Integration Test Example\nDESCRIPTION: Full example showing how to use Kafka TestContainer for producing and consuming messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KafkaTestContainerExtensionTest : FunSpec() {\n  init {\n\n    val kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n      withEmbeddedZookeeper()\n    }\n\n    test(\"should send/receive message\") {\n\n      val producer = kafka.createStringStringProducer()\n      producer.send(ProducerRecord(\"foo\", null, \"bubble bobble\"))\n      producer.close()\n\n      val consumer = kafka.createStringStringConsumer {\n        this[ConsumerConfig.MAX_POLL_RECORDS_CONFIG] = 1\n      }\n\n      consumer.subscribe(listOf(\"foo\"))\n      val records = consumer.poll(Duration.ofSeconds(100))\n      records.shouldHaveSize(1)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WordSpec in Kotlin for Kotest\nDESCRIPTION: Demonstration of WordSpec in Kotest, which uses the 'should' keyword to nest tests after a context string. It also shows how to use 'When' for additional nesting.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"String.length\" should {\n        \"return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"Hello\" When {\n        \"asked for length\" should {\n            \"return 5\" {\n                \"Hello\".length shouldBe 5\n            }\n        }\n        \"appended to Bob\" should {\n            \"return Hello Bob\" {\n                \"Hello \" + \"Bob\" shouldBe \"Hello Bob\"\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Continually Assertion in Kotlin using Kotest\nDESCRIPTION: Demonstrates the basic usage of the continually assertion to verify that a code block continues to succeed for a specified duration (60 seconds). The condition is checked every 10 milliseconds by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/continually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TestContainer with Kotest TestListener\nDESCRIPTION: Example showing how to convert a Docker container (Redis) into a Kotest TestListener using perTest() extension method. The container is started before each test and stopped after test completion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Iterations in Kotest Property Tests\nDESCRIPTION: Demonstrates setting and using default iteration counts for property tests. Shows both direct usage and comparison with test-specific iteration counts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/globalconfig.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nPropertyTesting.defaultIterationCount = 123\n\n// will use 555 iterations specified in the test\nforAll<String, String>(555) { a,b -> a + b == \"$a$b\" }\n\n// will use 123 iterations from the global default\nforAll<String, String> { a,b -> a + b == \"$a$b\" }\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Assert Softly in Kotest\nDESCRIPTION: Configuration to enable assert softly globally for all tests, allowing batching of multiple failures into a single failure\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/project_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val globalAssertSoftly = true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shrinking for Coordinate Generator in Kotest\nDESCRIPTION: This snippet shows how to create a custom generator for a Coordinate data class with a custom Shrinker. The Shrinker generates neighboring coordinates for shrinking. It also includes a property test using this custom generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/shrinking.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Coordinate(val x: Int, val y: Int)\n\nclass CoordinateTest : FunSpec({\n    context(\"Coordinate Transformations\") {\n        // Shrinker takes the four neighbouring coordinates\n        val coordinateShrinker = Shrinker<Coordinate> { c ->\n            listOf(\n                Coordinate(c.x - 1, c.y),\n                Coordinate(c.x, c.y - 1),\n                Coordinate(c.x + 1, c.y),\n                Coordinate(c.x, c.y + 1),\n            )\n        }\n        val coordinateArb = arbitrary(coordinateShrinker) {\n            Coordinate(Arb.nonNegativeInt().bind(), Arb.nonNegativeInt().bind())\n        }\n\n        test(\"Coordinates are always positive after transformation\") {\n            coordinateArb.checkAll {\n                transform(it).x shouldBeGreaterThanOrEqualTo 0\n                transform(it).y shouldBeGreaterThanOrEqualTo 0\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Float Arbitraries in Kotlin\nDESCRIPTION: Functions for generating random Float values and arrays with specified ranges and edge cases in Kotest, including positive, negative, and numeric variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.float(min, max)\nArb.positiveFloat(min, max)\nArb.negativeFloat(min, max)\nArb.numericFloat(min, max)\nArb.floatArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: File System Assertions in Kotest\nDESCRIPTION: Comprehensive set of assertions for file system operations including file properties, directory contents, and path validations\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeAbsolute()\nfile.shouldBeADirectory()\nfile.shouldBeAFile()\nfile.shouldBeCanonical()\nfile.shouldBeEmpty()\nfile.shouldBeExecutable()\nfile.shouldBeHidden()\nfile.shouldBeReadable()\nfile.shouldBeRelative()\nfile.shouldBeSmaller(file)\nfile.shouldBeLarger(file)\nfile.shouldBeWriteable()\ndir.shouldBeNonEmptyDirectory()\ndir.shouldContainFile(name)\ndir.shouldContainNFiles(name)\nfile.shouldExist()\nfile.shouldHaveExtension(ext)\nfile.shouldHaveFileSize(size)\nfile.shouldHaveName(name)\nfile.shouldHavePath(path)\nfile.shouldStartWithPath(prefix)\ndir.shouldContainFileDeep(name)\ndir.shouldContainFiles(name1, name2, ..., nameN)\nfile.shouldBeSymbolicLink()\nfile.shouldHaveParent(name)\n```\n\n----------------------------------------\n\nTITLE: Using PropTestListener in Kotest Property Test\nDESCRIPTION: Demonstrates how to add a PropTestListener to handle setup and teardown for each iteration of a property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some property test which require setup and tear down in each iteration\" {\n      forAll<String, String>(PropTestConfig(listeners = listOf(MyPropTestListener))) { a,b ->\n         // some assertion\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Example of Spring Constructor Injection in Kotest\nDESCRIPTION: Shows a complete example of a Kotest test class that uses constructor injection to autowire a Spring service component for testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/spring.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"have autowired the service\" {\n        service.repository.findUser().name shouldBe \"system_user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: URI Assertions in Kotlin with Kotest\nDESCRIPTION: Extension methods for asserting properties of URIs, including verification of URI components like scheme, host, path, and query parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveAuthority(fragment)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveFragment(fragment)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveHost(scheme)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveParameter(scheme)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHavePath(scheme)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHavePort(scheme)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveQuery(fragment)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nuri.shouldHaveScheme(scheme)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ExpectSpec in Kotlin\nDESCRIPTION: Demonstrates how to create a simple test using ExpectSpec in Kotest. ExpectSpec uses the 'expect' keyword to define tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    expect(\"my test\") {\n        // test here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Hooks via Spec Override\nDESCRIPTION: Demonstrates implementing lifecycle hooks by overriding callback functions directly in the Spec class, providing an alternative to DSL methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/lifecycle_hooks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec() {\n    override fun beforeTest(testCase: TestCase) {\n        println(\"Starting a test $testCase\")\n    }\n\n    init {\n        \"this test\" should {\n            \"be alive\" {\n                println(\"Johnny5 is alive!\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to Tests in FunSpec (Kotlin)\nDESCRIPTION: Example of applying tags to a test in Kotest's FunSpec style. Tags can be used to categorize tests and run specific groups of tests based on tags like Database and Linux.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_case_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwable and Exception Assertions in Kotest\nDESCRIPTION: Methods for testing exception properties including message content, cause existence, and cause type verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveMessage(message)\nthrowable.shouldHaveCause()\nthrowable.shouldHaveCause { block }\nthrowable.shouldHaveCauseInstanceOf<T>()\nthrowable.shouldHaveCauseOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Filtering Arb Values in Kotlin\nDESCRIPTION: Shows how to use the 'filter' operation to create new Arbs with a subset of values, using even and odd number generation as examples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genops.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\nval odds = Arb.int().filter { it.value % 2 == 1 }\n```\n\n----------------------------------------\n\nTITLE: Defining Array Length Constraints in JSON Schema\nDESCRIPTION: Shows how to specify array length constraints using minItems and maxItems in Kotest's JSON schema DSL. This allows setting minimum and maximum number of items that an array can contain.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/json/schema.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval lengthBoundedSchema = jsonSchema {\n  array(minItems = 0, maxItems = 1) { number() }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Test Edge Cases in Kotlin\nDESCRIPTION: Example of how to implement edge cases in custom Arb implementations following the property test changes. Shows the change from returning a List to returning a single random edge case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Old implementation\nfun edgecases(): List<A>\n\n// New implementation\nfun edgecase(rs: RandomSource): A?\n```\n\n----------------------------------------\n\nTITLE: Asserting List Operations in Kotlin with Kotest\nDESCRIPTION: Various assertion methods for lists in Kotest, including checking for order, content, and specific elements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nlist.shouldContainInOrder(other)\nlist.shouldExistInOrder({ element }, ...)\nlist.shouldHaveElementAt(index, element)\nlist.shouldStartWith(lst)\nlist.shouldEndWith(lst)\niterable.shouldMatchEach(assertions)\niterable.shouldMatchInOrder(assertions)\niterable.shouldMatchInOrderSubset(assertions)\nvalue.shouldBeOneOf(collection)\ncollection.shouldContainAnyOf(collection)\nvalue.shouldBeIn(collection)\n```\n\n----------------------------------------\n\nTITLE: Implementing and Registering Spec-Level Extensions in Kotest\nDESCRIPTION: Example of creating a custom extension that implements BeforeSpecListener and AfterSpecListener interfaces to manage resources (such as Kafka) before and after spec execution. The extension is registered directly with a spec using the extension() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/extensions/extensions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestListener : BeforeSpecListener, AfterSpecListener {\n   override suspend fun beforeSpec(spec:Spec) {\n      // power up kafka\n   }\n   override suspend fun afterSpec(spec: Spec) {\n      // shutdown kafka\n   }\n}\n\n\nclass TestSpec : WordSpec({\n    extension(MyTestListener())\n    // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data Tests in Kotest with Service and HTTP Methods\nDESCRIPTION: This snippet demonstrates how to create nested data tests in Kotest using two layers of nesting. It tests multiple services against different HTTP methods, creating a cartesian join of all inputs. The outer layer iterates over services, while the inner layer iterates over HTTP methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/nested.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n  val services = listOf(\n    \"http://internal.foo\",\n    \"http://internal.bar\",\n    \"http://public.baz\",\n  )\n\n  val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n   withData(services) { service ->\n     withData(methods) { method ->\n       // test service against method\n     }\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Test Factories in a Test Suite in Kotlin\nDESCRIPTION: This snippet shows how to include multiple test factories along with inline tests in a single test suite.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_factories.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HugeTestFile : FunSpec({\n\n   test(\"first test\") {\n     // test here\n   }\n\n   include(factory1(\"foo\"))\n   include(factory2(1, 4))\n\n   test(\"another test\") {\n     //  testhere\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Field-by-Field Comparison Functions in Kotlin\nDESCRIPTION: Functions for comparing objects field by field, with options to include or exclude private fields and specific properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFields(other: T)\nany.shouldBeEqualToComparingFields(other: T, ignorePrivateFields: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Collecting Basic Statistics in Kotest Property Tests\nDESCRIPTION: Demonstrates how to use the 'collect' function to gather statistics on generated values in a Kotest property test. This example counts occurrences of different RoundingMode values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/statistics.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n  collect(mode)\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pythagorean Triple Function in Kotlin\nDESCRIPTION: A simple function that checks if three integers form a valid Pythagorean triple (a² + b² = c²).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions in Kotest\nDESCRIPTION: Shows how to test for expected exceptions and verify their properties using shouldThrow.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/index.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Tests for Each Data Row in FreeSpec\nDESCRIPTION: Shows how to generate individual tests for each row of test data in a FreeSpec using listOf and map. This approach creates a separate named test for each data row, improving test output readability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring and Testing MockServer in Kotest\nDESCRIPTION: This snippet demonstrates how to set up MockServer in a Kotest test, configure a mock endpoint, and test it using Ktor client. It includes lifecycle management, request/response setup, and assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/mockserver.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyMockServerTest : FunSpec() {\n  init {\n\n      // this attaches the server to the lifeycle of the spec\n      listener(MockServerListener(1080))\n\n      // we can use the client to create routes. Here we are setting them up\n      // before each test by using the beforeTest callback.\n      beforeTest {\n         MockServerClient(\"localhost\", 1080).`when`(\n            HttpRequest.request()\n               .withMethod(\"POST\")\n               .withPath(\"/login\")\n               .withHeader(\"Content-Type\", \"application/json\")\n               .withBody(\"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\")\n         ).respond(\n            HttpResponse.response()\n               .withStatusCode(202)\n               .withHeader(\"X-Test\", \"foo\")\n         )\n      }\n\n      // this test will confirm the endpoint works\n      test(\"login endpoint should accept username and password json\") {\n\n         // using the ktor client to send requests\n         val client = HttpClient(CIO)\n         val resp = client.post<io.ktor.client.statement.HttpResponse>(\"http://localhost:1080/login\") {\n            contentType(ContentType.Application.Json)\n            body = \"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\"\n         }\n\n         // these handy matchers come from the kotest-assertions-ktor module\n         resp.shouldHaveStatus(HttpStatusCode.Accepted)\n         resp.shouldHaveHeader(\"X-Test\", \"foo\")\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Assert Softly in Kotest\nDESCRIPTION: Enables soft assertions globally for all tests, allowing multiple assertions to be batched into a single failure report.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/project_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val globalAssertSoftly = true\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Validation Matcher\nDESCRIPTION: Schema validation matcher that works with both String and kotlinx.serialization.JsonElement types to validate against JsonSchema definitions. This matcher is available for multiplatform projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/overview.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldMatchSchema\n```\n\n----------------------------------------\n\nTITLE: Creating Custom String Length Matcher in Kotlin\nDESCRIPTION: Demonstrates how to create a custom matcher for asserting string length in Kotest. It implements the Matcher interface and returns a MatcherResult with appropriate pass/fail logic and messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/custom.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun haveLength(length: Int) = Matcher<String> { value ->\n  MatcherResult(\n    value.length == length,\n    { \"string had length ${value.length} but we expected length $length\" },\n    { \"string should not have length $length\" },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Kotest Matcher Usage Styles in Kotlin\nDESCRIPTION: This snippet illustrates the two styles of using Kotest matchers: extension functions and infix functions. It also shows how to negate matchers using 'shouldNot' or 'shouldNot' prefixed functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldBe(b)\na.shouldStartWith(\"foo\")\n\na shouldBe b\na should startWith(\"foo\")\n\na shouldNot startWith(\"boo\")\na.shouldNotStartWith(\"boo\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Blocks in DescribeSpec using xdescribe\nDESCRIPTION: Shows how to disable an entire test block and its nested tests by using the 'xdescribe' prefix instead of 'describe' in a DescribeSpec class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/xmethods.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  xdescribe(\"this block and it's children are now disabled\") {\n    it(\"will not run\") {\n      // disabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution with Enabled Flag in Kotlin\nDESCRIPTION: Shows how to run tests only under certain conditions, such as on Linux systems, using the 'enabled' configuration parameter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/config_enabled.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = IS_OS_LINUX) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Gradle\nDESCRIPTION: Shows how to add the Kotest Testcontainers extension dependency to a Gradle build file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Defining Kotest Framework Configuration Properties in Kotlin\nDESCRIPTION: A Kotlin object that defines all the system properties used to configure the Kotest test framework. Each property is a string constant with a descriptive name and documentation comments explaining its purpose, including settings for test filtering, parallelism, timeouts, assertion modes, and many other framework behaviors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/config_props.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotest.core.internal\n\nobject KotestEngineProperties {\n\n   const val scriptsEnabled = \"kotest.framework.scripts.enabled\"\n\n   const val dumpConfig = \"kotest.framework.dump.config\"\n\n   /**\n    * Sets the tag expression that determines included/excluded tags.\n    */\n   const val tagExpression = \"kotest.tags\"\n\n   const val excludeTags = \"kotest.tags.exclude\"\n\n   const val includeTags = \"kotest.tags.include\"\n\n   /**\n    * A regex expression that is used to match the test [io.kotest.core.descriptors.Descriptor]'s path\n    * to determine if a test should be included in the test plan or not.\n    */\n   const val filterTests = \"kotest.filter.tests\"\n\n   /**\n    * A regex expression that is used to match the [io.kotest.mpp.bestName] of a class\n    * to determine if a spec should be included in the test plan or not.\n    */\n   const val filterSpecs = \"kotest.filter.specs\"\n\n   const val propertiesFilename = \"kotest.properties.filename\"\n\n   /**\n    * If set to true, then source ref's will not be created for test cases.\n    * This may speed up builds (as the engine will not need to create stack traces to\n    * generate line numbers) but will also reduce functionality in the intellij plugin\n    * (by limiting the ability to drill directly into the test inside a file).\n    */\n   const val disableSourceRef = \"kotest.framework.sourceref.disable\"\n\n   /**\n    * If set to true, disables the use of '!' as a prefix to disable tests.\n    */\n   const val disableBangPrefix = \"kotest.bang.disable\"\n\n   /**\n    * The default [io.kotest.core.spec.IsolationMode] for specs.\n    */\n   const val isolationMode = \"kotest.framework.isolation.mode\"\n\n   /**\n    * The default [io.kotest.core.test.AssertionMode] for tests.\n    */\n   const val assertionMode = \"kotest.framework.assertion.mode\"\n\n   /**\n    * The default parallelism for specs.\n    */\n   const val parallelism = \"kotest.framework.parallelism\"\n\n   /**\n    * The default timeout for test cases.\n    */\n   const val timeout = \"kotest.framework.timeout\"\n\n   /**\n    * The default timeout for the entire test suite.\n    */\n   const val projectTimeout = \"kotest.framework.projecttimeout\"\n\n   const val logLevel = \"kotest.framework.loglevel\"\n\n   /**\n    * The default timeout for each invocation of a test case.\n    */\n   const val invocationTimeout = \"kotest.framework.invocation.timeout\"\n\n   const val concurrentSpecs = \"kotest.framework.spec.concurrent\"\n\n   const val concurrentTests = \"kotest.framework.test.concurrent\"\n\n   /**\n    * Disable scanning the classpath for configuration classes by setting this property to true\n    */\n   const val disableConfigurationClassPathScanning = \"kotest.framework.classpath.scanning.config.disable\"\n\n   /**\n    * Specify a fully qualified name to use for project config.\n    * This class will be instantiated via reflection.\n    */\n   const val configurationClassName = \"kotest.framework.config.fqn\"\n\n   /**\n    * Disable scanning the classpath for listeners with @AutoScan by setting this property to true\n    */\n   const val disableAutoScanClassPathScanning = \"kotest.framework.classpath.scanning.autoscan.disable\"\n\n   const val allowMultilineTestName = \"kotest.framework.testname.multiline\"\n\n   /**\n    *  If set -> filter testCases by this severity level and higher, else running all\n    */\n   const val testSeverity = \"kotest.framework.test.severity\"\n\n   /**\n    * Enable assert softly globally.\n    * */\n   const val globalAssertSoftly = \"kotest.framework.assertion.globalassertsoftly\"\n\n   /**\n    * Appends all tags associated with a test case to its display name.\n    * */\n   const val testNameAppendTags = \"kotest.framework.testname.append.tags\"\n\n   /**\n    * Controls whether classes will inherit tags from their supertypes. Default false\n    */\n   const val tagInheritance = \"kotest.framework.tag.inheritance\"\n\n   /**\n    * Controls the [io.kotest.core.names.DuplicateTestNameMode] mode.\n    */\n   const val duplicateTestNameMode = \"kotest.framework.testname.duplicate.mode\"\n\n   const val disableJarDiscovery = \"kotest.framework.discovery.jar.scan.disable\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Assert Softly in Kotest\nDESCRIPTION: This snippet illustrates how to enable global assert softly for all tests in Kotest. It overrides the globalAssertSoftly property in the KotestProjectConfig object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/project_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val globalAssertSoftly = true\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with Enabled Flag in Kotlin\nDESCRIPTION: This snippet demonstrates how to disable a test case by setting the 'enabled' configuration parameter to false. It also shows how to conditionally run tests based on system properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/config_enabled.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = false) {\n  // test here\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = IS_OS_LINUX) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Dispatcher for All Tests in a Spec\nDESCRIPTION: Shows how to configure TestDispatcher at the spec level to apply to all tests within the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      coroutineTestScope = true\n      test(\"this test uses a test dispatcher\") {\n      }\n      test(\"and so does this test!\") {\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Date and Time Assertions in Kotest\nDESCRIPTION: Assertion methods for dates and times including comparisons, component validation, and range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\ndate.shouldHaveSameMonthAs(otherDate)\ndate.shouldHaveSameDayAs(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeWithin(period, otherDate)\ndate.shouldBeWithin(duration, otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDayOfYear(day)\ndate.shouldHaveDayOfMonth(day)\ndate.shouldHaveDayOfWeek(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\ndate.shouldHaveNano(nao)\n```\n\n----------------------------------------\n\nTITLE: Checking List Order and Content in Kotest\nDESCRIPTION: Verifies ordering and positional content of lists, including sorting, subsequence checks, and position validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/collections.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.shouldBeSorted()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.shouldBeSortedBy { transform }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.shouldContainInOrder(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.shouldExistInOrder({ element }, ...)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.shouldHaveElementAt(index, element)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.shouldStartWith(lst)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.shouldEndWith(lst)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution with Kotest in Kotlin\nDESCRIPTION: Shows how to use Kotest's config function to fine-tune test execution, including setting timeout, invocations, threads, and tags for individual tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/index.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n  \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n    // test here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: File Assertions in Kotest\nDESCRIPTION: Comprehensive assertion methods for file operations including type checks, permissions, size comparisons, and content validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeAbsolute()\nfile.shouldBeADirectory()\nfile.shouldBeAFile()\nfile.shouldBeCanonical()\nfile.shouldBeEmpty()\nfile.shouldBeExecutable()\nfile.shouldBeHidden()\nfile.shouldBeReadable()\nfile.shouldBeRelative()\nfile.shouldBeSmaller(file)\nfile.shouldBeLarger(file)\nfile.shouldBeWriteable()\ndir.shouldBeNonEmptyDirectory()\ndir.shouldContainFile(name)\ndir.shouldContainNFiles(name)\nfile.shouldExist()\nfile.shouldHaveExtension(ext)\nfile.shouldHaveFileSize(size)\nfile.shouldHaveName(name)\nfile.shouldHavePath(path)\nfile.shouldStartWithPath(prefix)\ndir.shouldContainFileDeep(name)\ndir.shouldContainFiles(name1, name2, ..., nameN)\nfile.shouldBeSymbolicLink()\nfile.shouldHaveParent(name)\n```\n\n----------------------------------------\n\nTITLE: Testing invalid data with Konform matchers in Kotest\nDESCRIPTION: Demonstrates how to assert that validation fails with specific error messages using shouldBeInvalid and shouldContainError matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/konform.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval bob = UserProfile(\"bob\", 18)\nvalidateUser.shouldBeInvalid(a) {\n  it.shouldContainError(UserProfile::fullName, \"must have at least 4 characters\")\n  it.shouldContainError(UserProfile::age, \"must be at least '21'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions in Kotlin with Kotest\nDESCRIPTION: Illustrates how to test for exceptions in Kotest using the shouldThrow function. This example checks if a specific exception is thrown and verifies its message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/index.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Generating Enum Arbitraries in Kotlin\nDESCRIPTION: Functions for generating random or exhaustive enum constants in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.enum<T>()\nExhaustive.enum<T>()\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Kotlin for Kotest\nDESCRIPTION: Demonstrates how to define tags as objects inheriting from io.kotest.core.Tag or using the NamedTag class. It also lists rules for creating valid tags.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/tags.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval tag = NamedTag(\"Linux\")\n```\n\n----------------------------------------\n\nTITLE: Integer Assertions in Kotlin using Kotest\nDESCRIPTION: Assertions for integer values, ranges, and properties in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nint.shouldBeBetween(x, y)\nint.shouldBeLessThan(n)\nint.shouldBeLessThanOrEqual(n)\nint.shouldBeGreaterThan(n)\nint.shouldBeGreaterThanOrEqual(n)\nint.shouldBeEven()\nint.shouldBeOdd()\nint.shouldBeInRange(range)\nint.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Manipulating Time with TestDispatcher in Kotest\nDESCRIPTION: This example demonstrates how to use the testCoroutineScheduler to manipulate time in a coroutine test, advancing the virtual clock to complete a delay immediately.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.test.testCoroutineScheduler\n\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"advance time\").config(coroutineTestScope = true) {\n        val duration = 1.days\n        // launch a coroutine that would normally sleep for 1 day\n        launch {\n          delay(duration.inWholeMilliseconds)\n        }\n        // move the clock on and the delay in the above coroutine will finish immediately.\n        testCoroutineScheduler.advanceTimeBy(duration.inWholeMilliseconds)\n        val currentTime = testCoroutineScheduler.currentTime\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Listeners to Eventually Function in Kotlin\nDESCRIPTION: Demonstrates how to attach a listener to the 'eventually' function for monitoring iterations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/concurrency/eventually.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5.seconds()\n  listener = { println(\"iteration ${it.times} returned ${it.result}\") }\n}) {\n  string += \"x\"\n  string\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Tests with StringSpec in Kotlin\nDESCRIPTION: Demonstration of StringSpec style which provides minimal syntax for writing tests using string literals followed by lambda expressions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\" {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Uniqueness in Kotest\nDESCRIPTION: Asserts that all elements in a collection are distinct using natural equality or a custom comparator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/collections.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeUnique()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeUnique(comparator)\n```\n\n----------------------------------------\n\nTITLE: Override Callback Functions in Kotest Spec\nDESCRIPTION: Demonstrates how to override lifecycle callback functions directly in a Spec class, showing an alternative approach to using DSL methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/lifecycle_hooks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec() {\n    override suspend fun beforeTest(testCase: TestCase) {\n        println(\"Starting a test $testCase\")\n    }\n\n    init {\n        \"this test\" should {\n            \"be alive\" {\n                println(\"Johnny5 is alive!\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Eventually Usage with Duration in Kotlin\nDESCRIPTION: Simple example of using eventually with a duration in milliseconds to test asynchronous code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/concurrency/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\neventually(5000) { // duration in millis\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Exception Message in Kotest\nDESCRIPTION: This snippet demonstrates how to capture the thrown exception and assert its properties. It checks if the exception message starts with a specific string.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/exceptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Testing Time-Fixed Operations with withConstantNow in Kotlin\nDESCRIPTION: Demonstrates how to use withConstantNow to maintain a constant time value during test execution. The example shows how LocalDateTime.now() returns the same value regardless of actual time passing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/instant.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval foreverNow = LocalDateTime.now()\n\nwithConstantNow(foreverNow) {\n  LocalDateTime.now() shouldBe foreverNow\n  delay(10) // Code is taking a small amount of time to execute, but `now` changed!\n  LocalDateTime.now() shouldBe foreverNow\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reflective Arbs for Property-based Testing in Kotest\nDESCRIPTION: Demonstrates how to use reflective Arbs in Kotest to automatically generate test data for complex types. The example shows defining a CurrencyAmount class, then using Arb.bind to create generators that can be filtered and used in property tests with different scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/reflective_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Currency {\n  USD, GBP, EUR\n}\n\nclass CurrencyAmount(\n  val amount: Long,\n  val currency: Currency\n)\n\ncontext(\"Currencies converts to EUR\") { // In some spec\n  checkAll(Arb.bind<CurrencyAmount>().filter { it.currency != EUR }) { currencyAmount ->\n    val converted = currencyAmount.convertTo(EUR)\n    converted.currency shouldBe EUR\n  }\n}\n\ncontext(\"Converting to a currency and back yields the same amount\") { // In some spec\n  checkAll<CurrencyAmount, Currency>() { currencyAmount, currency ->\n    val converted = currencyAmount.convertTo(currency).convertTo(currencyAmount.currency)\n    converted.currency shouldBe currencyAmount.currency\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Shrinking in Kotest\nDESCRIPTION: Example of a property test that demonstrates the improved shrinking output in Kotest 4.1.0, which shows both original and shrunken failure cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String> { a ->\n  a shouldBe a.reversed()\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Exceptions with Eventually in Kotlin\nDESCRIPTION: This example shows how to use 'eventually' to ignore a specific exception (UserNotFoundException) while testing. It checks if a user can be found in the repository within 5 seconds, ignoring UserNotFoundException.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"check if user repository has one row\") {\n      eventually(5.seconds, UserNotFoundException::class.java) {\n        userRepository.findBy(1) shouldNotBe null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing and Customizing 'eventually' Configurations in Kotlin\nDESCRIPTION: Example of creating reusable 'eventually' configurations for different scenarios and tests. This creates 'slow' and 'fast' configurations that can be shared across multiple test classes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/eventually.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = eventuallyConfig {\n  duration = 5.minutes\n  interval = 25.milliseconds.fibonacci()\n  listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") }\n}\n\nval fast = slow.copy(duration = 5.seconds)\n\nclass FooTests : FunSpec({\n  test(\"server eventually provides a result for /foo\") {\n    eventually(slow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : FunSpec({\n  test(\"server eventually provides a result for /bar\") {\n    eventually(fast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding System Environment Variables in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the withEnvironment extension function to temporarily override system environment variables during test execution. This allows testing code that depends on environment variables.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(\"FooKey\", \"BarValue\") {\n    System.getenv(\"FooKey\") shouldBe \"BarValue\" // System environment overridden!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest\nDESCRIPTION: Sets the assertion mode to fail the build if a test executes without using a Kotest assertion. This helps ensure all tests include proper assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/project_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val assertionMode = AssertionMode.Error\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Constructor Injection Example in Kotest\nDESCRIPTION: Shows a test class that uses constructor injection with Spring. The UserService dependency is autowired by Spring and then used in the test assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/spring.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"have autowired the service\" {\n        service.repository.findUser().name shouldBe \"system_user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Char Generators in Kotest\nDESCRIPTION: Generators for producing character values and arrays with support for custom ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.char(range1, range2,...)\nArb.char(List<CharRange>)\nArb.charArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Comparable Object Matchers in Kotest\nDESCRIPTION: Matchers for comparing objects using compareTo and custom comparators\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeLessThan(other)\ncomp.shouldBeLessThanOrEqualTo(other)\ncomp.shouldBeEqualComparingTo(other)\ncomp.shouldBeEqualComparingTo(other, comparator)\ncomp.shouldBeGreaterThan(other)\ncomp.shouldBeGreaterThanOrEqualTo(other)\n```\n\n----------------------------------------\n\nTITLE: Basic MockK Usage in Kotest FunSpec\nDESCRIPTION: Demonstrates basic mock setup and verification using MockK within a Kotest FunSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/mocks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Arbitrary Generators in Kotlin\nDESCRIPTION: Shows how to merge two Arb instances to create a new one that samples equally from both. Includes an example of merging two simple arbitraries and checking the distribution of generated values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genops.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval merged = arbA.merge(arbB)\n\nval a = arbitrary { \"a\" }\nval b = arbitrary { \"b\" }\nval ab = a.merge(b)\n\nprintln(ab.take(1000).groupingBy { it }.eachCount())\n// {a=493, b=507}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Extensions and Log Level in Kotest\nDESCRIPTION: This snippet demonstrates how to set up logging in Kotest by configuring the log level and adding a LogExtension to handle log entries. It shows the implementation within an AbstractProjectConfig object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/logging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n    override val logLevel = LogLevel.Error\n    override fun extensions() = listOf(\n        object : LogExtension {\n            override suspend fun handleLogs(testCase: TestCase, logs: List<LogEntry>) {\n                logs.forEach { println(it.level.name + \" - \" + it.message) }\n            }\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Cases with Multiple Invocations and Threads in Kotest ShouldSpec\nDESCRIPTION: This snippet demonstrates how to configure a test case in Kotest's ShouldSpec to run multiple invocations across multiple threads. It sets the test to run 10 times using 2 threads.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_case_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Table Test Failure Message Example in Kotest\nDESCRIPTION: Shows the error message format when a table test fails. This example demonstrates how Kotest matches input values to parameter names in error reporting.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTest failed for (root, 5), (square, 55) with error expected: 55 but was: 25\n```\n\n----------------------------------------\n\nTITLE: Implementing PropTestListener in Kotlin with Kotest\nDESCRIPTION: Example showing how to create and configure a PropTestListener for property tests. The listener implements beforeTest and afterTest methods to execute code before and after each property test run. The example demonstrates string length property testing with the configured listener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = object : PropTestListener {\n  override suspend fun beforeTest() {\n    println(\"Startup\")\n  }\n\n  override suspend fun afterTest() {\n    println(\"Shutdown\")\n  }\n}\n\nval propConfig = PropTestConfig(listeners = listOf(listener))\n\ncheckAll<String, String>(10, propConfig) { a, b ->\n  a.length + b.length shouldBe (a + b).length\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Time Properties in Kotlin with Kotest\nDESCRIPTION: Functions for comparing various components of time objects (hours, minutes, seconds, nanos) and asserting ordering relationships between time instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameMinutesAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameSecondsAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameNanosAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeBefore(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeAfter(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Reusing Lifecycle Hook Functions in Kotest\nDESCRIPTION: Example showing how to define reusable functions for lifecycle hooks and use them across multiple test specs. Uses type aliases like BeforeTest to simplify function signatures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/lifecycle_hooks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval startTest: BeforeTest = {\n   println(\"Starting a test $it\")\n}\n\nclass TestSpec : WordSpec({\n\n   // used once\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"be alive\" {\n         println(\"Johnny5 is alive!\")\n      }\n   }\n})\n\nclass OtherSpec : WordSpec({\n\n   // used twice\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"fail\" {\n         fail(\"boom\")\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Until Function with Fixed Interval in Kotest\nDESCRIPTION: Shows how to use the 'until' function with a fixed interval between polling attempts. This example checks for a message every 250 milliseconds for up to 5 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/until.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 250.milliseconds.fixed()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Tests in Kotlin\nDESCRIPTION: Shows how to create and use table tests for testing specific value combinations. Includes headers and rows for structured test data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TableExample : StringSpec(), TableTesting {\n  init {\n    \"numbers should be prime\" {\n      val table = table(\n          headers(\"a\", \"b\"),\n          row(5, 5),\n          row(4, 6),\n          row(3, 7)\n      )\n      forAll(table) { a, b ->\n        a + b == 10\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root-Level Data-Driven Tests\nDESCRIPTION: Example showing data-driven tests defined at the root level without context nesting using FunSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  withData(\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    isPythagTriple(a, b, c) shouldBe true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Continually Testing in Kotlin using Kotest\nDESCRIPTION: Demonstrates how to use the continually block to assert that a condition continues to pass for 60 seconds. The test code is executed every 10 milliseconds by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/continually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout Configuration in WordSpec\nDESCRIPTION: Demonstrates how to set a timeout configuration for a test case using WordSpec style with a 2-second timeout limit.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_case_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cucumber-Style Testing with FeatureSpec in Kotlin\nDESCRIPTION: Shows how to use FeatureSpec for cucumber-like testing with feature and scenario blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"the can of coke\") {\n        scenario(\"should be fizzy when I shake it\") {\n            // test here\n        }\n        scenario(\"and should be tasty\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: FlatMapping Arb Values in Kotlin\nDESCRIPTION: Illustrates the use of 'flatMap' to create dependent Arbs, where the emission or edge cases depend on the emission of previous arbitraries.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genops.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval dependentArbs: Arb<String> = Arb.of(\"foo\", \"bar\").flatMap { prefix ->\n   Arb.int(1..10).map { integer ->\n      \"${prefix}-${integer}\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Channel Properties in Kotest\nDESCRIPTION: Methods for asserting various properties of channels in Kotest, including receiving elements, size, and state checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nchannel.shouldReceiveWithin(duration)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nchannel.shouldReceiveNoElementsWithin(duration)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nchannel.shouldHaveSize(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nchannel.shouldReceiveAtLeast(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nchannel.shouldReceiveAtMost(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nchannel.shouldBeClosed()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nchannel.shouldBeOpen()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nchannel.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Mapping Arbitrary Generator Values in Kotlin\nDESCRIPTION: Illustrates the use of the 'map' operation to transform values generated by an Arb. The example shows converting integers to strings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genops.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval integerStrings: Arb<String> = Arb.int().map { it.toString() }\n```\n\n----------------------------------------\n\nTITLE: Running Assertions on Table Data from File in Kotest\nDESCRIPTION: This snippet shows how to run assertions on table data read from a file in Kotest. It uses the forAll method to iterate over the rows and perform checks on the id and username fields.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/table_driven_testing.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"table-driven testing from the .table file\") {\n    // asserts like before\n    tableFromFile.forAll { id, name, username ->\n        id shouldBeGreaterThan 0\n        username shouldNotBe \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Optional Properties in Kotlin with Kotest\nDESCRIPTION: Extension functions for Optional objects that verify presence status and provide access to present values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\noptional.shouldBePresent()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\noptional.shouldBePresent { value -> .. }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\noptional.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Reporter in Kotest Project Config\nDESCRIPTION: Example showing how to set up the HTML Reporter and JUnit XML Reporter in the Kotest project configuration. The JunitXmlReporter generates XML reports which are then used by HtmlReporter to create HTML test reports.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/html_reporter.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override val specExecutionOrder = SpecExecutionOrder.Annotated\n\n    override fun extensions(): List<Extension> = listOf(\n        JunitXmlReporter(\n            includeContainers = false,\n            useTestPathAsName = true,\n        ),\n        HtmlReporter()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Listeners at the End of Spec\nDESCRIPTION: Demonstrates placing test listeners at the end of the spec definition for better readability and organization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/integrations/mocks.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    afterTest {\n        clearMocks(repository)  // <---- End of file, better readability\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec in Kotlin for String-based Tests\nDESCRIPTION: Example of using StringSpec to create tests based on strings. Tests can be defined with simple string identifiers followed by test blocks, with optional configuration for test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_40\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  init {\n    \"strings.size should return size of string\" {\n      \"hello\".length shouldBe 5\n      \"hello\" should haveLength(5)\n    }\n\n    \"strings should support config\" {\n      \"hello\".length shouldBe 5\n    }.config(invocations = 5)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Date Properties in Kotlin with Kotest\nDESCRIPTION: This snippet shows assertion functions for date operations in Kotest. It includes checks for date comparisons, specific date components, and date ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\ndate.shouldHaveSameMonthAs(otherDate)\ndate.shouldHaveSameDayAs(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeWithin(period, otherDate)\ndate.shouldBeWithin(duration, otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDayOfYear(day)\ndate.shouldHaveDayOfMonth(day)\ndate.shouldHaveDayOfWeek(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\ndate.shouldHaveNano(nao)\n```\n\n----------------------------------------\n\nTITLE: Either Type Matchers in Kotest Arrow\nDESCRIPTION: Assertion methods for Either type in Arrow. Provides matchers to verify Right and Left cases with optional value validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\neither.shouldBeRight()\neither.shouldBeRight(v)\neither.shouldBeLeft()\neither.shouldBeLeft(v)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution Parameters in Kotest\nDESCRIPTION: This example demonstrates how to fine-tune test execution using Kotest's config function. It shows setting timeout duration, number of invocations, thread count, and test tags for a specific test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n   \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Recommended Test Case Configuration in Kotest\nDESCRIPTION: Demonstrates the new recommended way to set default test case configuration in Kotest specs. This approach allows for more granular control and better fallthrough of settings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_5.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n\n    tags(Foo, Bar)\n    timeout = 100.seconds\n\n    test(\"foo\") {\n       // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Exception Type with shouldThrow\nDESCRIPTION: Demonstrates how to test that a specific exception type is thrown using the shouldThrow function. This example expects an IllegalAccessException to be thrown from the code block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Test Names in Data-Driven Tests with Kotest in Kotlin\nDESCRIPTION: Shows how to customize the names of individual tests in a data-driven test suite using Kotest. This example uses a Map to provide custom names for each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n  withData(\n    mapOf( // all-whitespace strings make lousy test names\n      \"empty\" to \"\",\n      \"blank\" to \"  \",\n    )\n  ) {\n    it.isBlank() shouldBe true\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic Property Testing with forAll in Kotlin\nDESCRIPTION: Demonstrates using forAll function to test string concatenation property. The function accepts type parameters and returns a boolean indicating test success.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/test_functions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String> { a, b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Expected Exceptions for Eventually in Kotlin\nDESCRIPTION: Example showing how to configure eventually to handle specific exception types, ignoring expected exceptions while allowing others to fail the test immediately.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/eventually.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  expectedExceptions = setOf(UserNotFoundException::class)\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: General Test Container Configuration\nDESCRIPTION: Examples of configuring general-purpose test containers using image name and typed container.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval container = install(TestContainerExtension(\"redis:5.0.3-alpine\")) {\n  startupAttempts = 1\n  withExposedPorts(6379)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval elasticsearch = install(TestContainerExtension(ElasticsearchContainer(ELASTICSEARCH_IMAGE) )) {\n  withPassword(ELASTICSEARCH_PASSWORD)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Listener Project-Wide in Kotest\nDESCRIPTION: Example showing how to register a custom listener (TimerListener) at the project level by extending AbstractProjectConfig. This makes the listener available to all tests in the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/extensions/examples.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyConfig : AbstractProjectConfig() {\n    override fun extensions(): List<Extension> = listOf(TimerListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ShouldSpec Testing Style in Kotest\nDESCRIPTION: ShouldSpec is similar to FunSpec but uses the keyword 'should' instead of 'test'. It allows creating tests with descriptive names that read naturally in English.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    should(\"return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Mocking with MockK in Kotest FunSpec\nDESCRIPTION: Demonstrates a simple test using MockK to mock a repository in a Kotest FunSpec. It shows how to create a mock, set expectations, and verify calls.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/integrations/mocks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Property Testing Examples with Boolean and Matchers\nDESCRIPTION: Demonstrates two approaches to property testing - using boolean returns and using matchers with assertAll.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  forAll(Gen.string(), Gen.string(), { a, b ->\n    (a + b).startsWith(a)\n  })\n}\n\n\"startsWith\" {\n  assertAll(Gen.string(), Gen.string(), { a, b ->\n    a + b should startWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Lifecycle Hook Functions Across Multiple Specs in Kotest\nDESCRIPTION: This example shows how to define a reusable lifecycle hook function and apply it to multiple test specs. It uses a BeforeTest type alias (which is equivalent to suspend (TestCase) -> Unit) for type safety.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/lifecycle_hooks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval startTest: BeforeTest = {\n   println(\"Starting a test $it\")\n}\n\nclass TestSpec : WordSpec({\n\n   // used once\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"be alive\" {\n         println(\"Johnny5 is alive!\")\n      }\n   }\n})\n\nclass OtherSpec : WordSpec({\n\n   // used twice\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"fail\" {\n         fail(\"boom\")\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Continuous Success with Continually in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the 'continually' function in Kotest to assert that a block of code succeeds continuously for 60 seconds. The test will fail if the condition is not met at any point during this period.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/continually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Compiler Matchers in Kotest Tests\nDESCRIPTION: Example test class demonstrating how to use shouldCompile() and shouldNotCompile() matchers with both string code snippets and files. The test verifies that valid Kotlin code compiles and invalid code fails to compile.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/compiler.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CompilationTest: StringSpec() {\n        init {\n            \"shouldCompile test\" {\n                val codeSnippet = \"\"\" val aString: String = \"A valid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldCompile()\n                File(\"SourceFile.kt\").shouldCompile()\n            }\n\n            \"shouldNotCompile test\" {\n                val codeSnippet = \"\"\" val aInteger: Int = \"A invalid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldNotCompile()\n                File(\"SourceFile.kt\").shouldNotCompile()\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Validated Type Matchers in Kotest Arrow\nDESCRIPTION: Assertion methods for Validated type in Arrow. Provides matchers to verify Valid and Invalid cases with optional value validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nvalidated.shouldBeValid()\nvalidated.shouldBeValid(v)\nvalidated.shouldBeInvalid()\nvalidated.shouldBeInvalid(v)\n```\n\n----------------------------------------\n\nTITLE: Using Field-by-Field Comparison Matchers in Kotest\nDESCRIPTION: Assertion matchers that compare objects field-by-field rather than using equals() method, with options to control private field handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFields(other: T)\nany.shouldBeEqualToComparingFields(other: T, ignorePrivateFields: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Timer Listener in Kotest\nDESCRIPTION: This snippet shows how to create a custom TimerListener that implements BeforeTestListener and AfterTestListener interfaces to track the execution time of tests. It logs the duration of each test case by measuring start and end times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/extensions/examples.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : BeforeTestListener, AfterTestListener {\n\n  var started = 0L\n\n  override fun beforeTest(testCase: TestCase): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(testCase: TestCase, result: TestResult): Unit {\n    println(\"Duration of ${testCase.descriptor} = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AnnotationSpec Example Implementation\nDESCRIPTION: Demonstrates the use of JUnit-style annotations in Kotest's AnnotationSpec, including lifecycle hooks and test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n    @BeforeEach\n    fun beforeTest() {\n        println(\"Before each test\")\n    }\n\n    @Test\n    fun test1() {\n        1 shouldBe 1\n    }\n\n    @Test\n    fun test2() {\n        3 shouldBe 3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Coordinate Generator with Neighbor-based Shrinking\nDESCRIPTION: Implements a custom generator for 2D coordinates with a custom shrinking strategy that tries neighboring coordinates. The test ensures coordinates remain positive after transformation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/shrinking.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Coordinate(val x: Int, val y: Int)\n\nclass CoordinateTest : FunSpec({\n    context(\"Coordinate Transformations\") {\n        // Shrinker takes the four neighbouring coordinates\n        val coordinateShrinker = Shrinker<Coordinate> { c ->\n            listOf(\n                Coordinate(c.x - 1, c.y),\n                Coordinate(c.x, c.y - 1),\n                Coordinate(c.x + 1, c.y),\n                Coordinate(c.x, c.y + 1),\n            )\n        }\n        val coordinateArb = arbitrary(coordinateShrinker) {\n            Coordinate(Arb.nonNegativeInt().bind(), Arb.nonNegativeInt().bind())\n        }\n\n        test(\"Coordinates are always positive after transformation\") {\n            coordinateArb.checkAll {\n                transform(it).x shouldBeGreaterThanOrEqualTo 0\n                transform(it).y shouldBeGreaterThanOrEqualTo 0\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reflective Arbs Usage in Kotest\nDESCRIPTION: This snippet showcases how to use reflective Arbs in Kotest. It defines a Currency enum and CurrencyAmount class, then demonstrates using Arb.bind for property-based testing with filtering and type combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/reflective_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Currency {\n  USD, GBP, EUR\n}\n\nclass CurrencyAmount(\n  val amount: Long,\n  val currency: Currency\n)\n\ncontext(\"Currencies converts to EUR\") { // In some spec\n  checkAll(Arb.bind<CurrencyAmount>().filter { it.currency != EUR }) { currencyAmount ->\n    val converted = currencyAmount.convertTo(EUR)\n    converted.currency shouldBe EUR\n  }\n}\n\ncontext(\"Converting to a currency and back yields the same amount\") { // In some spec\n  checkAll<CurrencyAmount, Currency>() { currencyAmount, currency ->\n    val converted = currencyAmount.convertTo(currency).convertTo(currencyAmount.currency)\n    converted.currency shouldBe currencyAmount.currency\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Exact Exception Types in Kotest\nDESCRIPTION: Demonstrates the shouldThrowExactly function which verifies that exactly the specified exception type is thrown, not any of its parent classes. Useful for precise exception type checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/exceptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowExactly<FileNotFoundException> {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in FeatureSpec\nDESCRIPTION: Shows how to disable tests in FeatureSpec using the xfeature and xscenario variants. These allow for selectively disabling features or specific scenarios during testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"this outer block is enabled\") {\n        xscenario(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xfeature(\"this block is disabled\") {\n        scenario(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging for All Tests in a Spec in Kotlin\nDESCRIPTION: This snippet shows how to enable coroutine debugging for all tests within a specific spec by overriding the 'coroutineDebugProbes' setting. This applies the debugging configuration to all tests in the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n  init {\n\n    coroutineDebugProbes = true\n\n    test(\"foo\") {\n      // debugging enabled here\n    }\n\n    test(\"bar\") {\n      // debugging enabled here\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using containInAnyOrder Matcher in Kotest\nDESCRIPTION: Shows how to use the containInAnyOrder matcher for asserting multiple elements in a collection regardless of order in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should containInAnyOrder(4,2,3)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests Using enabled Flag in Kotlin\nDESCRIPTION: Demonstrates how to disable a test case using the enabled configuration parameter. This is equivalent to JUnit's @Ignore annotation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/config_enabled.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = false) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom String Length Matcher in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a custom matcher for string length in Kotest. It implements the Matcher interface and provides appropriate failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/custom.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun haveLength(length: Int) = Matcher<String> { value ->\n  MatcherResult(\n    value.length == length,\n    { \"string had length ${value.length} but we expected length $length\" },\n    { \"string should not have length $length\" },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lifecycle Callbacks to Test Factories in Kotlin\nDESCRIPTION: This snippet demonstrates how to add lifecycle callbacks (like beforeTest) to a test factory, which will only apply to tests defined in that factory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_factories.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval factory1 = funSpec {\n  beforeTest {\n     println(\"Executing $it\")\n  }\n  test(\"a\") {  }\n  test(\"b\") {  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Time with Test Coroutine Scheduler in Kotest\nDESCRIPTION: Demonstrates how to use testCoroutineScheduler to control virtual time in tests, including advancing time and checking current time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.test.testCoroutineScheduler\n\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"advance time\").config(coroutineTestScope = true) {\n        val duration = 1.days\n        // launch a coroutine that would normally sleep for 1 day\n        launch {\n          delay(duration.inWholeMilliseconds)\n        }\n        // move the clock on and the delay in the above coroutine will finish immediately.\n        testCoroutineScheduler.advanceTimeBy(duration.inWholeMilliseconds)\n        val currentTime = testCoroutineScheduler.currentTime\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Map Assertions in Kotest\nDESCRIPTION: Matchers for asserting properties and contents of maps in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nmap.shouldContain(\"key\", \"value\")\nmap.shouldContainAll(other)\nmap.shouldContainExactly(other)\nmap.shouldContainKey(key)\nmap.shouldContainKeys(keys)\nmap.shouldContainValue(value)\nmap.shouldContainValues(values)\nmap.shouldBeEmpty()\nmap.shouldMatchAll(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\nmap.shouldMatchExactly(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with the enabled Flag in Kotest\nDESCRIPTION: Demonstrates how to disable a test case by setting the enabled flag to false. This is equivalent to JUnit's @Ignore annotation and can also be used with conditional expressions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/config_enabled.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = false) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Tests in Kotlin with Kotest\nDESCRIPTION: Demonstrates the Table Tests feature which allows specifying combinations of values for testing. Tables include headers and rows of values, useful for testing edge cases and specific value combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TableExample : StringSpec(), TableTesting {\n  init {\n    \"numbers should be prime\" {\n      val table = table(\n          headers(\"a\", \"b\"),\n          row(5, 5),\n          row(4, 6),\n          row(3, 7)\n      )\n      forAll(table) { a, b ->\n        a + b == 10\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually Configuration Block Usage\nDESCRIPTION: Example showing eventually with a configuration block to set multiple options including duration and interval.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/concurrency/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5000\n  interval = 1000.fixed()\n}) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tests with DescribeSpec in Kotest\nDESCRIPTION: Shows how to create nested tests using the DescribeSpec style in Kotest. This allows for organizing tests hierarchically with outer 'describe' blocks and inner 'it' test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/writing_tests.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NestedTestExamples : DescribeSpec({\n\n   describe(\"an outer test\") {\n\n      it(\"an inner test\") {\n        1 + 2 shouldBe 3\n      }\n\n      it(\"an inner test too!\") {\n        3 + 4 shouldBe 7\n      }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing DescribeSpec Testing Style in Kotest\nDESCRIPTION: DescribeSpec offers a style familiar to Ruby or Javascript developers, using describe/it keywords. Tests must be nested in one or more describe blocks, which helps organize tests by functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"score\") {\n        it(\"start as zero\") {\n            // test here\n        }\n        describe(\"with a strike\") {\n            it(\"adds ten\") {\n                // test here\n            }\n            it(\"carries strike to the next frame\") {\n                // test here\n            }\n        }\n\n        describe(\"for the opposite team\") {\n            it(\"Should negate one score\") {\n                // test here\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Dependency for JVM/Maven\nDESCRIPTION: This XML snippet demonstrates how to add the Kotest property testing dependency to a Maven POM file for JVM projects. It specifies the groupId, artifactId, version, and test scope for the dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Testing for Any Exception in Kotlin using Kotest\nDESCRIPTION: This example shows how to use shouldThrowAny to test if any exception is thrown, regardless of its type. It can catch any Throwable in the given code block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/exceptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowAny {\n  // test here can throw any type of Throwable!\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting LocalDateTime Properties in Kotlin using Kotest\nDESCRIPTION: This snippet shows assertion methods for LocalDateTime objects in Kotlin using Kotest matchers. It includes checks for hours, minutes, seconds, nanoseconds, and comparisons between times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\ntime.shouldHaveSameMinutesAs(otherTime)\ntime.shouldHaveSameSecondsAs(otherTime)\ntime.shouldHaveSameNanosAs(otherTime)\ntime.shouldBeBefore(otherTime)\ntime.shouldBeAfter(otherTime)\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Creating Konform Validation Rules\nDESCRIPTION: Setting up validation rules for UserProfile using Konform, including length constraints for name and age range validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/konform.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval validateUser = Validation<UserProfile> {\n  UserProfile::fullName {\n     minLength(4)\n     maxLength(100)\n  }\n\n  UserProfile::age ifPresent {\n     minimum(21)\n     maximum(99)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using forNone Inspector in Kotest for Negative Assertions in Kotlin\nDESCRIPTION: This example illustrates the use of the forNone inspector in Kotest. It asserts that no elements in the collection contain the letter 'x' or start with 'bb', demonstrating how to perform negative assertions on collection elements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/inspectors.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Data Source Testing Example\nDESCRIPTION: Shows how to use CsvDataSource for table testing with data loaded from CSV files.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CsvDataSourceTest : WordSpec() {\n  init {\n\n    \"CsvDataSource\" should {\n      \"read data from csv file\" {\n\n        val source = CsvDataSource(javaClass.getResourceAsStream(\"/user_data.csv\"), CsvFormat())\n\n        val table = source.createTable<Long, String, String>(\n            { it: Record -> Row3(it.getLong(\"id\"), it.getString(\"name\"), it.getString(\"location\")) },\n            { it: Array<String> -> Headers3(it[0], it[1], it[2]) }\n        )\n\n        forAll(table) { a, b, c ->\n          a shouldBe gt(0)\n          b shouldNotBe null\n          c shouldNotBe null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution with Reason using EnabledOrReasonIf in Kotlin\nDESCRIPTION: Illustrates the use of 'enabledOrReasonIf' to provide a reason for test disabling. This function returns an Enabled type that can contain a skip reason, which is passed to test reports.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/config_enabled.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: (TestCase) -> Enabled = {\n   if (it.name.testName.startsWith(\"danger\") && isFriday())\n      Enabled.disabled(\"It's a friday, and we don't like danger!\")\n   else\n      Enabled.enabled\n}\n\n\"danger Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Compiler Matchers in Kotlin Tests\nDESCRIPTION: Example of using shouldCompile() and shouldNotCompile() matchers in a Kotest StringSpec test class. Demonstrates usage with both string code snippets and files.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/compiler.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CompilationTest: StringSpec() {\n    init {\n        \"shouldCompile test\" {\n            val codeSnippet = \"\"\" val aString: String = \"A valid assignment\" \"\"\".trimMargin()\n\n            codeSnippet.shouldCompile()\n            File(\"SourceFile.kt\").shouldCompile()\n        }\n\n        \"shouldNotCompile test\" {\n            val codeSnippet = \"\"\" val aInteger: Int = \"A invalid assignment\" \"\"\".trimMargin()\n\n            codeSnippet.shouldNotCompile()\n            File(\"SourceFile.kt\").shouldNotCompile()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Container in Kotlin\nDESCRIPTION: Shows how to create a Kafka container using Testcontainers in Kotlin, with embedded Zookeeper.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n  withEmbeddedZookeeper()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion in Kotlin using Kotest\nDESCRIPTION: Demonstrates a simple equality assertion using Kotest's 'shouldBe' matcher. This is a fundamental way to compare expected and actual values in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nname shouldBe \"sam\"\n```\n\n----------------------------------------\n\nTITLE: Creating Data Class for Pythagorean Triple Test Inputs in Kotlin\nDESCRIPTION: Defines a data class to represent a single row of test input for Pythagorean triple tests. This class will be used to structure input data for data-driven tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Checking Coverage Percentages in Kotlin Property Tests\nDESCRIPTION: This example demonstrates how to check coverage percentages for specific categories in property tests. It ensures that at least 10% of inputs cover HALF_DOWN and FLOOR rounding modes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/statistics.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoveragePercentages(mapOf(RoundingMode.HALF_DOWN to 10.0, RoundingMode.FLOOR to 10.0)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Test Lifecycle Mode in Kotest\nDESCRIPTION: Shows how to customize when Spring test method callbacks are fired by configuring the SpringTestLifecycleMode in the project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/spring.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringTestExtension(SpringTestLifecycleMode.Root))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kotest Property Testing for Multiplatform Projects (Common)\nDESCRIPTION: Demonstrates how to configure Kotest property testing for Kotlin Multiplatform projects in the commonTest sourceset. This allows property testing to be used across all platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/index.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-property:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Redis Container with Kotest\nDESCRIPTION: Example of using a Testcontainer with Kotest. This code demonstrates how to create a Redis container and register it as a test listener with the perTest() lifecycle, which starts a new container instance for each test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers_46x.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest Spec\nDESCRIPTION: Demonstrates how to set up assertion mode within a Kotest spec to enforce assertion checks. The example shows setting AssertionMode.Error which will fail tests that don't contain assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/assertion_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec() {\n   init {\n      assertions = AssertionMode.Error\n      test(\"this test has no assertions\") {\n         val name = \"sam\"\n         name.length == 3 // this isn't actually testing anything\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Specified JSON Equality Example in Kotlin\nDESCRIPTION: Example of using shouldEqualSpecifiedJson matcher which uses lenient field comparison by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/content.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = \"\"\" { \"a\": true, \"date\": \"2019-11-03\" } \"\"\"\nval b = \"\"\" { \"a\": true } \"\"\"\n\n// this would pass\na shouldEqualSpecifiedJson b\n\n// this would fail\na shouldEqualJson b\n```\n\n----------------------------------------\n\nTITLE: Reusable Lifecycle Hook Functions in Kotest\nDESCRIPTION: This example shows how to create reusable lifecycle hook functions in Kotest. It defines a startTest function of type BeforeTest that can be used in multiple spec classes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/lifecycle_hooks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval startTest: BeforeTest = {\n   println(\"Starting a test $it\")\n}\n\nclass TestSpec : WordSpec({\n\n   // used once\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"be alive\" {\n         println(\"Johnny5 is alive!\")\n      }\n   }\n})\n\nclass OtherSpec : WordSpec({\n\n   // used twice\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"fail\" {\n         fail(\"boom\")\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Logging Extension\nDESCRIPTION: Example of setting up logging configuration in AbstractProjectConfig including log level and custom LogExtension implementation. The extension handles how log messages are processed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/logging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n    override val logLevel = LogLevel.Error\n    override fun extensions() = listOf(\n        object : LogExtension {\n            override suspend fun handleLogs(testCase: TestCase, logs: List<LogEntry>) {\n                logs.forEach { println(it.level.name + \" - \" + it.message) }\n            }\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Concurrent Operation Assertions in Kotest\nDESCRIPTION: Methods for testing concurrent operations including timeouts and completion times. Supports both regular and suspendable functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nshouldCompleteWithin(timeout, unit, function)\nshouldTimeout(timeout, unit, function)\nshouldTimeout(duration, suspendableFunction)\n```\n\n----------------------------------------\n\nTITLE: Using nested clues in Kotest\nDESCRIPTION: Demonstrates how to nest multiple clues to provide a hierarchy of context information in test failures, useful for complex test scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Verifying user_id=${user.name}\" }.asClue {\n  \"email_confirmed should be false since we've just created the user\".asClue {\n    user.emailConfirmed shouldBe false\n  }\n  \"login\".asClue {\n    user.login shouldBe \"sksamuel\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Assertions in Kotest\nDESCRIPTION: Assertion functions for testing Kotlin Channels, including timing, size verification, and state checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldReceiveWithin(duration)\nchannel.shouldReceiveNoElementsWithin(duration)\nchannel.shouldHaveSize(n)\nchannel.shouldReceiveAtLeast(n)\nchannel.shouldReceiveAtMost(n)\nchannel.shouldBeClosed()\nchannel.shouldBeOpen()\nchannel.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Asserting Concurrent Operations in Kotlin with Kotest\nDESCRIPTION: Functions that verify timing aspects of concurrent operations, ensuring that functions complete or time out within specified durations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldCompleteWithin(timeout, unit, function)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldTimeout(timeout, unit, function)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldTimeout(duration, suspendableFunction)\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing with Multiple Parameters\nDESCRIPTION: Shows how to implement data-driven tests using multiple input combinations to test maximum number calculation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/index.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"maximum of two numbers\" {\n    forAll(\n        row(1, 5, 5),\n        row(1, 0, 1),\n        row(0, 0, 0)\n    ) { a, b, max ->\n      Math.max(a, b) shouldBe max\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Byte Values and Arrays in Kotlin with Kotest\nDESCRIPTION: Shows how to create generators for byte values and byte arrays using Kotest. Includes options for signed and unsigned bytes, as well as positive and negative ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.byte(min, max)\nArb.positiveByte(min, max)\nArb.negativeByte(min, max)\nArb.byteArray(length, content)\nArb.uByte(min, max)\nArb.uByteArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Combining Inline Tests and Test Factories in Kotlin\nDESCRIPTION: This example demonstrates how to combine inline tests with multiple test factories in a single FunSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_factories.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HugeTestFile : FunSpec({\n\n   test(\"first test\") {\n     // test here\n   }\n\n   include(factory1(\"foo\"))\n   include(factory2(1, 4))\n\n   test(\"another test\") {\n     //  testhere\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Property-based Tests in KotlinTest\nDESCRIPTION: Example of property-based testing in KotlinTest. Property tests automatically generate random values for test cases, executing the test multiple times with different inputs to validate properties of the code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_42\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n\n  \"String size\" {\n    forAll({ a: String, b: String ->\n      (a + b).length == a.length + b.length\n    })\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor HTTP Client Responses with Kotest Assertions\nDESCRIPTION: Example of using Kotest matchers with Ktor's HTTP client. The code demonstrates creating an HTTP client, making a POST request, and asserting on the response status and headers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/ktor.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\nval response = client.post(\"http://mydomain.com/foo\")\nresponse.shouldHaveStatus(HttpStatusCode.OK)\nresponse.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n\n```\n\n----------------------------------------\n\nTITLE: Using Test Name Function in Kotest Data Tests\nDESCRIPTION: Demonstrates using a custom naming function with withData to generate test names dynamically. The function takes the test row as input and returns a formatted string as the test name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/test_names.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData<PythagTriple>(\n    nameFn = { \"${it.a}__${it.b}__${it.c}\" },\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing with Kotest in Kotlin\nDESCRIPTION: Shows how to implement data-driven tests using Kotest's forAll function. This example tests the maximum of two numbers with multiple input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n   \"maximum of two numbers\" {\n      forAll(\n         row(1, 5, 5),\n         row(1, 0, 1),\n         row(0, 0, 0)\n      ) { a, b, max ->\n         Math.max(a, b) shouldBe max\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest Counter Example in Kotest\nDESCRIPTION: Shows how variables are reset in InstancePerTest mode using an atomic counter. Each test execution starts with a fresh instance, demonstrating how state is not shared between test executions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/isolation_mode.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pythagorean Triple Function in Kotlin\nDESCRIPTION: Implements a function to check if three input values form a valid Pythagorean triple. This function serves as the subject for subsequent data-driven tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Basic DSL Method Lifecycle Hooks in Kotest\nDESCRIPTION: Demonstrates using beforeTest and afterTest DSL methods within a WordSpec to execute code before and after test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/lifecycle_hooks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec({\n  beforeTest {\n    println(\"Starting a test $it\")\n  }\n  afterTest { (test, result) ->\n    println(\"Finished spec with result $result\")\n  }\n  \"this test\" should {\n    \"be alive\" {\n      println(\"Johnny5 is alive!\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Case with Multiple Invocations and Threads in Kotest ShouldSpec\nDESCRIPTION: This snippet demonstrates how to configure a test case in Kotest's ShouldSpec style, setting it to run 10 times across 2 threads. It tests the length property of strings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_case_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Structures with shouldEqualJson in Kotlin\nDESCRIPTION: Demonstrates the use of shouldEqualJson matcher to compare two JSON structures, allowing for different formatting and key order. The example shows two JSON strings that are considered equal despite differences in formatting and key order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/json/content.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"sam\",\n   \"location\": \"chicago\",\n   \"age\" : 41\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\" : 41, \"name\": \"sam\", \"location\": \"chicago\" }\n```\n\n----------------------------------------\n\nTITLE: Long Assertions in Kotest\nDESCRIPTION: Matchers for asserting properties of long integers in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nlong.shouldBeBetween(x, y)\nlong.shouldBeLessThan(n)\nlong.shouldBeLessThanOrEqual(n)\nlong.shouldBeGreaterThan(n)\nlong.shouldBeGreaterThanOrEqual(n)\nlong.shouldBeInRange(range)\nlong.shouldBeEven()\nlong.shouldBeOdd()\n```\n\n----------------------------------------\n\nTITLE: Using Predicates with Eventually Function in Kotlin\nDESCRIPTION: This snippet demonstrates how to use a predicate with the 'eventually' function. It checks if a value eventually reaches 5 within 25 seconds, with a delay of 1 second between each check.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"check that predicate eventually succeeds in time\" {\n    var i = 0\n    eventually<Int>(25.seconds, predicate = { it == 5 }) {\n      delay(1.seconds)\n      i++\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexicographic Test Ordering in Kotest\nDESCRIPTION: Demonstrates how to configure tests to run in lexicographic (alphabetical) order using TestCaseOrder.Lexicographic. Tests will execute based on alphabetical sorting of their names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_ordering.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LexicographicSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Lexicographic\n\n    init {\n      \"foo\" {\n        // I run second as bar < foo\n      }\n\n      \"bar\" {\n        // I run first as bar < foo\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Failure Tolerance in Kotest Property Tests\nDESCRIPTION: Shows how to configure a property test to tolerate a specific number of failures using the maxFailure parameter. This is useful for non-deterministic tests where some failures are acceptable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some flakey test\" {\n      forAll<String, String>(PropTestConfig(maxFailure = 3)) { a,b ->\n         // max of 3 inputs can fail\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Property Testing Classification\nDESCRIPTION: Demonstrates how to use classify to analyze the distribution of generated test values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Gen.int()) { a ->\n    classify(a == 0, \"zero\")\n    classify(a % 2 == 0, \"even number\", \"odd number\")\n    a + a == 2 * a\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Koin Integration with Kotest\nDESCRIPTION: Example showing basic integration of Koin with Kotest using FunSpec. Demonstrates dependency injection and test execution with KoinExtension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/koin.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : FunSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(myKoinModule))\n\n    val userService by inject<UserService>()\n\n    init {\n        test(\"use userService\") {\n            userService.getUser().username shouldBe \"LeoColman\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Container with Multiple Scripts in Kotlin\nDESCRIPTION: Demonstrates how to initialize a database container with multiple SQL scripts using JdbcTestContainerExtension in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcTestContainerExtension(mysql, LifecycleMode.Leaf)) {\n      maximumPoolSize = 8\n      minimumIdle = 4\n      dbInitScripts = listOf(\"/init.sql\", \"/sql-changesets\")\n   }\n```\n\n----------------------------------------\n\nTITLE: LocalDate Assertions in Kotlin\nDESCRIPTION: Various assertion methods for comparing and validating LocalDate properties including year, month, day comparisons and date range validations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\ndate.shouldHaveSameMonthAs(otherDate)\ndate.shouldHaveSameDayAs(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeWithin(period, otherDate)\ndate.shouldBeWithin(duration, otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDayOfYear(day)\ndate.shouldHaveDayOfMonth(day)\ndate.shouldHaveDayOfWeek(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\ndate.shouldHaveNano(nano)\n```\n\n----------------------------------------\n\nTITLE: Property-Based Testing Example\nDESCRIPTION: Shows how to use property-based testing to automatically generate test data and verify properties across multiple inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n  \"String size\" {\n    checkAll<String, String> { a, b ->\n      (a + b) shouldHaveLength a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting ByteArray Equality with Resource in Kotest\nDESCRIPTION: These functions assert whether a byte array matches or does not match the content of a specified binary resource file. They perform exact comparisons without any preprocessing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_30\n\nLANGUAGE: Kotlin\nCODE:\n```\nbyteArray shouldMatchResource \"/path/to/test_resource.bin\"\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nbyteArray shouldNotMatchResource \"/path/to/test_resource.bin\"\n```\n\n----------------------------------------\n\nTITLE: Asserting LocalDateTime Properties in Kotlin\nDESCRIPTION: Assertion methods for LocalDateTime objects, including comparing hours, minutes, seconds, and nanoseconds, as well as checking if a time is before, after, or between other times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\ntime.shouldHaveSameMinutesAs(otherTime)\ntime.shouldHaveSameSecondsAs(otherTime)\ntime.shouldHaveSameNanosAs(otherTime)\ntime.shouldBeBefore(otherTime)\ntime.shouldBeAfter(otherTime)\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: SingleInstance Isolation Mode Example in Kotlin\nDESCRIPTION: Illustrates the behavior of SingleInstance isolation mode where the same instance is used for all tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/isolation_mode.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SingleInstanceExample : WordSpec({\n   val id = UUID.randomUUID()\n   \"a\" should {\n      println(id)\n      \"b\" {\n         println(id)\n      }\n      \"c\" {\n         println(id)\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Test Listeners in Kotlin with Kotest\nDESCRIPTION: Example showing how to create and configure a PropTestListener for property tests. The listener implements beforeTest and afterTest methods to execute setup and teardown code, and is attached to a property test via PropTestConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.1.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = object : PropTestListener {\n  override suspend fun beforeTest() {\n    println(\"Startup\")\n  }\n\n  override suspend fun afterTest() {\n    println(\"Shutdown\")\n  }\n}\n\nval propConfig = PropTestConfig(listeners = listOf(listener))\n\ncheckAll<String, String>(10, propConfig) { a, b ->\n  a.length + b.length shouldBe (a + b).length\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Testing in Kotest\nDESCRIPTION: Shows different ways to test exceptions including checking specific exception types and messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Test Factories and Inline Tests in Kotlin\nDESCRIPTION: This snippet shows how to combine multiple test factories and inline tests in a single Kotest spec class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_factories.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HugeTestFile : FunSpec({\n\n   test(\"first test\") {\n     // test here\n   }\n\n   include(factory1(\"foo\"))\n   include(factory2(1, 4))\n\n   test(\"another test\") {\n     //  testhere\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Data Test Structure in Kotest\nDESCRIPTION: Demonstrates a basic nested data test structure testing multiple services against different HTTP methods. Uses two levels of withData blocks to create a cartesian product of test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/nested.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n  val services = listOf(\n    \"http://internal.foo\",\n    \"http://internal.bar\",\n    \"http://public.baz\",\n  )\n\n  val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n   withData(services) { service ->\n     withData(methods) { method ->\n       // test service against method\n     }\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DescribeSpec Tests in Kotlin\nDESCRIPTION: Example of DescribeSpec style which uses describe/it blocks similar to Ruby and Javascript testing frameworks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"score\") {\n        it(\"start as zero\") {\n            // test here\n        }\n        describe(\"with a strike\") {\n            it(\"adds ten\") {\n                // test here\n            }\n            it(\"carries strike to the next frame\") {\n                // test here\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Broker Message Reception with Until Function in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the 'until' function to test if a broker receives a message within a specified duration. It uses a 5-second timeout and checks the broker every second by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/until.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Individual Tests for Each Row in FreeSpec with Kotest\nDESCRIPTION: This snippet demonstrates how to generate individual tests for each row of data parameters in a FreeSpec. It includes examples for simple addition and more complex mathematical operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Selective Field Comparison Matchers in Kotlin\nDESCRIPTION: Matchers that allow comparison of objects by including only specific fields or by excluding specific fields from comparison. These alternatives to standard equals() provide more granular comparison control.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToUsingFields(other: T, vararg properties: KProperty<*>)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToIgnoringFields(other: T, vararg properties: KProperty<*>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Test Case in ShouldSpec (Kotlin)\nDESCRIPTION: This snippet shows how to configure a single test case in a ShouldSpec, setting the number of invocations and threads.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_case_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting ZonedDateTime Properties in Kotest\nDESCRIPTION: Methods for asserting properties of ZonedDateTime objects in Kotest, including checking for today's date and instant equality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nzonedDateTime.shouldBeToday()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nzonedDateTime.shouldHaveSameInstantAs(other: ZonedDateTime)\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Factory for IndexedSeq in Kotlin\nDESCRIPTION: This code creates a test factory function that generates tests for any IndexedSeq implementation. It uses the WordSpec style and includes tests for size increase and element containment.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_factories.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> indexedSeqTests(name: String, empty: IndexedSeq<T>) = wordSpec {\n   name should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Property-Based Composed Matcher in Kotlin\nDESCRIPTION: This snippet shows how to create a composed matcher that validates multiple properties of a complex object by combining individual property matchers using havingProperty.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/composed_matchers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun personMatcher(name: String, age: Int) = Matcher.all(\n  havingProperty(nameMatcher(name) to Person::name),\n  havingProperty(ageMatcher(age) to Person::age),\n  havingProperty(addressMatcher to Person::address)\n)\n```\n\n----------------------------------------\n\nTITLE: Asserting Instant Properties in Kotlin using Kotest\nDESCRIPTION: Demonstrates assertions for Instant objects in Kotest. Includes checks for time comparisons and proximity.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\ninstant.shouldBeBefore(anotherInstant)\ninstant.shouldBeBetween(fromInstant, toInstant)\ninstant.shouldBeCloseTo(anotherInstant, duration)\ninstant.shouldBe(otherTime plusOrMinus 1.minutes)\n```\n\n----------------------------------------\n\nTITLE: Until Function with Fixed Interval\nDESCRIPTION: Shows how to use the until function with a custom fixed interval of 250 milliseconds between checks, while maintaining a 5-second total duration limit.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/until.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 250.milliseconds.fixed()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Coverage Percentages in Kotest Property Tests\nDESCRIPTION: Shows how to use withCoveragePercentages to assert that certain percentages of specific values are generated in a Kotest property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/statistics.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoveragePercentages(mapOf(RoundingMode.HALF_DOWN to 10.0, RoundingMode.FLOOR to 10.0)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matchers with Kotest Assertion Functions\nDESCRIPTION: Shows how to use a custom matcher with Kotest's 'should' and 'shouldNot' infix functions to perform assertions on string length.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/custom.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should haveLength(9)\n\"hello bar\" shouldNot haveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Disabling Gradle's Default HTML Reports\nDESCRIPTION: This snippet demonstrates how to configure the Gradle test task to disable the default HTML and JUnit XML reports. It also sets a system property for the build directory that will be used by the HTML reporter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/html_reporter.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  useJUnitPlatform()\n  reports {\n    html.required.set(false)\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest with Counter Example in Kotlin\nDESCRIPTION: Shows how variables are reset in InstancePerTest mode using an atomic counter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/isolation_mode.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwable and Exception Assertions in Kotest\nDESCRIPTION: Methods for validating throwable properties including messages, causes, and type checking of exceptions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nthrowable.shouldHaveMessage(message)\nthrowable.shouldHaveCause()\nthrowable.shouldHaveCause { block }\nthrowable.shouldHaveCauseInstanceOf<T>()\nthrowable.shouldHaveCauseOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to Test Cases\nDESCRIPTION: Demonstrates how to mark individual test cases with tags using the config function\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/tags.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Assertions with withClue and asClue in Kotlin\nDESCRIPTION: Demonstrates how to use withClue and asClue helpers to add extra context to assertions, making test failures more informative. It includes examples for both single and multiple assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") { user.name shouldNotBe null }\n\ndata class HttpResponse(val status: Int, body: String)\nval response = HttpResponse(200, \"the content\")\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Lifecycle Callbacks in Kotest\nDESCRIPTION: This snippet shows how to create reusable lifecycle callbacks in Kotest. It demonstrates defining a named function for a 'beforeTest' callback that can be used across multiple test files, promoting code reuse and maintainability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/writing_tests.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval resetDatabase: BeforeTest = {\n  // truncate all tables here\n}\n\nclass ReusableCallbacks : FunSpec({\n\n   beforeTest(resetDatabase)\n\n   test(\"this test will have a sparkling clean database!\") {\n       // test logic here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Map Operations in Kotlin with Kotest\nDESCRIPTION: Various assertion methods for maps in Kotest, including checking for key-value pairs, content, and matching entries.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nmap.shouldContain(\"key\", \"value\")\nmap.shouldContainAll(other)\nmap.shouldContainExactly(other)\nmap.shouldContainKey(key)\nmap.shouldContainKeys(keys)\nmap.shouldContainValue(value)\nmap.shouldContainValues(values)\nmap.shouldBeEmpty()\nmap.shouldMatchAll(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\nmap.shouldMatchExactly(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\n```\n\n----------------------------------------\n\nTITLE: Basic Koin Usage in Kotest with FunSpec\nDESCRIPTION: Demonstrates basic integration of Koin with Kotest using FunSpec. The example shows how to initialize the KoinExtension with a module and inject a service into the test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/koin.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : FunSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(myKoinModule))\n\n    val userService by inject<UserService>()\n\n    init {\n        test(\"use userService\") {\n            userService.getUser().username shouldBe \"LeoColman\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Exception Details in Kotlin with Kotest\nDESCRIPTION: Shows how to capture and inspect the details of a thrown exception using Kotest. This snippet demonstrates catching an exception and asserting its message content.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/exceptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin for Kotest\nDESCRIPTION: Configures the Maven Surefire plugin for running Kotest tests with JUnit5 on the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Server Responses with Kotest Matchers\nDESCRIPTION: Example of using Kotest matchers with Ktor's server-side test support. This demonstrates how to verify HTTP response status, content, headers, and cookies in a Ktor application test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithTestApplication({ module(testing = true) }) {\n   handleRequest(HttpMethod.Get, \"/\").apply {\n      response shouldHaveStatus HttpStatusCode.OK\n      response shouldNotHaveContent \"failure\"\n      response.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n      response.shouldNotHaveCookie(name = \"Set-Cookie\", cookieValue = \"id=1234\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Kotest Arb Values\nDESCRIPTION: Shows how to create filtered arbitraries that generate a subset of values matching a condition, demonstrated with even and odd number generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genops.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\nval odds = Arb.int().filter { it.value % 2 == 1 }\n```\n\n----------------------------------------\n\nTITLE: Disabling a Spec with @Ignored Annotation in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the @Ignored annotation to completely disable a spec in Kotest. The spec will not be instantiated, avoiding any expensive setup or teardown.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/annotations.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Ignored\nclass IgnoredSpec : FunSpec() {\n  init {\n    error(\"boom\") // spec will not be created so this error will not happen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Basic Statistics in Kotest Property Tests\nDESCRIPTION: Demonstrates how to gather basic statistics on RoundingMode values in property tests using the collect function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/statistics.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n  collect(mode)\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Coverage Counts in Kotlin Property Tests\nDESCRIPTION: This snippet shows how to check coverage by absolute counts instead of percentages. It ensures that at least 75 inputs cover each of HALF_DOWN and FLOOR rounding modes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/statistics.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoverageCounts(mapOf(RoundingMode.HALF_DOWN to 75, RoundingMode.FLOOR to 75)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Continually with Custom Poll Interval in Kotest\nDESCRIPTION: Example demonstrating how to use the 'continually' function with a custom poll interval. This version specifies both the total duration (60 seconds) and a custom poll interval (5 seconds) between executions of the test block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/continually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds, 5.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Date Properties in Kotlin using Kotest\nDESCRIPTION: Demonstrates various assertions for checking properties of date objects in Kotest. Includes assertions for day of year, month, week, hour, minute, second, and nanosecond.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveDayOfYear(day)\ndate.shouldHaveDayOfMonth(day)\ndate.shouldHaveDayOfWeek(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\ndate.shouldHaveNano(nao)\ndate.shouldBe(value plusOrMinus(tolerance))\n```\n\n----------------------------------------\n\nTITLE: Full Kafka Test Example in Kotest\nDESCRIPTION: Provides a complete example of using a Kafka container in a Kotest FunSpec, including producing and consuming messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KafkaTestContainerExtensionTest : FunSpec() {\n  init {\n\n    val kafka = install(TestContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n      withEmbeddedZookeeper()\n    }\n\n    test(\"should send/receive message\") {\n\n      val producer = kafka.createStringStringProducer()\n      producer.send(ProducerRecord(\"foo\", null, \"bubble bobble\"))\n      producer.close()\n\n      val consumer = kafka.createStringStringConsumer {\n        this[ConsumerConfig.MAX_POLL_RECORDS_CONFIG] = 1\n      }\n\n      consumer.subscribe(listOf(\"foo\"))\n      val records = consumer.poll(Duration.ofSeconds(100))\n      records.shouldHaveSize(1)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting URI Properties in Kotest\nDESCRIPTION: This snippet shows assertion methods for URIs in Kotest. It covers checks for various URI components such as authority, fragment, host, and scheme.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveAuthority(fragment)\nuri.shouldHaveFragment(fragment)\nuri.shouldHaveHost(scheme)\nuri.shouldHaveParameter(scheme)\nuri.shouldHavePath(scheme)\nuri.shouldHavePort(scheme)\nuri.shouldHaveQuery(fragment)\nuri.shouldHaveScheme(scheme)\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallelism in Kotest (Kotlin)\nDESCRIPTION: Sets the parallelism level for concurrent spec execution in Kotest. This allows multiple specs to run simultaneously, taking advantage of multi-core processors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/project_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val parallelism = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Arbs in Kotest\nDESCRIPTION: Generates values by combining multiple Arbs and applying a function to their outputs. This allows for creating complex generators from simpler ones.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_25\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.bind(arbA, arbB, fn)\nArb.bind(arbA, arbB, arbC, fn)\nArb.bind(arbA, ...., fn)\n```\n\n----------------------------------------\n\nTITLE: Using forNone Inspector in Kotlin with Kotest\nDESCRIPTION: Example showing how to use the forNone inspector to verify that no elements in a collection satisfy the given conditions. This snippet tests that no string contains 'x' and no string starts with 'bb'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/inspectors.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Elements from Collections in Kotlin with Kotest\nDESCRIPTION: Demonstrates the use of Arb.element() to randomly select one element from a given collection or varargs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_25\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.element(collection)\nArb.element(vararg T)\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Arbs for Specific Types and Properties in Kotlin\nDESCRIPTION: This example shows how to use the builder API to provide custom Arbs for specific types and properties when doing reflective binding. It demonstrates binding Arbs to a User class with custom string and integer generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/reflective_arbs.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(\n  val name: String,\n  val password: String,\n  val age: Int,\n)\n\n// in some spec\ncontext(\"Some tests with an arbitrary user\") {\n  checkAll(Arb.bind<User> {\n    bind(User::name to Arb.string(1..10))\n    bind(User::password to Arb.string(24..80)) // binds a specific property to an arb\n    bind(Int::class to Arb.int(0..100))  // binds a type to an arb\n  }) { user ->\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Data Testing with Custom Test Names\nDESCRIPTION: Shows how to use nested data tests with custom test name formatting for the inner test cases. Uses a lambda to generate descriptive test names based on the HTTP method being tested.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/nested.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n    val services = listOf(\n       \"http://internal.foo\",\n       \"http://internal.bar\",\n       \"http://public.baz\",\n    )\n\n    val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n    withData(services) { service ->\n       withData<String>({ \"should support HTTP $it\" }, methods) { method ->\n          // test service against method\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Files in Kotest Tests\nDESCRIPTION: Demonstrates how to create and use temporary files in Kotest tests using the tempfile() function. The temporary file is automatically cleaned up by Kotest after all tests in the Spec are completed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tempfile.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val file = tempfile()\n\n   test(\"a temporary file dependent test\") {\n      //...\n   }\n})\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Test with Manual Seed in Kotlin\nDESCRIPTION: Demonstrates how to manually specify a seed value for property testing using PropTestConfig. This example tests string concatenation properties with a fixed seed value of 127305235.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/seed.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample : StringSpec({\n  \"String size\" {\n    forAll<String, String>(PropTestConfig(seed = 127305235)) { a, b ->\n      (a + b).length == a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling TestDispatcher for All Tests in a Spec\nDESCRIPTION: Shows how to configure TestDispatcher at the spec level to apply to all tests within that spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      coroutineTestScope = true\n      test(\"this test uses a test dispatcher\") {\n      }\n      test(\"and so does this test!\") {\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting ZonedDateTime Properties in Kotlin with Kotest\nDESCRIPTION: These assertions check properties of ZonedDateTime objects, including comparing with the current date and other ZonedDateTime instances. They allow for timezone-aware date and time comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nzonedDateTime.shouldBeToday()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nzonedDateTime.shouldHaveSameInstantAs(other: ZonedDateTime)\n```\n\n----------------------------------------\n\nTITLE: Creating Robolectric Test Specification in Kotest\nDESCRIPTION: Example of a Kotest test specification using Robolectric. Shows how to create a test class using ShouldSpec style with the @RobolectricTest annotation to enable Robolectric functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/roboelectric.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@RobolectricTest\nclass MyTest : ShouldSpec({\n    should(\"Access Robolectric normally!\") {\n\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JunitXmlReporter in Kotest Project Config (Kotlin)\nDESCRIPTION: This snippet shows how to add and configure the JunitXmlReporter in a Kotest project configuration. It demonstrates setting options for including containers, using test paths as names, and specifying the output directory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/junit_xml.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(\n    JunitXmlReporter(\n      includeContainers = false, // don't write out status for all tests\n      useTestPathAsName = true, // use the full test path (ie, includes parent test names)\n      outputDir = \"../target/junit-xml\" // include to set output dir for maven\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exhaustive Generator with Enum in Kotest\nDESCRIPTION: Demonstrates how to use an exhaustive generator with an enum class Season in a property test. The test will iterate through all enum values repeatedly to reach the specified number of iterations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/gens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Season { Winter, Fall, Spring, Summer }\n\nforAll<Int, Season>(100) { a, season -> ... }\n```\n\n----------------------------------------\n\nTITLE: Using Kotlin Compiler Matchers\nDESCRIPTION: Example test class demonstrating how to use shouldCompile() and shouldNotCompile() matchers with both string code snippets and files. Shows verification of both valid and invalid Kotlin code compilation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/compiler.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CompilationTest: StringSpec() {\n        init {\n            \"shouldCompile test\" {\n                val codeSnippet = \"\"\" val aString: String = \"A valid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldCompile()\n                File(\"SourceFile.kt\").shouldCompile()\n            }\n\n            \"shouldNotCompile test\" {\n                val codeSnippet = \"\"\" val aInteger: Int = \"A invalid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldNotCompile()\n                File(\"SourceFile.kt\").shouldNotCompile()\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Mockk Integration with Kotest FunSpec\nDESCRIPTION: Demonstrates basic usage of mockk library with Kotest's FunSpec for mocking repository interactions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/integrations/mocks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Test Configuration in Kotest\nDESCRIPTION: Illustrates how to configure test execution parameters including timeout, invocations, threads, and tags using the config block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n   \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency with Gradle for JVM\nDESCRIPTION: Gradle dependency configuration for including the Kotest property-based testing library in a JVM project. This adds the necessary dependency to use property testing features in your test code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n   testImplementation(\"io.kotest:kotest-property:$version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tests with AnnotationSpec in Kotest\nDESCRIPTION: Shows how to create JUnit-style tests in Kotest using AnnotationSpec. This example demonstrates test methods with lifecycle hooks using annotations similar to JUnit.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n    @BeforeEach\n    fun beforeTest() {\n        println(\"Before each test\")\n    }\n\n    @Test\n    fun test1() {\n        1 shouldBe 1\n    }\n\n    @Test\n    fun test2() {\n        3 shouldBe 3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocalDate Matchers in Kotest with Kotlinx Datetime\nDESCRIPTION: Matchers for LocalDate objects that verify properties like year, month, day, and relative positioning compared to other dates. These extensions enable fluent assertions for date-related testing scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameMonthAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameDayAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeBefore(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeAfter(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeWithin(period, otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeWithin(duration, otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeBetween(firstDate, secondDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveYear(year)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveMonth(month)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfYear(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfMonth(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfWeek(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveHour(hour)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveMinute(Minute)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSecond(second)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveNano(nano)\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tests in Kotest DescribeSpec\nDESCRIPTION: Example showing how to structure nested tests using Kotest's DescribeSpec style, demonstrating a typical test hierarchy with describe and it blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/output.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: DescribeSpec({\n  describe(\"describe 1\"){\n    it(\"test 1\"){}\n    it(\"test 2\"){}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: BDD Style Testing in Kotest\nDESCRIPTION: Shows Kotest's flexible test layout styles including BDD-style given/when/then blocks and JavaScript-like describe/it blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/why.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"my test\" should \"do foo\"\ndescribe(\"test\") { it(\"should do something\") {} }\ngiven { when { then {} } }\n```\n\n----------------------------------------\n\nTITLE: Asserting Range Intersection in Kotlin\nDESCRIPTION: These matchers check whether two ranges intersect or not. They work with both ClosedRange and OpenEndRange types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/ranges.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nrange.shouldIntersect(range)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nrange.shouldNotIntersect(range)\n```\n\n----------------------------------------\n\nTITLE: WithClue Error Output\nDESCRIPTION: Example of the improved error output when using withClue, showing how the clue message precedes the standard error message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nName should be present\n<null> should not equal <null>\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Tests with PropTestConfig in Kotlin\nDESCRIPTION: This snippet demonstrates how to use PropTestConfig to set options for a property test in Kotest. It shows the basic structure of passing PropTestConfig to a forAll test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String>(PropTestConfig(options here...)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using shouldEqualSpecifiedJson in Kotest\nDESCRIPTION: Demonstrates the usage of shouldEqualSpecifiedJson, which is similar to shouldEqualJson but with FieldComparison set to Lenient by default. This allows comparison of JSON structures with extra fields in the actual JSON.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/json/content.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = \"\"\" { \"a\": true, \"date\": \"2019-11-03\" } \"\"\"\nval b = \"\"\" { \"a\": true } \"\"\"\n\n// this would pass\na shouldEqualSpecifiedJson b\n\n// this would fail\na shouldEqualJson b\n```\n\n----------------------------------------\n\nTITLE: Using Log Methods in Kotest Tests\nDESCRIPTION: Demonstrates how to use logging functions within a Kotest test. The warn function accepts a lambda that is only executed when the configured logging level is set appropriately.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/logging.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something\") {\n  warn { \"something weird happened\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest System Extensions Dependency\nDESCRIPTION: Maven dependency configuration for adding the Kotest Extensions JVM module to a project, which contains all the system testing utilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest:kotest-extensions-jvm:${version}\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Tests in FunSpec\nDESCRIPTION: Shows how to add tags to a test case using FunSpec style. Tags can be used for test grouping and filtering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_case_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Assertions in Kotest\nDESCRIPTION: Assertions for checking object types, instances, and annotations in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nobj.shouldBeSameInstanceAs(other)\nobj.shouldBeTypeOf<T>()\nobj.shouldBeInstanceOf<T>()\nobj.shouldHaveAnnotation(annotationClass)\nobj.shouldBeNull()\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Tests with DescribeSpec in Kotest\nDESCRIPTION: Shows how to create nested tests using Kotest's DescribeSpec style, where outer tests are defined with 'describe' blocks and inner tests with 'it' blocks, similar to JavaScript and Ruby testing frameworks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/writing_tests.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NestedTestExamples : DescribeSpec({\n\n   describe(\"an outer test\") {\n\n      it(\"an inner test\") {\n        1 + 2 shouldBe 3\n      }\n\n      it(\"an inner test too!\") {\n        3 + 4 shouldBe 7\n      }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode Using DSL in Kotlin\nDESCRIPTION: This snippet demonstrates how to set the isolation mode using the DSL approach in a Kotest spec class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/isolation_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec({\n isolationMode = IsolationMode.SingleInstance\n // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Testcontainers with Kotest\nDESCRIPTION: Shows how to use the kotest-extensions-testcontainers module to integrate Testcontainers into Kotest tests, with options for per-test and per-spec container lifecycle management.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.1.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perTest())\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perSpec())\n```\n\n----------------------------------------\n\nTITLE: DateTime Assertions in Kotest\nDESCRIPTION: Methods for asserting OffsetDateTime, Time, and Instant values. Includes comparisons for equality, relative positioning, and component matching.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\noffsetDateTime.shouldBeToday()\noffsetDateTime.shouldHaveSameInstantAs(other)\n\ntime.shouldHaveSameHoursAs(otherTime)\ntime.shouldHaveSameMinutesAs(otherTime)\ntime.shouldHaveSameSecondsAs(otherTime)\ntime.shouldHaveSameNanosAs(otherTime)\ntime.shouldBeBefore(otherTime)\ntime.shouldBeAfter(otherTime)\ntime.shouldBeBetween(firstTime, secondTime)\n\ninstant.shouldBeAfter(anotherInstant)\ninstant.shouldBeBefore(anotherInstant)\ninstant.shouldBeBetween(fromInstant, toInstant)\ninstant.shouldBeCloseTo(anotherInstant, duration)\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Against Schema in Kotest\nDESCRIPTION: Shows how to validate JSON strings against defined schemas using Kotest's shouldMatchSchema matcher. The example demonstrates validation cases including both successful validation and expected validation failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/json/schema.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n\"{\\\"name\\\": \\\"Emil\\\", \\\"age\\\": 34 }\" shouldMatchSchema personSchema\n\n// fails with:\n// $.name => Expected string, but was undefined\n\n\"\"\" { \"name\": \"Emil\", \"age\": 34 } \"\"\"\n// Passes, since address isn't required and `additionalProperties` are allowed\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions in KotlinTest\nDESCRIPTION: Shows how to use soft assertions to perform multiple checks without stopping at the first failure. All failures are reported at the end of the block.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Output with Nested Clues\nDESCRIPTION: The error output when using nested clues, showing the hierarchy of context information along with the assertion details.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nVerifying user_id=42\nemail_confirmed should be false since we've just created the user\n<true> should equal <false>\n```\n\n----------------------------------------\n\nTITLE: Implementing checkAll Property Test in Kotlin with Kotest\nDESCRIPTION: Example of using the checkAll function to test the same string concatenation property using assertions instead of boolean returns. The test passes if no exceptions are thrown during execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/test_functions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      checkAll<String, String> { a, b ->\n         a + b shouldHaveLength a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Callback Functions in Kotest Spec\nDESCRIPTION: This snippet illustrates how to override callback functions directly in a Kotest Spec class. It overrides the beforeTest function to perform setup operations before each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/lifecycle_hooks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec() {\n    override fun beforeTest(testCase: TestCase) {\n        println(\"Starting a test $testCase\")\n    }\n\n    init {\n        \"this test\" should {\n            \"be alive\" {\n                println(\"Johnny5 is alive!\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Predicates with Eventually for Result Validation\nDESCRIPTION: An example demonstrating how to use a predicate with the 'eventually' function to verify the result of an operation. The test will continue retrying until the predicate condition is met or the timeout is reached.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"check that predicate eventually succeeds in time\" {\n    var i = 0\n    eventually<Int>(25.seconds, predicate = { it == 5 }) {\n      delay(1.seconds)\n      i++\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Table-Driven Testing with Kotest in Kotlin\nDESCRIPTION: This snippet shows how to use table-driven testing in Kotest. It demonstrates the use of forAll function with row objects to test square root calculations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forall(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Property Comparison Matchers\nDESCRIPTION: Assertion functions for comparing objects by including or excluding specific properties during equality checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToUsingFields(other: T, vararg properties: KProperty<*>)\nany.shouldBeEqualToIgnoringFields(other: T, vararg properties: KProperty<*>)\n```\n\n----------------------------------------\n\nTITLE: Using inline assume syntax for input filtering in Kotest\nDESCRIPTION: Shows the alternative inline syntax for assumptions which accomplishes the same filtering as withAssumptions but with more concise code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/assumptions.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume(a != b)\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using withClue with a Lambda Function for Dynamic Values\nDESCRIPTION: Using a lambda function with withClue to include dynamic values in the error message. This is computed only when the test fails, making it efficient for expensive operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue({ \"Name should be present (user_id=${user.id})\" }) {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Arbitraries to Create Value Subsets\nDESCRIPTION: Shows how to use the filter method on an Arb to create new generators that yield only values matching a predicate, such as generating even or odd numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genops.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\nval odds = Arb.int().filter { it.value % 2 == 1 }\n```\n\n----------------------------------------\n\nTITLE: Individual Row Testing with FreeSpec\nDESCRIPTION: Advanced example showing how to create individual tests for each row of data using FreeSpec, demonstrating arithmetic operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Chaining Matchers in Kotlin with Kotest\nDESCRIPTION: Shows how to chain multiple matchers in Kotest for more complex assertions. This example demonstrates string and file-related matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n           .shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n           .shouldStartWith(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Spec Level Extensions in Kotlin\nDESCRIPTION: Example showing how to create and register a test listener that implements BeforeSpecListener and AfterSpecListener interfaces. The listener handles setup and teardown operations for Kafka before and after spec execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/extensions/extensions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestListener : BeforeSpecListener, AfterSpecListener {\n   override suspend fun beforeSpec(spec:Spec) {\n      // power up kafka\n   }\n   override suspend fun afterSpec(spec: Spec) {\n      // shutdown kafka\n   }\n}\n\n\nclass TestSpec : WordSpec({\n    extension(MyTestListener())\n    // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Test Block in Kotlin using Kotest\nDESCRIPTION: Demonstrates how to use the retry function in a Kotest test specification to attempt a block of code up to a maximum number of times with a specified timeout period. The example shows a test that will retry up to 4 times within a 10-minute timeout window.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/retry.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"retry up to 4 times\") {\n      retry(4, 10.minutes) {\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher Extension Functions in Kotlin\nDESCRIPTION: This code shows how to use the custom extension functions for more concise and readable assertions on string length.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/custom.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\".shouldHaveLength(9)\n\"hello bar\".shouldNotHaveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Using Matchers as Extension Functions\nDESCRIPTION: Demonstrates the new extension function style for KotlinTest matchers introduced in 3.1.x, which provides better IDE discovery and a more fluent syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldExist()\n\nor\n\nlistOf(1, 2).shouldContainNull()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Value from Arbitrary Generator in Kotlin\nDESCRIPTION: Demonstrates how to use the 'next' operation on an Arb to retrieve the next generated value, either using the default random generator or a specified one.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genops.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval arbA: Arb<A> = ...\nval a = arbA.next() // use Random.Default\nval a2 = arbA.next(rs) // pass in Random\n```\n\n----------------------------------------\n\nTITLE: Property Testing Examples in KotlinTest\nDESCRIPTION: Shows both boolean-based and matcher-based property testing approaches\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  forAll(Gen.string(), Gen.string(), { a, b ->\n    (a + b).startsWith(a)\n  })\n}\n\n\"startsWith\" {\n  assertAll(Gen.string(), Gen.string(), { a, b ->\n    a + b should startWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Test Factory in Kotest\nDESCRIPTION: Implementation of a reusable test factory function that generates tests for any IndexedSeq implementation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_factories.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> indexedSeqTests(name: String, empty: IndexedSeq<T>) = wordSpec {\n   name should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Syntax for Assertions in Assumptions in Kotest Property Testing (Kotlin)\nDESCRIPTION: Demonstrates the inline syntax for using assertions within assumptions in Kotest property testing, providing a more concise way to express complex assumptions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/assumptions.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume {\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Long Arrays in Kotlin with Kotest\nDESCRIPTION: Creates an Arb that produces LongArrays with specified length and content generators. Useful for testing functions that operate on long arrays with varying sizes and values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.longArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry in Kotest Tests\nDESCRIPTION: This snippet demonstrates how to use the retry function in a Kotest test. It shows a test that will retry a block of code up to 4 times within a 10-minute timeout period.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/retry.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"retry up to 4 times\") {\n      retry(4, 10.minutes) {\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing for Specific Exceptions in Kotlin using Kotest\nDESCRIPTION: This snippet demonstrates how to use the shouldThrow function to test if a specific exception is thrown. It expects an IllegalAccessException to be thrown by the code block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Arbitraries in Kotlin with Kotest\nDESCRIPTION: Demonstrates the use of Arb.bind() to generate values by combining multiple arbitraries and applying a function to their generated values. Available for 2, 3, or more arbitraries.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.bind(arbA, arbB, fn)\nArb.bind(arbA, arbB, arbC, fn)\nArb.bind(arbA, ...., fn)\n```\n\n----------------------------------------\n\nTITLE: Testing for Exact Exception Types in Kotlin using Kotest\nDESCRIPTION: This snippet demonstrates the use of shouldThrowExactly to test for a specific exception type. It will catch a FileNotFoundException but not its superclass IOException.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/exceptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowExactly<FileNotFoundException> {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TestClock in Kotlin\nDESCRIPTION: Creates an instance of TestClock with a specific timestamp and zone offset. This allows for controlled time manipulation in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/clock.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval timestamp = Instant.ofEpochMilli(1234)\nval clock = TestClock(timestamp, ZoneOffset.UTC)\n```\n\n----------------------------------------\n\nTITLE: Numeric Type Generation in Kotest\nDESCRIPTION: Generator functions for producing various numeric types including bytes, shorts, ints, longs, floats, and doubles, with support for arrays and unsigned variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genslist.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.int(min, max)\nArb.long(min, max)\nArb.float(min, max)\nArb.double(min, max)\nArb.byte(min, max)\nArb.short(min, max)\n```\n\n----------------------------------------\n\nTITLE: Using Inline Assume Syntax\nDESCRIPTION: Alternative inline syntax for assumptions using assume function\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/assumptions.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume(a != b)\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging at Test Level in Kotest\nDESCRIPTION: Demonstrates how to enable coroutine debugging for a specific test using the config parameter coroutineDebugProbes. When enabled, a coroutine dump will be generated after the test completes or when an exception occurs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineDebugProbes = true) {\n         someMethodThatLaunchesACoroutine() // launches a new coroutine\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Assertions in Kotest\nDESCRIPTION: Methods for asserting Kotlin Channel properties including receive operations, size checks, and channel state verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldReceiveWithin(duration)\nchannel.shouldReceiveNoElementsWithin(duration)\nchannel.shouldHaveSize(n)\nchannel.shouldReceiveAtLeast(n)\nchannel.shouldReceiveAtMost(n)\nchannel.shouldBeClosed()\nchannel.shouldBeOpen()\nchannel.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Invocations and Threads in ShouldSpec (Kotlin)\nDESCRIPTION: Example of configuring a test case with multiple invocations and parallel execution in Kotest's ShouldSpec style. This snippet shows how to run a test 10 times using 2 parallel threads.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_case_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Custom Arbitrary for a Class in Kotlin\nDESCRIPTION: Shows how to create an arbitrary for a custom data class by composing other arbitraries using the bind() function within the arbitrary builder.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/customgens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb = arbitrary {\n   val name = Arb.string(10..12).bind()\n   val age = Arb.int(21, 150).bind()\n   Person(name, age)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WordSpec Style in Kotest\nDESCRIPTION: WordSpec uses 'should' and 'When' keywords to create a readable, nested structure for tests. It allows for natural language expressions to describe test behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"String.length\" should {\n        \"return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"Hello\" When {\n        \"asked for length\" should {\n            \"return 5\" {\n                \"Hello\".length shouldBe 5\n            }\n        }\n        \"appended to Bob\" should {\n            \"return Hello Bob\" {\n                \"Hello \" + \"Bob\" shouldBe \"Hello Bob\"\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: SingleInstance Mode Example in Kotest\nDESCRIPTION: Demonstrates the SingleInstance isolation mode behavior where the same instance of the spec class is used for all tests. The example shows how a UUID remains the same across all test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/isolation_mode.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SingleInstanceExample : WordSpec({\n   val id = UUID.randomUUID()\n   \"a\" should {\n      println(id)\n      \"b\" {\n         println(id)\n      }\n      \"c\" {\n         println(id)\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Future Properties in Kotlin using Kotest\nDESCRIPTION: Shows assertions for Future objects in Kotest. Includes checks for cancellation, completion, and exceptional completion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nfuture.shouldBeCancelled()\nfuture.shouldBeCompleted()\nfuture.shouldBeCompletedExceptionally()\nfuture.shouldCompleteExceptionallyWith(throwable)\n```\n\n----------------------------------------\n\nTITLE: BigDecimal Assertions in Kotest\nDESCRIPTION: Assertion methods for BigDecimal values including precision, scale, comparisons, and range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldHavePrecision(n)\nbigDecimal.shouldHaveScale(n)\nbigDecimal.shouldBePositive()\nbigDecimal.shouldBeNegative()\nbigDecimal.shouldBeZero()\nbigDecimal.shouldBeLessThan(n)\nbigDecimal.shouldBeLessThanOrEquals(n)\nbigDecimal.shouldBeGreaterThan(n)\nbigDecimal.shouldBeGreaterThanOrEquals(n)\nbigDecimal.shouldBeInRange(r)\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Test Callbacks in Kotest DescribeSpec\nDESCRIPTION: Demonstrates the usage of new callback functions (beforeEach, beforeContainer, beforeTest) in a DescribeSpec test class to handle different test scope levels.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.2.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CallbacksTest : DescribeSpec({\n\n   beforeEach {\n      println(\"Test: \" + it.displayName)\n   }\n\n   beforeContainer {\n      println(\"Container: \" + it.displayName)\n   }\n\n   beforeTest {\n      println(\"All: \" + it.displayName)\n   }\n\n   describe(\"I am a container scope\") {\n      it(\"And I am a test scope\") { }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Specific Matchers in Jsoup KotlinTest\nDESCRIPTION: Specialized matchers for HTML-specific attributes and relationships including id, class, src, and href verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/jsoup.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveId(id)\nelement.shouldHaveClass(class)\nelement.shouldHaveSrc(src)\nelement.shouldHaveHref(href)\nelement.shouldHaveElementWithId(id)\nelement.shouldHaveChildWithClass(id)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Function for Test Names in Kotest\nDESCRIPTION: This example shows how to use a custom function to generate test names in Kotest's data-driven tests. The function takes the test data as input and returns a string to be used as the test name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/test_names.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData<PythagTriple>(\n    nameFn = { \"${it.a}__${it.b}__${it.c}\" },\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Property Test for String Levenshtein Distance (Kotlin)\nDESCRIPTION: Shows a basic property test checking that two non-equal strings have a non-zero Levenshtein distance. This test may fail for equal strings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/assumptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON comparison options inline\nDESCRIPTION: Example of using the compareJsonOptions parameter to configure the behavior of JSON comparison, specifically setting array order to strict.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/json/content.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldEqualJson(b, compareJsonOptions { arrayOrder = ArrayOrder.Strict })\n```\n\n----------------------------------------\n\nTITLE: Data-driven Testing with Kotest in Kotlin\nDESCRIPTION: Shows how to perform data-driven testing in Kotest using the forAll function. The example tests the maximum of two numbers with multiple input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/index.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"maximum of two numbers\" {\n    forAll(\n        row(1, 5, 5),\n        row(1, 0, 1),\n        row(0, 0, 0)\n    ) { a, b, max ->\n      Math.max(a, b) shouldBe max\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Eventually in Kotlin\nDESCRIPTION: Shows how to limit the number of retries and set a maximum duration for the eventually function to bound test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/eventually.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  initialDelay = 8.seconds\n  retries = 10\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Integer Assertions in Kotlin\nDESCRIPTION: Numeric validation matchers specifically for integers, including range checks and even/odd validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nint.shouldBeBetween(x, y)\nint.shouldBeLessThan(n)\nint.shouldBeLessThanOrEqual(n)\nint.shouldBeGreaterThan(n)\nint.shouldBeGreaterThanOrEqual(n)\nint.shouldBeEven()\nint.shouldBeOdd()\nint.shouldBeInRange(range)\nint.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Installing JDBC TestContainer Extension\nDESCRIPTION: Example of installing a JDBC TestContainer extension with custom pool configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcTestContainerExtension(mysql)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Comparable Assertions in Kotest\nDESCRIPTION: Assertions for comparing objects using the Comparable interface in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ncomp.shouldBeLessThan(other)\ncomp.shouldBeLessThanOrEqualTo(other)\ncomp.shouldBeEqualComparingTo(other)\ncomp.shouldBeEqualComparingTo(other, comparator)\ncomp.shouldBeGreaterThan(other)\ncomp.shouldBeGreaterThanOrEqualTo(other)\n```\n\n----------------------------------------\n\nTITLE: Comparing Equal JSON Structures in Kotest\nDESCRIPTION: Demonstrates how shouldEqualJson matcher compares two JSON structures, allowing for different formatting and key order. The example shows two JSON objects considered equal despite differences in formatting and key order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/json/content.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"sam\",\n   \"location\": \"chicago\",\n   \"age\" : 41\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\" : 41, \"name\": \"sam\", \"location\": \"chicago\" }\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Validation Matchers\nDESCRIPTION: Core matchers for validating JSON strings including shouldBeValidJson for general JSON validation, shouldBeJsonObject for object validation, and shouldBeJsonArray for array validation. All these matchers are available for multiplatform projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/overview.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldBeValidJson\nshoulBeJsonObject\nshoulBeJsonArray\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Tests in Kotlin with KotlinTest\nDESCRIPTION: Example of using table tests in KotlinTest to manually specify combinations of values for testing. Tables provide headers for values and allow running tests against each row of input data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TableExample : StringSpec(), TableTesting {\n  init {\n    \"numbers should be prime\" {\n      val table = table(\n          headers(\"a\", \"b\"),\n          row(5, 5),\n          row(4, 6),\n          row(3, 7)\n      )\n      forAll(table) { a, b ->\n        a + b == 10\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Locale and Timezone Listeners\nDESCRIPTION: Setting up LocaleTestListener and TimeZoneTestListener to override the default locale and timezone for tests in a specification or project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(\n  LocaleTestListener(Locale.FRANCE),\n  TimeZoneTestListener(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\")))\n)\n```\n\n----------------------------------------\n\nTITLE: Using DescribeSpec in Kotlin with Kotest\nDESCRIPTION: Shows how to use DescribeSpec style in Kotest, which uses 'describe' and 'it' keywords. It demonstrates nested describe blocks and how to disable tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"score\") {\n        it(\"start as zero\") {\n            // test here\n        }\n        describe(\"with a strike\") {\n            it(\"adds ten\") {\n                // test here\n            }\n            it(\"carries strike to the next frame\") {\n                // test here\n            }\n        }\n\n        describe(\"for the opposite team\") {\n            it(\"Should negate one score\") {\n                // test here\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"this outer block is enabled\") {\n        xit(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xdescribe(\"this block is disabled\") {\n        it(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Collection Inspector Usage in Kotlin\nDESCRIPTION: Demonstrates using Kotest's inspector functions to verify conditions across collection elements, specifically checking exactly 3 elements match a condition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nmylist.forExactly(3) {\n    it.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Eventually Usage in Kotlin Tests\nDESCRIPTION: Demonstrates basic usage of the eventually function to test asynchronous operations, waiting for a repository to contain data after sending a message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"check if user repository has one row after message is sent\") {\n      sendMessage()\n      eventually(5.seconds) {\n        userRepository.size() shouldBe 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest-Allure Extension Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Kotest-Allure extension dependency to a Gradle build file. It's necessary for integrating Allure reporting with Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/allure.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-allure:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Test Function Type in Kotlin\nDESCRIPTION: Shows the fundamental test function type in Kotest, which is a function that takes a TestContext and returns Unit. This forms the basic building block of all Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/dsl.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nTestContext -> Unit\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Arbs in Kotlin\nDESCRIPTION: Demonstrates the use of 'bind' operation to apply multiple arbitraries, using the construction of a data class as an example.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genops.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb: Arb<Person> = Arb.bind(\n   Arb.string(),\n   Arb.int()\n) { name, age -> Person(name, age) }\n```\n\n----------------------------------------\n\nTITLE: Overriding Spec Callback Functions\nDESCRIPTION: Demonstrates how to implement lifecycle hooks by overriding callback functions directly in a Spec class instead of using DSL methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/lifecycle_hooks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec() {\n    override suspend fun beforeTest(testCase: TestCase) {\n        println(\"Starting a test $testCase\")\n    }\n\n    init {\n        \"this test\" should {\n            \"be alive\" {\n                println(\"Johnny5 is alive!\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Double Values in Kotest\nDESCRIPTION: This snippet demonstrates various assertion methods for Double values in Kotest. It includes comparisons, sign checks, and special value assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBeLessThanOrEqual(n)\ndouble.shouldBeGreaterThan(n)\ndouble.shouldBeGreaterThanOrEqual(n)\ndouble.shouldBePositive()\ndouble.shouldBeNegative()\ndouble.shouldBePositiveInfinity()\ndouble.shouldBeNegativeInfinity()\ndouble.shouldBeNaN()\ndouble.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging Per Test in Kotest\nDESCRIPTION: Example showing how to enable coroutine debugging for a single test using coroutineDebugProbes configuration option. When enabled, it provides a coroutine dump after test completion or on exception.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineDebugProbes = true) {\n         someMethodThatLaunchesACoroutine() // launches a new coroutine\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Timeout in Kotest FunSpec\nDESCRIPTION: Demonstrates how to set a timeout that applies to all tests within a spec file\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   timeout = 100.milliseconds\n\n   test(\"this test will timeout quickly!\") {\n      // test here\n   }\n\n   test(\"so will this one!\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Option Types in Kotlin with Kotest Arrow Matchers\nDESCRIPTION: These matchers allow asserting the state and value of Option types. They can check if an Option is Some or None, and verify the contained value if it's Some.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\noption.shouldBeSome()\noption.shouldBeSome(v)\noption.shouldBeNone()\n```\n\n----------------------------------------\n\nTITLE: Asserting Concurrent Operations in Kotlin with Kotest\nDESCRIPTION: Functions to test the timing behavior of operations, ensuring they complete within specified time limits or timeout as expected.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldCompleteWithin(timeout, unit, function)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldTimeout(timeout, unit, function)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldTimeout(duration, suspendableFunction)\n```\n\n----------------------------------------\n\nTITLE: Complete Database Integration Test Example\nDESCRIPTION: Full example showing how to use TestContainers with a database in a Kotest test spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass QueryDatastoreTest : FunSpec({\n\n  val mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n    startupAttempts = 1\n    withUrlParam(\"connectionTimeZone\", \"Z\")\n    withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n  }\n\n  val ds = install(JdbcDatabaseContainerExtension(mysql)) {\n    poolName = \"myconnectionpool\"\n    maximumPoolSize = 8\n    idleTimeout = 10000\n  }\n\n  val datastore = PersonDatastore(ds)\n\n  test(\"insert happy path\") {\n\n    datastore.insert(Person(\"sam\", \"Chicago\"))\n    datastore.insert(Person(\"jim\", \"Seattle\"))\n\n    datastore.findAll().shouldBe(listOf(\n      Person(\"sam\", \"Chicago\"),\n      Person(\"jim\", \"Seattle\"),\n    ))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Labeled Statistics for Orthogonal Categories\nDESCRIPTION: Demonstrates how to use labeled statistics to track multiple orthogonal category sets simultaneously, providing more organized output for complex tracking needs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/statistics.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"even_odd\", \"EVEN\")\n    else -> collect(\"even_odd\", \"ODD\")\n  }\n  when {\n    k > 0 -> collect(\"pos_neg\", \"POS\")\n    else -> collect(\"pos_neg\", \"NEG\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution in Kotest\nDESCRIPTION: Illustrates how to configure test execution parameters such as timeout, invocations, threads, and tags for individual tests using the config function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n   \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Resource Matchers for ByteArrays in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to compare byte arrays with resource file content. These matchers verify that byte arrays match or don't match the content of binary resource files, with options for custom matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray shouldMatchResource \"/path/to/test_resource.bin\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray shouldNotMatchResource \"/path/to/test_resource.bin\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray.shouldMatchResource(\"/path/to/test_resource.bin\", ::providedMatcher)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray.shouldNotMatchResource(\"/path/to/test_resource.bin\", ::providedMatcher)\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Generator with Default Shrinking in Kotest\nDESCRIPTION: Demonstrates how to use a built-in generator (positiveInt) with default shrinking behavior in a property-based test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/shrinking.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Using enabledIf for Dynamic Test Enabling in Kotest\nDESCRIPTION: Demonstrates using the enabledIf function to dynamically enable or disable tests at runtime based on test properties and external conditions. The example disables tests starting with \"danger\" when executed on Fridays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/config_enabled.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: EnabledIf = { !(it.name.testName.startsWith(\"danger\") && isFriday()) }\n\n\"danger Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Composed Matcher with Matcher.any in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a composed matcher using the logical OR operation (Matcher.any), where the matcher will pass if any of the component matchers pass.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/composed_matchers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval passwordMatcher = Matcher.any(\n   containADigit(), contain(Regex(\"[a-z]\")), contain(Regex(\"[A-Z]\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shrinking for User-Defined Types in Kotlin\nDESCRIPTION: Complete example demonstrating how to create a custom Shrinker implementation for a Coordinate data class. The shrinking strategy returns the four neighboring coordinates when attempting to simplify a failing test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/shrinking.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Coordinate(val x: Int, val y: Int)\n\nclass CoordinateTest : FunSpec({\n    context(\"Coordinate Transformations\") {\n        // Shrinker takes the four neighbouring coordinates\n        val coordinateShrinker = Shrinker<Coordinate> { c ->\n            listOf(\n                Coordinate(c.x - 1, c.y),\n                Coordinate(c.x, c.y - 1),\n                Coordinate(c.x + 1, c.y),\n                Coordinate(c.x, c.y + 1),\n            )\n        }\n        val coordinateArb = arbitrary(coordinateShrinker) {\n            Coordinate(Arb.nonNegativeInt().bind(), Arb.nonNegativeInt().bind())\n        }\n\n        test(\"Coordinates are always positive after transformation\") {\n            coordinateArb.checkAll {\n                transform(it).x shouldBeGreaterThanOrEqualTo 0\n                transform(it).y shouldBeGreaterThanOrEqualTo 0\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing WithDataTestName Interface for Custom Test Names in Kotest (Kotlin)\nDESCRIPTION: This snippet demonstrates how to implement the WithDataTestName interface to provide custom test names in Kotest. The dataTestName() function is overridden to return a custom string for each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/test_names.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int) : WithDataTestName {\n  override fun dataTestName() = \"wibble $a, $b, $c wobble\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Eventually Configuration in Kotlin Tests\nDESCRIPTION: Shows how to share and customize 'eventually' configuration across different test suites using EventuallyConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/concurrency/eventually.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = EventuallyConfig<ServerResponse>(\n  duration = 5.minutes,\n  interval = 25.milliseconds.fibonacci(),\n  suppressExceptions = setOf(ServerException::class)\n)\n\nclass FooTests : StringSpec({\n  val logger = logger(\"FooTests\")\n  val fSlow = slow.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") })\n\n  \"server eventually provides a result for /foo\" {\n    eventually(fSlow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : StringSpec({\n  val logger = logger(\"BarTests\")\n  val bFast = fast.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") })\n\n  \"server eventually provides a result for /bar\" {\n    eventually(bFast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Blocking Tests in Kotest\nDESCRIPTION: This example demonstrates how to configure tests in Kotest to handle both blocking and non-blocking operations with timeouts. The first test uses a blocking operation with Thread.sleep() and requires the blockingTest flag, while the second uses a suspendable delay() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/timeouts/blocking_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyBlockingTest : FunSpec() {\n  init {\n\n    test(\"interrupt me!\").config(blockingTest = true, timeout = 10.seconds) {\n       Thread.sleep(100000000)\n    }\n\n    test(\"uses suspension\").config(timeout = 10.seconds) {\n      delay(100000000)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Test Options for Kotest\nDESCRIPTION: Configures Android test options to use the JUnit Platform for running Kotest tests in Android projects. This setup enables unit and integration tests in the src/test folder.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      useJUnitPlatform()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Kafka Producer and Consumer Test\nDESCRIPTION: Demonstrates how to create and use string-based Kafka producers and consumers with the embedded Kafka listener, including sending and receiving messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/kafka.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n\n   test(\"send / receive\") {\n\n     val producer = embeddedKafkaListener.stringStringProducer()\n     producer.send(ProducerRecord(\"foo\", \"a\"))\n     producer.close()\n\n     val consumer = embeddedKafkaListener.stringStringConsumer(\"foo\")\n     eventually(10.seconds) {\n       consumer.poll(1000).first().value() shouldBe \"a\"\n     }\n     consumer.close()\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Nesting Tests with Context Blocks in ExpectSpec\nDESCRIPTION: Demonstrates how to organize tests into nested context blocks in ExpectSpec. This allows for grouping related tests under descriptive contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"a calculator\") {\n        expect(\"simple addition\") {\n            // test here\n        }\n        expect(\"integer overflow\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Spring Extension Globally in Kotest\nDESCRIPTION: Shows how to register the SpringExtension globally in the project configuration for all test classes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/spring.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Name Whitespace Removal in Kotest (Kotlin)\nDESCRIPTION: Enables the removal of excess whitespace from multi-line test names. This improves readability in test output by trimming and normalizing test names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/project_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val testNameRemoveWhitespace = true\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SpringExtension Globally in Kotest Project Config\nDESCRIPTION: Shows how to register the SpringExtension globally in the Kotest project configuration to enable Spring support for all test classes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/spring.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Value Assertions\nDESCRIPTION: Methods for verifying Optional object states including presence and emptiness checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\noptional.shouldBePresent()\noptional.shouldBePresent { value -> .. }\noptional.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Manipulating Time with TestDispatcher in Kotest\nDESCRIPTION: Demonstrates how to use testCoroutineScheduler to control virtual time in coroutine tests, including advancing time and checking current time\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.test.testCoroutineScheduler\n\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"advance time\").config(coroutineTestScope = true) {\n        val duration = 1.days\n        // launch a coroutine that would normally sleep for 1 day\n        launch {\n          delay(duration.inWholeMilliseconds)\n        }\n        // move the clock on and the delay in the above coroutine will finish immediately.\n        testCoroutineScheduler.advanceTimeBy(duration.inWholeMilliseconds)\n        val currentTime = testCoroutineScheduler.currentTime\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating TestContainers with Kotest Using perTest Extension\nDESCRIPTION: This example demonstrates how to convert a TestContainers GenericContainer into a Kotest TestListener using the perTest() extension method. The container will start before each test and stop after each test completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoClose in Kotest StringSpec\nDESCRIPTION: Shows how to use the autoClose function to automatically close a StringReader resource after tests complete. The resource must implement java.lang.AutoCloseable interface. Resources are closed in reverse order of declaration after the last spec interceptor returns.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/autoclose.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Range Intersection in Kotest\nDESCRIPTION: Examples of asserting whether ranges intersect with each other. These matchers work with both ClosedRange and OpenEndRange types in Kotlin, providing flexibility for different range types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/ranges.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nrange.shouldIntersect(range)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nrange.shouldNotIntersect(range)\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Dispatcher for All Tests in a Spec\nDESCRIPTION: Shows how to configure TestDispatcher at the spec level to apply to all tests within a specification class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      coroutineTestScope = true\n      test(\"this test uses a test dispatcher\") {\n      }\n      test(\"and so does this test!\") {\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Files in Kotest Tests\nDESCRIPTION: Example of creating a temporary file in a Kotest FunSpec that will be automatically cleaned up after test execution. This approach helps prevent flaky tests by ensuring temporary files are removed even if a test fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/tempfile.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val file = tempfile()\n\n   test(\"a temporary file dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Example Kotest Configuration Dump Output (Kotlin)\nDESCRIPTION: This snippet demonstrates the output of the Kotest configuration dump feature. It shows various configuration settings such as parallelization factor, concurrent specs, test timeouts, and enabled extensions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/config_dump.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n~~~ Kotest Configuration ~~~\n-> Parallelization factor: 1\n-> Concurrent specs: null\n-> Global concurrent tests: 1\n-> Dispatcher affinity: true\n-> Coroutine debug probe: false\n-> Spec execution order: Lexicographic\n-> Default test execution order: Sequential\n-> Default test timeout: 600000ms\n-> Default test invocation timeout: 600000ms\n-> Default isolation mode: SingleInstance\n-> Global soft assertions: false\n-> Write spec failure file: false\n-> Fail on ignored tests: false\n-> Fail on empty test suite: false\n-> Duplicate test name mode: Warn\n-> Remove test name whitespace: false\n-> Append tags to test names: false\n-> Extensions\n  - io.kotest.engine.extensions.SystemPropertyTagExtension\n```\n\n----------------------------------------\n\nTITLE: Customizing Test Names with Maps in Kotest\nDESCRIPTION: This example demonstrates how to use a map to specify custom test names for data-driven tests in Kotest. The map keys become the test names, while the values are the input data for each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/test_names.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData(\n    mapOf(\n      \"3, 4, 5\" to PythagTriple(3, 4, 5),\n      \"6, 8, 10\" to PythagTriple(6, 8, 10),\n      \"8, 15, 17\" to PythagTriple(8, 15, 17),\n      \"7, 24, 25\" to PythagTriple(7, 24, 25)\n    )\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Time Assertion Usage in Kotlin with Klock\nDESCRIPTION: Collection of time-related assertion methods for comparing and validating times using Klock library. These matchers allow comparing hours, minutes, seconds, milliseconds and checking if times are before, after or between other times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/klock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(time)\ntime.shouldHaveHours(hours)\ntime.shouldHaveSameMinutesAs(time)\ntime.shouldHaveMinutes(minutes)\ntime.shouldHaveSameSeconds(time)\ntime.shouldHaveSeconds(seconds)\ntime.shouldHaveSameMillisecondsAs(time)\ntime.shouldHaveMilliseconds(millis)\ntime.shouldBeBefore(time)\ntime.shouldBeAfter(time)\ntime.shouldBeBetween(time, time)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom BlockHound Integration\nDESCRIPTION: Shows how to create a custom BlockHound integration class to allow specific blocking calls that are considered harmless in your application.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/blockhound.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport reactor.blockhound.BlockHound\nimport reactor.blockhound.integration.BlockHoundIntegration\n\nclass MyBlockHoundIntegration : BlockHoundIntegration {\n   override fun applyTo(builder: BlockHound.Builder): Unit = with(builder) {\n      allowBlockingCallsInside(\"org.slf4j.LoggerFactory\", \"performInitialization\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Assertions in Assumptions for Kotest Property Testing (Kotlin)\nDESCRIPTION: Illustrates how to use assertions within assumptions in Kotest property testing. This allows for more complex filtering logic based on multiple conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/assumptions.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.string(3..4, Codepoint.az()), Arb.string(3..4, Codepoint.az())) { a, b ->\n  withAssumptions({\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }) {\n     a.compareTo(b) shouldNotBe 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error message with domain object clue\nDESCRIPTION: Shows the error message produced when using a domain object as a clue, with the object's toString() representation providing context for the failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_9\n\nLANGUAGE: plain\nCODE:\n```\nHttpResponse(status=404, body=the content)\nExpected :200\nActual   :404\n```\n\n----------------------------------------\n\nTITLE: Using asClue with Custom Objects for Detailed Assertion Context in Kotlin\nDESCRIPTION: Shows how to use the asClue extension function with a custom data class to provide detailed context for multiple assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/clues.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class HttpResponse(val status: Int, val body: String)\n\nval response = HttpResponse(404, \"the content\")\n\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Exhaustive Collections in Kotest\nDESCRIPTION: Enumerates each element of a list one by one to create an exhaustive collection for testing. This generator systematically works through all values in the provided list.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.collection(list)\n```\n\n----------------------------------------\n\nTITLE: Eventually with Retries and Exception Suppression\nDESCRIPTION: Shows how to configure eventually with both retry count and duration limits, plus specific exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/concurrency/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 8000\n  retries = 10\n  suppressExceptions = setOf(UserNotFoundException::class)\n}) {\n  userRepository.getById(1).name shouldNotBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Listeners to Eventually in Kotlin\nDESCRIPTION: Shows how to attach a listener to the eventually function that gets called on each failed iteration with information about the current state.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/eventually.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  listener = { k, throwable -> println(\"Iteration $k, with cause $throwable\") }\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Test Factory for IndexedSeq\nDESCRIPTION: Implementation of a reusable test factory function that can test any IndexedSeq implementation using WordSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_factories.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> indexedSeqTests(name: String, empty: IndexedSeq<T>) = wordSpec {\n   name should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Kotest Testcontainers extension dependency to a Gradle build file. It uses the io.kotest.extensions group ID.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers_46x.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Short Number Generation in Kotest\nDESCRIPTION: Functions for generating Short numbers with various constraints including regular, positive, negative, and array variants. Each function returns an Arb that produces numbers within specified ranges with appropriate edge cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.short(min, max)\nArb.positiveShort(min, max)\nArb.negativeShort(min, max)\nArb.shortArray(length, content)\nArb.uShort(min, max)\nArb.uShortArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Matchers\nDESCRIPTION: Shows how to use matchers in property testing with assertAll function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  assertAll(Gen.string(), Gen.string(), { a, b ->\n    a + b should startWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from defaultTestCaseConfig to Individual Test Configuration in Kotlin\nDESCRIPTION: Example demonstrating how to replace the deprecated defaultTestCaseConfig approach with individual test setting configuration that allows for better inheritance between test, spec, and project configuration levels.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_5.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n    override fun defaultTestCaseConfig() = TestCaseConfig(tags = setOf(Foo, Bar), timeout = 100.seconds)\n    test(\"foo\") {\n      // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Callback Functions in Kotest Spec\nDESCRIPTION: This snippet illustrates how to override callback functions directly in a Kotest spec class. It overrides the beforeTest function to perform setup logic before each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/lifecycle_hooks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec() {\n    override fun beforeTest(testCase: TestCase) {\n        println(\"Starting a test $testCase\")\n    }\n\n    init {\n        \"this test\" should {\n            \"be alive\" {\n                println(\"Johnny5 is alive!\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Less Informative Assertion Example in Kotest\nDESCRIPTION: An assertion checking that a property is not null. When this fails, the error message lacks context about what's being tested.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dispatcher for Single Test in Kotest\nDESCRIPTION: Shows how to enable TestDispatcher for a single test using coroutineTestScope config parameter in a FunSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineTestScope = true) {\n         // this test will run with a test dispatcher\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Bounds in Kotest\nDESCRIPTION: Asserts upper and lower bounds for elements in a collection that implement Comparable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/collections.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveLowerBound(element)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveUpperBound(element)\n```\n\n----------------------------------------\n\nTITLE: Filtering generator values with Arb.filter in Kotest\nDESCRIPTION: Demonstrates how to restrict the set of generated values from a generator using the filter method to create a constrained arbitrary (Arb) instance that only produces even numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/assumptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest with Counter Example in Kotlin\nDESCRIPTION: This example demonstrates how variables are reset in InstancePerTest mode using an atomic counter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/isolation_mode.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Date Component Verification Matchers in Klock\nDESCRIPTION: Matchers for verifying specific components of a date including year, month, day, hour, minute, and second. These matchers allow precise verification of individual date/time components.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/klock.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDay(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\n```\n\n----------------------------------------\n\nTITLE: Using NonEmptyList Matchers in Kotlin with Kotest and Arrow\nDESCRIPTION: These matchers allow asserting various properties of NonEmptyList types, including content, presence of nulls, duplicates, and sorting.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nnel.shouldContain(e)\nnel.shouldContainAll(e1,e2,...,en)\nnel.shouldContainNull()\nnel.shouldContainNoNulls()\nnel.shouldContainOnlyNulls()\nnel.shouldHaveDuplicates()\nnel.shouldBeSingleElement(e)\nnel.shouldBeSorted()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom String Length Matcher in Kotlin\nDESCRIPTION: An example of implementing a custom matcher to check the length of a string in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/custom.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun haveLength(length: Int) = Matcher<String> {\n  return MatcherResult(\n    value.length == length,\n    { \"string had length ${value.length} but we expected length $length\" },\n    { \"string should not have length $length\" },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries and Exception Suppression in Eventually Function\nDESCRIPTION: Shows how to set retry count, duration, and suppress specific exceptions in the 'eventually' function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/concurrency/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 8000\n  retries = 10\n  suppressExceptions = setOf(UserNotFoundException::class)\n}) {\n  userRepository.getById(1).name shouldNotBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing and Registering Spec-level Extensions in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a custom extension implementing BeforeSpecListener and AfterSpecListener interfaces, and how to register it with a specific test spec. The extension handles setup and teardown operations for Kafka before and after the spec execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/extensions/extensions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestListener : BeforeSpecListener, AfterSpecListener {\n   override suspend fun beforeSpec(spec:Spec) {\n      // power up kafka\n   }\n   override suspend fun afterSpec(spec: Spec) {\n      // shutdown kafka\n   }\n}\n\n\nclass TestSpec : WordSpec({\n    extension(MyTestListener())\n    // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Using @Order Annotation for Spec Execution Order\nDESCRIPTION: Demonstrates how to use the @Order annotation to control test specification execution order. Lower order values are executed first, and specs without annotations are executed last. The example shows different combinations of order values and unannotated specs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/spec_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Order(1)\nclass FooTest : FunSpec() { }\n\n@Order(0)\nclass BarTest: FunSpec() {}\n\n@Order(1)\nclass FarTest : FunSpec() { }\n\nclass BooTest : FunSpec() {}\n```\n\n----------------------------------------\n\nTITLE: Asserting Result Properties in Kotlin with Kotest\nDESCRIPTION: Extension functions for Result objects that verify success/failure outcomes, value equality, and exception types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeSuccess()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeSuccess(value)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeSuccess(block)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeFailure()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeFailureOfType<Type : Throwable>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeFailure(block)\n```\n\n----------------------------------------\n\nTITLE: Table Testing in StringSpec Style\nDESCRIPTION: Example of using table testing within a StringSpec class to test string concatenation with multiple input combinations. Each row provides three strings to concatenate and an expected result.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forAll(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Test Function Type in Kotlin\nDESCRIPTION: Shows the fundamental type signature of a test in Kotest, which is a function that takes a TestContext and returns Unit. This function contains matchers (assertions) that throw exceptions on failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/dsl.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nTestContext -> Unit\n```\n\n----------------------------------------\n\nTITLE: Generating NonEmptyList Instances in Kotest with Arrow\nDESCRIPTION: Methods for generating NonEmptyList instances using Arrow generators in Kotest. Allows for creation of lists with random sizes or within a specified range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.nel(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.nel(arb, range)\n```\n\n----------------------------------------\n\nTITLE: Basic assertion example in Kotlin with Kotest\nDESCRIPTION: A simple assertion example that compares a username with an expected value. This shows how a basic assertion produces a meaningful error message without needing additional clues.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nusername shouldBe \"sksamuel\"\n```\n\n----------------------------------------\n\nTITLE: Using NoSystemOutListener Extension in Kotest\nDESCRIPTION: This snippet demonstrates how to use the built-in NoSystemOutListener extension in Kotest that throws an error when output is written to standard out. The example uses a DescribeSpec with a test that would fail due to printing to standard out.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/extensions/examples.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : DescribeSpec({\n\n    listener(NoSystemOutListener)\n\n    describe(\"All these tests should not write to standard out\") {\n        it(\"silence in the court\") {\n          println(\"boom\") // failure\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Kafka Container Test Example\nDESCRIPTION: Complete example of using a Kafka container for producing and consuming messages in a test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/test_containers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KafkaTestContainerExtensionTest : FunSpec() {\n  init {\n\n    val kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n      withEmbeddedZookeeper()\n    }\n\n    test(\"should send/receive message\") {\n\n      val producer = kafka.createStringStringProducer()\n      producer.send(ProducerRecord(\"foo\", null, \"bubble bobble\"))\n      producer.close()\n\n      val consumer = kafka.createStringStringConsumer {\n        this[ConsumerConfig.MAX_POLL_RECORDS_CONFIG] = 1\n      }\n\n      consumer.subscribe(listOf(\"foo\"))\n      val records = consumer.poll(Duration.ofSeconds(100))\n      records.shouldHaveSize(1)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Property Test Configuration in Kotlin\nDESCRIPTION: Demonstrates the basic structure of configuring a property test using PropTestConfig within a StringSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String>(PropTestConfig(options here...)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Choosing Random Arb Generators in Kotlin using Kotest\nDESCRIPTION: Randomly selects one of the given Arbs and uses it to generate the next element.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.choice(arbs)\n```\n\n----------------------------------------\n\nTITLE: Using Inline Assertion-based Assumptions in Kotest (Kotlin)\nDESCRIPTION: Demonstrates the inline syntax for using assertion-based assumptions in Kotest, providing a more concise way to express complex filtering conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/assumptions.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume {\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Integer Matchers in Kotlin with Kotest\nDESCRIPTION: Matchers for validating integer values in Kotest. These assertions help verify numeric relationships, ranges, and properties specific to integer values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nint.shouldBeBetween(x, y)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nint.shouldBeLessThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nint.shouldBeLessThanOrEqual(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nint.shouldBeGreaterThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nint.shouldBeGreaterThanOrEqual(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nint.shouldBeEven()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nint.shouldBeOdd()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nint.shouldBeInRange(range)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nint.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Long Number Generation in Kotest\nDESCRIPTION: Functions for generating Long numbers with various constraints including regular, positive, and negative variants. Each function returns an Arb that produces numbers within specified ranges with appropriate edge cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.long(min, max)\nArb.positiveLong(min, max)\nArb.negativeLong(min, max)\n```\n\n----------------------------------------\n\nTITLE: Asserting Coverage Percentages in Kotest Property Tests\nDESCRIPTION: Shows how to validate that certain values are being generated with minimum percentage requirements using withCoveragePercentages function to ensure adequate test coverage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/statistics.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoveragePercentages(mapOf(RoundingMode.HALF_DOWN to 10.0, RoundingMode.FLOOR to 10.0)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest System Extensions Dependency\nDESCRIPTION: Maven dependency required to use the Kotest system extensions in JVM projects. This needs to be added to your build file to access the functionality described in this documentation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest:kotest-extensions-jvm:${version}\n```\n\n----------------------------------------\n\nTITLE: Generating Long Values in Kotest\nDESCRIPTION: Functions to create arbitrary Long data generators with specified ranges and edge cases. These generators can produce regular, positive, or negative Long values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.long(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveLong(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.negativeLong(min, max)\n```\n\n----------------------------------------\n\nTITLE: Testing System Exit Calls in Kotlin\nDESCRIPTION: Example showing how to test System.exit() calls using the SpecSystemExitListener. The listener intercepts System.exit calls and throws a SystemExitException with the exit code instead of terminating the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SystemExitTest : StringSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n\n    \"System.exit should throw an exception when the listener is added\" {\n      shouldThrow<SystemExitException> {\n        System.exit(123)\n      }.exitCode shouldBe 123\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Test Configuration by Override\nDESCRIPTION: Example of setting default test configuration for all test cases in a spec by overriding defaultTestCaseConfig function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_case_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Against Schema in Kotest\nDESCRIPTION: Demonstrates how to validate JSON strings against a defined schema using the shouldMatchSchema matcher, including examples of successful and failed validations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/json/schema.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n\"{\\\"\\\" shouldMatchSchema personSchema\n\n// fails with:\n// $.name => Expected string, but was undefined\n\n\"\"\" { \\\"name\\\": \\\"Emil\\\", \\\"age\\\": 34 } \"\"\"\n// Passes, since address isn't required and `additionalProperties` are allowed\n```\n\n----------------------------------------\n\nTITLE: Generating Individual Tests from Data Rows in FreeSpec\nDESCRIPTION: Demonstrates how to create individual named tests from data rows in a FreeSpec. This approach maps each row to a separate test case, providing better test reporting and isolation between test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Concurrent Execution Assertions in Kotest\nDESCRIPTION: Methods for testing concurrent operations including completion within a timeout period and verification of timeouts for both regular and suspendable functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldCompleteWithin(timeout, unit, function)\nshouldTimeout(timeout, unit, function)\nshouldTimeout(duration, suspendableFunction)\n```\n\n----------------------------------------\n\nTITLE: Implementing Root-Level Data-Driven Tests with Kotest in Kotlin\nDESCRIPTION: Shows how to create data-driven tests at the root level of a test class using Kotest's withData function. This approach doesn't use additional context blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  withData(\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    isPythagTriple(a, b, c) shouldBe true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Thread Properties in Kotlin with Kotest\nDESCRIPTION: Functions for checking the state of Thread objects, including whether they are blocked, daemon, alive, or terminated.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nthread.shouldBeBlocked()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthread.shouldBeDaemon()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthread.shouldBeAlive()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthread.shouldBeTerminated()\n```\n\n----------------------------------------\n\nTITLE: Asserting Files in Kotest\nDESCRIPTION: Comprehensive assertion functions for validating file and directory properties in Kotest tests, including existence, permissions, content, and path validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeAbsolute()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeADirectory()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeAFile()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeCanonical()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeEmpty()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeExecutable()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeHidden()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeReadable()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeRelative()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeSmaller(file)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeLarger(file)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeWriteable()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndir.shouldBeNonEmptyDirectory()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndir.shouldContainFile(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndir.shouldContainNFiles(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldExist()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldHaveExtension(ext)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldHaveFileSize(size)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldHaveName(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldHavePath(path)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldStartWithPath(prefix)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndir.shouldContainFileDeep(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndir.shouldContainFiles(name1, name2, ..., nameN)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldBeSymbolicLink()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldHaveParent(name)\n```\n\n----------------------------------------\n\nTITLE: Implementing TestListener Methods in a Spec Class\nDESCRIPTION: Example showing how to implement TestListener methods directly in a Spec class by overriding the beforeTest and afterTest methods to track test execution time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimeTracker : WordSpec() {\n\n  var started = 0L\n\n  override fun beforeTest(description: Description) {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(description: Description, result: TestResult) {\n    val duration = System.currentTimeMillis() - started\n    println(\"Test ${description.fullName()} took ${duration}ms\")\n  }\n\n  init {\n    \"some test\" should {\n      \"be timed\" {\n        // test here\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode using Function Override in Kotlin\nDESCRIPTION: Shows how to set the isolation mode by overriding the isolationMode() function in a Kotest spec class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/isolation_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n  override fun isolationMode() = IsolationMode.SingleInstance\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Table File Format Example\nDESCRIPTION: Example of the .table file format using pipe-separated values with headers and data rows.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/table_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\nid | username | fullName\n4  | jmfayard | Jean-Michel Fayard\n6  | louis    | Louis Caugnault\n```\n\n----------------------------------------\n\nTITLE: Implementing Pythagorean Triple Validation in Kotlin\nDESCRIPTION: Function to verify if three numbers form a valid Pythagorean triple, along with data class definition and test implementation using Kotest's data driven testing feature.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.3.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n    forAll(\n       PythagTriple(3, 4, 5),\n       PythagTriple(6, 8, 10),\n       PythagTriple(8, 15, 17),\n       PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n        isPythagTriple(a, b, c) shouldBe true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in ExpectSpec with xcontext and xexpect\nDESCRIPTION: Demonstrates how to disable specific tests or entire contexts using the xcontext and xexpect variants in ExpectSpec. These are additional methods beyond the standard conditional evaluation options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"this outer block is enabled\") {\n        xexpect(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        expect(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Table-Driven Testing in StringSpec KotlinTest\nDESCRIPTION: This snippet demonstrates how to use table-driven testing within a StringSpec in KotlinTest, testing string concatenation with multiple input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forall(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Extension Function Variants of Custom Matchers\nDESCRIPTION: Shows the simplified syntax enabled by extension function variants of custom matchers, which provide a more concise and readable way to write assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/custom.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\".shouldHaveLength(9)\n\"hello bar\".shouldNotHaveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Enabling Config Dump in Gradle with Kotlin\nDESCRIPTION: Shows how to enable the Kotest configuration dump feature by setting a system property in the Gradle test task. This allows you to see the configuration that will be used for test runs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/config_dump.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntest {\n  systemProperty \"kotest.framework.dump.config\", \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting BigDecimal Values in Kotest\nDESCRIPTION: This snippet shows assertion methods for BigDecimal values in Kotest. It covers precision, scale, sign, comparison, and range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldHavePrecision(n)\nbigDecimal.shouldHaveScale(n)\nbigDecimal.shouldBePositive()\nbigDecimal.shouldBeNegative()\nbigDecimal.shouldNotBePositive()\nbigDecimal.shouldNotBeNegative()\nbigDecimal.shouldBeZero()\nbigDecimal.shouldBeLessThan(n)\nbigDecimal.shouldBeLessThanOrEquals(n)\nbigDecimal.shouldBeGreaterThan(n)\nbigDecimal.shouldBeGreaterThanOrEquals(n)\nbigDecimal.shouldBeInRange(r)\nbigDecimal.shouldBeEqualIgnoringScale(r)\nbigDecimal.shouldBe(value plusOrMinus(tolerance))\n```\n\n----------------------------------------\n\nTITLE: Instance Per Test Counter Example in Kotest\nDESCRIPTION: Demonstrates variable reset behavior in InstancePerTest mode using an atomic counter\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/isolation_mode.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Test Task for Jacoco Integration in Gradle (Kotlin)\nDESCRIPTION: This code modifies the test task to finalize with the Jacoco report generation. It ensures that Jacoco reports are generated after the tests are run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/integrations/jacoco.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  ...\n  finalizedBy(tasks.jacocoTestReport)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Failures in Kotest Property Test\nDESCRIPTION: Shows how to configure a property test to allow a specific number of test failures before considering the entire test failed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some flakey test\" {\n      forAll<String, String>(PropTestConfig(maxFailure = 3)) { a,b ->\n         // max of 3 inputs can fail\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Exhaustive Generator in Property-Based Testing with Kotest\nDESCRIPTION: This example shows how to use a custom Exhaustive generator in a property-based test using Kotest's StringSpec and checkAll function to verify properties of prime numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/customgens.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n    \"testing single digit primes\" {\n        checkAll(singleDigitPrimes) { prime ->\n           isPrime(prime) shouldBe true\n           isPrime(prime * prime) shouldBe false\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting OffsetDateTime Properties in Kotlin using Kotest\nDESCRIPTION: Demonstrates assertions for OffsetDateTime objects in Kotest. Includes checks for current date, instant equality, and time proximity.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\noffsetDateTime.shouldBeToday()\noffsetDateTime.shouldHaveSameInstantAs(other: OffsetDateTime)\noffsetDateTime.shouldBe(other: OffsetDateTime plusOrMinus 1.minutes)\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Timeout in Kotest Using ProjectConfig\nDESCRIPTION: Implementation of project-wide timeout settings using AbstractProjectConfig. This configuration sets a global timeout of 10 minutes that applies to all tests, including their setup and teardown phases within a module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/timeouts/project_timeout.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val projectTimeout: Duration = 10.minutes\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Konform Validator for UserProfile in Kotlin\nDESCRIPTION: Defines a validation object for the UserProfile class with specific constraints. The validator checks that fullName is between 4-100 characters and age (if present) is between 21-99.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/konform.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval validateUser = Validation<UserProfile> {\n  UserProfile::fullName {\n     minLength(4)\n     maxLength(100)\n  }\n\n  UserProfile::age ifPresent {\n     minimum(21)\n     maximum(99)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Tests with PropTestConfig in Kotlin\nDESCRIPTION: Demonstrates how to use PropTestConfig to set configuration options for a property test in Kotest. This example shows the basic structure of applying configuration to a forAll test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String>(PropTestConfig(options here...)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Data Testing with Kotest\nDESCRIPTION: Demonstrates how to implement nested data tests using withData blocks to test multiple services against multiple HTTP methods. Creates a cartesian product of all test combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/nested.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n  val services = listOf(\n    \"http://internal.foo\",\n    \"http://internal.bar\",\n    \"http://public.baz\",\n  )\n\n  val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n   withData(services) { service ->\n     withData(methods) { method ->\n       // test service against method\n     }\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using NonEmptyList Generators in Kotest with Arrow\nDESCRIPTION: Shows generators for Arrow's NonEmptyList type, with options for default sizing or custom size ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.nel(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.nel(arb, range)\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Kafka and Zookeeper Ports in Kotest\nDESCRIPTION: Shows how to create an EmbeddedKafkaListener instance with custom ports for both Kafka and Zookeeper.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/kafka.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = EmbeddedKafkaListener(kafkaPort = 6005, zookeeperPort = 9005)\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Generator with Default Shrinking in Kotlin\nDESCRIPTION: Example of using a built-in positive integer generator with its default shrinking behavior. When a test fails, Kotest will automatically attempt to shrink the failing value to find the minimal reproducible case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/shrinking.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertSoftly with Receiver in Kotest\nDESCRIPTION: Shows how to use assertSoftly with a receiver to perform multiple assertions on an object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.1.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nperson.assertSoftly {\n  name shouldBe \"sam\"\n  age shouldBe 99\n  city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail On Ignored Tests in Kotest\nDESCRIPTION: Example implementation of AbstractProjectConfig to treat ignored tests as failures, which helps ensure all tests are addressed and not left disabled indefinitely.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/project_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val failOnIgnoredTests = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Delay in Eventually Function in Kotlin\nDESCRIPTION: Demonstrates how to set an initial delay before the first iteration of the 'eventually' function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/concurrency/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5000\n  initialDelay = 1000\n}) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Option Matchers in Kotest Arrow Extension\nDESCRIPTION: Assertion methods for testing Arrow Option types, allowing verification of Some and None cases with optional value checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\noption.shouldBeSome()\noption.shouldBeSome(v)\noption.shouldBeNone()\n```\n\n----------------------------------------\n\nTITLE: Reading Table Data from File\nDESCRIPTION: Demonstrates how to read data from a .table file, including header definition and data transformation from strings to typed values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/table_driven_testing.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval tableFromFile = table(\n    headers = headers(\"id\", \"username\", \"fullName\"),\n    source = testResources.resolve(\"users.table\"),\n    transform = { a: String, b: String, c: String ->\n        row(a.toInt(), b, c)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Assumptions with withAssumptions Function (Kotlin)\nDESCRIPTION: Shows how to use the withAssumptions function in Kotest to filter out unwanted combinations while tracking that not too many inputs are being filtered.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/assumptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  withAssumptions(a != b) {\n    levenshtein(a, b) shouldBeGreaterThan 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Validated Types in Kotlin with Kotest Arrow Matchers\nDESCRIPTION: These matchers are used to assert the state and value of Validated types. They can check if a Validated is Valid or Invalid, and verify the contained value in either case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nvalidated.shouldBeValid()\nvalidated.shouldBeValid(v)\nvalidated.shouldBeInvalid()\nvalidated.shouldBeInvalid(v)\n```\n\n----------------------------------------\n\nTITLE: Reading a Table from a Text File\nDESCRIPTION: Loads test data from a .table file, specifying headers and transforming string values to appropriate types. This allows for maintaining test data externally.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/table_driven_testing.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval tableFromFile = table(\n    headers = headers(\"id\", \"username\", \"fullName\"),\n    source = testResources.resolve(\"users.table\"),\n    transform = { a: String, b: String, c: String ->\n        row(a.toInt(), b, c)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Iterations in Kotest Property Tests\nDESCRIPTION: Example of specifying custom iteration count (10,000) for property tests using checkAll function with Double parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/test_functions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"a many iterations test\" {\n      checkAll<Double, Double>(10_000) { a, b ->\n         // test here\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Time Properties in Kotlin using Kotest\nDESCRIPTION: Shows various assertions for time objects in Kotest. Includes checks for hours, minutes, seconds, nanoseconds, and time comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\ntime.shouldHaveSameMinutesAs(otherTime)\ntime.shouldHaveSameSecondsAs(otherTime)\ntime.shouldHaveSameNanosAs(otherTime)\ntime.shouldBeBefore(otherTime)\ntime.shouldBeAfter(otherTime)\ntime.shouldBeBetween(firstTime, secondTime)\ntime.shouldBe(otherTime plusOrMinus 1.minutes)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom String Validation Matcher in Kotlin\nDESCRIPTION: Demonstrates how to use the custom shouldBeStrongPassword extension function to validate string passwords, with examples of both passing and failing cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/composed_matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n\"StrongPassword123\".shouldBeStrongPassword()\n\"WeakPassword\".shouldBeStrongPassword() // would fail\n```\n\n----------------------------------------\n\nTITLE: Building JSON Schema with Kotest DSL\nDESCRIPTION: Shows how to build nested JSON schemas using Kotest's DSL, including property validation and schema composition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/schema.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval addressSchema = jsonSchema {\n  obj {   // object is reserved, obj was chosen over jsonObject for brevity but could be changed ofc, or jsonObject could be added as alternative.\n    withProperty(\"street\", required = true) { string() }\n    withProperty(\"zipCode\", required = true) {\n      integer {\n        beEven() and beInRange(10000..99999)   // supports constructing a matcher that will be used to test values\n      }\n    }\n    additionalProperties = false   // triggers failure if other properties are defined in actual\n  }\n}\n\nval personSchema = jsonSchema {\n  obj {\n    withProperty(\"name\", required = true) { string() }\n    withProperty(\"address\") { addressSchema() } // Schemas can re-use other schemas 🎉\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency for JVM/Maven in XML\nDESCRIPTION: This snippet demonstrates how to add the Kotest property testing dependency to a Maven pom.xml file for JVM projects. It specifies the groupId, artifactId, version, and test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Testing with File-Based Table Data\nDESCRIPTION: Shows how to execute tests using data loaded from a .table file, maintaining the same testing pattern as with in-code tables.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/table_driven_testing.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"table-driven testing from the .table file\") {\n    // asserts like before\n    tableFromFile.forAll { id, name, username ->\n        id shouldBeGreaterThan 0\n        username shouldNotBe \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast at Parent Test Level in Kotest\nDESCRIPTION: This snippet demonstrates how to enable fail fast for a specific context within a Kotest FunSpec. When enabled, the first failure in the context will cause the remaining tests to be skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/fail_fast.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n      context(\"context with fail fast enabled\").config(failfast = true) {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Target-Specific Soft Assertions in Kotlin using Kotest\nDESCRIPTION: Shows how to use assertSoftly with a specific test target, where the lambda receives the target as its receiver. This allows for more focused testing of a specific object's properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/soft_assertions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly(foo) {\n    shouldNotEndWith(\"b\")\n    length shouldBe 3\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Arb Generator Values in Kotlin\nDESCRIPTION: Shows how to filter values from an Arb generator to create a new generator with a subset of values, demonstrated with even and odd number generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genops.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\nval odds = Arb.int().filter { it.value % 2 == 1 }\n```\n\n----------------------------------------\n\nTITLE: Testing with ShouldSpec in Kotlin\nDESCRIPTION: Shows how to use ShouldSpec style which uses 'should' keyword instead of 'test'. Includes examples of nested contexts and disabled tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    should(\"return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"String.length\") {\n        should(\"return the length of the string\") {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"this outer block is enabled\") {\n        xshould(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        should(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Activating SpringExtension Per Test Class in Kotest\nDESCRIPTION: This code demonstrates how to activate the SpringExtension for a specific test class by overriding the extensions function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/spring.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : FunSpec() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Wide Test and Invocation Timeouts in Kotest\nDESCRIPTION: This snippet shows how to set project-wide test and invocation timeouts using ProjectConfig in Kotest. The overall test timeout is set to 100 milliseconds, and the invocation timeout to 33 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig {\n    override val timeout = 100.milliseconds\n    override val invocationTimeout = 33.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Either Types in Kotlin with Kotest Arrow Matchers\nDESCRIPTION: These matchers are used to assert the state and value of Either types. They can verify if an Either is Right or Left, and check the contained value in either case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\neither.shouldBeRight()\neither.shouldBeRight(v)\neither.shouldBeLeft()\neither.shouldBeLeft(v)\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Kafka Producer and Consumer in Kotest\nDESCRIPTION: Demonstrates how to create and use a string-based producer and consumer with the embedded Kafka instance. It shows sending a message and then consuming it using the convenience methods provided by the listener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/kafka.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n\n   test(\"send / receive\") {\n\n     val producer = embeddedKafkaListener.stringStringProducer()\n     producer.send(ProducerRecord(\"foo\", \"a\"))\n     producer.close()\n\n     val consumer = embeddedKafkaListener.stringStringConsumer(\"foo\")\n     eventually(10.seconds) {\n       consumer.poll(1000).first().value() shouldBe \"a\"\n     }\n     consumer.close()\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Map Assertions in Kotlin using Kotest\nDESCRIPTION: Assertions for verifying map contents, keys, and values in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nmap.shouldContain(\"key\", \"value\")\nmap.shouldContainAll(other)\nmap.shouldContainExactly(other)\nmap.shouldContainKey(key)\nmap.shouldContainKeys(keys)\nmap.shouldContainValue(value)\nmap.shouldContainValues(values)\nmap.shouldBeEmpty()\nmap.shouldMatchAll(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\nmap.shouldMatchExactly(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Class for Pythagorean Triple Test Cases in Kotlin\nDESCRIPTION: A data class that represents a row of test data consisting of three integers that will be used to test the Pythagorean triple function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Asserting Option Types in Kotlin with Kotest Arrow\nDESCRIPTION: Examples of assertions for Option types using Kotest Arrow matchers. These matchers check if an Option is Some or None, and can verify specific values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\noption.shouldBeSome()\noption.shouldBeSome(v)\noption.shouldBeNone()\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Testing in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use the retry function in Kotest to attempt a test block multiple times. The example shows a test that will retry up to 4 times with a 10-minute timeout period. The retry function supports additional options like delay between attempts, exponential backoff multiplier, and specific exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/retry.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"retry up to 4 times\") {\n      retry(4, 10.minutes) {\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Mockk Usage in Kotest\nDESCRIPTION: Demonstrates basic usage of mockk library within a Kotest FunSpec test class to mock a repository dependency\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/integrations/mocks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Boolean-based Property Testing in KotlinTest\nDESCRIPTION: Example of property testing in KotlinTest using boolean-returning functions with forAll. This older approach requires combining all assertions into a single boolean result.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  forAll(Gen.string(), Gen.string(), { a, b ->\n    (a + b).startsWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Name Functions for Test Names in Kotest\nDESCRIPTION: This example shows how to use a name function to generate test names dynamically based on input data. The function takes the test row as input and returns a string to be used as the test name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/test_names.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData<PythagTriple>(\n    nameFn = { \"${it.a}__${it.b}__${it.c}\" },\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SpringListener for specific test classes in Kotlin\nDESCRIPTION: Code example showing how to register the SpringListener for specific test classes by overriding the listeners() function in a test spec. This allows for Spring autowiring in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : ParentSpec() {\n    override fun listeners() = listOf(SpringListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertion-based assumptions with withAssumptions in Kotest\nDESCRIPTION: Demonstrates how to use multiple assertions within assumptions to filter test inputs based on complex conditions, ensuring inputs are not equal and have the same length.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/assumptions.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.string(3..4, Codepoint.az()), Arb.string(3..4, Codepoint.az())) { a, b ->\n  withAssumptions({\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }) {\n     a.compareTo(b) shouldNotBe 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec Execution Order in Kotest Project Config\nDESCRIPTION: Shows how to implement a custom ProjectConfig class to override the spec execution order property. This configuration affects how all test specs in the project will be ordered during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/spec_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig: AbstractProjectConfig() {\n    override val specExecutionOrder = ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Statistics Reporters in Kotest\nDESCRIPTION: Example showing how to configure a custom statistics reporter by implementing the StatisticsReporter interface and setting it in the global PropertyTesting configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/statistics.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyStatisticsReporter : object : StatisticsReporter { ... }\nPropertyTesting.statisticsReporter = MyStatisticsReporter\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Maven Plugin\nDESCRIPTION: Maven plugin configuration for setting up Pitest with custom configuration options like target classes and coverage threshold.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/pitest.md#2025-04-13_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.pitest</groupId>\n    <artifactId>pitest-maven</artifactId>\n    <version>${pitest-maven.version}</version>\n    <configuration>\n        <targetClasses>...</targetClasses>\n        <coverageThreshold>...</coverageThreshold>\n        ... other configurations as needed        \n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Creating Named Tags in Kotest\nDESCRIPTION: Using the NamedTag class to create tags with string names, following the required naming rules.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/tags.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval tag = NamedTag(\"Linux\")\n```\n\n----------------------------------------\n\nTITLE: Generating and Testing CurrencyAmount with Reflective Arbs in Kotlin\nDESCRIPTION: This snippet demonstrates how to use reflective Arbs to generate CurrencyAmount instances for property-based testing. It includes examples of filtering and using multiple generated values in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/reflective_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Currency {\n  USD, GBP, EUR\n}\n\nclass CurrencyAmount(\n  val amount: Long,\n  val currency: Currency\n)\n\ncontext(\"Currencies converts to EUR\") { // In some spec\n  checkAll(Arb.bind<CurrencyAmount>().filter { it.currency != EUR }) { currencyAmount ->\n    val converted = currencyAmount.convertTo(EUR)\n    converted.currency shouldBe EUR\n  }\n}\n\ncontext(\"Converting to a currency and back yields the same amount\") { // In some spec\n  checkAll<CurrencyAmount, Currency>() { currencyAmount, currency ->\n    val converted = currencyAmount.convertTo(currency).convertTo(currencyAmount.currency)\n    converted.currency shouldBe currencyAmount.currency\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TestContainer Integration Example\nDESCRIPTION: Shows how to integrate TestContainers with Kotest using per-test and per-spec lifecycles\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.1.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perTest())\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Case with Multiple Invocations and Threads in Kotest ShouldSpec\nDESCRIPTION: This snippet demonstrates how to set the 'invocations' and 'threads' parameters for a test case using the config function in a ShouldSpec. It runs the test 10 times using 2 threads.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_case_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Kotest Coroutine Support\nDESCRIPTION: Shows how Kotest allows direct use of suspension functions in tests without requiring runBlocking or other boilerplate code. This is a key advantage over JUnit when testing coroutine-based code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/why.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nrunBlocking\n```\n\n----------------------------------------\n\nTITLE: Using WordSpec for Testing in Kotlin\nDESCRIPTION: Example of WordSpec style which uses 'should' keyword with nested contexts for test organization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"String.length\" should {\n        \"return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating LocalDate Objects with KotlinX DateTime in Kotest\nDESCRIPTION: Creates LocalDate instances with years within the specified range and other fields randomly generated. Requires the kotest-property-datetime extension module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.date(yearRange)\n```\n\n----------------------------------------\n\nTITLE: Eventually Testing with Predicates in Kotlin\nDESCRIPTION: Demonstrates using predicates with eventually to verify specific conditions. The example shows checking for a counter to reach a specific value over time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"check that predicate eventually succeeds in time\" {\n    var i = 0\n    eventually<Int>(25.seconds, predicate = { it == 5 }) {\n      delay(1.seconds)\n      i++\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: List-Specific Operations in Kotlin Kotest\nDESCRIPTION: Methods specific to List type including sorting and order checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/collections.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nlist.shouldBeSorted()\nlist.shouldBeSortedBy { transform }\nlist.shouldContainInOrder(other)\nlist.shouldExistInOrder({ element }, ...)\nlist.shouldHaveElementAt(index, element)\nlist.shouldStartWith(lst)\nlist.shouldEndWith(lst)\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener in Kotest FunSpec (Per Spec Mode)\nDESCRIPTION: Example of using WireMockListener in a Kotest FunSpec. It demonstrates setting up a WireMockServer for the entire spec, stubbing a GET request, and verifying the response.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/wiremock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_SPEC))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n    //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generators in Property Testing\nDESCRIPTION: Shows how to use exhaustive generators with the checkAll function to ensure that all combinations of values are tested. This ensures complete coverage of the specified test space.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.2.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n val context = checkAll(\n    Exhaustive.ints(0..5),\n    Exhaustive.ints(0..5),\n    Exhaustive.ints(0..5)\n ) { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Test Names Using Map in Kotest\nDESCRIPTION: Example showing how to specify test names using a map where keys are test names and values are input data. This approach provides explicit control over test naming for Pythagorean triple tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/test_names.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData(\n    mapOf(\n      \"3, 4, 5\" to PythagTriple(3, 4, 5),\n      \"6, 8, 10\" to PythagTriple(6, 8, 10),\n      \"8, 15, 17\" to PythagTriple(8, 15, 17),\n      \"7, 24, 25\" to PythagTriple(7, 24, 25)\n    )\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Delay for Eventually in Kotlin\nDESCRIPTION: Demonstrates how to add an initial delay before the first test attempt when using the eventually function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/eventually.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  initialDelay = 1.seconds\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Tags in FunSpec\nDESCRIPTION: Shows how to apply tags to a test case using FunSpec style for test organization and filtering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_case_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Test Timeout for All Tests in a Spec File\nDESCRIPTION: This example shows how to set a timeout that applies to all tests within a Kotest spec file using FunSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/timeouts/test_timeouts.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   timeout = 100.milliseconds\n\n   test(\"this test will timeout quickly!\") {\n      // test here\n   }\n\n   test(\"so will this one!\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Applying @EnabledIf Annotation with Custom Condition in Kotest\nDESCRIPTION: Shows how to apply a custom EnabledCondition to multiple test spec classes using the @EnabledIf annotation. This example applies the LinuxOnlyCondition to selectively run tests based on the operating system.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/annotations.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest1 : FunSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest2 : DescribeSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyWindowsTests : DescribeSpec() {\n  // tests here\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ExpectSpec Implementation in Kotlin\nDESCRIPTION: Demonstrates the basic structure of a test class using ExpectSpec with a single test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    expect(\"my test\") {\n        // test here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Functions for Custom Matchers in Kotlin\nDESCRIPTION: Demonstrates how to create extension functions that wrap custom matchers for a more fluent API. These extensions follow Kotest's 'shouldXYZ' naming convention and return the original value for chaining.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/custom.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldHaveLength(length: Int): String {\n  this should haveLength(length)\n  return this\n}\n\nfun String.shouldNotHaveLength(length: Int): String {\n  this shouldNot haveLength(length)\n  return this\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Matcher Interface in Kotlin\nDESCRIPTION: Core interface definition for creating custom matchers in Kotest. The interface requires implementing a test method that returns a MatcherResult.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/custom.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Matcher<in T> {\n  fun test(value: T): MatcherResult\n}\n```\n\n----------------------------------------\n\nTITLE: Statistical Assertions in Kotlin with Kotest\nDESCRIPTION: A collection of matchers for asserting statistical properties of collections, including mean, variance, and standard deviation calculations with configurable precision.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveMean(mean)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveMean(mean, precision)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveVariance(mean)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveVariance(mean, precision)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveStandardDeviation(mean)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveStandardDeviation(mean, precision)\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Clues for Hierarchical Context\nDESCRIPTION: Using nested clues to provide multiple levels of context for complex tests. This approach creates a hierarchy of information that makes test failures more informative.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Verifying user_id=${user.name}\" }.asClue {\n  \"email_confirmed should be false since we've just created the user\".asClue {\n    user.emailConfirmed shouldBe false\n  }\n  \"login\".asClue {\n    user.login shouldBe \"sksamuel\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Focus Prefix with Nested Tests in Kotest FunSpec\nDESCRIPTION: This example shows how focusing works with nested tests in a FunSpec. When a parent context is focused with 'f:', both the parent context and all nested tests within it will be executed, while other contexts and their tests will be skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/focus.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : FunSpec({\n   context(\"test 1\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n   }\n\n   context(\"f:test 2\") {\n      // this will be executed\n      test(\"foo\") {\n         // this will be executed\n      }\n   }\n\n   context(\"test 3\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoClose in Kotest StringSpec\nDESCRIPTION: Demonstrates how to use autoClose wrapper in a Kotest StringSpec to automatically close a StringReader resource after test completion. The resource must implement java.lang.AutoCloseable interface. Resources are closed in reverse order of declaration after all spec interceptors complete.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/autoclose.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener in Kotest FunSpec (Per Spec Mode)\nDESCRIPTION: Example of using WireMockListener in a Kotest FunSpec test class. This snippet demonstrates setting up a WireMockServer that runs for the entire spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/wiremock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_SPEC))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n    //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Embedded Kafka Listener with Custom Port\nDESCRIPTION: Demonstrates creating an instance of EmbeddedKafkaListener with a custom port (5678) instead of using the default instance, and using it in a test with producer and consumer.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/kafka.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaCustomPortTest : FunSpec({\n\n   val listener = EmbeddedKafkaListener(5678)\n   listener(listener)\n\n   test(\"send / receive\") {\n\n      val producer = listener.stringStringProducer()\n      producer.send(ProducerRecord(\"foo\", \"a\"))\n      producer.close()\n\n      val consumer = listener.stringStringConsumer(\"foo\")\n      eventually(10.seconds) {\n         consumer.poll(1000).first().value() shouldBe \"a\"\n      }\n      consumer.close()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic PropTestConfig Usage in Kotest Property Tests\nDESCRIPTION: Demonstrates how to apply PropTestConfig to a property test within a StringSpec. This example shows where configuration options would be specified in a basic string property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String>(PropTestConfig(options here...)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Random Lists with Kotest Arb\nDESCRIPTION: Creates lists of random size (within a specified range) where each element is generated by the given element generator. This allows for flexible list generation in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_31\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.list(gen, range)\n```\n\n----------------------------------------\n\nTITLE: Using TestLogger in Custom Assertion Functions\nDESCRIPTION: This snippet illustrates how to use the TestLogger object in custom assertion functions. It shows how to pass the logger to a custom function and use it to log information during the assertion process.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/logging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something else\") {\n  logger.assertSomething(\"something else\")\n}\n\nfun TestLogger.assertSomething(actual: String) {\n   info { \"asserting something about $actual\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Using asClue Extension Function with Lambda\nDESCRIPTION: Alternative syntax for adding clues using the asClue extension function on a lambda. This is functionally equivalent to withClue with a lambda.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Name should be present (user_id=${user.id})\" }.asClue {\nuser.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Date and Time Generator API\nDESCRIPTION: Available generator functions for KotlinX DateTime types including LocalDate, LocalDateTime and Instant with their respective parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/date_gens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.date(yearRange)\nArb.datetime(yearRange, hourRange, minuteRange, secondRage)\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Using Clues for Enhanced Test Context\nDESCRIPTION: Demonstrates how to add contextual information to test assertions using withClue and asClue helpers for better failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") { user.name shouldNotBe null }\n\ndata class HttpResponse(val status: Int, body: String)\nval response = HttpResponse(200, \"the content\")\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Jacoco Plugin to Gradle\nDESCRIPTION: This snippet shows how to add the Jacoco plugin to the Gradle build file. It's the first step in integrating Jacoco for code coverage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/integrations/jacoco.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n   ...\n   jacoco\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Option Type Matchers in Kotest Arrow\nDESCRIPTION: Assertion methods for Option type in Arrow. Includes matchers to verify Some and None cases with optional value validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\noption.shouldBeSome()\noption.shouldBeSome(v)\noption.shouldBeNone()\n```\n\n----------------------------------------\n\nTITLE: Configuring Jacoco Settings\nDESCRIPTION: Configures Jacoco tool version and optional custom report directory location in Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/integrations/jacoco.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\njacoco {\n    toolVersion = \"0.8.7\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Single Instance Mode Example in Kotest\nDESCRIPTION: Demonstrates the SingleInstance isolation mode where the same instance is used for all tests\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/isolation_mode.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SingleInstanceExample : WordSpec({\n   val id = UUID.randomUUID()\n   \"a\" should {\n      println(id)\n      \"b\" {\n         println(id)\n      }\n      \"c\" {\n         println(id)\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest Isolation Mode Example in Kotlin\nDESCRIPTION: This example shows the InstancePerTest isolation mode, where a new instance is created for every test case, including inner contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/isolation_mode.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Test Timeout in Kotest\nDESCRIPTION: Example of setting a timeout for all tests in a spec by assigning the timeout property at the spec level. All tests within this spec will timeout after 100 milliseconds if not completed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   timeout = 100.milliseconds\n\n   test(\"this test will timeout quickly!\") {\n      // test here\n   }\n\n   test(\"so will this one!\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Exhaustive Generator in Kotest Property Tests\nDESCRIPTION: Shows how to use a custom exhaustive generator within a Kotest property test to verify properties of prime numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/customgens.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n    \"testing single digit primes\" {\n        checkAll(singleDigitPrimes) { prime ->\n           isPrime(prime) shouldBe true\n           isPrime(prime * prime) shouldBe false\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with Bang Modifier in Kotest StringSpec\nDESCRIPTION: Illustrates the use of the '!' prefix to skip specific tests in a Kotest StringSpec, while allowing other tests to run normally.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/focus.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Exhaustive Generator in Kotlin\nDESCRIPTION: Shows how to create an exhaustive generator from a list of prime numbers using the exhaustive() extension function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/customgens.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval singleDigitPrimes = listOf(2,3,5,7).exhaustive()\n```\n\n----------------------------------------\n\nTITLE: URI Assertions in Kotest\nDESCRIPTION: Methods for verifying various components of URIs including authority, fragment, host, parameters, path, port, query and scheme\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveAuthority(fragment)\nuri.shouldHaveFragment(fragment)\nuri.shouldHaveHost(scheme)\nuri.shouldHaveParameter(scheme)\nuri.shouldHavePath(scheme)\nuri.shouldHavePort(scheme)\nuri.shouldHaveQuery(fragment)\nuri.shouldHaveScheme(scheme)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Tests Based on Operating System in Kotest\nDESCRIPTION: Demonstrates how to conditionally run tests based on the operating system by using the 'enabled' flag with Apache Commons Lang's SystemUtils.IS_OS_LINUX property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/config_enabled.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = IS_OS_LINUX) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Until Function with Duration in Kotest\nDESCRIPTION: Demonstrates how to use the 'until' function with a specified duration to poll a broker until at least one message is received. The test will wait up to 5 seconds for the condition to become true.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/until.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Schema with Length and Uniqueness in Kotlin\nDESCRIPTION: Illustrates how to define JSON schemas for arrays with length constraints and uniqueness requirements using Kotest's DSL.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/json/schema.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval lengthBoundedSchema = jsonSchema {\n  array(minItems = 0, maxItems = 1) { number() }\n}\n\nval uniqueArray = jsonSchema {\n  array(uniqueItems = true) { number() }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TestDispatcher for Entire Spec in Kotest\nDESCRIPTION: This snippet illustrates how to enable TestDispatcher for all tests within a Kotest spec by setting coroutineTestScope to true at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      coroutineTestScope = true\n      test(\"this test uses a test dispatcher\") {\n      }\n      test(\"and so does this test!\") {\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting URI Properties in Kotlin with Kotest\nDESCRIPTION: These assertions validate various properties of URIs, including authority, fragment, host, parameters, path, port, query, and scheme. They allow for detailed verification of URI components.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveAuthority(fragment)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveFragment(fragment)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveHost(scheme)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveParameter(scheme)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHavePath(scheme)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHavePort(scheme)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveQuery(fragment)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveScheme(scheme)\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-line Test Names in Kotest\nDESCRIPTION: Shows how to create test names spanning multiple lines using triple-quoted strings in Kotest. With the removeTestNameWhitespace configuration enabled, excess whitespace will be stripped from displayed test names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.3.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n  init {\n   \"\"\"this is a\n      test spanning multiple lines\"\"\" { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable Callbacks in Kotest\nDESCRIPTION: Shows how to create reusable callbacks that can be shared across multiple test files, using a database reset example.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/writing_tests.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval resetDatabase: BeforeTest = {\n  // truncate all tables here\n}\n\nclass ReusableCallbacks : FunSpec({\n\n   beforeTest(resetDatabase)\n\n   test(\"this test will have a sparkling clean database!\") {\n       // test logic here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Statistics Reporter in Kotlin Property Tests\nDESCRIPTION: This example demonstrates how to configure a custom StatisticsReporter for property tests. It allows for customization of the report format or generation of reports from raw data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/statistics.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyStatisticsReporter : object : StatisticsReporter { ... }\nPropertyTesting.statisticsReporter = MyStatisticsReporter\n```\n\n----------------------------------------\n\nTITLE: Generating Positive Float Values in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces positive Float values, with options to include non-finite edge cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.positiveFloat(includeNonFiniteEdgeCases)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jacoco XML Report Task in Gradle (Kotlin)\nDESCRIPTION: This snippet adds a task to generate XML reports for Jacoco. It ensures that the test task is run before generating the report and enables XML report generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/integrations/jacoco.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.jacocoTestReport {\n    dependsOn(tasks.test)\n    reports {\n        xml.isEnabled = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Domain Names with Kotest Arb\nDESCRIPTION: Produces random domain names using a specified list of TLDs (defaults to top 120) and a label generator for domain parts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_24\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.domain(tlds, labelArb)\n```\n\n----------------------------------------\n\nTITLE: File Assertions in Kotest\nDESCRIPTION: Extension functions for asserting properties of File objects. Includes methods for checking file attributes, content, existence, path relationships, and directory contents.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeAbsolute()\nfile.shouldBeADirectory()\nfile.shouldBeAFile()\nfile.shouldBeCanonical()\nfile.shouldBeEmpty()\nfile.shouldBeExecutable()\nfile.shouldBeHidden()\nfile.shouldBeReadable()\nfile.shouldBeRelative()\nfile.shouldBeSmaller(file)\nfile.shouldBeLarger(file)\nfile.shouldBeWriteable()\ndir.shouldBeNonEmptyDirectory()\ndir.shouldContainFile(name)\ndir.shouldContainNFiles(name)\nfile.shouldExist()\nfile.shouldHaveExtension(ext)\nfile.shouldHaveFileSize(size)\nfile.shouldHaveName(name)\nfile.shouldHavePath(path)\nfile.shouldStartWithPath(prefix)\ndir.shouldContainFileDeep(name)\ndir.shouldContainFiles(name1, name2, ..., nameN)\nfile.shouldBeSymbolicLink()\nfile.shouldHaveParent(name)\n```\n\n----------------------------------------\n\nTITLE: Using withClue with Lambda for Dynamic Messages\nDESCRIPTION: Using withClue with a lambda expression to create a dynamic error message that includes runtime values, only evaluated if the test fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue({ \"Name should be present (user_id=${user.id})\" }) {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Using RequiresTag Annotation in Kotest\nDESCRIPTION: Demonstrating how to use the @RequiresTag annotation to specify that a test class should only run when specific tags are enabled.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/tags.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresTag(\"Linux\", \"Mysql\")\nclass MyTestClass : FunSpec()\n```\n\n----------------------------------------\n\nTITLE: Assertion Mode Error Output\nDESCRIPTION: This snippet shows the console output when a test fails due to not containing any assertions when the assertion mode is set to Error. The message clearly indicates which test is missing assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/assertion_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTest 'this test has no assertions' did not invoke any assertions\n```\n\n----------------------------------------\n\nTITLE: ByteArray Resource Equality Matching in Kotlin\nDESCRIPTION: Matchers for comparing byte arrays with resource files. These are useful for testing binary data against expected binary resources stored as files.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray shouldMatchResource \"/path/to/test_resource.bin\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray shouldNotMatchResource \"/path/to/test_resource.bin\"\n```\n\n----------------------------------------\n\nTITLE: Using withClue for Enhanced Assertion Messages in Kotlin\nDESCRIPTION: Demonstrates how to use 'withClue' to add context to an assertion, improving the error message if the assertion fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/clues.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Name Whitespace\nDESCRIPTION: Enables removal of excess whitespace from multiline test names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/project_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val testNameRemoveWhitespace = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Timeout in Kotest FunSpec\nDESCRIPTION: This example shows how to set a timeout for all tests in a spec file. Both tests in this FunSpec will timeout after 100 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   timeout = 100.milliseconds\n\n   test(\"this test will timeout quickly!\") {\n      // test here\n   }\n\n   test(\"so will this one!\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Resource Closure in Kotest StringSpec\nDESCRIPTION: This snippet demonstrates how to use the autoClose function in a Kotest StringSpec to automatically close a StringReader resource after test execution. The resource must implement java.lang.AutoCloseable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/autoclose.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using System Environment Extension with Multiple Values in Kotlin\nDESCRIPTION: Shows how to use the System Environment Extension with multiple key-value pairs in Kotest tests, using a map or list of pairs to override environment variables.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(mapOf(\"FooKey\" to \"BarValue\", \"BarKey\" to \"FooValue\")) {\n  // Use FooKey and BarKey\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Test Factory\nDESCRIPTION: Implementation of a reusable test factory function that can test any IndexedSeq implementation, demonstrating test reusability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_factories.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> indexedSeqTests(name: String, empty: IndexedSeq<T>) = wordSpec {\n   name should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Fail on Empty Test Suite in Kotest Project Configuration\nDESCRIPTION: This code snippet demonstrates how to set up a ProjectConfig class to enable the 'failOnEmptyTestSuite' option. When set to true, it causes the build to fail if no tests are executed in a module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/fail_on_empty.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val failOnEmptyTestSuite = true\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Testcontainers Per Spec with Kotest Listeners\nDESCRIPTION: Example showing how to register a Testcontainer to start and stop once per spec using the new testcontainers extension module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perSpec())\n```\n\n----------------------------------------\n\nTITLE: Parsing a JSON Schema from Text in Kotlin\nDESCRIPTION: Shows how to parse a JSON Schema from a text string. The schema defines a geographical coordinate with latitude and longitude properties, setting validation constraints such as minimum and maximum values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/json/schema.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval parsedSchema = parseSchema(\n  \"\"\"\n  {\n  \"$id\": \"https://example.com/geographical-location.schema.json\",  // will  be ignored\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",       // will be ignored\n  \"title\": \"Longitude and Latitude Values\",                        // will be ignored\n  \"description\": \"A geographical coordinate.\",                     // will be ignored\n  \"required\": [ \"latitude\", \"longitude\" ],\n  \"type\": \"object\",\n  \"properties\": {\n    \"latitude\": {\n      \"type\": \"number\",\n      \"minimum\": -90,\n      \"maximum\": 90\n    },\n    \"longitude\": {\n      \"type\": \"number\",\n      \"minimum\": -180,\n      \"maximum\": 180\n    }\n  }\n}\n  \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Complex Person Matcher\nDESCRIPTION: Shows how to combine multiple matchers to create a complex matcher for Person objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/composed_matchers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun personMatcher(name: String, age: Int) = Matcher.all(\n  havingProperty(nameMatcher(name) to Person::name),\n  havingProperty(ageMatcher(age) to Person::age),\n  havingProperty(addressMatcher to Person::address)\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid UserProfile with Konform Matcher in Kotlin\nDESCRIPTION: This snippet shows how to use the Konform matcher 'shouldBeInvalid' to assert that a UserProfile instance fails validation, and how to check for specific error messages on individual properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/konform.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval bob = UserProfile(\"bob\", 18)\nvalidateUser.shouldBeInvalid(a) {\n  it.shouldContainError(UserProfile::fullName, \"must have at least 4 characters\")\n  it.shouldContainError(UserProfile::age, \"must be at least '21'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom JUnit XML Reports in ProjectConfig\nDESCRIPTION: Shows how to configure Kotest's JunitXmlReporter in a ProjectConfig implementation to include container tests and use full test paths in the XML output, improving clarity in nested test reporting.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.2.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override fun listeners(): List<Listener> = listOf(\n     JunitXmlReporter(\n        includeContainers = true, // write out status for all tests\n        useTestPathAsName = true // use the full test path (ie, includes parent test names)\n     )\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Test Factory with Lifecycle Callbacks\nDESCRIPTION: Example of implementing beforeTest callbacks in a test factory that only apply to tests within that factory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_factories.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval factory1 = funSpec {\n  beforeTest {\n     println(\"Executing $it\")\n  }\n  test(\"a\") {  }\n  test(\"b\") {  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LifecycleExample : FunSpec({\n   include(factory1)\n   test(\"c\")\n   test(\"d\")\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing EnabledCondition for conditional spec execution in Kotest\nDESCRIPTION: Shows how to create a custom condition for conditionally enabling specs. This example implements the EnabledCondition interface to only run tests with 'Linux' in their name when on a Linux operating system.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/annotations.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LinuxOnlyCondition : EnabledCondition {\n  override fun enabled(kclass: KClass<out Spec>): Boolean = when {\n    kclass.simpleName?.contains(\"Linux\") == true -> IS_OS_LINUX\n    else -> true // non Linux tests always run\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Component Matchers\nDESCRIPTION: Demonstrates creating individual matchers for each component of a complex object structure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/composed_matchers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun nameMatcher(name: String) = Matcher<String> {\n  MatcherResult(\n    value == name,\n    { \"Name $value should be $name\" },\n    { \"Name $value should not be $name\" }\n  )\n}\n\nfun ageMatcher(age: Int) = Matcher<Int> {\n  MatcherResult(\n    value == age,\n    { \"Age $value should be $age\" },\n    { \"Age $value should not be $age\" }\n  )\n}\n\nval addressMatcher = Matcher<Address> {\n  MatcherResult(\n    value == Address(\"Warsaw\", \"Test\", \"1/1\"),\n    { \"Address $value should be Test 1/1 Warsaw\" },\n    { \"Address $value should not be Test 1/1 Warsaw\" }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Failure Tolerance in Property Tests\nDESCRIPTION: Shows how to configure a property test to allow up to 3 failures using maxFailure parameter in PropTestConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some flakey test\" {\n      forAll<String, String>(PropTestConfig(maxFailure = 3)) { a,b ->\n         // max of 3 inputs can fail\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Clues in Kotlin\nDESCRIPTION: Using multiple nested clues to provide hierarchical context for assertions, which is useful for grouping related assertions with appropriate context.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Verifying user_id=${user.name}\" }.asClue {\n  \"email_confirmed should be false since we've just created the user\".asClue {\n    user.emailConfirmed shouldBe false\n  }\n  \"login\".asClue {\n    user.login shouldBe \"sksamuel\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Until Function with Fibonacci Interval\nDESCRIPTION: Demonstrates using the until function with a fibonacci interval starting at 100 milliseconds, which increases the delay between checks using the fibonacci sequence.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/until.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 100.milliseconds.fibonacci()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TestDispatcher for All Tests in a Kotest Spec\nDESCRIPTION: This snippet illustrates how to enable TestDispatcher for all tests within a Kotest spec by setting coroutineTestScope to true at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      coroutineTestScope = true\n      test(\"this test uses a test dispatcher\") {\n      }\n      test(\"and so does this test!\") {\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PropTestListener for Test Setup and Teardown\nDESCRIPTION: Shows how to register a PropTestListener for handling setup and teardown operations in each iteration of a property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some property test which require setup and tear down in each iteration\" {\n      forAll<String, String>(PropTestConfig(listeners = listOf(MyPropTestListener))) { a,b ->\n         // some assertion\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Spring Test Lifecycle Mode in Kotest\nDESCRIPTION: Shows how to customize when Spring test method callbacks are fired by setting the SpringTestLifecycleMode to Root instead of the default leaf node behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/spring.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringTestExtension(SpringTestLifecycleMode.Root))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ExpectSpec in Kotlin\nDESCRIPTION: Demonstrates how to create a simple test using ExpectSpec in Kotest. ExpectSpec uses the 'expect' keyword to define test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    expect(\"my test\") {\n        // test here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporter in Kotest Project Config\nDESCRIPTION: Implementation of AbstractProjectConfig to add JunitXmlReporter extension with customizable parameters for includeContainers and useTestPathAsName options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/junit_xml.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(\n    JunitXmlReporter(\n      includeContainers = false,\n      useTestPathAsName = true\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Spec Level Extensions in Kotlin\nDESCRIPTION: Example showing how to create and register before/after spec listeners that execute code before and after test specifications. The example demonstrates managing Kafka lifecycle within tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/extensions/extensions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestListener : BeforeSpecListener, AfterSpecListener {\n   override suspend fun beforeSpec(spec:Spec) {\n      // power up kafka\n   }\n   override suspend fun afterSpec(spec: Spec) {\n      // shutdown kafka\n   }\n}\n\n\nclass TestSpec : WordSpec({\n    extension(MyTestListener())\n    // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Exhaustive Enum Generation in Kotlin with Kotest\nDESCRIPTION: Iterates through all constants defined in a given enum. Ideal for ensuring that all enum values are tested in functions that process enums.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.enum<T>()\n```\n\n----------------------------------------\n\nTITLE: Testing Any Exception Type in Kotlin with Kotest\nDESCRIPTION: Demonstrates using shouldThrowAny to test if any type of exception is thrown, regardless of the specific exception type. Useful for general exception handling testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/exceptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowAny {\n  // test here can throw any type of Throwable!\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Any Exception in Kotlin using Kotest\nDESCRIPTION: Demonstrates the use of shouldThrowAny to assert that any type of exception is thrown, regardless of its specific type. This is useful when the exact exception type is not important.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/exceptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowAny {\n  // test here can throw any type of Throwable!\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Dates in Kotest\nDESCRIPTION: Assertion functions for validating date and time values in Kotest tests, including comparison, component validation, and range checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameMonthAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameDayAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeBefore(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeAfter(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeWithin(period, otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeWithin(duration, otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeBetween(firstDate, secondDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveYear(year)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveMonth(month)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfYear(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfMonth(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfWeek(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveHour(hour)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveMinute(Minute)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSecond(second)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveNano(nao)\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Arbitraries with FlatMap\nDESCRIPTION: Shows how to use flatMap to create generators whose output depends on the value produced by a previous generator, useful for generating structured data with dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genops.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval dependentArbs: Arb<String> = Arb.of(\"foo\", \"bar\").flatMap { prefix ->\n   Arb.int(1..10).map { integer ->\n      \"${prefix}-${integer}\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest Spec\nDESCRIPTION: This snippet demonstrates how to set the assertion mode to 'Error' within a Kotest spec. It includes a test case that doesn't contain an actual assertion, which will trigger the configured assertion mode behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/assertion_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec() {\n   init {\n      assertions = AssertionMode.Error\n      test(\"this test has no assertions\") {\n         val name = \"sam\"\n         name.length == 3 // this isn't actually testing anything\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bang Prefix to Skip Tests\nDESCRIPTION: Demonstrates using the ! prefix to skip specific tests while allowing others to run. Tests prefixed with ! are ignored during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/focus.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TestDispatcher Globally using ProjectConfig\nDESCRIPTION: Demonstrates how to enable TestDispatcher for all tests in a module using ProjectConfig\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override var coroutineTestScope = true\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Producer and Consumer Usage Example\nDESCRIPTION: Shows how to create and use Kafka producers and consumers with the embedded Kafka listener, including sending and receiving messages with assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/kafka.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n\n   test(\"send / receive\") {\n\n     val producer = embeddedKafkaListener.stringStringProducer()\n     producer.send(ProducerRecord(\"foo\", \"a\"))\n     producer.close()\n\n     val consumer = embeddedKafkaListener.stringStringConsumer(\"foo\")\n     eventually(10.seconds) {\n       consumer.poll(1000).first().value() shouldBe \"a\"\n     }\n     consumer.close()\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Numeric Doubles in Kotlin using Kotest\nDESCRIPTION: Creates an Arb that produces numeric Double values within a specified range. Includes edge cases like min, -1.0, -Double.MIN_VALUE, -0.0, 0.0, Double.MIN_VALUE, 1.0, and max if they fall within the range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.numericDouble(min, max)\n```\n\n----------------------------------------\n\nTITLE: Nested Data Testing with Custom Test Names\nDESCRIPTION: Shows how to implement nested data tests with custom test name formatting for the inner test cases. Uses a custom name generator for the second level of tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/nested.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n    val services = listOf(\n       \"http://internal.foo\",\n       \"http://internal.bar\",\n       \"http://public.baz\",\n    )\n\n    val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n    withData(services) { service ->\n       withData<String>({ \"should support HTTP $it\" }, methods) { method ->\n          // test service against method\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Complex Assumptions in Kotlin Property Tests\nDESCRIPTION: Demonstrates the use of inline assume function with multiple assertions to filter input combinations in a property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/assumptions.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume {\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Property Testing for Maven\nDESCRIPTION: Maven dependency configuration for adding Kotest property testing support to a JVM project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Disabling Classpath Scanning in Kotest\nDESCRIPTION: Demonstrates how to disable Kotest's classpath scanning features to improve startup time. These properties are set in the kotest.properties file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/intellij/props.md#2025-04-13_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nkotest.framework.classpath.scanning.config.disable=true\nkotest.framework.classpath.scanning.autoscan.disable=true\n```\n\n----------------------------------------\n\nTITLE: Using Security Manager Listener\nDESCRIPTION: Implementing a SecurityManagerListener for a test specification to override the security manager for all tests within that spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n          override fun listeners() = listOf(SecurityManagerListener(myManager))\n\n        init {\n          // Use my security manager\n        }\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener with Per-Test Lifecycle\nDESCRIPTION: Shows how to configure WireMockListener to start and stop the WireMockServer for each individual test within the specification, using ListenerMode.PER_TEST.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/wiremock.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_TEST))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n  //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Mock Setup Before Tests\nDESCRIPTION: Solution using beforeTest listener to create fresh mock instances before each test execution. This ensures clean mock state for each test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/integrations/mocks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    lateinit var repository: MyRepository\n    lateinit var target: MyService\n\n    beforeTest {\n        repository = mockk()\n        target = MyService(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using DescribeSpec for BDD-Style Tests in Kotlin\nDESCRIPTION: Demonstrates using the DescribeSpec class which provides BDD-style test structure with 'describe', 'it', and 'and' blocks similar to SpekFramework.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DescribeSpecExample : DescribeSpec() {\n  init {\n    describe(\"some context\") {\n      it(\"test name\") {\n        // test here\n      }\n      describe(\"nested contexts\") {\n        and(\"another context\") {\n          it(\"test name\") {\n            // test here\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions in Kotlin\nDESCRIPTION: Shows how to chain multiple assertions together using Kotest's fluent API.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n           .shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n           .shouldStartWith(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Spring Autowired Constructor Injection in KotlinTest\nDESCRIPTION: This snippet demonstrates how to use constructor injection with the Spring extension module in KotlinTest. It shows how to add the SpringAutowireConstructorExtension to the ProjectConfig and use injected dependencies in the test class constructor.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec({\n  \"SpringListener\" should {\n    \"have autowired the service\" {\n      service.repository.findUser().name shouldBe \"system_user\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Elements Collection with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers are used to assert properties of an Elements collection, such as the presence of items and the specific number of items.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/jsoup.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nelements.shouldBePresent()\nelements.shouldBePresent(n)\nelements.shouldBePresent(n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Central Snapshots Repository in Kotlin Build Script\nDESCRIPTION: Adds the Maven Central Snapshots repository to the project's build configuration to enable access to Kotest snapshot versions. Uses the Sonatype OSS repository and restricts content to snapshots only.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n    maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots/\") {\n        name = \"MavenCentralSnapshots\"\n        mavenContent { snapshotsOnly() }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in BehaviorSpec\nDESCRIPTION: Shows how to disable tests in BehaviorSpec using the xgiven, xwhen, and xthen variants. These allow disabling specific parts of BDD-style test specifications.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    xgiven(\"this is disabled\") {\n        When(\"disabled by inheritance from the parent\") {\n            then(\"disabled by inheritance from its grandparent\") {\n                // disabled test\n            }\n        }\n    }\n    given(\"this is active\") {\n        When(\"this is active too\") {\n            xthen(\"this is disabled\") {\n               // disabled test\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using contain Map Matcher in Kotest\nDESCRIPTION: Example of the contain matcher for maps, which verifies that a map contains a specific key-value pair.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should contain(1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Disabling BlockHound for a Specific Test\nDESCRIPTION: Demonstrates how to disable BlockHound for an individual test case using the config parameter, even when BlockHound is enabled at the spec or project level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/blockhound.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n   test(\"allow blocking\").config(extensions = listOf(BlockHound(BlockHoundMode.DISABLED))) {\n      blockInNonBlockingContext()\n   }\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener in Kotest FunSpec (Per Test Mode)\nDESCRIPTION: Example of using WireMockListener in a Kotest FunSpec with per-test mode. It shows how to set up a WireMockServer that starts and stops for each individual test in the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/wiremock.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_TEST))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n  //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Project-Level Extensions with @AutoScan in Kotlin\nDESCRIPTION: Demonstrates how to create project-level extensions using the @AutoScan annotation. This example implements both BeforeProjectListener and AfterProjectListener interfaces to execute code at the beginning and end of the entire test suite.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/extensions/extensions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@AutoScan\nobject MyProjectListener : BeforeProjectListener, AfterProjectListener {\n  override suspend fun beforeProject() {\n    println(\"Project starting\")\n  }\n  override suspend fun afterProject() {\n    println(\"Project complete\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Property Test with Built-in Generator Shrinking\nDESCRIPTION: Example showing how to use a built-in positive integer generator with automatic shrinking functionality. When a test fails, Kotest will attempt to shrink the failing value to find the simplest failing case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/shrinking.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Count in 'eventually' with Kotlin\nDESCRIPTION: Shows how to limit 'eventually' by both time and retry count. This configuration will retry the operation up to 10 times, with a maximum total duration of 8 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/eventually.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  initialDelay = 8.seconds\n  retries = 10\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Test Factory with Lifecycle Callbacks in a Test Suite in Kotlin\nDESCRIPTION: This snippet shows how to include a test factory with lifecycle callbacks in a test suite, demonstrating that the callbacks only apply to tests from the factory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_factories.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LifecycleExample : FunSpec({\n   include(factory1)\n   test(\"c\")\n   test(\"d\")\n})\n```\n\n----------------------------------------\n\nTITLE: Eventually with Custom Exception Handling\nDESCRIPTION: Example of using a custom function to determine which exceptions to suppress.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/concurrency/eventually.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 8000\n  suppressExceptionIf = { it is UserNotFoundException && it.username == \"bob\" }\n}) {\n  userRepository.getById(1).name shouldNotBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Project-Wide Coroutine Debugging in Kotest\nDESCRIPTION: Demonstrates how to enable coroutine debugging for all tests in a project by configuring it in ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val coroutineDebugProbes = true\n}\n```\n\n----------------------------------------\n\nTITLE: Continually with Custom Poll Interval in Kotest\nDESCRIPTION: An example showing how to use the 'continually' function with a custom polling interval. By default, the function checks every 10 milliseconds, but this example sets it to check every 5 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/continually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds, 5.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Composed Matcher with Logical AND in Kotlin\nDESCRIPTION: Creates a password matcher that checks if a string contains a digit, a lowercase letter, and an uppercase letter using the Matcher.all function which combines multiple matchers with AND logic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/composed_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval passwordMatcher = Matcher.all(\n   containADigit(), contain(Regex(\"[a-z]\")), contain(Regex(\"[A-Z]\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast for a Specific Test Context in Kotest\nDESCRIPTION: Demonstrates how to enable fail fast for a specific test context. When a test fails inside this context, all subsequent tests in that context will be skipped. The example shows passing, failing, and skipped tests within a nested context structure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/fail_fast.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n      context(\"context with fail fast enabled\").config(failfast = true) {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Matchers in Kotlin with Kotest\nDESCRIPTION: Matchers for validating object types, instances, and related properties in Kotest. These assertions help verify the type safety and instance relationships between objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBeSameInstanceAs(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBeTypeOf<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBeInstanceOf<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldHaveAnnotation(annotationClass)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBeNull()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JSON Comparison Function in Kotlin\nDESCRIPTION: Example of defining a custom comparison function with specific options for more flexible JSON matching.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/json/content.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval myOptions = compareJsonOptions {\n  typeCoercion = TypeCoercion.Enabled\n  arrayOrder = ArrayOrder.Lenient\n}\n\ninfix fun String.lenientShouldEqualJson(other: String) = this.shouldEqualJson(other, myOptions)\n\n\"[1, 2]\" lenientShouldEqualJson \"[2, 1]\" // This will pass\n```\n\n----------------------------------------\n\nTITLE: Implementing FreeSpec in Kotlin with Kotest\nDESCRIPTION: Demonstrates the FreeSpec style in Kotest, which allows arbitrary nesting of tests using the '-' operator. It shows how to create nested test structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FreeSpec({\n    \"String.length\" - {\n        \"should return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n    \"containers can be nested as deep as you want\" - {\n        \"and so we nest another container\" - {\n            \"yet another container\" - {\n                \"finally a real test\" {\n                    1 + 1 shouldBe 2\n                }\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Statistical Matchers in Kotest\nDESCRIPTION: Statistical assertion matchers for testing collections, including assertions for mean, variance, and standard deviation with configurable precision levels.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveMean(mean)\ncollection.shouldHaveMean(mean, precision)\ncollection.shouldHaveVariance(mean)\ncollection.shouldHaveVariance(mean, precision)\ncollection.shouldHaveStandardDeviation(mean)\ncollection.shouldHaveStandardDeviation(mean, precision)\n```\n\n----------------------------------------\n\nTITLE: Marking Tests with Tags\nDESCRIPTION: Demonstration of how to apply tags to individual test cases using the config function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/tags.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Continually Function in Kotest\nDESCRIPTION: Demonstrates how to use the 'continually' function to assert that a block of code succeeds for 60 seconds. The function executes the provided code block every 10 milliseconds by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/continually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing List Test Spec in Kotest\nDESCRIPTION: Example test implementation for a List class using Kotest's WordSpec style, testing size and contains functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_factories.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ListTest : WordSpec({\n\n   val empty = List<Int>()\n\n   \"List\" should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing No-stdout and No-stderr Listeners in Kotlin Tests\nDESCRIPTION: Shows how to use NoSystemOutListener and NoSystemErrListener to prevent direct output to System.out and System.err in Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n```\n\n----------------------------------------\n\nTITLE: Combining Test and Invocation Timeouts in Kotest DescribeSpec\nDESCRIPTION: This snippet shows how to combine overall test timeout with invocation timeout for a test that runs multiple times in a DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(timeout = 100.milliseconds, invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Random UUIDs in Kotlin using Kotest\nDESCRIPTION: Generates random UUIDs of a specified type.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.uuid(type)\n```\n\n----------------------------------------\n\nTITLE: Using SystemEnvironmentTestListener for Spec-level Environment Variables\nDESCRIPTION: Demonstrates how to use SystemEnvironmentTestListener to apply environment variable overrides at the test specification level, affecting all tests within that spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemEnvironmentTestListener(\"foo\", \"bar\"))\n\n    init {\n      \"MyTest\" {\n        System.getenv(\"foo\") shouldBe \"bar\"\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockServer Test in Kotest with Kotlin\nDESCRIPTION: Demonstrates how to set up and use MockServer in a Kotest test specification. Shows configuration of mock HTTP endpoints, request/response handling, and validation using Ktor client. Includes lifecycle management through MockServerListener and request verification using kotest-assertions-ktor.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/mockserver.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyMockServerTest : FunSpec() {\n  init {\n\n      // this attaches the server to the lifeycle of the spec\n      listener(MockServerListener(1080))\n\n      // we can use the client to create routes. Here we are setting them up\n      // before each test by using the beforeTest callback.\n      beforeTest {\n         MockServerClient(\"localhost\", 1080).`when`(\n            HttpRequest.request()\n               .withMethod(\"POST\")\n               .withPath(\"/login\")\n               .withHeader(\"Content-Type\", \"application/json\")\n               .withBody(\"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\")\n         ).respond(\n            HttpResponse.response()\n               .withStatusCode(202)\n               .withHeader(\"X-Test\", \"foo\")\n         )\n      }\n\n      // this test will confirm the endpoint works\n      test(\"login endpoint should accept username and password json\") {\n\n         // using the ktor client to send requests\n         val client = HttpClient(CIO)\n         val resp = client.post<io.ktor.client.statement.HttpResponse>(\"http://localhost:1080/login\") {\n            contentType(ContentType.Application.Json)\n            body = \"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\"\n         }\n\n         // these handy matchers come from the kotest-assertions-ktor module\n         resp.shouldHaveStatus(HttpStatusCode.Accepted)\n         resp.shouldHaveHeader(\"X-Test\", \"foo\")\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Lists in Kotlin with Kotest\nDESCRIPTION: Uses Arb.list() to generate lists of random size within a specified range, where each element is generated by the given element generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_26\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.list(gen, range)\n```\n\n----------------------------------------\n\nTITLE: Integer Assertions in Kotest\nDESCRIPTION: Matchers for asserting properties of integers in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nint.shouldBeBetween(x, y)\nint.shouldBeLessThan(n)\nint.shouldBeLessThanOrEqual(n)\nint.shouldBeGreaterThan(n)\nint.shouldBeGreaterThanOrEqual(n)\nint.shouldBeEven()\nint.shouldBeOdd()\nint.shouldBeInRange(range)\nint.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generators in Kotest Property Testing\nDESCRIPTION: Demonstrates the use of exhaustive generators in Kotest property testing to ensure all combinations are executed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.2.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = checkAll(\n   Exhaustive.ints(0..5),\n   Exhaustive.ints(0..5),\n   Exhaustive.ints(0..5)\n) { ... }\n```\n\n----------------------------------------\n\nTITLE: Generating Either Instances in Kotest with Arrow\nDESCRIPTION: Examples of generating Either instances using Arrow generators in Kotest. Includes methods for generating balanced Either instances, as well as specific Right or Left instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.either(arbL, arbR)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.right(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.left(arb)\n```\n\n----------------------------------------\n\nTITLE: Koin Integration with DescribeSpec and Root Lifecycle\nDESCRIPTION: Advanced example showing Koin integration with DescribeSpec and Root lifecycle mode, allowing shared context between nested tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/koin.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : DescribeSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(module = myKoinModule, mode = KoinLifecycleMode.Root))\n\n    val userService by inject<UserService>()\n\n    init {\n        describe(\"use userService\") {\n            it(\"inside a leaf test\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n            it(\"this shares the same context\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tag Annotations in Kotest\nDESCRIPTION: Example of using @Tags and @RequiresTag annotations for spec-level tagging.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/tags.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresTag(\"Linux\", \"Mysql\")\nclass MyTestClass : FunSpec()\n```\n\n----------------------------------------\n\nTITLE: Regex Matchers in Kotest\nDESCRIPTION: Regular expression matchers for testing regex patterns and options, allowing comparison between regex objects, pattern validation, and regex option verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldBeRegex(anotherRegex)\nregex.shouldHavePattern(regexPattern)\nregex.shouldHaveExactRegexOptions(regexOptions)\nregex.shouldIncludeRegexOption(regexOption)\nregex.shouldIncludeRegexOptions(regexOptions)\n```\n\n----------------------------------------\n\nTITLE: Combining Overall and Invocation Timeouts in Kotest DescribeSpec\nDESCRIPTION: This example shows how to combine an overall test timeout with individual invocation timeouts. The test will run three times, with each invocation limited to 60 milliseconds and a total time limit of 100 milliseconds for all invocations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(timeout = 100.milliseconds, invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Kotest Non-deterministic Testing Functions\nDESCRIPTION: A table summarizing the non-deterministic testing functions provided by Kotest. It includes the function names and their roles in handling various scenarios of non-deterministic code testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/nondeterministic_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function                      | Role                                                                                                                                                                        |\n|-------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Eventually](eventually.md)   | Used to ensure that a test will _eventually_ pass within a specified time duration. The test is repeatedly executed until the test passes or the duration expires.          |\n| [Continually](continually.md) | Used to ensure that a test _continually_ passes for a period of time. Will repeatedly execute a test until the duration has expired or the test fails.                      |\n| [Until](until.md)             | Used to ensure that a predicate will eventually hold true within a specified time duration. The predicate is repeatedly executed until true or the duration expires.        |\n| [Retry](retry.md)             | Used to ensure that a test willi eventually pass within a given number of retries. The test is repeatedly executed until the test passes or the iteration count is reached. |\n```\n\n----------------------------------------\n\nTITLE: Date and Time Generation in Kotest\nDESCRIPTION: Functions for generating various date and time types with specified ranges and constraints.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_49\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.date(ranges)\nArb.datetime(ranges)\nArb.localDateTime(ranges)\nArb.localTime(startTime, endTime)\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Function for a Composed Matcher in Kotlin\nDESCRIPTION: This snippet shows how to create an extension function for a composed matcher, making it more readable and easier to use in test assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/composed_matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldBeStrongPassword() = this shouldBe passwordMatcher\n```\n\n----------------------------------------\n\nTITLE: Generating Sets with Kotest Arbitrary in Kotlin\nDESCRIPTION: Creates sets where values are generated by a specified element generator. The size of each set is determined by the provided range parameter with optional slippage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.set(gen, range, slippage)\n```\n\n----------------------------------------\n\nTITLE: Null Check Assertion Example\nDESCRIPTION: Demonstrates a simple null check assertion that could benefit from additional context using clues.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Custom Generator Usage in Property Testing\nDESCRIPTION: Demonstrates specifying custom generators for property tests using different integer ranges for age verification tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/test_functions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"is allowed to drink in Chicago\" {\n      forAll(Arb.int(21..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n   \"is allowed to drink in London\" {\n      forAll(Arb.int(18..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Property-Based Composed Matcher in Kotlin\nDESCRIPTION: Demonstrates how to use the custom shouldBePerson extension function to validate Person objects, with examples of both passing and failing cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/composed_matchers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nPerson(\"John\", 21, Address(\"Warsaw\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21)\nPerson(\"Sam\", 22, Address(\"Chicago\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21) // would fail\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Schema from String in Kotlin\nDESCRIPTION: Demonstrates how to parse a JSON Schema from a string representation. The schema defines a geographical coordinate object with latitude and longitude properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/json/schema.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval parsedSchema = parseSchema(\n  \"\"\"\n  {\n  \"$id\": \"https://example.com/geographical-location.schema.json\",  // will  be ignored\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",       // will be ignored\n  \"title\": \"Longitude and Latitude Values\",                        // will be ignored\n  \"description\": \"A geographical coordinate.\",                     // will be ignored\n  \"required\": [ \"latitude\", \"longitude\" ],\n  \"type\": \"object\",\n  \"properties\": {\n    \"latitude\": {\n      \"type\": \"number\",\n      \"minimum\": -90,\n      \"maximum\": 90\n    },\n    \"longitude\": {\n      \"type\": \"number\",\n      \"minimum\": -180,\n      \"maximum\": 180\n    }\n  }\n}\n  \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring maxDiscardPercentage in PropTestConfig for Kotest\nDESCRIPTION: Demonstrates how to increase the allowed discard rate by configuring the maxDiscardPercentage property in PropTestConfig to allow filtering more input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/assumptions.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<Int, Int>(PropTestConfig(maxDiscardPercentage = 55)) { a, b ->\n  withAssumptions(a % 2 == 0) {\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Concurrent Operations in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates assertion functions for concurrent operations in Kotest. It includes checks for function completion within a given duration and timeout assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nshouldCompleteWithin(timeout, unit, function)\nshouldTimeout(timeout, unit, function)\nshouldTimeout(duration, suspendableFunction)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Custom Arbitrary in Kotlin\nDESCRIPTION: Demonstrates how to create a basic arbitrary that generates random integers between 3 and 6 using the arbitrary builder with RandomSource.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/customgens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval sillyArb = arbitrary { rs: RandomSource ->\n   rs.random.nextInt(3..6)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using haveKey Matcher for Maps in KotlinTest\nDESCRIPTION: Demonstrates the new haveKey matcher for maps in KotlinTest. It shows how to assert that a map contains a specific key.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_57\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveKey(1)\n```\n\n----------------------------------------\n\nTITLE: Testing System Output with KotlinTest Listeners in Kotlin\nDESCRIPTION: Demonstrates using NoSystemOutListener and NoSystemErrListener to test for exceptions when writing to System.out or System.err. These listeners raise SystemOutWriteException or SystemErrWriteException when output is attempted.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NoSystemOutOrErrTest : StringSpec() {\n\n  override fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n\n  init {\n\n    \"System.out should throw an exception when the listener is added\" {\n      shouldThrow<SystemOutWriteException> {\n        System.out.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n\n    \"System.err should throw an exception when the listener is added\" {\n      shouldThrow<SystemErrWriteException> {\n        System.err.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with Kotest in Kotlin\nDESCRIPTION: Demonstrates how to test for exceptions using Kotest's shouldThrow function, including verifying the exception message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/index.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Initialization Scripts\nDESCRIPTION: Example of configuring multiple initialization scripts for a database container extension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds: DataSource = install(JdbcDatabaseContainerExtension(mysql)) {\n      maximumPoolSize = 8\n      minimumIdle = 4\n      dbInitScripts = listOf(\"/init.sql\", \"/sql-changesets\")\n   }\n```\n\n----------------------------------------\n\nTITLE: Exporting a Kotest Table to a Text File\nDESCRIPTION: This snippet shows how to export a Kotest table to a text file with a .table extension. It uses the writeTo method to save the table data to a file in the test resources directory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/table_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval tableFile = testResources.resolve(\"users.table\")\ntable.writeTo(tableFile)\n```\n\n----------------------------------------\n\nTITLE: Generating Random UUIDs with Kotest Arb\nDESCRIPTION: Creates random UUIDs of a specified type. This can be useful for generating unique identifiers in test scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.uuid(type)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with @Ignored Annotation in Kotlin\nDESCRIPTION: Demonstrates how to completely disable a test specification using the @Ignored annotation. When applied, the spec will not be instantiated, avoiding any resource setup or teardown.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/annotations.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Ignored\nclass IgnoredSpec : FunSpec() {\n  init {\n    error(\"boom\") // spec will not be created so this error will not happen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Test Cases in Kotlin\nDESCRIPTION: Data class that holds test case parameters for Pythagorean triple validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Basic Eventually Usage with Duration in Kotlin\nDESCRIPTION: Simple example of using eventually with a duration parameter to test asynchronous operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\neventually(5.seconds) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Order Annotation for Spec Ordering in Kotest\nDESCRIPTION: Illustrates the use of the @Order annotation to control the execution order of spec classes. Lower values are executed first, and classes without the annotation are considered last. This example shows four test classes with different order values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/spec_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Order(1)\nclass FooTest : FunSpec() { }\n\n@Order(0)\nclass BarTest: FunSpec() {}\n\n@Order(1)\nclass FarTest : FunSpec() { }\n\nclass BooTest : FunSpec() {}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Iterations in Kotest Property Tests\nDESCRIPTION: Demonstrates how to set and use global default iteration count for property tests, with examples of both global configuration and test-specific overrides.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/globalconfig.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nPropertyTesting.defaultIterationCount = 123\n\n// will use 555 iterations specified in the test\nforAll<String, String>(555) { a,b -> a + b == \"$a$b\" }\n\n// will use 123 iterations from the global default\nforAll<String, String> { a,b -> a + b == \"$a$b\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Kotest using Object Declaration\nDESCRIPTION: Creates tag objects by inheriting from the Kotest Tag class, allowing tests to be grouped by operating system.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tags.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n```\n\n----------------------------------------\n\nTITLE: Overriding System Environment in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the withEnvironment extension function to override system environment variables within a specific scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(\"FooKey\", \"BarValue\") {\n    System.getenv(\"FooKey\") shouldBe \"BarValue\" // System environment overridden!\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Test and Invocation Timeouts\nDESCRIPTION: Demonstrates how to combine both overall test timeout and per-invocation timeout settings\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(timeout = 100.milliseconds, invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Tagging All Tests in a Spec\nDESCRIPTION: Demonstrates how to apply tags to all tests within a spec using the tags function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/tags.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n\n  tags(Linux, Mysql)\n\n  test(\"my test\") { } // automatically marked with the above tags\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Fail On Empty Test Suite in Kotest Project Configuration\nDESCRIPTION: This code snippet shows how to enable the failOnEmptyTestSuite flag in a Kotest project configuration class. When set to true, the build will fail if no tests are executed in a module, helping to catch scenarios where tests are being filtered out erroneously.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/fail_on_empty.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val failOnEmptyTestSuite = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JunitXmlReporter in Project Config\nDESCRIPTION: Shows how to add and configure the JunitXmlReporter in a Kotest ProjectConfig class, specifying options for including parent tests, naming format, and output directory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/junit_xml.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(\n    JunitXmlReporter(\n      includeContainers = false, // don't write out status for all tests\n      useTestPathAsName = true, // use the full test path (ie, includes parent test names)\n      outputDir = \"../target/junit-xml\" // include to set output dir for maven\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Name Whitespace Removal in Kotest\nDESCRIPTION: This snippet shows how to configure Kotest to remove whitespace from test names. It overrides the testNameRemoveWhitespace property in the KotestProjectConfig object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/project_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val testNameRemoveWhitespace = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Comparison Options in Kotlin\nDESCRIPTION: Example of using compareJsonOptions to customize the behavior of shouldEqualJson matcher, specifically setting the arrayOrder option.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/json/content.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldEqualJson(b, compareJsonOptions { arrayOrder = ArrayOrder.Strict })\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions in Kotest\nDESCRIPTION: Illustrates the new ability to chain assertions in Kotest, improving readability and conciseness of test code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.3.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval employees: List<Employee> = ...\nemployees.shouldBeSorted()\n          shouldHaveSize(4)\n          shouldContain(Employee(\"Sam\", \"Chicago\"))\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor HTTP Client\nDESCRIPTION: Example of testing HTTP responses using Ktor client and Kotest assertions. Demonstrates how to verify response status and headers from HTTP client calls.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/ktor.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\nval response = client.post(\"http://mydomain.com/foo\")\nresponse.shouldHaveStatus(HttpStatusCode.OK)\nresponse.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n\n```\n\n----------------------------------------\n\nTITLE: Manipulating TestClock Time in Kotlin for Kotest\nDESCRIPTION: Demonstrates how to advance the time of a TestClock instance. This is useful for testing time-dependent behavior without waiting for real time to pass.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/clock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclock.plus(6.minutes)\n```\n\n----------------------------------------\n\nTITLE: Including a Test Factory with Lifecycle Methods in Kotlin\nDESCRIPTION: This snippet shows how to include a test factory with lifecycle methods in a Kotest spec class, demonstrating that the lifecycle methods only apply to tests from the factory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_factories.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LifecycleExample : FunSpec({\n   include(factory1)\n   test(\"c\")\n   test(\"d\")\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values with next() in Kotest Arb Generators\nDESCRIPTION: Demonstrates how to retrieve a single value from an Arb generator, either using the default random source or by providing a custom random source.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genops.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval arbA: Arb<A> = ...\nval a = arbA.next() // use Random.Default\nval a2 = arbA.next(rs) // pass in Random\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Built-in Shrinking with Positive Integer Generator in Kotest\nDESCRIPTION: This snippet shows how to use a built-in positive integer generator with automatic shrinking. It checks a property for all generated integers, and if the test fails, Kotest will attempt to shrink the failing input.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/shrinking.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry in Kotest Tests with Kotlin\nDESCRIPTION: This example demonstrates how to use the retry function in a Kotest ShouldSpec. The function will attempt the enclosed code block up to 4 times with a maximum timeout of 10 minutes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/retry.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"retry up to 4 times\") {\n      retry(4, 10.minutes) {\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Category Collection in Kotest Property Tests\nDESCRIPTION: Shows how to conditionally categorize test values using when expressions with the collect function to track custom categories like odd and even numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/statistics.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"EVEN\")\n    else -> collect(\"ODD\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Inspector Usage in Kotlin\nDESCRIPTION: Shows how to use Kotest's inspector functionality to test multiple elements in a collection against a specific condition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nmylist.forExactly(3) {\n    it.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Invocations in DescribeSpec\nDESCRIPTION: Shows how to configure a test to run multiple times using the invocations parameter in test config.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Throwing with Kotest\nDESCRIPTION: Demonstrates how to test for expected exceptions using Kotest's shouldThrow function. The example shows catching an IllegalAccessException and verifying its message content using the should matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n   // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Nesting Tests in ExpectSpec with Context Blocks\nDESCRIPTION: Shows how to nest tests within context blocks in ExpectSpec, allowing for grouping related tests together.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"a calculator\") {\n        expect(\"simple addition\") {\n            // test here\n        }\n        expect(\"integer overflow\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure Test Reporter in Kotest\nDESCRIPTION: Demonstrates how to wire in the AllureTestReporter class globally using Kotest project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/allure.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig {\n    override fun listeners() = listOf(AllureTestReporter())\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Multiple Clues for Detailed Error Context\nDESCRIPTION: Nesting multiple clues to provide hierarchical context for assertions, useful for complex test scenarios with multiple related checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Verifying user_id=${user.name}\" }.asClue {\n  \"email_confirmed should be false since we've just created the user\".asClue {\n    user.emailConfirmed shouldBe false\n  }\n  \"login\".asClue {\n    user.login shouldBe \"sksamuel\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions with a Test Target in Kotlin\nDESCRIPTION: This example shows an alternative version of assertSoftly that takes a test target and a lambda with the test target as its receiver. This allows for more focused assertions on a specific object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/soft_assertions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly(foo) {\n    shouldNotEndWith(\"b\")\n    length shouldBe 3\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution in Kotest with Kotlin\nDESCRIPTION: Illustrates how to configure individual tests in Kotest using the config function. This example sets timeout, invocations, threads, and tags for a specific test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n   \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Reflection Properties in Kotlin with Kotest\nDESCRIPTION: Functions for inspecting and validating class metadata through reflection, including annotations, methods, properties, and class characteristics.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveAnnotations()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveAnnotations(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeAnnotatedWith<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeAnnotatedWith<T> { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveFunction(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveFunction(name) { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveMemberProperty(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveMemberProperty(name) { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeSubtypeOf<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeSupertypeOf<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeData()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeSealed()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeCompanion()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHavePrimaryConstructor()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveVisibility(visibility)\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging at Spec Level in Kotest\nDESCRIPTION: Example showing how to enable coroutine debugging for all tests within a spec by setting the coroutineDebugProbes property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n  init {\n\n    coroutineDebugProbes = true\n\n    test(\"foo\") {\n      // debugging enabled here\n    }\n\n    test(\"bar\") {\n      // debugging enabled here\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WithDataTestName Interface in Kotest\nDESCRIPTION: This snippet demonstrates how to implement the WithDataTestName interface to provide custom test names for data-driven tests in Kotest. The dataTestName() function is used to generate the test name for each data row.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/test_names.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int) : WithDataTestName {\n  override fun dataTestName() = \"wibble $a, $b, $c wobble\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Test Case Configuration in Kotest StringSpec\nDESCRIPTION: This example shows how to override the defaultTestCaseConfig function to set a default configuration for all test cases in a StringSpec. It sets the default number of invocations to 3.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_case_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Reflective Arb Generation Example in Kotlin\nDESCRIPTION: Demonstrates basic usage of reflective Arb generation with a CurrencyAmount class and Currency enum, showing both direct type usage in checkAll and Arb.bind with filtering\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/reflective_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Currency {\n  USD, GBP, EUR\n}\n\nclass CurrencyAmount(\n  val amount: Long,\n  val currency: Currency\n)\n\ncontext(\"Currencies converts to EUR\") { // In some spec\n  checkAll(Arb.bind<CurrencyAmount>().filter { it.currency != EUR }) { currencyAmount ->\n    val converted = currencyAmount.convertTo(EUR)\n    converted.currency shouldBe EUR\n  }\n}\n\ncontext(\"Converting to a currency and back yields the same amount\") { // In some spec\n  checkAll<CurrencyAmount, Currency>() { currencyAmount, currency ->\n    val converted = currencyAmount.convertTo(currency).convertTo(currencyAmount.currency)\n    converted.currency shouldBe currencyAmount.currency\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using flatMap with Kotest Arb Generators\nDESCRIPTION: Shows how to create dependent generators using flatMap, where the emission of one generator depends on the values produced by another generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genops.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval dependentArbs: Arb<String> = Arb.of(\"foo\", \"bar\").flatMap { prefix ->\n   Arb.int(1..10).map { integer ->\n      \"${prefix}-${integer}\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withConstantNow Function in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the withConstantNow function to maintain a constant time value during test execution. This allows testing time-dependent code by freezing the current time to a specific value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/instant.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval foreverNow = LocalDateTime.now()\n\nwithConstantNow(foreverNow) {\n  LocalDateTime.now() shouldBe foreverNow\n  delay(10) // Code is taking a small amount of time to execute, but `now` changed!\n  LocalDateTime.now() shouldBe foreverNow\n}\n```\n\n----------------------------------------\n\nTITLE: Using withConstantNow Function for Controlled Time Testing in Kotlin\nDESCRIPTION: Demonstrates how to use the withConstantNow function to freeze time during test execution. This allows for consistent testing of time-based functionality by ensuring LocalDateTime.now() returns the same value despite code execution delays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/instant.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval foreverNow = LocalDateTime.now()\n\nwithConstantNow(foreverNow) {\n  LocalDateTime.now() shouldBe foreverNow\n  delay(10) // Code is taking a small amount of time to execute, but `now` changed!\n  LocalDateTime.now() shouldBe foreverNow\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Individual Tests for Data Rows in Kotest FreeSpec\nDESCRIPTION: This snippet demonstrates how to generate individual tests for each row of data parameters in a FreeSpec. It includes examples for simple addition and more complex mathematical operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Eventually with Retry Count and Exception Suppression\nDESCRIPTION: Shows how to configure eventually with retry count and specific exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/concurrency/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 8000\n  retries = 10\n  suppressExceptions = setOf(UserNotFoundException::class)\n}) {\n  userRepository.getById(1).name shouldNotBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Table File Format Example\nDESCRIPTION: Example of the .table file format using pipe separators with headers and data rows.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/table_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\nid | username | fullName\n4  | jmfayard | Jean-Michel Fayard\n6  | louis    | Louis Caugnault\n```\n\n----------------------------------------\n\nTITLE: Property Test Example\nDESCRIPTION: Demonstrates property testing with improved shrinking output for string comparison\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.1.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String> { a ->\n  a shouldBe a.reversed()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout Configuration in WordSpec\nDESCRIPTION: Demonstrates how to set a timeout duration for a test case using WordSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_case_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Instant Properties in Kotlin with Kotest\nDESCRIPTION: Extension functions for Instant objects that verify temporal relationships between instants, including order comparisons and proximity checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeBefore(anotherInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeCloseTo(anotherInstant, duration)\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Arb Generators in Kotlin\nDESCRIPTION: Shows how to combine multiple arbitraries using bind operation to construct complex data structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genops.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb: Arb<Person> = Arb.bind(\n   Arb.string(),\n   Arb.int()\n) { name, age -> Person(name, age) }\n```\n\n----------------------------------------\n\nTITLE: Implementing WordSpec Testing Style in Kotest\nDESCRIPTION: WordSpec uses the 'should' keyword to nest tests after a context string. This creates test hierarchies that read like natural language specifications.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"String.length\" should {\n        \"return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Random Email Local Parts in Kotlin using Kotest\nDESCRIPTION: Generates random local parts for email addresses.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.emailLocalPart()\n```\n\n----------------------------------------\n\nTITLE: Target-Specific Soft Assertions in Kotlin using Kotest\nDESCRIPTION: Shows how to use assertSoftly with a specific test target, where the lambda receives the target as its receiver. This allows for more focused testing of a specific object's properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/soft_assertions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly(foo) {\n    shouldNotEndWith(\"b\")\n    length shouldBe 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Project Level Extensions in Kotlin\nDESCRIPTION: Example showing how to create project-wide listeners using @AutoScan annotation. These listeners execute before and after the entire test project runs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/extensions/extensions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@AutoScan\nobject MyProjectListener : BeforeProjectListener, AfterProjectListener {\n  override suspend fun beforeProject() {\n    println(\"Project starting\")\n  }\n  override suspend fun afterProject() {\n    println(\"Project complete\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Isolating Tests with Focus Prefix in Kotest StringSpec\nDESCRIPTION: Demonstrates using the `f:` prefix to isolate execution to a single top-level test in a StringSpec. Only the test prefixed with 'f:' will be executed, while others are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/focus.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Continually Function with Custom Polling Interval in Kotest\nDESCRIPTION: Shows how to use the 'continually' function with a custom polling interval. This example sets the polling interval to 5 seconds instead of the default 10 milliseconds, checking the condition less frequently over the specified duration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/continually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds, 5.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FreeSpec for Flexible Test Nesting\nDESCRIPTION: Shows FreeSpec style which allows arbitrary nesting levels using the minus (-) operator for outer tests and direct naming for inner tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FreeSpec({\n    \"String.length\" - {\n        \"should return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n    \"containers can be nested as deep as you want\" - {\n        \"and so we nest another container\" - {\n            \"yet another container\" - {\n                \"finally a real test\" {\n                    1 + 1 shouldBe 2\n                }\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a TestContainer with Kotest's lifecycle using perTest()\nDESCRIPTION: This example demonstrates how to convert a Redis Docker container into a Kotest TestListener and register it to run per test. The perTest() extension method ensures the container starts before each test and stops after each test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Example of property test that would exceed default discard percentage\nDESCRIPTION: Shows a property test that would fail due to exceeding the default maximum discard percentage (10%) by filtering out approximately 50% of test inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/assumptions.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<Int, Int> { a, b ->\n  withAssumptions(a % 2 == 0) {\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Solution: Reset Mocks After Each Test\nDESCRIPTION: Shows how to reset mocks after each test using the afterTest listener, clearing all recorded calls and expectations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/integrations/mocks.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    afterTest {\n        clearMocks(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Providing Disable Reasons with EnabledOrReasonIf in Kotlin\nDESCRIPTION: This snippet illustrates the use of 'enabledOrReasonIf' to provide a reason when disabling a test. It reimplement the previous example, adding a custom message when a 'danger' test is disabled on Fridays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/config_enabled.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: (TestCase) -> Enabled = {\n   if (it.name.testName.startsWith(\"danger\") && isFriday())\n      Enabled.disabled(\"It's a friday, and we don't like danger!\")\n   else\n      Enabled.enabled\n}\n\n\"danger Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Test Ordering in Kotest\nDESCRIPTION: This snippet shows how to set up random test ordering in a Kotest StringSpec. Root tests are dispatched in a random order, which may vary between test runs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RandomSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Random\n\n    init {\n      \"foo\" {\n        // This test may run first or second\n      }\n\n      \"bar\" {\n        // This test may run first or second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Until Function with Fibonacci Interval in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the 'until' function with a fibonacci interval. It sets a 5-second timeout and increases the delay between checks using a fibonacci sequence starting at 100 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/until.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 100.milliseconds.fibonacci()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TimerListener in Kotest\nDESCRIPTION: This snippet shows the implementation of a custom TimerListener that logs the time taken for each test case. It uses the beforeTest and afterTest functions to record and calculate the duration of each test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/extensions/examples.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : BeforeTestListener, AfterTestListener {\n\n  var started = 0L\n\n  override fun beforeTest(testCase: TestCase): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(testCase: TestCase, result: TestResult): Unit {\n    println(\"Duration of ${testCase.descriptor} = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Until with Fixed Interval in Kotlin Tests\nDESCRIPTION: Shows how to use the until function with a custom fixed interval of 250 milliseconds between checks, while maintaining a 5-second timeout.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/until.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 250.milliseconds.fixed()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocking and Non-blocking Tests in Kotest\nDESCRIPTION: Demonstrates how to configure blocking and non-blocking tests in Kotest using test configuration flags. Shows the difference between handling thread-blocking operations (Thread.sleep) and suspending operations (delay) with proper timeout settings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/timeouts/blocking_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyBlockingTest : FunSpec() {\n  init {\n\n    test(\"interrupt me!\").config(blockingTest = true, timeout = 10.seconds) {\n       Thread.sleep(100000000)\n    }\n\n    test(\"uses suspension\").config(timeout = 10.seconds) {\n      delay(100000000)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest Spec\nDESCRIPTION: Demonstrates how to set up assertion mode in a Kotest spec to enforce assertion usage. The example shows setting AssertionMode.Error to fail tests that don't contain assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/assertion_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec() {\n   init {\n      assertions = AssertionMode.Error\n      test(\"this test has no assertions\") {\n         val name = \"sam\"\n         name.length == 3 // this isn't actually testing anything\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional and Reflection Assertions in Kotest\nDESCRIPTION: Assertions for Optional values and reflection-based class inspection. Includes annotation, function, and property verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\noptional.shouldBePresent()\noptional.shouldBePresent { value -> .. }\noptional.shouldBeEmpty()\n\nkclass.shouldHaveAnnotations()\nkclass.shouldHaveAnnotations(n)\nkclass.shouldBeAnnotatedWith<T>()\nkclass.shouldBeAnnotatedWith<T> { block }\nkclass.shouldHaveFunction(name)\nkclass.shouldHaveFunction(name) { block }\nkclass.shouldHaveMemberProperty(name)\nkclass.shouldHaveMemberProperty(name) { block }\nkclass.shouldBeSubtypeOf<T>()\nkclass.shouldBeSupertypeOf<T>()\nkclass.shouldBeData()\nkclass.shouldBeSealed()\nkclass.shouldBeCompanion()\nkclass.shouldHavePrimaryConstructor()\nkclass.shouldHaveVisibility(visibility)\n```\n\n----------------------------------------\n\nTITLE: Checking Exception Properties in Kotest\nDESCRIPTION: Shows how to capture the thrown exception as a variable and perform assertions on its properties, such as verifying the exception message content.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/exceptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Using Inline Assume Function in Kotlin Property Tests\nDESCRIPTION: Demonstrates the use of the inline assume function to filter out equal strings in a property test for Levenshtein distance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/assumptions.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume(a != b)\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Instant Assertions in Kotlin\nDESCRIPTION: Assertion methods for comparing Instant instances, focusing on temporal ordering and range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\ninstant.shouldBeBefore(anotherInstant)\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast at Parent Test Level in Kotest\nDESCRIPTION: This snippet demonstrates how to enable fail fast for a parent test context in Kotest. When a test failure occurs, subsequent tests within the same context are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/fail_fast.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n      context(\"context with fail fast enabled\").config(failfast = true) {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withClue for Better Error Messages\nDESCRIPTION: Example of using the withClue function to add context to an assertion, making the error message more informative.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/clues.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Wide Timeout Settings\nDESCRIPTION: Example of setting default timeout values for all tests in a project using ProjectConfig\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig {\n    override val timeout = 100.milliseconds\n    override val invocationTimeout = 33.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TestDispatcher for a Single Test in Kotest\nDESCRIPTION: This snippet shows how to enable a TestDispatcher for a single test in a Kotest FunSpec by using the coroutineTestScope config option.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineTestScope = true) {\n         // this test will run with a test dispatcher\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode via DSL in Kotest\nDESCRIPTION: Shows how to set the isolation mode using Kotest's DSL approach within a WordSpec class. This approach is used when working with the more concise lambda-based test definition style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/isolation_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec({\n isolationMode = IsolationMode.SingleInstance\n // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Eventually with Dynamic Exception Handling in Kotlin\nDESCRIPTION: Example demonstrating how to use a function to conditionally suppress exceptions based on the exception's properties, offering more flexible control than a simple exception type list.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/concurrency/eventually.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 8000\n  suppressExceptionIf = { it is UserNotFoundException && it.username == \"bob\" }\n}) {\n  userRepository.getById(1).name shouldNotBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Value from Arb Generator in Kotlin\nDESCRIPTION: Demonstrates how to retrieve the next value from an Arb generator using either default Random or custom Random source.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genops.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval arbA: Arb<A> = ...\nval a = arbA.next() // use Random.Default\nval a2 = arbA.next(rs) // pass in Random\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Test Ordering in Kotest\nDESCRIPTION: This example shows how to set up random test ordering in a Kotest StringSpec. Tests will be executed in a random order each time the spec is run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RandomSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Random\n\n    init {\n      \"foo\" {\n        // This test may run first or second\n      }\n\n      \"bar\" {\n        // This test may run first or second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using shouldEqualSpecifiedJson for Lenient JSON Comparison in Kotlin\nDESCRIPTION: Illustrates the use of shouldEqualSpecifiedJson, which is an alias for shouldEqualJson with FieldComparison set to Lenient. This allows for additional fields in the actual JSON without causing a failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/json/content.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = \"\"\" { \"a\": true, \"date\": \"2019-11-03\" } \"\"\"\nval b = \"\"\" { \"a\": true } \"\"\"\n\n// this would pass\na shouldEqualSpecifiedJson b\n\n// this would fail\na shouldEqualJson b\n```\n\n----------------------------------------\n\nTITLE: Generating Random Strings in Kotest\nDESCRIPTION: Generates random printable strings with a specified size range. Edge cases include empty string, blank string, and unicode string.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.string(range)\n```\n\n----------------------------------------\n\nTITLE: Using autoClose for Resource Management in Kotest StringSpec\nDESCRIPTION: This snippet demonstrates how to use the autoClose function in a Kotest StringSpec test class to automatically close resources implementing AutoCloseable. The resource is declared as a class property and will be automatically closed after all tests have completed, in reverse order of declaration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/autoclose.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with Bang Prefix in Kotest StringSpec\nDESCRIPTION: Demonstrates using the `!` prefix to skip specific tests in a StringSpec. Tests prefixed with '!' are ignored during execution, while all other tests run normally.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/focus.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Either Type Generators\nDESCRIPTION: Generators for Arrow's Either type, including balanced Either generation and specific Left/Right instance generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.either(arbL, arbR)\nArb.right(arb)\nArb.left(arb)\n```\n\n----------------------------------------\n\nTITLE: Complete Database Testing Example\nDESCRIPTION: Full example of using TestContainers for database testing including container setup and query execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass QueryDatastoreTest : FunSpec({\n\n  val mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n    startupAttempts = 1\n    withUrlParam(\"connectionTimeZone\", \"Z\")\n    withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n  }\n\n  val ds = install(JdbcTestContainerExtension(mysql)) {\n    poolName = \"myconnectionpool\"\n    maximumPoolSize = 8\n    idleTimeout = 10000\n  }\n\n  val datastore = PersonDatastore(ds)\n\n  test(\"insert happy path\") {\n\n    datastore.insert(Person(\"sam\", \"Chicago\"))\n    datastore.insert(Person(\"jim\", \"Seattle\"))\n\n    datastore.findAll().shouldBe(listOf(\n      Person(\"sam\", \"Chicago\"),\n      Person(\"jim\", \"Seattle\"),\n    ))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing FeatureSpec Testing Style in Kotest\nDESCRIPTION: FeatureSpec uses 'feature' and 'scenario' keywords, resembling Cucumber's Gherkin syntax. This style is useful for teams transitioning from or familiar with Cucumber-style tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"the can of coke\") {\n        scenario(\"should be fizzy when I shake it\") {\n            // test here\n        }\n        scenario(\"and should be tasty\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Testcontainers with Kotest\nDESCRIPTION: Example showing how to use Testcontainers with Kotest FunSpec, demonstrating container lifecycle management using perTest() extension method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers_46x.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing String Length Matcher\nDESCRIPTION: Example implementation of a custom matcher that checks string length. Returns a MatcherResult with appropriate success/failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/custom.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun haveLength(length: Int) = Matcher<String> { value ->\n  MatcherResult(\n    value.length == length,\n    { \"string had length ${value.length} but we expected length $length\" },\n    { \"string should not have length $length\" },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Kotest Arbitraries\nDESCRIPTION: Shows how to combine multiple arbitraries to construct complex objects using bind operation, demonstrated with a Person data class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genops.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb: Arb<Person> = Arb.bind(\n   Arb.string(),\n   Arb.int()\n) { name, age -> Person(name, age) }\n```\n\n----------------------------------------\n\nTITLE: Iterator Matchers in Kotlin with Kotest\nDESCRIPTION: Matchers for validating iterator state in Kotest, allowing verification of whether an iterator has more elements or is empty.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\niterator.shouldBeEmpty()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\niterator.shouldHaveNext()\n```\n\n----------------------------------------\n\nTITLE: Generating Random Domains in Kotlin using Kotest\nDESCRIPTION: Generates random domain names with a random TLD (defaults to top 120 TLDs) and a label generator for domain parts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.domain(tlds, labelArb)\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions in Kotest\nDESCRIPTION: Soft assertions allow multiple assertions to be collected before failing the test, providing more comprehensive error reporting.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nsoftAssert {\n  5 shouldBe 10\n  \"foo\" shouldBe \"bar\"\n  listOf(1, 2, 3) shouldContain 4\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JunitXmlReporter in Kotest Project Config (Kotlin)\nDESCRIPTION: This snippet demonstrates how to add and configure the JunitXmlReporter in a Kotest project configuration. It shows the setup of reporter parameters such as includeContainers, useTestPathAsName, and outputDir.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/junit_xml.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(\n    JunitXmlReporter(\n      includeContainers = false, // don't write out status for all tests\n      useTestPathAsName = true, // use the full test path (ie, includes parent test names)\n      outputDir = \"../target/junit-xml\" // include to set output dir for maven\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data Tests with Custom Test Names in Kotest\nDESCRIPTION: This snippet extends the basic nested data test example by adding a custom test name formatter for the second level of tests. It demonstrates how to improve test readability by using descriptive test names that incorporate the test parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/nested.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n    val services = listOf(\n       \"http://internal.foo\",\n       \"http://internal.bar\",\n       \"http://public.baz\",\n    )\n\n    val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n    withData(services) { service ->\n       withData<String>({ \"should support HTTP $it\" }, methods) { method ->\n          // test service against method\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating JSON against Schema in Kotlin\nDESCRIPTION: Demonstrates how to validate JSON strings against a defined schema using Kotest's shouldMatchSchema matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/json/schema.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n\"{}\".shouldMatchSchema personSchema\n\n// fails with:\n// $.name => Expected string, but was undefined\n\n\"\"\" { \"name\": \"Emil\", \"age\": 34 } \"\"\"\n// Passes, since address isn't required and `additionalProperties` are allowed\n```\n\n----------------------------------------\n\nTITLE: Collecting Custom Categories in Kotlin Property Tests\nDESCRIPTION: This example shows how to collect custom categories (EVEN and ODD) for integer values in a property test. It demonstrates using conditional logic to categorize the generated values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/statistics.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"EVEN\")\n    else -> collect(\"ODD\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Clues in Kotlin\nDESCRIPTION: Demonstrates how to nest multiple clues to provide hierarchical context for test assertions. This is useful for complex test scenarios with multiple related checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/clues.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Verifying user_id=${user.name}\" }.asClue {\n  \"email_confirmed should be false since we've just created the user\".asClue {\n    user.emailConfirmed shouldBe false\n  }\n  \"login\".asClue {\n    user.login shouldBe \"sksamuel\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec in Kotlin for KotlinTest\nDESCRIPTION: Demonstrates the new StringSpec feature in KotlinTest, allowing tests to be defined using simple strings. It shows basic assertions and configuration options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_49\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  init {\n    \"strings.size should return size of string\" {\n      \"hello\".length shouldBe 5\n      \"hello\" should haveLength(5)\n    }\n\n    \"strings should support config\" {\n      \"hello\".length shouldBe 5\n    }.config(invocations = 5)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency (Maven)\nDESCRIPTION: Maven dependency declaration for Kotest JUnit5 runner\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/setup.mdx#2025-04-13_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-runner-junit5-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Test Task for HTML Reporter\nDESCRIPTION: Gradle configuration to disable Gradle's built-in HTML reports in favor of Kotest's HTML reporter. This configuration also disables JUnit XML reporting since Kotest will handle that, and passes the build directory to the system properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/html_reporter.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  useJUnitPlatform()\n  reports {\n    html.required.set(false)\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Assertions in Kotest Assumptions\nDESCRIPTION: Demonstrates how to use multiple assertions within an assumption block to filter input combinations based on complex conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/assumptions.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.string(3..4, Codepoint.az()), Arb.string(3..4, Codepoint.az())) { a, b ->\n  withAssumptions({\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }) {\n     a.compareTo(b) shouldNotBe 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using General Purpose Matchers in Kotlin with Kotest\nDESCRIPTION: Demonstrates basic assertion matchers for equality, boolean expressions, and exception handling in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nobj.shouldBe(other)\nexpr.shouldBeTrue()\nexpr.shouldBeFalse()\nshouldThrow<T> { block }\nshouldThrowExactly<T> { block }\nshouldThrowAny { block }\nshouldThrowMessage(message) { block }\n```\n\n----------------------------------------\n\nTITLE: Exporting Table Data to File\nDESCRIPTION: Shows how to write table data to a .table file for external storage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/table_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval tableFile = testResources.resolve(\"users.table\")\ntable.writeTo(tableFile)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Data Class for Validation\nDESCRIPTION: A simple data class representing a UserProfile with a name and optional age, which will be used to demonstrate Konform validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/konform.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class UserProfile(\n   val fullName: String,\n   val age: Int?\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoClose for StringReader in Kotest StringSpec\nDESCRIPTION: This snippet shows how to use the autoClose function to automatically close a StringReader resource in a Kotest StringSpec. The resource is declared as a class property and will be closed after all tests in the spec have been executed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/autoclose.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Property Matchers in Kotlin\nDESCRIPTION: Defines individual matchers for name, age, and address properties that will be used to create a composed matcher for Person objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/composed_matchers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun nameMatcher(name: String) = Matcher<String> {\n  MatcherResult(\n    value == name,\n    { \"Name $value should be $name\" },\n    { \"Name $value should not be $name\" }\n  )\n}\n\nfun ageMatcher(age: Int) = Matcher<Int> {\n  MatcherResult(\n    value == age,\n    { \"Age $value should be $age\" },\n    { \"Age $value should not be $age\" }\n  )\n}\n\nval addressMatcher = Matcher<Address> {\n  MatcherResult(\n    value == Address(\"Warsaw\", \"Test\", \"1/1\"),\n    { \"Address $value should be Test 1/1 Warsaw\" },\n    { \"Address $value should not be Test 1/1 Warsaw\" }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using KProperty Matchers in Kotest\nDESCRIPTION: Assertion matchers for KProperty types that verify property types and modifiers like const and lateinit.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nkproperty.shouldBeOfType<T>()\nkproperty.shouldBeConst()\nkproperty.shouldBeLateInit()\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Validation Cases\nDESCRIPTION: Example of testing an invalid user profile using Kotest's shouldBeInvalid matcher with specific error assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/konform.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval bob = UserProfile(\"bob\", 18)\nvalidateUser.shouldBeInvalid(a) {\n  it.shouldContainError(UserProfile::fullName, \"must have at least 4 characters\")\n  it.shouldContainError(UserProfile::age, \"must be at least '21'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline Assumptions in Kotest Property Tests\nDESCRIPTION: This snippet demonstrates the inline syntax for using assumptions in Kotest property tests. It uses the assume function to ensure that only non-equal strings are considered for the Levenshtein distance check.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/assumptions.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume(a != b)\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Tests with Tags in StringSpec\nDESCRIPTION: Shows how to apply tags to individual test cases using the config function in a StringSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tags.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withConstantNow Function in Kotlin for Testing Time-Dependent Code\nDESCRIPTION: This snippet demonstrates how to use the withConstantNow function to set a constant value for LocalDateTime.now() during test execution. It allows testing time-dependent code by ensuring that the 'now' value remains constant throughout the test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/instant.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval foreverNow = LocalDateTime.now()\n\nwithConstantNow(foreverNow) {\n  LocalDateTime.now() shouldBe foreverNow\n  delay(10) // Code is taking a small amount of time to execute, but `now` changed!\n  LocalDateTime.now() shouldBe foreverNow\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-level Timeouts in DescribeSpec\nDESCRIPTION: Demonstrates how to set a timeout at the spec level that applies to all tests within that spec, with the ability to override it for specific test cases. This allows for more flexible timeout configurations.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.2.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   timeout = 1000\n\n   describe(\"I will timeout in 1000 millis\") {\n      it(\"And so will I\") { }\n      it(\"But I'm a little faster\").config(timeout = 500.milliseconds) { }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Result Type Assertions in Kotlin\nDESCRIPTION: Methods for testing Result objects, including success and failure cases with optional value verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nresult.shouldBeSuccess()\nresult.shouldBeSuccess(value)\nresult.shouldBeSuccess(block)\nresult.shouldBeFailure()\nresult.shouldBeFailureOfType<Type : Throwable>()\nresult.shouldBeFailure(block)\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Kotlin\nDESCRIPTION: Shows how to create tag objects by either inheriting from Tag class or using NamedTag class for operating system grouping.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/tags.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval tag = NamedTag(\"Linux\")\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Arbitraries to Create Complex Objects\nDESCRIPTION: Demonstrates how to use the bind function to combine multiple arbitrary generators to create instances of complex data structures like a Person class with name and age properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genops.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb: Arb<Person> = Arb.bind(\n   Arb.string(),\n   Arb.int()\n) { name, age -> Person(name, age) }\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Ktor Assertions Dependency\nDESCRIPTION: Maven/Gradle dependency declaration for adding Kotest Ktor assertions to a project. The version should be replaced with the desired release version.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-assertions-ktor:${version}\n```\n\n----------------------------------------\n\nTITLE: Spring Constructor Injection Example in Kotest\nDESCRIPTION: Illustrates constructor injection in a Kotest test class using Spring's @ContextConfiguration annotation and autowired service.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/spring.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"have autowired the service\" {\n        service.repository.findUser().name shouldBe \"system_user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually with Iteration Listener\nDESCRIPTION: Demonstrates how to attach a listener to monitor each iteration of the eventually block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/concurrency/eventually.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5.seconds()\n  listener = { println(\"iteration ${it.times} returned ${it.result}\") }\n}) {\n  string += \"x\"\n  string\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML-Specific Attributes with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers focus on HTML-specific attributes and structures, including id, class, src, href, and child elements with specific properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/jsoup.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveId(id)\nelement.shouldHaveClass(class)\nelement.shouldHaveSrc(src)\nelement.shouldHaveHref(href)\nelement.shouldHaveElementWithId(id)\nelement.shouldHaveChildWithClass(id)\n```\n\n----------------------------------------\n\nTITLE: Using Logging Functions in Kotest Tests\nDESCRIPTION: This example demonstrates how to use logging functions within a Kotest test. It shows the usage of the 'warn' logging function, which is one of the standard logging functions provided by Kotest (others include error, info, debug, and trace).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/logging.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something\") {\n  warn { \"something weird happened\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BehaviorSpec Style in Kotest\nDESCRIPTION: BehaviorSpec follows BDD style with given/when/then keywords. Tests are structured to represent behavior scenarios, and keywords can be nested with 'and' for additional context.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        `when`(\"I sit on it\") {\n            then(\"I should be able to fly\") {\n                // test code\n            }\n        }\n        `when`(\"I throw it away\") {\n            then(\"it should come back\") {\n                // test code\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        and(\"a witch\") {\n            `when`(\"The witch sits on it\") {\n                and(\"she laughs hysterically\") {\n                    then(\"She should be able to fly\") {\n                        // test code\n                    }\n                }\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    xgiven(\"this is disabled\") {\n        When(\"disabled by inheritance from the parent\") {\n            then(\"disabled by inheritance from its grandparent\") {\n                // disabled test\n            }\n        }\n    }\n    given(\"this is active\") {\n        When(\"this is active too\") {\n            xthen(\"this is disabled\") {\n               // disabled test\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing ConstantNowTestListener in Kotlin for Global Time Control\nDESCRIPTION: This snippet shows how to implement the ConstantNowTestListener as part of the listeners() function. This allows for global control of the 'now' value across all tests in a test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/instant.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun listeners() = listOf(\n  ConstantNowTestListener(foreverNow)\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Gradle Plugin\nDESCRIPTION: Shows how to add the Allure Gradle plugin to the build configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/allure.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  ...\n  id(\"io.qameta.allure\") version \"2.8.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually with Listener\nDESCRIPTION: Shows how to add a listener to eventually to monitor iteration progress.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/concurrency/eventually.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5.seconds()\n  listener = { println(\"iteration ${it.times} returned ${it.result}\") }\n}) {\n  string += \"x\"\n  string\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Coverage Percentages in Kotest Property Tests\nDESCRIPTION: Demonstrates how to use withCoveragePercentages to assert that certain values are being generated with a minimum percentage in a Kotest property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/statistics.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoveragePercentages(mapOf(RoundingMode.HALF_DOWN to 10.0, RoundingMode.FLOOR to 10.0)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Continually Testing with Custom Poll Interval in Kotlin\nDESCRIPTION: Shows how to use the continually block with a custom poll interval. In this example, the test condition is checked every 5 seconds for a total duration of 60 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/continually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds, 5.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Assertions with withClue and asClue in Kotest\nDESCRIPTION: Demonstrates how to add contextual information to test assertions using Kotest's withClue and asClue helpers. These methods provide additional context when tests fail, making it easier to understand the failure reason.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") { user.name shouldNotBe null }\n\ndata class HttpResponse(val status: Int, body: String)\nval response = HttpResponse(200, \"the content\")\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Assertions in Kotest\nDESCRIPTION: Extension functions for asserting properties of Kotlin Channels. Includes methods for checking channel state, size, and element reception within specific time durations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nchannel.shouldReceiveWithin(duration)\nchannel.shouldReceiveNoElementsWithin(duration)\nchannel.shouldHaveSize(n)\nchannel.shouldReceiveAtLeast(n)\nchannel.shouldReceiveAtMost(n)\nchannel.shouldBeClosed()\nchannel.shouldBeOpen()\nchannel.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Test Factory with Lifecycle Methods\nDESCRIPTION: Example of implementing a test factory with beforeTest callback and its usage in a spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_factories.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval factory1 = funSpec {\n  beforeTest {\n     println(\"Executing $it\")\n  }\n  test(\"a\") {  }\n  test(\"b\") {  }\n}\n\nclass LifecycleExample : FunSpec({\n   include(factory1)\n   test(\"c\")\n   test(\"d\")\n})\n```\n\n----------------------------------------\n\nTITLE: Full Example of Kafka Testing with Kotest and Testcontainers\nDESCRIPTION: A complete example showing how to set up a Kafka container, create producer and consumer, and test message sending/receiving in a Kotest test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KafkaTestContainerExtensionTest : FunSpec() {\n  init {\n\n    val kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n      withEmbeddedZookeeper()\n    }\n\n    test(\"should send/receive message\") {\n\n      val producer = kafka.createStringStringProducer()\n      producer.send(ProducerRecord(\"foo\", null, \"bubble bobble\"))\n      producer.close()\n\n      val consumer = kafka.createStringStringConsumer {\n        this[ConsumerConfig.MAX_POLL_RECORDS_CONFIG] = 1\n      }\n\n      consumer.subscribe(listOf(\"foo\"))\n      val records = consumer.poll(Duration.ofSeconds(100))\n      records.shouldHaveSize(1)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Extensions for HTML Reporting in Kotlin\nDESCRIPTION: This snippet shows how to configure the ProjectConfig class to use both JunitXmlReporter and HtmlReporter extensions. It sets up the necessary listeners to generate HTML reports based on XML output.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/html_reporter.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override val specExecutionOrder = SpecExecutionOrder.Annotated\n\n    override fun extensions(): List<Extension> = listOf(\n        JunitXmlReporter(\n            includeContainers = false,\n            useTestPathAsName = true,\n        ),\n        HtmlReporter()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Lists in Kotlin using Kotest\nDESCRIPTION: Generates lists where values are produced by the given element generator. The size of each list is determined randomly within the specified range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.list(gen, range)\n```\n\n----------------------------------------\n\nTITLE: Error message with nested clues\nDESCRIPTION: Shows how nested clues appear in error messages, with each level of context displayed hierarchically to provide a clear understanding of what failed and why.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_11\n\nLANGUAGE: plain\nCODE:\n```\nVerifying user_id=42\nemail_confirmed should be false since we've just created the user\n<true> should equal <false>\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Test in Kotest Using ShouldSpec\nDESCRIPTION: Demonstrates how to implement a retry test case within a Kotest ShouldSpec. The example shows a test that will retry up to 4 times with a 10-minute timeout period before failing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/retry.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"retry up to 4 times\") {\n      retry(4, 10.minutes) {\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Content-Based JSON Matchers\nDESCRIPTION: Advanced matchers for comparing JSON content, including structure matching, path validation, and resource comparison. Some matchers are JVM-specific while others support multiplatform usage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/overview.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldEqualJson\nshoulEqualSpecifiedJson\nshoulContainJsonKey\nshoulContainJsonKeyValue\nshoulMatchJsonResource\n```\n\n----------------------------------------\n\nTITLE: Focusing on a Parent Test with Nested Tests in Kotest FunSpec\nDESCRIPTION: This example shows how focusing on a parent test allows nested tests to execute in a Kotest FunSpec. The 'f:' prefix is used on a parent context, and all tests within that context are executed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/focus.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : FunSpec({\n   context(\"test 1\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n   }\n\n   context(\"f:test 2\") {\n      // this will be executed\n      test(\"foo\") {\n         // this will be executed\n      }\n   }\n\n   context(\"test 3\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscoveryExtension in Kotest\nDESCRIPTION: DiscoveryExtension interface provides two key functions: afterScan for filtering discovered Spec classes and instantiate for customizing class instantiation. The afterScan function processes discovered test classes and returns filtered results, while instantiate handles custom instantiation logic for Spec classes that may require special initialization or constructor parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/discovery_extension.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface DiscoveryExtension {\n  fun afterScan(classes: List<KClass<Spec>>): List<KClass<Spec>>\n  fun instantiate(class: KClass<Spec>): Spec?\n}\n```\n\n----------------------------------------\n\nTITLE: Labeled Statistics Collection in Kotest\nDESCRIPTION: Demonstrates how to use labeled statistics to maintain separate statistical categories for different aspects of the data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/statistics.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"even_odd\", \"EVEN\")\n    else -> collect(\"even_odd\", \"ODD\")\n  }\n  when {\n    k > 0 -> collect(\"pos_neg\", \"POS\")\n    else -> collect(\"pos_neg\", \"NEG\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Time with Test Coroutine Scheduler in Kotest\nDESCRIPTION: Shows how to access and manipulate the test coroutine scheduler to control virtual time in tests. Includes example of advancing time and checking current time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.test.testCoroutineScheduler\n\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"advance time\").config(coroutineTestScope = true) {\n        val duration = 1.days\n        // launch a coroutine that would normally sleep for 1 day\n        launch {\n          delay(duration.inWholeMilliseconds)\n        }\n        // move the clock on and the delay in the above coroutine will finish immediately.\n        testCoroutineScheduler.advanceTimeBy(duration.inWholeMilliseconds)\n        val currentTime = testCoroutineScheduler.currentTime\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Kotest Arbitraries\nDESCRIPTION: Shows how to combine multiple arbitraries to construct complex data structures using bind operation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genops.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb: Arb<Person> = Arb.bind(\n   Arb.string(),\n   Arb.int()\n) { name, age -> Person(name, age) }\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout in Kotest FunSpec\nDESCRIPTION: Demonstrates how to set a test timeout for a specific test using the config method in a FunSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n   test(\"this test will timeout quickly!\").config(timeout = 100.milliseconds) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Sets with Kotest Arb\nDESCRIPTION: Functions for generating sets with custom element generators and size ranges. Includes options for specifying slippage to handle unique value generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.set(gen, range)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.set(gen, range, slippage)\n```\n\n----------------------------------------\n\nTITLE: Using asClue with Custom Objects\nDESCRIPTION: Example of using the asClue extension function with a custom data class to provide detailed context in assertion error messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/clues.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class HttpResponse(val status: Int, val body: String)\n\nval response = HttpResponse(404, \"the content\")\n\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Per Test Mode Basic Example\nDESCRIPTION: Shows how InstancePerTest mode creates new test class instances for each test case including nested contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/isolation_mode.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Predicates with Eventually in Kotlin\nDESCRIPTION: This snippet demonstrates how to use a predicate with the 'eventually' function. It checks if a value eventually reaches 5 within 25 seconds, with a 1-second delay between checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"check that predicate eventually succeeds in time\" {\n    var i = 0\n    eventually<Int>(25.seconds, predicate = { it == 5 }) {\n      delay(1.seconds)\n      i++\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Test Factories with Inline Tests in Kotlin\nDESCRIPTION: Example showing how a test class can combine both included test factories and regular inline tests in the same spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_factories.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HugeTestFile : FunSpec({\n\n   test(\"first test\") {\n     // test here\n   }\n\n   include(factory1(\"foo\"))\n   include(factory2(1, 4))\n\n   test(\"another test\") {\n     //  testhere\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest\nDESCRIPTION: Sets up global assertion mode to error when tests don't use Kotest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/project_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val assertionMode = AssertionMode.Error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Case Severity Levels\nDESCRIPTION: Example of setting test case severity levels in Kotest for conditional test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.3.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec() {\n   init {\n      test(\"very very important\").config(severity = TestCaseSeverityLevel.CRITICAL) {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding KotlinX DateTime Generator Dependency\nDESCRIPTION: Maven dependency required to use the KotlinX DateTime generators with Kotest property testing. This dependency needs to be added to your build configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/date_gens.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nio.kotest.extensions:kotest-property-datetime:version\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Dependency for JavaScript Target in Kotlin Multiplatform\nDESCRIPTION: This snippet demonstrates how to add the Kotest property testing dependency specifically to the JavaScript target in a Kotlin Multiplatform project. It shows the configuration for both browser and NodeJS, adding the dependency to the jsTest sourceset.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/index.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Date Properties in Kotest\nDESCRIPTION: Methods for asserting various properties of dates in Kotest, including comparisons, range checks, and component assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameMonthAs(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameDayAs(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeBefore(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeAfter(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeWithin(period, otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeWithin(duration, otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeBetween(firstDate, secondDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveYear(year)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveMonth(month)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveDayOfYear(day)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveDayOfMonth(day)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveDayOfWeek(day)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveHour(hour)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveMinute(Minute)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSecond(second)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveNano(nao)\n```\n\n----------------------------------------\n\nTITLE: Using Inspectors for Collection Testing in KotlinTest\nDESCRIPTION: Shows how to use inspectors to test elements in collections. Includes examples of forAll and forNone inspectors.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"your test case\" {\n    val xs = listOf(\"aa_1\", \"aa_2\", \"aa_3\")\n    xs.forAll {\n      it.shouldContain(\"_\")\n      it.shouldStartWith(\"aa\")\n    }\n  }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/JS Target and Dependencies\nDESCRIPTION: This snippet shows how to configure Kotlin/JS target and add Kotest engine dependency for JavaScript tests. It sets up both browser and Node.js targets.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/setup.mdx#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) { // LEGACY or BOTH are unsupported\n      browser() // to compile for the web\n      nodejs() // to compile against node\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle with Detailed Test Logging for KoTest\nDESCRIPTION: Enhanced Gradle configuration for KoTest that enables JUnit Platform with additional test logging for failed tests, skipped tests, and standard output/error streams.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  useJUnitPlatform()\n  testLogging {\n    events \"FAILED\", \"SKIPPED\", \"STANDARD_OUT\", \"STANDARD_ERROR\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Intercepting System.out and System.err Output in Kotlin Tests\nDESCRIPTION: Example demonstrating the NoSystemOutListener and NoSystemErrListener which intercept calls to System.out and System.err, throwing exceptions instead, allowing for testing of system output behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NoSystemOutOrErrTest : StringSpec() {\n\n  override fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n\n  init {\n\n    \"System.out should throw an exception when the listener is added\" {\n      shouldThrow<SystemOutWriteException> {\n        System.out.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n\n    \"System.err should throw an exception when the listener is added\" {\n      shouldThrow<SystemErrWriteException> {\n        System.err.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Deterministic Code with eventually in KotlinTest\nDESCRIPTION: Demonstrates how to test non-deterministic code using the eventually function, which repeatedly tests assertions until they pass or a timeout is reached.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"do something\") {\n      eventually(5.seconds) {\n        // code here that should complete in 5 seconds but takes an non-deterministic amount of time.\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Invocations in ShouldSpec\nDESCRIPTION: Example showing how to configure a test case with multiple invocations and parallel threads using ShouldSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_case_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SpringExtension in Kotest Project Config\nDESCRIPTION: Shows how to activate the SpringExtension globally for all test classes by registering it in the Kotest project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/spring.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Seed for Property Testing in Kotlin\nDESCRIPTION: An example showing how to manually configure a fixed seed value for property testing using PropTestConfig. This approach is useful for creating regression tests based on previously failed test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/seed.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample : StringSpec({\n  \"String size\" {\n    forAll<String, String>(PropTestConfig(seed = 127305235)) { a, b ->\n      (a + b).length == a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Eventually with Initial Delay in Kotlin\nDESCRIPTION: Example showing how to add an initial delay before the first test execution when using the 'eventually' utility, useful when you need to wait for some setup before starting test attempts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/concurrency/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5000\n  initialDelay = 1000\n}) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Failure on Ignored Tests in Kotest (Kotlin)\nDESCRIPTION: Sets Kotest to consider ignored tests as failures. This can be useful for enforcing that all tests are actively maintained and run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/project_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val failOnIgnoredTests = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Tests Using Kotest Project Config\nDESCRIPTION: Shows how to set up global property test configuration using Kotest's AbstractProjectConfig class. This implementation sets the default iteration count before any tests run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/globalconfig.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestConfig : AbstractProjectConfig() {\n   override suspend fun beforeProject() {\n      PropertyTesting.defaultIterationCount = 123\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Until Function with Fibonacci Interval in Kotest\nDESCRIPTION: Demonstrates how to use the 'until' function with a fibonacci interval that increases the delay between polling attempts. This pattern helps reduce unnecessary polling frequency over time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/until.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 100.milliseconds.fibonacci()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Testing with FeatureSpec in Kotlin\nDESCRIPTION: Demonstrates FeatureSpec style which uses feature/scenario keywords similar to Cucumber. Shows both basic structure and test disabling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"the can of coke\") {\n        scenario(\"should be fizzy when I shake it\") {\n            // test here\n        }\n        scenario(\"and should be tasty\") {\n            // test here\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"this outer block is enabled\") {\n        xscenario(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xfeature(\"this block is disabled\") {\n        scenario(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit XML Reports\nDESCRIPTION: Demonstrates how to configure Gradle to avoid generating its own JUnit XML reports and set the build directory property needed by the Kotest JunitXmlReporter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/junit_xml.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") {\n  useJUnitPlatform()\n  reports {\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Solution: Reset Mocks After Each Test\nDESCRIPTION: Shows how to reset mocks after each test using Kotest's afterTest listener, clearing mock interactions for subsequent tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/integrations/mocks.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    afterTest {\n        clearMocks(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Manipulating Virtual Time with TestDispatcher in Kotest\nDESCRIPTION: This example demonstrates how to use TestDispatcher to control virtual time in a Kotest test. It shows launching a coroutine with a delay and then advancing the virtual time to complete the delay immediately.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.test.testCoroutineScheduler\n\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"advance time\").config(testCoroutineDispatcher = true) {\n        val duration = 1.days\n        // launch a coroutine that would normally sleep for 1 day\n        launch {\n          delay(duration.inWholeMilliseconds)\n        }\n        // move the clock on and the delay in the above coroutine will finish immediately.\n        testCoroutineScheduler.advanceTimeBy(duration.inWholeMilliseconds)\n        val currentTime = testCoroutineScheduler.currentTime\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using URI Component Matchers in KoTest\nDESCRIPTION: Examples of testing various components of a URI (scheme, host, port, path, parameters, fragment) using KoTest matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nval uri = URI.create(\"https://localhost:443/index.html?q=findme#results\")\nuri should haveScheme(\"https\")\nuri should haveHost(\"localhost\")\nuri should havePort(443)\nuri should havePath(\"/index.html\")\nuri should haveParameter(\"q\")\nuri should haveFragment(\"results\")\n```\n\n----------------------------------------\n\nTITLE: Using withAssumptions for input filtering in Kotest property tests\nDESCRIPTION: Demonstrates how to use withAssumptions to skip test iterations where the assumption condition is not met, while tracking that we're not filtering too many inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/assumptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  withAssumptions(a != b) {\n    levenshtein(a, b) shouldBeGreaterThan 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TestClock in Kotlin\nDESCRIPTION: Creates a new TestClock instance with a specific timestamp and timezone offset. This allows for controlled time management in tests rather than relying on system time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/clock.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval timestamp = Instant.ofEpochMilli(1234)\nval clock = TestClock(timestamp, ZoneOffset.UTC)\n```\n\n----------------------------------------\n\nTITLE: Using asClue Extension Function in Kotlin\nDESCRIPTION: Using the asClue extension function to turn a lambda into a clue, which achieves the same result as withClue but with a different syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Name should be present (user_id=${user.id})\" }.asClue {\nuser.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: ZonedDateTime Assertions in Kotlin with Kotest\nDESCRIPTION: Extension methods for asserting properties of ZonedDateTime objects, including verification of current date and comparison with other ZonedDateTime instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nzonedDateTime.shouldBeToday()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nzonedDateTime.shouldHaveSameInstantAs(other: ZonedDateTime)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests via Gradle Command Line by Package\nDESCRIPTION: Example of using Gradle's --tests command line flag to filter tests by package name. This allows running only tests that match the specified pattern.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/gradle.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngradle test --tests 'com.sksamuel.somepackage*'\n```\n\n----------------------------------------\n\nTITLE: Registering a Listener Project-Wide in Kotest\nDESCRIPTION: This example demonstrates how to register a custom extension (TimerListener) at the project level by creating a configuration object that extends AbstractProjectConfig. This makes the extension available to all tests in the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/extensions/examples.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyConfig : AbstractProjectConfig() {\n    override fun extensions(): List<Extension> = listOf(TimerListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spring Constructor Injection in KotlinTest\nDESCRIPTION: This example demonstrates the SpringAutowireConstructorExtension functionality which allows for constructor injection in Spring tests. Dependencies can be injected directly in the primary constructor of the test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec({\n  \"SpringListener\" should {\n    \"have autowired the service\" {\n      service.repository.findUser().name shouldBe \"system_user\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Invocations in DescribeSpec\nDESCRIPTION: Example of configuring a test to run multiple times using the invocations parameter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Continually Testing in Kotlin with Kotest\nDESCRIPTION: Demonstrates basic usage of the continually function to verify that a block of code continues to pass for 60 seconds, with checks performed every 10 milliseconds by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/continually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validated Generators in Kotest with Arrow\nDESCRIPTION: Generators for Arrow's Validated and ValidatedNel types, producing both valid and invalid instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/arrow.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.validated(invalid, valid)\nArb.validatedNel(invalid, valid)\n```\n\n----------------------------------------\n\nTITLE: Marking Tests with Tags in Kotest\nDESCRIPTION: Demonstrates how to apply tags to individual test cases using the config function\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/tags.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting File Properties in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates assertion functions for file operations in Kotest. It includes checks for file attributes, sizes, contents, and path properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeAbsolute()\nfile.shouldBeADirectory()\nfile.shouldBeAFile()\nfile.shouldBeCanonical()\nfile.shouldBeEmpty()\nfile.shouldBeExecutable()\nfile.shouldBeHidden()\nfile.shouldBeReadable()\nfile.shouldBeRelative()\nfile.shouldBeSmaller(file)\nfile.shouldBeLarger(file)\nfile.shouldBeWriteable()\ndir.shouldBeNonEmptyDirectory()\ndir.shouldContainFile(name)\ndir.shouldContainNFiles(name)\nfile.shouldExist()\nfile.shouldHaveExtension(ext)\nfile.shouldHaveFileSize(size)\nfile.shouldHaveName(name)\nfile.shouldHavePath(path)\nfile.shouldStartWithPath(prefix)\ndir.shouldContainFileDeep(name)\ndir.shouldContainFiles(name1, name2, ..., nameN)\nfile.shouldBeSymbolicLink()\nfile.shouldHaveParent(name)\n```\n\n----------------------------------------\n\nTITLE: Generating GeoLocation Objects in Kotlin with Kotest\nDESCRIPTION: Produces an Arb that generates GeoLocation objects with random latitude/longitude points uniformly distributed across the globe. Useful for testing geography-related functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.geoLocation()\n```\n\n----------------------------------------\n\nTITLE: Asserting ZonedDateTime Properties in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates assertion functions for ZonedDateTime in Kotest. It includes checks for today's date and instant equality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nzonedDateTime.shouldBeToday()\nzonedDateTime.shouldHaveSameInstantAs(other: ZonedDateTime)\n```\n\n----------------------------------------\n\nTITLE: Using shouldEqualSpecifiedJson for lenient field comparison\nDESCRIPTION: Example showing the difference between shouldEqualJson and shouldEqualSpecifiedJson, where the latter uses lenient field comparison by default, allowing extra properties in the actual JSON.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/json/content.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = \"\"\" { \"a\": true, \"date\": \"2019-11-03\" } \"\"\"\nval b = \"\"\" { \"a\": true } \"\"\"\n\n// this would pass\na shouldEqualSpecifiedJson b\n\n// this would fail\na shouldEqualJson b\n```\n\n----------------------------------------\n\nTITLE: Long Assertions in Kotlin using Kotest\nDESCRIPTION: Assertions for long values and ranges in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nlong.shouldBeBetween(x, y)\nlong.shouldBeLessThan(n)\nlong.shouldBeLessThanOrEqual(n)\nlong.shouldBeGreaterThan(n)\nlong.shouldBeGreaterThanOrEqual(n)\nlong.shouldBeInRange(range)\n```\n\n----------------------------------------\n\nTITLE: NonEmptyList Generators in Kotest with Arrow\nDESCRIPTION: Generators for Arrow's NonEmptyList type, allowing creation of non-empty lists with configurable sizes and element types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.nel(arb)\nArb.nel(arb, range)\n```\n\n----------------------------------------\n\nTITLE: Incompatible Failure Example in Kotlin\nDESCRIPTION: Demonstrates how using fail() function breaks soft assertion accumulation by throwing immediate exception.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/soft_assertions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  fail(\"Something happened\")\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Statistical Properties of Collections in Kotlin\nDESCRIPTION: These matchers are used to assert various statistical properties of collections in Kotlin, such as mean, variance, and standard deviation, with optional precision specifications.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveMean(mean)\ncollection.shouldHaveMean(mean, precision)\ncollection.shouldHaveVariance(mean)\ncollection.shouldHaveVariance(mean, precision)\ncollection.shouldHaveStandardDeviation(mean)\ncollection.shouldHaveStandardDeviation(mean, precision)\n```\n\n----------------------------------------\n\nTITLE: Spring Constructor Injection Test Example\nDESCRIPTION: Shows how to use constructor injection in a Kotest test class with Spring components.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/spring.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"have autowired the service\" {\n        service.repository.findUser().name shouldBe \"system_user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Factory with Lifecycle Callbacks in Kotlin\nDESCRIPTION: Example of defining a test factory with beforeTest callbacks that only apply to tests within that factory, not to any other tests in specs where the factory is included.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_factories.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval factory1 = funSpec {\n  beforeTest {\n     println(\"Executing $it\")\n  }\n  test(\"a\") {  }\n  test(\"b\") {  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Test Enabling with EnabledIf in Kotlin\nDESCRIPTION: Implements dynamic test enabling/disabling using a function that evaluates conditions at runtime. Example shows disabling tests starting with 'danger' on Fridays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/config_enabled.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: EnabledIf = { !(it.name.testName.startsWith(\"danger\") && isFriday()) }\n\n\"danger Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Logging Extensions\nDESCRIPTION: Demonstrates how to configure logging in Kotest by implementing LogExtension and setting logLevel in AbstractProjectConfig. Shows setup of log handler and log level configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/logging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n    override val logLevel = LogLevel.Error\n    override fun extensions() = listOf(\n        object : LogExtension {\n            override suspend fun handleLogs(testCase: TestCase, logs: List<LogEntry>) {\n                logs.forEach { println(it.level.name + \" - \" + it.message) }\n            }\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Generator Values in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use the filter method on an Arb to restrict generated values to even numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/assumptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dispatcher for Single Test in Kotest\nDESCRIPTION: Demonstrates how to enable TestDispatcher for a single test using coroutineTestScope configuration. This allows the test to use a test dispatcher for coroutine execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineTestScope = true) {\n         // this test will run with a test dispatcher\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Predicates in Eventually Function in Kotlin\nDESCRIPTION: Shows how to use predicates to verify the return value of the test in the 'eventually' function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/concurrency/eventually.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nvar string = \"x\"\n\neventually({\n  duration = 5.seconds()\n  predicate = { it.result == \"xxx\" }\n}) {\n  string += \"x\"\n  string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Name Whitespace Handling in Kotest\nDESCRIPTION: Demonstrates how to configure Kotest to remove extra whitespace from multi-line test names by setting the testNameRemoveWhitespace property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/project_config.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val testNameRemoveWhitespace = true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Continually Usage in Kotest\nDESCRIPTION: This example demonstrates how to use the continually function to verify that a code block continues to succeed for 60 seconds. The test will fail immediately if the assertion inside the block fails at any point during that period.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/continually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Testing with DateTime\nDESCRIPTION: Example of using Kotest's property testing with kotlinx datetime generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.3.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Arb.datetime(1987..1994)) { date ->\n   isValidStarTrekTngSeason(date) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Continually with Custom Poll Interval in Kotest\nDESCRIPTION: This example shows how to specify a custom poll interval for the continually function. By default, the function checks every 10 milliseconds, but this can be changed by providing a second time parameter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/continually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds, 5.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with File-Based Table Data\nDESCRIPTION: Shows how to execute tests against data loaded from a .table file, using the same assertion pattern as in-memory tables.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/table_driven_testing.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"table-driven testing from the .table file\") {\n    // asserts like before\n    tableFromFile.forAll { id, name, username ->\n        id shouldBeGreaterThan 0\n        username shouldNotBe \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Kotest Tag System Properties\nDESCRIPTION: These snippets show how to configure Gradle (both Groovy and Kotlin DSL) to propagate system properties for Kotest tags.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/tags.md#2025-04-13_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    //... Other configurations ...\n    systemProperties = System.properties\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().associate { it.key.toString() to it.value }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure Test Reporter in Kotest\nDESCRIPTION: Kotlin code to wire the AllureTestReporter into Kotest's project configuration to enable Allure data collection during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/allure.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig {\n    override fun listeners() = listOf(AllureTestReporter())\n}\n```\n\n----------------------------------------\n\nTITLE: Locale and Timezone Extension Usage\nDESCRIPTION: Demonstrates how to manage system locale and timezone settings in tests using both extension functions and listeners.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/system.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nwithDefaultLocale(Locale.FRANCE) {\n  println(\"My locale is now France! Très bien!\")\n}\n\nwithDefaultTimeZone(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\"))) {\n  println(\"My timezone is now America/Sao_Paulo! Muito bem!\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n  // In Project or in Spec\n  override fun listeners() = listOf(\n    LocaleTestListener(Locale.FRANCE),\n    TimeZoneTestListener(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\")))\n  )\n```\n\n----------------------------------------\n\nTITLE: Thread Assertions in Kotest\nDESCRIPTION: Methods for verifying thread states including blocked status, daemon status, alive status, and termination status.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nthread.shouldBeBlocked()\nthread.shouldBeDaemon()\nthread.shouldBeAlive()\nthread.shouldBeTerminated()\n```\n\n----------------------------------------\n\nTITLE: Using ShouldSpec for Testing in Kotlin\nDESCRIPTION: Example of ShouldSpec style which uses 'should' keyword and supports nested contexts for organizing tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    should(\"return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: String Resource Equality Matching in Kotlin\nDESCRIPTION: Matchers for comparing strings with resource files, with automatic handling of line separator differences. These can be used to verify that a string matches or doesn't match the content of a specific resource file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nstr shouldMatchResource \"/path/to/test_resource.txt\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr shouldNotMatchResource \"/path/to/test_resource.txt\"\n```\n\n----------------------------------------\n\nTITLE: Using withClue for Enhanced Error Messages in Kotlin\nDESCRIPTION: Demonstrates how to use the 'withClue' helper to add a string message to an assertion, providing more context in case of a test failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/clues.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in BehaviorSpec with x-prefixed Keywords\nDESCRIPTION: BehaviorSpec provides xgiven, xwhen, and xthen variants to disable specific parts of test scenarios. This allows for selective test disabling at different levels of the behavior specification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    xgiven(\"this is disabled\") {\n        When(\"disabled by inheritance from the parent\") {\n            then(\"disabled by inheritance from its grandparent\") {\n                // disabled test\n            }\n        }\n    }\n    given(\"this is active\") {\n        When(\"this is active too\") {\n            xthen(\"this is disabled\") {\n               // disabled test\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Failures for Property Tests in Kotlin\nDESCRIPTION: This snippet demonstrates how to set a maximum number of allowed failures for a property test using PropTestConfig. This is useful for non-deterministic tests where some failures are acceptable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some flakey test\" {\n      forAll<String, String>(PropTestConfig(maxFailure = 3)) { a,b ->\n         // max of 3 inputs can fail\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Elements Collection with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers are used to assert properties of Elements collections, such as the presence of items and the number of items. They are part of the kotlintest-assertions-jsoup library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/jsoup.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nelements.shouldBePresent()\nelements.shouldBePresent(n)\nelements.shouldBePresent(n)\n```\n\n----------------------------------------\n\nTITLE: Asserting Channel Operations in Kotest\nDESCRIPTION: This snippet illustrates assertion methods for Channels in Kotest. It includes checks for receiving elements, channel size, and channel state.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nchannel.shouldReceiveWithin(duration)\nchannel.shouldReceiveNoElementsWithin(duration)\nchannel.shouldHaveSize(n)\nchannel.shouldReceiveAtLeast(n)\nchannel.shouldReceiveAtMost(n)\nchannel.shouldBeClosed()\nchannel.shouldBeOpen()\nchannel.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Creating a Composed Matcher with Logical OR in Kotlin\nDESCRIPTION: Creates a password matcher using Matcher.any which combines multiple matchers with OR logic, passing if any of the contained matchers pass.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/composed_matchers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval passwordMatcher = Matcher.any(\n   containADigit(), contain(Regex(\"[a-z]\")), contain(Regex(\"[A-Z]\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode Using Function Override in Kotlin\nDESCRIPTION: This snippet shows how to set the isolation mode by overriding the isolationMode() function in a Kotest spec class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/isolation_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n  override fun isolationMode() = IsolationMode.SingleInstance\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporter in Kotest\nDESCRIPTION: Example of configuring the JUnit XML Reporter with custom options in a ProjectConfig class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.2.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override fun listeners(): List<Listener> = listOf(\n     JunitXmlReporter(\n        includeContainers = true,\n        useTestPathAsName = true\n     )\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pythagorean Triple Function in Kotlin\nDESCRIPTION: A simple function that determines if three integer inputs form a valid Pythagorean triple by checking if a² + b² = c².\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Asserting No Elements Pass Conditions with Kotest Inspectors in Kotlin\nDESCRIPTION: This example shows how to use the forNone inspector to assert that no elements in a collection contain 'x' and start with 'bb'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/inspectors.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Invocation Timeout in Kotest FunSpec\nDESCRIPTION: This example demonstrates how to set an invocation timeout for all tests in a spec file using FunSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   invocationTimeout = 25.milliseconds\n\n   test(\"foo\") {\n      // test here\n   }\n\n   test(\"bar\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Konform Validation in Kotlin\nDESCRIPTION: Shows how to test invalid UserProfile instances and assert specific validation error messages using Kotest's shouldBeInvalid matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/konform.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval bob = UserProfile(\"bob\", 18)\nvalidateUser.shouldBeInvalid(bob) {\n  it.shouldContainError(UserProfile::fullName, \"must have at least 4 characters\")\n  it.shouldContainError(UserProfile::age, \"must be at least '21'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Reflection Properties in Kotlin\nDESCRIPTION: These snippets demonstrate various reflection-based assertions for classes, functions, properties, and callable members in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveAnnotations()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveAnnotations(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldBeAnnotatedWith<T>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldBeAnnotatedWith<T> { block }\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveFunction(name)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveFunction(name) { block }\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveMemberProperty(name)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveMemberProperty(name) { block }\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldBeSubtypeOf<T>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldBeSupertypeOf<T>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldBeData()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldBeSealed()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldBeCompanion()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHavePrimaryConstructor()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveVisibility(visibility)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkfunction.shouldHaveAnnotations()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkfunction.shouldHaveAnnotations(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkfunction.shouldBeAnnotatedWith<T>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkfunction.shouldBeAnnotatedWith<T> { block }\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkfunction.shouldHaveReturnType<T>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkfunction.shouldBeInline()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkfunction.shouldBeInfix()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkproperty.shouldBeOfType<T>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkproperty.shouldBeConst()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkproperty.shouldBeLateInit()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkcallable.shouldHaveVisibility(visibility)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkcallable.shouldBeFinal()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkcallable.shouldBeOpen()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkcallable.shouldBeAbstract()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkcallable.shouldBeSuspendable()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkcallable.shouldAcceptParameters(parameters)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkcallable.shouldAcceptParameters(parameters) { block }\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkcallable.shouldHaveParametersWithName(parameters)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkcallable.shouldHaveParametersWithName(parameters) { block }\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nktype.shouldBeOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Class for Test Rows in Kotest Data-Driven Testing\nDESCRIPTION: A data class definition that represents a single row of test data, containing three integer values for Pythagorean triple verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener in Per-Spec Mode\nDESCRIPTION: Example of using WireMockListener with ListenerMode.PER_SPEC to manage a WireMockServer instance for all tests in a test specification. The server is started once before all tests and stopped after all tests complete.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/wiremock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_SPEC))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n    //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Registering TimerListener in a Kotest Test Class\nDESCRIPTION: This snippet shows how to register the custom TimerListener extension in a specific Kotest test class using FunSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/extensions/examples.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n  extensions(TimerListener)\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Using Instant Matchers in Kotest with Kotlinx Datetime\nDESCRIPTION: Matchers for Instant objects that verify temporal relationships between instants. These extensions enable assertions for checking whether one instant comes before, after, or between other instants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeBefore(anotherInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\n----------------------------------------\n\nTITLE: Static Equivalent of Dynamic Tests in Kotest\nDESCRIPTION: Shows the static equivalent of the dynamic tests example, with each test case written out explicitly. This illustrates what dynamic test generation accomplishes behind the scenes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/writing_tests.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   test(\"pam should be a three letter name\") {\n      \"pam\".shouldHaveLength(3)\n   }\n\n   test(\"tim should be a three letter name\") {\n     \"tim\".shouldHaveLength(3)\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Function Reference Table in Markdown\nDESCRIPTION: A markdown table listing the core non-deterministic testing functions in Kotest along with their purposes. Includes Eventually for eventual pass verification, Continually for sustained pass verification, Until for predicate validation, and Retry for iteration-based retrying.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/nondeterministic_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function                      | Role                                                                                                                                                                        |\n|-------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Eventually](eventually.md)   | Used to ensure that a test will _eventually_ pass within a specified time duration. The test is repeatedly executed until the test passes or the duration expires.          |\n| [Continually](continually.md) | Used to ensure that a test _continually_ passes for a period of time. Will repeatedly execute a test until the duration has expired or the test fails.                      |\n| [Until](until.md)             | Used to ensure that a predicate will eventually hold true within a specified time duration. The predicate is repeatedly executed until true or the duration expires.        |\n| [Retry](retry.md)             | Used to ensure that a test willi eventually pass within a given number of retries. The test is repeatedly executed until the test passes or the iteration count is reached. |\n```\n\n----------------------------------------\n\nTITLE: Date Assertion Usage in Kotlin with Klock\nDESCRIPTION: Collection of date-related assertion methods for comparing and validating dates using Klock library. These matchers allow comparing years, months, days and checking if dates are before, after or between other dates.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/klock.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameYear(otherDate)\ndate.shouldHaveSameMonth(otherDate)\ndate.shouldHaveSameDay(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDay(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\n```\n\n----------------------------------------\n\nTITLE: Basic Koin Integration with Kotest FunSpec\nDESCRIPTION: Example showing how to use Koin dependency injection in a Kotest FunSpec test class. Demonstrates setting up KoinExtension and injecting dependencies using the inject delegate.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/koin.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : FunSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(myKoinModule))\n\n    val userService by inject<UserService>()\n\n    init {\n        test(\"use userService\") {\n            userService.getUser().username shouldBe \"LeoColman\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing List Tests Using WordSpec\nDESCRIPTION: Example of testing a List implementation using Kotest's WordSpec style, demonstrating size and contains functionality tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_factories.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ListTest : WordSpec({\n\n   val empty = List<Int>()\n\n   \"List\" should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using And Keyword in BehaviorSpec\nDESCRIPTION: Shows how to use the 'And' keyword in BehaviorSpec's Given and When scopes to add further detail to test scenarios. This enables more descriptive and complex BDD specifications.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        and(\"a witch\") {\n            `when`(\"The witch sits on it\") {\n                and(\"she laughs hysterically\") {\n                    then(\"She should be able to fly\") {\n                        // test code\n                    }\n                }\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Test Factory in Test Suite\nDESCRIPTION: Example of including test factory in a test suite to test multiple implementations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_factories.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IndexedSeqTestSuite : WordSpec({\n   include(indexedSeqTests(\"vector\"), Vector())\n   include(indexedSeqTests(\"list\"), List())\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher Extension Functions in Kotlin\nDESCRIPTION: This code shows how to use the custom string length matcher extension functions in Kotest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/custom.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\".shouldHaveLength(9)\n\"hello bar\".shouldNotHaveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Focus in Kotest StringSpec\nDESCRIPTION: This snippet shows how to use the 'f:' prefix to focus on a single top-level test in a StringSpec, causing only that test to be executed while others are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/focus.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Eventually with Configuration Block\nDESCRIPTION: Example showing how to use eventually with a configuration block to set multiple options including duration and interval.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/concurrency/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5000\n  interval = 1000.fixed()\n}) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode Using DSL in Kotest\nDESCRIPTION: Example showing how to set isolation mode using Kotest's DSL approach within a test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/isolation_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec({\n isolationMode = IsolationMode.SingleInstance\n // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Example of Blocking Code in Non-Blocking Context\nDESCRIPTION: Demonstrates a function that creates a blocking operation (Thread.sleep) in a non-blocking coroutine context using Dispatchers.Default. This is exactly the type of code BlockHound is designed to detect.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/blockhound.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate suspend fun blockInNonBlockingContext() {\n   withContext(Dispatchers.Default) {\n      @Suppress(\"BlockingMethodInNonBlockingContext\")\n      Thread.sleep(2)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Listener at Test Class Level in Kotest\nDESCRIPTION: This example shows how to register a custom extension (TimerListener) at the test class level using the extensions() function. This applies the extension to all tests in that class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/extensions/examples.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n  extensions(TimerListener)\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Timeout in Kotest using ProjectConfig\nDESCRIPTION: This snippet demonstrates how to set up a project-level timeout in Kotest. It uses the AbstractProjectConfig class to define a projectTimeout of 10 minutes, which will be applied to all tests in the module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/timeouts/project_timeout.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val projectTimeout: Duration = 10.minutes\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Either Types in Kotlin with Kotest Arrow\nDESCRIPTION: Examples of assertions for Either types using Kotest Arrow matchers. These matchers check if an Either is Right or Left, and can verify specific values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\neither.shouldBeRight()\neither.shouldBeRight(v)\neither.shouldBeLeft()\neither.shouldBeLeft(v)\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Against Schemas in Kotest\nDESCRIPTION: Shows how to use the `shouldMatchSchema` matcher to validate JSON strings against defined schemas. Includes examples of both failing and passing validations with explanation of the results.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/json/schema.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n\"{\\\"\\\"} shouldMatchSchema personSchema\n\n// fails with:\n// $.name => Expected string, but was undefined\n\n\"\"\" { \\\"name\\\": \\\"Emil\\\", \\\"age\\\": 34 } \"\"\"\n// Passes, since address isn't required and `additionalProperties` are allowed\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Wide Timeout Settings\nDESCRIPTION: Shows how to configure both test timeout and invocation timeout at the project level using ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig {\n    override val timeout = 100.milliseconds\n    override val invocationTimeout = 33.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Using withClue with string message in Kotest\nDESCRIPTION: Example of using withClue with a static string message to provide context for an assertion. This adds explanatory text to the failure message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlinx DateTime Arbitraries in Kotest\nDESCRIPTION: Extended date and time arbitrary functions requiring the kotlinx-datetime module. These provide more flexible date-time generation capabilities for testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.date(yearRange)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.datetime(yearRange, hourRange, minuteRange, secondRage)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Operations with Eventually in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the 'eventually' function to test an asynchronous operation. It checks if a user repository has one row after a message is sent, with a timeout of 5 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"check if user repository has one row after message is sent\") {\n      sendMessage()\n      eventually(5.seconds) {\n        userRepository.size() shouldBe 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Inspector Usage in Kotest\nDESCRIPTION: Shows how to use Kotest's inspector functionality to test elements in a collection against specific criteria.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nmylist.forExactly(3) {\n    it.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selectively Disabling Tests with xit in Kotest DescribeSpec\nDESCRIPTION: This example shows how to use the 'xit' method to disable a specific test within an enabled describe block in a Kotest DescribeSpec. It demonstrates the ability to selectively disable individual tests while keeping others active.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/xmethods.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  describe(\"this block is enabled\") {\n    xit(\"will not run\") {\n      // disabled test\n    }\n    it(\"will run\") {\n       // enabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Kotest Arb Values\nDESCRIPTION: Shows how to create a filtered Arb that generates only values matching a predicate, demonstrated by generating even and odd numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genops.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\nval odds = Arb.int().filter { it.value % 2 == 1 }\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests Using @Ignored Annotation in Kotest\nDESCRIPTION: Shows how to completely disable a spec class using the @Ignored annotation. When a spec is annotated with @Ignored, it will not be instantiated or executed during test runs, avoiding any initialization code or errors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/annotations.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Ignored\nclass IgnoredSpec : FunSpec() {\n  init {\n    error(\"boom\") // spec will not be created so this error will not happen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Testing with FeatureSpec in Kotlin\nDESCRIPTION: Example of FeatureSpec style which uses feature/scenario keywords similar to Cucumber testing framework.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"the can of coke\") {\n        scenario(\"should be fizzy when I shake it\") {\n            // test here\n        }\n        scenario(\"and should be tasty\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Collection Statistics Matchers in Kotlin\nDESCRIPTION: Matchers for verifying statistical properties of collections such as mean, variance, and standard deviation. These matchers allow specifying custom precision for floating-point comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveMean(mean)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveMean(mean, precision)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveVariance(mean)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveVariance(mean, precision)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveStandardDeviation(mean)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveStandardDeviation(mean, precision)\n```\n\n----------------------------------------\n\nTITLE: Adding Jacoco Plugin in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to add the Jacoco plugin to the Gradle build file. It's the first step in integrating Jacoco for code coverage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/integrations/jacoco.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n   ...\n   jacoco\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Constructor Injection in KotlinTest\nDESCRIPTION: Demonstrates the updated spring extension module that allows for constructor injection in KotlinTest. The SpringAutowireConstructorExtension must be added to the ProjectConfig to enable this feature.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec({\n  \"SpringListener\" should {\n    \"have autowired the service\" {\n      service.repository.findUser().name shouldBe \"system_user\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Tests with StringSpec using Constructor Lambda\nDESCRIPTION: Example of creating a test class using StringSpec with a lambda expression in the constructor. This approach is more concise but doesn't allow overriding parent class methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Generated Values in Kotest (Kotlin)\nDESCRIPTION: Demonstrates how to use the filter function to restrict the set of generated values from an Arb (arbitrary) in Kotest property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/assumptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\n```\n\n----------------------------------------\n\nTITLE: Error Output from Basic Assertion Failure\nDESCRIPTION: The error output when a basic assertion fails, showing both the expected and actual values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nexpected: \"sksamuel\" but was: \"sam@myemailaddress.com\"\n```\n\n----------------------------------------\n\nTITLE: Using Receiver-Based assertSoftly in Kotest\nDESCRIPTION: Example of using the new receiver-based assertSoftly extension function for more concise syntax when testing multiple properties of an object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nperson.assertSoftly {\n  name shouldBe \"sam\"\n  age shouldBe 99\n  city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Map Assertions in Kotest\nDESCRIPTION: Assertions for verifying the contents and structure of maps in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nmap.shouldContain(\"key\", \"value\")\nmap.shouldContainAll(other)\nmap.shouldContainExactly(other)\nmap.shouldContainKey(key)\nmap.shouldContainKeys(keys)\nmap.shouldContainValue(value)\nmap.shouldContainValues(values)\nmap.shouldBeEmpty()\nmap.shouldMatchAll(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\nmap.shouldMatchExactly(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Elements with Kotest Inspectors in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the forAtLeast inspector to test that at least two elements in a list of names have a length of 7 or more characters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/inspectors.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval xs = listOf(\"sam\", \"gareth\", \"timothy\", \"muhammad\")\nxs.forAtLeast(2) {\n    it.shouldHaveMinLength(7)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Property Test Generator in Kotlin\nDESCRIPTION: Adds a lazy property test generator to improve performance for large property tests by generating values on-demand.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nAdd lazy property test generator\n```\n\n----------------------------------------\n\nTITLE: Combining Two Arbitraries with Kotest\nDESCRIPTION: Uses Arb.bind(arbA, arbB, fn) to generate values by pulling a value from each of the two given arbitraries and passing those values to the supplied function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_36\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.bind(arbA, arbB, fn)\n```\n\n----------------------------------------\n\nTITLE: Generating Random UUIDs in Kotlin with Kotest\nDESCRIPTION: Utilizes Arb.uuid() to generate random UUIDs of a specified type.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.uuid(type)\n```\n\n----------------------------------------\n\nTITLE: Setting Max Failure Threshold in Kotest Property Tests\nDESCRIPTION: Shows how to configure a property test to allow a maximum number of failures before considering the test failed. This is useful for non-deterministic tests where occasional failures are acceptable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some flakey test\" {\n      forAll<String, String>(PropTestConfig(maxFailure = 3)) { a,b ->\n         // max of 3 inputs can fail\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using asClue Extension Function with Lambda\nDESCRIPTION: Using the asClue extension function on a lambda to create a dynamic error message, which is only evaluated if the test fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Name should be present (user_id=${user.id})\" }.asClue {\nuser.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Using TestLogger Object in Kotest Tests\nDESCRIPTION: This example demonstrates how to use the TestLogger object to pass logging functionality to external test helper functions. This approach allows for structured logging in test utility methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/logging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something else\") {\n  logger.assertSomething(\"something else\")\n}\n\nfun TestLogger.assertSomething(actual: String) {\n   info { \"asserting something about $actual\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Test Conditions with EnabledCondition in Kotlin Kotest\nDESCRIPTION: Demonstrates how to create a custom condition for enabling tests by implementing the EnabledCondition interface. This example shows a condition that only enables tests containing 'Linux' in their name when running on Linux systems.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/annotations.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LinuxOnlyCondition : EnabledCondition {\n  override fun enabled(kclass: KClass<out Spec>): Boolean = when {\n    kclass.simpleName?.contains(\"Linux\") == true -> IS_OS_LINUX\n    else -> true // non Linux tests always run\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Test Listener Implementation\nDESCRIPTION: Example of using SystemEnvironmentTestListener at the spec level for environment variable testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/system.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemEnvironmentTestListener(\"foo\", \"bar\"))\n\n    init {\n      \"MyTest\" {\n        System.getenv(\"foo\") shouldBe \"bar\"\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting String Equality with Resource in Kotest\nDESCRIPTION: These functions assert whether a string matches or does not match the content of a specified resource file. They ignore differences in line separators for more flexible comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\nstr shouldMatchResource \"/path/to/test_resource.txt\"\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nstr shouldNotMatchResource \"/path/to/test_resource.txt\"\n```\n\n----------------------------------------\n\nTITLE: Kotlin Class Reflection Matchers\nDESCRIPTION: Assertion functions for testing Kotlin class properties, annotations, and structure using reflection. Includes matchers for verifying class attributes, constructors, visibility and inheritance relationships.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveAnnotations()\nkclass.shouldHaveAnnotations(n)\nkclass.shouldBeAnnotatedWith<T>()\nkclass.shouldBeAnnotatedWith<T> { block }\nkclass.shouldHaveFunction(name)\nkclass.shouldHaveFunction(name) { block }\nkclass.shouldHaveMemberProperty(name)\nkclass.shouldHaveMemberProperty(name) { block }\nkclass.shouldBeSubtypeOf<T>()\nkclass.shouldBeSupertypeOf<T>()\nkclass.shouldBeData()\nkclass.shouldBeSealed()\nkclass.shouldBeCompanion()\nkclass.shouldHavePrimaryConstructor()\nkclass.shouldHaveVisibility(visibility)\n```\n\n----------------------------------------\n\nTITLE: Defining Matcher Interface in Kotlin\nDESCRIPTION: Basic interface definition for creating custom matchers in Kotest. The interface requires implementation of a test method that returns a MatcherResult.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/custom.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Matcher<in T> {\n  fun test(value: T): MatcherResult\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data Tests in Kotest with Custom Test Names\nDESCRIPTION: This snippet showcases nested data tests in Kotest with a custom test name on the second level. It uses the same structure as the previous example but adds a custom naming function for the HTTP method tests, improving test readability in the output.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/nested.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n    val services = listOf(\n       \"http://internal.foo\",\n       \"http://internal.bar\",\n       \"http://public.baz\",\n    )\n\n    val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n    withData(services) { service ->\n       withData<String>({ \"should support HTTP $it\" }, methods) { method ->\n          // test service against method\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Kotlin Class Properties in Kotest\nDESCRIPTION: Various assertion methods for Kotlin classes, including checking for functions, properties, inheritance, and class types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_31\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveFunction(name) { block }\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveMemberProperty(name)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldBeSubtypeOf<T>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldBeData()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveVisibility(visibility)\n```\n\n----------------------------------------\n\nTITLE: Implementing WithDataTestName Interface in Kotlin\nDESCRIPTION: Demonstrates implementing the WithDataTestName interface to provide custom test names through the dataTestName() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/test_names.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int) : WithDataTestName {\n  override fun dataTestName() = \"wibble $a, $b, $c wobble\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Assertions with withClue and asClue in Kotlin\nDESCRIPTION: Shows how to use withClue and asClue helpers to add extra context to assertions, making test failures more informative. It includes examples for both single and multiple assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") { user.name shouldNotBe null }\n\ndata class HttpResponse(val status: Int, body: String)\nval response = HttpResponse(200, \"the content\")\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Package Using Kotest System Property\nDESCRIPTION: A command to run only tests in specified package using Kotest's specific system property approach. This provides more fine-grained filtering than the standard Gradle approach.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/gradle.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*'\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale and Timezone Listeners in Kotlin Tests\nDESCRIPTION: Shows how to use LocaleTestListener and TimeZoneTestListener to set default Locale and Timezone at the Spec or Project level in Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(\n  LocaleTestListener(Locale.FRANCE),\n  TimeZoneTestListener(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\")))\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Case Severity in Kotest\nDESCRIPTION: Demonstrates how to set the severity level for a test case in Kotest, which can be used for conditional test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.3.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec() {\n   init {\n      test(\"very very important\").config(severity = TestCaseSeverityLevel.CRITICAL) {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FreeSpec Style in Kotest\nDESCRIPTION: FreeSpec allows for arbitrary nesting of test containers using the '-' operator. Inner containers can be nested to any depth, with the innermost test not using the '-' operator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FreeSpec({\n    \"String.length\" - {\n        \"should return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n    \"containers can be nested as deep as you want\" - {\n        \"and so we nest another container\" - {\n            \"yet another container\" - {\n                \"finally a real test\" {\n                    1 + 1 shouldBe 2\n                }\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Null Elements in Collections with Kotest\nDESCRIPTION: Verifies presence or absence of null elements in a collection using specialized matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/collections.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainNoNulls()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainNull()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainOnlyNulls()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Exhaustive Generator in Kotlin\nDESCRIPTION: Demonstrates how to create an exhaustive generator by using the exhaustive() extension function on a list of values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/customgens.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval singleDigitPrimes = listOf(2,3,5,7).exhaustive()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Test Enabling with enabledIf in Kotlin\nDESCRIPTION: Demonstrates using enabledIf for dynamic test enabling/disabling based on runtime conditions. Example shows disabling tests that start with 'danger' on Fridays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/config_enabled.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: EnabledIf = { !(it.name.testName.startsWith(\"danger\") && isFriday()) }\n\n\"danger Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Test Listeners\nDESCRIPTION: Demonstrates how to register PropTestListener for setup and teardown operations in each test iteration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some property test which require setup and tear down in each iteration\" {\n      forAll<String, String>(PropTestConfig(listeners = listOf(MyPropTestListener))) { a,b ->\n         // some assertion\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Selective Field Comparison Matchers in Kotest\nDESCRIPTION: Matchers for comparing objects based on specific fields, allowing selective inclusion or exclusion of properties during equality comparison.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToUsingFields(other: T, vararg properties: KProperty<*>)\nany.shouldBeEqualToIgnoringFields(other: T, vararg properties: KProperty<*>)\n```\n\n----------------------------------------\n\nTITLE: Solution 2: Reset Mocks After Tests\nDESCRIPTION: Resolves mock persistence by clearing mocks after each test using the afterTest listener. This approach keeps the same mock instances but resets their state between tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/integrations/mocks.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    afterTest {\n        clearMocks(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: FlatMapping Kotest Arbitrary Values\nDESCRIPTION: Shows how to create dependent arbitraries where the output depends on previous arbitrary values using flatMap.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genops.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval dependentArbs: Arb<String> = Arb.of(\"foo\", \"bar\").flatMap { prefix ->\n   Arb.int(1..10).map { integer ->\n      \"${prefix}-${integer}\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Individual Property Matchers\nDESCRIPTION: Creates separate matcher functions for name, age, and address properties. Each matcher implements custom logic for property validation with appropriate success and failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/data_class_matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun nameMatcher(name: String) = Matcher<String> {\n  MatcherResult(\n    value == name,\n    { \"Name $value should be $name\" },\n    { \"Name $value should not be $name\" }\n  )\n}\n\nfun ageMatcher(age: Int) = Matcher<Int> {\n  MatcherResult(\n    value == age,\n    { \"Age $value should be $age\" },\n    { \"Age $value should not be $age\" }\n  )\n}\n\nval addressMatcher = Matcher<Address> {\n  MatcherResult(\n    value == Address(\"Warsaw\", \"Test\", \"1/1\"),\n    { \"Address $value should be Test 1/1 Warsaw\" },\n    { \"Address $value should not be Test 1/1 Warsaw\" }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest Mode Basic Example\nDESCRIPTION: Shows how InstancePerTest mode creates new instances for each test case, including contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/isolation_mode.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually Configuration Block Usage in Kotlin\nDESCRIPTION: Example of using eventually with a configuration block to specify duration and interval settings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 1.seconds\n  interval = 100.milliseconds\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Dispatcher for All Tests in a Spec\nDESCRIPTION: Demonstrates how to enable TestDispatcher for all tests within a spec by setting coroutineTestScope at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      coroutineTestScope = true\n      test(\"this test uses a test dispatcher\") {\n      }\n      test(\"and so does this test!\") {\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Embedded Kafka Listener in Kotest using Constructor Approach\nDESCRIPTION: Demonstrates how to register the embedded Kafka listener in a Kotest FunSpec using the constructor approach. This makes the embedded Kafka instance available throughout the test's lifecycle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/kafka.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n  listener(embeddedKafkaListener)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Tests with Context Blocks in ExpectSpec\nDESCRIPTION: Shows how to organize tests in ExpectSpec using nested context blocks for better test organization. Context blocks allow grouping related tests together.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"a calculator\") {\n        expect(\"simple addition\") {\n            // test here\n        }\n        expect(\"integer overflow\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Files in Kotest Tests\nDESCRIPTION: Demonstrates how to use the 'tempfile()' function in a Kotest FunSpec to create a temporary file that will be automatically cleaned up after the test run. This approach helps prevent flaky tests caused by stale files.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/tempfile.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val file = tempfile()\n\n   test(\"a temporary file dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Kotest Arb Generators\nDESCRIPTION: Shows how to create a new Arb that provides a subset of values by applying a filter to an existing Arb. The example demonstrates creating generators for even and odd numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genops.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\nval odds = Arb.int().filter { it.value % 2 == 1 }\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener with Kotest FunSpec\nDESCRIPTION: Demonstrates how to use WireMockListener to manage a WireMockServer instance for the entire test specification. It sets up a stub for a GET request and verifies the response.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/wiremock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_SPEC))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n    //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Broker Message Reception with Until Function in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the 'until' function to test if a broker receives a message within a specified duration. It sets a 5-second timeout and repeatedly checks if the broker has received any messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/until.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Basic Statistics in Kotest Property Tests\nDESCRIPTION: Demonstrates how to collect statistics on enum values in a property test using the collect function, which counts occurrences of each category during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/statistics.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n  collect(mode)\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Test Factory in Test Suite\nDESCRIPTION: Example of including test factory for multiple implementations in a test suite.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_factories.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IndexedSeqTestSuite : WordSpec({\n   include(indexedSeqTests(\"vector\"), Vector())\n   include(indexedSeqTests(\"list\"), List())\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Person Class Arbitrary Generator in Kotlin\nDESCRIPTION: Shows how to create a custom arbitrary generator for a Person class by composing multiple arbitraries using bind() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/customgens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb = arbitrary {\n   val name = Arb.string(10..12).bind()\n   val age = Arb.int(21, 150).bind()\n   Person(name, age)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Timer Listener Extension in Kotest\nDESCRIPTION: Implementation of a custom TimerListener extension that measures and logs the execution time of each test. It implements the BeforeTestListener and AfterTestListener interfaces to capture start and end times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/extensions/examples.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : BeforeTestListener, AfterTestListener {\n\n  var started = 0L\n\n  override fun beforeTest(testCase: TestCase): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(testCase: TestCase, result: TestResult): Unit {\n    println(\"Duration of ${testCase.descriptor} = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable Function-Based Lifecycle Hooks in Kotest\nDESCRIPTION: Demonstrates how to create reusable lifecycle hook functions that can be shared across multiple test specs using the BeforeTest type alias.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/lifecycle_hooks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval startTest: BeforeTest = {\n   println(\"Starting a test $it\")\n}\n\nclass TestSpec : WordSpec({\n\n   // used once\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"be alive\" {\n         println(\"Johnny5 is alive!\")\n      }\n   }\n})\n\nclass OtherSpec : WordSpec({\n\n   // used twice\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"fail\" {\n         fail(\"boom\")\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Single Instance Mode Example in Kotest\nDESCRIPTION: Demonstrates SingleInstance mode where the same spec instance is used for all tests, showing UUID printing across test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/isolation_mode.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SingleInstanceExample : WordSpec({\n   val id = UUID.randomUUID()\n   \"a\" should {\n      println(id)\n      \"b\" {\n         println(id)\n      }\n      \"c\" {\n         println(id)\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Comparison Options in Kotlin\nDESCRIPTION: Shows how to use CompareJsonOptions to customize the behavior of JSON comparison. It includes examples of inline option specification and creating a custom comparison function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/json/content.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldEqualJson(b, compareJsonOptions { arrayOrder = ArrayOrder.Strict })\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval myOptions = compareJsonOptions {\n   typeCoercion = TypeCoercion.Enabled\n   arrayOrder = ArrayOrder.Lenient\n}\n\ninfix fun String.lenientShouldEqualJson(other: String) = this.shouldEqualJson(other, myOptions)\n\n\"[1, 2]\" lenientShouldEqualJson \"[2, 1]\" // This will pass\n```\n\n----------------------------------------\n\nTITLE: Gradle Configuration for System Properties\nDESCRIPTION: Required Gradle configuration to support system properties for tag filtering in Groovy and Kotlin DSL.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/tags.md#2025-04-13_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    //... Other configurations ...\n    systemProperties = System.properties\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().asIterable().associate { it.key.toString() to it.value }\n}\n```\n\n----------------------------------------\n\nTITLE: String Resource Matching with Custom Matchers in Kotlin\nDESCRIPTION: Extended string resource matchers that accept a custom matcher function. These allow for more specific comparison logic while still handling line separator differences by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldMatchResource(\"/path/to/test_resource.txt\", ::providedMatcher)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldNotMatchResource(\"/path/to/test_resource.txt\", ::providedMatcher)\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Test Seed in Kotest\nDESCRIPTION: Example showing how to manually specify a seed value for property testing using PropTestConfig. This ensures consistent test execution by using a fixed seed value of 127305235 for string concatenation property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/seed.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample : StringSpec({\n  \"String size\" {\n    forAll<String, String>(PropTestConfig(seed = 127305235)) { a, b ->\n      (a + b).length == a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: String Resource Matching in Kotlin with Kotest\nDESCRIPTION: Assertion functions for comparing strings with resource file contents. Includes both positive and negative assertions with optional custom matcher support. All matchers ignore line separator differences by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nstr shouldMatchResource \"/path/to/test_resource.txt\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr shouldNotMatchResource \"/path/to/test_resource.txt\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldMatchResource(\"/path/to/test_resource.txt\", ::providedMatcher)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nstr.shouldNotMatchResource(\"/path/to/test_resource.txt\", ::providedMatcher)\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Class Spring Extension in Kotest\nDESCRIPTION: Demonstrates how to enable Spring integration for a specific test class by registering SpringExtension at the class level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/spring.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : FunSpec() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Using AssertSoftly with Receiver in Kotest\nDESCRIPTION: Demonstrates the new assertSoftly function with a receiver, allowing for more concise and readable soft assertions on objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.1.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nassertSoftly {\n  person.name shouldBe \"sam\"\n  person.age shouldBe 99\n  person.city shouldBe \"Chicago\"\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nperson.assertSoftly {\n  name shouldBe \"sam\"\n  age shouldBe 99\n  city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Value Presence in Range in Kotlin\nDESCRIPTION: These matchers check whether a value is contained within a range or not. They compare by value, not by reference.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/ranges.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nvalue.shouldBeIn(range)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nvalue.shouldNotBeIn(range)\n```\n\n----------------------------------------\n\nTITLE: Using EnabledOrReasonIf for Conditional Tests with Skip Reasons in Kotest\nDESCRIPTION: Shows how to use 'enabledOrReasonIf' to provide a reason for skipping tests. The function returns an Enabled type that can contain a skip reason which will be included in test reports.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/config_enabled.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: (TestCase) -> Enabled = {\n   if (it.name.testName.startsWith(\"danger\") && isFriday())\n      Enabled.disabled(\"It's a friday, and we don't like danger!\")\n   else\n      Enabled.enabled\n}\n\n\"danger Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Complex Composed Matcher for Data Validation in Kotest\nDESCRIPTION: This snippet demonstrates using the composed Person matcher with both passing and failing examples, showing how it validates all properties at once.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/composed_matchers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nPerson(\"John\", 21, Address(\"Warsaw\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21)\nPerson(\"Sam\", 22, Address(\"Chicago\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21) // would fail\n```\n\n----------------------------------------\n\nTITLE: Nested Data Testing with Custom Test Names in Kotest\nDESCRIPTION: Shows how to use nested data tests with custom test naming for better readability. This example adds a custom name generator for the inner test cases using string interpolation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/nested.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n    val services = listOf(\n       \"http://internal.foo\",\n       \"http://internal.bar\",\n       \"http://public.baz\",\n    )\n\n    val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n    withData(services) { service ->\n       withData<String>({ \"should support HTTP $it\" }, methods) { method ->\n          // test service against method\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logging Functions in Kotest Tests\nDESCRIPTION: This example shows how to use logging functions within a Kotest test. It demonstrates the usage of the 'warn' function to log a warning message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/logging.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something\") {\n  warn { \"something weird happened\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Property Test Edge Case Example\nDESCRIPTION: Example showing updated property test edge case implementation requiring RandomSource parameter\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Old implementation\nfun edgecases(): List<A>\n\n// New implementation\nfun edgecase(rs: RandomSource): A?\n```\n\n----------------------------------------\n\nTITLE: Defining Pythagorean Triple Function in Kotlin\nDESCRIPTION: Implements a function to check if three given integers form a Pythagorean triple. This function will be used as the subject of data-driven tests in subsequent examples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Testing Broker Message Reception with Duration in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the 'until' function to test if a broker receives a message within a specified duration. It polls the broker every second for up to 5 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/until.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NoSystemOutListener Extension in Kotest\nDESCRIPTION: This example demonstrates how to use the built-in NoSystemOutListener extension in Kotest. This extension will cause a test to fail if any output is written to standard out during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/extensions/examples.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : DescribeSpec({\n\n    listener(NoSystemOutListener)\n\n    describe(\"All these tests should not write to standard out\") {\n        it(\"silence in the court\") {\n          println(\"boom\") // failure\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Objects with Konform and Kotest in Kotlin\nDESCRIPTION: Shows how to test that an object fails validation with specific error messages using Kotest's shouldBeInvalid matcher with Konform. The example creates a UserProfile with invalid data and asserts specific validation error messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/konform.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval bob = UserProfile(\"bob\", 18)\nvalidateUser.shouldBeInvalid(a) {\n  it.shouldContainError(UserProfile::fullName, \"must have at least 4 characters\")\n  it.shouldContainError(UserProfile::age, \"must be at least '21'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PropTestListener for Property Tests in Kotlin\nDESCRIPTION: This code snippet demonstrates how to create a PropTestListener object and use it with a PropTestConfig in a checkAll property test. The listener includes beforeTest and afterTest methods for setup and teardown operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = object : PropTestListener {\n  override suspend fun beforeTest() {\n    println(\"Startup\")\n  }\n\n  override suspend fun afterTest() {\n    println(\"Shutdown\")\n  }\n}\n\nval propConfig = PropTestConfig(listeners = listOf(listener))\n\ncheckAll<String, String>(10, propConfig) { a, b ->\n  a.length + b.length shouldBe (a + b).length\n}\n```\n\n----------------------------------------\n\nTITLE: Listener Configuration in Kotlin\nDESCRIPTION: Adding a listener to monitor eventually test iterations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/eventually.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  listener = { k, throwable -> println(\"Iteration $k, with cause $throwable\") }\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Specifying Seed for Property Test in Kotlin using Kotest\nDESCRIPTION: This snippet demonstrates how to manually set a seed for a property test using PropTestConfig. It tests the property that the length of two concatenated strings equals the sum of their individual lengths.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/seed.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample : StringSpec({\n  \"String size\" {\n    forAll<String, String>(PropTestConfig(seed = 127305235)) { a, b ->\n      (a + b).length == a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Classes with Improved Diff Output in Kotest\nDESCRIPTION: Demonstrates comparing two data class instances with the shouldBe assertion, which now shows highlighted differences between the objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = Foo(\"hello\", true, 1.0)\nval b = Foo(\"world\", true, 1.3)\na shouldBe b\n```\n\n----------------------------------------\n\nTITLE: Spring-Autowired Constructor Test Example\nDESCRIPTION: Illustrates a test class using constructor injection with Spring's @ContextConfiguration annotation and Kotest's WordSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/spring.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"have autowired the service\" {\n        service.repository.findUser().name shouldBe \"system_user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocalDateTime Matchers in Kotest\nDESCRIPTION: Matchers for asserting conditions on LocalDateTime objects, including time component comparisons and temporal ordering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameMinutesAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameSecondsAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameNanosAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeBefore(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeAfter(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast at Spec Level in Kotest\nDESCRIPTION: Example showing how to enable fail fast for an entire specification in Kotest. Setting failfast=true at the spec level will cause all tests to be skipped after the first failure in any context.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/fail_fast.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n\n      failfast = true\n\n      context(\"context with fail fast enabled at the spec level\") {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting KProperty Characteristics in Kotlin\nDESCRIPTION: Assertion matchers for KProperty characteristics in Kotlin, including type checking and property modifiers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nkproperty.shouldBeOfType<T>()\nkproperty.shouldBeConst()\nkproperty.shouldBeLateInit()\n```\n\n----------------------------------------\n\nTITLE: Using Range Matchers for Integers\nDESCRIPTION: Shows how to verify that an integer falls within a specified range using the beInRange matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\n3 should beInRange(1..10)\n4 should beInRange(1..3)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Domain Names in Kotlin with Kotest\nDESCRIPTION: Uses Arb.domain() to generate random domain names with customizable TLDs and label generators. By default, it uses the top 120 TLDs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.domain(tlds, labelArb)\n```\n\n----------------------------------------\n\nTITLE: Date Assertions in Kotest\nDESCRIPTION: Methods for asserting properties of date objects including minute, second, nano second values and approximate equality within a tolerance range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\ndate.shouldHaveNano(nao)\ndate.shouldBe(value plusOrMinus(tolerance))\n```\n\n----------------------------------------\n\nTITLE: Explicitly Specifying Generators in Property-based Testing with Kotlin\nDESCRIPTION: Demonstrates how to explicitly specify generators for property-based testing in KotlinTest. This example uses string generators to test string concatenation length properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n  init {\n\n    \"String size\" {\n      forAll(Gen.string(), Gen.string(), { a: String, b: String ->\n        (a + b).length == a.length + b.length\n      })\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collection Element At Index Matchers\nDESCRIPTION: Demonstrates using the haveElementAt matcher to verify elements at specific positions in collections, including handling null elements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nlistOf(\"a\", \"b\", \"c\") should haveElementAt(1, \"b\")\nlistOf(\"a\", \"b\", \"c\") shouldNot haveElementAt(1, \"c\")\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Server Endpoints\nDESCRIPTION: Example of using Kotest assertions to test a Ktor server application's endpoints. Shows how to verify response status, content, headers, and cookies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithTestApplication({ module(testing = true) }) {\n   handleRequest(HttpMethod.Get, \"/\").apply {\n      response shouldHaveStatus HttpStatusCode.OK\n      response shouldNotHaveContent \"failure\"\n      response.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n      response.shouldNotHaveCookie(name = \"Set-Cookie\", cookieValue = \"id=1234\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Testing with forAll\nDESCRIPTION: Demonstrates data-driven testing using forAll and row functions to test multiple combinations of input values. The example verifies the behavior of Math.max for different number pairs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/index.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"maximum of two numbers\" {\n    forAll(\n        row(1, 5, 5),\n        row(1, 0, 1),\n        row(0, 0, 0)\n    ) { a, b, max ->\n      Math.max(a, b) shouldBe max\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution with config\nDESCRIPTION: Demonstrates how to fine-tune test execution using the config function. The example shows how to set timeout, multiple invocations, parallel threads, and tags for a specific test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/index.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n  \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n    // test here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: BigDecimal Assertions in Kotest\nDESCRIPTION: Methods for asserting BigDecimal properties including precision, scale, comparison operations, and range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldHavePrecision(n)\nbigDecimal.shouldHaveScale(n)\nbigDecimal.shouldBePositive()\nbigDecimal.shouldBeNegative()\nbigDecimal.shouldBeZero()\nbigDecimal.shouldBeLessThan(n)\nbigDecimal.shouldBeLessThanOrEquals(n)\nbigDecimal.shouldBeGreaterThan(n)\nbigDecimal.shouldBeGreaterThanOrEquals(n)\nbigDecimal.shouldBeInRange(r)\n```\n\n----------------------------------------\n\nTITLE: BDD Style Testing Syntax\nDESCRIPTION: Demonstrates Kotest's BDD-style test syntax using given/when/then blocks\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/why.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ngiven / when / then\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Data Testing in Kotest\nDESCRIPTION: Demonstrates a basic nested data test structure testing multiple HTTP services against different HTTP methods. Uses two layers of withData() to create a cartesian product of test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/nested.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n  val services = listOf(\n    \"http://internal.foo\",\n    \"http://internal.bar\",\n    \"http://public.baz\",\n  )\n\n  val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n   withData(services) { service ->\n     withData(methods) { method ->\n       // test service against method\n     }\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging at Spec Level in Kotest\nDESCRIPTION: Shows how to enable coroutine debugging for all tests within a specific spec by overriding the coroutineDebugProbes property. This applies the debug configuration to all test cases in the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n  init {\n\n    coroutineDebugProbes = true\n\n    test(\"foo\") {\n      // debugging enabled here\n    }\n\n    test(\"bar\") {\n      // debugging enabled here\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Test Names Using Map in Kotest\nDESCRIPTION: Example showing how to specify test names using a map where keys are test names and values are input data. Used for Pythagorean triple testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/test_names.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData(\n    mapOf(\n      \"3, 4, 5\" to PythagTriple(3, 4, 5),\n      \"6, 8, 10\" to PythagTriple(6, 8, 10),\n      \"8, 15, 17\" to PythagTriple(8, 15, 17),\n      \"7, 24, 25\" to PythagTriple(7, 24, 25)\n    )\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging a Specification Class with Annotations in Kotest\nDESCRIPTION: Example of using the @Tags annotation to apply tags to all tests within a specification class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/tags.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Tags(\"Linux\")\nclass MyTestClass : FunSpec({\n\n  tags(UnitTest)\n\n  beforeSpec { println(\"Before\") }\n\n  test(\"A\").config(tags = setOf(Mysql)) {}\n  test(\"B\").config(tags = setOf(Postgres)) {}\n  test(\"C\") {}\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Konform Validation Rules\nDESCRIPTION: Definition of validation rules using Konform's DSL, including length constraints for name and range constraints for age.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/konform.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval validateUser = Validation<UserProfile> {\n  UserProfile::fullName {\n     minLength(4)\n     maxLength(100)\n  }\n\n  UserProfile::age ifPresent {\n     minimum(21)\n     maximum(99)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor HTTP Client\nDESCRIPTION: Example of testing HTTP responses using Ktor client and Kotest assertions. Demonstrates how to verify response status and headers from HTTP client calls.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/ktor.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\nval response = client.post(\"http://mydomain.com/foo\")\nresponse.shouldHaveStatus(HttpStatusCode.OK)\nresponse.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor Server Endpoints\nDESCRIPTION: Example of testing a Ktor server endpoint using TestApplicationResponse matchers. Shows how to verify response status, content, headers, and cookies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithTestApplication({ module(testing = true) }) {\n   handleRequest(HttpMethod.Get, \"/\").apply {\n      response shouldHaveStatus HttpStatusCode.OK\n      response shouldNotHaveContent \"failure\"\n      response.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n      response.shouldNotHaveCookie(name = \"Set-Cookie\", cookieValue = \"id=1234\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Instance Mode Example in Kotest\nDESCRIPTION: Demonstrates the default SingleInstance mode where one test class instance is shared across all tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/isolation_mode.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SingleInstanceExample : WordSpec({\n   val id = UUID.randomUUID()\n   \"a\" should {\n      println(id)\n      \"b\" {\n         println(id)\n      }\n      \"c\" {\n         println(id)\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic in Kotest ShouldSpec\nDESCRIPTION: This example demonstrates how to use the retry function in a Kotest ShouldSpec to attempt a block of code up to 4 times with a maximum timeout of 10 minutes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/retry.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"retry up to 4 times\") {\n      retry(4, 10.minutes) {\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Against Schema\nDESCRIPTION: Shows how to validate JSON strings and JsonElement objects against a defined schema.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/schema.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n\"{\\\"\\\" shouldMatchSchema personSchema\n\n// fails with:\n// $.name => Expected string, but was undefined\n\n\"\"\" { \"name\": \"Emil\", \"age\": 34 } \"\"\"\n// Passes, since address isn't required and `additionalProperties` are allowed\n```\n\n----------------------------------------\n\nTITLE: Using forAll for Property Testing in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates how to use the 'forAll' function in Kotest to test a property of string concatenation. It accepts a function that returns a boolean, which should be true for all inputs to pass the test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/test_functions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String> { a, b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using If-Else in Kotest Property Tests\nDESCRIPTION: This snippet demonstrates how to use an if-else block to avoid undesired inputs in a property test. However, this approach can potentially introduce bugs in more complex scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/assumptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  if (a != b)\n    levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Validation Matchers\nDESCRIPTION: Schema validation matcher that supports both String and kotlinx.serialization.JsonElement inputs for validation against JsonSchema definitions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/json/overview.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Matcher                                        | Description                                                                                                                                         | Targets       |\n|------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|:--------------||\n| [shouldMatchSchema](json-schema-matchers.html) | Validates that a `String` or `kotlinx.serialization.JsonElement` matches a `JsonSchema`. See description below for details on constructing schemas. | Multiplatform |\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with Kotest System Property by Package\nDESCRIPTION: Example of using Kotest's specific system property to filter tests by package pattern, which allows for more granular filtering than Gradle's built-in mechanism.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/gradle.md#2025-04-13_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*'\n```\n\n----------------------------------------\n\nTITLE: Using Selective Field Comparison Matchers in Kotest\nDESCRIPTION: Assertion matchers that allow comparison of objects by including or excluding specific fields using KProperty references.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToUsingFields(other: T, vararg properties: KProperty<*>)\nany.shouldBeEqualToIgnoringFields(other: T, vararg properties: KProperty<*>)\n```\n\n----------------------------------------\n\nTITLE: Using Combinatorics Functions in Kotest\nDESCRIPTION: Functions for generating values based on probabilities, weights, shuffling, and creating subsequences from collections.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.choice(arbs)\nArb.choose(pairs)\nArb.frequency(list)\nArb.shuffle(list)\nArb.subsequence(list)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Geo Locations in Kotlin using Kotest\nDESCRIPTION: Generates GeoLocation objects with random latitude/longitude points uniformly distributed across the globe.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.geoLocation()\n```\n\n----------------------------------------\n\nTITLE: Generating Random IPv4 Addresses in Kotlin using Kotest\nDESCRIPTION: Generates random IP addresses in the format a.b.c.d, where each part is between 0 and 255.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_44\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.ipAddressV4()\n```\n\n----------------------------------------\n\nTITLE: Future Assertions in Kotest\nDESCRIPTION: Methods for asserting completion states of futures in Kotlin. Includes checks for normal completion, exceptional completion, and specific exception validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nfuture.shouldBeCompleted()\nfuture.shouldBeCompletedExceptionally()\nfuture.shouldCompleteExceptionallyWith(throwable)\n```\n\n----------------------------------------\n\nTITLE: Overriding System Environment in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use the withEnvironment extension function to temporarily override system environment variables for testing purposes. It also includes a note about JDK17 compatibility.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(\"FooKey\", \"BarValue\") {\n    System.getenv(\"FooKey\") shouldBe \"BarValue\" // System environment overridden!\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n  jvmArgs(\"--add-opens=java.base/java.util=ALL-UNNAMED\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using withClue with String in Kotlin\nDESCRIPTION: Adding a string clue to an assertion using withClue to provide better context for the failure message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in Kotest\nDESCRIPTION: This snippet shows how to define properties in a 'kotest.properties' file. The file should be placed on the classpath and contains key-value pairs that will be set as system properties before test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/intellij/props.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfoo=bar\n```\n\n----------------------------------------\n\nTITLE: Asserting Date Properties in Kotlin with Kotest\nDESCRIPTION: These assertions validate various properties of dates, including comparisons between dates, checking specific date components, and verifying date ranges. They allow for detailed verification of date-related information.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameMonthAs(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameDayAs(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeBefore(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeAfter(otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeWithin(period, otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeWithin(duration, otherDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldBeBetween(firstDate, secondDate)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveYear(year)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveMonth(month)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveDayOfYear(day)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveDayOfMonth(day)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveDayOfWeek(day)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveHour(hour)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveMinute(Minute)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSecond(second)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveNano(nao)\n```\n\n----------------------------------------\n\nTITLE: Using Generator Bind for Creating Random Class Instances\nDESCRIPTION: Demonstrates how to use the bind function to create generators for complex types by combining primitive generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val email: String, val id: Int)\n\nval userGen = Gen.bind(Gen.string(), Gen.positiveIntegers(), ::User)\n\nassertAll(userGen) {\n  it.email shouldNotBe null\n  it.id should beGreaterThan(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Using KoinExtension with FunSpec in Kotest\nDESCRIPTION: Example showing how to use Koin with Kotest by implementing KoinTest interface and adding KoinExtension. The extension starts/stops the Koin context between leaf tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/koin.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : FunSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(myKoinModule))\n\n    val userService by inject<UserService>()\n\n    init {\n        test(\"use userService\") {\n            userService.getUser().username shouldBe \"LeoColman\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Character Values and Arrays in Kotlin with Kotest\nDESCRIPTION: Illustrates the creation of generators for character values and character arrays in Kotest. Includes options for specifying character ranges and distributions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.char(range1, range2,...)\nArb.char(List<CharRange>)\nArb.charArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Arbitrary Generator for Custom Class in Kotlin\nDESCRIPTION: This example shows how to create an Arbitrary generator for a custom 'Person' class, composing String and Int arbitraries using the 'bind' function in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/customgens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb = arbitrary {\n   val name = Arb.string(10..12).bind()\n   val age = Arb.int(21, 150).bind()\n   Person(name, age)\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting KType Properties in Kotlin\nDESCRIPTION: Assertion matcher for KType properties in Kotlin, checking if a KType is of a specific type.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nktype.shouldBeOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Setting Invocation Timeout for Multiple Test Runs in Kotest\nDESCRIPTION: Example of setting a timeout per invocation using the invocationTimeout parameter. Each of the three test runs must complete within 60 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times and each has a timeout of 60 milliseconds\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using haveSize Matcher in Kotest\nDESCRIPTION: Shows how to use the haveSize matcher for collection assertions in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nmyCollection should haveSize(4)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in ExpectSpec using xcontext and xexpect in Kotlin\nDESCRIPTION: Demonstrates how to disable specific tests or entire context blocks in ExpectSpec using 'xcontext' and 'xexpect' variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"this outer block is enabled\") {\n        xexpect(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        expect(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with Kotest by Package and Test Name\nDESCRIPTION: Example of combining Kotest filters to target tests that contain 'Foo' in their name within a specific package. This demonstrates using multiple system properties together.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/gradle.md#2025-04-13_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*' -Dkotest.filter.tests='*Foo*'\n```\n\n----------------------------------------\n\nTITLE: Overriding System Properties in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the withSystemProperty extension function to temporarily override system properties during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSystemProperty(\"foo\", \"bar\") {\n  System.getProperty(\"foo\") shouldBe \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf Isolation Mode Example in Kotlin\nDESCRIPTION: This example illustrates the InstancePerLeaf isolation mode, where a new instance is created for every leaf test case, excluding inner contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/isolation_mode.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Elements with forNone in Kotlin\nDESCRIPTION: Shows how to use the forNone inspector to verify that no elements in a collection match the given conditions. The example ensures no strings contain 'x' and start with 'bb'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/inspectors.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Functions for Custom Matcher in Kotlin\nDESCRIPTION: Defines extension functions on String to provide a more idiomatic way of using the custom length matcher, following Kotest's naming conventions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/custom.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldHaveLength(length: Int): String {\n  this should haveLength(length)\n  return this\n}\n\nfun String.shouldNotHaveLength(length: Int): String {\n  this shouldNot haveLength(length)\n  return this\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root-Level Data-Driven Tests in Kotest\nDESCRIPTION: A simplified FunSpec implementation that demonstrates data-driven testing with multiple input rows defined at the root level without additional context blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  withData(\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    isPythagTriple(a, b, c) shouldBe true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Either Instances in Kotest with Arrow\nDESCRIPTION: Examples of generating Either instances using Arrow generators in Kotest. Includes methods for creating balanced Either distributions, as well as specific Right or Left instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.either(arbL, arbR)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.right(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.left(arb)\n```\n\n----------------------------------------\n\nTITLE: Nesting Tests in ExpectSpec with Context Blocks in Kotlin\nDESCRIPTION: Shows how to nest tests within context blocks in ExpectSpec, allowing for better organization of related tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"a calculator\") {\n        expect(\"simple addition\") {\n            // test here\n        }\n        expect(\"integer overflow\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Runtime Tag Inclusion/Exclusion in Kotlin\nDESCRIPTION: Shows how to dynamically include or exclude tags at runtime through the RuntimeTagExtension, providing an alternative to system property configuration for controlling which tests run.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nRuntimeTagExtension.included += MyTag\nRuntimeTagExtension.excluded += MyOtherTag\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core Dependency for Multiplatform\nDESCRIPTION: Adds the Kotest assertions core library to the common test dependencies in a multiplatform project. This allows using the same assertions across all supported platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Comparison Options in Kotest\nDESCRIPTION: Shows how to use compareJsonOptions to customize the behavior of JSON comparison. The example demonstrates inline option specification and creating a custom comparison function with predefined options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/json/content.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldEqualJson(b, compareJsonOptions { arrayOrder = ArrayOrder.Strict })\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval myOptions = compareJsonOptions {\n   typeCoercion = TypeCoercion.Enabled\n   arrayOrder = ArrayOrder.Lenient\n}\n\ninfix fun String.lenientShouldEqualJson(other: String) = this.shouldEqualJson(other, myOptions)\n\n\"[1, 2]\" lenientShouldEqualJson \"[2, 1]\" // This will pass\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout using Test Config in Kotest\nDESCRIPTION: This snippet demonstrates how to set a test timeout for a specific test using the config method in Kotest. The timeout is set to 100 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n   test(\"this test will timeout quickly!\").config(timeout = 100.milliseconds) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Boolean Values and Arrays in Kotlin with Kotest\nDESCRIPTION: Shows how to create generators for boolean values and boolean arrays using Kotest. Includes both arbitrary and exhaustive generators for booleans.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.boolean()\nArb.booleanArray(length, content)\nExhaustive.boolean()\n```\n\n----------------------------------------\n\nTITLE: Custom Field Matcher Implementation in Kotlin\nDESCRIPTION: Shows how to implement and use custom field matchers with case-insensitive string comparison\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/field-matching.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n     val expected = SimpleDataClass(\"apple\", 1.0, LocalDateTime.now())\n     val actual = expected.copy(name = \"Apple\")\n     shouldThrow<AssertionError> {\n        actual shouldBeEqualUsingFields expected\n     }.message.shouldContainInOrder(\n        \"Fields that differ:\",\n        \"\"\"- name  =>  expected:<\"apple\"> but was:<\"Apple\">\"\"\",\n     )\n     actual shouldBeEqualUsingFields {\n        overrideMatchers = mapOf(\n           SimpleDataClass::name to matchStringsIgnoringCase\n        )\n        expected\n     }\n```\n\n----------------------------------------\n\nTITLE: Testing Levenshtein Distance with checkAll in Kotlin\nDESCRIPTION: Shows a property test that checks if the Levenshtein distance between two strings is greater than zero. This test may fail for equal strings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/assumptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Seed Configuration in Property Tests\nDESCRIPTION: Shows how to set a specific seed value for reproducible property test execution, useful for regression testing of failed cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String>(PropTestConfig(seed = 127305235)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging for Single Test in Kotest\nDESCRIPTION: Demonstrates how to enable coroutine debugging for a specific test using coroutineDebugProbes config flag. When enabled, creates a coroutine dump after test completion or on exception.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineDebugProbes = true) {\n         someMethodThatLaunchesACoroutine() // launches a new coroutine\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Directories in Kotest Tests\nDESCRIPTION: Shows how to create a temporary directory using Kotest's tempdir() function within a test specification. The directory is automatically managed and cleaned up by Kotest after test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/tempfile.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val dir = tempdir()\n\n   test(\"a temporary dir dependent test\") {\n      //...\n   }\n})\n\n```\n\n----------------------------------------\n\nTITLE: MatcherResult Interface Implementation\nDESCRIPTION: Interface definition for MatcherResult that includes methods for test status and failure messages. Used to provide detailed feedback for both positive and negative test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/custom.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MatcherResult {\n  fun passed(): Boolean\n  fun failureMessage(): String\n  fun negatedFailureMessage(): String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin JS Target with Kotest Engine\nDESCRIPTION: Configures a Kotlin/JS project with the Kotest engine for testing JavaScript code. It configures both browser and Node.js targets and adds the Kotest engine dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) { // LEGACY or BOTH are unsupported\n      browser() // to compile for the web\n      nodejs() // to compile against node\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Schema from Text in Kotlin\nDESCRIPTION: Example of parsing a JSON Schema from a text string to validate geographical coordinates with latitude and longitude properties, including type constraints and numeric ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/json/schema.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval parsedSchema = parseSchema(\n  \"\"\"\n  {\n  \"$id\": \"https://example.com/geographical-location.schema.json\",  // will  be ignored\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",       // will be ignored\n  \"title\": \"Longitude and Latitude Values\",                        // will be ignored\n  \"description\": \"A geographical coordinate.\",                     // will be ignored\n  \"required\": [ \"latitude\", \"longitude\" ],\n  \"type\": \"object\",\n  \"properties\": {\n    \"latitude\": {\n      \"type\": \"number\",\n      \"minimum\": -90,\n      \"maximum\": 90\n    },\n    \"longitude\": {\n      \"type\": \"number\",\n      \"minimum\": -180,\n      \"maximum\": 180\n    }\n  }\n}\n  \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin for KotlinTest\nDESCRIPTION: XML configuration for the Maven Surefire plugin to support running KotlinTest tests. This adds the JUnit Platform Surefire provider.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-surefire-plugin</artifactId>\n    <version>2.22.1</version>\n    <dependencies>\n        <dependency>\n            <groupId>org.junit.platform</groupId>\n            <artifactId>junit-platform-surefire-provider</artifactId>\n            <version>1.2.0</version>\n        </dependency>\n    </dependencies>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Testing Valid UserProfile with Konform Matcher in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Konform matcher 'shouldBeValid' to assert that a UserProfile instance passes validation according to the defined validator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/konform.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval alice = UserProfile(\"Alice\", 25)\nvalidateUser shouldBeValid user1\n```\n\n----------------------------------------\n\nTITLE: Adding Jacoco Plugin to Gradle Build\nDESCRIPTION: Adds the Jacoco plugin to your Gradle build file for enabling code coverage analysis with Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/integrations/jacoco.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n   ...\n   jacoco\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Assumptions with Assertions in Kotlin Property Tests\nDESCRIPTION: Shows how to use multiple assertions within the withAssumptions function to ensure specific conditions are met before running the main test logic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/assumptions.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.string(3..4, Codepoint.az()), Arb.string(3..4, Codepoint.az())) { a, b ->\n  withAssumptions({\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }) {\n     a.compareTo(b) shouldNotBe 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Directories in Kotest Tests\nDESCRIPTION: Shows how to create and use temporary directories in Kotest tests using the tempdir() function. Similar to temporary files, these directories are automatically managed and cleaned up by Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tempfile.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val dir = tempdir()\n\n   test(\"a temporary dir dependent test\") {\n      //...\n   }\n})\n\n```\n\n----------------------------------------\n\nTITLE: Using Collection Generation Functions in Kotest\nDESCRIPTION: Functions for working with collections, including randomly selecting elements and generating lists with elements from another generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.element(collection)\nArb.element(vararg T)\nArb.list(gen, range)\n```\n\n----------------------------------------\n\nTITLE: Enabling TestDispatcher for a Single Test in Kotest\nDESCRIPTION: This snippet shows how to enable TestDispatcher for a specific test in a Kotest FunSpec. It uses the config method to set testCoroutineDispatcher to true for the test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"foo\").config(testCoroutineDispatcher = true) {\n         // this test will run with a test dispatcher\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Test Names Using Map in Kotest\nDESCRIPTION: This snippet demonstrates how to use a map to specify custom test names for data-driven tests in Kotest. The keys of the map represent the test names, while the values are the input data for each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/test_names.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData(\n    mapOf(\n      \"3, 4, 5\" to PythagTriple(3, 4, 5),\n      \"6, 8, 10\" to PythagTriple(6, 8, 10),\n      \"8, 15, 17\" to PythagTriple(8, 15, 17),\n      \"7, 24, 25\" to PythagTriple(7, 24, 25)\n    )\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with Kotest Environment Variable by Package\nDESCRIPTION: Example of using Kotest's environment variable for filtering tests by package pattern, which works for both Kotlin/JVM and Kotlin/Native targets.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/gradle.md#2025-04-13_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkotest_filter_specs='com.somepackage.*' gradle test\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Property Tests Using Project Config in Kotlin\nDESCRIPTION: Shows how to set the default iteration count for property tests using Kotest's project configuration. This method allows setting the configuration before any tests are run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/globalconfig.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestConfig : AbstractProjectConfig() {\n   override suspend fun beforeProject() {\n      PropertyTesting.defaultIterationCount = 123\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Coverage Percentages in Kotest Property Tests\nDESCRIPTION: Demonstrates how to use withCoveragePercentages to assert that generated test values have sufficient coverage across specified categories, ensuring test quality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/statistics.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoveragePercentages(mapOf(RoundingMode.HALF_DOWN to 10.0, RoundingMode.FLOOR to 10.0)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing List Implementation with WordSpec in Kotlin\nDESCRIPTION: This snippet demonstrates how to test a List implementation of IndexedSeq using Kotest's WordSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_factories.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ListTest : WordSpec({\n\n   val empty = List<Int>()\n\n   \"List\" should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Matcher with Kotest Assertion Functions\nDESCRIPTION: Shows how to use a custom matcher with Kotest's should and shouldNot infix functions to perform assertions on string lengths.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/custom.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should haveLength(9)\n\"hello bar\" shouldNot haveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher Extension Functions\nDESCRIPTION: Example usage of the custom matcher extension functions showing the improved syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/custom.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\".shouldHaveLength(9)\n\"hello bar\".shouldNotHaveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Factory for IndexedSeq in Kotlin\nDESCRIPTION: This snippet shows how to create a test factory for IndexedSeq implementations using Kotest's wordSpec builder function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_factories.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> indexedSeqTests(name: String, empty: IndexedSeq<T>) = wordSpec {\n   name should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Enabled Condition for Conditional Test Execution in Kotest\nDESCRIPTION: Demonstrates how to create a custom EnabledCondition implementation that conditionally enables specs based on the operating system. This particular condition enables tests with 'Linux' in their name only when running on Linux systems.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/annotations.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LinuxOnlyCondition : EnabledCondition {\n  override fun enabled(kclass: KClass<out Spec>): Boolean = when {\n    kclass.simpleName?.contains(\"Linux\") == true -> IS_OS_LINUX\n    else -> true // non Linux tests always run\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Spring Extension Per Test Class\nDESCRIPTION: Shows how to enable the Spring extension for a specific test class by overriding the extensions method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/spring.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : FunSpec() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution with EnabledIf in Kotlin\nDESCRIPTION: This example shows how to use the 'enabledIf' configuration to dynamically determine whether a test should run. It demonstrates disabling tests that start with 'danger' on Fridays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/config_enabled.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: EnabledIf = { !(it.name.testName.startsWith(\"danger\") && isFriday()) }\n\n\"danger Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Table of Non-deterministic Testing Functions in Kotest\nDESCRIPTION: A markdown table listing the four main functions provided by Kotest for non-deterministic testing, along with their roles. The functions include Eventually, Continually, Until, and Retry, each serving a specific purpose in handling non-deterministic code scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/nondeterministic_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Role |\n| --- | --- |\n| [Eventually](eventually.md) | Used to ensure that a test will _eventually_ pass within a specified time duration. The test is repeatedly executed until the test passes or the duration expires. |\n| [Continually](continually.md) | Used to ensure that a test _continually_ passes for a period of time. Will repeatedly execute a test until the duration has expired or the test fails.  |\n| [Until](until.md) | Used to ensure that a predicate will eventually hold true within a specified time duration. The predicate is repeatedly executed until true or the duration expires. |\n| [Retry](retry.md) | Used to ensure that a test willi eventually pass within a given number of retries. The test is repeatedly executed until the test passes or the iteration count is reached. |\n```\n\n----------------------------------------\n\nTITLE: Chunking Arb Generator Results with Size Range in Kotlin using Kotest\nDESCRIPTION: Generates lists where each list is populated from elements of this receiver. The size of each chunk is randomly chosen within the given range parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb<T>.chunked(minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: NonEmptyList Generators\nDESCRIPTION: Generators for Arrow's NonEmptyList type, allowing creation of non-empty lists with configurable size ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.nel(arb)\nArb.nel(arb, range)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Failures in Property Tests\nDESCRIPTION: Demonstrates how to configure property tests to allow a certain number of failures before failing the entire test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some flakey test\" {\n      forAll<String, String>(PropTestConfig(maxFailure = 3)) { a,b ->\n         // max of 3 inputs can fail\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Isolation Mode Configuration\nDESCRIPTION: Solution using IsolationMode.InstancePerTest to create a new test class instance for each test, ensuring clean mock state through instance isolation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/integrations/mocks.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    isolationMode = IsolationMode.InstancePerTest\n\n})\n```\n\n----------------------------------------\n\nTITLE: Testing for Any Exception in Kotlin with Kotest\nDESCRIPTION: Demonstrates the use of 'shouldThrowAny' to verify that any exception is thrown, regardless of its type. This is useful when the specific exception type is not important for the test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/exceptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowAny {\n  // test here can throw any type of Throwable!\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher Extension Functions in Kotlin\nDESCRIPTION: Demonstrates the usage of the custom extension functions for string length assertions, providing a more concise and readable syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/custom.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\".shouldHaveLength(9)\n\"hello bar\".shouldNotHaveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Using Inline Assumption Syntax in Kotest (Kotlin)\nDESCRIPTION: Demonstrates the inline syntax for using assumptions in Kotest property testing, which provides a more concise way to express assumptions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/assumptions.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume(a != b)\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Conditional Statistics in Kotest Property Tests\nDESCRIPTION: Shows how to use conditional logic with collect() to gather statistics on even and odd integers during property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/statistics.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"EVEN\")\n    else -> collect(\"ODD\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Kotlin Property and Callable Features in Kotest\nDESCRIPTION: Assertion methods for Kotlin properties and callables, including type checking, visibility, and parameter validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nkproperty.shouldBeOfType<T>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkproperty.shouldBeLateInit()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkcallable.shouldHaveVisibility(visibility)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkcallable.shouldAcceptParameters(parameters)\n```\n\n----------------------------------------\n\nTITLE: Double Assertions in Kotest\nDESCRIPTION: Assertion functions for Double type values including comparisons, sign checks, and special value validations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeGreaterThan(n)\ndouble.shouldBeGreaterThanOrEqual(n)\ndouble.shouldBePositive()\ndouble.shouldBeNegative()\ndouble.shouldBePositiveInfinity()\ndouble.shouldBeNegativeInfinity()\ndouble.shouldBeNaN()\ndouble.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: NonEmptyList Assertions in Kotest Arrow\nDESCRIPTION: Comprehensive set of assertion methods for Arrow NonEmptyList type including content verification and property checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nnel.shouldContain(e)\nnel.shouldContainAll(e1,e2,...,en)\nnel.shouldContainNull()\nnel.shouldContainNoNulls()\nnel.shouldContainOnlyNulls()\nnel.shouldHaveDuplicates()\nnel.shouldBeSingleElement(e)\nnel.shouldBeSorted()\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Kotlin\nDESCRIPTION: Shows how to create tag objects in Kotlin either by inheriting from Tag class or using NamedTag class\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/tags.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval tag = NamedTag(\"Linux\")\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Test Case in WordSpec (Kotlin)\nDESCRIPTION: This example demonstrates how to set a timeout for a test case in a WordSpec using the config function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_case_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Random Integer Arbitrary Generator in Kotlin\nDESCRIPTION: Demonstrates creating a custom arbitrary generator that produces random integers between 3 and 6 using the arbitrary builder and RandomSource.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/customgens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval sillyArb = arbitrary { rs: RandomSource ->\n   rs.random.nextInt(3..6)\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Overall and Invocation Timeouts in Kotest\nDESCRIPTION: This snippet shows how to combine an overall test timeout with individual invocation timeouts for a test that runs multiple times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/timeouts/test_timeouts.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(timeout = 100.milliseconds, invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection Example in Kotest Spring Test\nDESCRIPTION: This snippet illustrates how to use constructor injection in a Kotest test class with the Spring extension. It shows a WordSpec that requires a UserService bean in its constructor.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/spring.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"have autowired the service\" {\n        service.repository.findUser().name shouldBe \"system_user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default TestCaseConfig for All Tests in a Kotest Spec\nDESCRIPTION: This example shows how to set a default TestCaseConfig for all test cases in a Kotest Spec by overriding the defaultTestCaseConfig function. It sets all tests to run 3 times by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_case_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Tag Expressions\nDESCRIPTION: Example of setting tag expressions programmatically at runtime using RuntimeTagExtension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/tags.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nRuntimeTagExpressionExtension.expression = \"Linux & !Database\"\n```\n\n----------------------------------------\n\nTITLE: Collection Generation in Kotest\nDESCRIPTION: Collection of Arb functions for generating lists, sets, and other collections. These methods allow random selection and generation of collection elements with specified size ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_45\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.element(collection)\nArb.element(vararg T)\nArb.list(gen, range)\nArb.set(gen, range)\nArb.set(gen, range, slippage)\nArb<T>.chunked(range)\nArb<T>.chunked(minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: OffsetDateTime Assertions in Kotest\nDESCRIPTION: Methods for asserting properties of OffsetDateTime objects including checking for today, same instant comparison, and equality within a time range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\noffsetDateTime.shouldBeToday()\noffsetDateTime.shouldHaveSameInstantAs(other: OffsetDateTime)\noffsetDateTime.shouldBe(other: OffsetDateTime plusOrMinus 1.minutes)\n```\n\n----------------------------------------\n\nTITLE: Double Array Generator\nDESCRIPTION: Produces DoubleArray instances with configurable length and content generators\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.doubleArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Asserting Long Values in Kotest\nDESCRIPTION: Provides assertions for validating long integer values in Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Customizing Iteration Count in Kotest Property Tests\nDESCRIPTION: This code shows how to customize the number of test iterations to 10,000 instead of the default 1,000. The test will execute the property test function with randomly generated doubles 10,000 times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/test_functions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"a many iterations test\" {\n      checkAll<Double, Double>(10_000) { a, b ->\n         // test here\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kotest for Kotlin/JS Projects\nDESCRIPTION: Configures a Kotlin multiplatform project for JavaScript testing with Kotest. Adds the Kotest multiplatform plugin and necessary dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n\nkotlin {\n  targets {\n    js(IR) {\n      browser()\n      nodejs()\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PropTestListener in Kotlin with Kotest\nDESCRIPTION: Example showing how to create and use a PropTestListener with a property test. The listener implements beforeTest and afterTest methods to execute code before and after property test execution, demonstrating setup and teardown functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.1.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = object : PropTestListener {\n  override suspend fun beforeTest() {\n    println(\"Startup\")\n  }\n\n  override suspend fun afterTest() {\n    println(\"Shutdown\")\n  }\n}\n\nval propConfig = PropTestConfig(listeners = listOf(listener))\n\ncheckAll<String, String>(10, propConfig) { a, b ->\n  a.length + b.length shouldBe (a + b).length\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bang Prefix to Skip Tests in Kotest StringSpec\nDESCRIPTION: This example demonstrates how to use the '!' prefix to skip specific tests while allowing others to run. In this case, only the first test with the '!' prefix will be skipped, while the other tests will be executed normally.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/focus.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tests with Tag Expressions\nDESCRIPTION: Command to run tests with specific tag expressions, showing how to include Linux tests while excluding Database tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tags.md#2025-04-13_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngradle test -Dkotest.tags=\"Linux & !Database\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Producer and Consumer in Kotest\nDESCRIPTION: Demonstrates how to create and use a Kafka producer and consumer using convenience methods provided by the embeddedKafkaListener. It shows sending a message and then consuming it within a test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/kafka.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n\n   test(\"send / receive\") {\n\n     val producer = embeddedKafkaListener.stringStringProducer()\n     producer.send(ProducerRecord(\"foo\", \"a\"))\n     producer.close()\n\n     val consumer = embeddedKafkaListener.stringStringConsumer(\"foo\")\n     eventually(10.seconds) {\n       consumer.poll(1000).first().value() shouldBe \"a\"\n     }\n     consumer.close()\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Manually Creating Kafka Producer with Custom Properties\nDESCRIPTION: Shows how to manually create a Kafka producer by accessing the host and port of the embedded Kafka instance and setting up custom properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/kafka.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n   \n   val props = Properties().apply {\n      put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"${embeddedKafkaListener.host}:${embeddedKafkaListener.port}\")\n   }\n   \n   val producer = KafkaProducer<String, String>(props)\n   \n})\n```\n\n----------------------------------------\n\nTITLE: Validated Matchers Usage in Kotlin\nDESCRIPTION: Matchers for testing Validated types in Arrow. These matchers allow asserting Valid and Invalid cases with value verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nvalidated.shouldBeValid()   // assert validated is Valid\nvalidated.shouldBeValid(v)  // assert validated is Valid(v)\nvalidated.shouldBeInvalid() // assert validated is Invalid\n```\n\n----------------------------------------\n\nTITLE: Test Factory with Lifecycle Callbacks\nDESCRIPTION: Example of implementing lifecycle callbacks in test factories and their isolated behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_factories.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval factory1 = funSpec {\n  beforeTest {\n     println(\"Executing $it\")\n  }\n  test(\"a\") {  }\n  test(\"b\") {  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LifecycleExample : FunSpec({\n   include(factory1)\n   test(\"c\")\n   test(\"d\")\n})\n```\n\n----------------------------------------\n\nTITLE: Mock Reset Using afterTest\nDESCRIPTION: Solution pattern using afterTest hook to clear mock states after each test execution\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/integrations/mocks.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    afterTest {\n        clearMocks(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding Testcontainers support to Kotest project\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Eventually with Shared Configuration\nDESCRIPTION: Example of creating reusable eventually configurations and customizing them per test suite.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/concurrency/eventually.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = EventuallyConfig<ServerResponse>(\n  duration = 5.minutes,\n  interval = 25.milliseconds.fibonacci(),\n  suppressExceptions = setOf(ServerException::class)\n)\n\nclass FooTests : StringSpec({\n  val logger = logger(\"FooTests\")\n  val fSlow = slow.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") })\n\n  \"server eventually provides a result for /foo\" {\n    eventually(fSlow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : StringSpec({\n  val logger = logger(\"BarTests\")\n  val bFast = fast.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") })\n\n  \"server eventually provides a result for /bar\" {\n    eventually(bFast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf Isolation Mode Basic Example in Kotest\nDESCRIPTION: Shows how InstancePerLeaf mode works, creating a new spec instance for each leaf test but not for inner contexts. Inner contexts are only executed as part of the path to a leaf test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/isolation_mode.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Matcher Interface in Kotlin\nDESCRIPTION: This snippet shows the basic structure of the Matcher interface in Kotest, which is the foundation for creating custom matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/custom.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Matcher<in T> {\n  fun test(value: T): MatcherResult\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Elements Collection Properties with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers are used to assert properties of Elements collections, such as presence and count of items. They are part of the kotlintest-assertions-jsoup library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/jsoup.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nelements.shouldBePresent()\nelements.shouldBePresent(n)\nelements.shouldBePresent(n)\n```\n\n----------------------------------------\n\nTITLE: Statistics Coverage Assertions with Percentages in Kotest\nDESCRIPTION: Shows how to assert minimum coverage percentages for specific categories in property tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/statistics.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoveragePercentages(mapOf(RoundingMode.HALF_DOWN to 10.0, RoundingMode.FLOOR to 10.0)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Generators in Kotest\nDESCRIPTION: Generators for producing boolean values and boolean arrays with configurable length and content.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.boolean()\nArb.booleanArray(length, content)\nExhaustive.boolean()\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Timeout in Kotest using ProjectConfig\nDESCRIPTION: This code snippet demonstrates how to set up a project-level timeout in Kotest. It uses the AbstractProjectConfig class to define a ProjectConfig that sets a project timeout of 10 minutes. This timeout will apply to all tests and specs in the module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/timeouts/project_timeout.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val projectTimeout: Duration = 10.minutes\n}\n```\n\n----------------------------------------\n\nTITLE: Instant Assertions in Kotest\nDESCRIPTION: Methods for comparing Instant objects including temporal ordering (before, after, between) and approximate equality within a given duration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\ninstant.shouldBeBefore(anotherInstant)\ninstant.shouldBeBetween(fromInstant, toInstant)\ninstant.shouldBeCloseTo(anotherInstant, duration)\ninstant.shouldBe(otherTime plusOrMinus 1.minutes)\n```\n\n----------------------------------------\n\nTITLE: Asserting URI Properties in Kotest\nDESCRIPTION: Methods for asserting various properties of URIs in Kotest, including components like authority, fragment, host, and scheme.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveAuthority(fragment)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveFragment(fragment)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveHost(scheme)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveParameter(scheme)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHavePath(scheme)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHavePort(scheme)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveQuery(fragment)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveScheme(scheme)\n```\n\n----------------------------------------\n\nTITLE: Enabling failOnEmptyTestSuite in Kotest Project Configuration\nDESCRIPTION: This code snippet shows how to enable the 'failOnEmptyTestSuite' option in Kotest's project configuration. When set to true, it ensures that the build will fail if no tests are executed in a module, regardless of whether tests are defined.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/fail_on_empty.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val failOnEmptyTestSuite = true\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Short Values with Kotest Arb\nDESCRIPTION: This snippet showcases various Arb generators for Short values in Kotest. It includes generators for regular, positive, and negative Shorts, as well as Short arrays and UShort values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.short(min, max)\nArb.positiveShort(max)\nArb.negativeShort(min)\nArb.shortArray(length, content)\nArb.uShort(min, max)\nArb.uShortArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Implementing List Tests Without Factory\nDESCRIPTION: Example of traditional test implementation for List class without using test factories, showing basic collection operations testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_factories.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ListTest : WordSpec({\n\n   val empty = List<Int>()\n\n   \"List\" should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Allure Build Directory in Kotlin\nDESCRIPTION: Configuration of system property to specify Allure results directory in Gradle test task.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/allure.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") { // or \"jvmTest\" etc\n   useJUnitPlatform()\n   systemProperty(\"allure.results.directory\", project.buildDir.toString() + \"/allure-results\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IndexedSeq Interface in Kotlin\nDESCRIPTION: Interface definition for an indexed sequence with basic collection operations including size, add, and contains methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_factories.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface IndexedSeq<T> {\n\n    // returns the size of t\n    fun size(): Int\n\n    // returns a new seq with t added\n    fun add(t: T): IndexedSeq<T>\n\n    // returns true if this seq contains t\n    fun contains(t: T): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unbounded Shrinking in Kotest Property Test\nDESCRIPTION: Shows how to configure unbounded shrinking for a specific property test using PropTestConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/shrinking.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll(PropTestConfig(shrinkingMode = ShrinkingMode.Unbounded)) { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Elements with forAtLeast in Kotlin\nDESCRIPTION: Demonstrates using the forAtLeast inspector to verify that at least 2 elements in a list meet a minimum length requirement. The example checks if at least 2 strings have a length of 7 or more characters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/inspectors.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval xs = listOf(\"sam\", \"gareth\", \"timothy\", \"muhammad\")\nxs.forAtLeast(2) {\n    it.shouldHaveMinLength(7)\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Schema in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to parse a JSON schema from a string definition, including geographical coordinates validation with latitude and longitude constraints.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/json/schema.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval parsedSchema = parseSchema(\n  \"\"\"\n  {\n  \"$id\": \"https://example.com/geographical-location.schema.json\",  // will  be ignored\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",       // will be ignored\n  \"title\": \"Longitude and Latitude Values\",                        // will be ignored\n  \"description\": \"A geographical coordinate.\",                     // will be ignored\n  \"required\": [ \"latitude\", \"longitude\" ],\n  \"type\": \"object\",\n  \"properties\": {\n    \"latitude\": {\n      \"type\": \"number\",\n      \"minimum\": -90,\n      \"maximum\": 90\n    },\n    \"longitude\": {\n      \"type\": \"number\",\n      \"minimum\": -180,\n      \"maximum\": 180\n    }\n  }\n}\n  \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Reporter in Kotest Project Config\nDESCRIPTION: Sets up the HTML Reporter extension along with JunitXmlReporter in a Kotest project configuration. This class configures spec execution order and adds both the JUnit XML and HTML reporters as extensions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/html_reporter.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override val specExecutionOrder = SpecExecutionOrder.Annotated\n\n    override fun extensions(): List<Extension> = listOf(\n        JunitXmlReporter(\n            includeContainers = false,\n            useTestPathAsName = true,\n        ),\n        HtmlReporter()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Container Setup\nDESCRIPTION: Example of setting up an Elasticsearch container with type-safe configuration\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval elasticsearch = install(TestContainerExtension(ElasticsearchContainer(ELASTICSEARCH_IMAGE) )) {\n  withPassword(ELASTICSEARCH_PASSWORD)\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Basic Statistics for Enum Values in Kotest Property Tests\nDESCRIPTION: Demonstrates how to use the collect() function to gather statistics on RoundingMode enum values generated during property testing. This allows verification of the distribution of test values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/statistics.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n  collect(mode)\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Assertion Functions in Kotlin\nDESCRIPTION: Functions for comparing and validating regular expressions, including pattern matching and regex option verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldBeRegex(anotherRegex)\nregex.shouldHavePattern(regexPattern)\nregex.shouldHaveExactRegexOptions(regexOptions)\nregex.shouldIncludeRegexOption(regexOption)\nregex.shouldIncludeRegexOptions(regexOptions)\n```\n\n----------------------------------------\n\nTITLE: Eventually with Custom Exception Handling\nDESCRIPTION: Example of using a custom function to determine which exceptions should be suppressed based on exception properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/concurrency/eventually.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 8000\n  suppressExceptionIf = { it is UserNotFoundException && it.username == \"bob\" }\n}) {\n  userRepository.getById(1).name shouldNotBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually with Predicate\nDESCRIPTION: Shows how to use a predicate function to validate the result of each iteration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/concurrency/eventually.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nvar string = \"x\"\n\neventually({\n  duration = 5.seconds()\n  predicate = { it.result == \"xxx\" }\n}) {\n  string += \"x\"\n  string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parent-Level Fail Fast in Kotest Tests\nDESCRIPTION: Demonstrates how to enable fail-fast behavior for a specific test context using the config parameter. When a test fails, subsequent tests in the same context are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/fail_fast.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n      context(\"context with fail fast enabled\").config(failfast = true) {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TimerListener Extension for Kotest\nDESCRIPTION: This code defines a custom TimerListener that implements BeforeTestListener and AfterTestListener interfaces. It logs the duration of each test case execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/extensions/examples.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : BeforeTestListener, AfterTestListener {\n\n  var started = 0L\n\n  override fun beforeTest(testCase: TestCase): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(testCase: TestCase, result: TestResult): Unit {\n    println(\"Duration of ${testCase.descriptor} = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validated Assertions in Kotest Arrow\nDESCRIPTION: Assertion methods for Arrow Validated type including shouldBeValid() and shouldBeInvalid() variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nvalidated.shouldBeValid()    // Asserts validated is Valid and returns value\nvalidated.shouldBeValid(v)   // Asserts validated is Valid with value v\nvalidated.shouldBeInvalid()  // Asserts validated is Invalid and returns value\nvalidated.shouldBeInvalid(v) // Asserts validated is Invalid with value v\n```\n\n----------------------------------------\n\nTITLE: Flat Mapping Arbitrary Generators in Kotlin\nDESCRIPTION: Demonstrates the use of 'flatMap' to create dependent Arb instances where the emission or edge cases depend on the emission of previous arbitraries.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genops.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval dependentArbs: Arb<String> = Arb.of(\"foo\", \"bar\").flatMap { prefix ->\n   Arb.int(1..10).map { integer ->\n      \"${prefix}-${integer}\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Eventually Configuration between Tests\nDESCRIPTION: An example showing how to create and share configuration for 'eventually' blocks using the EventuallyConfig class. The example demonstrates configuring different timing profiles and utilizing listeners to monitor test progress.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = EventuallyConfig<ServerResponse, ServerException>(5.minutes, interval = 25.milliseconds.fibonacci(), exceptionClass = ServerException::class)\nval fast = slow.copy(duration = 5.seconds)\n\nclass FooTests : StringSpec({\n  val logger = logger(\"FooTests\")\n  val fSlow = slow.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\")})\n\n  \"server eventually provides a result for /foo\" {\n    eventually(fSlow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : StringSpec({\n  val logger = logger(\"BarTests\")\n  val bFast = fast.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\")})\n\n  \"server eventually provides a result for /bar\" {\n    eventually(bFast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Instant Properties in Kotlin\nDESCRIPTION: Assertion methods for Instant objects, including checking if an instant is before, after, or between other instants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\ninstant.shouldBeBefore(anotherInstant)\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\n----------------------------------------\n\nTITLE: Using shouldEqualSpecifiedJson in Kotlin\nDESCRIPTION: Example of using shouldEqualSpecifiedJson, which is more lenient than shouldEqualJson for field comparison.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/json/content.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = \"\"\" { \"a\": true, \"date\": \"2019-11-03\" } \"\"\"\nval b = \"\"\" { \"a\": true } \"\"\"\n\n// this would pass\na shouldEqualSpecifiedJson b\n\n// this would fail\na shouldEqualJson b\n```\n\n----------------------------------------\n\nTITLE: Using @Ignored Annotation to Disable a Spec in Kotest\nDESCRIPTION: This example demonstrates how to completely disable a test specification using the @Ignored annotation. The spec will not be instantiated, preventing any code within it from executing, which is useful for avoiding expensive resource setup.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/annotations.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Ignored\nclass IgnoredSpec : FunSpec() {\n  init {\n    error(\"boom\") // spec will not be created so this error will not happen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Component Matchers for Properties in Kotlin\nDESCRIPTION: This snippet defines three individual property matchers that will be composed into a complex matcher: name, age, and address matchers with custom error messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/composed_matchers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun nameMatcher(name: String) = Matcher<String> {\n  MatcherResult(\n    value == name,\n    { \"Name $value should be $name\" },\n    { \"Name $value should not be $name\" }\n  )\n}\n\nfun ageMatcher(age: Int) = Matcher<Int> {\n  MatcherResult(\n    value == age,\n    { \"Age $value should be $age\" },\n    { \"Age $value should not be $age\" }\n  )\n}\n\nval addressMatcher = Matcher<Address> {\n  MatcherResult(\n    value == Address(\"Warsaw\", \"Test\", \"1/1\"),\n    { \"Address $value should be Test 1/1 Warsaw\" },\n    { \"Address $value should not be Test 1/1 Warsaw\" }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec Execution Order in Kotest\nDESCRIPTION: This snippet shows how to set the spec execution order in Kotest by overriding the specExecutionOrder property in the project configuration. The ellipsis indicates where a specific ordering option should be specified.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/spec_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig: AbstractProjectConfig() {\n    override val specExecutionOrder = ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Parallelism in Kotest\nDESCRIPTION: Configures parallel execution of test specs by setting the parallelism level to 3 concurrent specs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/project_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val parallelism = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Value Generator\nDESCRIPTION: Generates random enum constants from a specified enum type\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.enum<T>()\n```\n\n----------------------------------------\n\nTITLE: Implementing PropTestListener in Kotlin with Kotest\nDESCRIPTION: Example showing how to create and configure a PropTestListener for property tests. The listener implements beforeTest and afterTest methods to execute setup and teardown code, and is used with checkAll function to test string concatenation properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.1.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = object : PropTestListener {\n  override suspend fun beforeTest() {\n    println(\"Startup\")\n  }\n\n  override suspend fun afterTest() {\n    println(\"Shutdown\")\n  }\n}\n\nval propConfig = PropTestConfig(listeners = listOf(listener))\n\ncheckAll<String, String>(10, propConfig) { a, b ->\n  a.length + b.length shouldBe (a + b).length\n}\n```\n\n----------------------------------------\n\nTITLE: String and Text Generation in Kotest\nDESCRIPTION: Various string generators including random strings, pattern-based strings, email addresses, UUIDs, and domain names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genslist.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.string(range)\nArb.stringPattern(pattern)\nArb.email(localPartGen, domainGen)\nArb.uuid(type)\nArb.domain(tlds, labelArb)\n```\n\n----------------------------------------\n\nTITLE: Using File Path Prefix Matcher\nDESCRIPTION: Demonstrates how to check if a file path begins with a specified prefix using the startWithPath matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nFile(\"/usr/home/sam\") should startWithPath(\"/usr/home\")\nFile(\"/usr/home/sam\") shouldNot startWithPath(\"/var\")\n```\n\n----------------------------------------\n\nTITLE: Data Driven Testing with Kotest\nDESCRIPTION: Example of using Kotest's forAll function to test multiple Pythagorean triples automatically.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.3.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n    forAll(\n       PythagTriple(3, 4, 5),\n       PythagTriple(6, 8, 10),\n       PythagTriple(8, 15, 17),\n       PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n        isPythagTriple(a, b, c) shouldBe true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up MockServer in Kotest Test\nDESCRIPTION: Demonstrates how to use MockServerListener to create a mock HTTP server, configure routes with MockServerClient, and test HTTP responses using Ktor client. This example shows a test for a login endpoint that returns a 202 status code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/mockserver.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyMockServerTest : FunSpec() {\n  init {\n\n      // this attaches the server to the lifeycle of the spec\n      listener(MockServerListener(1080))\n\n      // we can use the client to create routes. Here we are setting them up\n      // before each test by using the beforeTest callback.\n      beforeTest {\n         MockServerClient(\"localhost\", 1080).`when`(\n            HttpRequest.request()\n               .withMethod(\"POST\")\n               .withPath(\"/login\")\n               .withHeader(\"Content-Type\", \"application/json\")\n               .withBody(\"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\")\n         ).respond(\n            HttpResponse.response()\n               .withStatusCode(202)\n               .withHeader(\"X-Test\", \"foo\")\n         )\n      }\n\n      // this test will confirm the endpoint works\n      test(\"login endpoint should accept username and password json\") {\n\n         // using the ktor client to send requests\n         val client = HttpClient(CIO)\n         val resp = client.post<io.ktor.client.statement.HttpResponse>(\"http://localhost:1080/login\") {\n            contentType(ContentType.Application.Json)\n            body = \"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\"\n         }\n\n         // these handy matchers come from the kotest-assertions-ktor module\n         resp.shouldHaveStatus(HttpStatusCode.Accepted)\n         resp.shouldHaveHeader(\"X-Test\", \"foo\")\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Matchers in Property Testing with assertAll in Kotlin\nDESCRIPTION: Demonstrates the new approach to property testing using assertAll and matchers, which allows using multiple matchers in a single test block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_45\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  assertAll(Gen.string(), Gen.string(), { a, b ->\n    a + b should startWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Positive Integers with Built-in Generator in Kotest\nDESCRIPTION: This snippet demonstrates how to use Kotest's built-in positive integer generator for property-based testing. It includes an example of how shrinking results are displayed when a test fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/shrinking.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Applying EnabledIf Annotation to Kotest Spec\nDESCRIPTION: Demonstrates how to use the EnabledIf annotation with a custom EnabledCondition in a Kotest spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.3.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(EnabledIfMidnight::class)\nclass EnabledIfTest : FunSpec() {\n   init {\n      test(\"tis midnight when the witches roam free\") {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Schema with Length Constraints\nDESCRIPTION: Shows how to create a JSON schema for arrays with length constraints using minItems and maxItems properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/json/schema.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval lengthBoundedSchema = jsonSchema {\n  array(minItems = 0, maxItems = 1) { number() }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle with Enhanced Test Logging\nDESCRIPTION: Demonstrates how to configure Gradle with JUnit Platform while also enabling detailed test logging for failed tests, skipped tests, and standard output/error streams.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    useJUnitPlatform()\n    testLogging {\n        events \"FAILED\", \"SKIPPED\", \"STANDARD_OUT\", \"STANDARD_ERROR\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assertion Mode Error Output\nDESCRIPTION: Shows the console output when a test fails due to having no assertions when assertion mode is enabled.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/assertion_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTest 'this test has no assertions' did not invoke any assertions\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing for JVM/Gradle\nDESCRIPTION: Adds the Kotest property testing library dependency for JVM projects using Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-property:$version'\n```\n\n----------------------------------------\n\nTITLE: Asserting Thread Properties in Kotlin using Kotest\nDESCRIPTION: Demonstrates assertions for Thread objects in Kotest. Includes checks for thread state and properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nthread.shouldBeBlocked()\nthread.shouldBeDaemon()\nthread.shouldBeAlive()\nthread.shouldBeTerminated()\n```\n\n----------------------------------------\n\nTITLE: Using Labeled Statistics for Orthogonal Data Sets in Kotest\nDESCRIPTION: Shows how to use labeled statistics to track orthogonal properties (even/odd and positive/negative) separately, making it easier to analyze distribution across multiple dimensions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/statistics.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"even_odd\", \"EVEN\")\n    else -> collect(\"even_odd\", \"ODD\")\n  }\n  when {\n    k > 0 -> collect(\"pos_neg\", \"POS\")\n    else -> collect(\"pos_neg\", \"NEG\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Either Matchers in Kotlin with Kotest and Arrow\nDESCRIPTION: These matchers are used to assert the state and value of Either types. They can check if an Either is Right or Left, and verify the contained value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\neither.shouldBeRight()\neither.shouldBeRight(v)\neither.shouldBeLeft()\neither.shouldBeLeft(v)\n```\n\n----------------------------------------\n\nTITLE: Long Array Generator\nDESCRIPTION: Generates LongArray values with configurable length and content. The length and content are produced by separate arbitrary generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.longArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Using Logger Object in Kotest Tests\nDESCRIPTION: This snippet illustrates how to use a logger object in Kotest tests. It shows passing the logger to a custom assertion function, allowing for more flexible logging in test utilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/logging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something else\") {\n  logger.assertSomething(\"something else\")\n}\n\nfun TestLogger.assertSomething(actual: String) {\n   info { \"asserting something about $actual\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Generator Values in Kotest\nDESCRIPTION: Shows how to filter generated values from an Arb using a simple condition\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/assumptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\n```\n\n----------------------------------------\n\nTITLE: Using haveLength Matcher in Kotlin for KotlinTest\nDESCRIPTION: Shows the usage of the haveLength matcher for strings in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nsomeString should haveLength(10)\n```\n\n----------------------------------------\n\nTITLE: End-of-File Listener Positioning\nDESCRIPTION: Demonstrates recommended positioning of test listeners at the end of the spec for better readability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/integrations/mocks.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    afterTest {\n        clearMocks(repository)  // <---- End of file, better readability\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Mapping Arb Generator Values in Kotlin\nDESCRIPTION: Demonstrates how to transform values from an Arb generator using map operation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genops.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval integerStrings: Arb<String> = Arb.int().map { it.toString() }\n```\n\n----------------------------------------\n\nTITLE: Focus with Nested Tests in Kotest FunSpec\nDESCRIPTION: Shows how the focus prefix works with nested tests in a FunSpec. When a parent test is focused using 'f:', both the parent and its nested tests will be executed, while other tests are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/focus.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : FunSpec({\n   context(\"test 1\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n   }\n\n   context(\"f:test 2\") {\n      // this will be executed\n      test(\"foo\") {\n         // this will be executed\n      }\n   }\n\n   context(\"test 3\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Failures in Property Tests\nDESCRIPTION: Shows how to set maximum allowed failures for non-deterministic property tests using maxFailure parameter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some flakey test\" {\n      forAll<String, String>(PropTestConfig(maxFailure = 3)) { a,b ->\n         // max of 3 inputs can fail\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Exact Exception Type in Kotlin with Kotest\nDESCRIPTION: Shows how to test for an exact exception type using shouldThrowExactly, which will not catch parent exception types. Useful for ensuring specific exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/exceptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowExactly<FileNotFoundException> {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TimerListener in Kotest\nDESCRIPTION: This snippet shows the implementation of a custom TimerListener that logs the time taken for each test case. It uses the beforeTest and afterTest functions to measure and log the duration of each test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/extensions/examples.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : BeforeTestListener, AfterTestListener {\n\n  var started = 0L\n\n  override fun beforeTest(testCase: TestCase): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(testCase: TestCase, result: TestResult): Unit {\n    println(\"Duration of ${testCase.descriptor} = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Configuration for All Tests via Function Override (Kotlin)\nDESCRIPTION: Example of setting default test configuration for all tests in a spec by overriding the defaultTestCaseConfig function. This applies the same configuration (3 invocations) to every test in the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_case_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Test String Reversal Example\nDESCRIPTION: Demonstrates property testing with string reversal and improved shrinking output\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.1.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String> { a ->\n  a shouldBe a.reversed()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generator Bind in Kotest Property Testing\nDESCRIPTION: Demonstrates how to use the new bind function in Kotest to generate random instances of classes for property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val email: String, val id: Int)\n\nval userGen = Gen.bind(Gen.string(), Gen.positiveIntegers(), ::User)\n\nassertAll(userGen) {\n  it.email shouldNotBe null\n  it.id should beGreaterThan(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency in Maven\nDESCRIPTION: Adds the Kotest JUnit5 runner dependency to a Maven project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-runner-junit5-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Mapping Arb Values in Kotlin\nDESCRIPTION: Demonstrates the use of 'map' operation to transform the values generated by an Arb, converting integers to strings in this example.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genops.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval integerStrings: Arb<String> = Arb.int().map { it.toString() }\n```\n\n----------------------------------------\n\nTITLE: Using Domain Objects as Clues with asClue\nDESCRIPTION: Using a domain object as a clue with the asClue extension function. The object's toString() representation will be included in the error message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class HttpResponse(val status: Int, val body: String)\n\nval response = HttpResponse(404, \"the content\")\n\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing System Environment Listener in Kotest Spec\nDESCRIPTION: Demonstrates how to use the SystemEnvironmentTestListener to apply environment variable overrides at the Spec level in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemEnvironmentTestListener(\"foo\", \"bar\"))\n\n    init {\n      \"MyTest\" {\n        System.getenv(\"foo\") shouldBe \"bar\"\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Tests with Context Blocks in ExpectSpec\nDESCRIPTION: Shows how to organize tests using nested context blocks in ExpectSpec. This allows for grouping related tests together under a common context descriptor.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"a calculator\") {\n        expect(\"simple addition\") {\n            // test here\n        }\n        expect(\"integer overflow\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Comparable Assertions in Kotlin using Kotest\nDESCRIPTION: Assertions for comparing objects using compareTo and custom comparators in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ncomp.shouldBeLessThan(other)\ncomp.shouldBeLessThanOrEqualTo(other)\ncomp.shouldBeEqualComparingTo(other)\ncomp.shouldBeEqualComparingTo(other, comparator)\ncomp.shouldBeGreaterThan(other)\ncomp.shouldBeGreaterThanOrEqualTo(other)\n```\n\n----------------------------------------\n\nTITLE: Eventually Configuration Block Usage in Kotlin\nDESCRIPTION: Example of using eventually with a configuration block to specify duration and interval settings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 1.seconds\n  interval = 100.milliseconds\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Assertion-based Assumptions in Kotest (Kotlin)\nDESCRIPTION: Shows how to use assertion-based assumptions in Kotest, allowing for more complex filtering conditions using Kotest's assertion functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/assumptions.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.string(3..4, Codepoint.az()), Arb.string(3..4, Codepoint.az())) { a, b ->\n  withAssumptions({\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }) {\n     a.compareTo(b) shouldNotBe 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConstantNowTestListener in Kotest\nDESCRIPTION: Example showing how to implement a test listener that maintains a constant time value across all tests. This approach provides a global time freeze for the entire test suite.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/instant.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n  override fun listeners() = listOf(\n    ConstantNowTestListener(foreverNow)\n  )\n```\n\n----------------------------------------\n\nTITLE: Regex Matchers\nDESCRIPTION: Assertion functions for testing regular expressions including pattern matching and regex options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldBeRegex(anotherRegex)\nregex.shouldHavePattern(regexPattern)\nregex.shouldHaveExactRegexOptions(regexOptions)\nregex.shouldIncludeRegexOption(regexOption)\nregex.shouldIncludeRegexOptions(regexOptions)\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Files in Kotest Tests\nDESCRIPTION: Demonstrates how to create a temporary file using Kotest's tempfile() function within a test specification. The file is automatically cleaned up by Kotest after all tests in the spec complete.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/tempfile.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val file = tempfile()\n\n   test(\"a temporary file dependent test\") {\n      //...\n   }\n})\n\n```\n\n----------------------------------------\n\nTITLE: Asserting URI Properties in Kotlin with Kotest\nDESCRIPTION: This snippet shows assertion functions for URIs in Kotest. It includes checks for various URI components such as authority, fragment, host, parameters, path, port, query, and scheme.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveAuthority(fragment)\nuri.shouldHaveFragment(fragment)\nuri.shouldHaveHost(scheme)\nuri.shouldHaveParameter(scheme)\nuri.shouldHavePath(scheme)\nuri.shouldHavePort(scheme)\nuri.shouldHaveQuery(fragment)\nuri.shouldHaveScheme(scheme)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Extension Function for Person Validation in Kotlin\nDESCRIPTION: Defines an extension function on Person that uses the composed person matcher to verify if a Person object meets the specified criteria.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/composed_matchers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Person.shouldBePerson(name: String, age: Int) = this shouldBe personMatcher(name, age)\n```\n\n----------------------------------------\n\nTITLE: Enabling TestDispatcher for All Tests in a Kotest Spec\nDESCRIPTION: This code snippet shows how to enable TestDispatcher for all tests within a Kotest spec by setting testCoroutineDispatcher to true at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      testCoroutineDispatcher = true\n      test(\"this test uses a test dispatcher\") {\n      }\n      test(\"and so does this test!\") {\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Option Generators in Kotest with Arrow\nDESCRIPTION: Provides generators for Arrow's Option type, including exhaustive generators and arbitrary generators for None, Some, or both.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.option(a)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.none(a)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.option(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.some(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.none()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Embedded Kafka with Custom Port\nDESCRIPTION: Demonstrates how to initialize the embedded Kafka listener with a custom port configuration and use it for testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/kafka.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaCustomPortTest : FunSpec({\n\n   val listener = EmbeddedKafkaListener(5678)\n   listener(listener)\n\n   test(\"send / receive\") {\n\n      val producer = listener.stringStringProducer()\n      producer.send(ProducerRecord(\"foo\", \"a\"))\n      producer.close()\n\n      val consumer = listener.stringStringConsumer(\"foo\")\n      eventually(10.seconds) {\n         consumer.poll(1000).first().value() shouldBe \"a\"\n      }\n      consumer.close()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TestDispatcher Globally with ProjectConfig\nDESCRIPTION: Demonstrates how to enable TestDispatcher globally for all tests in a module using ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override var coroutineTestScope = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Exhaustive Generator from a List in Kotest\nDESCRIPTION: Demonstrates how to create an exhaustive generator by using the exhaustive() extension function on a list of values. This example creates a generator for single-digit prime numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/customgens.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval singleDigitPrimes = listOf(2,3,5,7).exhaustive()\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with x-Prefixes in FunSpec\nDESCRIPTION: Demonstrates how to disable tests and contexts using the new x-prefix functionality in FunSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFunSpec : FunSpec({\n  xtest(\"a disabled test\") {\n    // this test will not be invoked\n  }\n  xcontext(\"this context is disabled\") {\n     test(\"and so this test is by extension\") {\n     }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Mock Setup Using beforeTest\nDESCRIPTION: Solution pattern using beforeTest hook to initialize fresh mocks before each test execution\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/integrations/mocks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    lateinit var repository: MyRepository\n    lateinit var target: MyService\n\n    beforeTest {\n        repository = mockk()\n        target = MyService(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Testing List Implementation with WordSpec in Kotlin\nDESCRIPTION: This snippet demonstrates how to test a List implementation using the WordSpec style in Kotest. It includes tests for size increase and element containment.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_factories.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ListTest : WordSpec({\n\n   val empty = List<Int>()\n\n   \"List\" should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec-Level Timeouts in DescribeSpec\nDESCRIPTION: Example showing how to set a default timeout at the spec level that applies to all tests within that spec, while also demonstrating how to override the timeout for a specific test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.2.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   timeout = 1000\n\n   describe(\"I will timeout in 1000 millis\") {\n      it(\"And so will I\") { }\n      it(\"But I'm a little faster\").config(timeout = 500.milliseconds) { }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Error message with basic string clue\nDESCRIPTION: Shows how the error message is improved by adding a basic string clue, making the test failure more informative.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_5\n\nLANGUAGE: plain\nCODE:\n```\nName should be present\n<null> should not equal <null>\n```\n\n----------------------------------------\n\nTITLE: URI Assertions in Kotest\nDESCRIPTION: Extension functions for asserting properties of URI objects. Includes methods for verifying URI components such as authority, fragment, host, parameters, path, port, query, and scheme.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveAuthority(fragment)\nuri.shouldHaveFragment(fragment)\nuri.shouldHaveHost(scheme)\nuri.shouldHaveParameter(scheme)\nuri.shouldHavePath(scheme)\nuri.shouldHavePort(scheme)\nuri.shouldHaveQuery(fragment)\nuri.shouldHaveScheme(scheme)\n```\n\n----------------------------------------\n\nTITLE: Using Kotlinx Datetime Property Test Generators\nDESCRIPTION: Demonstrates using Kotest's property test generators for kotlinx datetime library. This example generates random datetime values within a specified year range for property-based testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.3.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Arb.datetime(1987..1994)) { date ->\n   isValidStarTrekTngSeason(date) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Spring TestContextManager in Kotest Tests\nDESCRIPTION: Demonstrates how to access the Spring TestContextManager within a Kotest test using the testContextManager() extension method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/spring.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"provide the test context manager\" {\n         println(\"The context is \" + testContextManager().testContext)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ShouldSpec Testing Style in Kotest\nDESCRIPTION: ShouldSpec is similar to FunSpec but uses the keyword 'should' instead of 'test'. This style allows writing tests that read more like natural language requirements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    should(\"return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering SpringExtension Globally in Kotest Project Config\nDESCRIPTION: Shows how to activate the Spring extension globally by registering it in the Kotest project configuration. This makes the extension available to all test classes in the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/spring.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions in Kotest\nDESCRIPTION: Soft assertions allow multiple assertions to be grouped together, with all assertions executed even if some fail. This provides a more comprehensive view of test failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MySoftAssertTest : StringSpec({\n  \"test with soft assertions\" {\n    assertSoftly {\n      \"foo\" shouldStartWith \"f\"\n      \"foo\" shouldHaveLength 3\n      \"foo\" shouldEndWith \"o\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Groovy)\nDESCRIPTION: Configures the JUnit Platform for Gradle using Groovy syntax. This is required for running Kotest tests on the JVM with Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexicographic Test Ordering in Kotest\nDESCRIPTION: Demonstrates how to configure tests to run in lexicographic (alphabetical) order by implementing TestCaseOrder.Lexicographic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_ordering.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LexicographicSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Lexicographic\n\n    init {\n      \"foo\" {\n        // I run second as bar < foo\n      }\n\n      \"bar\" {\n        // I run first as bar < foo\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unbounded Shrinking in Kotest Property Test\nDESCRIPTION: This example shows how to configure a property test to use unbounded shrinking, allowing the test to continue shrinking without a predefined limit.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/shrinking.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll(PropTestConfig(shrinkingMode = ShrinkingMode.Unbounded)) { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Tag Expression in Kotest\nDESCRIPTION: Demonstrates how to set a runtime tag expression using RuntimeTagExpressionExtension in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/tags.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nRuntimeTagExpressionExtension.expression = \"Linux & !Database\"\n```\n\n----------------------------------------\n\nTITLE: Adding an Extension Function for Password Validation in Kotlin using Kotest\nDESCRIPTION: This snippet shows how to create an extension function for the String class to use the composed password matcher, allowing for more readable test assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/composed_matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldBeStrongPassword() = this shouldBe passwordMatcher\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Eventually Function in Kotlin\nDESCRIPTION: Demonstrates the basic usage of the 'eventually' function with a simple duration parameter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/concurrency/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\neventually(5000) { // duration in millis\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Time Matchers in Kotlin with Klock and Kotest\nDESCRIPTION: Examples of time-related matchers provided by kotest-assertions-klock. These matchers allow for assertions on time components, comparisons, and range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/klock.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(time)\ntime.shouldHaveHours(hours)\ntime.shouldHaveSameMinutesAs(time)\ntime.shouldHaveMinutes(minutes)\ntime.shouldHaveSameSeconds(time)\ntime.shouldHaveSeconds(seconds)\ntime.shouldHaveSameMillisecondsAs(time)\ntime.shouldHaveMilliseconds(millis)\ntime.shouldBeBefore(time)\ntime.shouldBeAfter(time)\ntime.shouldBeBetween(time, time)\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generators with checkAll for Property Testing\nDESCRIPTION: Demonstrates how to use exhaustive generators with checkAll to test all combinations of values in the specified ranges. The example shows testing with three integer ranges from 0 to 5.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.2.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = checkAll(\n   Exhaustive.ints(0..5),\n   Exhaustive.ints(0..5),\n   Exhaustive.ints(0..5)\n) { ... }\n```\n\n----------------------------------------\n\nTITLE: Using Statistical Matchers in Kotest\nDESCRIPTION: Assertion matchers for collections that verify statistical properties like mean, variance, and standard deviation with customizable precision.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveMean(mean)\ncollection.shouldHaveMean(mean, precision)\ncollection.shouldHaveVariance(mean)\ncollection.shouldHaveVariance(mean, precision)\ncollection.shouldHaveStandardDeviation(mean)\ncollection.shouldHaveStandardDeviation(mean, precision)\n```\n\n----------------------------------------\n\nTITLE: Collecting Statistics on Enum Values in Kotlin Property Tests\nDESCRIPTION: This snippet demonstrates how to collect statistics on RoundingMode enum values used in BigDecimal property tests. It uses the collect function to gather data on the frequency of each RoundingMode.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/statistics.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n  collect(mode)\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Robolectric Test Setup with Kotest\nDESCRIPTION: Example of a basic Kotest test class using Robolectric. Shows how to annotate a test class with @RobolectricTest and create a simple test using ShouldSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/roboelectric.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@RobolectricTest\nclass MyTest : ShouldSpec({\n    should(\"Access Robolectric normally!\") {\n\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Property Arbs Package\nDESCRIPTION: Instructions for adding the kotest-property-arbs extension to your build configuration. This dependency provides additional arbitrary generators for property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/extra_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nio.kotest.extensions:kotest-property-arbs:version\n```\n\n----------------------------------------\n\nTITLE: NonEmptyList Type Matchers in Kotest Arrow\nDESCRIPTION: Assertion methods for NonEmptyList type in Arrow. Includes matchers for content verification, null checking, duplicates detection, and sorting validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nnel.shouldContain(e)\nnel.shouldContainAll(e1,e2,...,en)\nnel.shouldContainNull()\nnel.shouldContainNoNulls()\nnel.shouldContainOnlyNulls()\nnel.shouldHaveDuplicates()\nnel.shouldBeSingleElement(e)\nnel.shouldBeSorted()\n```\n\n----------------------------------------\n\nTITLE: Using Coroutine Scopes in Kotest Tests\nDESCRIPTION: Shows how all scopes in Kotest 4.1 are now coroutine scopes, allowing direct launching of coroutines within test blocks and nested scopes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.1.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\") {\n  launch {\n    delay(100)\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndescribe(\"some test\") {\n launch {\n    delay(100)\n    it(\"should do something\") {\n       launch {\n          delay(100)\n       }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Categorization in Statistics Collection\nDESCRIPTION: Example of collecting statistics with multiple categories combining even/odd and positive/negative numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/statistics.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k > 0 && k % 2 == 0 -> collect(\"EVEN_POS\")\n    k % 2 == 0 -> collect(\"EVEN_NEG\")\n    k > 0 -> collect(\"ODD_POS\")\n    else -> collect(\"ODD_NEG\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Either Generators in Kotest with Arrow\nDESCRIPTION: Demonstrates the available generators for Arrow's Either type, including balanced Either generation, and specific Right or Left instance generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.either(arbL, arbR)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.right(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.left(arb)\n```\n\n----------------------------------------\n\nTITLE: Custom String Matching with Resource in Kotest\nDESCRIPTION: These functions allow for custom matching logic when comparing a string to a resource file. They use a provided matcher function and ignore line separator differences by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nstr.shouldMatchResource(\"/path/to/test_resource.txt\", ::providedMatcher)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nstr.shouldNotMatchResource(\"/path/to/test_resource.txt\", ::providedMatcher)\n```\n\n----------------------------------------\n\nTITLE: Unhelpful assertion error message\nDESCRIPTION: Shows an unclear error message from a failed assertion that lacks context, demonstrating why clues are needed in some test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n<null> should not equal <null>\n```\n\n----------------------------------------\n\nTITLE: Implementing List Tests without Factory\nDESCRIPTION: Direct implementation of tests for List class using WordSpec style without test factory pattern.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_factories.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ListTest : WordSpec({\n\n   val empty = List<Int>()\n\n   \"List\" should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using File Property Matchers in KoTest\nDESCRIPTION: Examples of testing file properties using KoTest matchers for readability, writeability, executability, and hidden status.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfile should beRadable()\nfile should beWriteable()\nfile should beExecutable()\nfile should beHidden()\n```\n\n----------------------------------------\n\nTITLE: Using withConstantNow Function in Kotlin for Time-based Testing\nDESCRIPTION: This snippet demonstrates how to use the withConstantNow function to set a constant 'now' value for time-based testing. It shows that even with a delay, the 'now' value remains constant within the block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/instant.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval foreverNow = LocalDateTime.now()\n\nwithConstantNow(foreverNow) {\n  LocalDateTime.now() shouldBe foreverNow\n  delay(10) // Code is taking a small amount of time to execute, but `now` changed!\n  LocalDateTime.now() shouldBe foreverNow\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Maps from Key and Value Arbs in Kotlin using Kotest\nDESCRIPTION: Generates random maps, each with a size between minSize and maxSize, where each key is generated from the given key Arb and each value from the given value Arb.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_36\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.map(Arb<K>, Arb<V>, minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Defining Root-Level Data-Driven Tests in Kotest\nDESCRIPTION: Shows how to create data-driven tests at the root level of a test class using Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  withData(\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    isPythagTriple(a, b, c) shouldBe true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Ktor Matchers Dependency - Groovy\nDESCRIPTION: Gradle dependency declaration for adding Kotest Ktor assertions in Groovy build scripts\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation \"io.kotest.extensions:kotest-assertions-ktor:version\"\n```\n\n----------------------------------------\n\nTITLE: Statistical Assertions in Kotest\nDESCRIPTION: Methods for asserting statistical properties of collections, including mean, variance, and standard deviation calculations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_34\n\nLANGUAGE: Kotlin\nCODE:\n```\ncollection.shouldHaveMean(mean)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ncollection.shouldHaveVariance(mean, precision)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ncollection.shouldHaveStandardDeviation(mean)\n```\n\n----------------------------------------\n\nTITLE: Using FeatureSpec in Kotlin with Kotest\nDESCRIPTION: Shows how to use FeatureSpec style in Kotest, which uses 'feature' and 'scenario' keywords. It demonstrates basic usage and how to disable tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"the can of coke\") {\n        scenario(\"should be fizzy when I shake it\") {\n            // test here\n        }\n        scenario(\"and should be tasty\") {\n            // test here\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"this outer block is enabled\") {\n        xscenario(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xfeature(\"this block is disabled\") {\n        scenario(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec Execution Order in Kotest\nDESCRIPTION: Example showing how to configure spec execution order by extending AbstractProjectConfig class. The specExecutionOrder property determines how spec classes will be ordered during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/spec_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig: AbstractProjectConfig() {\n    override val specExecutionOrder = ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Extension Dependency\nDESCRIPTION: Maven/Gradle dependency declaration for adding Koin extension support to Kotest\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/koin.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-extensions-koin:${version}\n```\n\n----------------------------------------\n\nTITLE: Elements Collection Matchers in KotlinTest JSoup\nDESCRIPTION: Assertion functions for JSoup Elements collections that verify presence and count of items.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/jsoup.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nelements.shouldBePresent()\nelements.shouldBePresent(n)\n```\n\n----------------------------------------\n\nTITLE: Multiple Factory Inclusion Example\nDESCRIPTION: Demonstration of including multiple test factories along with inline tests in a single test file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_factories.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HugeTestFile : FunSpec({\n\n   test(\"first test\") {\n     // test here\n   }\n\n   include(factory1(\"foo\"))\n   include(factory2(1, 4))\n\n   test(\"another test\") {\n     //  testhere\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Kotest Framework Configuration Properties in Kotlin\nDESCRIPTION: This code defines an object KotestEngineProperties containing constant values for various system properties used to configure the Kotest testing framework. These properties control features like tag filtering, test isolation, timeouts, parallelism, and other framework behaviors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/config_props.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotest.core.internal\n\nobject KotestEngineProperties {\n\n   const val scriptsEnabled = \"kotest.framework.scripts.enabled\"\n\n   const val dumpConfig = \"kotest.framework.dump.config\"\n\n   /**\n    * Sets the tag expression that determines included/excluded tags.\n    */\n   const val tagExpression = \"kotest.tags\"\n\n   const val excludeTags = \"kotest.tags.exclude\"\n\n   const val includeTags = \"kotest.tags.include\"\n\n   /**\n    * A regex expression that is used to match the test [io.kotest.core.descriptors.Descriptor]'s path\n    * to determine if a test should be included in the test plan or not.\n    */\n   const val filterTests = \"kotest.filter.tests\"\n\n   /**\n    * A regex expression that is used to match the [io.kotest.mpp.bestName] of a class\n    * to determine if a spec should be included in the test plan or not.\n    */\n   const val filterSpecs = \"kotest.filter.specs\"\n\n   const val propertiesFilename = \"kotest.properties.filename\"\n\n   /**\n    * If set to true, then source ref's will not be created for test cases.\n    * This may speed up builds (as the engine will not need to create stack traces to\n    * generate line numbers) but will also reduce functionality in the intellij plugin\n    * (by limiting the ability to drill directly into the test inside a file).\n    */\n   const val disableSourceRef = \"kotest.framework.sourceref.disable\"\n\n   /**\n    * If set to true, disables the use of '!' as a prefix to disable tests.\n    */\n   const val disableBangPrefix = \"kotest.bang.disable\"\n\n   /**\n    * The default [io.kotest.core.spec.IsolationMode] for specs.\n    */\n   const val isolationMode = \"kotest.framework.isolation.mode\"\n\n   /**\n    * The default [io.kotest.core.test.AssertionMode] for tests.\n    */\n   const val assertionMode = \"kotest.framework.assertion.mode\"\n\n   /**\n    * The default parallelism for specs.\n    */\n   const val parallelism = \"kotest.framework.parallelism\"\n\n   /**\n    * The default timeout for test cases.\n    */\n   const val timeout = \"kotest.framework.timeout\"\n\n   /**\n    * The default timeout for the entire test suite.\n    */\n   const val projectTimeout = \"kotest.framework.projecttimeout\"\n\n   const val logLevel = \"kotest.framework.loglevel\"\n\n   /**\n    * The default timeout for each invocation of a test case.\n    */\n   const val invocationTimeout = \"kotest.framework.invocation.timeout\"\n\n   const val concurrentSpecs = \"kotest.framework.spec.concurrent\"\n\n   const val concurrentTests = \"kotest.framework.test.concurrent\"\n\n   /**\n    * Disable scanning the classpath for configuration classes by setting this property to true\n    */\n   const val disableConfigurationClassPathScanning = \"kotest.framework.classpath.scanning.config.disable\"\n\n   /**\n    * Specify a fully qualified name to use for project config.\n    * This class will be instantiated via reflection.\n    */\n   const val configurationClassName = \"kotest.framework.config.fqn\"\n\n   /**\n    * Disable scanning the classpath for listeners with @AutoScan by setting this property to true\n    */\n   const val disableAutoScanClassPathScanning = \"kotest.framework.classpath.scanning.autoscan.disable\"\n\n   const val allowMultilineTestName = \"kotest.framework.testname.multiline\"\n\n   /**\n    *  If set -> filter testCases by this severity level and higher, else running all\n    */\n   const val testSeverity = \"kotest.framework.test.severity\"\n\n   /**\n    * Enable assert softly globally.\n    * */\n   const val globalAssertSoftly = \"kotest.framework.assertion.globalassertsoftly\"\n\n   /**\n    * Appends all tags associated with a test case to its display name.\n    * */\n   const val testNameAppendTags = \"kotest.framework.testname.append.tags\"\n\n   /**\n    * Controls the [io.kotest.core.names.DuplicateTestNameMode] mode.\n    */\n   const val duplicateTestNameMode = \"kotest.framework.testname.duplicate.mode\"\n\n   const val disableJarDiscovery = \"kotest.framework.discovery.jar.scan.disable\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating TestClock Time in Kotlin\nDESCRIPTION: Demonstrates how to advance the test clock by a specific duration. The clock maintains mutable state that changes with each operation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/clock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclock.plus(6.minutes)\n```\n\n----------------------------------------\n\nTITLE: Testing System.exit Calls in Kotlin Tests\nDESCRIPTION: Shows how to use the SpecSystemExitListener to test System.exit calls. The listener intercepts System.exit and throws a SystemExitException instead of terminating the JVM, allowing assertions on the exit code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SystemExitTest : StringSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n\n    \"System.exit should throw an exception when the listener is added\" {\n      shouldThrow<SystemExitException> {\n        System.exit(123)\n      }.exitCode shouldBe 123\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Directories in Kotest Tests\nDESCRIPTION: Shows how to create a temporary directory using the tempdir() function in a Kotest FunSpec. Similar to temporary files, the directory is automatically cleaned up after all tests in the spec have run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/tempfile.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val dir = tempdir()\n\n   test(\"a temporary dir dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Valid Konform Validation\nDESCRIPTION: Demonstrates how to test that a UserProfile instance passes validation using shouldBeValid matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/konform.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval alice = UserProfile(\"Alice\", 25)\nvalidateUser shouldBeValid alice\n```\n\n----------------------------------------\n\nTITLE: Setting Array Uniqueness in JSON Schema\nDESCRIPTION: Demonstrates how to enforce uniqueness for array items in a JSON schema using the uniqueItems property. When set to true, all items in the validated array must be unique.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/json/schema.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval uniqueArray = jsonSchema {\n  array(uniqueItems = true) { number() }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocaleTestListener and TimeZoneTestListener in Kotest\nDESCRIPTION: Shows how to use LocaleTestListener and TimeZoneTestListener to change the default locale and timezone for an entire test or project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(\n  LocaleTestListener(Locale.FRANCE),\n  TimeZoneTestListener(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\")))\n)\n```\n\n----------------------------------------\n\nTITLE: Eventually with Return Value Predicate\nDESCRIPTION: Shows how to use predicates to validate the return value of the test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/concurrency/eventually.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nvar string = \"x\"\n\neventually({\n  duration = 5.seconds()\n  predicate = { it.result == \"xxx\" }\n}) {\n  string += \"x\"\n  string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Test Options\nDESCRIPTION: Sets up Android test options to use JUnit Platform with Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/setup.mdx#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      it.useJUnitPlatform()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Three Arb Generators in Kotlin using Kotest\nDESCRIPTION: Generates values by pulling a value from each of three given Arbs and passing those values to a supplied function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_21\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.bind(arbA, arbB, arbC, fn)\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeSpec and AfterSpec Listeners in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a test listener that implements BeforeSpecListener and AfterSpecListener interfaces, with methods that run before and after a spec executes. The example shows how to register this listener with a specific test spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/extensions/extensions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestListener : BeforeSpecListener, AfterSpecListener {\n   override suspend fun beforeSpec(spec:Spec) {\n      // power up kafka\n   }\n   override suspend fun afterSpec(spec: Spec) {\n      // shutdown kafka\n   }\n}\n\n\nclass TestSpec : WordSpec({\n    extension(MyTestListener())\n    // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Test Callbacks in Kotest\nDESCRIPTION: Demonstrates the usage of new callback functions (beforeEach, beforeContainer, beforeTest) in a DescribeSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.2.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CallbacksTest : DescribeSpec({\n\n   beforeEach {\n      println(\"Test: \" + it.displayName)\n   }\n\n   beforeContainer {\n      println(\"Container: \" + it.displayName)\n   }\n\n   beforeTest {\n      println(\"All: \" + it.displayName)\n   }\n\n   describe(\"I am a container scope\") {\n      it(\"And I am a test scope\") { }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Spec-level Timeout Overrides in Kotest DescribeSpec\nDESCRIPTION: Shows how to set a spec-level timeout and override it for specific test cases in a Kotest DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.2.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   timeout = 1000\n\n   describe(\"I will timeout in 1000 millis\") {\n      it(\"And so will I\") { }\n      it(\"But I'm a little faster\").config(timeout = 500.milliseconds) { }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Test Generation in Kotest\nDESCRIPTION: Shows how to create tests dynamically at runtime using a list of values. Each list element generates a separate test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/writing_tests.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n    listOf(\n      \"sam\",\n      \"pam\",\n      \"tim\",\n    ).forEach {\n       test(\"$it should be a three letter name\") {\n           it.shouldHaveLength(3)\n       }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   test(\"pam should be a three letter name\") {\n      \"pam\".shouldHaveLength(3)\n   }\n\n   test(\"tim should be a three letter name\") {\n     \"tim\".shouldHaveLength(3)\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using System Property Listener\nDESCRIPTION: Implementing a SystemPropertyListener for a test specification to override system properties for all tests within that spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemPropertyListener(\"foo\", \"bar\"))\n\n    init {\n      \"MyTest\" {\n        System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Timeout in Kotest FunSpec\nDESCRIPTION: Shows how to apply a test timeout for all tests in a spec file by setting the timeout property at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   timeout = 100.milliseconds\n\n   test(\"this test will timeout quickly!\") {\n      // test here\n   }\n\n   test(\"so will this one!\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using haveLength Matcher in Kotest\nDESCRIPTION: Demonstrates the use of the haveLength matcher for string assertions in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nsomeString should haveLength(10)\n```\n\n----------------------------------------\n\nTITLE: Using Logging Functions in Kotest Tests\nDESCRIPTION: This example demonstrates how to use logging functions within a Kotest test. It shows the usage of the 'warn' function to log a warning message during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/logging.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something\") {\n  warn { \"something weird happened\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Double Assertions in Kotest\nDESCRIPTION: Methods for asserting double value properties including infinity, NaN, and zero checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBePositiveInfinity()\ndouble.shouldBeNegativeInfinity()\ndouble.shouldBeNaN()\ndouble.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Using withEnvironment Extension with Single Value\nDESCRIPTION: Example of using the withEnvironment extension function to temporarily override a single system environment variable in a test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"foo\") {\n  withEnvironment(\"FooKey\", \"BarValue\") {\n    System.getenv(\"FooKey\") shouldBe \"BarValue\" // System environment overridden!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TestLogger Object in Kotest Tests\nDESCRIPTION: This snippet illustrates how to use the TestLogger object in Kotest. It shows how to pass the logger to a custom assertion function, allowing for more flexible logging in test utilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/logging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something else\") {\n  logger.assertSomething(\"something else\")\n}\n\nfun TestLogger.assertSomething(actual: String) {\n   info { \"asserting something about $actual\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a data class for Konform validation in Kotlin\nDESCRIPTION: A basic data class example that will be used with Konform validation. It contains a required string field and an optional integer field.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/konform.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class UserProfile(\n   val fullName: String,\n   val age: Int?\n)\n```\n\n----------------------------------------\n\nTITLE: Using Eventually with Configuration Block in Kotlin\nDESCRIPTION: Example demonstrating how to use 'eventually' with a configuration block to set both duration and interval parameters, offering more customization than the simple duration parameter approach.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/concurrency/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5000\n  interval = 1000.fixed()\n}) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Kotest Tests with Environment Variables\nDESCRIPTION: This example shows how to use Kotest-specific test filtering with an environment variable, which works for both Kotlin/JVM and Kotlin/Native. It executes all tests in the 'com.somepackage' and nested packages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/gradle.md#2025-04-13_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkotest_filter_specs='com.somepackage.*' gradle test\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables at Test Level\nDESCRIPTION: Demonstrates how to set environment variables for an entire test class using a SystemEnvironmentTestListener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n    override fun listeners() = listOf(SystemEnvironmentTestListener(\"foo\", \"bar\"))\n\n    init {\n        \"MyTest\" {\n            System.getenv(\"foo\") shouldBe \"bar\"\n          }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Labeled Statistics Collection in Kotest\nDESCRIPTION: Demonstrates using labeled statistics to maintain separate sets of statistics for different categorizations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/statistics.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"even_odd\", \"EVEN\")\n    else -> collect(\"even_odd\", \"ODD\")\n  }\n  when {\n    k > 0 -> collect(\"pos_neg\", \"POS\")\n    else -> collect(\"pos_neg\", \"NEG\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Throwable Properties in Kotlin using Kotest\nDESCRIPTION: Shows assertions for Throwable objects in Kotest. Includes checks for exception messages, causes, and types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_24\n\nLANGUAGE: Kotlin\nCODE:\n```\nthrowable.shouldHaveMessage(message)\nthrowable.shouldHaveCause()\nthrowable.shouldHaveCause { block }\nthrowable.shouldHaveCauseInstanceOf<T>()\nthrowable.shouldHaveCauseOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Registering TimerListener in Kotest FunSpec\nDESCRIPTION: This snippet demonstrates how to register the custom TimerListener in a Kotest FunSpec. The extension is added to the test class, allowing it to measure the duration of all tests within the class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/extensions/examples.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n  extensions(TimerListener)\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: WireMock Per-Test Configuration in Kotest\nDESCRIPTION: Example demonstrating WireMock listener configuration for per-test execution, where the WireMock server is restarted before each individual test and stopped after each test completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/wiremock.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_TEST))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n  //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Collection Generation in Kotest\nDESCRIPTION: Methods for generating various collection types including lists, sets, and maps with configurable sizes and element generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genslist.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.list(gen, range)\nArb.set(gen, range)\nArb.map(Arb<K>, Arb<V>, minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Example in Kotlin\nDESCRIPTION: A simple example of a Kotest assertion comparing a username to an expected value. This shows what a basic assertion looks like before adding clues.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nusername shouldBe \"sksamuel\"\n```\n\n----------------------------------------\n\nTITLE: Using asClue Extension Function in Kotlin\nDESCRIPTION: Demonstrates the use of the 'asClue' extension function to create a clue from any object. This approach is particularly useful for creating clues with complex logic or multiple values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/clues.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Name should be present (user_id=${user.id})\" }.asClue {\nuser.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Using Range Membership Assertions in Kotest\nDESCRIPTION: Examples of asserting whether values are contained within ranges. These matchers check by value rather than by reference, allowing for proper testing of range membership.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/ranges.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nvalue.shouldBeIn(range)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nvalue.shouldNotBeIn(range)\n```\n\n----------------------------------------\n\nTITLE: Implementing DescribeSpec Testing Style in Kotest\nDESCRIPTION: DescribeSpec offers a style familiar to Ruby and JavaScript developers, using 'describe' and 'it' keywords. Tests must be nested within at least one describe block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"score\") {\n        it(\"start as zero\") {\n            // test here\n        }\n        describe(\"with a strike\") {\n            it(\"adds ten\") {\n                // test here\n            }\n            it(\"carries strike to the next frame\") {\n                // test here\n            }\n        }\n\n        describe(\"for the opposite team\") {\n            it(\"Should negate one score\") {\n                // test here\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Exhaustive A-Z Strings in Kotlin with Kotest\nDESCRIPTION: Uses Exhaustive.azstring() to generate all possible A-Z strings within a specified range. For example, range 1..2 would include 'a', 'b', 'c', ..., 'yz', 'zz'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.azstring(range)\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Tests with DescribeSpec in Kotlin\nDESCRIPTION: Example of creating nested tests using Kotest's DescribeSpec style. This demonstrates a hierarchical test structure with a 'describe' block containing multiple 'it' test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/output.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: DescribeSpec({\n  describe(\"describe 1\"){\n    it(\"test 1\"){}\n    it(\"test 2\"){}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Matchers in Kotlin\nDESCRIPTION: Demonstrates property testing using assertAll with matchers, allowing for more expressive assertions and multiple checks within the same test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  assertAll(Gen.string(), Gen.string(), { a, b ->\n    a + b should startWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Context-Level Fail Fast in Kotest\nDESCRIPTION: Example showing how to enable fail-fast for a specific test context. When enabled, the first test failure will cause all subsequent tests in that context to be skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/fail_fast.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n      context(\"context with fail fast enabled\").config(failfast = true) {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Producer and Consumer for Testing in Kotlin\nDESCRIPTION: Demonstrates how to create a string producer and consumer using convenience methods provided by the embedded Kafka listener. It shows sending a message and then consuming it within a test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/kafka.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n\n   test(\"send / receive\") {\n\n     val producer = embeddedKafkaListener.stringStringProducer()\n     producer.send(ProducerRecord(\"foo\", \"a\"))\n     producer.close()\n\n     val consumer = embeddedKafkaListener.stringStringConsumer(\"foo\")\n     eventually(10.seconds) {\n       consumer.poll(1000).first().value() shouldBe \"a\"\n     }\n     consumer.close()\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using Tag Annotations\nDESCRIPTION: Example of using @Tags and @RequiresTag annotations to apply tags at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/tags.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Tags(\"Linux\")\nclass MyTestClass : FunSpec({\n\n  tags(UnitTest)\n\n  beforeSpec { println(\"Before\") }\n\n  test(\"A\").config(tags = setOf(Mysql)) {}\n  test(\"B\").config(tags = setOf(Postgres)) {}\n  test(\"C\") {}\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting a Table to a Text File\nDESCRIPTION: Writes a data table to a text file with the .table extension. This allows for storing test data externally when there are many test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/table_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval tableFile = testResources.resolve(\"users.table\")\ntable.writeTo(tableFile)\n```\n\n----------------------------------------\n\nTITLE: Generating Random List Permutations in Kotlin using Kotest\nDESCRIPTION: Generates random permutations of a given list. For example, 'Arb.shuffle(listOf(1,2,3))' could generate 'listOf(3,1,2)', 'listOf(1,3,2)', and so on.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_25\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.shuffle(list)\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Test Factory for IndexedSeq\nDESCRIPTION: Implementation of a reusable test factory function that generates tests for any IndexedSeq implementation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_factories.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> indexedSeqTests(name: String, empty: IndexedSeq<T>) = wordSpec {\n   name should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Test Factories in a Test Suite in Kotlin\nDESCRIPTION: Demonstration of how to include test factories in a spec to apply the same tests to multiple implementations, reducing code duplication.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_factories.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IndexedSeqTestSuite : WordSpec({\n   include(indexedSeqTests(\"vector\"), Vector())\n   include(indexedSeqTests(\"list\"), List())\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Fail Fast at Spec Level in Kotest\nDESCRIPTION: This example shows how to enable fail fast for all scopes in a Kotest FunSpec by setting it at the spec level. This configuration affects all tests within the spec, causing subsequent tests to be skipped after the first failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/fail_fast.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n\n      failfast = true\n\n      context(\"context with fail fast enabled at the spec level\") {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Arbitraries with Kotest\nDESCRIPTION: Uses Arb.bind(arbA, ...., fn) to generate values by pulling a value from each of the given arbitraries and passing those values to the supplied function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_38\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.bind(arbA, ...., fn)\n```\n\n----------------------------------------\n\nTITLE: Weighted Random Selection in Kotest\nDESCRIPTION: Generates values based on specified weights. For example, 'A' with weight 1 and 'B' with weight 2 will generate 'A' 33% of the time and 'B' 66% of the time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.choose(pairs)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Strings in Kotlin using Kotest\nDESCRIPTION: Generates random printable strings with a size chosen from the given range. If no range is specified, it defaults to (0..100). Edge cases include empty string, blank string, and a unicode string.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.string(range)\n```\n\n----------------------------------------\n\nTITLE: Continually Assertion with Custom Poll Interval in Kotlin using Kotest\nDESCRIPTION: Shows how to customize the polling interval of the continually assertion. In this example, the condition is checked every 5 seconds for a total duration of 60 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/continually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds, 5.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Invocation Timeout in Kotest DescribeSpec\nDESCRIPTION: This example demonstrates how to set an invocation timeout for a test that runs multiple times in a DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times and each has a timeout of 60 milliseconds\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using haveLength String Matcher in Kotest\nDESCRIPTION: Example of the haveLength matcher for strings, which verifies that a string has the expected length.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nsomeString should haveLength(10)\n```\n\n----------------------------------------\n\nTITLE: Field-by-Field Comparison Matchers in Kotlin with Kotest\nDESCRIPTION: Advanced matchers for comparing objects field-by-field instead of using the equals method, with options to include/exclude private fields or specific properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFields(other: T)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFields(other: T, ignorePrivateFields: Boolean)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFieldsExcept(other: T, ignoreProperty: KProperty<*>, vararg ignoreProperties: KProperty<*>)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFieldsExcept(other: T, ignorePrivateFields: Boolean, ignoreProperty: KProperty<*>, vararg ignoreProperties: KProperty<*>)\n```\n\n----------------------------------------\n\nTITLE: Double Assertions in Kotest\nDESCRIPTION: Assertion methods for double values including comparisons, sign checks, and special value validations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBeGreaterThan(n)\ndouble.shouldBeGreaterThanOrEqual(n)\ndouble.shouldBePositive()\ndouble.shouldBeNegative()\ndouble.shouldBePositiveInfinity()\ndouble.shouldBeNegativeInfinity()\ndouble.shouldBeNaN()\ndouble.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Test Filtering in Build Script\nDESCRIPTION: Example of how to configure test filtering in the Gradle build script to include tests from a specific package.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/gradle.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.test {\n    filter {\n        //include all tests from package\n        includeTestsMatching(\"com.somepackage.*\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Assertions in Kotlin with Kotest\nDESCRIPTION: Assertions for verifying object types, instances, annotations and null references. These include checking for specific types, instance types, annotations, and null/not-null validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBeSameInstanceAs(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBeTypeOf<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBeInstanceOf<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldHaveAnnotation(annotationClass)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBeNull()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobj shouldNotBeNull { block }\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dispatcher for Single Test in Kotest\nDESCRIPTION: Shows how to enable TestDispatcher for a single test using coroutineTestScope config parameter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineTestScope = true) {\n         // this test will run with a test dispatcher\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Generators in Kotest\nDESCRIPTION: Generator for producing constant values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.constant(t)\n```\n\n----------------------------------------\n\nTITLE: Defining Data Tests with Map-based Names in Kotlin\nDESCRIPTION: Demonstrates how to specify test names using a map where keys are test names and values are test inputs. Used for creating Pythagorean triple tests with custom names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/test_names.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData(\n    mapOf(\n      \"3, 4, 5\" to PythagTriple(3, 4, 5),\n      \"6, 8, 10\" to PythagTriple(6, 8, 10),\n      \"8, 15, 17\" to PythagTriple(8, 15, 17),\n      \"7, 24, 25\" to PythagTriple(7, 24, 25)\n    )\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sequence-based Fake Function in Service Tests\nDESCRIPTION: Demonstrates practical usage of sequence-based fake functions in service testing. Shows how to integrate fake functions with the MyService class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/fake_functions.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval fakeFunction = sequenceOf(\"yes\", \"no\", \"maybe\").toFunction()\nval myService = MyService { fakeFunction.next() }\nmyService.respond(\"what\") shouldBe \"yes\"\nmyService.respond(\"when\") shouldBe \"no\"\nmyService.respond(\"where\") shouldBe \"maybe\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher with Should and ShouldNot in Kotlin\nDESCRIPTION: Demonstrating how to use the custom string length matcher with Kotest's 'should' and 'shouldNot' functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/custom.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should haveLength(9)\n\"hello bar\" shouldNot haveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Directory in Kotest FunSpec\nDESCRIPTION: This snippet shows how to create a temporary directory using the tempdir() function in a Kotest FunSpec. Similar to temporary files, the directory is automatically cleaned up by Kotest after all tests in the Spec are run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/tempfile.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val dir = tempdir()\n\n   test(\"a temporary dir dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Kotlinx Datetime Generators in Kotest Property Tests\nDESCRIPTION: Illustrates how to use the new kotlinx datetime generators in Kotest property tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.3.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Arb.datetime(1987..1994)) { date ->\n   isValidStarTrekTngSeason(date) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Container in Kotlin\nDESCRIPTION: Initializes a MySQL container using Testcontainers. Sets up connection parameters and startup attempts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n  startupAttempts = 1\n  withUrlParam(\"connectionTimeZone\", \"Z\")\n  withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n}\n```\n\n----------------------------------------\n\nTITLE: Testing System.exit Calls with KotlinTest Extension in Kotlin\nDESCRIPTION: Shows how to use the SpecSystemExitListener to test System.exit(Int) calls. This listener intercepts System.exit calls and throws a SystemExitException with the exit code instead of terminating the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SystemExitTest : StringSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n\n    \"System.exit should throw an exception when the listener is added\" {\n      shouldThrow<SystemExitException> {\n        System.exit(123)\n      }.exitCode shouldBe 123\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Exceptions in Eventually Blocks\nDESCRIPTION: An example showing how to configure the 'eventually' function to ignore a specific exception (UserNotFoundException) during retries, while still failing immediately for any other exceptions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"check if user repository has one row\") {\n      eventually(5.seconds, UserNotFoundException::class.java) {\n        userRepository.findBy(1) shouldNotBe null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocalDateTime Matchers in Kotest with Kotlinx Datetime\nDESCRIPTION: Matchers for LocalDateTime objects that verify time components and relative positioning. These extensions allow for testing time-related properties like hours, minutes, seconds, and nanoseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameMinutesAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameSecondsAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameNanosAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeBefore(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeAfter(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Koin Root Lifecycle Mode with Kotest DescribeSpec\nDESCRIPTION: Example demonstrating Koin integration with DescribeSpec using Root lifecycle mode, which maintains context across nested tests\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/koin.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : DescribeSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(module = myKoinModule, mode = KoinLifecycleMode.Root))\n\n    val userService by inject<UserService>()\n\n    init {\n        describe(\"use userService\") {\n            it(\"inside a leaf test\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n            it(\"this shares the same context\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Coverage Count Verification in Kotest\nDESCRIPTION: Demonstrates how to verify statistical coverage using absolute count constraints for generated values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/statistics.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoverageCounts(mapOf(RoundingMode.HALF_DOWN to 75, RoundingMode.FLOOR to 75)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually Fibonacci Interval Configuration in Kotlin\nDESCRIPTION: Example showing how to use a fibonacci sequence for interval timing in eventually.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  intervalFn = 100.milliseconds.fibonacci()\n}\n```\n\n----------------------------------------\n\nTITLE: Kotest Test Name Pattern Filtering\nDESCRIPTION: Example of filtering tests by name pattern using Kotest's system property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/gradle.md#2025-04-13_snippet_6\n\nLANGUAGE: gradle\nCODE:\n```\ngradle test -Dkotest.filter.tests='Foo*'\n```\n\n----------------------------------------\n\nTITLE: Initializing TestClock in Kotlin\nDESCRIPTION: Creates a TestClock instance with a specific timestamp and time zone. This allows for controlled time-based testing in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/clock.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval timestamp = Instant.ofEpochMilli(1234)\nval clock = TestClock(timestamp, ZoneOffset.UTC)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Test Ordering in Kotest\nDESCRIPTION: This snippet demonstrates how to configure sequential test ordering in a Kotest StringSpec. Tests are executed in the order they are defined in the spec file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SequentialSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Sequential\n\n    init {\n      \"foo\" {\n        // I run first as I'm defined first\n      }\n\n      \"bar\" {\n        // I run second as I'm defined second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Property Test for Levenshtein Distance in Kotlin\nDESCRIPTION: Modifies the previous test to only check the Levenshtein distance when the strings are not equal. This approach may hide potential issues in more complex scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/assumptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  if (a != b)\n    levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Assertion-Based Assumptions in Kotest\nDESCRIPTION: Shows the inline syntax for using multiple assertions within an assumption block in Kotest property tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/assumptions.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume {\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: FlatMapping Arb Generator Values in Kotlin\nDESCRIPTION: Shows how to create dependent arbitrary values using flatMap operation where subsequent values depend on previous ones.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genops.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval dependentArbs: Arb<String> = Arb.of(\"foo\", \"bar\").flatMap { prefix ->\n   Arb.int(1..10).map { integer ->\n      \"${prefix}-${integer}\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Statistics Report Mode in Kotest\nDESCRIPTION: Shows how to configure the statistics report mode using the PropertyTesting global configuration object. This example sets the mode to only show statistics for successful tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/statistics.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nPropertyTesting.statisticsReportMode = StatisticsReportMode.SUCCESS\n```\n\n----------------------------------------\n\nTITLE: Asserting Future Properties in Kotlin with Kotest\nDESCRIPTION: These assertions validate various states and outcomes of Future objects, including cancellation, completion, and exceptional completion. They are useful for testing asynchronous operations and their results.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nfuture.shouldBeCancelled()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfuture.shouldBeCompleted()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfuture.shouldBeCompletedExceptionally()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfuture.shouldCompleteExceptionallyWith(throwable)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Container in Kotest\nDESCRIPTION: Example of creating and configuring a MySQL TestContainer instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n  startupAttempts = 1\n  withUrlParam(\"connectionTimeZone\", \"Z\")\n  withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Parallelism in Kotest\nDESCRIPTION: Sets up parallel execution of test specs by configuring the parallelism level. Default is 1, and higher values enable concurrent spec execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/project_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val parallelism = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Future-based Code with whenReady in Kotlin\nDESCRIPTION: Shows how to test asynchronous code that returns futures without blocking, using the whenReady function to execute assertions once the future completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n\n    \"test a future\" {\n        val f: CompletableFuture<String> = someFuture()\n        whenReady(f) {\n            it shouldBe \"wibble\"\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Labelled Statistics in Kotlin Property Tests\nDESCRIPTION: This snippet illustrates the use of labelled statistics to create orthogonal sets of statistics. It collects data on even/odd and positive/negative numbers separately using labels.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/statistics.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"even_odd\", \"EVEN\")\n    else -> collect(\"even_odd\", \"ODD\")\n  }\n  when {\n    k > 0 -> collect(\"pos_neg\", \"POS\")\n    else -> collect(\"pos_neg\", \"NEG\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Exhaustively Enumerating Collection Elements in Kotlin using Kotest\nDESCRIPTION: Enumerates each element of the given list one by one.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_34\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.collection(list)\n```\n\n----------------------------------------\n\nTITLE: Using Property Tests in Kotest\nDESCRIPTION: Example of Property Tests which automatically generate test values. The forAll function accepts a lambda that defines the property to be tested, and the test is executed multiple times with different random values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n\n  \"String size\" {\n    forAll({ a: String, b: String ->\n      (a + b).length == a.length + b.length\n    })\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Future Assertions in Kotest\nDESCRIPTION: Methods for testing Future objects including completion states (cancelled, completed, completed exceptionally) and expected exception verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nfuture.shouldBeCancelled()\nfuture.shouldBeCompleted()\nfuture.shouldBeCompletedExceptionally()\nfuture.shouldCompleteExceptionallyWith(throwable)\n```\n\n----------------------------------------\n\nTITLE: Using shouldEqualSpecifiedJson in Kotlin\nDESCRIPTION: Example of using shouldEqualSpecifiedJson which is more lenient than shouldEqualJson since it uses FieldComparison.Lenient by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/json/content.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = \"\"\" { \"a\": true, \"date\": \"2019-11-03\" } \"\"\"\nval b = \"\"\" { \"a\": true } \"\"\"\n\n// this would pass\na shouldEqualSpecifiedJson b\n\n// this would fail\na shouldEqualJson b\n```\n\n----------------------------------------\n\nTITLE: Sample Coroutine Debug Output Format\nDESCRIPTION: Example of the coroutine dump output format showing creation stacktrace and coroutine state information.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCoroutines dump 2021/11/27 22:17:43\n\nCoroutine DeferredCoroutine{Active}@71f1906, state: CREATED\n\t(Coroutine creation stacktrace)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.async$default(Builders.common.kt:82)\n\tat kotlinx.coroutines.BuildersKt.async$default(Unknown Source)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invokeSuspend(CoroutineDebugTest.kt:37)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invoke(CoroutineDebugTest.kt)\n```\n\n----------------------------------------\n\nTITLE: Using withClue with dynamic message in Kotest\nDESCRIPTION: Demonstrates using withClue with a lambda that constructs a dynamic message including runtime values, providing more detailed context for failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue({ \"Name should be present (user_id=${user.id})\" }) {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Tag Filtering in Gradle\nDESCRIPTION: Shows how to execute tests with specific tag filters using Gradle command line arguments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/tags.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.tags=\"Linux & !Database\"\n```\n\n----------------------------------------\n\nTITLE: Implementing System Property Listener in Kotest\nDESCRIPTION: Shows how to use the SystemPropertyListener to apply system property overrides at the Spec level in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n          override fun listeners() = listOf(SystemPropertyListener(\"foo\", \"bar\"))\n\n        init {\n          \"MyTest\" {\n            System.getProperty(\"foo\") shouldBe \"bar\"\n          }\n        }\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Recommended approach for setting test configuration in Kotest 5.0\nDESCRIPTION: Example showing the preferred way to set test configuration in Kotest 5.0, using direct configuration methods at the spec level. This approach allows settings to fall through from test to spec to global configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_5.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n\n    tags(Foo, Bar)\n    timeout = 100.seconds\n\n    test(\"foo\") {\n       // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating individual property matchers in Kotest\nDESCRIPTION: Implementation of individual matchers for name, age, and address that will be used as building blocks for a composed matcher. Each matcher returns a MatcherResult with success/failure logic and appropriate messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/data_class_matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun nameMatcher(name: String) = Matcher<String> {\n  MatcherResult(\n    value == name,\n    { \"Name $value should be $name\" },\n    { \"Name $value should not be $name\" }\n  )\n}\n\nfun ageMatcher(age: Int) = Matcher<Int> {\n  MatcherResult(\n    value == age,\n    { \"Age $value should be $age\" },\n    { \"Age $value should not be $age\" }\n  )\n}\n\nval addressMatcher = Matcher<Address> {\n  MatcherResult(\n    value == Address(\"Warsaw\", \"Test\", \"1/1\"),\n    { \"Address $value should be Test 1/1 Warsaw\" },\n    { \"Address $value should not be Test 1/1 Warsaw\" }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using withClue with String Message in Kotest\nDESCRIPTION: Adding context to an assertion using the withClue function with a static string message, which will be displayed if the assertion fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Using SystemPropertyListener in Kotest Spec\nDESCRIPTION: Shows how to use the SystemPropertyListener to apply system property changes at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemPropertyListener(\"foo\", \"bar\"))\n\n    init {\n      \"MyTest\" {\n        System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Embedded Kafka Listener in Kotest FunSpec\nDESCRIPTION: Shows how to register the embeddedKafkaListener in a Kotest FunSpec using the functional style. This sets up an embedded Kafka instance that starts when the spec is created and stops when it completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/kafka.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n  listener(embeddedKafkaListener)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Kotest with ProjectConfig\nDESCRIPTION: Sets up logging for Kotest by configuring LogLevel and implementing a LogExtension in AbstractProjectConfig. This snippet shows how to create a custom LogExtension that handles log entries and prints them to console.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/logging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n    override val logLevel = LogLevel.Error\n    override fun extensions() = listOf(\n        object : LogExtension {\n            override suspend fun handleLogs(testCase: TestCase, logs: List<LogEntry>) {\n                logs.forEach { println(it.level.name + \" - \" + it.message) }\n            }\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Project-wide Extensions with @AutoScan in Kotlin\nDESCRIPTION: This example shows how to create a project-level listener that runs for every spec in the project. It uses the @AutoScan annotation to automatically register the listener, implementing BeforeProjectListener and AfterProjectListener interfaces.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/extensions/extensions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@AutoScan\nobject MyProjectListener : BeforeProjectListener, AfterProjectListener {\n  override suspend fun beforeProject() {\n    println(\"Project starting\")\n  }\n  override suspend fun afterProject() {\n    println(\"Project complete\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Lifecycle in Kotlin\nDESCRIPTION: Demonstrates how to configure the lifecycle of a container using ContainerLifecycleMode in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcDatabaseContainerExtension(mysql, ContainerLifecycleMode.Spec)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Required Tags Example\nDESCRIPTION: Shows how to use @RequiresTag annotation to ensure specific tags are present for test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/tags.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresTag(\"Linux\", \"Mysql\")\nclass MyTestClass : FunSpec()\n```\n\n----------------------------------------\n\nTITLE: Mock Cleanup with afterTest Listener\nDESCRIPTION: Solution using afterTest listener to clear mock states after each test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/mocks.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    afterTest {\n        clearMocks(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Result Type Assertions in Kotest\nDESCRIPTION: Methods for validating Result types, including success and failure states with value checking and exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_21\n\nLANGUAGE: Kotlin\nCODE:\n```\nresult.shouldBeSuccess()\nresult.shouldBeSuccess(value)\nresult.shouldBeSuccess(block)\nresult.shouldBeFailure()\nresult.shouldBeFailureOfType<Type : Throwable>()\nresult.shouldBeFailure(block)\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest\nDESCRIPTION: Configuration to set assertion mode to fail or warn when tests don't use Kotest assertions\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/project_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val assertionMode = AssertionMode.Error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec-level Timeout in Kotest DescribeSpec\nDESCRIPTION: Demonstrates how to set a spec-level timeout and override it for specific test cases in a Kotest DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.2.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   timeout = 1000\n\n   describe(\"I will timeout in 1000 millis\") {\n      it(\"And so will I\") { }\n      it(\"But I'm a little faster\").config(timeout = 500.milliseconds) { }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Applying @EnabledIf annotation to specs in Kotest\nDESCRIPTION: Demonstrates how to apply the @EnabledIf annotation with a custom condition to multiple specs. This allows for conditional execution of tests based on the implemented condition logic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/annotations.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest1 : FunSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest2 : DescribeSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyWindowsTests : DescribeSpec() {\n  // tests here\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Factory with Lifecycle Callbacks in a Spec in Kotlin\nDESCRIPTION: Example of including a factory with lifecycle callbacks in a spec, demonstrating that the callbacks only apply to tests from that factory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_factories.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LifecycleExample : FunSpec({\n   include(factory1)\n   test(\"c\")\n   test(\"d\")\n})\n```\n\n----------------------------------------\n\nTITLE: Using inline assume with multiple assertions in Kotest\nDESCRIPTION: Shows the inline syntax for assertion-based assumptions, allowing multiple assertions to be used to filter test inputs in a concise manner.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/assumptions.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume {\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using Until Function with Fibonacci Interval in Kotlin\nDESCRIPTION: This snippet demonstrates the use of the 'until' function with a Fibonacci interval. The delay between checks increases according to the Fibonacci sequence, starting from 100 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/until.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 100.milliseconds.fibonacci()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Callbacks in Test Factories in Kotlin\nDESCRIPTION: This code demonstrates how to add lifecycle callbacks (beforeTest) to a test factory. The callbacks only apply to tests defined within that factory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_factories.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval factory1 = funSpec {\n  beforeTest {\n     println(\"Executing $it\")\n  }\n  test(\"a\") {  }\n  test(\"b\") {  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Instant Properties in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates assertion functions for Instant in Kotest. It includes checks for instant comparisons and ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\ninstant.shouldBeBefore(anotherInstant)\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\n----------------------------------------\n\nTITLE: Implementing Security Manager Listener in Kotest\nDESCRIPTION: Shows how to use the SecurityManagerListener to apply a custom security manager at the Spec level in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n              override fun listeners() = listOf(SecurityManagerListener(myManager))\n\n            init {\n              // Use my security manager\n            }\n\n        }\n```\n\n----------------------------------------\n\nTITLE: Using NonEmptyList Matchers in Kotest with Arrow\nDESCRIPTION: Matchers for asserting various properties of NonEmptyList types from Arrow. These matchers allow checking for content, nulls, duplicates, sorting, and more.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nnel.shouldContain(e)               // Asserts that the NonEmptyList contains the given element e\nnel.shouldContainAll(e1,e2,...,en) // Asserts that the NonEmptyList contains all the given elements e1,e2,...,en\nnel.shouldContainNull()            // Asserts that the NonEmptyList contains at least one null\nnel.shouldContainNoNulls()         // Asserts that the NonEmptyList contains no nulls\nnel.shouldContainOnlyNulls()       // Asserts that the NonEmptyList contains only nulls or is empty\nnel.shouldHaveDuplicates()         // Asserts that the NonEmptyList has at least one duplicate\nnel.shouldBeSingleElement(e)       // Asserts that the NonEmptyList has a single element which is e\nnel.shouldBeSorted()               // Asserts that the NonEmptyList is sorted\n```\n\n----------------------------------------\n\nTITLE: Asserting Timestamp Properties in Kotlin using Kotest\nDESCRIPTION: Shows assertions for Timestamp objects in Kotest. Includes checks for time comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\ntimestamp.shouldBeAfter(anotherTimestamp)\ntimestamp.shouldBeBefore(anotherTimestamp)\ntimestamp.shouldBeBetween(fromTimestamp, toTimestamp)\n```\n\n----------------------------------------\n\nTITLE: Using CsvDataSource for Table Testing in KotlinTest\nDESCRIPTION: Example demonstrating how to use CsvDataSource to load data from CSV files for table-driven testing in KotlinTest. This enables data-driven testing with external data sources.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CsvDataSourceTest : WordSpec() {\n  init {\n\n    \"CsvDataSource\" should {\n      \"read data from csv file\" {\n\n        val source = CsvDataSource(javaClass.getResourceAsStream(\"/user_data.csv\"), CsvFormat())\n\n        val table = source.createTable<Long, String, String>(\n            { it: Record -> Row3(it.getLong(\"id\"), it.getString(\"name\"), it.getString(\"location\")) },\n            { it: Array<String> -> Headers3(it[0], it[1], it[2]) }\n        )\n\n        forAll(table) { a, b, c ->\n          a shouldBe gt(0)\n          b shouldNotBe null\n          c shouldNotBe null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Exhaustive Generator in Kotlin\nDESCRIPTION: Shows how to create an exhaustive generator from a list of prime numbers using the exhaustive() extension function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/customgens.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval singleDigitPrimes = listOf(2,3,5,7).exhaustive()\n```\n\n----------------------------------------\n\nTITLE: Using Regular AssertSoftly in Kotest\nDESCRIPTION: Example of using the assertSoftly function to collect multiple assertions before reporting failures, allowing a test to continue running even after an assertion fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nassertSoftly {\n  person.name shouldBe \"sam\"\n  person.age shouldBe 99\n  person.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using SystemEnvironmentProjectListener for Project-wide Environment Variables\nDESCRIPTION: Shows how to use SystemEnvironmentProjectListener to apply environment variable overrides at the project level, affecting all tests across the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n    override fun listeners(): List<TestListener> = listOf(SystemEnvironmentProjectListener(\"foo\", \"bar\"))\n\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in DescribeSpec\nDESCRIPTION: Shows how to disable tests in DescribeSpec using the xdescribe and xit variants. These provide convenient ways to temporarily skip specific tests or test blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"this outer block is enabled\") {\n        xit(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xdescribe(\"this block is disabled\") {\n        it(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Field-by-Field Comparison Matchers in Kotest\nDESCRIPTION: Matchers for comparing objects field-by-field instead of using equals() method, with options to include or exclude private fields and specific properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFields(other: T)\nany.shouldBeEqualToComparingFields(other: T, ignorePrivateFields: Boolean)\n~~any.shouldBeEqualToComparingFieldsExcept(other: T, ignoreProperty: KProperty<*>, vararg ignoreProperties: KProperty<*>)~~\n~~any.shouldBeEqualToComparingFieldsExcept(other: T, ignorePrivateFields: Boolean, ignoreProperty: KProperty<*>, vararg ignoreProperties: KProperty<*>)~~\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Intervals with Fibonacci Backoff in 'eventually'\nDESCRIPTION: Shows how to configure 'eventually' with a dynamic interval function that uses Fibonacci backoff. The interval between retries will increase according to the Fibonacci sequence, starting with 100 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  intervalFn = 100.milliseconds.fibonacci()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Kotest for Kotlin/JS Projects\nDESCRIPTION: Configures a Kotlin multiplatform project for JavaScript testing with Kotest. Includes plugin setup and dependency configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) { // LEGACY or BOTH are unsupported\n      browser() // to compile for the web\n      nodejs() // to compile against node\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PropTestListener to Property Tests\nDESCRIPTION: Shows how to add a PropTestListener for handling setup and teardown operations in each test iteration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some property test which require setup and tear down in each iteration\" {\n      forAll<String, String>(PropTestConfig(listeners = listOf(MyPropTestListener))) { a,b ->\n         // some assertion\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Iterator Operations in Kotlin with Kotest\nDESCRIPTION: Assertion methods for iterators in Kotest, checking for emptiness and next value availability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\niterator.shouldBeEmpty()\niterator.shouldHaveNext()\n```\n\n----------------------------------------\n\nTITLE: Naive Approach to Handling Unwanted Inputs (Kotlin)\nDESCRIPTION: Demonstrates a naive approach to handling unwanted inputs by wrapping the test in an if/else block. This method can potentially introduce bugs in more complex scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/assumptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  if (a != b)\n    levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener in Per-Test Mode\nDESCRIPTION: Example of using WireMockListener with ListenerMode.PER_TEST to manage a WireMockServer instance separately for each test. The server is started before each test and stopped after each test completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/wiremock.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_TEST))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n  //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling TestDispatcher Project-Wide in Kotest\nDESCRIPTION: This snippet demonstrates how to enable TestDispatcher for all tests in a Kotest project by setting testCoroutineDispatcher to true in the ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override var testCoroutineDispatcher = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Until Function with Fixed Interval in Kotlin\nDESCRIPTION: This example shows how to use the 'until' function with a custom fixed interval. It checks the broker every 250 milliseconds for up to 5 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/until.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 250.milliseconds.fixed()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Error Output with String Clue\nDESCRIPTION: The error output when using withClue with a string message, showing both the clue and the assertion details.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nName should be present\n<null> should not equal <null>\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Property-Based Matchers in Kotlin\nDESCRIPTION: Defines Person and Address data classes for demonstrating property-based composed matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/composed_matchers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(\n  val name: String,\n  val age: Int,\n  val address: Address,\n)\n\ndata class Address(\n  val city: String,\n  val street: String,\n  val buildingNumber: String,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Kotlin)\nDESCRIPTION: Configuration to enable JUnit Platform test execution in Gradle using Kotlin DSL\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/setup.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GeoLocation Objects with Kotest Arbitrary\nDESCRIPTION: Uses Arb.geoLocation() to generate GeoLocation objects with random latitude/longitude points uniformly distributed on the globe. This arbitrary is compatible with all listed Kotest versions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.geoLocation()\n```\n\n----------------------------------------\n\nTITLE: Generating Random Maps from Pairs in Kotlin using Kotest\nDESCRIPTION: Generates random maps, each with a size between minSize and maxSize, where each element is generated from the given Pair Arb.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.map(Arb<Pair<K,V>>, minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Using Validated Generators in Kotest with Arrow\nDESCRIPTION: Shows generators for Arrow's Validated type, including standard Validated and ValidatedNel variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/arrow.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.validated(invalid, valid)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.validatedNel(invalid, valid)\n```\n\n----------------------------------------\n\nTITLE: LocalDateTime Assertions in Kotlin\nDESCRIPTION: Assertion methods for comparing LocalDateTime instances, including time component comparisons and temporal ordering checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\ntime.shouldHaveSameMinutesAs(otherTime)\ntime.shouldHaveSameSecondsAs(otherTime)\ntime.shouldHaveSameNanosAs(otherTime)\ntime.shouldBeBefore(otherTime)\ntime.shouldBeAfter(otherTime)\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Registering BlockHound Extension in Kotest Test Class\nDESCRIPTION: Shows how to register the BlockHound extension at the spec level to detect blocking calls across all tests in a class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/blockhound.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BlockHoundSpecTest : FunSpec({\n   extension(BlockHound())\n\n   test(\"detects for spec\") {\n      blockInNonBlockingContext()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a TestClock Instance in Kotlin\nDESCRIPTION: Shows how to create an instance of TestClock by providing an initial timestamp and timezone offset. This creates a controllable clock that can be used in tests instead of system time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/clock.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval timestamp = Instant.ofEpochMilli(1234)\nval clock = TestClock(timestamp, ZoneOffset.UTC)\n```\n\n----------------------------------------\n\nTITLE: Using the Composed Password Matcher in Kotlin Tests with Kotest\nDESCRIPTION: This snippet demonstrates how to use the composed password matcher in actual test cases, showing both a passing and a failing example.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/composed_matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n\"StrongPassword123\".shouldBeStrongPassword()\n\"WeakPassword\".shouldBeStrongPassword() // would fail\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Generators for Property Tests in Kotest\nDESCRIPTION: Example demonstrating how to use custom generators with property tests to control the sample space. These tests use specific integer ranges (21-150 and 18-150) to test an age-related function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/test_functions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"is allowed to drink in Chicago\" {\n      forAll(Arb.int(21..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n   \"is allowed to drink in London\" {\n      forAll(Arb.int(18..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Locale and Timezone Extension Usage\nDESCRIPTION: Shows how to manipulate default locale and timezone in tests using extension functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/system.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nwithDefaultLocale(Locale.FRANCE) {\n  println(\"My locale is now France! Très bien!\")\n}\n\nwithDefaultTimeZone(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\"))) {\n  println(\"My timezone is now America/Sao_Paulo! Muito bem!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Test Configuration Syntax\nDESCRIPTION: Demonstrates the new syntax for configuring test cases in KotlinTest 3.1.x, showing both old and new approaches.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n\"this is a test\" {\n}.config(...)\n\n\"this is a test\".config(...) {\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Arb Binding with Builder API in Kotlin\nDESCRIPTION: Shows how to use Kotest's builder API to provide custom Arbs for specific types and properties, using a User data class example with custom string and integer ranges\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/reflective_arbs.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(\n  val name: String,\n  val password: String,\n  val age: Int,\n)\n\n// in some spec\ncontext(\"Some tests with an arbitrary user\") {\n  checkAll(Arb.bind<User> {\n    bind(User::name to Arb.string(1..10))\n    bind(User::password to Arb.string(24..80)) // binds a specific property to an arb\n    bind(Int::class to Arb.int(0..100))  // binds a type to an arb\n  }) { user ->\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Categories for Combined Conditions in Statistics Collection\nDESCRIPTION: Demonstrates manually creating multiple combined categories (even/odd with positive/negative) for comprehensive statistics collection in property tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/statistics.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k > 0 && k % 2 == 0 -> collect(\"EVEN_POS\")\n    k % 2 == 0 -> collect(\"EVEN_NEG\")\n    k > 0 -> collect(\"ODD_POS\")\n    else -> collect(\"ODD_NEG\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Using TestResult ADT Instead of TestStatus Enum in Kotlin\nDESCRIPTION: Example showing how to properly match on TestResult ADT which replaces the deprecated TestStatus enum in AfterTestListener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_5.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (result) {\n  is TestResult.Success -> ...\n  is TestResult.Error -> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Reset with End Positioning\nDESCRIPTION: Example showing how to position the afterTest listener at the end of the test class for better readability while maintaining the same mock reset functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/integrations/mocks.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    afterTest {\n        clearMocks(repository)  // <---- End of file, better readability\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Nullable Values in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to create generators that produce nullable values using Kotest's Arb.orNull() function. This can be used to mix null values into existing generators with optional control over null frequency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.int().orNull()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\narb.orNull(nullProbability)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Continually Function in Kotest\nDESCRIPTION: Demonstrates how to use the 'continually' function to assert that a block of code continues to succeed for a specified duration. The function executes the provided code block repeatedly every 10 milliseconds (default polling interval) for the entire duration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/continually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Persistence Issue in Kotest\nDESCRIPTION: Illustrates a common issue when using mocks across multiple tests in Kotest. The mock state persists between test invocations, causing verification to fail due to accumulated calls.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/integrations/mocks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n    test(\"Saves to repository as well\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Kotlin for Kotest\nDESCRIPTION: This snippet shows how to define tags as objects inheriting from io.kotest.core.Tag or using the NamedTag class. It includes examples for operating system-specific tags.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/tags.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n\nval tag = NamedTag(\"Linux\")\n```\n\n----------------------------------------\n\nTITLE: Initializing TestClock in Kotlin\nDESCRIPTION: Creates an instance of TestClock with a specific timestamp and zone offset. This allows for controlled time manipulation in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/clock.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval timestamp = Instant.ofEpochMilli(1234)\nval clock = TestClock(timestamp, ZoneOffset.UTC)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Schema from Text in Kotlin\nDESCRIPTION: Demonstrates how to parse a JSON schema from a text string that defines geographical coordinates with latitude and longitude constraints.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/schema.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval parsedSchema = parseSchema(\n  \"\"\"\n  {\n  \"$id\": \"https://example.com/geographical-location.schema.json\",  // will  be ignored\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",       // will be ignored\n  \"title\": \"Longitude and Latitude Values\",                        // will be ignored\n  \"description\": \"A geographical coordinate.\",                     // will be ignored\n  \"required\": [ \"latitude\", \"longitude\" ],\n  \"type\": \"object\",\n  \"properties\": {\n    \"latitude\": {\n      \"type\": \"number\",\n      \"minimum\": -90,\n      \"maximum\": 90\n    },\n    \"longitude\": {\n      \"type\": \"number\",\n      \"minimum\": -180,\n      \"maximum\": 180\n    }\n  }\n}\n  \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using @Order Annotation in Kotest Specs\nDESCRIPTION: Demonstrates how to use the @Order annotation on test specs to control their execution order. Specs with lower order values are executed first, and specs without annotations are executed last.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/spec_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Order(1)\nclass FooTest : FunSpec() { }\n\n@Order(0)\nclass BarTest: FunSpec() {}\n\n@Order(1)\nclass FarTest : FunSpec() { }\n\nclass BooTest : FunSpec() {}\n```\n\n----------------------------------------\n\nTITLE: Option Assertions in Kotest Arrow\nDESCRIPTION: Assertion methods available for Arrow Option type including shouldBeSome() and shouldBeNone() variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\noption.shouldBeSome()  // Asserts option is Some and returns value\noption.shouldBeSome(v) // Asserts option is Some with value v\noption.shouldBeNone()  // Asserts option is None\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Package with Gradle Command Line\nDESCRIPTION: Example of using Gradle's --tests command line option to run tests in a specific package.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/gradle.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngradle test --tests 'com.sksamuel.somepackage*'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Container with Environment Variables in Kotlin\nDESCRIPTION: Sets up a Kafka container with custom environment variables to enable dynamic topic creation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n  withEnv(\"KAFKA_AUTO_CREATE_TOPICS_ENABLE\", \"true\")\n}\n```\n\n----------------------------------------\n\nTITLE: Solution 3: Using InstancePerTest Isolation Mode\nDESCRIPTION: Demonstrates changing Kotest's isolation mode to create a new instance of the test class for each test. This approach automatically isolates mock state without explicit reset or initialization code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/integrations/mocks.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    isolationMode = IsolationMode.InstancePerTest\n\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Value from Kotest Arbitrary\nDESCRIPTION: Demonstrates how to get the next value from an Arb using either default Random or custom Random source.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genops.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval arbA: Arb<A> = ...\nval a = arbA.next() // use Random.Default\nval a2 = arbA.next(rs) // pass in Random\n```\n\n----------------------------------------\n\nTITLE: Setting Test Parallelism in Kotest\nDESCRIPTION: Configures parallel execution of test specs by setting the parallelism level to 3 concurrent specs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/project_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val parallelism = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Using System Exit Listener in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the SpecSystemExitListener to catch and verify System.exit calls in Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n    \"Catch exception\" {\n      val thrown: SystemExitException = shouldThrow<SystemExitException> {\n        System.exit(22)\n      }\n\n      thrown.exitCode shouldBe 22\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Extension Function for String Validation in Kotlin\nDESCRIPTION: Defines an extension function on String that uses the composed password matcher to verify if a string meets the password strength requirements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/composed_matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldBeStrongPassword() = this shouldBe passwordMatcher\n```\n\n----------------------------------------\n\nTITLE: Configuring Failure on Ignored Tests in Kotest\nDESCRIPTION: Shows how to make Kotest treat ignored tests as failures by setting the failOnIgnoredTests property to true.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/project_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val failOnIgnoredTests = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatcherResult Interface in Kotlin\nDESCRIPTION: The MatcherResult interface in Kotest, which defines methods for indicating test pass/fail and providing failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/custom.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MatcherResult {\n  fun passed(): Boolean\n  fun failureMessage(): String\n  fun negatedFailureMessage(): String\n}\n```\n\n----------------------------------------\n\nTITLE: Using File Permission and Attribute Matchers\nDESCRIPTION: Demonstrates various file matchers for checking file permissions and attributes like readable, writeable, executable, and hidden.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfile should beRadable()\nfile should beWriteable()\nfile should beExecutable()\nfile should beHidden()\n```\n\n----------------------------------------\n\nTITLE: Kafka Test Container Integration Example\nDESCRIPTION: Complete example of Kafka container setup and message producer/consumer test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KafkaTestContainerExtensionTest : FunSpec() {\n  init {\n\n    val kafka = install(TestContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n      withEmbeddedZookeeper()\n    }\n\n    test(\"should send/receive message\") {\n\n      val producer = kafka.createStringStringProducer()\n      producer.send(ProducerRecord(\"foo\", null, \"bubble bobble\"))\n      producer.close()\n\n      val consumer = kafka.createStringStringConsumer {\n        this[ConsumerConfig.MAX_POLL_RECORDS_CONFIG] = 1\n      }\n\n      consumer.subscribe(listOf(\"foo\"))\n      val records = consumer.poll(Duration.ofSeconds(100))\n      records.shouldHaveSize(1)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest Isolation Mode Basic Example in Kotest\nDESCRIPTION: Shows how InstancePerTest mode works, creating a new spec instance for every test case including outer contexts. This example demonstrates how outer contexts are executed multiple times, once for each leaf test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/isolation_mode.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tests in Constructor Lambda in Kotlin\nDESCRIPTION: Shows how to write tests in a lambda parameter in the class constructor, providing an alternative syntax for creating tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"strings.size should return size of string\" {\n    \"hello\".length shouldBe 5\n    \"hello\" should haveLength(5)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using withAssumptions in Kotest\nDESCRIPTION: Proper way to filter test cases using withAssumptions function\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/assumptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  withAssumptions(a != b) {\n    levenshtein(a, b) shouldBeGreaterThan 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary File in Kotest FunSpec\nDESCRIPTION: This snippet demonstrates how to create a temporary file using the tempfile() function in a Kotest FunSpec. The file is automatically cleaned up by Kotest after all tests in the Spec are run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/tempfile.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val file = tempfile()\n\n   test(\"a temporary file dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Exhaustive Generator from a List in Kotlin\nDESCRIPTION: Creates an exhaustive generator that contains all single-digit prime numbers. It demonstrates how to use the exhaustive() extension function on a List to create an Exhaustive<T> instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/customgens.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval singleDigitPrimes = listOf(2,3,5,7).exhaustive()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Iteration Count in Kotest Property Tests\nDESCRIPTION: This snippet demonstrates how to set the default iteration count for property tests globally and how it affects different test scenarios. It shows both global configuration and per-test specification of iteration counts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/globalconfig.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nPropertyTesting.defaultIterationCount = 123\n\n// will use 555 iterations specified in the test\nforAll<String, String>(555) { a,b -> a + b == \"$a$b\" }\n\n// will use 123 iterations from the global default\nforAll<String, String> { a,b -> a + b == \"$a$b\" }\n```\n\n----------------------------------------\n\nTITLE: Using Custom Name Function for Kotest Data Tests\nDESCRIPTION: Demonstrates using a name generation function to create test names dynamically based on input data. The function takes the test row as input and returns a formatted string.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/test_names.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData<PythagTriple>(\n    nameFn = { \"${it.a}__${it.b}__${it.c}\" },\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Short Values in Kotest\nDESCRIPTION: Functions to create arbitrary Short data generators with specified ranges and edge cases. These generators can produce regular, positive, or negative Shorts, as well as Short arrays and unsigned Short variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.short(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveShort(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.negativeShort(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.shortArray(length, content)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.uShort(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.uShortArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Byte Generators in Kotest\nDESCRIPTION: Generators for producing byte values and arrays, including signed and unsigned variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.byte(min, max)\nArb.positiveByte(min, max)\nArb.negativeByte(min, max)\nArb.byteArray(length, content)\nArb.uByte(min, max)\nArb.uByteArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Mapping Kotest Arb Values\nDESCRIPTION: Demonstrates how to transform generated values using map operation, converting integers to strings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genops.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval integerStrings: Arb<String> = Arb.int().map { it.toString() }\n```\n\n----------------------------------------\n\nTITLE: Using forAtLeast Inspector in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use the forAtLeast inspector to test that at least a specified number of elements in a collection meet certain criteria. In this example, it tests that at least 2 strings have a minimum length of 7 characters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/inspectors.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval xs = listOf(\"sam\", \"gareth\", \"timothy\", \"muhammad\")\nxs.forAtLeast(2) {\n    it.shouldHaveMinLength(7)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring failOnEmptyTestSuite in Kotest Project Config\nDESCRIPTION: Shows how to enable the failOnEmptyTestSuite setting in Kotest's project configuration to make the build fail if no tests are executed in a module. This is useful for catching scenarios where tests are being erroneously filtered out.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/fail_on_empty.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val failOnEmptyTestSuite = true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JDBC Database Container Extension in Kotlin\nDESCRIPTION: Demonstrates how to install a JDBC Database Container Extension with configuration options in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcDatabaseContainerExtension(mysql)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JunitXmlReporter in Project Config\nDESCRIPTION: Shows how to add the JunitXmlReporter to a Kotest project by implementing it in the extensions method of AbstractProjectConfig. Demonstrates configuration options for handling nested tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/junit_xml.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(\n    JunitXmlReporter(\n      includeContainers = false,\n      useTestPathAsName = true\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Blocks with xdescribe in Kotest DescribeSpec\nDESCRIPTION: Example demonstrating how to disable an entire test block and its child tests by using 'xdescribe' instead of 'describe' in a DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/xmethods.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  xdescribe(\"this block and it's children are now disabled\") {\n    it(\"will not run\") {\n      // disabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Arbitrary Generator for Custom Class in Kotest\nDESCRIPTION: Shows how to create an arbitrary generator for a custom data class by composing other arbitraries. This example uses the bind() method to generate values for each property of the Person class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/customgens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb = arbitrary {\n   val name = Arb.string(10..12).bind()\n   val age = Arb.int(21, 150).bind()\n   Person(name, age)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with WordSpec in Kotlin\nDESCRIPTION: Demonstrates WordSpec style which uses 'should' keyword with nested contexts. Shows both simple and nested test structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"String.length\" should {\n        \"return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"Hello\" When {\n        \"asked for length\" should {\n            \"return 5\" {\n                \"Hello\".length shouldBe 5\n            }\n        }\n        \"appended to Bob\" should {\n            \"return Hello Bob\" {\n                \"Hello \" + \"Bob\" shouldBe \"Hello Bob\"\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using domain objects as clues in Kotest\nDESCRIPTION: Demonstrates using a domain object as a clue with asClue, which shows the object's toString() representation in failure messages, providing rich context about the test state.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class HttpResponse(val status: Int, val body: String)\n\nval response = HttpResponse(404, \"the content\")\n\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Reporter in Kotest Project Config\nDESCRIPTION: This snippet shows how to add the HTML Reporter and JUnit XML Reporter to a Kotest project configuration. It demonstrates setting up both reporters as extensions in the AbstractProjectConfig class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/html_reporter.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override val specExecutionOrder = SpecExecutionOrder.Annotated\n\n    override fun extensions(): List<Extension> = listOf(\n        JunitXmlReporter(\n            includeContainers = false,\n            useTestPathAsName = true,\n        ),\n        HtmlReporter()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode via DSL in Kotest\nDESCRIPTION: Example showing how to set isolation mode using DSL syntax in a WordSpec test class\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/isolation_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec({\n isolationMode = IsolationMode.SingleInstance\n // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Using Testcontainers with Kotest\nDESCRIPTION: This Kotlin code snippet shows how to use Testcontainers with Kotest. It demonstrates creating a Redis container, converting it to a TestListener using the perTest() extension method, and registering it with Kotest for lifecycle management.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers_46x.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution in Kotest\nDESCRIPTION: This example shows how to configure test execution parameters in Kotest using the config function. It demonstrates setting timeout, number of invocations, parallelism, and tags for test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n   \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Test Ordering in Kotest\nDESCRIPTION: Shows how to configure tests to run in random order using TestCaseOrder.Random. The execution order of tests will be randomized each time the suite runs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RandomSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Random\n\n    init {\n      \"foo\" {\n        // This test may run first or second\n      }\n\n      \"bar\" {\n        // This test may run first or second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Matcher in Kotlin\nDESCRIPTION: Demonstrates how to create a custom matcher that checks if a string contains 'foo' and its extension functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun containFoo() = object : Matcher<String> {\n  override fun test(value: String) = Result(value.contains(\"foo\"), \"String $value should include foo\", \"String $value should not include foo\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should containFoo()\n\"hello bar\" shouldNot containFoo()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldContainFoo() = this should containFoo()\nfun String.shouldNotContainFoo() = this shouldNot containFoo()\n```\n\n----------------------------------------\n\nTITLE: Asserting Instant Properties in Kotlin with Kotest\nDESCRIPTION: These assertions check properties of Instant objects, including comparisons between instants and verifying if an instant falls within a specific range. They allow for precise timestamp comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeBefore(anotherInstant)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Name Whitespace in Kotest\nDESCRIPTION: Enables removal of excess whitespace from multiline test names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/project_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val testNameRemoveWhitespace = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Test Filtering in Build Script\nDESCRIPTION: This snippet demonstrates how to include all tests from a specific package using Gradle's test filtering in the build script. It uses the 'filter' block within the 'tasks.test' configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/gradle.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.test {\n    filter {\n        //include all tests from package\n        includeTestsMatching(\"com.somepackage.*\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Future Assertions in Kotest\nDESCRIPTION: Methods for asserting conditions on Future objects including cancellation status\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nfuture.shouldBeCancelled()\n```\n\n----------------------------------------\n\nTITLE: Configuring LogExtension in Kotest AbstractProjectConfig\nDESCRIPTION: This snippet demonstrates how to set up logging in Kotest by configuring the LogLevel and implementing a LogExtension in your project configuration. The example shows a simple implementation that prints logs to the console.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/logging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n    override val logLevel = LogLevel.Error\n    override fun extensions() = listOf(\n        object : LogExtension {\n            override suspend fun handleLogs(testCase: TestCase, logs: List<LogEntry>) {\n                logs.forEach { println(it.level.name + \" - \" + it.message) }\n            }\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Validated Matchers in Kotest with Arrow\nDESCRIPTION: Matchers for asserting the state and value of Validated types from Arrow. These matchers allow checking if a Validated is Valid or Invalid, and verifying its contained value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/arrow.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nvalidated.shouldBeValid()    // Asserts that the validated is of type Valid and returns the Valid value\nvalidated.shouldBeValid(v)   // Asserts that the validated is of type Valid with specific value v\nvalidated.shouldBeInvalid()  // Asserts that the validated is of type Invalid and returns the Invalid value\nvalidated.shouldBeInvalid(v) // Asserts that the validated is of type Invalid with specific value v\n```\n\n----------------------------------------\n\nTITLE: Implementing ConstantNowTestListener in Kotest Test Classes\nDESCRIPTION: This snippet shows how to register the ConstantNowTestListener in a Kotest test class to fix the time for all tests in that class. This approach applies the fixed time to all test cases without needing to wrap each test case in a withConstantNow block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/instant.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n  override fun listeners() = listOf(\n    ConstantNowTestListener(foreverNow)\n  )\n```\n\n----------------------------------------\n\nTITLE: Adjusting Maximum Discard Percentage in Kotest (Kotlin)\nDESCRIPTION: Demonstrates how to adjust the maximum allowed discard percentage using PropTestConfig to allow for a higher rate of filtered inputs in property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/assumptions.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<Int, Int>(PropTestConfig(maxDiscardPercentage = 55)) { a, b ->\n  withAssumptions(a % 2 == 0) {\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching TestResult in Kotlin\nDESCRIPTION: Demonstrates how to match TestResult types in Kotlin after the deprecation of TestStatus enum. This snippet shows the recommended way to check test results in AfterTestListener implementations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_5.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (result) {\n  is TestResult.Success -> ...\n  is TestResult.Error -> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlockHound Mode in Code Section\nDESCRIPTION: Demonstrates how to change BlockHound mode for a specific section of code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/blockhound.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"allow blocking section\") {\n   // ...\n   withBlockHoundMode(BlockHoundMode.DISABLED) {\n     blockInNonBlockingContext()\n   }\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using contain Matcher for Maps in KotlinTest\nDESCRIPTION: Demonstrates the new contain matcher for maps in KotlinTest. It shows how to assert that a map contains a specific key-value pair.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_59\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should contain(1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Spring TestContextManager in Kotest\nDESCRIPTION: Shows how to access the Spring TestContextManager within a Kotest test using the testContextManager() extension method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/spring.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"provide the test context manager\" {\n         println(\"The context is \" + testContextManager().testContext)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequential Test Ordering in Kotest\nDESCRIPTION: This snippet demonstrates how to configure sequential test ordering in a Kotest StringSpec. Tests will run in the order they are defined in the spec file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SequentialSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Sequential\n\n    init {\n      \"foo\" {\n        // I run first as I'm defined first\n      }\n\n      \"bar\" {\n        // I run second as I'm defined second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Blocks with xdescribe in Kotest DescribeSpec\nDESCRIPTION: This snippet demonstrates how to use 'xdescribe' to disable an entire test block and its nested tests in a Kotest DescribeSpec. The disabled block will not be executed during test runs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/xmethods.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  xdescribe(\"this block and it's children are now disabled\") {\n    it(\"will not run\") {\n      // disabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexicographic Test Ordering in Kotest\nDESCRIPTION: This snippet illustrates how to implement lexicographic test ordering in a Kotest StringSpec. Tests are executed in alphabetical order based on their names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_ordering.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LexicographicSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Lexicographic\n\n    init {\n      \"foo\" {\n        // I run second as bar < foo\n      }\n\n      \"bar\" {\n        // I run first as bar < foo\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Specific Matchers in Kotlin\nDESCRIPTION: Specialized matchers for common HTML attributes and structures including id, class, src, and href attributes. These matchers provide convenient ways to assert common HTML element properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/jsoup.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nelement.shouldHaveId(id)\nelement.shouldHaveClass(class)\nelement.shouldHaveSrc(src)\nelement.shouldHaveHref(href)\nelement.shouldHaveElementWithId(id)\nelement.shouldHaveChildWithClass(id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Case Execution in Kotest ShouldSpec\nDESCRIPTION: Demonstrates how to configure a test case in Kotest using the config function. It sets the test to run 10 times over 2 threads.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pitest Kotest Extension Dependency in Maven\nDESCRIPTION: Adds the Kotest Pitest extension module to the project's test dependencies in Maven POM file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/pitest.md#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  ... the other Kotest dependencies like kotest-runner-junit5\n  <dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-pitest</artifactId>\n    <version>${kotest-extensions-pitest.version}</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Converting Docker Container to Kotest TestListener\nDESCRIPTION: Demonstrates how to convert a TestContainer into a Kotest TestListener using perTest() extension method. Shows setup of a Redis container that will be started before each test and stopped after test completion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling TestDispatcher for All Tests in a Kotest Module\nDESCRIPTION: This code shows how to enable TestDispatcher for all tests in a Kotest module by setting coroutineTestScope to true in the ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override var coroutineTestScope = true\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Even Numbers with Arb in Kotlin\nDESCRIPTION: Demonstrates how to use the filter method on an Arb to generate only even integers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/assumptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\n```\n\n----------------------------------------\n\nTITLE: Long Value Assertions in Kotlin with Kotest\nDESCRIPTION: Extension method for asserting that a long value is equal to zero.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Implementing WithDataTestName Interface for Custom Test Names\nDESCRIPTION: This snippet shows how to implement the WithDataTestName interface on a data class to provide custom test names through the dataTestName() function, which will be used instead of toString().\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/test_names.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int) : WithDataTestName {\n  override fun dataTestName() = \"wibble $a, $b, $c wobble\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Element Membership in Kotest\nDESCRIPTION: Verifies if elements are contained in collections using various membership checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/collections.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nvalue.shouldBeOneOf(collection)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainAnyOf(collection)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nvalue.shouldBeIn(collection)\n```\n\n----------------------------------------\n\nTITLE: Generating Boolean Values with Kotest Arbitrary and Exhaustive\nDESCRIPTION: This snippet shows how to create generators for boolean values, including arrays of booleans. It demonstrates both arbitrary and exhaustive generation methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genslist.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.boolean()\nArb.booleanArray(length, content)\nExhaustive.boolean()\n```\n\n----------------------------------------\n\nTITLE: Using withBlockHoundMode to Change Detection Mode for Code Sections\nDESCRIPTION: Shows how to temporarily change the BlockHound mode for a specific section of code using the withBlockHoundMode function. This allows for more granular control over when BlockHound is active.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/blockhound.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"allow blocking section\") {\n   // ...\n   withBlockHoundMode(BlockHoundMode.DISABLED) {\n     blockInNonBlockingContext()\n   }\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FreeSpec Testing Style in Kotest\nDESCRIPTION: FreeSpec allows nesting tests at arbitrary levels of depth using the minus (-) symbol for outer tests and plain strings for leaf tests. This provides great flexibility in organizing test hierarchies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FreeSpec({\n    \"String.length\" - {\n        \"should return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n    \"containers can be nested as deep as you want\" - {\n        \"and so we nest another container\" - {\n            \"yet another container\" - {\n                \"finally a real test\" {\n                    1 + 1 shouldBe 2\n                }\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Manipulating TestClock in Kotlin\nDESCRIPTION: Demonstrates how to advance the TestClock by a specific duration. This method mutates the internal state of the clock.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/clock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclock.plus(6.minutes)\n```\n\n----------------------------------------\n\nTITLE: Adding a Listener to 'eventually' in Kotlin\nDESCRIPTION: Demonstrates how to add a listener to 'eventually' that will be called on each failed iteration. The listener receives the current iteration count and the exception that caused the failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/eventually.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  listener = { k, throwable -> println(\"Iteration $k, with cause $throwable\") }\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Test Factory with Lifecycle Callbacks\nDESCRIPTION: Example of implementing test factory with beforeTest callback that only applies to tests within the factory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_factories.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval factory1 = funSpec {\n  beforeTest {\n     println(\"Executing $it\")\n  }\n  test(\"a\") {  }\n  test(\"b\") {  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LifecycleExample : FunSpec({\n   include(factory1)\n   test(\"c\")\n   test(\"d\")\n})\n```\n\n----------------------------------------\n\nTITLE: Unique Array Items Validation\nDESCRIPTION: Shows how to create a schema that ensures array items are unique using the uniqueItems keyword.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/json/schema.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval uniqueArray = jsonSchema {\n  array(uniqueItems = true) { number() }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Test Configuration via Property\nDESCRIPTION: Shows how to set default test configuration by assigning to the defaultTestConfig property in the init block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_case_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n\n    defaultTestConfig = TestCaseConfig(enabled = true, invocations = 3)\n\n    test(\"FunSpec should support Spec config syntax in init{} block\") {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Exception Handling in Kotlin\nDESCRIPTION: Using a function to dynamically determine which exceptions to handle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/eventually.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  expectedExceptions = { it is UserNotFoundException }\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Reasons for Disabled Tests with EnabledOrReasonIf in Kotlin\nDESCRIPTION: This snippet demonstrates the use of 'enabledOrReasonIf' to provide a reason when disabling a test. It returns an Enabled object that can contain a skip reason, which is passed to test reports.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/config_enabled.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: (TestCase) -> Enabled = {\n   if (it.name.testName.startsWith(\"danger\") && isFriday())\n      Enabled.disabled(\"It's a friday, and we don't like danger!\")\n   else\n      Enabled.enabled\n}\n\n\"danger Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Multiple Environment Variables\nDESCRIPTION: Example of setting multiple environment variables simultaneously using a map or list of pairs with the withEnvironment function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(mapOf(\"FooKey\" to \"BarValue\", \"BarKey\" to \"FooValue\")) {\n  // Use FooKey and BarKey\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Container with Environment Variables in Kotlin\nDESCRIPTION: Demonstrates how to configure a Kafka container with environment variables to enable dynamic topic creation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n  withEnv(\"KAFKA_AUTO_CREATE_TOPICS_ENABLE\", \"true\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Security Manager Listener in Kotlin Tests\nDESCRIPTION: Shows how to use the SecurityManagerListener to apply a custom security manager at the Spec level in Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SecurityManagerListener(myManager))\n\n    init {\n      // Use my security manager\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Failed assertion error message example\nDESCRIPTION: Shows the error message produced by a failed basic assertion. This demonstrates how Kotest formats assertion failures with expected and actual values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nexpected: \"sksamuel\" but was: \"sam@myemailaddress.com\"\n```\n\n----------------------------------------\n\nTITLE: Eventually Configuration Block Usage in Kotlin\nDESCRIPTION: Example showing how to use eventually with a configuration block to set multiple options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/concurrency/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5000\n  interval = 1000.fixed()\n}) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Name Whitespace Handling\nDESCRIPTION: Demonstrates how to handle multiline test names and control whitespace in test output.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/project_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n\"\"\"this is\n   my test case\"\"\" {\n  // test here\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val testNameRemoveWhitespace = true\n}\n```\n\n----------------------------------------\n\nTITLE: Manual filtering with conditional logic in property tests\nDESCRIPTION: Shows a simple if/else approach to avoid testing undesired inputs, which can be error-prone in more complex scenarios as it might filter out all inputs unintentionally.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/assumptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  if (a != b)\n    levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Float Values in Kotlin with Kotest\nDESCRIPTION: Produces an Arb that generates Float values within a specified range, including important edge cases if they fall within the range. Useful for comprehensive testing of float-based calculations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.float(min, max)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Classifications in Property Testing\nDESCRIPTION: Shows how to use multiple classify calls in property testing to track different aspects of generated values, including using both single and dual label forms together.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Gen.int()) { a ->\n    classify(a == 0, \"zero\")\n    classify(a % 2 == 0, \"even number\", \"odd number\")\n    a + a == 2 * a\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Size and Element Validation in Kotlin Kotest\nDESCRIPTION: Methods for validating collection size and single element presence.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/collections.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveSingleElement(element)\ncollection.shouldHaveSingleElement { block }\ncollection.shouldHaveSize(length)\ncollection.shouldBeSingleton()\ncollection.shouldBeSingleton { block }\n```\n\n----------------------------------------\n\nTITLE: Setting Tag Expressions at Runtime in Kotest\nDESCRIPTION: Shows how to set tag expressions programmatically at runtime using the RuntimeTagExtension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tags.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nRuntimeTagExpressionExtension.expression = \"Linux & !Database\"\n```\n\n----------------------------------------\n\nTITLE: Spring Constructor Injection in KotlinTest\nDESCRIPTION: Demonstration of Spring constructor injection support in KotlinTest using SpringAutowireConstructorExtension, allowing dependencies to be injected directly into test class constructors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec({\n  \"SpringListener\" should {\n    \"have autowired the service\" {\n      service.repository.findUser().name shouldBe \"system_user\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Discovery Extension Functions Overview\nDESCRIPTION: Two main functions in DiscoveryExtension: afterScan for managing discovered spec classes and instantiate for controlling class instantiation. The afterScan function filters or modifies the list of discovered classes, while instantiate handles the creation of spec class instances with custom constructor requirements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/discovery_extension.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface DiscoveryExtension {\n  fun afterScan(classes: List<KClass<Spec>>): List<KClass<Spec>>\n  fun instantiate(kclass: KClass<Spec>): Spec?\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Tests with xit in Kotest DescribeSpec\nDESCRIPTION: This example shows how to use 'xit' to disable a specific nested test within an enabled describe block in a Kotest DescribeSpec. The disabled test will be skipped, while other tests in the same block will still run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/xmethods.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  describe(\"this block is enabled\") {\n    xit(\"will not run\") {\n      // disabled test\n    }\n    it(\"will run\") {\n       // enabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Blocks with xdescribe in Kotest DescribeSpec\nDESCRIPTION: This snippet demonstrates how to use the 'xdescribe' method to disable an entire test block and its nested tests in a Kotest DescribeSpec. The prefix 'x' is used to indicate that the block should be skipped during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/xmethods.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  xdescribe(\"this block and it's children are now disabled\") {\n    it(\"will not run\") {\n      // disabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using AnnotationSpec with Expected Exception in Kotlin\nDESCRIPTION: AnnotationSpec now supports configuring expected exceptions. This allows specifying expected exceptions for test cases in a JUnit-style annotation format.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyTest : AnnotationSpec() {\n  @Test\n  @Expected(IllegalArgumentException::class)\n  fun testExpectedException() {\n    // Test code that should throw IllegalArgumentException\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shrinker for a Coordinate Generator in Kotest\nDESCRIPTION: Example of implementing a custom Shrinker for a Coordinate data class. The shrinker defines how to simplify coordinate values by returning the four neighboring coordinates when shrinking is needed during test failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/shrinking.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Coordinate(val x: Int, val y: Int)\n\nclass CoordinateTest : FunSpec({\n    context(\"Coordinate Transformations\") {\n        // Shrinker takes the four neighbouring coordinates\n        val coordinateShrinker = Shrinker<Coordinate> { c ->\n            listOf(\n                Coordinate(c.x - 1, c.y),\n                Coordinate(c.x, c.y - 1),\n                Coordinate(c.x + 1, c.y),\n                Coordinate(c.x, c.y + 1),\n            )\n        }\n        val coordinateArb = arbitrary(coordinateShrinker) {\n            Coordinate(Arb.nonNegativeInt().bind(), Arb.nonNegativeInt().bind())\n        }\n\n        test(\"Coordinates are always positive after transformation\") {\n            coordinateArb.checkAll {\n                transform(it).x shouldBeGreaterThanOrEqualTo 0\n                transform(it).y shouldBeGreaterThanOrEqualTo 0\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Lexicographic Test Ordering in Kotest\nDESCRIPTION: This snippet demonstrates how to configure lexicographic test ordering, where tests are executed alphabetically based on their names. This creates a predictable but name-dependent execution order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_ordering.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LexicographicSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Lexicographic\n\n    init {\n      \"foo\" {\n        // I run second as bar < foo\n      }\n\n      \"bar\" {\n        // I run first as bar < foo\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing valid data with Konform matchers in Kotest\nDESCRIPTION: Shows how to use the shouldBeValid matcher to assert that a UserProfile instance passes validation rules defined in the validator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/konform.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval alice = UserProfile(\"Alice\", 25)\nvalidateUser shouldBeValid user1\n```\n\n----------------------------------------\n\nTITLE: Accessing Spring Test Context Manager\nDESCRIPTION: Demonstrates how to access the Spring TestContextManager within a Kotest test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/spring.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"provide the test context manager\" {\n         println(\"The context is \" + testContextManager().testContext)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Weighted Choice Generation in Kotlin with Kotest\nDESCRIPTION: Employs Arb.choose() to generate values based on specified weights. For example, 'A' with weight 1 and 'B' with weight 2 will generate 'A' 33% of the time and 'B' 66% of the time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.choose(pairs)\n```\n\n----------------------------------------\n\nTITLE: Using Exception Predicate Function with Eventually in Kotlin\nDESCRIPTION: Demonstrates using a predicate function to dynamically determine which exceptions should be suppressed during eventually execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/eventually.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  expectedExceptions = { it is UserNotFoundException }\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Field Comparison in Kotlin with Kotest\nDESCRIPTION: Matchers for comparing objects by including or excluding specific fields using Kotlin property references (KProperty).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToUsingFields(other: T, vararg properties: KProperty<*>)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToIgnoringFields(other: T, vararg properties: KProperty<*>)\n```\n\n----------------------------------------\n\nTITLE: Creating Password Matcher Using Logical Sum\nDESCRIPTION: Shows how to create a composed matcher using Matcher.any where the matcher passes if any of the conditions are met.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/composed_matchers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval passwordMatcher = Matcher.any(\n   containADigit(), contain(Regex(\"[a-z]\")), contain(Regex(\"[A-Z]\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Integer Number Generation in Kotest\nDESCRIPTION: Functions for generating Int numbers with various constraints including regular, positive, negative, non-negative, non-positive, and array variants. Each function returns an Arb that produces numbers within specified ranges with appropriate edge cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.int(min, max)\nArb.positiveInt(min, max)\nArb.nonNegativeInt(min, max)\nArb.negativeInt(min, max)\nArb.nonPositiveInt(min, max)\nArb.intArray(length, content)\nArb.uInt(min, max)\nArb.uIntArray(length, content)\nExhaustive.ints(range)\nArb.multiple(k, max)\nArb.factor(k)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Container in Kotlin\nDESCRIPTION: Shows how to create a MySQL container using Testcontainers in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n  startupAttempts = 1\n  withUrlParam(\"connectionTimeZone\", \"Z\")\n  withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Support Tags with System Properties (Kotlin DSL)\nDESCRIPTION: Gradle configuration in Kotlin DSL to propagate system properties to test executors, required for tag functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tags.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().associate { it.key.toString() to it.value }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default TestConfig via Property Assignment\nDESCRIPTION: Shows how to set default test configuration using property assignment in the init block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_case_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n\n    defaultTestConfig = TestCaseConfig(enabled = true, invocations = 3)\n\n    test(\"FunSpec should support Spec config syntax in init{} block\") {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Per Test Mode Example in Kotest\nDESCRIPTION: Shows InstancePerTest mode where a new instance is created for each test including contexts\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/isolation_mode.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Enum Constants in Kotlin using Kotest\nDESCRIPTION: Randomly selects constants from a given enum type.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.enum<T>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dispatcher Globally via ProjectConfig\nDESCRIPTION: Demonstrates how to enable TestDispatcher globally for all tests in a module using ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override var testCoroutineDispatcher = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using System Environment Extension in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the System Environment Extension to simulate system environment behavior in Kotest tests. It shows how to override environment variables for a specific scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(\"FooKey\", \"BarValue\") {\n    System.getenv(\"FooKey\") shouldBe \"BarValue\" // System environment overridden!\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SpringExtension Per Test Class\nDESCRIPTION: Demonstrates how to register the SpringExtension for a specific test class rather than globally across all tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/spring.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : FunSpec() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging Project-Wide in Kotest\nDESCRIPTION: Example showing how to enable coroutine debugging for all tests in a project by configuring it in the ProjectConfig class. This applies the debug probes setting globally to all tests across the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val coroutineDebugProbes = true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Until Usage with Duration in Kotlin Tests\nDESCRIPTION: Demonstrates basic usage of the until function with a 5-second duration to test message broker reception. The function polls repeatedly until the condition is met or timeout occurs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/until.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Matchers as Extension Functions\nDESCRIPTION: Shows the new extension function style for matchers in Kotest 3.1.x, which allows better IDE discovery and is the preferred approach going forward.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldExist()\n\nor\n\nlistOf(1, 2).shouldContainNull()\n```\n\n----------------------------------------\n\nTITLE: Using Password Matcher\nDESCRIPTION: Examples of using the password matcher to validate strong and weak passwords.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/composed_matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n\"StrongPassword123\".shouldBeStrongPassword()\n\"WeakPassword\".shouldBeStrongPassword() // would fail\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML-Specific Attributes with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers focus on HTML-specific attributes and element relationships, such as id, class, src, href, and child elements with specific properties. They are part of the kotlintest-assertions-jsoup library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/jsoup.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveId(id)\nelement.shouldHaveClass(class)\nelement.shouldHaveSrc(src)\nelement.shouldHaveHref(href)\nelement.shouldHaveElementWithId(id)\nelement.shouldHaveChildWithClass(id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Container with Environment Variables in Kotlin\nDESCRIPTION: Demonstrates how to configure a Kafka container with environment variables using TestContainerExtension in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval kafka = install(TestContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n  withEnv(\"KAFKA_AUTO_CREATE_TOPICS_ENABLE\", \"true\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin for JUnit Tests\nDESCRIPTION: This XML snippet shows how to configure the Maven Surefire plugin for running JUnit tests. It's required for using Kotest with Maven.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/setup.mdx#2025-04-13_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency (Maven)\nDESCRIPTION: Adds the Kotest JUnit5 runner dependency to a Maven project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/setup.mdx#2025-04-13_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-runner-junit5</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring TestDispatcher for Individual Test in Kotest\nDESCRIPTION: Shows how to enable TestDispatcher for a single test using coroutineTestScope configuration\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineTestScope = true) {\n         // this test will run with a test dispatcher\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Seed for Reproducible Property Tests in Kotlin\nDESCRIPTION: This example shows how to set a specific seed for a property test to ensure reproducible results. This is useful for creating regression tests from previously failed tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String>(PropTestConfig(seed = 127305235)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing WithDataTestName Interface for Custom Test Names in Kotest\nDESCRIPTION: This snippet demonstrates how to implement the WithDataTestName interface to provide custom test names in Kotest. The dataTestName() function is used to generate the test name for each data instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/test_names.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int) : WithDataTestName {\n  override fun dataTestName() = \"wibble $a, $b, $c wobble\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with 'x' Variants in Kotest FunSpec\nDESCRIPTION: Illustrates how to disable individual tests or entire contexts using the new 'x' variants in Kotest's FunSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.1.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFunSpec : FunSpec({\n  xtest(\"a disabled test\") {\n    // this test will not be invoked\n  }\n  xcontext(\"this context is disabled\") {\n     test(\"and so this test is by extension\") {\n     }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Pair Instances from Arbitraries in Kotlin\nDESCRIPTION: Generates Pair instances where each value of the pair is drawn from two provided arbitrary generators. Useful for testing functions that take pairs as parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.pair(arb1, arb2)\n```\n\n----------------------------------------\n\nTITLE: Generating Random List Permutations in Kotlin with Kotest\nDESCRIPTION: Utilizes Arb.shuffle() to generate random permutations of a given list. For example, shuffling [1,2,3] could produce [3,1,2], [1,3,2], etc.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.shuffle(list)\n```\n\n----------------------------------------\n\nTITLE: Implementing Spec-Level Fail Fast in Kotest\nDESCRIPTION: Example demonstrating how to enable fail-fast at the spec level, affecting all test contexts within the specification. Any test failure will cause all remaining tests to be skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/fail_fast.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n\n      failfast = true\n\n      context(\"context with fail fast enabled at the spec level\") {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Order Annotation for Spec Execution Order in Kotest\nDESCRIPTION: This example demonstrates how to use the @Order annotation to control the execution order of spec classes. Lower values are executed first, and classes without the annotation are considered last. This ordering method only works on the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/spec_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Order(1)\nclass FooTest : FunSpec() { }\n\n@Order(0)\nclass BarTest: FunSpec() {}\n\n@Order(1)\nclass FarTest : FunSpec() { }\n\nclass BooTest : FunSpec() {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Iterations in Kotest Property Tests\nDESCRIPTION: This snippet demonstrates how to override the default iteration count globally and shows how property tests use either the global default or a locally specified value. It illustrates that tests with explicitly defined iteration counts will use their specified value, while others will fall back to the global default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/globalconfig.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nPropertyTesting.defaultIterationCount = 123\n\n// will use 555 iterations specified in the test\nforAll<String, String>(555) { a,b -> a + b == \"$a$b\" }\n\n// will use 123 iterations from the global default\nforAll<String, String> { a,b -> a + b == \"$a$b\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Task Dependencies\nDESCRIPTION: Modifies the test task to automatically generate Jacoco reports upon completion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/integrations/jacoco.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  ...\n  finalizedBy(tasks.jacocoTestReport)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Reporter and JUnit XML Reporter in Kotest Project Config\nDESCRIPTION: This snippet demonstrates how to add the HTML Reporter and JUnit XML Reporter as extensions in a Kotest project configuration. It sets up the necessary listeners to generate both XML and HTML test reports.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/html_reporter.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override val specExecutionOrder = SpecExecutionOrder.Annotated\n\n    override fun extensions(): List<Extension> = listOf(\n        JunitXmlReporter(\n            includeContainers = false,\n            useTestPathAsName = true,\n        ),\n        HtmlReporter()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Composed Person Matcher in Kotlin Tests with Kotest\nDESCRIPTION: This snippet demonstrates how to use the composed person matcher in actual test cases, showing both a passing and a failing example.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/composed_matchers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nPerson(\"John\", 21, Address(\"Warsaw\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21)\nPerson(\"Sam\", 22, Address(\"Chicago\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21) // would fail\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from Arbitraries using Next\nDESCRIPTION: Demonstrates how to use the next() method to get a single value from an Arb generator, either with the default Random instance or with a custom Random source.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genops.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval arbA: Arb<A> = ...\nval a = arbA.next() // use Random.Default\nval a2 = arbA.next(rs) // pass in Random\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Test Case in FunSpec (Kotlin)\nDESCRIPTION: This snippet shows how to add tags to a test case in a FunSpec using the config function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_case_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Isolation Mode Configuration\nDESCRIPTION: Shows how to configure isolation mode globally using ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/isolation_mode.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig: AbstractProjectConfig() {\n   override val isolationMode = IsolationMode.InstancePerLeaf\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up General Container Extension\nDESCRIPTION: Example of using the ContainerExtension for a Redis container.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval container = install(ContainerExtension(\"redis:5.0.3-alpine\")) {\n  startupAttempts = 1\n  withExposedPorts(6379)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Broker Message Reception with Fibonacci Interval in Kotlin\nDESCRIPTION: This snippet illustrates the use of 'until' function with a Fibonacci interval. It starts checking every 100 milliseconds and increases the interval following the Fibonacci sequence, for up to 5 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/until.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 100.milliseconds.fibonacci()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Assertions Dependency in Gradle\nDESCRIPTION: Gradle dependency declaration for including Ktor assertions in Kotest projects. The dependency should be added to the project's build.gradle file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation(\"io.kotest.extensions:kotest-assertions-ktor:version\")\n```\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation \"io.kotest.extensions:kotest-assertions-ktor:version\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AllureTestReporter in Kotest (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to wire in the AllureTestReporter class globally using Kotest's project config. It creates a custom configuration class that extends AbstractProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/allure.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig {\n    override fun listeners() = listOf(AllureTestReporter())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Test Listeners in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates how to create and use a PropTestListener with Kotest's checkAll function. It shows the setup of a listener with beforeTest and afterTest methods, and how to incorporate it into a PropTestConfig object for use in a property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.1.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = object : PropTestListener {\n  override suspend fun beforeTest() {\n    println(\"Startup\")\n  }\n\n  override suspend fun afterTest() {\n    println(\"Shutdown\")\n  }\n}\n\nval propConfig = PropTestConfig(listeners = listOf(listener))\n\ncheckAll<String, String>(10, propConfig) { a, b ->\n  a.length + b.length shouldBe (a + b).length\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Time Properties in Kotlin with Kotest\nDESCRIPTION: These assertions validate various properties of time objects, including comparisons between times, checking specific time components, and verifying time ranges. They allow for detailed verification of time-related information.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameMinutesAs(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameSecondsAs(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameNanosAs(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldBeBefore(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldBeAfter(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Callbacks in Kotest DescribeSpec\nDESCRIPTION: Shows how to use the new beforeEach, beforeContainer, and beforeTest callbacks in a Kotest DescribeSpec to perform setup actions for different test scopes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.2.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CallbacksTest : DescribeSpec({\n\n   beforeEach {\n      println(\"Test: \" + it.displayName)\n   }\n\n   beforeContainer {\n      println(\"Container: \" + it.displayName)\n   }\n\n   beforeTest {\n      println(\"All: \" + it.displayName)\n   }\n\n   describe(\"I am a container scope\") {\n      it(\"And I am a test scope\") { }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Test Configuration via Function Override\nDESCRIPTION: Example of setting default test configuration for all tests in a spec by overriding defaultTestCaseConfig function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_case_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Option Type Generators\nDESCRIPTION: Generators for Arrow's Option type, including exhaustive and arbitrary generators for None and Some instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.option(a)\nExhaustive.none(a)\nArb.option(arb)\nArb.some(arb)\nArb.none()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom String Matcher\nDESCRIPTION: Example showing how to create a custom matcher for strings that checks for 'foo' substring.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nfun containFoo() = object : Matcher<String> {\n  override fun test(value: String) = MatcherResult(value.contains(\"foo\"), \"String $value should include foo\", \"String $value should not include foo\")\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Poll Interval in Continually Function\nDESCRIPTION: Shows how to use the 'continually' function with a custom poll interval. In this example, the code block is executed every 5 seconds for a total duration of 60 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/continually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds, 5.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field-by-Field Comparison Matchers in Kotlin\nDESCRIPTION: These matchers are used for field-by-field comparison between objects in Kotlin, allowing for equality checks based on all fields or with options to ignore private fields.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFields(other: T)\nany.shouldBeEqualToComparingFields(other: T, ignorePrivateFields: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedded Kafka Listener - Basic Setup\nDESCRIPTION: Shows how to register the embedded Kafka listener in a Kotest FunSpec test class using two different initialization approaches.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/kafka.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n  listener(embeddedKafkaListener)\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec() {\n  init {\n    listener(embeddedKafkaListener)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/Native with Kotest Engine\nDESCRIPTION: Sets up Kotlin/Native targets and adds the Kotest engine dependency to the commonTest source set for native platform testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/setup.mdx#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    linuxX64() // can add any supported native targets such as linux, mac, windows etc\n  }\n}\nsourceSets {\n  val commonTest by getting {\n    dependencies {\n      implementation(\"io.kotest:kotest-framework-engine:$version\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Generator Property Testing in Kotest\nDESCRIPTION: Demonstrates property testing with explicitly specified generators using Gen.string() for string value generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n  init {\n\n    \"String size\" {\n      forAll(Gen.string(), Gen.string(), { a: String, b: String ->\n        (a + b).length == a.length + b.length\n      })\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using KotlinX DateTime Matchers in Kotest\nDESCRIPTION: Example of using the new KotlinX DateTime matchers to verify that a LocalDateTime has a specific hour value. This demonstrates the functionality provided by the kotest-assertions-kotlinx-time module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.2.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval date = LocalDateTime(2019, 2, 15, 12, 10, 0, 0)\ndate.shouldHaveHour(12)\n```\n\n----------------------------------------\n\nTITLE: Kafka Container Setup\nDESCRIPTION: Example of setting up a Kafka container with embedded Zookeeper\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval kafka = install(TestContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n  withEmbeddedZookeeper()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Regex Matchers in Kotest\nDESCRIPTION: Assertion matchers for Regex objects that verify patterns and options, including equality comparison between regex objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldBeRegex(anotherRegex)\nregex.shouldHavePattern(regexPattern)\nregex.shouldHaveExactRegexOptions(regexOptions)\nregex.shouldIncludeRegexOption(regexOption)\nregex.shouldIncludeRegexOptions(regexOptions)\n```\n\n----------------------------------------\n\nTITLE: Asserting Time Component Properties in Kotlin with Kotest\nDESCRIPTION: Extension functions for time objects that verify specific time components (hours, minutes, seconds, nanos) and perform temporal comparisons between time objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameMinutesAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameSecondsAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameNanosAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeBefore(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeAfter(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Adjusting the TestClock Time in Kotlin\nDESCRIPTION: Demonstrates how to manipulate the TestClock by advancing time using the plus method. The clock is mutable, so calling these methods changes its internal state.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/clock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclock.plus(6.minutes)\n```\n\n----------------------------------------\n\nTITLE: Using Infix Style Matchers in KoTest\nDESCRIPTION: Examples of using the infix style matchers in KoTest for file existence and list content verification. This style remains supported alongside the new extension function style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfile should exist()\n\nor\n\nlistOf(1, 2) should containNull()\n```\n\n----------------------------------------\n\nTITLE: Multiple Tests with Shared Mocks Issue\nDESCRIPTION: Shows the problem that occurs when multiple tests share the same mock instance without proper cleanup.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/integrations/mocks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n    test(\"Saves to repository as well\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Compiler Assertions Dependency\nDESCRIPTION: Gradle dependency configuration to add the kotest-assertions-compiler extension to your project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/compiler.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-assertions-compiler:${version}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode via DSL in Kotest\nDESCRIPTION: Example showing how to set isolation mode using DSL syntax in a WordSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/isolation_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec({\n isolationMode = IsolationMode.SingleInstance\n // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions with Traditional Syntax\nDESCRIPTION: Example of using assertSoftly to collect multiple assertions and report them together after execution completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nassertSoftly {\n  person.name shouldBe \"sam\"\n  person.age shouldBe 99\n  person.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure Test Reporter in Kotest\nDESCRIPTION: Implementation of Kotest project configuration to enable Allure test reporting\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/allure.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig {\n    override fun listeners() = listOf(AllureTestReporter())\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Long Values in Kotest\nDESCRIPTION: Method for asserting that a long value is zero in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nlong.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Integer Matchers in Kotlin with Kotest\nDESCRIPTION: Illustrates matchers for integer comparisons, range checks, and parity assertions in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nint.shouldBeBetween(x, y)\nint.shouldBeLessThan(n)\nint.shouldBeLessThanOrEqual(n)\nint.shouldBeGreaterThan(n)\nint.shouldBeGreaterThanOrEqual(n)\nint.shouldBeEven()\nint.shouldBeOdd()\nint.shouldBeInRange(range)\nint.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Regex Assertions in Kotlin with Kotest\nDESCRIPTION: Matchers for comparing and validating regular expressions, including pattern comparison, regex options validation, and option inclusion checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldBeRegex(anotherRegex)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldHavePattern(regexPattern)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldHaveExactRegexOptions(regexOptions)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldIncludeRegexOption(regexOption)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldIncludeRegexOptions(regexOptions)\n```\n\n----------------------------------------\n\nTITLE: Mock State Issue Example\nDESCRIPTION: Example demonstrating the issue with mock state persistence between tests when using shared mocks in Kotest. Shows how verification can fail due to accumulated calls.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/integrations/mocks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n    test(\"Saves to repository as well\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing PropTestListener for Property Tests in Kotlin\nDESCRIPTION: This example demonstrates how to create and use a PropTestListener with property tests in Kotest. The listener implements setup and teardown methods that run before and after each property test execution, similar to test lifecycle hooks in regular tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.1.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = object : PropTestListener {\n  override suspend fun beforeTest() {\n    println(\"Startup\")\n  }\n\n  override suspend fun afterTest() {\n    println(\"Shutdown\")\n  }\n}\n\nval propConfig = PropTestConfig(listeners = listOf(listener))\n\ncheckAll<String, String>(10, propConfig) { a, b ->\n  a.length + b.length shouldBe (a + b).length\n}\n```\n\n----------------------------------------\n\nTITLE: Using FeatureSpec in Kotlin for Kotest\nDESCRIPTION: Demonstration of FeatureSpec in Kotest, which uses 'feature' and 'scenario' keywords similar to Cucumber. It shows basic usage and how to disable tests using 'xfeature' and 'xscenario'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"the can of coke\") {\n        scenario(\"should be fizzy when I shake it\") {\n            // test here\n        }\n        scenario(\"and should be tasty\") {\n            // test here\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"this outer block is enabled\") {\n        xscenario(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xfeature(\"this block is disabled\") {\n        scenario(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing NoSystemOutListener in Kotest Test Specification\nDESCRIPTION: This snippet demonstrates how to use the NoSystemOutListener extension in a Kotest DescribeSpec. The listener throws an error if any output is written to standard out during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/extensions/examples.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : DescribeSpec({\n\n    listener(NoSystemOutListener)\n\n    describe(\"All these tests should not write to standard out\") {\n        it(\"silence in the court\") {\n          println(\"boom\") // failure\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Eventually with Initial Delay Configuration\nDESCRIPTION: Demonstrates how to add an initial delay before the first iteration of eventually.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/concurrency/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5000\n  initialDelay = 1000\n}) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unbounded Shrinking in Kotest Property Test\nDESCRIPTION: This example shows how to configure a property test to use unbounded shrinking. By default, Kotest shrinks 1000 times, but this can be changed using PropTestConfig and ShrinkingMode.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/shrinking.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll(PropTestConfig(shrinkingMode = ShrinkingMode.Unbounded)) { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Matcher Extension Functions\nDESCRIPTION: Extension function implementation for custom string matcher with positive and negative variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldContainFoo() = this should containFoo()\nfun String.shouldNotContainFoo() = this shouldNot containFoo()\n```\n\n----------------------------------------\n\nTITLE: Testing Valid Konform Validation in Kotlin\nDESCRIPTION: Demonstrates testing a valid UserProfile instance using Kotest's shouldBeValid matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/konform.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval alice = UserProfile(\"Alice\", 25)\nvalidateUser shouldBeValid user1\n```\n\n----------------------------------------\n\nTITLE: Setting Compare Options Inline in Kotlin\nDESCRIPTION: Example showing how to specify comparison options inline when using shouldEqualJson.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/json/content.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldEqualJson(b, compareJsonOptions { arrayOrder = ArrayOrder.Strict })\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode in Kotlin Using Function Override\nDESCRIPTION: Example of setting an isolation mode by overriding the isolationMode function in a spec class. This approach provides an alternative to the DSL property assignment method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/isolation_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n  override fun isolationMode() = IsolationMode.SingleInstance\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EnabledCondition for Conditional Spec Execution in Kotlin\nDESCRIPTION: This code defines a custom EnabledCondition implementation that enables tests containing 'Linux' in their name only when running on a Linux operating system.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/annotations.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LinuxOnlyCondition : EnabledCondition {\n  override fun enabled(kclass: KClass<out Spec>): Boolean = when {\n    kclass.simpleName?.contains(\"Linux\") == true -> IS_OS_LINUX\n    else -> true // non Linux tests always run\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Config Syntax with KoTest Tests - New Style\nDESCRIPTION: The new way to apply configuration to tests in KoTest 3.1.x, where config is specified after the test name but before the test block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n\"this is a test\".config(...) {\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Manipulation in Kotlin Tests\nDESCRIPTION: Demonstrates how to override system environment variables in tests using withEnvironment function. Requires JVM argument configuration for JDK17 compatibility.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/system.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(\"FooKey\", \"BarValue\") {\n    System.getenv(\"FooKey\") shouldBe \"BarValue\" // System environment overridden!\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n  jvmArgs(\"--add-opens=java.base/java.util=ALL-UNNAMED\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(mapOf(\"FooKey\" to \"BarValue\", \"BarKey\" to \"FooValue\")) {\n  // Use FooKey and BarKey\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Schema in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to parse a JSON schema from a string representation. The schema defines geographical coordinates with latitude and longitude requirements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/json/schema.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval parsedSchema = parseSchema(\n  \"\"\"\n  {\n  \"$id\": \"https://example.com/geographical-location.schema.json\",  // will  be ignored\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",       // will be ignored\n  \"title\": \"Longitude and Latitude Values\",                        // will be ignored\n  \"description\": \"A geographical coordinate.\",                     // will be ignored\n  \"required\": [ \"latitude\", \"longitude\" ],\n  \"type\": \"object\",\n  \"properties\": {\n    \"latitude\": {\n      \"type\": \"number\",\n      \"minimum\": -90,\n      \"maximum\": 90\n    },\n    \"longitude\": {\n      \"type\": \"number\",\n      \"minimum\": -180,\n      \"maximum\": 180\n    }\n  }\n}\n  \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using a Composed String Matcher in Kotest\nDESCRIPTION: This example shows how to use a composed matcher to validate strings, with one passing case and one failing case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/composed_matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n\"StrongPassword123\".shouldBeStrongPassword()\n\"WeakPassword\".shouldBeStrongPassword() // would fail\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale and Timezone Listeners in Kotest\nDESCRIPTION: Shows how to use LocaleTestListener and TimeZoneTestListener to apply custom Locale and Timezone settings at the Spec or Project level in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(\n  LocaleTestListener(Locale.FRANCE),\n  TimeZoneTestListener(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\")))\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Pass System Properties to Kotest\nDESCRIPTION: Gradle configuration in Groovy to propagate system properties to test executors, required for tag-based test filtering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/tags.md#2025-04-13_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    //... Other configurations ...\n    systemProperties = System.properties\n}\n```\n\n----------------------------------------\n\nTITLE: Test Output for Individual Tests in FreeSpec\nDESCRIPTION: Shows the test output format when using individual named tests generated from data rows. The output displays a hierarchical structure with parent descriptions and individual test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nIntegerMathSpec\n  ✓ Addition\n    ✓ 1 + 0\n    ✓ 1 + 1\n  ✓ Complex Math\n    ✓ 8/2(2+2)\n    ✓ 5/5 + 1*1 + 3-2\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Logging Extensions in ProjectConfig\nDESCRIPTION: Demonstrates how to set up logging in Kotest by configuring LogLevel and implementing LogExtension in AbstractProjectConfig. Sets up error level logging and creates a basic log handler that prints messages to console.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/logging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n    override val logLevel = LogLevel.Error\n    override fun extensions() = listOf(\n        object : LogExtension {\n            override suspend fun handleLogs(testCase: TestCase, logs: List<LogEntry>) {\n                logs.forEach { println(it.level.name + \" - \" + it.message) }\n            }\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Kotest Arb Generators\nDESCRIPTION: Explains how to merge two generators so that values are equally sampled from both, with examples of basic merging and distribution of samples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genops.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval merged = arbA.merge(arbB)\n```\n\n----------------------------------------\n\nTITLE: Implementing Exhaustive Property Testing in Kotest\nDESCRIPTION: Example of using exhaustive generators with checkAll to test all possible combinations\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.2.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = checkAll(\n    Exhaustive.ints(0..5),\n    Exhaustive.ints(0..5),\n    Exhaustive.ints(0..5)\n) { ... }\n```\n\n----------------------------------------\n\nTITLE: Using @Ignored Annotation in Kotest to Disable a Spec\nDESCRIPTION: This example demonstrates how to completely disable a test specification using the @Ignored annotation. When a spec is annotated with @Ignored, it will not be instantiated at all, avoiding any setup or teardown costs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/annotations.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Ignored\nclass IgnoredSpec : FunSpec() {\n  init {\n    error(\"boom\") // spec will not be created so this error will not happen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sonatype Snapshot Repository URL for Kotest\nDESCRIPTION: Repository URL that needs to be added to the repositories block of your build configuration to access Kotest snapshot builds. This should be used in combination with changing the dependency version to the current snapshot version.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/quick_start.mdx#2025-04-13_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://oss.sonatype.org/content/repositories/snapshots\n```\n\n----------------------------------------\n\nTITLE: Specifying Platform for Kafka Container on ARM Architecture in Kotlin\nDESCRIPTION: Shows how to specify the platform for a Kafka container when running on Apple Silicon/ARM architecture.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCreateContainerCmdModifier { it.withPlatform(\"linux/amd64\") }\n```\n\n----------------------------------------\n\nTITLE: Validated Matchers in Kotest Arrow Extension\nDESCRIPTION: Assertion methods for testing Arrow Validated types, supporting verification of Valid and Invalid cases with value checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nvalidated.shouldBeValid()\nvalidated.shouldBeValid(v)\nvalidated.shouldBeInvalid()\nvalidated.shouldBeInvalid(v)\n```\n\n----------------------------------------\n\nTITLE: Transforming Arbitrary Values with Map\nDESCRIPTION: Demonstrates how to transform the output of an Arb using the map function, converting integers to their string representations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genops.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval integerStrings: Arb<String> = Arb.int().map { it.toString() }\n```\n\n----------------------------------------\n\nTITLE: AnnotationSpec Example Implementation\nDESCRIPTION: Demonstrates the usage of AnnotationSpec with JUnit-style annotations including @BeforeEach and @Test annotations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n    @BeforeEach\n    fun beforeTest() {\n        println(\"Before each test\")\n    }\n\n    @Test\n    fun test1() {\n        1 shouldBe 1\n    }\n\n    @Test\n    fun test2() {\n        3 shouldBe 3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Generator in Kotlin\nDESCRIPTION: Adds more configurations to the Email Generator for property-based testing. This allows generating more varied email address samples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nAdd more configurations to Email Generator\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Directories in Kotest Tests\nDESCRIPTION: Shows how to create a temporary directory in a Kotest test specification using the tempdir() function. Similar to temporary files, the directory is automatically managed and cleaned up by Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/tempfile.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val dir = tempdir()\n\n   test(\"a temporary dir dependent test\") {\n      //...\n   }\n})\n\n```\n\n----------------------------------------\n\nTITLE: Generating IPv4 Addresses using Kotest Arb Generator\nDESCRIPTION: Generates random IPv4 addresses using Kotest's Arb generator. The output format is a.b.c.d where each octet is an integer between 0 and 255, providing valid IPv4 address formats for testing purposes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.ipAddressV4()\n```\n\n----------------------------------------\n\nTITLE: FlatMapping Kotest Arb Values\nDESCRIPTION: Demonstrates how to create dependent arbitraries using flatMap where the output depends on previous arbitrary values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genops.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval dependentArbs: Arb<String> = Arb.of(\"foo\", \"bar\").flatMap { prefix ->\n   Arb.int(1..10).map { integer ->\n      \"${prefix}-${integer}\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Coroutine Dump Output in Kotest\nDESCRIPTION: This snippet shows an example of the coroutine dump output generated when coroutine debugging is enabled. It includes the coroutine state and creation stacktrace.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCoroutines dump 2021/11/27 22:17:43\n\nCoroutine DeferredCoroutine{Active}@71f1906, state: CREATED\n\t(Coroutine creation stacktrace)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.async$default(Builders.common.kt:82)\n\tat kotlinx.coroutines.BuildersKt.async$default(Unknown Source)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invokeSuspend(CoroutineDebugTest.kt:37)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invoke(CoroutineDebugTest.kt)\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Invocation Timeout\nDESCRIPTION: Demonstrates how to set an invocation timeout at the spec level that applies to all tests in the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   invocationTimeout = 25.milliseconds\n\n   test(\"foo\") {\n      // test here\n   }\n\n   test(\"bar\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Constant Value Generation in Kotest\nDESCRIPTION: Generator for constant values that always returns the same value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.constant(t)\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Container with Single Script in Kotlin\nDESCRIPTION: Shows how to initialize a database container with a single SQL script using Testcontainers in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n         withInitScript(\"init.sql\")\n         startupAttempts = 1\n         withUrlParam(\"connectionTimeZone\", \"Z\")\n         withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n      }\n```\n\n----------------------------------------\n\nTITLE: WireMock Per-Test Listener Example\nDESCRIPTION: Example showing how to use WireMockListener in PER_TEST mode, where the WireMock server is restarted before each individual test and stopped after each test completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/wiremock.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_TEST))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n  //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing ConstantNowTestListener in Kotlin for Kotest\nDESCRIPTION: This code snippet shows how to use the ConstantNowTestListener in Kotest. It overrides the listeners() function to include a ConstantNowTestListener, which sets a constant 'now' value for all tests in the scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/instant.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun listeners() = listOf(\n  ConstantNowTestListener(foreverNow)\n)\n```\n\n----------------------------------------\n\nTITLE: Using RequiresTag Annotation in Kotest\nDESCRIPTION: Shows how to use the @RequiresTag annotation to skip a spec unless specific tags are enabled at runtime.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tags.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresTag(\"Linux\", \"Mysql\")\nclass MyTestClass : FunSpec()\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec Execution Order in Kotest Project Config\nDESCRIPTION: Shows how to override the default spec execution order by implementing AbstractProjectConfig. The specExecutionOrder property determines how test specifications will be ordered during execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/spec_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig: AbstractProjectConfig() {\n    override val specExecutionOrder = ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Sets with Kotest Arb\nDESCRIPTION: Produces sets of random size (within a specified range) where each element is generated by the given element generator. The slippage parameter controls retry attempts for unique value generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_32\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.set(gen, range)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Parallelism in Kotest\nDESCRIPTION: Configuration to enable parallel execution of test specs by setting the parallelism level to 3. Tests within a spec still execute sequentially.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/project_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val parallelism = 3\n}\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest Mode with Counter Example\nDESCRIPTION: Demonstrates variable reset behavior in InstancePerTest mode using an atomic counter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/isolation_mode.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Long Matchers in Kotlin with Kotest\nDESCRIPTION: Shows matchers for long value comparisons, range checks, and parity assertions in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nlong.shouldBeBetween(x, y)\nlong.shouldBeLessThan(n)\nlong.shouldBeLessThanOrEqual(n)\nlong.shouldBeGreaterThan(n)\nlong.shouldBeGreaterThanOrEqual(n)\nlong.shouldBeInRange(range)\nlong.shouldBeEven()\nlong.shouldBeOdd()\nlong.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: String Assertions in Kotest\nDESCRIPTION: Matchers for asserting properties and contents of strings in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nstr.shouldBeBlank()\nstr.shouldBeEmpty()\nstr.shouldBeLowerCase()\nstr.shouldBeUpperCase()\nstr.shouldContain(\"substr\")\nstr.shouldContain(regex)\nstr.shouldContainADigit()\nstr.shouldContainIgnoringCase(substring)\nstr.shouldContainOnlyDigits()\nstr.shouldBeInteger([radix])\nstr.shouldContainOnlyOnce(substring)\nstr.shouldEndWith(\"suffix\")\nstr.shouldHaveLength(length)\nstr.shouldHaveLineCount(count)\nstr.shouldHaveMaxLength(max)\nstr.shouldHaveMinLength(min)\nstr.shouldHaveSameLengthAs(anotherString)\nstr.shouldMatch(regex)\nstr.shouldStartWith(\"prefix\")\nstr.shouldBeEqualIgnoringCase(other)\nstr.shouldBeTruthy()\nstr.shouldBeFalsy()\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging at Spec Level in Kotest\nDESCRIPTION: Example demonstrating how to enable coroutine debugging for all tests within a spec by overriding the 'coroutineDebugProbes' property. This setting applies to all test cases defined in the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n  init {\n\n    coroutineDebugProbes = true\n\n    test(\"foo\") {\n      // debugging enabled here\n    }\n\n    test(\"bar\") {\n      // debugging enabled here\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AnnotationSpec with Expected Exception in Kotlin\nDESCRIPTION: AnnotationSpec now supports configuring expected exceptions. This allows specifying expected exceptions for test cases in a JUnit-style annotation-based testing approach.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyTest : AnnotationSpec() {\n  @Test\n  fun test() {\n    assertThrows<IllegalArgumentException> {\n      // Test code that should throw IllegalArgumentException\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Test Ordering in Kotest\nDESCRIPTION: This snippet demonstrates how to configure random test ordering, where tests are executed in a non-deterministic order. Random ordering helps identify tests with hidden dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RandomSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Random\n\n    init {\n      \"foo\" {\n        // This test may run first or second\n      }\n\n      \"bar\" {\n        // This test may run first or second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TestClock in Kotlin for Kotest\nDESCRIPTION: Creates a TestClock instance with a specific timestamp and time zone. This allows for precise control over time in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/clock.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval timestamp = Instant.ofEpochMilli(1234)\nval clock = TestClock(timestamp, ZoneOffset.UTC)\n```\n\n----------------------------------------\n\nTITLE: Basic Embedded Kafka Listener Registration in Kotest\nDESCRIPTION: Shows how to register the embedded Kafka listener in a Kotest FunSpec test class using the direct initialization approach.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/kafka.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n  listener(embeddedKafkaListener)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Strongly Typed Container in Kotlin\nDESCRIPTION: Demonstrates how to create a strongly typed container (Elasticsearch) using Testcontainers in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval elasticsearch = install(ContainerExtension(ElasticsearchContainer(ELASTICSEARCH_IMAGE) )) {\n  withPassword(ELASTICSEARCH_PASSWORD)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Kotlin\nDESCRIPTION: Creating tag objects by inheriting from io.kotest.core.Tag for grouping tests by operating system.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/tags.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n```\n\n----------------------------------------\n\nTITLE: Using haveValue Matcher for Maps in Kotest\nDESCRIPTION: Shows how to use the haveValue matcher for asserting value presence in maps in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveValue(\"a\")\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Kotest Arb Generators\nDESCRIPTION: Demonstrates how to combine multiple arbitraries to generate complex data structures using bind operation, shown with a Person data class example.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genops.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb: Arb<Person> = Arb.bind(\n   Arb.string(),\n   Arb.int()\n) { name, age -> Person(name, age) }\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Generators for Property Testing in Kotest\nDESCRIPTION: This code demonstrates how to specify custom generators for more controlled property testing. In this example, two tests use different integer ranges to represent drinking age requirements in Chicago and London.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/test_functions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"is allowed to drink in Chicago\" {\n      forAll(Arb.int(21..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n   \"is allowed to drink in London\" {\n      forAll(Arb.int(18..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency with Gradle\nDESCRIPTION: Gradle dependency configuration for integrating Testcontainers with Kotest. This adds the kotest-extensions-testcontainers library to your project, which provides the necessary extension functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers_46x.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Short Value Generation in Kotest\nDESCRIPTION: Methods for generating Short values with various constraints. Includes functions for positive, negative, and array generation with customizable ranges and edge cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.short(min, max)\nArb.positiveShort(min, max)\nArb.negativeShort(min, max)\nArb.shortArray(length, content)\nArb.uShort(min, max)\nArb.uShortArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Nested Context ExpectSpec Example in Kotlin\nDESCRIPTION: Shows how to organize tests in ExpectSpec using nested contexts for better test organization and grouping.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"a calculator\") {\n        expect(\"simple addition\") {\n            // test here\n        }\n        expect(\"integer overflow\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using asClue extension function with lambda in Kotest\nDESCRIPTION: Shows how to use the asClue extension function with a lambda that constructs a dynamic message, which is only evaluated when the test fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Name should be present (user_id=${user.id})\" }.asClue {\nuser.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Assertions in Kotest\nDESCRIPTION: Assertions for testing Kotlin Channels including timing, size, state, and element reception validations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nchannel.shouldReceiveWithin(duration)\nchannel.shouldReceiveNoElementsWithin(duration)\nchannel.shouldHaveSize(n)\nchannel.shouldReceiveAtLeast(n)\nchannel.shouldReceiveAtMost(n)\nchannel.shouldBeClosed()\nchannel.shouldBeOpen()\nchannel.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: ByteArray Resource Matching in Kotlin with Kotest\nDESCRIPTION: Assertion functions for comparing byte arrays with resource file contents. Includes both positive and negative assertions with optional custom matcher support for binary comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray shouldMatchResource \"/path/to/test_resource.bin\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray shouldNotMatchResource \"/path/to/test_resource.bin\"\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray.shouldMatchResource(\"/path/to/test_resource.bin\", ::providedMatcher)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray.shouldNotMatchResource(\"/path/to/test_resource.bin\", ::providedMatcher)\n```\n\n----------------------------------------\n\nTITLE: Tagging All Tests in a Kotest Spec\nDESCRIPTION: Applying tags to all tests in a specification using the tags function in the spec initialization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/tags.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n\n  tags(Linux, Mysql)\n\n  test(\"my test\") { } // automatically marked with the above tags\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Double Arrays in Kotlin using Kotest\nDESCRIPTION: Creates an Arb that produces DoubleArrays with a specified length and content generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.doubleArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Integer Value Generation in Kotest\nDESCRIPTION: Methods for generating Integer values with various constraints. Includes functions for positive, negative, non-negative, non-positive, and array generation with customizable ranges and edge cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.int(min, max)\nArb.positiveInt(min, max)\nArb.nonNegativeInt(min, max)\nArb.negativeInt(min, max)\nArb.nonPositiveInt(min, max)\nArb.intArray(length, content)\nArb.uInt(min, max)\nArb.uIntArray(length, content)\nExhaustive.ints(range)\nArb.multiple(k, max)\nArb.factor(k)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Timeout Using ProjectConfig in Kotlin\nDESCRIPTION: Demonstrates how to configure a project-wide timeout by extending AbstractProjectConfig and overriding the projectTimeout property. This timeout applies to all tests, including setup and teardown phases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/timeouts/project_timeout.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val projectTimeout: Duration = 10.minutes\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests Using Kotest System Properties\nDESCRIPTION: Example of using Kotest's system property to filter tests at the package level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/gradle.md#2025-04-13_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nsystemProperty(\"kotest.filter.specs\", \"com.somepackage*\")\n```\n\n----------------------------------------\n\nTITLE: Data Class Definition Example\nDESCRIPTION: Example showing data class structure used to demonstrate the new diff highlighting feature\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.1.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Foo(val a: String, val b: Boolean, val c: Double)\n```\n\n----------------------------------------\n\nTITLE: Registering BlockHound Extension in Kotest FunSpec\nDESCRIPTION: Shows how to register the BlockHound extension in a test class to detect blocking operations. The extension is added to a FunSpec class with a test that would trigger BlockHound when it encounters blocking code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/blockhound.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BlockHoundSpecTest : FunSpec({\n   extension(BlockHound())\n\n   test(\"detects for spec\") {\n      blockInNonBlockingContext()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Exhaustive Generator in Kotest Property Test\nDESCRIPTION: Illustrates how to use a custom Exhaustive generator in a Kotest property test, checking properties of single digit prime numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/customgens.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n    \"testing single digit primes\" {\n        checkAll(singleDigitPrimes) { prime ->\n           isPrime(prime) shouldBe true\n           isPrime(prime * prime) shouldBe false\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Ktor Matchers Dependency - Kotlin\nDESCRIPTION: Gradle dependency declaration for adding Kotest Ktor assertions in Kotlin build scripts\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.kotest.extensions:kotest-assertions-ktor:version\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Test Callbacks in Kotest\nDESCRIPTION: Example demonstrating the new beforeEach, beforeContainer, and beforeTest callbacks in a DescribeSpec test\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.2.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CallbacksTest : DescribeSpec({\n\n   beforeEach {\n      println(\"Test: \" + it.displayName)\n   }\n\n   beforeContainer {\n      println(\"Container: \" + it.displayName)\n   }\n\n   beforeTest {\n      println(\"All: \" + it.displayName)\n   }\n\n   describe(\"I am a container scope\") {\n      it(\"And I am a test scope\") { }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Wide Timeouts in Kotest\nDESCRIPTION: This snippet shows how to set project-wide test and invocation timeouts using AbstractProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig {\n    override val timeout = 100.milliseconds\n    override val invocationTimeout = 33.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Test Factory with Lifecycle Callbacks\nDESCRIPTION: Example of implementing lifecycle callbacks in a test factory and their isolated behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_factories.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval factory1 = funSpec {\n  beforeTest {\n     println(\"Executing $it\")\n  }\n  test(\"a\") {  }\n  test(\"b\") {  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LifecycleExample : FunSpec({\n   include(factory1)\n   test(\"c\")\n   test(\"d\")\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Name Function for Data Tests in Kotest (Kotlin)\nDESCRIPTION: This example shows how to use a custom function to generate test names in Kotest's withData function. The function takes the test data as input and returns a string to be used as the test name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/test_names.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData<PythagTriple>(\n    nameFn = { \"${it.a}__${it.b}__${it.c}\" },\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Tests with ExpectSpec in Kotlin\nDESCRIPTION: Shows how to create a basic test using ExpectSpec style in Kotest. The ExpectSpec uses the 'expect' keyword to define test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    expect(\"my test\") {\n        // test here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Numeric Double Generation in Kotest\nDESCRIPTION: Collection of arbitrary generators for Double values with different ranges and constraints. Includes negative doubles, numeric doubles, and double arrays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genslist.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.negativeDouble(min, max)\nArb.numericDouble(min, max)\nArb.doubleArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tests in StringSpec\nDESCRIPTION: Shows how to add configuration options to tests in StringSpec using the config method. This enables features like disabling tests or configuring multiple invocations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\".config(enabled = false, invocations = 3) {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging Project-Wide in Kotest\nDESCRIPTION: Demonstrates how to enable coroutine debugging for all tests in a project by overriding the 'coroutineDebugProbes' property in the ProjectConfig class. This applies debugging globally without requiring configuration in individual specs or tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val coroutineDebugProbes = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Composed Matchers in Kotlin\nDESCRIPTION: Defines the Person and Address data classes that will be used to demonstrate composed matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/data_class_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(\n  val name: String,\n  val age: Int,\n  val address: Address,\n)\n\ndata class Address(\n  val city: String,\n  val street: String,\n  val buildingNumber: String,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom String Length Matcher in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a custom matcher for checking string length in Kotest. It includes the implementation of the matcher function and the MatcherResult creation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/custom.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun haveLength(length: Int) = Matcher<String> {\n  return MatcherResult(\n    value.length == length,\n    { \"string had length ${value.length} but we expected length $length\" },\n    { \"string should not have length $length\" },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Elasticsearch Container\nDESCRIPTION: Example of using ContainerExtension with a strongly typed ElasticsearchContainer, configuring container-specific options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval elasticsearch = install(ContainerExtension(ElasticsearchContainer(ELASTICSEARCH_IMAGE) )) {\n  withPassword(ELASTICSEARCH_PASSWORD)\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocalDateTime Matchers in Kotest with Kotlinx Datetime\nDESCRIPTION: These matchers can be used to assert various properties of LocalDateTime objects, such as comparing hours, minutes, seconds, and nanoseconds, as well as relative positions in time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/kotlinx-datetime.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameMinutesAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameSecondsAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameNanosAs(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeBefore(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeAfter(otherTime)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Configuring TestDispatcher for Single Test in Kotest\nDESCRIPTION: Shows how to enable TestDispatcher for a single test using coroutineTestScope config parameter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineTestScope = true) {\n         // this test will run with a test dispatcher\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure Test Reporter in Kotlin\nDESCRIPTION: Implementation of project configuration to wire in the AllureTestReporter globally for Kotest test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/allure.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig {\n    override fun listeners() = listOf(AllureTestReporter())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Person Matcher in Tests\nDESCRIPTION: Demonstrates usage of the Person matcher with examples of passing and failing cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/data_class_matchers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nPerson(\"John\", 21, Address(\"Warsaw\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21)\nPerson(\"Sam\", 22, Address(\"Chicago\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21) // would fail\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing to Multiplatform Projects\nDESCRIPTION: Configures Kotest property testing for a Kotlin multiplatform project, with an example for JavaScript-specific configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-property:$version'\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock Dependency for Kotest\nDESCRIPTION: Gradle dependency declaration for adding the Kotest WireMock extension to a project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/wiremock.md#2025-04-13_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nio.kotest.extensions:kotest-extensions-wiremock:{version}\n```\n\n----------------------------------------\n\nTITLE: Creating Component Matchers for Properties in Kotest\nDESCRIPTION: Implementation of individual property matchers for name, age and address. These simple matchers will be composed together later to create more complex validation logic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/data_class_matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun nameMatcher(name: String) = Matcher<String> {\n  MatcherResult(\n    value == name,\n    { \"Name $value should be $name\" },\n    { \"Name $value should not be $name\" }\n  )\n}\n\nfun ageMatcher(age: Int) = Matcher<Int> {\n  MatcherResult(\n    value == age,\n    { \"Age $value should be $age\" },\n    { \"Age $value should not be $age\" }\n  )\n}\n\nval addressMatcher = Matcher<Address> {\n  MatcherResult(\n    value == Address(\"Warsaw\", \"Test\", \"1/1\"),\n    { \"Address $value should be Test 1/1 Warsaw\" },\n    { \"Address $value should not be Test 1/1 Warsaw\" }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: DescribeSpec Test Structure Example\nDESCRIPTION: Illustrates test organization using DescribeSpec with describe, and, and it blocks similar to SpekFramework.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DescribeSpecExample : DescribeSpec() {\n  init {\n    describe(\"some context\") {\n      it(\"test name\") {\n        // test here\n      }\n      describe(\"nested contexts\") {\n        and(\"another context\") {\n          it(\"test name\") {\n            // test here\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Test Execution with EnabledIf Annotation\nDESCRIPTION: Example of using the EnabledIf annotation to conditionally execute tests based on custom conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.3.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EnabledIfMidnight : EnabledCondition {\n   override fun enabled(specKlass: KClass<out Spec>): Boolean = LocalTime.now().hour == 0\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(EnabledIfMidnight::class)\nclass EnabledIfTest : FunSpec() {\n   init {\n      test(\"tis midnight when the witches roam free\") {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Reflection Assertions in Kotest\nDESCRIPTION: Methods for testing class metadata through reflection including annotation presence, annotation counting, specific annotation type checking, and function existence.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveAnnotations()\nkclass.shouldHaveAnnotations(n)\nkclass.shouldBeAnnotatedWith<T>()\nkclass.shouldBeAnnotatedWith<T> { block }\nkclass.shouldHaveFunction(name)\n```\n\n----------------------------------------\n\nTITLE: Using LocalDateTime Matchers in Kotest with Kotlinx Datetime\nDESCRIPTION: A collection of matcher functions for asserting properties and relationships of LocalDateTime objects in tests. These matchers allow comparison of time components and checking temporal relationships between LocalDateTime instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameMinutesAs(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameSecondsAs(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameNanosAs(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldBeBefore(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldBeAfter(otherTime)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Resource Matchers for Strings in Kotlin\nDESCRIPTION: Matchers for comparing strings against resource file contents. These matchers ignore line separator differences and support custom matching logic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_38\n\nLANGUAGE: Kotlin\nCODE:\n```\nstr shouldMatchResource \"/path/to/test_resource.txt\"\nstr shouldNotMatchResource \"/path/to/test_resource.txt\"\nstr.shouldMatchResource(\"/path/to/test_resource.txt\", ::providedMatcher)\nstr.shouldNotMatchResource(\"/path/to/test_resource.txt\", ::providedMatcher)\n```\n\n----------------------------------------\n\nTITLE: Building JSON Schema with Kotest DSL\nDESCRIPTION: Shows how to create JSON schemas using Kotest's built-in DSL. This example creates an address schema with properties for street and zipCode, then uses it in a person schema. The DSL allows for nested schemas and custom validation rules.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/json/schema.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval addressSchema = jsonSchema {\n  obj {   // object is reserved, obj was chosen over jsonObject for brevity but could be changed ofc, or jsonObject could be added as alternative.\n    withProperty(\"street\", required = true) { string() }\n    withProperty(\"zipCode\", required = true) {\n      integer {\n        beEven() and beInRange(10000..99999)   // supports constructing a matcher that will be used to test values\n      }\n    }\n    additionalProperties = false   // triggers failure if other properties are defined in actual\n  }\n}\n\nval personSchema = jsonSchema {\n  obj {\n    withProperty(\"name\", required = true) { string() }\n    withProperty(\"address\") { addressSchema() } // Schemas can re-use other schemas 🎉\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Solution: Reset Mocks After Each Test\nDESCRIPTION: Shows how to reset mocks after each test using the afterTest listener to clear mock interactions and avoid interference between tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/integrations/mocks.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    afterTest {\n        clearMocks(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ExpectSpec in Kotlin\nDESCRIPTION: Creates a simple test class using ExpectSpec style with the 'expect' keyword to define tests. ExpectSpec is similar to FunSpec and ShouldSpec but uses different terminology.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/styles.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    expect(\"my test\") {\n        // test here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data Tests with Custom Test Names in Kotest\nDESCRIPTION: This snippet shows how to create nested data tests in Kotest with a custom test name for the second level. It uses withData() function with a lambda to generate custom test names based on the HTTP method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/nested.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n    val services = listOf(\n       \"http://internal.foo\",\n       \"http://internal.bar\",\n       \"http://public.baz\",\n    )\n\n    val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n    withData(services) { service ->\n       withData<String>({ \"should support HTTP $it\" }, methods) { method ->\n          // test service against method\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withClue with Lazy Evaluation in Kotlin\nDESCRIPTION: Shows how to use 'withClue' with a lambda for lazy evaluation, allowing for more complex or dynamic clue messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/clues.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue({ \"Name should be present (user_id=${user.id})\" }) {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Composing matchers with property extractors in Kotest\nDESCRIPTION: Creation of a composed matcher for Person by combining the individual matchers with their respective property extractors. This demonstrates the core Matcher.compose function that builds composite validation logic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/data_class_matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun personMatcher(name: String, age: Int) = Matcher.compose(\n  nameMatcher(name) to Person::name,\n  ageMatcher(age) to Person::age,\n  addressMatcher to Person::address\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Testcontainers with Kotest in Kotlin\nDESCRIPTION: Shows how to integrate Testcontainers with Kotest using the new 'kotest-extensions-testcontainers' module, demonstrating per-test and per-spec container lifecycle management.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.1.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perTest())\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perSpec())\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Tags for Test Grouping in KotlinTest\nDESCRIPTION: Shows how to create tag objects and apply them to tests for selective test execution. Tags allow running specific subsets of tests by including or excluding tagged tests via system properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n```\n\n----------------------------------------\n\nTITLE: JSON Field Comparison Example\nDESCRIPTION: Example demonstrating the difference between shouldEqualJson and shouldEqualSpecifiedJson.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/json.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = \"\"\" { \"a\": true, \"date\": \"2019-11-03\" } \"\"\"\nval b = \"\"\" { \"a\": true } \"\"\"\n\n// this would pass\na shouldEqualSpecifiedJson b\n\n// this would fail\na shouldEqualJson b\n```\n\n----------------------------------------\n\nTITLE: Focus Example with StringSpec in Kotest\nDESCRIPTION: Demonstrates using the f: prefix to focus execution on a single top-level test in StringSpec. When a test is focused, only that test will be executed while others are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/focus.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Classifications in Property Testing\nDESCRIPTION: Demonstrates using multiple classify statements to categorize test data in different ways during property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Gen.int()) { a ->\n    classify(a == 0, \"zero\")\n    classify(a % 2 == 0, \"even number\", \"odd number\")\n    a + a == 2 * a\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Cleanup Using afterTest\nDESCRIPTION: Solution using afterTest hook to clear mock states after each test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/integrations/mocks.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    afterTest {\n        clearMocks(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Locale Values in Kotlin with Kotest\nDESCRIPTION: Produces Arb that generates locales in the Java format (e.g., en_US or ca_ES_VALENCIA). Useful for testing internationalization and localization features.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.locale()\n```\n\n----------------------------------------\n\nTITLE: Basic Logging in Kotest Tests\nDESCRIPTION: Simple example of using warning level logging within a Kotest test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/logging.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something\") {\n  warn { \"something weird happened\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Random Selection from Multiple Arbs in Kotest\nDESCRIPTION: Randomly selects one of the given Arbs to generate the next element. This allows for creating generators that produce values from multiple sources.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_26\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.choice(arbs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail On Ignored Tests in Kotest\nDESCRIPTION: Sets Kotest to consider ignored tests as failures, which is useful for maintaining test coverage and preventing tests from being silently skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/project_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val failOnIgnoredTests = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Test Name Function in Kotest Data-Driven Testing\nDESCRIPTION: This example shows how to use a function to generate custom test names in Kotest's withData function. The function takes the test data as input and returns a string to be used as the test name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/test_names.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData<PythagTriple>(\n    nameFn = { \"${it.a}__${it.b}__${it.c}\" },\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Matchers as Extension Functions in KotlinTest\nDESCRIPTION: Shows how matchers can be used as extension functions in KotlinTest 3.1.x, improving IDE discovery and code readability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldExist()\n\nlistOf(1, 2).shouldContainNull()\n```\n\n----------------------------------------\n\nTITLE: Executing Table-Driven Tests in Kotest\nDESCRIPTION: Demonstrates how to run assertions against all rows in a table using forAll. Tests run on all rows even if some fail, collecting all errors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/table_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"table-driven testing\") {\n    table.forAll { id, name, username ->\n      id shouldBeGreaterThan 0\n      username shouldNotBe \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Kotest Tags via Environment Variables in Kotlin\nDESCRIPTION: Allows setting Kotest tags using environment variables, providing a flexible way to configure test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nkotest.tags\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Functions for Matchers\nDESCRIPTION: Extension function implementations that provide a more fluent API for using the custom matcher. Includes both positive and negative assertion variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/custom.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldHaveLength(length: Int): String {\n  this should haveLength(length)\n  return this\n}\n\nfun String.shouldNotHaveLength(length: Int): String {\n  this shouldNot haveLength(length)\n  return this\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Factory for IndexedSeq Implementations in Kotlin\nDESCRIPTION: Converting the previous tests into a reusable test factory that accepts an IndexedSeq as a parameter, allowing the same tests to be applied to multiple implementations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_factories.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> indexedSeqTests(name: String, empty: IndexedSeq<T>) = wordSpec {\n   name should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Weighted Values with Kotest Frequency\nDESCRIPTION: Uses Arb.frequency(list) as an alias to Arb.choose() for generating weighted values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.frequency(list)\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Testing in StringSpec\nDESCRIPTION: Example of table testing within StringSpec to test string concatenation operations. Shows how to test multiple string combinations using row objects with multiple parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forAll(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Eval Type Generator\nDESCRIPTION: Generator for Arrow's Eval type, creating Eval.now instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/arrow.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nArb<A>.evalNow()\n```\n\n----------------------------------------\n\nTITLE: Generating Random Sets in Kotlin with Kotest\nDESCRIPTION: Employs Arb.set() to generate sets of random size within a specified range, where each element is generated by the given element generator. Includes a slippage parameter to handle potential uniqueness issues.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.set(gen, range)\n```\n\n----------------------------------------\n\nTITLE: Nesting Contexts in ExpectSpec\nDESCRIPTION: Shows how to nest test cases within context blocks in ExpectSpec, allowing for better organization of related tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"a calculator\") {\n        expect(\"simple addition\") {\n            // test here\n        }\n        expect(\"integer overflow\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tests in Kotest DescribeSpec\nDESCRIPTION: Example showing how to structure nested tests using Kotest's DescribeSpec style, demonstrating a describe block containing multiple test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/output.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: DescribeSpec({\n  describe(\"describe 1\"){\n    it(\"test 1\"){}\n    it(\"test 2\"){}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default TestCaseConfig via Override\nDESCRIPTION: Example of setting default test configuration for all tests in a spec by overriding defaultTestCaseConfig function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_case_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection and Map Generation in Kotest\nDESCRIPTION: Generators for collections including lists, sets, and maps with customizable sizes and element generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genslist.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.list(gen, range)\nArb.set(gen, range, slippage)\nArb.map(Arb<K>, Arb<V>, minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Test Ordering in Kotest\nDESCRIPTION: Demonstrates how to configure tests to run in sequential order (the order they are defined in the spec file) by overriding testCaseOrder() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SequentialSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Sequential\n\n    init {\n      \"foo\" {\n        // I run first as I'm defined first\n      }\n\n      \"bar\" {\n        // I run second as I'm defined second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test and Invocation Timeouts in Kotest\nDESCRIPTION: Setting both a test-level timeout and an invocation-level timeout for tests with multiple invocations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds,\n                         invocationTimeout = 250.milliseconds,\n                         invocations = 10) { }\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs in Kotest\nDESCRIPTION: Generates random UUIDs of a specified type.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.uuid(type)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Kafka Port in Embedded Kafka Listener in Kotlin\nDESCRIPTION: Demonstrates how to create a custom instance of the embedded Kafka listener with a specific port. This is useful when you need to avoid port conflicts or run multiple tests in parallel.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/kafka.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaCustomPortTest : FunSpec({\n\n   val listener = EmbeddedKafkaListener(5678)\n   listener(listener)\n\n   test(\"send / receive\") {\n\n      val producer = listener.stringStringProducer()\n      producer.send(ProducerRecord(\"foo\", \"a\"))\n      producer.close()\n\n      val consumer = listener.stringStringConsumer(\"foo\")\n      eventually(10.seconds) {\n         consumer.poll(1000).first().value() shouldBe \"a\"\n      }\n      consumer.close()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Output Stream Control Listener Implementation\nDESCRIPTION: Shows how to prevent direct system output/error stream usage in tests using NoSystemOutListener and NoSystemErrListener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/system.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\n    override fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n```\n\n----------------------------------------\n\nTITLE: Date Comparison Matchers in Klock\nDESCRIPTION: Date comparison matchers for comparing year, month, day components and temporal relationships between dates. These matchers are part of the kotest-assertions-klock module and work with Klock DateTime objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/klock.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYear(otherDate)\ndate.shouldHaveSameMonth(otherDate)\ndate.shouldHaveSameDay(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\n```\n\n----------------------------------------\n\nTITLE: Applying @EnabledIf Annotation with Custom Condition in Kotlin\nDESCRIPTION: Demonstrates how to apply the custom EnabledCondition to multiple test specifications using the @EnabledIf annotation. Shows usage across different spec types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/annotations.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest1 : FunSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest2 : DescribeSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyWindowsTests : DescribeSpec() {\n  // tests here\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Validated Instances in Kotest with Arrow\nDESCRIPTION: Examples of generating Validated instances using Arrow generators in Kotest. Includes methods for generating balanced valid/invalid instances for both Validated and ValidatedNel types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/arrow.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.validated(invalid, valid)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.validatedNel(invalid, valid)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Project with HTML and XML Reporters\nDESCRIPTION: Implementation of ProjectConfig that adds both JUnit XML Reporter and HTML Reporter as extensions. The JUnit XML Reporter is configured to exclude containers and use test paths as names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/html_reporter.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override val specExecutionOrder = SpecExecutionOrder.Annotated\n\n    override fun extensions(): List<Extension> = listOf(\n        JunitXmlReporter(\n            includeContainers = false,\n            useTestPathAsName = true,\n        ),\n        HtmlReporter()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Domain Objects as Clues with asClue\nDESCRIPTION: Converting domain objects into clues to provide richer context in test failures. This example shows how an HTTP response object can be used to provide detailed failure information.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class HttpResponse(val status: Int, val body: String)\n\nval response = HttpResponse(404, \"the content\")\n\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Assertions with withClue and asClue in Kotlin\nDESCRIPTION: Demonstrates how to use withClue and asClue helpers to add extra context to assertions, making test failures more informative.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") { user.name shouldNotBe null }\n\ndata class HttpResponse(val status: Int, body: String)\nval response = HttpResponse(200, \"the content\")\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually Duration and Interval Configuration in Kotlin\nDESCRIPTION: Configuration example showing how to set duration and interval parameters for eventually.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  interval = 250.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Exhaustive Collection Operations in Kotest\nDESCRIPTION: Exhaustive generator functions for collections that enumerate through all possible combinations, subsets, and permutations of elements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_46\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.collection(list)\nExhaustive.powerSet(list)\nExhaustive.permutations(list, length)\nExhaustive.slices(list)\n```\n\n----------------------------------------\n\nTITLE: New Config Syntax in KotlinTest 3.1.x\nDESCRIPTION: Demonstrates the new test configuration syntax introduced in KotlinTest 3.1.x, where configuration is applied after the test name but before the test block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n\"this is a test\".config(...) {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AllureTestReporter in Kotest Project Config\nDESCRIPTION: This Kotlin code snippet demonstrates how to wire in the AllureTestReporter class globally using Kotest's project configuration. This setup enables Allure data collection during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/allure.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig {\n    override fun listeners() = listOf(AllureTestReporter())\n}\n```\n\n----------------------------------------\n\nTITLE: Using SecurityManagerListener in Kotest Spec\nDESCRIPTION: Shows how to use the SecurityManagerListener to apply a custom security manager at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n          override fun listeners() = listOf(SecurityManagerListener(myManager))\n\n        init {\n          // Use my security manager\n        }\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Complete Kafka Test Example with Producer and Consumer\nDESCRIPTION: A full example showing how to test Kafka message production and consumption using a Kafka container, including container setup and client configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KafkaTestContainerExtensionTest : FunSpec() {\n  init {\n\n    val kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n      withEmbeddedZookeeper()\n    }\n\n    test(\"should send/receive message\") {\n\n      val producer = kafka.createStringStringProducer()\n      producer.send(ProducerRecord(\"foo\", null, \"bubble bobble\"))\n      producer.close()\n\n      val consumer = kafka.createStringStringConsumer {\n        this[ConsumerConfig.MAX_POLL_RECORDS_CONFIG] = 1\n      }\n\n      consumer.subscribe(listOf(\"foo\"))\n      val records = consumer.poll(Duration.ofSeconds(100))\n      records.shouldHaveSize(1)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Double Values with Kotest Arbitrary\nDESCRIPTION: This snippet shows methods for generating double values, including positive doubles.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genslist.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.double(min, max)\nArb.positiveDouble(min, max)\n```\n\n----------------------------------------\n\nTITLE: Enum Generation in Kotest\nDESCRIPTION: Methods for generating enum values either randomly or exhaustively from a given enum class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genslist.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.enum<T>()\nExhaustive.enum<T>()\n```\n\n----------------------------------------\n\nTITLE: Generating LocalDateTime Objects with KotlinX DateTime in Kotest\nDESCRIPTION: Creates LocalDateTime instances with all fields constrained within specified ranges. Requires the kotest-property-datetime extension module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_42\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.datetime(yearRange, hourRange, minuteRange, secondRage)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution Parameters\nDESCRIPTION: Demonstrates how to configure test execution parameters like timeout, invocations, threads, and tags for individual tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/index.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n  \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n    // test here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generator with Enum in Kotest Property Test\nDESCRIPTION: Demonstrates how to use an Exhaustive generator with an enum in a Kotest property test. The test iterates 100 times over integer and Season enum values, with each Season value repeated 25 times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/gens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Season { Winter, Fall, Spring, Summer }\n\nforAll<Int, Season>(100) { a, season -> ... }\n```\n\n----------------------------------------\n\nTITLE: Iterable Assertions in Kotest\nDESCRIPTION: Methods for asserting conditions on iterable collections including matching elements, order verification, and containment checks\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\niterable.shouldMatchEach(assertions)\niterable.shouldMatchInOrder(assertions)\niterable.shouldMatchInOrderSubset(assertions)\nvalue.shouldBeOneOf(collection)\ncollection.shouldContainAnyOf(collection)\nvalue.shouldBeIn(collection)\n```\n\n----------------------------------------\n\nTITLE: Generating Weighted Values with Kotest Arbitrary\nDESCRIPTION: Uses Arb.choose(pairs) to generate values based on weights. For example, Arb.choose(1 to 'A', 2 to 'B') will generate 'A' 33% of the time and 'B' 66% of the time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_40\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.choose(pairs)\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Properties with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers allow asserting various properties of individual elements, such as child tags, text content, and attributes. They are part of the kotlintest-assertions-jsoup library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/jsoup.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveChildWithTag(tag)\nelement.shouldHaveText(text)\nelement.shouldHaveAttribute(name)\nelement.shouldHaveAttributeValue(name, value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignored Test Failure in Kotest\nDESCRIPTION: Configures whether ignored tests should be considered as test failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/project_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val failOnIgnoredTests = true\n}\n```\n\n----------------------------------------\n\nTITLE: Exhaustively Iterating Enum Constants in Kotlin using Kotest\nDESCRIPTION: Iterates through all constants defined in a given enum type.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.enum<T>()\n```\n\n----------------------------------------\n\nTITLE: Sharing Eventually Configuration in Kotlin\nDESCRIPTION: Shows how to create and share Eventually configurations between different test suites with custom logging and timing configurations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = EventuallyConfig<ServerResponse, ServerException>(5.minutes, interval = 25.milliseconds.fibonacci(), exceptionClass = ServerException::class)\nval fast = slow.copy(duration = 5.seconds)\n\nclass FooTests : StringSpec({\n  val logger = logger(\"FooTests\")\n  val fSlow = slow.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\")})\n\n  \"server eventually provides a result for /foo\" {\n    eventually(fSlow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : StringSpec({\n  val logger = logger(\"BarTests\")\n  val bFast = fast.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\")})\n\n  \"server eventually provides a result for /bar\" {\n    eventually(bFast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing System.exit Calls with SpecSystemExitListener\nDESCRIPTION: Demonstrates how to use SpecSystemExitListener to catch and verify System.exit calls in tests. The listener converts exit calls into exceptions that can be asserted against.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n    \"Catch exception\" {\n      val thrown: SystemExitException = shouldThrow<SystemExitException> {\n        System.exit(22)\n      }\n\n      thrown.exitCode shouldBe 22\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to Individual Test Cases in Kotest\nDESCRIPTION: Marking test cases with tags using the config function to specify which tests should run under different conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/tags.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AnnotationSpec Example with Lifecycle Methods\nDESCRIPTION: Shows how to use AnnotationSpec with JUnit-style annotations for test lifecycle management including @BeforeEach and @Test annotations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n    @BeforeEach\n    fun beforeTest() {\n        println(\"Before each test\")\n    }\n\n    @Test\n    fun test1() {\n        1 shouldBe 1\n    }\n\n    @Test\n    fun test2() {\n        3 shouldBe 3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Date and Time Arbitraries in Kotest\nDESCRIPTION: Functions for generating random date and time objects with configurable ranges, supporting different date-time types across platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.date(ranges)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.datetime(ranges)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.localDateTime(ranges)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.localDate(ranges)\n```\n\n----------------------------------------\n\nTITLE: Enabling Kotest Config Dump in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to enable the Kotest configuration dump feature by setting a system property in a Gradle test task. The property 'kotest.framework.dump.config' is set to 'true' to activate the feature.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/config_dump.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntest {\n  systemProperty \"kotest.framework.dump.config\", \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using withEnvironment Extension with Multiple Values\nDESCRIPTION: Example of using the withEnvironment extension function to temporarily override multiple system environment variables at once using a map.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"foo\") {\n  withEnvironment(mapOf(\"FooKey\" to \"BarValue\", \"BarKey\" to \"FooValue\")) {\n    // Use FooKey and BarKey\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing System.exit Calls\nDESCRIPTION: Demonstrates how to test code that calls System.exit by using SpecSystemExitListener to catch and verify exit codes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n    override fun listeners() = listOf(SpecSystemExitListener)\n\n    init {\n        \"Catch exception\" {\n            val thrown: SystemExitException = shouldThrow<SystemExitException> {\n                System.exit(22)\n            }\n\n            thrown.exitCode shouldBe 22\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit XML Reports with Kotest\nDESCRIPTION: This snippet demonstrates how to configure Gradle to use JUnit Platform, disable its built-in JUnit XML report generation, and set the build directory system property needed by Kotest's JUnit XML reporter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/junit_xml.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") {\n  useJUnitPlatform()\n  reports {\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IndexedSeq Interface in Kotlin\nDESCRIPTION: This code snippet defines an interface called IndexedSeq with methods for size, adding elements, and checking containment.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_factories.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface IndexedSeq<T> {\n\n    // returns the size of t\n    fun size(): Int\n\n    // returns a new seq with t added\n    fun add(t: T): IndexedSeq<T>\n\n    // returns true if this seq contains t\n    fun contains(t: T): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WithDataTestName Interface in Kotest\nDESCRIPTION: Demonstrates implementing the WithDataTestName interface to provide custom test names through a class method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/test_names.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int) : WithDataTestName {\n  override fun dataTestName() = \"wibble $a, $b, $c wobble\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generator Bind Implementation\nDESCRIPTION: Example of using the bind function to generate random class instances from primitive generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val email: String, val id: Int)\n\nval userGen = Gen.bind(Gen.string(), Gen.positiveIntegers(), ::User)\n\nassertAll(userGen) {\n  it.email shouldNotBe null\n  it.id should beGreaterThan(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Arb Generators in Kotlin\nDESCRIPTION: Demonstrates how to merge two Arb generators for equal sampling, including example with frequency distribution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genops.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval merged = arbA.merge(arbB)\n\nval a = arbitrary { \"a\" }\nval b = arbitrary { \"b\" }\nval ab = a.merge(b)\n\nprintln(ab.take(1000).groupingBy { it }.eachCount())\n// {a=493, b=507}\n```\n\n----------------------------------------\n\nTITLE: Using contain Matcher for Maps in Kotest\nDESCRIPTION: Demonstrates the use of the contain matcher for asserting key-value pair presence in maps in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should contain(1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Using TestLogger Object in Kotest\nDESCRIPTION: Demonstrates how to use the TestLogger object for logging in separate test functions. Shows how to pass the logger around and use it in extension functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/logging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something else\") {\n  logger.assertSomething(\"something else\")\n}\n\nfun TestLogger.assertSomething(actual: String) {\n   info { \"asserting something about $actual\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExpectSpec with Nested Contexts in Kotlin\nDESCRIPTION: Demonstrates usage of the ExpectSpec class to create nested test contexts using the 'context' and 'expect' keywords for organizing tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ExpectSpecExample : ExpectSpec() {\n  init {\n    context(\"some context\") {\n      expect(\"some test\") {\n        // test here\n      }\n      context(\"nested context even\") {\n        expect(\"some test\") {\n          // test here\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Kotest Tests with System Properties\nDESCRIPTION: This command demonstrates how to use Kotest-specific test filtering by setting the 'kotest.filter.specs' system property. It executes all tests in the 'com.somepackage' and nested packages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/gradle.md#2025-04-13_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*'\n```\n\n----------------------------------------\n\nTITLE: Enum Value Generation in Kotest\nDESCRIPTION: Generators for working with enum values, including random selection and exhaustive iteration of enum constants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genslist.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.enum<T>()\nExhaustive.enum<T>()\n```\n\n----------------------------------------\n\nTITLE: Using KFunction Matchers in Kotest\nDESCRIPTION: Assertion matchers for KFunction types that verify annotations, return types, and function modifiers like inline and infix.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nkfunction.shouldHaveAnnotations()\nkfunction.shouldHaveAnnotations(n)\nkfunction.shouldBeAnnotatedWith<T>()\nkfunction.shouldBeAnnotatedWith<T> { block }\nkfunction.shouldHaveReturnType<T>()\nkfunction.shouldBeInline()\nkfunction.shouldBeInfix()\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Test Ordering in Kotest\nDESCRIPTION: Shows how to configure tests to run in random order by overriding testCaseOrder() to return TestCaseOrder.Random.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RandomSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Random\n\n    init {\n      \"foo\" {\n        // This test may run first or second\n      }\n\n      \"bar\" {\n        // This test may run first or second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Invocation-Level Timeouts in Kotest\nDESCRIPTION: Example showing how to configure both global and per-invocation timeouts for a test case with multiple invocations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds,\n                         invocationTimeout = 250.milliseconds,\n                         invocations = 10) { }\n```\n\n----------------------------------------\n\nTITLE: Creating EnabledCondition for Midnight Execution in Kotest\nDESCRIPTION: Implements an EnabledCondition to only execute tests at midnight, demonstrating the use of EnabledIf annotation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.3.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EnabledIfMidnight : EnabledCondition {\n   override fun enabled(specKlass: KClass<out Spec>): Boolean = LocalTime.now().hour == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using contain Matcher for Collections in Kotest\nDESCRIPTION: Demonstrates the use of the contain matcher for asserting element presence in collections in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should contain(4)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Sets with Slippage in Kotlin using Kotest\nDESCRIPTION: Generates sets where values are produced by the given element generator. The size of each set is determined randomly within the specified range. The slippage argument specifies how many attempts will be made to generate each element before erroring.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_31\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.set(gen, range, slippage)\n```\n\n----------------------------------------\n\nTITLE: Creating Root-Level Data-Driven Tests in Kotest FunSpec\nDESCRIPTION: Implementing data-driven tests using the withData function at the root level of a FunSpec test class, without container blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  withData(\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    isPythagTriple(a, b, c) shouldBe true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Thread Properties in Kotlin with Kotest\nDESCRIPTION: Extension functions for Thread objects that verify their state, including block status, daemon nature, liveliness, and termination state.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nthread.shouldBeBlocked()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthread.shouldBeDaemon()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthread.shouldBeAlive()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthread.shouldBeTerminated()\n```\n\n----------------------------------------\n\nTITLE: Using @Order Annotation for Spec Ordering in Kotest\nDESCRIPTION: This example demonstrates how to use the @Order annotation to control the execution order of spec classes in Kotest. Specs with lower order values are executed first, and those without annotations are considered last. This ordering method only works on the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/spec_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Order(1)\nclass FooTest : FunSpec() { }\n\n@Order(0)\nclass BarTest: FunSpec() {}\n\n@Order(1)\nclass FarTest : FunSpec() { }\n\nclass BooTest : FunSpec() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing NoSystemOutListener in Kotest DescribeSpec\nDESCRIPTION: This snippet demonstrates how to use the NoSystemOutListener extension in a Kotest DescribeSpec. The listener throws an error if any output is written to standard out during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/extensions/examples.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : DescribeSpec({\n\n    listener(NoSystemOutListener)\n\n    describe(\"All these tests should not write to standard out\") {\n        it(\"silence in the court\") {\n          println(\"boom\") // failure\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Solution: Adjust Isolation Mode\nDESCRIPTION: Shows how to use IsolationMode.InstancePerTest to create a new instance of the spec for each test, effectively isolating mocks between tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/integrations/mocks.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    isolationMode = IsolationMode.InstancePerTest\n\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Robolectric Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration to add Robolectric extension for Kotest to the project. The version parameter should be replaced with the desired version number.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/roboelectric.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-extensions-robolectric:${version}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Name Whitespace Handling in Kotest\nDESCRIPTION: Configuration to remove excess whitespace from multi-line test names\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/project_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val testNameRemoveWhitespace = true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tests in Kotest using DescribeSpec\nDESCRIPTION: Example of creating nested tests using Kotest's DescribeSpec style, demonstrating a describe block with two test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/output.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: DescribeSpec({\n  describe(\"describe 1\"){\n    it(\"test 1\"){}\n    it(\"test 2\"){}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Nullable Values with Kotest Arbitrary\nDESCRIPTION: This snippet demonstrates how to create an arbitrary generator that includes null values along with the regular generated values. It allows control over the frequency of null generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genslist.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.int().orNull()\nArb.int().orNull(nullProbability)\n```\n\n----------------------------------------\n\nTITLE: ByteArray Resource Matching with Custom Matchers in Kotlin\nDESCRIPTION: Extended byte array resource matchers that accept a custom matcher function. These allow for implementing specialized comparison logic for binary data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray.shouldMatchResource(\"/path/to/test_resource.bin\", ::providedMatcher)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbyteArray.shouldNotMatchResource(\"/path/to/test_resource.bin\", ::providedMatcher)\n```\n\n----------------------------------------\n\nTITLE: Asserting Reflection Properties in Kotlin with Kotest\nDESCRIPTION: Extension functions for KClass objects that verify class metadata such as annotations, functions, properties, relationships, and class characteristics.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveAnnotations()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveAnnotations(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeAnnotatedWith<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeAnnotatedWith<T> { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveFunction(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveFunction(name) { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveMemberProperty(name)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveMemberProperty(name) { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeSubtypeOf<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeSupertypeOf<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeData()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeSealed()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldBeCompanion()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHavePrimaryConstructor()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkclass.shouldHaveVisibility(visibility)\n```\n\n----------------------------------------\n\nTITLE: Generating Constant Values in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to create a generator that always returns a constant value using Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.constant(t)\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Listener Project-Wide in Kotest\nDESCRIPTION: This snippet shows how to register a custom listener (TimerListener) project-wide by overriding the extensions function in an AbstractProjectConfig object. This makes the listener available to all tests in the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/extensions/examples.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyConfig : AbstractProjectConfig() {\n    override fun extensions(): List<Extension> = listOf(TimerListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Setup Using beforeTest\nDESCRIPTION: Solution using beforeTest hook to initialize fresh mock instances before each test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/integrations/mocks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    lateinit var repository: MyRepository\n    lateinit var target: MyService\n\n    beforeTest {\n        repository = mockk()\n        target = MyService(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Context ExpectSpec Implementation\nDESCRIPTION: Demonstrates how to nest test cases within context blocks in ExpectSpec style, allowing for better organization of related tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"a calculator\") {\n        expect(\"simple addition\") {\n            // test here\n        }\n        expect(\"integer overflow\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Test Execution with EnabledCondition in Kotlin\nDESCRIPTION: Shows how to create a custom condition for enabling/disabling tests based on the operating system. The LinuxOnlyCondition class implements EnabledCondition interface to control test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/annotations.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LinuxOnlyCondition : EnabledCondition {\n  override fun enabled(kclass: KClass<out Spec>): Boolean = when {\n    kclass.simpleName?.contains(\"Linux\") == true -> IS_OS_LINUX\n    else -> true // non Linux tests always run\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Name Whitespace Handling in Kotest\nDESCRIPTION: Example implementation of AbstractProjectConfig to remove extra whitespace from test names, particularly useful for multiline test names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/project_config.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val testNameRemoveWhitespace = true\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with TestLogger\nDESCRIPTION: Demonstrates using the TestLogger object for logging in separate test functions and extension methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/logging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something else\") {\n  logger.assertSomething(\"something else\")\n}\n\nfun TestLogger.assertSomething(actual: String) {\n   info { \"asserting something about $actual\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JDBC Database Container Extension\nDESCRIPTION: Setting up a JDBC database container extension with custom connection pool configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcDatabaseContainerExtension(mysql)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tests with DescribeSpec in Kotest\nDESCRIPTION: Example showing how to write nested tests using Kotest's DescribeSpec style. This demonstrates a simple test structure with a describe block containing two test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/output.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: DescribeSpec({\n  describe(\"describe 1\"){\n    it(\"test 1\"){}\n    it(\"test 2\"){}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Null Assertion Example in Kotlin\nDESCRIPTION: Demonstrates a simple null check assertion that shows the need for additional context through clues.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Simple Lambda-based Testing in Kotlin\nDESCRIPTION: Demonstrates a simplified testing approach using lambda functions instead of mocks. Shows how to create a test service with a simple lambda implementation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/fake_functions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval myService = MyService(hasAnswer = { 42 })\n// tests to follow\n```\n\n----------------------------------------\n\nTITLE: Creating Schema for Arrays with Unique Items\nDESCRIPTION: Example of defining a JSON schema that requires array elements to be unique numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/json/schema.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval uniqueArray = jsonSchema {\n  array(uniqueItems = true) { number() }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generators in Kotest Property Testing\nDESCRIPTION: Shows how to use exhaustive generators in Kotest property testing to ensure all combinations are executed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.2.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = checkAll(\n   Exhaustive.ints(0..5),\n   Exhaustive.ints(0..5),\n   Exhaustive.ints(0..5)\n) { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Unbounded Shrinking in Kotest Property Tests\nDESCRIPTION: This example shows how to configure Kotest to perform unbounded shrinking during property-based testing, overriding the default limit of 1000 shrink attempts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/shrinking.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll(PropTestConfig(shrinkingMode = ShrinkingMode.Unbounded)) { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Constant Values in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to create an Arb generator that always returns a constant value using Kotest's Arb.constant() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.constant(t)\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency with Maven\nDESCRIPTION: Maven dependency configuration for including the Kotest Testcontainers extension in your project. The dependency is scoped to test and uses a different group ID than the main Kotest packages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/test_containers_46x.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Property Testing in Kotest\nDESCRIPTION: Kotlin test specification demonstrating how to verify system properties are correctly loaded from the properties file using DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/intellij/props.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FooTest : DescribeSpec() {\n  init {\n    describe(\"after adding kotest.properties\") {\n      it(\"foo should be set\") {\n         System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail On Empty Test Suite in Kotest Project Config\nDESCRIPTION: Shows how to enable the failOnEmptyTestSuite flag in Kotest project configuration to ensure at least one test is executed. This setting will cause the build to fail if a module contains no executed tests, which helps catch scenarios where tests are being accidentally filtered out.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/fail_on_empty.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val failOnEmptyTestSuite = true\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Static Tests in Kotest\nDESCRIPTION: Shows the static equivalent of the dynamic tests, demonstrating how dynamic test generation can reduce code duplication.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/writing_tests.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   test(\"pam should be a three letter name\") {\n      \"pam\".shouldHaveLength(3)\n   }\n\n   test(\"tim should be a three letter name\") {\n     \"tim\".shouldHaveLength(3)\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: KType Assertion in Kotlin with Kotest\nDESCRIPTION: Asserts that a KType variable has the specified type T using the shouldBeOfType generic extension function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nktype.shouldBeOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Sharing Eventually Configuration\nDESCRIPTION: Shows how to create and share Eventually configurations between different test suites, including custom logging and timing configurations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = EventuallyConfig<ServerResponse, ServerException>(5.minutes, interval = 25.milliseconds.fibonacci(), exceptionClass = ServerException::class)\nval fast = slow.copy(duration = 5.seconds)\n\nclass FooTests : StringSpec({\n  val logger = logger(\"FooTests\")\n  val fSlow = slow.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\")})\n\n  \"server eventually provides a result for /foo\" {\n    eventually(fSlow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : StringSpec({\n  val logger = logger(\"BarTests\")\n  val bFast = fast.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\")})\n\n  \"server eventually provides a result for /bar\" {\n    eventually(bFast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing CompletableFuture Values with whenReady\nDESCRIPTION: Example demonstrating how to test CompletableFuture values using the whenReady function, which waits for the future to complete before running assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nval stringFuture: CompletableFuture<String> = ...\n\n\"My future test\" should {\n  \"support CompletableFuture<T>\" {\n    whenReady(stringFuture) {\n      it shouldBe \"wibble\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FeatureSpec Style in Kotest\nDESCRIPTION: FeatureSpec uses 'feature' and 'scenario' keywords similar to Cucumber's Gherkin syntax. Tests can be disabled using xfeature and xscenario variants for selective test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"the can of coke\") {\n        scenario(\"should be fizzy when I shake it\") {\n            // test here\n        }\n        scenario(\"and should be tasty\") {\n            // test here\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"this outer block is enabled\") {\n        xscenario(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xfeature(\"this block is disabled\") {\n        scenario(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporter in Kotest\nDESCRIPTION: Example showing how to configure the JUnit XML reporter with custom options in project config\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.2.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override fun listeners(): List<Listener> = listOf(\n     JunitXmlReporter(\n        includeContainers = true, // write out status for all tests\n        useTestPathAsName = true // use the full test path (ie, includes parent test names)\n     )\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Iteration Count for Property Tests in Kotlin\nDESCRIPTION: This snippet demonstrates how to override the default iteration count (1000) for property tests by assigning a value to PropertyTesting.defaultIterationCount. It shows how tests can either use the global default or override it with a specific count.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/globalconfig.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nPropertyTesting.defaultIterationCount = 123\n\n// will use 555 iterations specified in the test\nforAll<String, String>(555) { a,b -> a + b == \"$a$b\" }\n\n// will use 123 iterations from the global default\nforAll<String, String> { a,b -> a + b == \"$a$b\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit Platform in KotlinTest\nDESCRIPTION: Shows how to configure Gradle to use JUnit Platform for KotlinTest tests. This simplifies setup compared to previous versions which required the Gradle JUnit plugin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: MatcherResult Interface Definition\nDESCRIPTION: Interface defining the structure for matcher results, including methods for test status and failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/custom.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MatcherResult {\n  fun passed(): Boolean\n  fun failureMessage(): String\n  fun negatedFailureMessage(): String\n}\n```\n\n----------------------------------------\n\nTITLE: Generating IPv4 Addresses in Kotest\nDESCRIPTION: Creates random IP addresses in the standard IPv4 format (a.b.c.d), where each part is an integer between 0 and 255. Available across JVM, JS, and Native platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_44\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.ipAddressV4()\n```\n\n----------------------------------------\n\nTITLE: Disabling and Conditionally Running Tests in KotlinTest\nDESCRIPTION: This snippet demonstrates various ways to disable or conditionally run tests in KotlinTest, including using config parameters and focus modifiers.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = false) {\n  ...\n}\n\n\"should do something\".config(enabled = IS_OS_LINUX) {\n  ...\n}\n\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Long Values with Kotest Arb\nDESCRIPTION: This snippet illustrates Arb generators for Long values in Kotest. It includes generators for regular, positive, and negative Longs, providing flexibility in generating test data for Long-based operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.long(min, max)\nArb.positiveLong(max)\nArb.negativeLong(min)\n```\n\n----------------------------------------\n\nTITLE: Generating Integer Values with Kotest Arbitrary and Exhaustive\nDESCRIPTION: This snippet demonstrates various methods for generating integer values, including signed and unsigned integers, arrays, and specific patterns like multiples and factors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genslist.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.int(min, max)\nArb.positiveInt(min, max)\nArb.nonNegativeInt(min, max)\nArb.negativeInt(min, max)\nArb.nonPositiveInt(min, max)\nArb.intArray(length, content)\nArb.uInt(min, max)\nArb.uIntArray(length, content)\nExhaustive.ints(range)\nArb.multiple(k, max)\nArb.factor(k)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Triples in Kotlin using Kotest\nDESCRIPTION: Generates Triple instances where each value of the triple is drawn from the three provided Arbs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_38\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.triple(arb1, arb2, arb3)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexicographic Test Ordering in Kotest\nDESCRIPTION: Configures a Kotest StringSpec to run tests in lexicographic (alphabetical) order. This is achieved by overriding the testCaseOrder function to return TestCaseOrder.Lexicographic, causing tests to execute in alphabetical order by name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_ordering.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LexicographicSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Lexicographic\n\n    init {\n      \"foo\" {\n        // I run second as bar < foo\n      }\n\n      \"bar\" {\n        // I run first as bar < foo\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Slices with Kotest Arbitrary\nDESCRIPTION: Uses Arb.slice(list) to generate a random slice of the given list. For example, Arb.slice(listOf(1,2,3)) could generate listOf(1), listOf(2), listOf(3), listOf(1,2), listOf(2,3) and so on.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_44\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.slice(list)\n```\n\n----------------------------------------\n\nTITLE: Mocking Solution: Adjust Kotest IsolationMode\nDESCRIPTION: Demonstrates how to use Kotest's IsolationMode to create a new instance of the test class for each test, ensuring clean mock state.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/integrations/mocks.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    isolationMode = IsolationMode.InstancePerTest\n\n})\n```\n\n----------------------------------------\n\nTITLE: Network Data Generation in Kotest\nDESCRIPTION: Generators for network-related data types, currently supporting IPv4 address generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_37\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.ipAddressV4()\n```\n\n----------------------------------------\n\nTITLE: Accessing Spring TestContextManager in Kotest Tests\nDESCRIPTION: Demonstrates how to access the Spring TestContextManager within Kotest tests using the testContextManager() extension method to get the current test context.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/spring.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"provide the test context manager\" {\n         println(\"The context is \" + testContextManager().testContext)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Test Cases in FunSpec\nDESCRIPTION: Shows how to add tags to test cases using FunSpec style for categorizing and grouping tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_case_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating General Container with Docker Image in Kotlin\nDESCRIPTION: Installs a general container extension using a Docker image name for Redis.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval container = install(ContainerExtension(\"redis:5.0.3-alpine\")) {\n  startupAttempts = 1\n  withExposedPorts(6379)\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Long Operations in Kotlin with Kotest\nDESCRIPTION: Assertion methods for long integers in Kotest, including range checks, comparisons, and parity checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nlong.shouldBeBetween(x, y)\nlong.shouldBeLessThan(n)\nlong.shouldBeLessThanOrEqual(n)\nlong.shouldBeGreaterThan(n)\nlong.shouldBeGreaterThanOrEqual(n)\nlong.shouldBeInRange(range)\nlong.shouldBeEven()\nlong.shouldBeOdd()\nlong.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution with Reason Using enabledOrReasonIf in Kotlin\nDESCRIPTION: Shows how to use enabledOrReasonIf to provide a reason string when disabling tests, which gets included in test reports.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/config_enabled.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: (TestCase) -> Enabled = {\n   if (it.name.testName.startsWith(\"danger\") && isFriday())\n      Enabled.disabled(\"It's a friday, and we don't like danger!\")\n   else\n      Enabled.enabled\n}\n\n\"danger Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Continually in Kotest\nDESCRIPTION: A basic example showing how to use the 'continually' function to assert that a condition holds true for 60 seconds. The test code inside the block is executed repeatedly to verify the condition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/continually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Reporter in Kotest Project Config\nDESCRIPTION: This snippet demonstrates how to set up the HTML Reporter extension in a Kotest ProjectConfig class, along with the JunitXmlReporter which is required to generate the necessary XML files that the HTML Reporter uses.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/html_reporter.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override val specExecutionOrder = SpecExecutionOrder.Annotated\n\n    override fun extensions(): List<Extension> = listOf(\n        JunitXmlReporter(\n            includeContainers = false,\n            useTestPathAsName = true,\n        ),\n        HtmlReporter()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Example in Kotlin\nDESCRIPTION: A simple assertion that compares a username to an expected value, demonstrating what a basic assertion looks like in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nusername shouldBe \"sksamuel\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Project-Wide Coroutine Debugging in Kotest\nDESCRIPTION: Example showing how to enable coroutine debugging for all tests in a project by configuring it in ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val coroutineDebugProbes = true\n}\n```\n\n----------------------------------------\n\nTITLE: Building JSON Schema using Kotest DSL\nDESCRIPTION: Shows how to build JSON schemas using Kotest's DSL, including nested schemas and property validation rules.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/json/schema.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval addressSchema = jsonSchema {\n  obj {   // object is reserved, obj was chosen over jsonObject for brevity but could be changed ofc, or jsonObject could be added as alternative.\n    withProperty(\"street\", required = true) { string() }\n    withProperty(\"zipCode\", required = true) {\n      integer {\n        beEven() and beInRange(10000..99999)   // supports constructing a matcher that will be used to test values\n      }\n    }\n    additionalProperties = false   // triggers failure if other properties are defined in actual\n  }\n}\n\nval personSchema = jsonSchema {\n  obj {\n    withProperty(\"name\", required = true) { string() }\n    withProperty(\"address\") { addressSchema() } // Schemas can re-use other schemas 🎉\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Pattern-Matched Strings with Kotest Arb\nDESCRIPTION: Creates strings that match a given pattern using the RgxGen library. This allows for more specific string generation based on regular expressions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.stringPattern(pattern)\n```\n\n----------------------------------------\n\nTITLE: Testing Arrow Try Types in KotlinTest\nDESCRIPTION: Shows matchers for Arrow's Try type, allowing verification of Success and Failure values from the kotlintest-assertions-arrow module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nTry.Success(\"foo\") should beSuccess(\"foo\")\nTry.Failure<Nothing>(RuntimeException()) should beFailure()\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Blocks with xdescribe in Kotest DescribeSpec\nDESCRIPTION: This snippet demonstrates how to use 'xdescribe' to disable an entire test block and its nested tests in a Kotest DescribeSpec. The 'x' prefix on 'describe' prevents the block and its children from running.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/xmethods.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  xdescribe(\"this block and it's children are now disabled\") {\n    it(\"will not run\") {\n      // disabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in kotest.properties File\nDESCRIPTION: Example of defining a key-value pair in the kotest.properties file. This file is used to set system properties before test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/intellij/props.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfoo=bar\n```\n\n----------------------------------------\n\nTITLE: Implementing Project Level Extensions in Kotlin\nDESCRIPTION: Demonstrates how to create project-wide listeners using @AutoScan annotation. The listener implements BeforeProjectListener and AfterProjectListener to execute code at project startup and completion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/extensions/extensions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@AutoScan\nobject MyProjectListener : BeforeProjectListener, AfterProjectListener {\n  override suspend fun beforeProject() {\n    println(\"Project starting\")\n  }\n  override suspend fun afterProject() {\n    println(\"Project complete\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Test Container\nDESCRIPTION: Example of creating and configuring a MySQL test container instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n  startupAttempts = 1\n  withUrlParam(\"connectionTimeZone\", \"Z\")\n  withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using One and Any Assertions in Kotlin\nDESCRIPTION: New assertion methods 'one' and 'any' have been added as alternatives to assertSoftly. These are suspending methods that check if only a single assertion succeeded (one) or at least one assertion succeeded (any).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\none {\n  1 shouldBe 2\n  2 shouldBe 2\n  3 shouldBe 4\n}\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nany {\n  1 shouldBe 2\n  2 shouldBe 3\n  3 shouldBe 3\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Kotest Configuration Dump\nDESCRIPTION: This snippet demonstrates the expected output when the config dump feature is activated in Kotest. It shows various configuration settings such as parallelization factor, concurrent specs, test timeouts, and enabled extensions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/config_dump.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n~~~ Kotest Configuration ~~~\n-> Parallelization factor: 1\n-> Concurrent specs: null\n-> Global concurrent tests: 1\n-> Dispatcher affinity: true\n-> Coroutine debug probe: false\n-> Spec execution order: Lexicographic\n-> Default test execution order: Sequential\n-> Default test timeout: 600000ms\n-> Default test invocation timeout: 600000ms\n-> Default isolation mode: SingleInstance\n-> Global soft assertions: false\n-> Write spec failure file: false\n-> Fail on ignored tests: false\n-> Fail on empty test suite: false\n-> Duplicate test name mode: Warn\n-> Remove test name whitespace: false\n-> Append tags to test names: false\n-> Extensions\n  - io.kotest.engine.extensions.SystemPropertyTagExtension\n```\n\n----------------------------------------\n\nTITLE: Defining Kotest Framework Configuration Properties in Kotlin\nDESCRIPTION: Defines system property constants used to configure various aspects of the Kotest testing framework. These properties control features like test filtering, timeout settings, parallelism, isolation modes, and other framework behaviors. The properties are defined as constants in a Kotlin object for centralized access.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/config_props.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotest.core.internal\n\nobject KotestEngineProperties {\n\n   const val scriptsEnabled = \"kotest.framework.scripts.enabled\"\n\n   const val dumpConfig = \"kotest.framework.dump.config\"\n\n   /**\n    * Sets the tag expression that determines included/excluded tags.\n    */\n   const val tagExpression = \"kotest.tags\"\n\n   const val excludeTags = \"kotest.tags.exclude\"\n\n   const val includeTags = \"kotest.tags.include\"\n\n   /**\n    * A regex expression that is used to match the test [io.kotest.core.descriptors.Descriptor]'s path\n    * to determine if a test should be included in the test plan or not.\n    */\n   const val filterTests = \"kotest.filter.tests\"\n\n   /**\n    * A regex expression that is used to match the [io.kotest.mpp.bestName] of a class\n    * to determine if a spec should be included in the test plan or not.\n    */\n   const val filterSpecs = \"kotest.filter.specs\"\n\n   const val propertiesFilename = \"kotest.properties.filename\"\n\n   /**\n    * If set to true, then source ref's will not be created for test cases.\n    * This may speed up builds (as the engine will not need to create stack traces to\n    * generate line numbers) but will also reduce functionality in the intellij plugin\n    * (by limiting the ability to drill directly into the test inside a file).\n    */\n   const val disableSourceRef = \"kotest.framework.sourceref.disable\"\n\n   /**\n    * If set to true, disables the use of '!' as a prefix to disable tests.\n    */\n   const val disableBangPrefix = \"kotest.bang.disable\"\n\n   /**\n    * The default [io.kotest.core.spec.IsolationMode] for specs.\n    */\n   const val isolationMode = \"kotest.framework.isolation.mode\"\n\n   /**\n    * The default [io.kotest.core.test.AssertionMode] for tests.\n    */\n   const val assertionMode = \"kotest.framework.assertion.mode\"\n\n   /**\n    * The default parallelism for specs.\n    */\n   const val parallelism = \"kotest.framework.parallelism\"\n\n   /**\n    * The default timeout for test cases.\n    */\n   const val timeout = \"kotest.framework.timeout\"\n\n   /**\n    * The default timeout for the entire test suite.\n    */\n   const val projectTimeout = \"kotest.framework.projecttimeout\"\n\n   const val logLevel = \"kotest.framework.loglevel\"\n\n   /**\n    * The default timeout for each invocation of a test case.\n    */\n   const val invocationTimeout = \"kotest.framework.invocation.timeout\"\n\n   const val concurrentSpecs = \"kotest.framework.spec.concurrent\"\n\n   const val concurrentTests = \"kotest.framework.test.concurrent\"\n\n   /**\n    * Disable scanning the classpath for configuration classes by setting this property to true\n    */\n   const val disableConfigurationClassPathScanning = \"kotest.framework.classpath.scanning.config.disable\"\n\n   /**\n    * Specify a fully qualified name to use for project config.\n    * This class will be instantiated via reflection.\n    */\n   const val configurationClassName = \"kotest.framework.config.fqn\"\n\n   /**\n    * Disable scanning the classpath for listeners with @AutoScan by setting this property to true\n    */\n   const val disableAutoScanClassPathScanning = \"kotest.framework.classpath.scanning.autoscan.disable\"\n\n   const val allowMultilineTestName = \"kotest.framework.testname.multiline\"\n\n   /**\n    *  If set -> filter testCases by this severity level and higher, else running all\n    */\n   const val testSeverity = \"kotest.framework.test.severity\"\n\n   /**\n    * Enable assert softly globally.\n    * */\n   const val globalAssertSoftly = \"kotest.framework.assertion.globalassertsoftly\"\n\n   /**\n    * Appends all tags associated with a test case to its display name.\n    * */\n   const val testNameAppendTags = \"kotest.framework.testname.append.tags\"\n\n   /**\n    * Controls the [io.kotest.core.names.DuplicateTestNameMode] mode.\n    */\n   const val duplicateTestNameMode = \"kotest.framework.testname.duplicate.mode\"\n\n   const val disableJarDiscovery = \"kotest.framework.discovery.jar.scan.disable\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Property Testing for JavaScript Target\nDESCRIPTION: Kotlin Multiplatform configuration for adding Kotest property testing support specifically to the JavaScript target.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/index.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Field Comparison Matchers in Kotlin\nDESCRIPTION: These matchers are used for selective field comparison between objects in Kotlin, allowing for equality checks based on specific properties or ignoring certain properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToUsingFields(other: T, vararg properties: KProperty<*>)\nany.shouldBeEqualToIgnoringFields(other: T, vararg properties: KProperty<*>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec Execution Order in Kotest Project Config\nDESCRIPTION: This snippet shows how to set the spec execution order in the Kotest project configuration. The specExecutionOrder property is overridden in a custom configuration class that extends AbstractProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/spec_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig: AbstractProjectConfig() {\n    override val specExecutionOrder = ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Permutations with Kotest Arbitrary\nDESCRIPTION: Uses Arb.shuffle(list) to generate random permutations of a list. For example, Arb.shuffle(listOf(1,2,3)) could generate listOf(3,1,2), listOf(1,3,2), and so on.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_42\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.shuffle(list)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shrinker for Coordinate Generator in Kotest\nDESCRIPTION: Demonstrates how to create a custom Shrinker for a Coordinate data class and use it in a property-based test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/shrinking.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Coordinate(val x: Int, val y: Int)\n\nclass CoordinateTest : FunSpec({\n    context(\"Coordinate Transformations\") {\n        // Shrinker takes the four neighbouring coordinates\n        val coordinateShrinker = Shrinker<Coordinate> { c ->\n            listOf(\n                Coordinate(c.x - 1, c.y),\n                Coordinate(c.x, c.y - 1),\n                Coordinate(c.x + 1, c.y),\n                Coordinate(c.x, c.y + 1),\n            )\n        }\n        val coordinateArb = arbitrary(coordinateShrinker) {\n            Coordinate(Arb.nonNegativeInt().bind(), Arb.nonNegativeInt().bind())\n        }\n\n        test(\"Coordinates are always positive after transformation\") {\n            coordinateArb.checkAll {\n                transform(it).x shouldBeGreaterThanOrEqualTo 0\n                transform(it).y shouldBeGreaterThanOrEqualTo 0\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Property Testing with Maven\nDESCRIPTION: Adding the Kotest property testing dependency to a JVM project using Maven build system.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Comparison Function Definition in Kotlin\nDESCRIPTION: Example of creating a custom comparison function with predefined options for more flexible JSON matching.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/content.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval myOptions = compareJsonOptions {\n   typeCoercion = TypeCoercion.Enabled\n   arrayOrder = ArrayOrder.Lenient\n}\n\ninfix fun String.lenientShouldEqualJson(other: String) = this.shouldEqualJson(other, myOptions)\n\n\"[1, 2]\" lenientShouldEqualJson \"[2, 1]\" // This will pass\n```\n\n----------------------------------------\n\nTITLE: Using AfterProjectListener Interface in Kotest\nDESCRIPTION: Interface definition that provides a hook that is invoked once all tests and specifications have completed execution in a Kotest test project. This listener is useful for cleanup operations or final assertions after all tests have run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/extensions/simple.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface AfterProjectListener {\n    suspend fun afterProject() // Called after all tests complete\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with the Enabled Flag in Kotest\nDESCRIPTION: Shows how to disable a test case by setting the 'enabled' config parameter to false, which is similar to JUnit's @Ignore. Can also be used to conditionally run tests based on system properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/config_enabled.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = false) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinTest with Gradle for Android Projects\nDESCRIPTION: Example showing how to configure an Android project's Gradle build to use KotlinTest. This snippet demonstrates the Android-specific configuration for enabling JUnit Platform in test options.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nandroid.testOptions {\n    unitTests.all {\n        useJUnitPlatform()\n    }\n}\n\ndependencies {\n    testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.4.2'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Collection in Kotest\nDESCRIPTION: Function to enumerate each element of a list one by one, creating an exhaustive set of test values rather than random samples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.collection(list)\n```\n\n----------------------------------------\n\nTITLE: Coroutine Scope Test Examples\nDESCRIPTION: Demonstrates the use of coroutine scopes in nested test structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.1.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndescribe(\"some test\") {\n launch {\n    delay(100)\n    it(\"should do something\") {\n       launch {\n          delay(100)\n       }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Property Testing for Multiplatform Common Tests\nDESCRIPTION: Adding the Kotest property testing dependency to the commonTest sourceset in a Kotlin Multiplatform project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/index.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-property:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with Kotest Environment Variable by Package\nDESCRIPTION: Example of using Kotest's environment variable to filter specs by package. This approach works for both Kotlin/JVM and Kotlin/Native targets.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/gradle.md#2025-04-13_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkotest_filter_specs='com.somepackage.*' gradle test\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Validation Examples\nDESCRIPTION: Shows how to validate JSON strings against defined schemas using the shouldMatchSchema matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/json/schema.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n\"{}\".shouldMatchSchema personSchema\n\n// fails with:\n// $.name => Expected string, but was undefined\n\n\"\"\" { \"name\": \"Emil\", \"age\": 34 } \"\"\"\n// Passes, since address isn't required and `additionalProperties` are allowed\n```\n\n----------------------------------------\n\nTITLE: Using forNone Inspector in Kotlin\nDESCRIPTION: This example shows how to use the forNone inspector to verify that no elements in a collection satisfy the given conditions. It checks that no string contains 'x' and no string starts with 'bb'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/inspectors.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Instant Objects with KotlinX DateTime in Kotest\nDESCRIPTION: Creates Instant objects with epoch values randomly generated within the specified range. Requires the kotest-property-datetime extension module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_43\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Durations in Kotlin\nDESCRIPTION: Creates random duration values within the specified range. This generator is available across JVM, JS, and Native platforms in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_40\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.duration(ranges)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Value from Arb in Kotlin\nDESCRIPTION: Demonstrates how to use the 'next' operation on an Arb to retrieve a value, either with the default Random or a specified Random instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genops.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval arbA: Arb<A> = ...\nval a = arbA.next() // use Random.Default\nval a2 = arbA.next(rs) // pass in Random\n```\n\n----------------------------------------\n\nTITLE: Disabling BlockHound for Specific Test Cases\nDESCRIPTION: Demonstrates how to disable BlockHound for an individual test case when it's enabled at the spec or project level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/blockhound.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"allow blocking\").config(extensions = listOf(BlockHound(BlockHoundMode.DISABLED))) {\n   blockInNonBlockingContext()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Library to JVM/Maven Projects\nDESCRIPTION: Adds the Kotest assertions library dependency to a JVM project using Maven.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-assertions-core-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using haveSize Matcher in Kotlin for Kotest\nDESCRIPTION: Shows how to use the haveSize matcher for collections in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_45\n\nLANGUAGE: kotlin\nCODE:\n```\nmyCollection should haveSize(4)\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Gradle\nDESCRIPTION: Shows how to add the Kotest Testcontainers extension dependency to a Gradle build file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Asserting File Properties in Kotest\nDESCRIPTION: Methods for asserting various properties of files and directories in Kotest, including type, permissions, content, and structure checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeAbsolute()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeADirectory()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeAFile()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeCanonical()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeEmpty()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeExecutable()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeHidden()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeReadable()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeRelative()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeSmaller(file)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeLarger(file)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeWriteable()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndir.shouldBeNonEmptyDirectory()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndir.shouldContainFile(name)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndir.shouldContainNFiles(name)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldExist()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldHaveExtension(ext)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldHaveFileSize(size)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldHaveName(name)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldHavePath(path)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldStartWithPath(prefix)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndir.shouldContainFileDeep(name)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndir.shouldContainFiles(name1, name2, ..., nameN)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeSymbolicLink()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldHaveParent(name)\n```\n\n----------------------------------------\n\nTITLE: Implementing NoSystemOutListener and NoSystemErrListener in Kotlin\nDESCRIPTION: This snippet demonstrates how to use NoSystemOutListener and NoSystemErrListener to catch and test System.out and System.err writes. It shows how to add the listeners to a test class and assert that exceptions are thrown when writing to these streams.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NoSystemOutOrErrTest : StringSpec() {\n\n  override fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n\n  init {\n\n    \"System.out should throw an exception when the listener is added\" {\n      shouldThrow<SystemOutWriteException> {\n        System.out.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n\n    \"System.err should throw an exception when the listener is added\" {\n      shouldThrow<SystemErrWriteException> {\n        System.err.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Timeout in Kotest using ProjectConfig\nDESCRIPTION: Demonstrates how to set a project-wide timeout using AbstractProjectConfig. This configuration sets a maximum duration for all tests and specs to complete, including setup and teardown phases. The timeout is applied by extending AbstractProjectConfig and overriding the projectTimeout property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/timeouts/project_timeout.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val projectTimeout: Duration = 10.minutes\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Creating Kafka Producer with Embedded Kafka Configuration (Kotlin)\nDESCRIPTION: Demonstrates how to manually create a Kafka producer using the host and port information from the embedded Kafka listener. This approach allows for more customization of the producer properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/kafka.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n   \n   val props = Properties().apply {\n      put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"${embeddedKafkaListener.host}:${embeddedKafkaListener.port}\")\n   }\n   \n   val producer = KafkaProducer<String, String>(props)\n   \n})\n```\n\n----------------------------------------\n\nTITLE: Creating Tests with StringSpec Using Init Block\nDESCRIPTION: Example of creating KotlinTest tests using StringSpec style with an init block. This approach allows overriding lifecycle methods like beforeTest and afterTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec() {\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Kotest Configuration Dump Output (Kotlin)\nDESCRIPTION: This snippet demonstrates the output format of the Kotest configuration dump. It includes various configuration settings such as parallelization factor, concurrent specs, test timeouts, isolation mode, and enabled extensions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/config_dump.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n~~~ Kotest Configuration ~~~\n-> Parallelization factor: 1\n-> Concurrent specs: null\n-> Global concurrent tests: 1\n-> Dispatcher affinity: true\n-> Coroutine debug probe: false\n-> Spec execution order: Lexicographic\n-> Default test execution order: Sequential\n-> Default test timeout: 600000ms\n-> Default test invocation timeout: 600000ms\n-> Default isolation mode: SingleInstance\n-> Global soft assertions: false\n-> Write spec failure file: false\n-> Fail on ignored tests: false\n-> Fail on empty test suite: false\n-> Duplicate test name mode: Warn\n-> Remove test name whitespace: false\n-> Append tags to test names: false\n-> Extensions\n  - io.kotest.engine.extensions.SystemPropertyTagExtension\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Properties with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers allow asserting various properties of HTML elements using Jsoup in Kotlin. They include checks for child elements, text content, and attributes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/jsoup.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveChildWithTag(tag)\nelement.shouldHaveText(text)\nelement.shouldHaveAttribute(name)\nelement.shouldHaveAttributeValue(name, value)\n```\n\n----------------------------------------\n\nTITLE: Implementing New Data Driven Test DSL in Kotlin\nDESCRIPTION: Introduces a new data driven test DSL that works with data classes, allowing for more structured and type-safe test data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nNew data driven test DSL with data classes\n```\n\n----------------------------------------\n\nTITLE: Using SystemPropertyListener for Spec Level System Properties\nDESCRIPTION: Example of applying system property overrides at the test spec level by implementing a listener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n  override fun listeners() = listOf(SystemPropertyListener(\"foo\", \"bar\"))\n\n  init {\n    \"MyTest\" {\n      System.getProperty(\"foo\") shouldBe \"bar\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Instant Matchers in Kotest\nDESCRIPTION: Matchers for asserting conditions on Instant objects, providing temporal comparison capabilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeBefore(anotherInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\n----------------------------------------\n\nTITLE: Using File Path Prefix Matchers in KoTest\nDESCRIPTION: Examples of testing if file paths start with a specific prefix using the startWithPath matcher in KoTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nFile(\"/usr/home/sam\") should startWithPath(\"/usr/home\")\nFile(\"/usr/home/sam\") shouldNot startWithPath(\"/var\")\n```\n\n----------------------------------------\n\nTITLE: Disabling and Conditionally Running Tests in Kotest\nDESCRIPTION: This example shows how to disable tests or run them conditionally in Kotest using the enabled config parameter and focus functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = false) {\n  ...\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = IS_OS_LINUX) {\n  ...\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Named Tags\nDESCRIPTION: Example of creating a tag using the NamedTag class with validation rules for tag names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/tags.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval tag = NamedTag(\"Linux\")\n```\n\n----------------------------------------\n\nTITLE: Basic property test with potential failure in Kotest\nDESCRIPTION: Example of a property test that will periodically fail when two equal strings are generated, as equal strings would have a Levenshtein distance of zero.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/assumptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Konform Validation\nDESCRIPTION: Declares a UserProfile data class with fullName and optional age properties that will be validated.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/konform.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class UserProfile(\n   val fullName: String,\n   val age: Int?\n)\n```\n\n----------------------------------------\n\nTITLE: Adding an Extension Function for a Complex Composed Matcher in Kotlin\nDESCRIPTION: This snippet creates an extension function for the Person class that makes it easy to apply the personMatcher for validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/composed_matchers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Person.shouldBePerson(name: String, age: Int) = this shouldBe personMatcher(name, age)\n```\n\n----------------------------------------\n\nTITLE: MatcherResult Interface Definition in Kotlin\nDESCRIPTION: Explains the MatcherResult interface which contains three methods: passed() to indicate success/failure, and two methods for different failure messages depending on whether the matcher is used normally or negated.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/custom.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MatcherResult {\n  fun passed(): Boolean\n  fun failureMessage(): String\n  fun negatedFailureMessage(): String\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Value Assertions in Kotlin\nDESCRIPTION: Methods for testing Optional objects, verifying presence or absence of values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\noptional.shouldBePresent()\noptional.shouldBePresent { value -> .. }\noptional.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Generating Maps with Kotest Arbitraries\nDESCRIPTION: Functions to create random maps with configurable size ranges. Includes variants that accept either a Pair arbitrary or separate key and value arbitraries.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.map(Arb<Pair<K,V>>, minSize, maxSize)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.map(Arb<K>, Arb<V>, minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Custom Arbitrary Generator in Kotlin\nDESCRIPTION: Creates a custom arbitrary generator for a Person class by composing String and Int arbitraries. It demonstrates how to use the bind() method to extract values from other arbitraries when building a complex object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/customgens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\n\nval personArb = arbitrary {\n   val name = Arb.string(10..12).bind()\n   val age = Arb.int(21, 150).bind()\n   Person(name, age)\n}\n```\n\n----------------------------------------\n\nTITLE: Positioned Test Listeners Example\nDESCRIPTION: Demonstrates proper positioning of test listeners at the end of the spec definition for better readability.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/mocks.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    afterTest {\n        clearMocks(repository)  // <---- End of file, better readability\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Nesting Tests in ShouldSpec Using Context Blocks\nDESCRIPTION: ShouldSpec allows tests to be nested in context blocks for better organization. This creates a hierarchical structure that can help group related tests together.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"String.length\") {\n        should(\"return the length of the string\") {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Pitest Extension Dependency in Maven (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the Kotest Pitest extension dependency to a Maven project's pom.xml file. It includes the dependency configuration for the kotest-extensions-pitest artifact.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/pitest.md#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  ... the other Kotest dependencies like kotest-runner-junit5-jvm \n  <dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-pitest</artifactId>\n    <version>${kotest-extensions-pitest.version}</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Converting TestContainers to Kotest TestListeners using perTest extension method\nDESCRIPTION: Shows how to convert a TestContainer (GenericContainer for Redis) into a Kotest TestListener using the perTest() extension method. The container is started before each test and stopped after each test, providing isolated test environments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data Tests with Kotest in Kotlin\nDESCRIPTION: This snippet demonstrates how to create nested data tests in Kotest using withData() function. It tests multiple services against different HTTP methods, creating a cartesian join of all inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/nested.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n  val services = listOf(\n    \"http://internal.foo\",\n    \"http://internal.bar\",\n    \"http://public.baz\",\n  )\n\n  val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n   withData(services) { service ->\n     withData(methods) { method ->\n       // test service against method\n     }\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kotest Engine Configuration Properties in Kotlin\nDESCRIPTION: Object containing constant system property keys used to configure various aspects of the Kotest testing framework. Includes properties for filtering tests, controlling test execution, setting timeouts, configuring parallelism, and managing test discovery behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/config_props.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotest.core.internal\n\nobject KotestEngineProperties {\n\n   const val scriptsEnabled = \"kotest.framework.scripts.enabled\"\n\n   const val dumpConfig = \"kotest.framework.dump.config\"\n\n   /**\n    * Sets the tag expression that determines included/excluded tags.\n    */\n   const val tagExpression = \"kotest.tags\"\n\n   const val excludeTags = \"kotest.tags.exclude\"\n\n   const val includeTags = \"kotest.tags.include\"\n\n   /**\n    * A regex expression that is used to match the test [io.kotest.core.descriptors.Descriptor]'s path\n    * to determine if a test should be included in the test plan or not.\n    */\n   const val filterTests = \"kotest.filter.tests\"\n\n   /**\n    * A regex expression that is used to match the [io.kotest.mpp.bestName] of a class\n    * to determine if a spec should be included in the test plan or not.\n    */\n   const val filterSpecs = \"kotest.filter.specs\"\n\n   const val propertiesFilename = \"kotest.properties.filename\"\n\n   /**\n    * If set to true, then source ref's will not be created for test cases.\n    * This may speed up builds (as the engine will not need to create stack traces to\n    * generate line numbers) but will also reduce functionality in the intellij plugin\n    * (by limiting the ability to drill directly into the test inside a file).\n    */\n   const val disableSourceRef = \"kotest.framework.sourceref.disable\"\n\n   /**\n    * If set to true, disables the use of '!' as a prefix to disable tests.\n    */\n   const val disableBangPrefix = \"kotest.bang.disable\"\n\n   /**\n    * The default [io.kotest.core.spec.IsolationMode] for specs.\n    */\n   const val isolationMode = \"kotest.framework.isolation.mode\"\n\n   /**\n    * The default [io.kotest.core.test.AssertionMode] for tests.\n    */\n   const val assertionMode = \"kotest.framework.assertion.mode\"\n\n   /**\n    * The default parallelism for specs.\n    */\n   const val parallelism = \"kotest.framework.parallelism\"\n\n   /**\n    * The default timeout for test cases.\n    */\n   const val timeout = \"kotest.framework.timeout\"\n\n   /**\n    * The default timeout for the entire test suite.\n    */\n   const val projectTimeout = \"kotest.framework.projecttimeout\"\n\n   const val logLevel = \"kotest.framework.loglevel\"\n\n   /**\n    * The default timeout for each invocation of a test case.\n    */\n   const val invocationTimeout = \"kotest.framework.invocation.timeout\"\n\n   const val disableTestNestedJarScanning = \"kotest.framework.disable.test.nested.jar.scanning\"\n\n   const val concurrentSpecs = \"kotest.framework.spec.concurrent\"\n\n   const val concurrentTests = \"kotest.framework.test.concurrent\"\n\n   /**\n    * Disable scanning the classpath for configuration classes by setting this property to true\n    */\n   const val disableConfigurationClassPathScanning = \"kotest.framework.classpath.scanning.config.disable\"\n\n   /**\n    * Specify a fully qualified name to use for project config.\n    * This class will be instantiated via reflection.\n    */\n   const val configurationClassName = \"kotest.framework.config.fqn\"\n\n   /**\n    * Disable scanning the classpath for listeners with @AutoScan by setting this property to true\n    */\n   const val disableAutoScanClassPathScanning = \"kotest.framework.classpath.scanning.autoscan.disable\"\n\n   const val allowMultilineTestName = \"kotest.framework.testname.multiline\"\n\n   /**\n    *  If set -> filter testCases by this severity level and higher, else running all\n    */\n   const val testSeverity = \"kotest.framework.test.severity\"\n\n   /**\n    * Enable assert softly globally.\n    * */\n   const val globalAssertSoftly = \"kotest.framework.assertion.globalassertsoftly\"\n\n   /**\n    * Appends all tags associated with a test case to its display name.\n    * */\n   const val testNameAppendTags = \"kotest.framework.testname.append.tags\"\n\n   /**\n    * Controls whether classes will inherit tags from their supertypes. Default false\n    */\n   const val tagInheritance = \"kotest.framework.tag.inheritance\"\n\n   /**\n    * Controls the [io.kotest.core.names.DuplicateTestNameMode] mode.\n    */\n   const val duplicateTestNameMode = \"kotest.framework.testname.duplicate.mode\"\n\n   const val disableJarDiscovery = \"kotest.framework.discovery.jar.scan.disable\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assertion Mode Error Output\nDESCRIPTION: Shows the error message that appears when a test runs without assertions when assertion mode is enabled.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/assertion_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTest 'this test has no assertions' did not invoke any assertions\n```\n\n----------------------------------------\n\nTITLE: Using the Composed Matcher\nDESCRIPTION: Example usage of the composed Person matcher showing both successful and failing test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/data_class_matchers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nPerson(\"John\", 21, Address(\"Warsaw\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21)\nPerson(\"Sam\", 22, Address(\"Chicago\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21) // would fail\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Examples\nDESCRIPTION: Shows how to validate JSON strings against defined schemas using the shouldMatchSchema matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/json/schema.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n\"{}\".shouldMatchSchema personSchema\n\n// fails with:\n// $.name => Expected string, but was undefined\n\n\"\"\" { \"name\": \"Emil\", \"age\": 34 } \"\"\"\n// Passes, since address isn't required and `additionalProperties` are allowed\n```\n\n----------------------------------------\n\nTITLE: Configuring Failed Ignored Tests\nDESCRIPTION: Sets up the framework to treat ignored tests as failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/project_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val failOnIgnoredTests = true\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging a Spec Class in Kotest\nDESCRIPTION: Demonstrates how to use @Tags and @RequiresTag annotations to tag an entire spec class in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/tags.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Tags(\"Linux\")\nclass MyTestClass : FunSpec({\n\n  tags(UnitTest)\n\n  beforeSpec { println(\"Before\") }\n\n  test(\"A\").config(tags = setOf(Mysql)) {}\n  test(\"B\").config(tags = setOf(Postgres)) {}\n  test(\"C\") {}\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresTag(\"Linux\", \"Mysql\")\nclass MyTestClass : FunSpec()\n```\n\n----------------------------------------\n\nTITLE: Asserting Date Time Hour in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use the new kotlinx-datetime assertions module to check the hour of a LocalDateTime object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.2.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval date = LocalDateTime(2019, 2, 15, 12, 10, 0, 0)\ndate.shouldHaveHour(12)\n```\n\n----------------------------------------\n\nTITLE: Double Value Generation in Kotest\nDESCRIPTION: Methods for generating Double values with various constraints including negative values, numeric ranges, and array generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genslist.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.negativeDouble(min, max)\nArb.numericDouble(min, max)\nArb.doubleArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Test Cases in Kotlin\nDESCRIPTION: Data class definition to hold test case parameters for Pythagorean triple validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Applying @EnabledIf Annotation for Conditional Spec Execution in Kotlin\nDESCRIPTION: This snippet shows how to apply the @EnabledIf annotation with a custom EnabledCondition to multiple specs. It demonstrates conditional execution of tests based on the LinuxOnlyCondition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/annotations.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest1 : FunSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest2 : DescribeSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyWindowsTests : DescribeSpec() {\n  // tests here\n}\n```\n\n----------------------------------------\n\nTITLE: Activating SpringExtension Globally in Kotest Project Config\nDESCRIPTION: This snippet shows how to activate the SpringExtension globally for all test classes by registering it in the project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/spring.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Using KoinTest with FunSpec and Default Lifecycle Mode\nDESCRIPTION: Example of using Koin in a Kotest FunSpec. This snippet demonstrates how to implement KoinTest interface, register the KoinExtension with a module, and use dependency injection with the 'inject' delegate.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/koin.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : FunSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(myKoinModule))\n\n    val userService by inject<UserService>()\n\n    init {\n        test(\"use userService\") {\n            userService.getUser().username shouldBe \"LeoColman\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Random Integer Arbitrary Generator in Kotlin\nDESCRIPTION: Demonstrates creating a basic arbitrary generator that produces random integers between 3 and 6 using RandomSource.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/customgens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval sillyArb = arbitrary { rs: RandomSource ->\n   rs.random.nextInt(3..6)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PropTestConfig Usage in Kotest Property Test\nDESCRIPTION: Demonstrates the basic structure of using PropTestConfig in a property test to configure test behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String>(PropTestConfig(options here...)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Exhaustive Generator in Property Tests\nDESCRIPTION: Demonstrates how to use a custom exhaustive generator in a property-based test with the checkAll function. The test verifies properties of prime numbers using the custom generator of single-digit primes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/customgens.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n    \"testing single digit primes\" {\n        checkAll(singleDigitPrimes) { prime ->\n           isPrime(prime) shouldBe true\n           isPrime(prime * prime) shouldBe false\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Embedded Kafka Listener with Custom Kafka and ZooKeeper Ports\nDESCRIPTION: Shows how to create an EmbeddedKafkaListener with custom ports for both Kafka (6005) and ZooKeeper (9005) services to avoid port conflicts with other services.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/kafka.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = EmbeddedKafkaListener(kafkaPort = 6005, zookeeperPort = 9005)\n```\n\n----------------------------------------\n\nTITLE: Null Assertion Example in Kotlin\nDESCRIPTION: Shows an example of asserting that a value should not be null, used to demonstrate the need for clues in assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Generating Int Values in Kotest\nDESCRIPTION: Functions to create arbitrary Int data generators with specified ranges and edge cases. These generators can produce regular, positive, negative, non-negative, or non-positive Ints, as well as Int arrays, unsigned Int variants, and specialized generators for multiples and factors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.int(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.nonNegativeInt(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.negativeInt(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.nonPositiveInt(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.intArray(length, content)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.uInt(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.uIntArray(length, content)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.ints(range)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.multiple(k, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.factor(k)\n```\n\n----------------------------------------\n\nTITLE: Using Null Generation with Kotest Arbitraries in Kotlin\nDESCRIPTION: Examples of generating null values mixed with regular values from arbitrary instances, with optional control over null frequency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.int().orNull()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\narb.orNull(nullProbability)\n```\n\n----------------------------------------\n\nTITLE: JSON Comparison Options Configuration in Kotlin\nDESCRIPTION: Example showing how to configure JSON comparison options for custom comparison behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/json.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldEqualJson(b, compareJsonOptions { arrayOrder = ArrayOrder.Strict })\n```\n\n----------------------------------------\n\nTITLE: Generating Validated Instances in Kotest with Arrow\nDESCRIPTION: Methods for generating Validated and ValidatedNel instances using Arrow generators in Kotest, with approximately equal distribution of valid and invalid instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/arrow.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.validated(invalid, valid)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.validatedNel(invalid, valid)\n```\n\n----------------------------------------\n\nTITLE: Using withClue with String Message in Kotlin\nDESCRIPTION: Adding a string clue to an assertion to provide more context when the test fails. This improves the error message by explaining what was expected.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") {\n  user.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: BigDecimal Assertions in Kotest\nDESCRIPTION: Methods for asserting BigDecimal properties including precision, scale, comparison operations, and range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldHavePrecision(n)\nbigDecimal.shouldHaveScale(n)\nbigDecimal.shouldBePositive()\nbigDecimal.shouldBeNegative()\nbigDecimal.shouldBeZero()\nbigDecimal.shouldBeLessThan(n)\nbigDecimal.shouldBeLessThanOrEquals(n)\nbigDecimal.shouldBeGreaterThan(n)\nbigDecimal.shouldBeGreaterThanOrEquals(n)\nbigDecimal.shouldBeInRange(r)\n```\n\n----------------------------------------\n\nTITLE: Parameter and Type Assertion Functions in Kotlin\nDESCRIPTION: Functions for asserting parameter names and types in Kotlin code using Kotest framework. Includes assertions for callable parameters and KType verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nkcallable.shouldHaveParametersWithName(parameters)\nkcallable.shouldHaveParametersWithName(parameters) { block }\nktype.shouldBeOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Generating Complex Arbs with Reflective Binding in Kotest\nDESCRIPTION: This code snippet demonstrates how to use reflective Arbs in Kotest for generating test data. It defines an enum class Currency, a data class CurrencyAmount, and shows how to use Arb.bind<CurrencyAmount>() in a test context.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/reflective_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Currency {\n  USD, GBP, EUR\n}\n\ndata class CurrencyAmount(\n  val amount: Long,\n  val currency: Currency\n)\n\ncontext(\"All currencies converts to EUR\") { // In some spec\n  checkAll(Arb.bind<CurrencyAmount>()) { currencyAmount ->\n    val converted = currencyAmount.convertTo(EUR)\n    converted.currency shouldBe EUR\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing System Properties in Kotest Test\nDESCRIPTION: Kotlin code snippet demonstrating how to access a system property set in kotest.properties within a Kotest test using DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/intellij/props.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FooTest : DescribeSpec() {\n  init {\n    describe(\"after adding kotest.properties\") {\n      it(\"foo should be set\") {\n         System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TestContainers Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration for adding TestContainers support to a Kotest project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Instants using Kotlinx DateTime in Kotest\nDESCRIPTION: Generates Instant instances with the epoch randomly generated in the given range. Requires the 'io.kotest.extensions:kotest-property-datetime' module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_43\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Kotest System Property Test Filtering by Package\nDESCRIPTION: Example of using Kotest's system property to filter tests by package name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/gradle.md#2025-04-13_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*'\n```\n\n----------------------------------------\n\nTITLE: Detailed Error Output with asClue\nDESCRIPTION: Example of the detailed error message displayed when using asClue with a custom object in a failing assertion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/clues.md#2025-04-13_snippet_7\n\nLANGUAGE: plain\nCODE:\n```\nHttpResponse(status=404, body=the content)\nExpected :200\nActual   :404\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Assert Softly in Kotest\nDESCRIPTION: Enables assert softly globally for all tests, which allows batching multiple assertion failures into a single test failure rather than stopping at the first failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/project_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val globalAssertSoftly = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generator in Kotest Property Test\nDESCRIPTION: Demonstrates how to use a custom exhaustive generator in a Kotest property test to verify prime number properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/customgens.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n    \"testing single digit primes\" {\n        checkAll(singleDigitPrimes) { prime ->\n           isPrime(prime) shouldBe true\n           isPrime(prime * prime) shouldBe false\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Test Output with displayFullTestPath Enabled\nDESCRIPTION: Example of how test names appear in output when the 'displayFullTestPath' configuration is enabled. Shows the concatenation of the entire test path in the output format.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/output.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMyTests. describe 1 - test 1\nMyTests. describe 1 - test 2\n```\n\n----------------------------------------\n\nTITLE: Kotlin Callable Member Matchers\nDESCRIPTION: Assertion functions for testing Kotlin callable members including visibility, modifiers and parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nkcallable.shouldHaveVisibility(visibility)\nkcallable.shouldBeFinal()\nkcallable.shouldBeOpen()\nkcallable.shouldBeAbstract()\nkcallable.shouldBeSuspendable()\nkcallable.shouldAcceptParameters(parameters)\nkcallable.shouldAcceptParameters(parameters) { block }\nkcallable.shouldHaveParametersWithName(parameters)\nkcallable.shouldHaveParametersWithName(parameters) { block }\nktype.shouldBeOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Spring Constructor Injection Test in Kotlin\nDESCRIPTION: Demonstrates constructor injection in KotlinTest using the SpringAutowireConstructorExtension with a Spring context configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec({\n  \"SpringListener\" should {\n    \"have autowired the service\" {\n      service.repository.findUser().name shouldBe \"system_user\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Instance Per Leaf Mode with Counter\nDESCRIPTION: Demonstrates state isolation in InstancePerLeaf mode using an atomic counter variable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/isolation_mode.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Float Values in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces Float values within a specified range, including various edge cases if within range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.float(min, max)\n```\n\n----------------------------------------\n\nTITLE: Enabling Kotest Config Dump in Gradle\nDESCRIPTION: Shows how to enable configuration dumping by setting a system property in the Gradle test task. This allows Kotest to print its configuration at startup.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/config_dump.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntest {\n  systemProperty \"kotest.framework.dump.config\", \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Kotest Spec and Test Filters\nDESCRIPTION: This command demonstrates how to combine both spec and test filters in Kotest. It executes only tests containing 'Foo' in their names within the 'com.somepackage' and nested packages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/gradle.md#2025-04-13_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*' -Dkotest.filter.tests='*Foo*'\n```\n\n----------------------------------------\n\nTITLE: CSV Data Source Example in KotlinTest\nDESCRIPTION: Demonstrates loading data from CSV files for table testing with type-safe row mapping\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CsvDataSourceTest : WordSpec() {\n  init {\n    \"CsvDataSource\" should {\n      \"read data from csv file\" {\n        val source = CsvDataSource(javaClass.getResourceAsStream(\"/user_data.csv\"), CsvFormat())\n\n        val table = source.createTable<Long, String, String>(\n            { it: Record -> Row3(it.getLong(\"id\"), it.getString(\"name\"), it.getString(\"location\")) },\n            { it: Array<String> -> Headers3(it[0], it[1], it[2]) }\n        )\n\n        forAll(table) { a, b, c ->\n          a shouldBe gt(0)\n          b shouldNotBe null\n          c shouldNotBe null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Target Configuration for Multiplatform\nDESCRIPTION: Configures JavaScript-specific dependencies for Kotest in a Multiplatform project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/quick_start.mdx#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-assertions-core:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML-Specific Matchers in KotlinTest with Jsoup\nDESCRIPTION: These matchers provide convenient assertions for common HTML attributes and relationships, including id, class, src, href, and children with specific properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/jsoup.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nelement.shouldHaveId(id)\nelement.shouldHaveClass(class)\nelement.shouldHaveSrc(src)\nelement.shouldHaveHref(href)\nelement.shouldHaveElementWithId(id)\nelement.shouldHaveChildWithClass(id)\n```\n\n----------------------------------------\n\nTITLE: Boolean Generators in Kotest\nDESCRIPTION: Generators for producing boolean values and boolean arrays with customizable length and content.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.boolean()\nArb.booleanArray(length, content)\nExhaustive.boolean()\n```\n\n----------------------------------------\n\nTITLE: Double/Float Value Assertions in Kotlin with Kotest\nDESCRIPTION: Extension methods for asserting properties of double or float values, including comparison operations, sign checking, and special value verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBe(value plusOrMinus(tolerance))\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeBetween(x, y)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeLessThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeLessThanOrEqual(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeGreaterThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeGreaterThanOrEqual(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBePositive()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeNegative()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBePositiveInfinity()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeNegativeInfinity()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeNaN()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: FlatMapping Kotest Arbitrary Values\nDESCRIPTION: Shows how to create dependent arbitraries where subsequent values depend on previous emissions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genops.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval dependentArbs: Arb<String> = Arb.of(\"foo\", \"bar\").flatMap { prefix ->\n   Arb.int(1..10).map { integer ->\n      \"${prefix}-${integer}\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tags in Kotlin with Kotest\nDESCRIPTION: Creating custom tag objects by inheriting from the io.kotest.core.Tag class to categorize tests by operating system or other attributes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/tags.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n```\n\n----------------------------------------\n\nTITLE: Property Testing with KotlinX DateTime\nDESCRIPTION: Example of using property test generators with kotlinx datetime library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.3.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Arb.datetime(1987..1994)) { date ->\n   isValidStarTrekTngSeason(date) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Array Items in JSON Schema\nDESCRIPTION: Demonstrates how to create a schema that ensures array elements are unique.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/schema.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval uniqueArray = jsonSchema {\n  array(uniqueItems = true) { number() }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexicographic Test Ordering in Kotest\nDESCRIPTION: Demonstrates lexicographic test ordering where tests are executed in alphabetical order based on their names. This provides a predictable but name-dependent execution order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_ordering.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LexicographicSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Lexicographic\n\n    init {\n      \"foo\" {\n        // I run second as bar < foo\n      }\n\n      \"bar\" {\n        // I run first as bar < foo\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SpringListener for a Specific Class in Kotlin\nDESCRIPTION: Shows how to register SpringListener for a specific test class by overriding the listeners() function in a spec class. This allows Spring autowiring in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_40\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : ParentSpec() {\n    override fun listeners() = listOf(SpringListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Wide Timeout Settings\nDESCRIPTION: Shows how to set default timeout values for all tests in a project using ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig {\n    override val timeout = 100.milliseconds\n    override val invocationTimeout = 33.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data-Driven Tests with Context\nDESCRIPTION: Example showing data-driven tests nested within a context block using FunSpec, testing multiple Pythagorean triple combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  context(\"Pythag triples tests\") {\n    withData(\n      PythagTriple(3, 4, 5),\n      PythagTriple(6, 8, 10),\n      PythagTriple(8, 15, 17),\n      PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n      isPythagTriple(a, b, c) shouldBe true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Exhaustive Long Sequence in Kotlin using Kotest\nDESCRIPTION: Creates an Exhaustive generator that produces all Long values within a specified range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.longs(range)\n```\n\n----------------------------------------\n\nTITLE: Instance Per Leaf Mode Example in Kotest\nDESCRIPTION: Example showing InstancePerLeaf mode where only leaf test cases get new instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/isolation_mode.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unhelpful Error Output Example\nDESCRIPTION: The error output when a null check fails, showing minimal information that doesn't help with debugging.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n<null> should not equal <null>\n```\n\n----------------------------------------\n\nTITLE: Array Length Constraints in JSON Schema\nDESCRIPTION: Example of defining array length constraints using minItems and maxItems in a JSON schema.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/schema.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval lengthBoundedSchema = jsonSchema {\n  array(minItems = 0, maxItems = 1) { number() }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor HTTP Client\nDESCRIPTION: Example demonstrating how to test HTTP responses using Kotest assertions with the Ktor HTTP client.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/ktor.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\nval response = client.post(\"http://mydomain.com/foo\")\nresponse.shouldHaveStatus(HttpStatusCode.OK)\nresponse.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n\n```\n\n----------------------------------------\n\nTITLE: Applying @EnabledIf Conditional Execution in Kotest Tests\nDESCRIPTION: Shows how to apply the @EnabledIf annotation with a custom condition to multiple test specifications. This example demonstrates applying LinuxOnlyCondition to different test classes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/annotations.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest1 : FunSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest2 : DescribeSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyWindowsTests : DescribeSpec() {\n  // tests here\n}\n```\n\n----------------------------------------\n\nTITLE: Generating ULong Values in Kotlin with Kotest\nDESCRIPTION: Produces an Arb that generates ULong values within a specified range. Includes edge cases like min, 1, and max if they fall within the range. Useful for testing unsigned long integer operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.uLong(min, max)\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Seed in Kotest Property Test\nDESCRIPTION: Demonstrates how to manually specify a seed value for a property test using PropTestConfig. The example shows a string concatenation property test with a fixed seed value of 127305235.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/seed.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample : StringSpec({\n  \"String size\" {\n    forAll<String, String>(PropTestConfig(seed = 127305235)) { a, b ->\n      (a + b).length == a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Auto-Closing Resources in Kotlin Tests\nDESCRIPTION: Shows how to use autoClose for automatic resource management in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Default Test Case Config in Kotlin\nDESCRIPTION: Shows the deprecated way of setting default test case configuration in a Kotest spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_5.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n    override fun defaultTestCaseConfig() = TestCaseConfig(tags = setOf(Foo, Bar), timeout = 100.seconds)\n    test(\"foo\") {\n      // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CsvDataSource for Table-Driven Testing in Kotlin\nDESCRIPTION: Shows how to use CsvDataSource to load test data from a CSV file for table-driven testing, processing each record into rows for validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CsvDataSourceTest : WordSpec() {\n  init {\n\n    \"CsvDataSource\" should {\n      \"read data from csv file\" {\n\n        val source = CsvDataSource(javaClass.getResourceAsStream(\"/user_data.csv\"), CsvFormat())\n\n        val table = source.createTable<Long, String, String>(\n          { it: Record -> Row3(it.getLong(\"id\"), it.getString(\"name\"), it.getString(\"location\")) },\n          { it: Array<String> -> Headers3(it[0], it[1], it[2]) }\n        )\n\n        forAll(table) { a, b, c ->\n          a shouldBe gt(0)\n          b shouldNotBe null\n          c shouldNotBe null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reflective Arbs with Currency Conversion in Kotlin\nDESCRIPTION: This snippet shows how to use reflective Arbs in Kotest for testing currency conversions. It defines a Currency enum and CurrencyAmount class, then uses Arb.bind to generate and filter CurrencyAmount instances for property-based testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/reflective_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Currency {\n  USD, GBP, EUR\n}\n\nclass CurrencyAmount(\n  val amount: Long,\n  val currency: Currency\n)\n\ncontext(\"Currencies converts to EUR\") { // In some spec\n  checkAll(Arb.bind<CurrencyAmount>().filter { it.currency != EUR }) { currencyAmount ->\n    val converted = currencyAmount.convertTo(EUR)\n    converted.currency shouldBe EUR\n  }\n}\n\ncontext(\"Converting to a currency and back yields the same amount\") { // In some spec\n  checkAll<CurrencyAmount, Currency>() { currencyAmount, currency ->\n    val converted = currencyAmount.convertTo(currency).convertTo(currencyAmount.currency)\n    converted.currency shouldBe currencyAmount.currency\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Manipulation in Kotlin Tests\nDESCRIPTION: Demonstrates how to mock system environment variables using withEnvironment extension function. Requires JVM argument configuration for JDK17 compatibility.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/system.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(\"FooKey\", \"BarValue\") {\n    System.getenv(\"FooKey\") shouldBe \"BarValue\" // System environment overridden!\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n  jvmArgs(\"--add-opens=java.base/java.util=ALL-UNNAMED\")\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Overall and Invocation Timeouts in Kotest DescribeSpec\nDESCRIPTION: Demonstrates how to combine an overall test timeout with an invocation timeout for a test that runs multiple times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(timeout = 100.milliseconds, invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Database Initialization with Single Script\nDESCRIPTION: Example of initializing a database container with a single SQL script.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n         withInitScript(\"init.sql\")\n         startupAttempts = 1\n         withUrlParam(\"connectionTimeZone\", \"Z\")\n         withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n      }\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions with Target\nDESCRIPTION: Example of using soft assertions with a specific test target.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly(foo) {\n    shouldNotEndWith(\"b\")\n    length shouldBe 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property-based Testing with String Length in Kotlin\nDESCRIPTION: Demonstrates how to use KotlinTest's property-based testing feature to verify that the length of concatenated strings equals the sum of their individual lengths. The test runs 1000 times with random String combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n  init {\n\n    \"String size\" {\n      assertAll({ a: String, b: String ->\n        (a + b).length shouldBe a.length + b.length\n      })\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Isolation Mode in Project Config for Kotlin\nDESCRIPTION: This snippet demonstrates how to set the global isolation mode in the project configuration for Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/isolation_mode.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig: AbstractProjectConfig() {\n   override val isolationMode = IsolationMode.InstancePerLeaf\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Tests with xit in Kotest DescribeSpec\nDESCRIPTION: This example shows how to use 'xit' to disable a specific test within an enabled describe block in a Kotest DescribeSpec. The 'x' prefix on 'it' prevents only that test from running, while other tests in the block remain enabled.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/xmethods.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  describe(\"this block is enabled\") {\n    xit(\"will not run\") {\n      // disabled test\n    }\n    it(\"will run\") {\n       // enabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using Element Matchers in Kotlin with KotlinTest Jsoup\nDESCRIPTION: These matchers are used to assert properties of individual Jsoup elements. They check for child elements, text content, and attribute presence and values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/jsoup.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveChildWithTag(tag)\nelement.shouldHaveText(text)\nelement.shouldHaveAttribute(name)\nelement.shouldHaveAttributeValue(name, value)\n```\n\n----------------------------------------\n\nTITLE: Implementing Exhaustive Property Testing in Kotest\nDESCRIPTION: Example of using exhaustive generators with checkAll to test all possible combinations of values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.2.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = checkAll(\n    Exhaustive.ints(0..5),\n    Exhaustive.ints(0..5),\n    Exhaustive.ints(0..5)\n) { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Pythagorean Triple Test Cases in Kotlin\nDESCRIPTION: Creates a data class to represent test cases for Pythagorean triples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.3.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast at Parent Test Level in Kotest\nDESCRIPTION: This snippet demonstrates how to enable fail fast for a parent test context in Kotest. When a test fails within this context, subsequent tests are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/fail_fast.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n      context(\"context with fail fast enabled\").config(failfast = true) {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Kafka with Custom Kafka and Zookeeper Ports\nDESCRIPTION: Shows how to create an embedded Kafka listener with both custom Kafka and Zookeeper ports using an alternative constructor overload.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/kafka.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = EmbeddedKafkaListener(kafkaPort = 6005, zookeeperPort = 9005)\n```\n\n----------------------------------------\n\nTITLE: Validated Type Matchers in Kotest Arrow Extension\nDESCRIPTION: Matchers for testing Arrow's Validated type, providing assertions for both Valid and Invalid variants with optional value verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Validated                     |                                                                             |\n|-------------------------------|-----------------------------------------------------------------------------|\n| `validated.shouldBeValid()`   | Asserts that the validated is of type Valid and returns the Valid value     |\n| `validated.shouldBeValid(v)`  | Asserts that the validated is of type Valid with specific value v           |\n| `validated.shouldBeInvalid()` | Asserts that the validated is of type Invalid and returns the Invalid value |\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode via Function Override in Kotest\nDESCRIPTION: Demonstrates setting isolation mode by overriding the isolationMode() function in a WordSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/isolation_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n  override fun isolationMode() = IsolationMode.SingleInstance\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Negated Matchers in Kotest\nDESCRIPTION: Example of a negated matcher function in Kotest, showing how each assertion function has an equivalent negated version with 'Not' in the name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldNotStartWith(\"boo\")\n```\n\n----------------------------------------\n\nTITLE: Assertion Error Output Example\nDESCRIPTION: Example output of a failed assertion showing the expected and actual values, which demonstrates how Kotest formats error messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nexpected: \"sksamuel\" but was: \"sam@myemailaddress.com\"\n```\n\n----------------------------------------\n\nTITLE: Selective Comparison Assertions in Kotest\nDESCRIPTION: Methods for comparing objects based on specific fields or ignoring certain properties during comparison.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_36\n\nLANGUAGE: Kotlin\nCODE:\n```\nany.shouldBeEqualToUsingFields(other: T, vararg properties: KProperty<*>)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nany.shouldBeEqualToIgnoringFields(other: T, vararg properties: KProperty<*>)\n```\n\n----------------------------------------\n\nTITLE: Generating Durations with Kotest Arb\nDESCRIPTION: Function for generating random durations within a specified range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_34\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.duration(ranges)\n```\n\n----------------------------------------\n\nTITLE: Using shouldBeIn and shouldNotBeIn matchers with Kotlin ranges\nDESCRIPTION: These matchers allow validating if a value is contained within a range or not. The comparison is done by value rather than by reference. They work with both ClosedRange and OpenEndRange types from Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/ranges.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nvalue.shouldBeIn(range)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nvalue.shouldNotBeIn(range)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout in Kotest FunSpec\nDESCRIPTION: This snippet demonstrates how to set a test timeout for a single test using the config method in a FunSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n   test(\"this test will timeout quickly!\").config(timeout = 100.milliseconds) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf with Counter Example in Kotlin\nDESCRIPTION: This example shows how variables are reset in InstancePerLeaf mode using an atomic counter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/isolation_mode.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Table from a File in Kotest\nDESCRIPTION: This code demonstrates how to read a table from a .table file in Kotest. It specifies the headers, the source file, and a transform function to convert string values to the appropriate types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/table_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval tableFromFile = table(\n    headers = headers(\"id\", \"username\", \"fullName\"),\n    source = testResources.resolve(\"users.table\"),\n    transform = { a: String, b: String, c: String ->\n        row(a.toInt(), b, c)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Test Lifecycle Mode in Kotest\nDESCRIPTION: Demonstrates how to configure the Spring test lifecycle mode for test method callbacks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/spring.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringTestExtension(SpringTestLifecycleMode.Root))\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Overall and Invocation Timeouts\nDESCRIPTION: Shows how to combine both overall test timeout and per-invocation timeouts for multiple test runs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(timeout = 100.milliseconds, invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using EmbeddedKafkaListener with Custom Port (Kotlin)\nDESCRIPTION: Demonstrates how to create and use an EmbeddedKafkaListener instance with a custom port. This allows specifying the port on which the Kafka instance will run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/kafka.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaCustomPortTest : FunSpec({\n\n   val listener = EmbeddedKafkaListener(5678)\n   listener(listener)\n\n   test(\"send / receive\") {\n\n      val producer = listener.stringStringProducer()\n      producer.send(ProducerRecord(\"foo\", \"a\"))\n      producer.close()\n\n      val consumer = listener.stringStringConsumer(\"foo\")\n      eventually(10.seconds) {\n         consumer.poll(1000).first().value() shouldBe \"a\"\n      }\n      consumer.close()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Assertions in Kotest\nDESCRIPTION: Shows how to use soft assertions to collect multiple assertion failures in a single test run.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Regional Data Generator\nDESCRIPTION: Generates locale codes and timezone identifiers for testing regional functionality\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.locale()\nArb.timezoneCodeThree()\n```\n\n----------------------------------------\n\nTITLE: Runtime Tag Expression in Kotlin\nDESCRIPTION: Demonstrates how to set tag expressions programmatically at runtime using RuntimeTagExpressionExtension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/tags.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nRuntimeTagExpressionExtension.expression = \"Linux & !Database\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Test Configuration via Override\nDESCRIPTION: Example of setting default test configuration for all tests in a spec by overriding the defaultTestCaseConfig function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_case_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Extra Arbs Package\nDESCRIPTION: Instructions for adding the Kotest extra Arbs package to your project build file. This package provides additional Arbitrary generators for property-based testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/extra_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\nTo use, add `io.kotest.extensions:kotest-property-arbs:version` to your build.\n:::\n```\n\n----------------------------------------\n\nTITLE: Tagging All Tests in a Spec\nDESCRIPTION: Example of applying tags to all tests within a spec using the tags function\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/tags.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n\n  tags(Linux, Mysql)\n\n  test(\"my test\") { } // automatically marked with the above tags\n})\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching TestResult in Kotlin\nDESCRIPTION: Example showing the new preferred way to match TestResult ADT instead of using the deprecated TestStatus enum in AfterTestListener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_5.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (result) {\n  is TestResult.Success -> ...\n  is TestResult.Error -> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Testcontainers to Kotest TestListener with perTest Extension\nDESCRIPTION: This example demonstrates how to convert a Redis Docker container into a Kotest TestListener using the perTest() extension method. The container will start before each test and stop after each test completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Domain Objects as Clues in Kotlin\nDESCRIPTION: Example of using a domain object as a clue to provide structured information in the error message, which is particularly useful for complex objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class HttpResponse(val status: Int, val body: String)\n\nval response = HttpResponse(404, \"the content\")\n\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable Function-Based Lifecycle Hooks\nDESCRIPTION: Shows how to create reusable lifecycle hook functions that can be shared across multiple test specs using the BeforeTest type alias.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/lifecycle_hooks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval startTest: BeforeTest = {\n   println(\"Starting a test $it\")\n}\n\nclass TestSpec : WordSpec({\n\n   // used once\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"be alive\" {\n         println(\"Johnny5 is alive!\")\n      }\n   }\n})\n\nclass OtherSpec : WordSpec({\n\n   // used twice\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"fail\" {\n         fail(\"boom\")\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Future and Thread State Assertions in Kotest\nDESCRIPTION: Assertions for checking Future completion states and Thread lifecycle states.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nfuture.shouldBeCancelled()\nfuture.shouldBeCompleted()\nfuture.shouldBeCompletedExceptionally()\nfuture.shouldCompleteExceptionallyWith(throwable)\n\nthread.shouldBeBlocked()\nthread.shouldBeDaemon()\nthread.shouldBeAlive()\nthread.shouldBeTerminated()\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf Isolation Mode Example in Kotlin\nDESCRIPTION: Illustrates InstancePerLeaf isolation mode where a new spec instance is created for every leaf test case, excluding inner contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/isolation_mode.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Kotest Property Testing Example\nDESCRIPTION: An example of property testing pattern using Kotest's Arb generators for handling control characters\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Reverting to historic behavior\nCodepoint.printableAscii() // For 5.6.2+\n\n// Previous 5.6.0-5.6.1 behavior included control chars\nCodepoint.ascii()\n```\n\n----------------------------------------\n\nTITLE: Preventing System.out and System.err Usage\nDESCRIPTION: Shows how to use listeners that prevent code from writing directly to System.out or System.err.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n```\n\n----------------------------------------\n\nTITLE: Implementing the Matcher Interface in Kotlin\nDESCRIPTION: Shows the Matcher interface definition in Kotest, which is the foundation for creating custom matchers. It specifies a single method 'test' that returns a MatcherResult.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/custom.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Matcher<in T> {\n  fun test(value: T): MatcherResult\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Overall and Invocation Timeouts\nDESCRIPTION: Shows how to combine both overall test timeout and per-invocation timeout in a single test configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(timeout = 100.milliseconds, invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Timeout in Kotest\nDESCRIPTION: Setting a timeout for a test case, which applies to all invocations of the test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds) { }\n```\n\n----------------------------------------\n\nTITLE: Generating Email Local Parts in Kotest\nDESCRIPTION: Generates random local parts for email addresses.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.emailLocalPart()\n```\n\n----------------------------------------\n\nTITLE: Basic Value Assertion in Kotlin using Kotest\nDESCRIPTION: Demonstrates the basic usage of Kotest's shouldBe matcher to assert equality of values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nname shouldBe \"sam\"\n```\n\n----------------------------------------\n\nTITLE: Reusable Callbacks in Kotest\nDESCRIPTION: Demonstrates how to create reusable callback functions that can be shared across multiple test files.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/writing_tests.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval resetDatabase: BeforeTest = {\n  // truncate all tables here\n}\n\nclass ReusableCallbacks : FunSpec({\n\n   beforeTest(resetDatabase)\n\n   test(\"this test will have a sparkling clean database!\") {\n       // test logic here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Kotest Arb Generators\nDESCRIPTION: Shows how to merge two Arb generators for equal sampling probability and demonstrates usage with a practical example.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genops.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval merged = arbA.merge(arbB)\n\nval a = arbitrary { \"a\" }\nval b = arbitrary { \"b\" }\nval ab = a.merge(b)\n\nprintln(ab.take(1000).groupingBy { it }.eachCount())\n// {a=493, b=507}\n```\n\n----------------------------------------\n\nTITLE: Using AnnotationSpec in KotlinTest for JUnit-like testing\nDESCRIPTION: Example of AnnotationSpec which provides a JUnit-like approach in KotlinTest where tests are defined as functions annotated with @Test. This helps with migration from JUnit.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n  @Test\n  fun test1() {\n\n  }\n\n  @Test\n  fun test2() {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Kotest Arb Generators\nDESCRIPTION: Examples of merging two arbitraries for equal sampling, including a practical example with string generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genops.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval merged = arbA.merge(arbB)\n\nval a = arbitrary { \"a\" }\nval b = arbitrary { \"b\" }\nval ab = a.merge(b)\n\nprintln(ab.take(1000).groupingBy { it }.eachCount())\n// {a=493, b=507}\n```\n\n----------------------------------------\n\nTITLE: Table File Format Example\nDESCRIPTION: Example of the .table file format which uses pipe separators and requires headers. The format supports comments and blank lines.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/table_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\nid | username | fullName\n4  | jmfayard | Jean-Michel Fayard\n6  | louis    | Louis Caugnault\n```\n\n----------------------------------------\n\nTITLE: Asserting Timestamp Properties in Kotlin with Kotest\nDESCRIPTION: This snippet shows assertion functions for Timestamp in Kotest. It includes checks for timestamp comparisons and ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\ntimestamp.shouldBeAfter(anotherTimestamp)\ntimestamp.shouldBeBefore(anotherTimestamp)\ntimestamp.shouldBeBetween(fromTimestamp, toTimestamp)\n```\n\n----------------------------------------\n\nTITLE: Matching TestResult in Kotlin for Kotest AfterTestListener\nDESCRIPTION: Example of how to match TestResult types in an AfterTestListener after the deprecation of TestStatus enum. This snippet demonstrates matching on Success and Error results.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_5.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (result) {\n  is TestResult.Success -> ...\n  is TestResult.Error -> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Optional Properties in Kotlin with Kotest\nDESCRIPTION: Functions for checking the presence or absence of values in Optional objects, with support for operating on present values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\noptional.shouldBePresent()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\noptional.shouldBePresent { value -> .. }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\noptional.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Custom Iterations in Property Testing\nDESCRIPTION: Example of specifying custom iteration count (10,000) for property tests using checkAll function with Double parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/test_functions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"a many iterations test\" {\n      checkAll<Double, Double>(10_000) { a, b ->\n         // test here\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Global Isolation Mode Configuration\nDESCRIPTION: Shows how to configure isolation mode globally using project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/isolation_mode.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig: AbstractProjectConfig() {\n   override val isolationMode = IsolationMode.InstancePerLeaf\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Equality Example - Formatted JSON\nDESCRIPTION: Example of formatted JSON structure that demonstrates the order-independent equality matching.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/content.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"sam\",\n   \"location\": \"chicago\",\n   \"age\" : 41\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually Exception Handling Configuration in Kotlin\nDESCRIPTION: Configuration example showing how to specify which exceptions should be caught and ignored by eventually.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/eventually.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  expectedExceptions = setOf(UserNotFoundException::class)\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Max Discard Percentage in Kotest Property Testing (Kotlin)\nDESCRIPTION: Shows how to adjust the maximum discard percentage in Kotest property testing to allow for higher rates of filtered inputs. This is useful when filtering is necessary but exceeds the default 10% threshold.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/assumptions.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<Int, Int>(PropTestConfig(maxDiscardPercentage = 55)) { a, b ->\n  withAssumptions(a % 2 == 0) {\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to kotest.properties File\nDESCRIPTION: Example of a simple key-value pair in the kotest.properties file that will be loaded as system properties before test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/intellij/props.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfoo=bar\n```\n\n----------------------------------------\n\nTITLE: Using asClue Extension Function in Kotlin\nDESCRIPTION: Demonstrates the use of 'asClue' extension function to create a clue from any object or lambda expression.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/clues.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Name should be present (user_id=${user.id})\" }.asClue {\nuser.name shouldNotBe null\n}\n```\n\n----------------------------------------\n\nTITLE: Using Compiler Matchers in Kotlin Tests\nDESCRIPTION: Demonstrates how to use shouldCompile() and shouldNotCompile() matchers in a Kotest StringSpec test class. It shows assertions for both string code snippets and files.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/compiler.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CompilationTest: StringSpec() {\n    init {\n        \"shouldCompile test\" {\n            val codeSnippet = \"\"\" val aString: String = \"A valid assignment\" \"\"\".trimMargin()\n\n            codeSnippet.shouldCompile()\n            File(\"SourceFile.kt\").shouldCompile()\n        }\n\n        \"shouldNotCompile test\" {\n            val codeSnippet = \"\"\" val aInteger: Int = \"A invalid assignment\" \"\"\".trimMargin()\n\n            codeSnippet.shouldNotCompile()\n            File(\"SourceFile.kt\").shouldNotCompile()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Compiler Matchers\nDESCRIPTION: Example test class demonstrating how to use compiler matchers to verify both valid and invalid Kotlin code compilation. Shows usage of shouldCompile() and shouldNotCompile() matchers with both string and file inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/compiler.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CompilationTest: StringSpec() {\n        init {\n            \"shouldCompile test\" {\n                val codeSnippet = \"\"\" val aString: String = \"A valid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldCompile()\n                File(\"SourceFile.kt\").shouldCompile()\n            }\n\n            \"shouldNotCompile test\" {\n                val codeSnippet = \"\"\" val aInteger: Int = \"A invalid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldNotCompile()\n                File(\"SourceFile.kt\").shouldNotCompile()\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Testing Any Exception with shouldThrowAny\nDESCRIPTION: Shows how to test that any exception is thrown using shouldThrowAny. This is useful when you want to verify that an exception occurs but don't care about its specific type.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/exceptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowAny {\n  // test here can throw any type of Throwable!\n}\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Matchers\nDESCRIPTION: Demonstrates property testing using assertAll with matchers for more expressive assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  assertAll(Gen.string(), Gen.string(), { a, b ->\n    a + b should startWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Embedded Kafka Listener with Custom Kafka and Zookeeper Ports\nDESCRIPTION: Shows how to create an EmbeddedKafkaListener instance with custom ports for both Kafka and Zookeeper.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/kafka.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = EmbeddedKafkaListener(kafkaPort = 6005, zookeeperPort = 9005)\n```\n\n----------------------------------------\n\nTITLE: Adding KotlinTest JUnit5 Runner to Maven\nDESCRIPTION: Maven dependency declaration for adding the KotlinTest JUnit5 runner to your project, using version 3.1.8 with test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotlintest</groupId>\n    <artifactId>kotlintest-runner-junit5</artifactId>\n    <version>3.1.8</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Combining Overall Test Timeout with Invocation Timeout in Kotest\nDESCRIPTION: This snippet shows how to combine an overall test timeout with an invocation timeout for multiple test runs in Kotest. The overall timeout is 100 milliseconds, with each invocation limited to 60 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(timeout = 100.milliseconds, invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using Coroutine Scopes in Kotest Tests\nDESCRIPTION: Demonstrates the use of coroutine scopes in nested test structures in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.1.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndescribe(\"some test\") {\n launch {\n    delay(100)\n    it(\"should do something\") {\n       launch {\n          delay(100)\n       }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Equality Example - Compact JSON\nDESCRIPTION: Example of compact JSON structure that is considered equal to the formatted version despite different formatting and key order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/content.md#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\" : 41, \"name\": \"sam\", \"location\": \"chicago\" }\n```\n\n----------------------------------------\n\nTITLE: Iterator Assertions in Kotest\nDESCRIPTION: Assertions for checking the state of iterators in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\niterator.shouldBeEmpty()\niterator.shouldHaveNext()\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Invocations in Kotest\nDESCRIPTION: This snippet illustrates how to configure a test to run multiple times using the 'invocations' property in Kotest. The test is set to run three times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for System Properties in KotlinTest with Kotlin DSL\nDESCRIPTION: Shows how to configure Gradle using Kotlin DSL to propagate system properties to test executors for tag-based test filtering.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().map { it.key.toString() to it.value }.toMap()\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging All Tests in a Spec\nDESCRIPTION: Shows how to apply tags to all tests within a spec class using the tags function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/tags.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n\n  tags(Linux, Mysql)\n\n  test(\"my test\") { } // automatically marked with the above tags\n})\n```\n\n----------------------------------------\n\nTITLE: Element Matchers in Jsoup KotlinTest\nDESCRIPTION: Basic element matchers to verify element properties like child tags, text content, and attributes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/jsoup.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveChildWithTag(tag)\nelement.shouldHaveText(text)\nelement.shouldHaveAttribute(name)\nelement.shouldHaveAttributeValue(name, value)\n```\n\n----------------------------------------\n\nTITLE: Generating Maps from Key and Value Arbitraries in Kotlin\nDESCRIPTION: Creates random maps with size constraints where keys and values are generated from separate arbitraries. The resulting map size will be between minSize and maxSize.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.map(Arb<K>, Arb<V>, minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Defining IndexedSeq Interface in Kotlin\nDESCRIPTION: Interface definition for an indexed sequence data structure with basic operations like size, add, and contains.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_factories.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface IndexedSeq<T> {\n\n    // returns the size of t\n    fun size(): Int\n\n    // returns a new seq with t added\n    fun add(t: T): IndexedSeq<T>\n\n    // returns true if this seq contains t\n    fun contains(t: T): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing System Environment Test Listener in Kotlin\nDESCRIPTION: Demonstrates how to use the SystemEnvironmentTestListener to apply environment variable changes at the Spec/Per test level in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemEnvironmentTestListener(\"foo\", \"bar\"))\n\n    init {\n      \"MyTest\" {\n        System.getenv(\"foo\") shouldBe \"bar\"\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Isolation Mode in Kotest\nDESCRIPTION: Isolation mode has been added to provide finer control over the instances in which tests execute. This allows for more precise management of test isolation and shared state.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyTest : StringSpec({\n  isolation = IsolationMode.InstancePerLeaf\n  \n  \"test 1\" {\n    // This test runs in its own instance\n  }\n  \n  \"test 2\" {\n    // This test runs in a separate instance\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Tag Extension Implementation\nDESCRIPTION: Example of implementing a TagExtension for dynamic tag management based on environment conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Hadoop : Tag()\n\nobject HadoopTagExtension : TagExtension {\n  override fun tags(): Tags =\n      if (System.getenv().containsKey(\"HADOOP_HOME\")) Tags.include(Hadoop) else Tags.exclude(Hadoop)\n}\n\nobject MyProjectConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(HadoopTagExtension)\n}\n\nobject SimpleTest : StringSpec({\n  \"simple test\" {\n    // this test would only run on environments that have hadoop configured\n  }.config(tags = setOf(Hadoop))\n})\n```\n\n----------------------------------------\n\nTITLE: Byte Generation with Kotest in Kotlin\nDESCRIPTION: Methods for generating byte values and arrays with support for signed and unsigned bytes, with control over ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.byte(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveByte(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.negativeByte(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.byteArray(length, content)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.uByte(min, max)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.uByteArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Container with Single Script in Kotlin\nDESCRIPTION: Shows how to initialize a database container using a single init script in the TestContainer configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n         withInitScript(\"init.sql\")\n         startupAttempts = 1\n         withUrlParam(\"connectionTimeZone\", \"Z\")\n         withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Multiplatform Plugin (Gradle)\nDESCRIPTION: Adds the Kotest multiplatform Gradle plugin to a project. This is used for configuring Kotest in multiplatform projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TagExtension in Kotest\nDESCRIPTION: Demonstrates how to implement and use a TagExtension in Kotest to dynamically determine active tags based on runtime conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Hadoop : Tag()\n\nobject HadoopTagExtension : TagExtension {\n  override fun tags(): Tags =\n      if (System.getenv().containsKey(\"HADOOP_HOME\")) Tags.include(Hadoop) else Tags.exclude(Hadoop)\n}\n\nobject MyProjectConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(HadoopTagExtension)\n}\n\nobject SimpleTest : StringSpec({\n  \"simple test\" {\n    // this test would only run on environments that have hadoop configured\n  }.config(tags = setOf(Hadoop))\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Invocation Timeout\nDESCRIPTION: Example of setting an invocation timeout at the spec level that applies to all tests in the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   invocationTimeout = 25.milliseconds\n\n   test(\"foo\") {\n      // test here\n   }\n\n   test(\"bar\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Collecting Statistics on Enum Values in Kotest Property Tests\nDESCRIPTION: Demonstrates how to collect statistics on RoundingMode enum values used in BigDecimal operations within a Kotest property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/statistics.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n  collect(mode)\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Pattern-Matched Strings in Kotlin with Kotest\nDESCRIPTION: Utilizes Arb.stringPattern() to generate strings that match a given pattern using the RgxGen library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.stringPattern(pattern)\n```\n\n----------------------------------------\n\nTITLE: Adding Pitest Kotest Extension Dependency in Gradle\nDESCRIPTION: Adds the Kotest Pitest extension module as a test dependency in a Gradle project. This is required to enable Pitest mutation testing with Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/pitest.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-extensions-pitest:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-level Timeout in Kotest DescribeSpec\nDESCRIPTION: Demonstrates how to set a spec-level timeout and override it for specific test cases in a Kotest DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.2.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   timeout = 1000\n\n   describe(\"I will timeout in 1000 millis\") {\n      it(\"And so will I\") { }\n      it(\"But I'm a little faster\").config(timeout = 500.milliseconds) { }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting Table Data to File\nDESCRIPTION: Shows how to write table data to an external .table file for better data management of large datasets.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/table_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval tableFile = testResources.resolve(\"users.table\")\ntable.writeTo(tableFile)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Pitest Extension Dependency in Kotlin\nDESCRIPTION: This snippet shows how to add the Kotest Pitest extension module to the project dependencies. It's necessary for integrating Pitest mutation testing with Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/pitest.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-extensions-pitest:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Registering JUnitXmlListener in ProjectConfig\nDESCRIPTION: Example showing how to register the JUnitXmlListener in a ProjectConfig class to enable JUnit XML report generation for test results.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n    override fun listeners() = listOf(JUnitXmlListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Negative Double Values in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces negative Double values within a specified range, with options to include non-finite edge cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.negativeDouble(min, includeNonFiniteEdgeCases)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Test Ordering in Kotest\nDESCRIPTION: Configures a Kotest StringSpec to run tests in sequential order (the order they are defined in the spec file). This is achieved by overriding the testCaseOrder function to return TestCaseOrder.Sequential.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SequentialSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Sequential\n\n    init {\n      \"foo\" {\n        // I run first as I'm defined first\n      }\n\n      \"bar\" {\n        // I run second as I'm defined second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding System Security Manager in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the withSecurityManager function to override the system security manager within a specific scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSecurityManager(myManager) {\n  // Usage of security manager\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec Test Style in Kotlin\nDESCRIPTION: Example of the new StringSpec test style that allows using strings as the basis for tests. Tests can be defined with string literals and can include configuration options like invocations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  init {\n    \"strings.size should return size of string\" {\n      \"hello\".length shouldBe 5\n      \"hello\" should haveLength(5)\n    }\n\n    \"strings should support config\" {\n      \"hello\".length shouldBe 5\n    }.config(invocations = 5)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root-Level Data-Driven Tests in Kotest\nDESCRIPTION: Example showing how to implement data-driven tests at the root level using FunSpec and withData function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  withData(\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    isPythagTriple(a, b, c) shouldBe true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency for Kotlin Multiplatform JavaScript\nDESCRIPTION: Kotlin multiplatform configuration for adding the Kotest property testing library specifically to the JavaScript target. This setup targets both browser and Node.js environments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/index.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Koin in Kotest with Root Lifecycle Mode\nDESCRIPTION: Shows how to use Koin with DescribeSpec and set the KoinLifecycleMode to Root. This configuration makes the Koin context persist across all leaf tests of a root test, allowing shared mocked declarations between tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/koin.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : DescribeSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(module = myKoinModule, mode = KoinLifecycleMode.Root))\n\n    val userService by inject<UserService>()\n\n    init {\n        describe(\"use userService\") {\n            it(\"inside a leaf test\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n            it(\"this shares the same context\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging All Tests in a Kotest Spec\nDESCRIPTION: Shows how to add tags to all tests in a Kotest spec using the tags function in the spec itself.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/tags.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n\n  tags(Linux, Mysql)\n\n  test(\"my test\") { } // automatically marked with the above tags\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Invocation Timeout for Multiple Test Runs\nDESCRIPTION: This example demonstrates how to set an invocation timeout for a test that runs multiple times using Kotest's DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/timeouts/test_timeouts.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times and each has a timeout of 60 milliseconds\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock Dependency for Kotest\nDESCRIPTION: Maven Central dependency for adding WireMock support to Kotest projects. This brings WireMockListener into scope for managing WireMockServer lifecycle during tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/wiremock.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.kotest.extensions:kotest-extensions-wiremock:{version}\n```\n\n----------------------------------------\n\nTITLE: Asserting Set Operations in Kotlin with Kotest\nDESCRIPTION: Assertion method for sets in Kotest, checking for intersection with another set.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nset.shouldIntersect(otherSet)\n```\n\n----------------------------------------\n\nTITLE: Using contain Matcher for Collections in Kotlin for KotlinTest\nDESCRIPTION: Illustrates the usage of the contain matcher for collections in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should contain(4)\n```\n\n----------------------------------------\n\nTITLE: Gradle Configuration for System Properties\nDESCRIPTION: Gradle configuration to enable system property propagation for tag filtering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/tags.md#2025-04-13_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    //... Other configurations ...\n    systemProperties = System.properties\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().asIterable().associate { it.key.toString() to it.value }\n}\n```\n\n----------------------------------------\n\nTITLE: LocalDateTime Matchers in Kotest\nDESCRIPTION: Assertion matchers for LocalDateTime type that enable comparison of time components and verification of temporal relationships between different LocalDateTime instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\ntime.shouldHaveSameMinutesAs(otherTime)\ntime.shouldHaveSameSecondsAs(otherTime)\ntime.shouldHaveSameNanosAs(otherTime)\ntime.shouldBeBefore(otherTime)\ntime.shouldBeAfter(otherTime)\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Using Elements Collection Matchers in KotlinTest with Jsoup\nDESCRIPTION: These matchers allow assertions on collections of DOM elements (Elements objects), verifying the presence and count of items.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/jsoup.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nelements.shouldBePresent()\nelements.shouldBePresent(n)\nelements.shouldBePresent(n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Callbacks in Kotest DescribeSpec\nDESCRIPTION: Demonstrates the usage of new callback functions (beforeEach, beforeContainer, beforeTest) in a Kotest DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.2.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CallbacksTest : DescribeSpec({\n\n   beforeEach {\n      println(\"Test: \" + it.displayName)\n   }\n\n   beforeContainer {\n      println(\"Container: \" + it.displayName)\n   }\n\n   beforeTest {\n      println(\"All: \" + it.displayName)\n   }\n\n   describe(\"I am a container scope\") {\n      it(\"And I am a test scope\") { }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Maps from Pair Arbitraries in Kotlin\nDESCRIPTION: Creates random maps with size constraints where each element is generated from a provided Pair arbitrary. The resulting map size will be between minSize and maxSize.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.map(Arb<Pair<K,V>>, minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Using filterMatching Inspector in Kotlin with Kotest\nDESCRIPTION: Demonstrates the filterMatching inspector which filters a collection to only include elements that pass the given assertions. This example filters for strings containing 'x' and starting with 'bb', then asserts the result is empty.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/inspectors.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.filterMatching {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Generating Chunked Lists with Kotest Arb\nDESCRIPTION: Extension functions on Arb<T> to generate lists of elements chunked into sublists of varying sizes within specified ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb<T>.chunked(range)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb<T>.chunked(minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Configuring AllureTestReporter in Kotest Project Config\nDESCRIPTION: This Kotlin code demonstrates how to wire in the AllureTestReporter class globally using Kotest's project configuration. This step is necessary to produce test reports in the Allure JSON format.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/allure.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig {\n    override fun listeners() = listOf(AllureTestReporter())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Assertion Mode in Kotest\nDESCRIPTION: Shows how to configure Kotest to fail or warn when tests don't use Kotest assertions by setting the assertionMode property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/project_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val assertionMode = AssertionMode.Error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Resource Closing in Kotest\nDESCRIPTION: This example shows how to use the autoClose function in a Kotest StringSpec to automatically close a resource (StringReader) after all tests have been run. The resource must implement the java.lang.AutoCloseable interface, and resources are closed in reverse order of declaration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/autoclose.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Short Number Generation in Kotest\nDESCRIPTION: Collection of Arb functions for generating Short numbers with various constraints including positive, negative, and array variants. Each function includes specific edge cases and supports customizable ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.short(min, max)\nArb.positiveShort(min, max)\nArb.negativeShort(min, max)\nArb.shortArray(length, content)\nArb.uShort(min, max)\nArb.uShortArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Configuring until Function with Fixed Interval in Kotest\nDESCRIPTION: Shows how to use the 'until' function with both a duration (5 seconds) and a fixed polling interval (250 milliseconds). This provides more control over how frequently the condition is checked.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/until.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 250.milliseconds.fixed()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tag Annotations\nDESCRIPTION: Shows how to use @Tags and @RequiresTag annotations to tag entire spec classes\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/tags.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Tags(\"Linux\")\nclass MyTestClass : FunSpec({\n\n  tags(UnitTest)\n\n  beforeSpec { println(\"Before\") }\n\n  test(\"A\").config(tags = setOf(Mysql)) {}\n  test(\"B\").config(tags = setOf(Postgres)) {}\n  test(\"C\") {}\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresTag(\"Linux\", \"Mysql\")\nclass MyTestClass : FunSpec()\n```\n\n----------------------------------------\n\nTITLE: Setting Assertion Mode in Kotest (Kotlin)\nDESCRIPTION: Configures Kotest to fail or warn when a test is executed without using a Kotest assertion. This helps ensure that all tests include proper assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/project_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val assertionMode = AssertionMode.Error\n}\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Functions in Property Testing in Kotlin\nDESCRIPTION: Shows the traditional way of property testing where functions return a Boolean. This approach requires combining all assertions into a single boolean result.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_44\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  forAll(Gen.string(), Gen.string(), { a, b ->\n    (a + b).startsWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Spec Execution in Kotest\nDESCRIPTION: Implements an EnabledCondition to conditionally execute a spec based on the current time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.3.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EnabledIfMidnight : EnabledCondition {\n   override fun enabled(specKlass: KClass<out Spec>): Boolean = LocalTime.now().hour == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Testing for Any Exception in Kotest\nDESCRIPTION: Shows how to use shouldThrowAny to test that any exception is thrown, regardless of its type. This is useful when the exact exception type is not important for the test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/exceptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowAny {\n  // test here can throw any type of Throwable!\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Security Manager in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the withSecurityManager extension function to temporarily override the system security manager during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSecurityManager(myManager) {\n  // Usage of security manager\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting String Operations in Kotlin with Kotest\nDESCRIPTION: Comprehensive assertion methods for strings in Kotest, including checks for content, case, length, and pattern matching.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nstr.shouldBeBlank()\nstr.shouldBeEmpty()\nstr.shouldBeLowerCase()\nstr.shouldBeUpperCase()\nstr.shouldContain(\"substr\")\nstr.shouldContain(regex)\nstr.shouldContainADigit()\nstr.shouldContainIgnoringCase(substring)\nstr.shouldContainOnlyDigits()\nstr.shouldBeInteger([radix])\nstr.shouldContainOnlyOnce(substring)\nstr.shouldEndWith(\"suffix\")\nstr.shouldHaveLength(length)\nstr.shouldHaveLineCount(count)\nstr.shouldHaveMaxLength(max)\nstr.shouldHaveMinLength(min)\nstr.shouldHaveSameLengthAs(anotherString)\nstr.shouldMatch(regex)\nstr.shouldStartWith(\"prefix\")\nstr.shouldBeEqualIgnoringCase(other)\nstr.shouldBeTruthy()\nstr.shouldBeFalsy()\n```\n\n----------------------------------------\n\nTITLE: Testing Arrow Try Types with KoTest Arrow Matchers\nDESCRIPTION: Examples of testing Arrow's Try type using the beSuccess and beFailure matchers from the kotlintest-assertions-arrow module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nTry.Success(\"foo\") should beSuccess(\"foo\")\nTry.Failure<Nothing>(RuntimeException()) should beFailure()\n```\n\n----------------------------------------\n\nTITLE: Date Assertion Methods in Klock\nDESCRIPTION: Methods for asserting date-related properties including year, month, day comparisons and before/after relationships between dates.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/klock.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameYear(otherDate)\ndate.shouldHaveSameMonth(otherDate)\ndate.shouldHaveSameDay(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDay(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\n```\n\n----------------------------------------\n\nTITLE: Kotlinx DateTime Date Generation\nDESCRIPTION: Generates LocalDate instances with years within specified range and random values for other fields. Requires kotest-property-datetime module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_53\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.date(yearRange)\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf Example in Kotest\nDESCRIPTION: Shows InstancePerLeaf mode where new instances are created only for leaf test cases, not inner contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/isolation_mode.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency in Gradle\nDESCRIPTION: Adds the required dependency for the Kotest JUnit5 runner to a Gradle project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/setup.mdx#2025-04-13_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-runner-junit5:$version'\n```\n\n----------------------------------------\n\nTITLE: Initializing BlockHound Extension in Kotest Spec\nDESCRIPTION: Example showing how to register the BlockHound extension in a Kotest FunSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/blockhound.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BlockHoundSpecTest : FunSpec({\n   extension(BlockHound())\n\n   test(\"detects for spec\") {\n      blockInNonBlockingContext()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Failed Ignored Tests in Kotest\nDESCRIPTION: Sets up configuration to treat ignored tests as failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/project_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val failOnIgnoredTests = true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core Dependency in Gradle\nDESCRIPTION: Adds the Kotest assertions core library dependency to a Gradle project. This library provides assertion functions for test validation across all platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Statistics Reporters in Kotest\nDESCRIPTION: Demonstrates how to implement and configure a custom StatisticsReporter to override the default reporting format for property test statistics.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/statistics.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyStatisticsReporter : object : StatisticsReporter { ... }\nPropertyTesting.statisticsReporter = MyStatisticsReporter\n```\n\n----------------------------------------\n\nTITLE: Generating Timezone Codes in Kotlin with Kotest\nDESCRIPTION: Creates an Arb that generates three-letter timezone codes (e.g., BST or EST). Note that it doesn't include all possible timezones and is primarily for sampling data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.timezoneCodeThree()\n```\n\n----------------------------------------\n\nTITLE: WireMock Per-Spec Listener Example\nDESCRIPTION: Example showing how to use WireMockListener in PER_SPEC mode, where the WireMock server is started once before all tests in the spec and stopped after all tests complete.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/wiremock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_SPEC))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n    //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Eventually with Listener\nDESCRIPTION: Demonstrates how to add a listener to track the progress of iterations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/concurrency/eventually.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5.seconds()\n  listener = { println(\"iteration ${it.times} returned ${it.result}\") }\n}) {\n  string += \"x\"\n  string\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Kotest Assertions\nDESCRIPTION: Shows how to chain multiple assertions together using Kotest's fluent API.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n           .shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n           .shouldStartWith(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Matchers\nDESCRIPTION: Demonstrates property testing using assertAll with matchers for more expressive assertions\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  assertAll(Gen.string(), Gen.string(), { a, b ->\n    a + b should startWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Float Generator Implementation\nDESCRIPTION: Creates Float values within specified range including special edge cases like NEGATIVE_INFINITY and NaN\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.float(min, max)\n```\n\n----------------------------------------\n\nTITLE: Asserting Double and Float Operations in Kotlin with Kotest\nDESCRIPTION: Assertion methods for floating-point numbers in Kotest, including equality within tolerance and comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\ndouble.shouldBe(value plusOrMinus(tolerance))\ndouble.shouldBeBetween(x, y)\ndouble.shouldBeLessThan(n)\n```\n\n----------------------------------------\n\nTITLE: Applying EnabledIf Annotation to Kotest Spec\nDESCRIPTION: Demonstrates how to use the EnabledIf annotation with a custom EnabledCondition on a Kotest spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.3.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(EnabledIfMidnight::class)\nclass EnabledIfTest : FunSpec() {\n   init {\n      test(\"tis midnight when the witches roam free\") {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Endo Instances in Kotest with Arrow\nDESCRIPTION: Method for generating Endo instances by wrapping values from an underlying arbitrary generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/arrow.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.endo(arb)\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Elements with Nullable Types\nDESCRIPTION: Shows how to use type parameters with the haveElementAt matcher when working with collections that contain null values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nlistOf(\"a\", \"b\", null) should haveElementAt<String?>(2, null)\n```\n\n----------------------------------------\n\nTITLE: ZonedDateTime Assertions in Kotest\nDESCRIPTION: Methods for asserting properties of ZonedDateTime objects including same day as today, same instant comparison, and equality within a time range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nzonedDateTime.shouldBeToday()\nzonedDateTime.shouldHaveSameInstantAs(other: ZonedDateTime)\nzonedDateTime.shouldBe(other plusOrMinus 1.minutes)\n```\n\n----------------------------------------\n\nTITLE: Preventing System.out and System.err Output in Kotest Tests\nDESCRIPTION: Shows how to use NoSystemOutListener and NoSystemErrListener to prevent output to System.out and System.err in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n```\n\n----------------------------------------\n\nTITLE: Using composed matchers in Kotest assertions\nDESCRIPTION: Examples of using the composed matcher in assertions, including a passing case and a failing case with a Person that doesn't match the expected values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/data_class_matchers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nPerson(\"John\", 21, Address(\"Warsaw\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21)\nPerson(\"Sam\", 22, Address(\"Chicago\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21) // would fail\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Test Filtering in Build Script\nDESCRIPTION: This snippet demonstrates how to configure test filtering in the Gradle build script to include all tests from a specific package.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/gradle.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.test {\n    filter {\n        //include all tests from package\n        includeTestsMatching(\"com.somepackage.*\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Generators in Kotest\nDESCRIPTION: Generates values using a supplied function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.create(fn)\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Invocation Timeout\nDESCRIPTION: Shows how to set an invocation timeout that applies to all tests in a spec\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   invocationTimeout = 25.milliseconds\n\n   test(\"foo\") {\n      // test here\n   }\n\n   test(\"bar\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Root-Level Data-Driven Tests in Kotest\nDESCRIPTION: Example showing how to write data-driven tests at the root level without additional context wrapping.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  withData(\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    isPythagTriple(a, b, c) shouldBe true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Pattern-Matching Strings with Kotest Arbitrary\nDESCRIPTION: Uses Arb.stringPattern(pattern) to generate strings that match a given pattern using the RgxGen library. This is only compatible with the first listed Kotest version.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_30\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.stringPattern(pattern)\n```\n\n----------------------------------------\n\nTITLE: Setting a Timeout for Tests in WordSpec (Kotlin)\nDESCRIPTION: Example of configuring a test with a timeout in Kotest's WordSpec style. The test will fail if it doesn't complete within 2 seconds, useful for preventing tests from hanging indefinitely.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_case_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tag Annotations on a Spec Class\nDESCRIPTION: Example of applying the @Tags annotation to a test class, which adds tags to all tests in the class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tags.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@Tags(\"Linux\")\nclass MyTestClass : FunSpec({\n\n  tags(UnitTest)\n\n  beforeSpec { println(\"Before\") }\n\n  test(\"A\").config(tags = setOf(Mysql)) {}\n  test(\"B\").config(tags = setOf(Postgres)) {}\n  test(\"C\") {}\n})\n```\n\n----------------------------------------\n\nTITLE: Eventually Exception Function Configuration in Kotlin\nDESCRIPTION: Example showing how to use a function to determine which exceptions should be ignored by eventually.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/eventually.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  expectedExceptionsFn = { it is UserNotFoundException }\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Data Class Similarity Matching Example in Kotlin\nDESCRIPTION: Demonstrates how Kotest compares data class instances and reports partial matches based on field similarity. In this example, two objects with 66.6% matching fields are compared.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/similarity.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlistOf(sweetGreenApple, sweetGreenPear) shouldContain (sweetRedApple)\n\n(snip)\n\nPossibleMatches:\n expected: Fruit(name=apple, color=red, taste=sweet),\n  but was: Fruit(name=apple, color=green, taste=sweet),\n  The following fields did not match:\n    \"color\" expected: <\"red\">, but was: <\"green\">\n```\n\n----------------------------------------\n\nTITLE: Testing System Exit in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use the SpecSystemExitListener to test code that calls System.exit by catching the thrown SystemExitException.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n    \"Catch exception\" {\n      val thrown: SystemExitException = shouldThrow<SystemExitException> {\n        System.exit(22)\n      }\n\n      thrown.exitCode shouldBe 22\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @RequiresTag Annotation in Kotest\nDESCRIPTION: This example demonstrates the use of the @RequiresTag annotation to specify required tags for a Kotest spec class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/tags.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresTag(\"Linux\", \"Mysql\")\nclass MyTestClass : FunSpec()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Merged Generators in Kotest\nDESCRIPTION: Provides a practical example of merging two simple generators and showing the distribution of samples between them.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genops.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = arbitrary { \"a\" }\nval b = arbitrary { \"b\" }\nval ab = a.merge(b)\n\nprintln(ab.take(1000).groupingBy { it }.eachCount())\n// {a=493, b=507}\n```\n\n----------------------------------------\n\nTITLE: Using Kotlin Compiler Matchers\nDESCRIPTION: Demonstrates how to use compiler matchers to test both valid and invalid Kotlin code snippets. Shows usage of shouldCompile() and shouldNotCompile() matchers with both String and File inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/compiler.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CompilationTest: StringSpec() {\n        init {\n            \"shouldCompile test\" {\n                val codeSnippet = \"\"\" val aString: String = \"A valid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldCompile()\n                File(\"SourceFile.kt\").shouldCompile()\n            }\n\n            \"shouldNotCompile test\" {\n                val codeSnippet = \"\"\" val aInteger: Int = \"A invalid assignment\" \"\"\".trimMargin()\n\n                codeSnippet.shouldNotCompile()\n                File(\"SourceFile.kt\").shouldNotCompile()\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: CSV Data Source Testing Example\nDESCRIPTION: Shows how to use CsvDataSource to load test data from CSV files for table testing\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CsvDataSourceTest : WordSpec() {\n  init {\n\n    \"CsvDataSource\" should {\n      \"read data from csv file\" {\n\n        val source = CsvDataSource(javaClass.getResourceAsStream(\"/user_data.csv\"), CsvFormat())\n\n        val table = source.createTable<Long, String, String>(\n            { it: Record -> Row3(it.getLong(\"id\"), it.getString(\"name\"), it.getString(\"location\")) },\n            { it: Array<String> -> Headers3(it[0], it[1], it[2]) }\n        )\n\n        forAll(table) { a, b, c ->\n          a shouldBe gt(0)\n          b shouldNotBe null\n          c shouldNotBe null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Kafka Client Configuration\nDESCRIPTION: Demonstrates how to manually configure Kafka clients using the host and port from the embedded Kafka listener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/kafka.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n   \n   val props = Properties().apply {\n      put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"${embeddedKafkaListener.host}:${embeddedKafkaListener.port}\")\n   }\n   \n   val producer = KafkaProducer<String, String>(props)\n   \n})\n```\n\n----------------------------------------\n\nTITLE: ExpectSpec Example in KotlinTest\nDESCRIPTION: Demonstrates the usage of ExpectSpec with context and expect keywords for structured testing\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ExpectSpecExample : ExpectSpec() {\n  init {\n    context(\"some context\") {\n      expect(\"some test\") {\n        // test here\n      }\n      context(\"nested context even\") {\n        expect(\"some test\") {\n          // test here\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Invocations in Kotest\nDESCRIPTION: Example showing how to configure a test to run multiple times using the invocations parameter. This test will be executed three times without any timeout constraints.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Array Length Validation in JSON Schema\nDESCRIPTION: Example of creating a schema that validates array length using minItems and maxItems constraints.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/json/schema.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval lengthBoundedSchema = jsonSchema {\n  array(minItems = 0, maxItems = 1) { number() }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Testing with String Reversal in Kotest\nDESCRIPTION: Demonstrates a property test checking if a string reversed is the same as the input string.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.1.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String> { a ->\n  a shouldBe a.reversed()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Config with Kotest Tests\nDESCRIPTION: Demonstrates the new syntax for applying configuration to Kotest tests, where config is specified after the test name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n\"this is a test\".config(...) {\n}\n```\n\n----------------------------------------\n\nTITLE: Null Check Assertion in Kotlin\nDESCRIPTION: An assertion checking that a user's name is not null, demonstrating a case where the error message might be less informative.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/clues.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Name Pattern with Gradle Command Line\nDESCRIPTION: Example of using Gradle's --tests command line option to run tests that match a specific name pattern (ending with 'IntegrationTest').\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/gradle.md#2025-04-13_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngradle test --tests '*IntegrationTest'\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Structures in Kotlin\nDESCRIPTION: Example of two JSON structures considered equal by shouldEqualJson matcher, despite different formatting and key order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/json/content.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\":     \"sam\",\n  \"location\": \"chicago\",\n  \"age\":      41\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\": 41, \"name\": \"sam\", \"location\": \"chicago\" }\n```\n\n----------------------------------------\n\nTITLE: Byte Generation in Kotest\nDESCRIPTION: Comprehensive byte generation methods including signed bytes, unsigned bytes, and byte arrays with customizable ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.byte(min, max)\nArb.positiveByte(max)\nArb.negativeByte(min)\nArb.byteArray(length, content)\nArb.uByte(min, max)\nArb.uByteArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Using Test Factory in Test Suite\nDESCRIPTION: Example of including test factory for multiple implementations in a test suite.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_factories.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IndexedSeqTestSuite : WordSpec({\n   include(indexedSeqTests(\"vector\"), Vector())\n   include(indexedSeqTests(\"list\"), List())\n})\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Generators in Kotest\nDESCRIPTION: Generates values by combining multiple arbitrary generators and passing their values to a supplied function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_21\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.bind(arbA, arbB, fn)\n```\n\n----------------------------------------\n\nTITLE: Using Matchers as Extension Functions in Kotest\nDESCRIPTION: Shows how to use Kotest matchers as extension functions instead of infix notation, which allows for better IDE discovery.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldExist()\n\nlistOf(1, 2).shouldContainNull()\n```\n\n----------------------------------------\n\nTITLE: ExpectSpec Test Structure Example\nDESCRIPTION: Demonstrates the structure of tests using ExpectSpec with context and expect blocks for nested test organization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ExpectSpecExample : ExpectSpec() {\n  init {\n    context(\"some context\") {\n      expect(\"some test\") {\n        // test here\n      }\n      context(\"nested context even\") {\n        expect(\"some test\") {\n          // test here\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Recursive Field Matching in Kotlin\nDESCRIPTION: Demonstrates how to stop recursive comparison by using useDefaultShouldBeForFields\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/field-matching.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n         val doctor1 = Doctor(\"billy\", 22, emptyList())\n         val doctor2 = Doctor(\"billy\", 22, emptyList())\n\n         val city = City(\"test\", Hospital(\"test-hospital\", doctor1))\n         val city2 = City(\"test\", Hospital(\"test-hospital\", doctor2))\n\n         shouldFail {\n            city.shouldBeEqualUsingFields {\n               useDefaultShouldBeForFields = listOf(Doctor::class)\n               city2\n            }\n         }.message shouldContain \"\"\"Using fields:\n - mainHospital.mainDoctor\n - mainHospital.name\n - name\n\nFields that differ:\n - mainHospital.mainDoctor  =>\n\"\n```\n\n----------------------------------------\n\nTITLE: Using Testcontainers with Kotest\nDESCRIPTION: Example of using Testcontainers in a Kotest test specification, demonstrating how to start and manage a Redis container for testing\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers_46x.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration for adding Kotest Testcontainers extension to a project\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers_46x.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Using URI Component Matchers\nDESCRIPTION: Shows various matchers for validating parts of a URI, including scheme, host, port, path, parameters, and fragments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nval uri = URI.create(\"https://localhost:443/index.html?q=findme#results\")\nuri should haveScheme(\"https\")\nuri should haveHost(\"localhost\")\nuri should havePort(443)\nuri should havePath(\"/index.html\")\nuri should haveParameter(\"q\")\nuri should haveFragment(\"results\")\n```\n\n----------------------------------------\n\nTITLE: Using System Environment Listener at Spec Level\nDESCRIPTION: Implementing a SystemEnvironmentTestListener for a test specification to override environment variables for all tests within that spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemEnvironmentTestListener(\"foo\", \"bar\"))\n\n    init {\n      \"MyTest\" {\n        System.getenv(\"foo\") shouldBe \"bar\"\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Assertion in Kotlin with Kotest\nDESCRIPTION: Demonstrates the use of the 'shouldBe' matcher to assert equality in Kotest. This is a fundamental assertion used to compare expected and actual values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nname shouldBe \"sam\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Kafka Producer in Kotest\nDESCRIPTION: Shows how to create a custom Kafka producer by accessing the host and port of the embedded Kafka instance and setting up the producer manually.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/kafka.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n   \n   val props = Properties().apply {\n      put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"${embeddedKafkaListener.host}:${embeddedKafkaListener.port}\")\n   }\n   \n   val producer = KafkaProducer<String, String>(props)\n   \n})\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Property Testing with Maven (JVM)\nDESCRIPTION: Shows how to add the Kotest property testing dependency to a JVM project using Maven. The XML snippet configures the required dependency with appropriate scope for testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Testing Arrow Option Types in KotlinTest\nDESCRIPTION: Demonstrates matchers for Arrow's Option type, allowing verification of Some and None values from the kotlintest-assertions-arrow module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nval option = Option.pure(\"foo\")\noption should beSome(\"foo\")\n\nval none = None\nnone should beNone()\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Ktor Assertions Dependency in Gradle\nDESCRIPTION: Gradle dependency declarations for adding Kotest Ktor assertions to a project. Provides two syntax options for Groovy and Kotlin DSL.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation(\"io.kotest.extensions:kotest-assertions-ktor:version\")\n```\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation \"io.kotest.extensions:kotest-assertions-ktor:version\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Unit Tests with Kotest\nDESCRIPTION: Android-specific configuration to enable Kotest for unit tests using JUnit Platform\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/setup.mdx#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      it.useJUnitPlatform()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConstantNowTestListener for Global Time Fixing in Kotlin Tests\nDESCRIPTION: This code snippet shows how to use ConstantNowTestListener to set a constant time for all tests in a test class. It's added to the listeners() function, which is likely part of a test configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/instant.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun listeners() = listOf(\n  ConstantNowTestListener(foreverNow)\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Lexicographic Test Ordering in Kotest\nDESCRIPTION: This code snippet illustrates how to configure lexicographic test ordering in a Kotest StringSpec. Tests will be executed in alphabetical order based on their names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_ordering.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LexicographicSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Lexicographic\n\n    init {\n      \"foo\" {\n        // I run second as bar < foo\n      }\n\n      \"bar\" {\n        // I run first as bar < foo\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Test Case Config in Kotlin\nDESCRIPTION: Demonstrates the new recommended way of setting default test case configuration in a Kotest spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_5.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n\n    tags(Foo, Bar)\n    timeout = 100.seconds\n\n    test(\"foo\") {\n       // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ExpectSpec Example in KotlinTest\nDESCRIPTION: Demonstrates the usage of ExpectSpec which allows using context and expect keywords for test organization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ExpectSpecExample : ExpectSpec() {\n  init {\n    context(\"some context\") {\n      expect(\"some test\") {\n        // test here\n      }\n      context(\"nested context even\") {\n        expect(\"some test\") {\n          // test here\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Spec Ordering in Kotest Configuration\nDESCRIPTION: Shows how to implement spec ordering by extending AbstractProjectConfig class. The specExecutionOrder property can be overridden to specify the desired ordering strategy.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/spec_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig: AbstractProjectConfig() {\n    override val specExecutionOrder = ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shrinker for Coordinate Generator in Kotest\nDESCRIPTION: This snippet demonstrates how to create a custom generator with a custom shrinker for a Coordinate data class. The shrinker generates neighboring coordinates for shrinking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/shrinking.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Coordinate(val x: Int, val y: Int)\n\nclass CoordinateTest : FunSpec({\n    context(\"Coordinate Transformations\") {\n        // Shrinker takes the four neighbouring coordinates\n        val coordinateShrinker = Shrinker<Coordinate> { c ->\n            listOf(\n                Coordinate(c.x - 1, c.y),\n                Coordinate(c.x, c.y - 1),\n                Coordinate(c.x + 1, c.y),\n                Coordinate(c.x, c.y + 1),\n            )\n        }\n        val coordinateArb = arbitrary(coordinateShrinker) {\n            Coordinate(Arb.nonNegativeInt().bind(), Arb.nonNegativeInt().bind())\n        }\n\n        test(\"Coordinates are always positive after transformation\") {\n            coordinateArb.checkAll {\n                transform(it).x shouldBeGreaterThanOrEqualTo 0\n                transform(it).y shouldBeGreaterThanOrEqualTo 0\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding extension functions for composed matchers in Kotest\nDESCRIPTION: An extension function for the Person class that provides a more readable assertion syntax using the composed matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/data_class_matchers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Person.shouldBePerson(name: String, age: Int) = this shouldBe personMatcher(name, age)\n```\n\n----------------------------------------\n\nTITLE: Multiple Tests with Shared Mocks\nDESCRIPTION: Shows an issue that arises when multiple tests share the same mock instance without proper cleanup, leading to verification errors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/integrations/mocks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n    test(\"Saves to repository as well\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Allure Build Directory\nDESCRIPTION: Test configuration to set the Allure results directory system property\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/allure.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") { // or \"jvmTest\" etc\n   useJUnitPlatform()\n   systemProperty(\"allure.results.directory\", project.buildDir.toString() + \"/allure-results\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core Dependency (Gradle)\nDESCRIPTION: Adds the Kotest assertions core dependency to a Gradle project for JVM tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\n----------------------------------------\n\nTITLE: NonEmptyList Matchers in Kotest Arrow Extension\nDESCRIPTION: Comprehensive assertion methods for testing Arrow NonEmptyList collections, including content verification, null checking, and structural validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nnel.shouldContain(e)\nnel.shouldContainAll(e1,e2,...,en)\nnel.shouldContainNull()\nnel.shouldContainNoNulls()\nnel.shouldContainOnlyNulls()\nnel.shouldHaveDuplicates()\nnel.shouldBeSingleElement(e)\nnel.shouldBeSorted()\n```\n\n----------------------------------------\n\nTITLE: Using Arrow NonEmptyList Matchers\nDESCRIPTION: Demonstrates various matchers for Arrow's NonEmptyList type, mirroring the equivalent Collection matchers but for NELs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nNonEmptyList.of(1, 2, null).shouldContainNull()\nNonEmptyList.of(1, 2, 3, 4).shouldBeSorted<Int>()\nNonEmptyList.of(1, 2, 3, 3).shouldHaveDuplicates()\nNonEmptyList.of(1).shouldBeSingleElement(1)\nNonEmptyList.of(1, 2, 3).shouldContain(2)\nNonEmptyList.of(1, 2, 3).shouldHaveSize(3)\nNonEmptyList.of(1, 2, 3).shouldContainNoNulls()\nNonEmptyList.of(null, null, null).shouldContainOnlyNulls()\nNonEmptyList.of(1, 2, 3, 4, 5).shouldContainAll(3, 2, 1)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Test Enabling with EnabledIf in Kotlin\nDESCRIPTION: Demonstrates the use of 'enabledIf' for dynamic test enabling based on a function evaluated at runtime. This example disables tests starting with 'danger' on Fridays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/config_enabled.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: EnabledIf = { !(it.name.testName.startsWith(\"danger\") && isFriday()) }\n\n\"danger Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Time Assertion Methods in Klock\nDESCRIPTION: Methods for asserting time-related properties including hours, minutes, seconds, milliseconds comparisons and before/after relationships between times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/klock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(time)\ntime.shouldHaveHours(hours)\ntime.shouldHaveSameMinutesAs(time)\ntime.shouldHaveMinutes(minutes)\ntime.shouldHaveSameSeconds(time)\ntime.shouldHaveSeconds(seconds)\ntime.shouldHaveSameMillisecondsAs(time)\ntime.shouldHaveMilliseconds(millis)\ntime.shouldBeBefore(time)\ntime.shouldBeAfter(time)\ntime.shouldBeBetween(time, time)\n```\n\n----------------------------------------\n\nTITLE: Collecting Multiple Categories with Combined Logic\nDESCRIPTION: Example of creating combined categories for statistics collection, tracking both parity (even/odd) and sign (positive/negative) in a single category set.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/statistics.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k > 0 && k % 2 == 0 -> collect(\"EVEN_POS\")\n    k % 2 == 0 -> collect(\"EVEN_NEG\")\n    k > 0 -> collect(\"ODD_POS\")\n    else -> collect(\"ODD_NEG\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Test Ordering in Kotest\nDESCRIPTION: Demonstrates how to configure tests to run in sequential order (order of definition) by overriding testCaseOrder() to return TestCaseOrder.Sequential.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SequentialSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Sequential\n\n    init {\n      \"foo\" {\n        // I run first as I'm defined first\n      }\n\n      \"bar\" {\n        // I run second as I'm defined second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConstantNowTestListener in Kotlin\nDESCRIPTION: Shows how to configure a test listener that maintains a constant time value across all tests in a test class using ConstantNowTestListener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/instant.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n  override fun listeners() = listOf(\n    ConstantNowTestListener(foreverNow)\n  )\n```\n\n----------------------------------------\n\nTITLE: String Generation in Kotest\nDESCRIPTION: Various string generation methods including random strings, pattern-based strings, email addresses, UUIDs, and domains.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genslist.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.string(range)\nArb.stringPattern(pattern)\nArb.email(localPartGen, domainGen)\nArb.uuid(type)\nArb.domain(tlds, labelArb)\n```\n\n----------------------------------------\n\nTITLE: Using SystemPropertyListener for Spec-level System Properties\nDESCRIPTION: Shows how to use SystemPropertyListener to apply system property overrides at the test specification level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemPropertyListener(\"foo\", \"bar\"))\n\n    init {\n      \"MyTest\" {\n        System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Assertion Mode in Kotest\nDESCRIPTION: This code shows how to configure the assertion mode in Kotest to fail or warn when a test doesn't use a Kotest assertion. It sets the assertionMode property in the KotestProjectConfig object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/project_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val assertionMode = AssertionMode.Error\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing to JVM/Maven Projects\nDESCRIPTION: Adds the Kotest property testing dependency to a JVM project using Maven.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Generating Long and ULong Arbitraries in Kotlin\nDESCRIPTION: Functions for generating random Long and ULong values and arrays with specified ranges and edge cases in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.longArray(length, content)\nArb.uLong(min, max)\nArb.uLongArray(length, content)\nExhaustive.longs(range)\n```\n\n----------------------------------------\n\nTITLE: Using Until with Fixed Interval in Kotest\nDESCRIPTION: This snippet shows how to use the 'until' function with a custom fixed interval of 250 milliseconds, creating a more aggressive polling strategy while waiting for a broker message to arrive within a 5-second timeout.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/until.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 250.milliseconds.fixed()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setup Mocks Before Tests Solution\nDESCRIPTION: Solution using beforeTest hook to initialize fresh mock instances before each test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/integrations/mocks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    lateinit var repository: MyRepository\n    lateinit var target: MyService\n\n    beforeTest {\n        repository = mockk()\n        target = MyService(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Defining an IndexedSeq Interface in Kotlin\nDESCRIPTION: Example interface declaration for IndexedSeq with size, add, and contains methods. This interface is used as the basis for demonstrating test factories.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_factories.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface IndexedSeq<T> {\n\n    // returns the size of t\n    fun size(): Int\n\n    // returns a new seq with t added\n    fun add(t: T): IndexedSeq<T>\n\n    // returns true if this seq contains t\n    fun contains(t: T): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Custom Iteration Count in Kotlin\nDESCRIPTION: Shows how to specify a custom number of test iterations (2300) for property-based testing using forAll function.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n  init {\n\n    \"String size\" {\n      forAll(2300) { a: String, b: String ->\n        (a + b).length == a.length + b.length\n      }\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution with Enabled Flag in Kotlin\nDESCRIPTION: Shows how to run tests only under certain conditions, such as on Linux systems, using the 'enabled' configuration parameter with a boolean expression.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/config_enabled.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = IS_OS_LINUX) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Character Generation in Kotest\nDESCRIPTION: Generator functions for producing characters from specified ranges and character arrays with configurable parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genslist.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.char(range1, range2,...)\nArb.char(List<CharRange>)\nArb.charArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Testing System.out and System.err Exceptions in Kotlin Tests\nDESCRIPTION: Demonstrates using NoSystemOutListener and NoSystemErrListener to test for exceptions when writing to System.out and System.err. The listeners are added to the test class and assertions are made on the thrown exceptions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NoSystemOutOrErrTest : StringSpec() {\n\n  override fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n\n  init {\n\n    \"System.out should throw an exception when the listener is added\" {\n      shouldThrow<SystemOutWriteException> {\n        System.out.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n\n    \"System.err should throw an exception when the listener is added\" {\n      shouldThrow<SystemErrWriteException> {\n        System.err.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Either Type Matchers in Kotest Arrow Extension\nDESCRIPTION: Matchers for testing Arrow's Either type, providing assertions for both Right and Left variants with optional value verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Either                    |                                                                      |\n|---------------------------|----------------------------------------------------------------------|\n| `either.shouldBeRight()`  | Asserts that the either is of type Right and returns the Right value |\n| `either.shouldBeRight(v)` | Asserts that the either is of type Right with specified value v      |\n| `either.shouldBeLeft()`   | Asserts that the either is of type Left and returns the Left value   |\n| `either.shouldBeLeft(v)`  | Asserts that the either is of type Left with specific value v        |\n```\n\n----------------------------------------\n\nTITLE: Testing Arrow Validation Types with KoTest Arrow Matchers\nDESCRIPTION: Examples of testing Arrow's Validation type using the beValid and beInvalid matchers from the kotlintest-assertions-arrow module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nValid(\"foo\") should beValid()\nInvalid(RuntimeException()) should beInvalid()\n```\n\n----------------------------------------\n\nTITLE: Registering Embedded Kafka Listener with Class Implementation in Kotlin\nDESCRIPTION: Shows how to register the embedded Kafka listener in a Kotest FunSpec using the class implementation approach with an init block. This provides the same functionality as the function implementation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/kafka.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec() {\n  init {\n    listener(embeddedKafkaListener)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Generation in Kotest\nDESCRIPTION: Generator methods for boolean values and boolean arrays in Kotest. Includes both arbitrary and exhaustive boolean generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.boolean()\nArb.booleanArray(length, content)\nExhaustive.boolean()\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Timeout in Kotest FunSpec\nDESCRIPTION: This example shows how to set a timeout for all tests in a spec file using FunSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   timeout = 100.milliseconds\n\n   test(\"this test will timeout quickly!\") {\n      // test here\n   }\n\n   test(\"so will this one!\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Kotlin)\nDESCRIPTION: This snippet demonstrates how to configure the JUnit Platform for Gradle using Kotlin DSL. It applies the JUnit Platform to all Test type tasks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/setup.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Assertion Mode Error Output in Kotest\nDESCRIPTION: This snippet shows the error output when a test without assertions is run with assertion mode set to 'Error'. It demonstrates the format of the warning message generated by Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/assertion_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTest 'this test has no assertions' did not invoke any assertions\n```\n\n----------------------------------------\n\nTITLE: Implementing WithDataTestName Interface in Kotest\nDESCRIPTION: Shows how to implement the WithDataTestName interface to provide custom test names. This approach allows classes to define their own test name generation logic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/test_names.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int) : WithDataTestName {\n  override fun dataTestName() = \"wibble $a, $b, $c wobble\"\n}\n```\n\n----------------------------------------\n\nTITLE: Kotest Map Assertions\nDESCRIPTION: Example of map assertion functions for checking key presence\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldNotContainAnyKeysOf()\nshouldNotContainAnyValuesOf()\n```\n\n----------------------------------------\n\nTITLE: Inline Syntax for Assumptions in Kotest Property Testing (Kotlin)\nDESCRIPTION: Shows the inline syntax for using assumptions in Kotest property testing, which provides a more concise way to express assumptions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/assumptions.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume(a != b)\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Ktor Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration to add Kotest Ktor assertions to a project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-assertions-ktor:${version}\n```\n\n----------------------------------------\n\nTITLE: Creating General Container with Docker Image in Kotlin\nDESCRIPTION: Shows how to create a general container using a Docker image name with Testcontainers in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval container = install(ContainerExtension(\"redis:5.0.3-alpine\")) {\n  startupAttempts = 1\n  withExposedPorts(6379)\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Blocking Call Detection in Coroutines\nDESCRIPTION: Shows an example of a blocking call (Thread.sleep) within a coroutine context that would be detected by BlockHound. This function uses Dispatchers.Default, which is expected to be non-blocking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/blockhound.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate suspend fun blockInNonBlockingContext() {\n   withContext(Dispatchers.Default) {\n      @Suppress(\"BlockingMethodInNonBlockingContext\")\n      Thread.sleep(2)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Configuration Setup\nDESCRIPTION: Examples of configuring project-wide settings and extensions in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotlintest.provided\n\nobject ProjectConfig : AbstractProjectConfig() {\n\n  private var started: Long = 0\n\n  override fun beforeAll() {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterAll() {\n    val time = System.currentTimeMillis() - started\n    println(\"overall time [ms]: \" + time)\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimerExtension: ProjectExtension {\n\n  private var started: Long = 0\n\n  override fun beforeAll() {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterAll() {\n    val time = System.currentTimeMillis() - started\n    println(\"overall time [ms]: \" + time)\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n  override val extensions = listOf(TimerExtension)\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n   override fun parallelism(): Int = 2\n}\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest Isolation Mode with Counter in Kotest\nDESCRIPTION: Demonstrates how variables are reset between test executions in InstancePerTest mode using an AtomicInteger counter. Shows that each spec instance starts with a fresh counter value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/isolation_mode.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparable Object Assertions in Kotlin\nDESCRIPTION: Comparison matchers for ordering and equality using compareTo and custom comparators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeLessThan(other)\ncomp.shouldBeLessThanOrEqualTo(other)\ncomp.shouldBeEqualComparingTo(other)\ncomp.shouldBeEqualComparingTo(other, comparator)\ncomp.shouldBeGreaterThan(other)\ncomp.shouldBeGreaterThanOrEqualTo(other)\n```\n\n----------------------------------------\n\nTITLE: Using Until with Default Interval in Kotest\nDESCRIPTION: This snippet demonstrates how to use the 'until' function with a 5-second duration to wait for a message to be received by a broker. By default, the predicate is checked every second until it returns true or the duration expires.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/until.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Optional Properties in Kotlin using Kotest\nDESCRIPTION: Shows assertions for Optional objects in Kotest. Includes checks for presence and emptiness of optional values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_26\n\nLANGUAGE: Kotlin\nCODE:\n```\noptional.shouldBePresent()\noptional.shouldBePresent { value -> .. }\noptional.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Gradle Plugin\nDESCRIPTION: Gradle plugins configuration to include Allure reporting plugin\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/allure.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  ...\n  id(\"io.qameta.allure\") version \"2.8.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pythagorean Triple Checker in Kotlin\nDESCRIPTION: Defines a function to check if three integers form a valid Pythagorean triple.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.3.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Displaying Community Provided Matchers in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing community-provided matcher libraries for Kotest and their descriptions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Library | Description |\n| -------- | ---- |\n| [Android](https://github.com/LeoColman/kotest-android) | Toolbox for working with Kotest and Android |\n| [Http4k](https://github.com/http4k/http4k/tree/master/http4k-testing/kotest) | Functional toolkit for Kotlin HTTP applications |\n| [Micronaut](https://github.com/micronaut-projects/micronaut-test) | JVM-based, full-stack framework for building modular, easily testable microservice |\n```\n\n----------------------------------------\n\nTITLE: Using withDefaultLocale and withDefaultTimeZone Extensions\nDESCRIPTION: Example of using extension functions to temporarily override the default locale and timezone in a test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nwithDefaultLocale(Locale.FRANCE) {\n  println(\"My locale is now France! Très bien!\")\n}\n\nwithDefaultTimeZone(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\"))) {\n  println(\"My timezone is now America/Sao_Paulo! Muito bem!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing System.out and System.err Usage with Listeners\nDESCRIPTION: Shows how to use NoSystemOutListener and NoSystemErrListener to prevent code from writing directly to System.out or System.err, enforcing proper logging practices.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jacoco XML Report Task\nDESCRIPTION: This snippet configures the Jacoco test report task to generate XML reports. It ensures the task depends on the test task and requires XML report generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/integrations/jacoco.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.jacocoTestReport {\n    dependsOn(tasks.test)\n    reports {\n        xml.required.set(true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Ignored annotation to disable a spec in Kotest\nDESCRIPTION: Demonstrates how to completely disable a spec using the @Ignored annotation. When applied, the spec will not be instantiated, avoiding any initialization code execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/annotations.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Ignored\nclass IgnoredSpec : FunSpec() {\n  init {\n    error(\"boom\") // spec will not be created so this error will not happen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Testcontainers with Kotest TestListener\nDESCRIPTION: Example showing how to use Testcontainers in a Kotest test specification. Demonstrates creating a Redis container and managing its lifecycle using the perTest() extension method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers_46x.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Map-based Test Names in Kotest\nDESCRIPTION: Demonstrates using a map to specify custom test names for data-driven tests, where map keys are test names and values are test inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/test_names.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData(\n    mapOf(\n      \"3, 4, 5\" to PythagTriple(3, 4, 5),\n      \"6, 8, 10\" to PythagTriple(6, 8, 10),\n      \"8, 15, 17\" to PythagTriple(8, 15, 17),\n      \"7, 24, 25\" to PythagTriple(7, 24, 25)\n    )\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Eventually Configuration\nDESCRIPTION: Example of creating and sharing eventually configurations across different test suites.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/concurrency/eventually.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = EventuallyConfig<ServerResponse>(\n  duration = 5.minutes,\n  interval = 25.milliseconds.fibonacci(),\n  suppressExceptions = setOf(ServerException::class)\n)\n\nclass FooTests : StringSpec({\n  val logger = logger(\"FooTests\")\n  val fSlow = slow.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") })\n\n  \"server eventually provides a result for /foo\" {\n    eventually(fSlow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : StringSpec({\n  val logger = logger(\"BarTests\")\n  val bFast = fast.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") })\n\n  \"server eventually provides a result for /bar\" {\n    eventually(bFast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Arbitraries for Equal Sampling\nDESCRIPTION: Demonstrates how to merge two arbitraries so that values are sampled equally from both sources, creating a combined generator with uniform distribution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genops.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval merged = arbA.merge(arbB)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Discard Percentage\nDESCRIPTION: Example showing how to configure maximum allowed discard rate in property tests\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/assumptions.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<Int, Int>(PropTestConfig(maxDiscardPercentage = 55)) { a, b ->\n  withAssumptions(a % 2 == 0) {\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating NonEmptyList Instances in Kotest with Arrow\nDESCRIPTION: Examples of generating NonEmptyList instances using Arrow generators in Kotest. Includes methods for generating lists with default size range or custom size range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.nel(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.nel(arb, range)\n```\n\n----------------------------------------\n\nTITLE: Using Even and Odd Matchers in KotlinTest\nDESCRIPTION: Demonstrates using the new even and odd matchers for integers, which test whether a number is even or odd.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n4 should beEven()\n3 shouldNot beEven()\n\n3 should beOdd()\n4 shouldNot beOdd()\n```\n\n----------------------------------------\n\nTITLE: Generating Random Lists in Kotest\nDESCRIPTION: Produces lists of random size within a specified range, with elements generated by a given generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.list(gen, range)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Ktor Assertions Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration for adding Kotest Ktor assertions to your project. The module is published under the io.kotest.extensions group and provides matchers specifically for Ktor server and client components.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.kotest.extensions:kotest-assertions-ktor:version\")\n```\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation \"io.kotest.extensions:kotest-assertions-ktor:version\"\n```\n\n----------------------------------------\n\nTITLE: Registering BlockHound Extension in Kotest FunSpec\nDESCRIPTION: Shows how to register the BlockHound extension at the spec level in a Kotest FunSpec class to detect blocking calls within the test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/blockhound.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BlockHoundSpecTest : FunSpec({\n   extension(BlockHound())\n\n   test(\"detects for spec\") {\n      blockInNonBlockingContext()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Wide Timeouts in Kotest\nDESCRIPTION: Demonstrates how to set project-wide test and invocation timeouts using AbstractProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig {\n    override val timeout = 100.milliseconds\n    override val invocationTimeout = 33.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually Initial Delay Configuration in Kotlin\nDESCRIPTION: Configuration example showing how to set an initial delay before starting eventually iterations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/eventually.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  initialDelay = 1.seconds\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Function for Matcher Convenience in Kotest\nDESCRIPTION: Extension function that simplifies the usage of the composed matcher. This provides a more readable syntax for assertions in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/data_class_matchers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Person.shouldBePerson(name: String, age: Int) = this shouldBe personMatcher(name, age)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Lifecycle Hooks with DSL Methods in Kotest\nDESCRIPTION: This snippet demonstrates how to use the DSL methods beforeTest and afterTest to implement lifecycle hooks directly in a Kotest WordSpec. These methods create and register a TestListener behind the scenes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/lifecycle_hooks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec({\n  beforeTest {\n    println(\"Starting a test $it\")\n  }\n  afterTest { (test, result) ->\n    println(\"Finished spec with result $result\")\n  }\n  \"this test\" should {\n    \"be alive\" {\n      println(\"Johnny5 is alive!\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Naive Approach to Handling Unwanted Inputs in Kotest Property Testing (Kotlin)\nDESCRIPTION: Illustrates a naive approach to handling unwanted inputs in Kotest property testing by wrapping the test in an if/else block. This method can potentially introduce bugs in more complex scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/assumptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  if (a != b)\n    levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Embedded Kafka Listener in Kotest FunSpec\nDESCRIPTION: Shows how to register the embeddedKafkaListener in a Kotest FunSpec class. This listener starts a Kafka broker when the spec is created and stops it when the spec completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/kafka.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n  listener(embeddedKafkaListener)\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec() {\n  init {\n    listener(embeddedKafkaListener)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Timestamp Assertions in Kotest\nDESCRIPTION: Methods for comparing Timestamp objects including temporal ordering (before, after, between).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\ntimestamp.shouldBeAfter(anotherTimestamp)\ntimestamp.shouldBeBefore(anotherTimestamp)\ntimestamp.shouldBeBetween(fromTimestamp, toTimestamp)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in ExpectSpec\nDESCRIPTION: Demonstrates how to disable specific tests or context blocks using 'xcontext' and 'xexpect' variants in ExpectSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"this outer block is enabled\") {\n        xexpect(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        expect(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Map Generation in Kotest\nDESCRIPTION: Map generators that create random maps with configurable size ranges and key-value pair generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_34\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.map(Arb<Pair<K,V>>, minSize, maxSize)\nArb.map(Arb<K>, Arb<V>, minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoClose with StringReader in Kotest StringSpec\nDESCRIPTION: Demonstrates how to use autoClose to automatically manage a StringReader resource in a Kotest test specification. The StringReader will be automatically closed after all tests complete, without requiring explicit cleanup code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/autoclose.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Property Test Configuration Example in Kotlin\nDESCRIPTION: Demonstrates how to apply PropTestConfig to a property test within a StringSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String>(PropTestConfig(options here...)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: General Container Setup with Redis\nDESCRIPTION: Example of setting up a general Redis container\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval container = install(TestContainerExtension(\"redis:5.0.3-alpine\")) {\n  startupAttempts = 1\n  withExposedPorts(6379)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Arrow NonEmptyList in KotlinTest\nDESCRIPTION: Demonstrates various matchers for Arrow's NonEmptyList type that mirror collection matchers but are specialized for NELs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nNonEmptyList.of(1, 2, null).shouldContainNull()\nNonEmptyList.of(1, 2, 3, 4).shouldBeSorted<Int>()\nNonEmptyList.of(1, 2, 3, 3).shouldHaveDuplicates()\nNonEmptyList.of(1).shouldBeSingleElement(1)\nNonEmptyList.of(1, 2, 3).shouldContain(2)\nNonEmptyList.of(1, 2, 3).shouldHaveSize(3)\nNonEmptyList.of(1, 2, 3).shouldContainNoNulls()\nNonEmptyList.of(null, null, null).shouldContainOnlyNulls()\nNonEmptyList.of(1, 2, 3, 4, 5).shouldContainAll(3, 2, 1)\n```\n\n----------------------------------------\n\nTITLE: Testing Strings for Same Length\nDESCRIPTION: Demonstrates how to verify that two strings have the same length using the haveSameLengthAs matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello\" should haveSameLengthAs(\"world\")\n\"hello\" shouldNot haveSameLengthAs(\"you\")\n```\n\n----------------------------------------\n\nTITLE: Generating Negative Float Values in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces negative Float values, with options to include non-finite edge cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.negativeFloat(includeNonFiniteEdgeCases)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Data from a .table File\nDESCRIPTION: Executes assertions using data loaded from a .table file. This works the same way as with tables defined directly in code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/table_driven_testing.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"table-driven testing from the .table file\") {\n    // asserts like before\n    tableFromFile.forAll { id, name, username ->\n        id shouldBeGreaterThan 0\n        username shouldNotBe \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Tests in Kotlin for Kotest\nDESCRIPTION: Shows how to use Table Tests in Kotest to specify combinations of values for testing. It demonstrates creating a table with headers and rows, and using forAll to test all combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TableExample : StringSpec(), TableTesting {\n  init {\n    \"numbers should be prime\" {\n      val table = table(\n        headers(\"a\", \"b\"),\n        row(5, 5),\n        row(4, 6),\n        row(3, 7)\n      )\n      forAll(table) { a, b ->\n        a + b == 10\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Range Matchers in KoTest\nDESCRIPTION: Examples of using the new beInRange matcher to verify if integers fall within a specified range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n3 should beInRange(1..10)\n4 should beInRange(1..3)\n```\n\n----------------------------------------\n\nTITLE: Preventing System Output with NoSystemOutListener and NoSystemErrListener\nDESCRIPTION: Using NoSystemOutListener and NoSystemErrListener to prevent code from writing to System.out or System.err directly.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n```\n\n----------------------------------------\n\nTITLE: Issue with Mock Reuse in Multiple Tests\nDESCRIPTION: Illustrates the problem of mock reuse when multiple tests use the same mock object, leading to unexpected verification errors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/integrations/mocks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n    test(\"Saves to repository as well\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using contain Collection Matcher in KotlinTest\nDESCRIPTION: Demonstrates the contain matcher for asserting that a collection contains a specific element in KotlinTest. The example checks if a list contains the integer 4.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should contain(4)\n```\n\n----------------------------------------\n\nTITLE: Using When in WordSpec\nDESCRIPTION: Demonstrates using the 'When' keyword in WordSpec to add an additional level of nesting. This allows for more complex and detailed test hierarchies and specifications.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"Hello\" When {\n        \"asked for length\" should {\n            \"return 5\" {\n                \"Hello\".length shouldBe 5\n            }\n        }\n        \"appended to Bob\" should {\n            \"return Hello Bob\" {\n                \"Hello \" + \"Bob\" shouldBe \"Hello Bob\"\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Infix Matchers in Kotest\nDESCRIPTION: Kotest now supports infix notation for many matchers, allowing for more readable assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n\"test\" {\n  5 shouldBe 5\n  \"hello\" shouldStartWith \"h\"\n  listOf(1, 2, 3) shouldContain 2\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest System Extensions Dependency\nDESCRIPTION: Maven dependency configuration for adding the Kotest System Extensions module to your project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest:kotest-extensions-jvm:${version}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests in Gradle Build Script with Kotest\nDESCRIPTION: An example of configuring test filtering in the Gradle build script to include all tests from a specific package. This configuration is applied at the build level rather than the command line.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/gradle.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.test {\n    filter {\n        //include all tests from package\n        includeTestsMatching(\"com.somepackage.*\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating SpringExtension Globally in Kotest Project Config\nDESCRIPTION: This snippet shows how to activate the SpringExtension globally for all test classes by registering it in the project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/spring.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/Native Target and Dependencies\nDESCRIPTION: This snippet demonstrates how to set up Kotlin/Native target and add Kotest engine dependency for native tests. It uses linuxX64 as an example target.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/setup.mdx#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    linuxX64() // can add any supported native targets such as linux, mac, windows etc\n  }\n}\nsourceSets {\n  val commonTest by getting {\n    dependencies {\n      implementation(\"io.kotest:kotest-framework-engine:$version\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using contain Matcher for Collections in Kotlin with KotlinTest\nDESCRIPTION: Illustrates how to use the contain matcher in KotlinTest to check if a collection contains a specific element.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should contain(4)\n```\n\n----------------------------------------\n\nTITLE: Generating Random List Permutations in Kotest\nDESCRIPTION: Produces random permutations of a given list.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_24\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.shuffle(list)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Invocations in DescribeSpec\nDESCRIPTION: Example of configuring a test to run multiple times using the invocations parameter\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Tests for Pythagorean Triples in Kotest\nDESCRIPTION: Uses Kotest's forAll function to create data-driven tests for Pythagorean triples, automatically generating individual test cases for each input set.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.3.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n    forAll(\n       PythagTriple(3, 4, 5),\n       PythagTriple(6, 8, 10),\n       PythagTriple(8, 15, 17),\n       PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n        isPythagTriple(a, b, c) shouldBe true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JunitXmlReporter in Kotest Project Config\nDESCRIPTION: Example of adding JunitXmlReporter to Kotest project configuration using AbstractProjectConfig. The configuration includes options for handling container tests, test path naming, and output directory specification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/junit_xml.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(\n    JunitXmlReporter(\n      includeContainers = false, // don't write out status for all tests\n      useTestPathAsName = true, // use the full test path (ie, includes parent test names)\n      outputDir = \"../target/junit-xml\" // include to set output dir for maven\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Properties with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers allow assertions on individual HTML elements. They check for child elements, text content, and attribute presence and values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/jsoup.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveChildWithTag(tag)\nelement.shouldHaveText(text)\nelement.shouldHaveAttribute(name)\nelement.shouldHaveAttributeValue(name, value)\n```\n\n----------------------------------------\n\nTITLE: Nested Clues Error Output\nDESCRIPTION: Example output when a nested clue assertion fails, showing how all the clue messages are included in the error report.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nVerifying user_id=42\nemail_confirmed should be false since we've just created the user\n<true> should equal <false>\n```\n\n----------------------------------------\n\nTITLE: Using haveSize Matcher for Collections in KotlinTest\nDESCRIPTION: Shows how to use the new haveSize matcher for collections in KotlinTest. It demonstrates asserting the size of a collection.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_54\n\nLANGUAGE: kotlin\nCODE:\n```\nmyCollection should haveSize(4)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with Enabled Flag in Kotlin\nDESCRIPTION: Demonstrates how to disable a test case using the enabled configuration parameter. This is equivalent to JUnit's @Ignore annotation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/config_enabled.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = false) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Matchers Dependency - Groovy\nDESCRIPTION: Gradle dependency declaration for adding Ktor matchers to a project using Groovy DSL syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation \"io.kotest.extensions:kotest-assertions-ktor:version\"\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest Example in Kotest\nDESCRIPTION: Demonstrates InstancePerTest mode where each test case gets a new instance of the spec class, including nested contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/isolation_mode.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Test Names with Map in Kotest (Kotlin)\nDESCRIPTION: This snippet demonstrates how to use a map to specify custom test names in Kotest's withData function. The keys of the map represent the test names, while the values are the input data for each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/test_names.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData(\n    mapOf(\n      \"3, 4, 5\" to PythagTriple(3, 4, 5),\n      \"6, 8, 10\" to PythagTriple(6, 8, 10),\n      \"8, 15, 17\" to PythagTriple(8, 15, 17),\n      \"7, 24, 25\" to PythagTriple(7, 24, 25)\n    )\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random DateTimes using Kotlinx DateTime in Kotest\nDESCRIPTION: Generates LocalDateTime instances with all fields in the given ranges. Requires the 'io.kotest.extensions:kotest-property-datetime' module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_42\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.datetime(yearRange, hourRange, minuteRange, secondRage)\n```\n\n----------------------------------------\n\nTITLE: Using TestScope Instead of Renamed TextContext\nDESCRIPTION: Example of using TestScope, which replaced the renamed TextContext as the receiver type for test lambdas.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun TestScope.myCustomExtension() {\n  // Custom extension logic\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kotlinx DateTime Matchers in Kotest\nDESCRIPTION: Demonstrates how to use the new kotlinx-datetime matchers to validate that a LocalDateTime has a specific hour value. This is part of the new kotest-assertions-kotlinx-time module.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.2.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval date = LocalDateTime(2019, 2, 15, 12, 10, 0, 0)\ndate.shouldHaveHour(12)\n```\n\n----------------------------------------\n\nTITLE: Setting Invocation Timeout at Spec Level in Kotest\nDESCRIPTION: This example demonstrates how to set an invocation timeout for all tests within a spec in Kotest. The invocation timeout is set to 25 milliseconds for all tests in the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   invocationTimeout = 25.milliseconds\n\n   test(\"foo\") {\n      // test here\n   }\n\n   test(\"bar\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Valid Object Validation\nDESCRIPTION: Shows how to assert that a UserProfile object passes validation using the shouldBeValid matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/konform.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval alice = UserProfile(\"Alice\", 25)\nvalidateUser shouldBeValid user1\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode Using DSL in Kotest\nDESCRIPTION: Example showing how to set isolation mode using Kotest's DSL approach within a test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/isolation_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec({\n isolationMode = IsolationMode.SingleInstance\n // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Test Iterations in Kotlin\nDESCRIPTION: Example of customizing the number of iterations for a property test using checkAll function with Double parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/test_functions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"a many iterations test\" {\n      checkAll<Double, Double>(10_000) { a, b ->\n         // test here\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Error Message Example in Kotest Table Testing\nDESCRIPTION: Shows the error message format that Kotest produces when a test row fails. The message includes the parameter names and values for easy debugging.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTest failed for (root, 5), (square, 55) with error expected: 55 but was: 25\n```\n\n----------------------------------------\n\nTITLE: Asserting OffsetDateTime Properties in Kotlin with Kotest\nDESCRIPTION: Functions for asserting properties of OffsetDateTime objects, including checking if a date is today or comparing instants between two OffsetDateTime objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\noffsetDateTime.shouldBeToday()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\noffsetDateTime.shouldHaveSameInstantAs(other: OffsetDateTime)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Case Severity in Kotest\nDESCRIPTION: Shows how to assign a severity level to a test case using Kotest's config method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.3.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec() {\n   init {\n      test(\"very very important\").config(severity = TestCaseSeverityLevel.CRITICAL) {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Kotlinx DateTime Values with Kotest Arb\nDESCRIPTION: Functions for generating various date and time types from the kotlinx-datetime library. Requires the 'kotest-property-datetime' module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.date(yearRange)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.datetime(yearRange, hourRange, minuteRange, secondRage)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Subsequences with Kotest Arb\nDESCRIPTION: Produces random subsequences of a given list, starting from index 0 and including the empty list. This can be useful for testing functions that operate on partial lists.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.subsequence(list)\n```\n\n----------------------------------------\n\nTITLE: Applying @EnabledIf Annotation with Custom Condition\nDESCRIPTION: This example demonstrates how to apply a custom EnabledCondition to multiple test specifications using the @EnabledIf annotation. The annotation accepts a class that implements EnabledCondition, which is instantiated and evaluated to determine if the spec should run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/annotations.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest1 : FunSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest2 : DescribeSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyWindowsTests : DescribeSpec() {\n  // tests here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Elements Collection Matchers in Kotlin with KotlinTest Jsoup\nDESCRIPTION: These matchers are used to assert properties of Jsoup Elements collections. They check for the presence of items and the number of items in the collection.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/jsoup.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nelements.shouldBePresent()\nelements.shouldBePresent(n)\nelements.shouldBePresent(n)\n```\n\n----------------------------------------\n\nTITLE: Generating Float Values with Kotest Arbitrary\nDESCRIPTION: This snippet demonstrates methods for generating float values, including positive, negative, and numeric floats, as well as float arrays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genslist.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.float(min, max)\nArb.positiveFloat(min, max)\nArb.negativeFloat(min, max)\nArb.numericFloat(min, max)\nArb.floatArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Testing CompletableFuture Values in KotlinTest\nDESCRIPTION: This snippet shows how to test values in a CompletableFuture using the whenReady function. It allows for clean assertion syntax on future values once they complete.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\nval stringFuture: CompletableFuture<String> = ...\n\n\"My future test\" should {\n  \"support CompletableFuture<T>\" {\n    whenReady(stringFuture) {\n      it shouldBe \"wibble\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Test Lifecycle Mode in Kotest\nDESCRIPTION: Demonstrates how to configure the Spring test lifecycle mode to fire callbacks on root nodes instead of leaf nodes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/spring.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringTestExtension(SpringTestLifecycleMode.Root))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Property Test Configuration in Kotlin\nDESCRIPTION: Demonstrates how to apply configuration options to a property test using PropTestConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String>(PropTestConfig(options here...)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Domain Objects as Clues in Kotlin\nDESCRIPTION: Shows how to use domain objects as clues in Kotest. This approach provides rich context in error messages by including relevant object properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/clues.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class HttpResponse(val status: Int, val body: String)\n\nval response = HttpResponse(404, \"the content\")\n\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Timestamp Properties in Kotlin with Kotest\nDESCRIPTION: Extension functions for Timestamp objects that verify temporal relationships between timestamps, such as ordering and range inclusion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\ntimestamp.shouldBeAfter(anotherTimestamp)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntimestamp.shouldBeBefore(anotherTimestamp)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntimestamp.shouldBeBetween(fromTimestamp, toTimestamp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dispatcher for Single Test in Kotest\nDESCRIPTION: Shows how to enable TestDispatcher for a single test using coroutineTestScope configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineTestScope = true) {\n         // this test will run with a test dispatcher\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Traditional assertSoftly in Kotest\nDESCRIPTION: Example of using the traditional assertSoftly block to collect multiple failures before reporting them.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nassertSoftly {\n  person.name shouldBe \"sam\"\n  person.age shouldBe 99\n  person.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Matchers in Kotest\nDESCRIPTION: Core JSON validation matchers that check for valid JSON strings, objects, and arrays. These matchers are available for multiplatform projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/json/overview.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Matcher              | Description                                        | Targets       |\n|----------------------|----------------------------------------------------|:--------------||\n| `shouldBeValidJson`  | verifies that a given string parses to valid json  | Multiplatform |\n| `shouldBeJsonObject` | asserts that a string is a valid JSON **_object_** | Multiplatform |\n| `shouldBeJsonArray`  | asserts that a string is a valid JSON **_array_**  | Multiplatform |\n```\n\n----------------------------------------\n\nTITLE: Using contain Matcher for Maps in Kotlin for Kotest\nDESCRIPTION: Demonstrates the usage of the contain matcher for Maps in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_50\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should contain(1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Integrating Testcontainers with Kotest\nDESCRIPTION: Shows how to use Testcontainers with Kotest by registering a container to run per test or per spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.1.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perTest())\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perSpec())\n```\n\n----------------------------------------\n\nTITLE: Generating Long Arrays in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces LongArrays with specified length and content generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.longArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Using haveKey Map Matcher in KotlinTest\nDESCRIPTION: Example of using the haveKey matcher to verify a map contains a specific key in KotlinTest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_48\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveKey(1)\n```\n\n----------------------------------------\n\nTITLE: Kotest System Property Test Filtering\nDESCRIPTION: Examples of using Kotest's specific system properties for test filtering, supporting both spec and test level filtering with wildcards.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/gradle.md#2025-04-13_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*'\n```\n\nLANGUAGE: shell\nCODE:\n```\nkotest_filter_specs='com.somepackage.*' gradle test\n```\n\nLANGUAGE: shell\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*' -Dkotest.filter.tests='*Foo*'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngradle test -Dkotest.filter.tests='Foo*'\n```\n\n----------------------------------------\n\nTITLE: Overriding Callback Functions in Kotest Specs\nDESCRIPTION: Example showing how to override callback functions directly in a Spec class instead of using DSL methods. This approach is an alternative to using the DSL methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/lifecycle_hooks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestSpec : WordSpec() {\n    override fun beforeTest(testCase: TestCase) {\n        println(\"Starting a test $testCase\")\n    }\n\n    init {\n        \"this test\" should {\n            \"be alive\" {\n                println(\"Johnny5 is alive!\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution Parameters\nDESCRIPTION: Shows how to configure test execution parameters including timeout, invocations, threads, and tags for individual tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/index.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n  \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n    // test here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using haveKey Map Matcher in Kotest\nDESCRIPTION: Example of the haveKey matcher for maps, which verifies that a map contains a specific key.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveKey(1)\n```\n\n----------------------------------------\n\nTITLE: Overriding System Properties in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the withSystemProperty function to override system properties within a specific scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSystemProperty(\"foo\", \"bar\") {\n  System.getProperty(\"foo\") shouldBe \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Ktor Assertions Dependency in Gradle\nDESCRIPTION: Maven dependency configuration for adding Kotest Ktor assertions to your project. These assertions are published under a different group ID than the core Kotest modules.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation(\"io.kotest.extensions:kotest-assertions-ktor:version\")\n```\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation \"io.kotest.extensions:kotest-assertions-ktor:version\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Container for Apple Silicon/ARM\nDESCRIPTION: Example of configuring Kafka container platform for compatibility with Apple Silicon/ARM architecture.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCreateContainerCmdModifier { it.withPlatform(\"linux/amd64\") }\n```\n\n----------------------------------------\n\nTITLE: Tagging All Tests in a Kotest FunSpec\nDESCRIPTION: This example demonstrates how to add tags to all tests in a Kotest FunSpec using the tags function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/tags.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n\n  tags(Linux, Mysql)\n\n  test(\"my test\") { } // automatically marked with the above tags\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging Project-Wide in Kotlin using ProjectConfig\nDESCRIPTION: This code demonstrates how to enable coroutine debugging for all tests in a project by using ProjectConfig. It sets the 'coroutineDebugProbes' flag to true in the project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val coroutineDebugProbes = true\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kotest with Environment Variable Filtering\nDESCRIPTION: This example shows how to use Kotest-specific environment variables for test filtering, which works for both Kotlin/JVM and Kotlin/Native targets.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/gradle.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkotest_filter_specs='com.somepackage.*' gradle test\n```\n\n----------------------------------------\n\nTITLE: Test Output Format with DisplayFullTestPath\nDESCRIPTION: Example showing the formatted output when displayFullTestPath is enabled in project configuration, displaying the full test path including parent contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/output.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMyTests. describe 1 - test 1\nMyTests. describe 1 - test 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Duration and Interval for Eventually in Kotlin\nDESCRIPTION: Shows how to set up the duration and interval parameters that control how long and how frequently eventually will retry the test operation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  interval = 250.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Testing System Output in Kotlin with KotlinTest\nDESCRIPTION: Demonstrates how to use NoSystemOutListener and NoSystemErrListener to test for exceptions when writing to System.out or System.err. These listeners allow catching and asserting on attempted writes to system streams.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NoSystemOutOrErrTest : StringSpec() {\n\n  override fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n\n  init {\n\n    \"System.out should throw an exception when the listener is added\" {\n      shouldThrow<SystemOutWriteException> {\n        System.out.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n\n    \"System.err should throw an exception when the listener is added\" {\n      shouldThrow<SystemErrWriteException> {\n        System.err.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Negated Kotest Matchers\nDESCRIPTION: Examples of using negated matchers in both infix and extension function styles.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\na shouldNot startWith(\"boo\")\na.shouldNotStartWith(\"boo\")\n```\n\n----------------------------------------\n\nTITLE: Generating Random Domains with Kotest Arbitrary\nDESCRIPTION: Uses Arb.domain(tlds, labelArb) to generate random domains with a random TLD (defaulting to top 120 TLDs) and a label generator for domain parts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.domain(tlds, labelArb)\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Container with Multiple Scripts in Kotlin\nDESCRIPTION: Configures a JDBC Database Container Extension with multiple initialization scripts using the dbInitScripts property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds: DataSource = install(JdbcDatabaseContainerExtension(mysql)) {\n      maximumPoolSize = 8\n      minimumIdle = 4\n      dbInitScripts = listOf(\"/init.sql\", \"/sql-changesets\")\n   }\n```\n\n----------------------------------------\n\nTITLE: Test Output Example for Individual Table Tests\nDESCRIPTION: Shows the console output format when running individual tests generated from table data. The output displays the parent descriptions and each individual test with its status.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nIntegerMathSpec\n  ✓ Addition\n    ✓ 1 + 0\n    ✓ 1 + 1\n  ✓ Complex Math\n    ✓ 8/2(2+2)\n    ✓ 5/5 + 1*1 + 3-2\n```\n\n----------------------------------------\n\nTITLE: Creating Tests with DescribeSpec in Kotlin\nDESCRIPTION: Demonstrates how to use DescribeSpec which is similar to SpekFramework, using 'describe', 'and', and 'it' keywords to structure tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_43\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DescribeSpecExample : DescribeSpec() {\n  init {\n    describe(\"some context\") {\n      it(\"test name\") {\n        // test here\n      }\n      describe(\"nested contexts\") {\n        and(\"another context\") {\n          it(\"test name\") {\n            // test here\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Data Class for Pythagorean Triple Test Inputs in Kotlin\nDESCRIPTION: Defines a data class to represent a single row of test input for Pythagorean triple tests. This class encapsulates the three integer values needed for each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Full Example of Using JDBC Test Container in Kotest\nDESCRIPTION: Provides a complete example of using a JDBC Test Container in a Kotest FunSpec, including container setup and data insertion/retrieval.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass QueryDatastoreTest : FunSpec({\n\n  val mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n    startupAttempts = 1\n    withUrlParam(\"connectionTimeZone\", \"Z\")\n    withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n  }\n\n  val ds = install(JdbcTestContainerExtension(mysql)) {\n    poolName = \"myconnectionpool\"\n    maximumPoolSize = 8\n    idleTimeout = 10000\n  }\n\n  val datastore = PersonDatastore(ds)\n\n  test(\"insert happy path\") {\n\n    datastore.insert(Person(\"sam\", \"Chicago\"))\n    datastore.insert(Person(\"jim\", \"Seattle\"))\n\n    datastore.findAll().shouldBe(listOf(\n      Person(\"sam\", \"Chicago\"),\n      Person(\"jim\", \"Seattle\"),\n    ))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Example of .table File Format\nDESCRIPTION: Shows the format of a .table file, which uses pipe (|) as separator. The format requires headers, trims cell values, and allows comments and blank lines.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/table_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\nid | username | fullName\n4  | jmfayard | Jean-Michel Fayard\n6  | louis    | Louis Caugnault\n```\n\n----------------------------------------\n\nTITLE: Using @Order Annotation for Spec Execution Order\nDESCRIPTION: Demonstrates how to use the @Order annotation to control spec execution order. Lower order values are executed first, and specs without annotations are executed last.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/spec_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Order(1)\nclass FooTest : FunSpec() { }\n\n@Order(0)\nclass BarTest: FunSpec() {}\n\n@Order(1)\nclass FarTest : FunSpec() { }\n\nclass BooTest : FunSpec() {}\n```\n\n----------------------------------------\n\nTITLE: Coverage Percentage Verification in Kotest\nDESCRIPTION: Shows how to verify statistical coverage using percentage constraints for generated values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/statistics.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoveragePercentages(mapOf(RoundingMode.HALF_DOWN to 10.0, RoundingMode.FLOOR to 10.0)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Coroutine Scope Test Example in Kotlin\nDESCRIPTION: Demonstrates nested coroutine scope usage in test blocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.1.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndescribe(\"some test\") {\n launch {\n    delay(100)\n    it(\"should do something\") {\n       launch {\n          delay(100)\n       }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Double Arbitraries in Kotlin\nDESCRIPTION: Functions for generating random Double values and arrays with specified ranges and edge cases in Kotest, including positive, negative, and numeric variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.double(min, max)\nArb.positiveDouble(min, max)\nArb.negativeDouble(min, max)\nArb.numericDouble(min, max)\nArb.doubleArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Gradle (Groovy)\nDESCRIPTION: This snippet shows how to add the Kotest Testcontainers extension dependency to a Gradle build file using Groovy syntax. It includes a placeholder for the Kotest version.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers_46x.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency with Maven\nDESCRIPTION: Maven dependency configuration for adding the Kotest Testcontainers extension to a project. This allows integration between Kotest tests and Testcontainers for creating Docker-based test dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers_46x.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing WithDataTestName Interface for Custom Test Names in Kotlin\nDESCRIPTION: WithDataTestName interface allows a type to modify the test name generated in data driven tests, providing more control over how test cases are displayed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class MyTestCase(val input: String, val expected: String) : WithDataTestName {\n  override fun dataTestName() = \"when input is $input\"\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually Retry Configuration in Kotlin\nDESCRIPTION: Example showing how to configure retry attempts and duration for eventually.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/eventually.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  initialDelay = 8.seconds\n  retries = 10\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Matchers for Person Properties in Kotlin\nDESCRIPTION: Defines individual matchers for name, age, and address properties of a Person. These matchers will be used to compose a more complex Person matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/data_class_matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun nameMatcher(name: String) = Matcher<String> {\n  MatcherResult(\n    value == name,\n    { \"Name $value should be $name\" },\n    { \"Name $value should not be $name\" }\n  )\n}\n\nfun ageMatcher(age: Int) = Matcher<Int> {\n  MatcherResult(\n    value == age,\n    { \"Age $value should be $age\" },\n    { \"Age $value should not be $age\" }\n  )\n}\n\nval addressMatcher = Matcher<Address> {\n  MatcherResult(\n    value == Address(\"Warsaw\", \"Test\", \"1/1\"),\n    { \"Address $value should be Test 1/1 Warsaw\" },\n    { \"Address $value should not be Test 1/1 Warsaw\" }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: System Exit Testing Implementation\nDESCRIPTION: Demonstrates how to test System.exit calls by catching SystemExitException using Kotest's System Exit Listener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/system.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n    \"Catch exception\" {\n      val thrown: SystemExitException = shouldThrow<SystemExitException> {\n        System.exit(22)\n      }\n\n      thrown.exitCode shouldBe 22\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveKey Matcher for Maps in Kotest\nDESCRIPTION: Demonstrates the use of the haveKey matcher for asserting key presence in maps in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveKey(1)\n```\n\n----------------------------------------\n\nTITLE: Adding Sonatype Snapshots Repository in Gradle\nDESCRIPTION: This code snippet shows how to add the Sonatype snapshots repository to your Gradle build file. This is necessary to access the latest snapshot builds of Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_18\n\nLANGUAGE: gradle\nCODE:\n```\nhttps://oss.sonatype.org/content/repositories/snapshots\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Container with Embedded Zookeeper in Kotlin\nDESCRIPTION: Shows how to create a Kafka container with embedded Zookeeper using TestContainerExtension in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval kafka = install(TestContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n  withEmbeddedZookeeper()\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveSize Collection Matcher in Kotest\nDESCRIPTION: Example of the haveSize matcher for collections, which verifies that a collection has the expected number of elements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nmyCollection should haveSize(4)\n```\n\n----------------------------------------\n\nTITLE: WordSpec Style Testing in Kotlin\nDESCRIPTION: Shows WordSpec testing style which uses 'should' keyword for test nesting. Includes both simple and nested examples using When keyword.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"String.length\" should {\n        \"return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec({\n    \"Hello\" When {\n        \"asked for length\" should {\n            \"return 5\" {\n                \"Hello\".length shouldBe 5\n            }\n        }\n        \"appended to Bob\" should {\n            \"return Hello Bob\" {\n                \"Hello \" + \"Bob\" shouldBe \"Hello Bob\"\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Listeners\nDESCRIPTION: Examples of creating and using test listeners for setup and teardown operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : TestListener {\n\n  var started = 0L\n\n  override fun beforeTest(testCase: TestCase): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(testCase: TestCase, result: TestResult): Unit {\n    println(\"Duration of ${testCase.descriptor} = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n\n  override fun listeners(): List<TestListener> = listOf(TimerListener)\n\n  // tests here\n\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n\n    override fun beforeTest(testCase: TestCase) {\n      // BeforeTest here\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Klock Matchers in Markdown Table\nDESCRIPTION: A markdown table listing various Klock matchers for dates and times, including their descriptions. The table covers assertions for year, month, day, hour, minute, second, millisecond comparisons, as well as before, after, and between checks for both dates and times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/klock.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Matcher | Description    |\n| ---------- | --- |\n| `date.shouldHaveSameYear(otherDate)` | Asserts that the date has the same year as the given date. |\n| `date.shouldHaveSameMonth(otherDate)` | Asserts that the date has the same month as the given date. |\n| `date.shouldHaveSameDay(otherDate)` | Asserts that the date has the same day of the month as the given date. |\n| `date.shouldBeBefore(otherDate)` | Asserts that the date is before the given date. |\n| `date.shouldBeAfter(otherDate)` | Asserts that the date is after the given date. |\n| `date.shouldBeBetween(firstDate, secondDate)` | Asserts that the date is between firstdate and seconddate. |\n| `date.shouldHaveYear(year)` | Asserts that the date have correct year. |\n| `date.shouldHaveMonth(month)` | Asserts that the date have correct month. |\n| `date.shouldHaveDay(day)` | Asserts that the date have correct day of year. |\n| `date.shouldHaveHour(hour)` | Asserts that the date have correct hour. |\n| `date.shouldHaveMinute(Minute)` | Asserts that the date have correct minute. |\n| `date.shouldHaveSecond(second)` | Asserts that the date have correct second. |\n| `time.shouldHaveSameHoursAs(time)` | Asserts that the time has the same hours as the given time. |\n| `time.shouldHaveHours(hours)` | Asserts that the time has the given hours. |\n| `time.shouldHaveSameMinutesAs(time)` | Asserts that the time has the same minutes as the given time. |\n| `time.shouldHaveMinutes(minutes)` | Asserts that the time has the given minutes. |\n| `time.shouldHaveSameSeconds(time)` | Asserts that the time has the same seconds as the given time. |\n| `time.shouldHaveSeconds(seconds)` | Asserts that the time has the given seconds. |\n| `time.shouldHaveSameMillisecondsAs(time)` | Asserts that the time has the same milliseconds as the given time. |\n| `time.shouldHaveMilliseconds(millis)` | Asserts that the time has the given millis. |\n| `time.shouldBeBefore(time)` | Asserts that the time is before the given time. |\n| `time.shouldBeAfter(time)` | Asserts that the time is after the given time. |\n| `time.shouldBeBetween(time, time)` | Asserts that the time is between the two given times. |\n```\n\n----------------------------------------\n\nTITLE: Creating a Konform Validator for UserProfile in Kotlin\nDESCRIPTION: Defines a Konform validator for UserProfile with constraints on fullName length and age range. The fullName must be between 4 and 100 characters, while the age, if present, must be between 21 and 99.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/konform.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval validateUser = Validation<UserProfile> {\n  UserProfile::fullName {\n     minLength(4)\n     maxLength(100)\n  }\n\n  UserProfile::age ifPresent {\n     minimum(21)\n     maximum(99)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec in Kotlin for Kotest\nDESCRIPTION: Demonstrates how to use StringSpec in Kotest to create simple string-based tests. It shows basic assertions and the ability to add configuration to individual tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  init {\n    \"strings.size should return size of string\" {\n      \"hello\".length shouldBe 5\n      \"hello\" should haveLength(5)\n    }\n\n    \"strings should support config\" {\n      \"hello\".length shouldBe 5\n    }.config(invocations = 5)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Character Generation with Kotest in Kotlin\nDESCRIPTION: Methods for generating character values and arrays with support for specifying character ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.char(range1, range2,...)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.char(listOf('A'..'C', 'X'..'Z'))\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.charArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with Enabled Flag in Kotlin\nDESCRIPTION: Demonstrates how to disable a test case by setting the 'enabled' configuration parameter to false. This is similar to JUnit's @Ignore annotation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/config_enabled.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = false) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Testing File Permissions and Attributes\nDESCRIPTION: Demonstrates matchers for checking file properties such as readable, writeable, executable, and hidden status.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nfile should beRadable()\nfile should beWriteable()\nfile should beExecutable()\nfile should beHidden()\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to Test Case in Kotest FunSpec\nDESCRIPTION: This snippet illustrates how to apply tags (Database and Linux) to a test case in Kotest's FunSpec style. Tags can be used for grouping and selective test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_case_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Clues in Kotlin\nDESCRIPTION: Demonstrates how to nest clues to provide hierarchical context for complex assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/clues.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n{ \"Verifying user_id=${user.name}\" }.asClue {\n  \"email_confirmed should be false since we've just created the user\".asClue {\n    user.emailConfirmed shouldBe false\n  }\n  \"login\".asClue {\n    user.login shouldBe \"sksamuel\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions Block\nDESCRIPTION: Examples of using soft assertions to collect multiple assertion failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec Test Style in Kotlin\nDESCRIPTION: Demonstrates how to use the StringSpec style for writing tests in KotlinTest. Tests are defined as strings with associated test code in lambda blocks. Tests can also be configured with additional parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  init {\n    \"strings.size should return size of string\" {\n      \"hello\".length shouldBe 5\n      \"hello\" should haveLength(5)\n    }\n\n    \"strings should support config\" {\n      \"hello\".length shouldBe 5\n    }.config(invocations = 5)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Eventually Usage with Duration\nDESCRIPTION: Simple example of using eventually with a duration in milliseconds to test asynchronous code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/concurrency/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\neventually(5000) { // duration in millis\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Next Operation with Kotest Arb\nDESCRIPTION: Demonstrates how to retrieve the next value from an Arbitrary generator using both default Random and custom Random source.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genops.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval arbA: Arb<A> = ...\nval a = arbA.next() // use Random.Default\nval a2 = arbA.next(rs) // pass in Random\n```\n\n----------------------------------------\n\nTITLE: Using Exception Suppression Function in Eventually in Kotlin\nDESCRIPTION: Demonstrates how to use a function to determine which exceptions should be suppressed in 'eventually'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/concurrency/eventually.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 8000\n  suppressExceptionIf = { it is UserNotFoundException && it.username == \"bob\" }\n}) {\n  userRepository.getById(1).name shouldNotBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Listener at Test Class Level in Kotest\nDESCRIPTION: Example showing how to register a custom listener (TimerListener) at the test class level using the extensions function. This applies the listener to all tests within the class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/extensions/examples.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n  extensions(TimerListener)\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure in Gradle Build Script\nDESCRIPTION: This Kotlin code snippet demonstrates how to configure Allure in a Gradle build script. It sets the Allure version and disables autoconfigure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/allure.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nallure {\n  autoconfigure = false\n  version = \"2.13.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually Listener Configuration in Kotlin\nDESCRIPTION: Example showing how to add a listener to track eventually iterations and failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/eventually.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  listener = { k, throwable -> println(\"Iteration $k, with cause $throwable\") }\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kotlinx Datetime Generators in Kotest Property Tests\nDESCRIPTION: Shows how to use Kotest's property test generators for the kotlinx datetime library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.3.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Arb.datetime(1987..1994)) { date ->\n   isValidStarTrekTngSeason(date) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jacoco XML Report Task\nDESCRIPTION: Configures the Jacoco test report task to generate XML reports and depend on the test task.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/integrations/jacoco.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.jacocoTestReport {\n    dependsOn(tasks.test)\n    reports {\n        xml.required.set(true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Element Matchers in KotlinTest with Jsoup\nDESCRIPTION: These matchers allow assertions on individual DOM elements, checking for children with specific tags, text content, and attribute properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/jsoup.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nelement.shouldHaveChildWithTag(tag)\nelement.shouldHaveText(text)\nelement.shouldHaveAttribute(name)\nelement.shouldHaveAttributeValue(name, value)\n```\n\n----------------------------------------\n\nTITLE: System Property Extension Usage\nDESCRIPTION: Demonstrates how to override system properties in tests using withSystemProperty extension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/system.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSystemProperty(\"foo\", \"bar\") {\n  System.getProperty(\"foo\") shouldBe \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Generator Interface in Kotlin\nDESCRIPTION: Shows the basic Gen<T> interface definition for implementing custom generators in Kotest with constants and random value generation functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Gen<T> {\n  fun constants(): Iterable<T>\n  fun random(): Sequence<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with Bang Prefix in Kotest StringSpec\nDESCRIPTION: This snippet illustrates the use of the '!' prefix to skip a specific test in a Kotest StringSpec. The test prefixed with '!' is ignored, while others are executed normally.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/focus.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform with Enhanced Logging in Gradle\nDESCRIPTION: Shows how to set up JUnit Platform with additional test logging configuration in Gradle, enabling output for failed tests, skipped tests, and standard output/error streams.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    useJUnitPlatform()\n    testLogging {\n        events \"FAILED\", \"SKIPPED\", \"STANDARD_OUT\", \"STANDARD_ERROR\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing BlockHound Mode for a Code Section\nDESCRIPTION: Shows how to temporarily change the BlockHound mode for a specific section of code within a test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/blockhound.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"allow blocking section\") {\n   // ...\n   withBlockHoundMode(BlockHoundMode.DISABLED) {\n     blockInNonBlockingContext()\n   }\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Exhaustive Int Sequences and Multiples with Kotest\nDESCRIPTION: This snippet shows how to generate exhaustive Int sequences, multiples of a number, and factors using Kotest. These generators are useful for testing edge cases and specific numeric patterns.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.ints(range)\nArb.multiple(k, max)\nArb.factor(k)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency for Android\nDESCRIPTION: Adds the required dependency for the Kotest JUnit5 runner to an Android Gradle project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/setup.mdx#2025-04-13_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n   testImplementation 'io.kotest:kotest-runner-junit5:version'\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure Example - Single Line\nDESCRIPTION: Equivalent JSON object in single-line format, demonstrating format-independent matching.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/json/content.md#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\" : 41, \"name\": \"sam\", \"location\": \"chicago\" }\n```\n\n----------------------------------------\n\nTITLE: Generating Float Arrays in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces FloatArrays with specified length and content generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.floatArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Arrow Optics Integration\nDESCRIPTION: Additional dependency required for using Arrow Optics with Kotest property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nio.arrow-kt:arrow-optics:arrow-version\n```\n\n----------------------------------------\n\nTITLE: Fibonacci Interval Configuration in Kotlin\nDESCRIPTION: Using fibonacci sequence for interval timing in eventually testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  intervalFn = 100.milliseconds.fibonacci()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Strings with Kotest Arb\nDESCRIPTION: Generates random printable strings with a specified size range. If no range is provided, it defaults to 0..100. Edge cases include empty string, blank string, and unicode string.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.string(range)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest-Koin Extension Dependency\nDESCRIPTION: Shows how to add the Kotest extension for Koin as a dependency to your project. The extension enables Koin dependency injection framework to be used with Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/koin.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-extensions-koin:${version}\n```\n\n----------------------------------------\n\nTITLE: Asserting Kotlin Function Properties in Kotest\nDESCRIPTION: Assertion methods for Kotlin functions, including checking for annotations, return types, and function modifiers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_32\n\nLANGUAGE: Kotlin\nCODE:\n```\nkfunction.shouldHaveAnnotations()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkfunction.shouldBeAnnotatedWith<T>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkfunction.shouldHaveReturnType<T>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nkfunction.shouldBeInline()\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Property-Based Matchers in Kotlin\nDESCRIPTION: This snippet defines two data classes (Person and Address) that will be used to demonstrate property-based composed matchers for complex data structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/composed_matchers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(\n  val name: String,\n  val age: Int,\n  val address: Address,\n)\n\ndata class Address(\n  val city: String,\n  val street: String,\n  val buildingNumber: String,\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Fields and Elements in Kotest Collections\nDESCRIPTION: Asserts specific conditions about collection elements, such as field equality or single element validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/collections.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainAllIgnoringFields()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveSingleElement(element)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveSingleElement { block }\n```\n\n----------------------------------------\n\nTITLE: Integrating Testcontainers Per Spec with Kotest\nDESCRIPTION: Example showing how to register a Testcontainer to be started once per specification class using the perSpec() function from the kotest-extensions-testcontainers module.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perSpec())\n```\n\n----------------------------------------\n\nTITLE: Customizing BlockHound Integration\nDESCRIPTION: Illustrates how to create a custom BlockHound integration class to allow specific blocking calls. This example allows blocking calls inside the LoggerFactory's performInitialization method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/blockhound.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport reactor.blockhound.BlockHound\nimport reactor.blockhound.integration.BlockHoundIntegration\n\nclass MyBlockHoundIntegration : BlockHoundIntegration {\n   override fun applyTo(builder: BlockHound.Builder): Unit = with(builder) {\n      allowBlockingCallsInside(\"org.slf4j.LoggerFactory\", \"performInitialization\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Testing Examples in KotlinTest\nDESCRIPTION: Shows both boolean-based and matcher-based property testing approaches.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  forAll(Gen.string(), Gen.string(), { a, b ->\n    (a + b).startsWith(a)\n  })\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  assertAll(Gen.string(), Gen.string(), { a, b ->\n    a + b should startWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Random Element Selection in Kotest\nDESCRIPTION: Randomly selects an element from a given collection or varargs. This is useful for picking random items from a predefined set.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_30\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.element(collection)\nArb.element(vararg T)\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Type Assertions in Kotest\nDESCRIPTION: Demonstrates smart casting with generic type assertions using shouldBeTypeOf\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.2.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval list: Any = arrayListOf(1, 2, 3)\nlist.shouldBeTypeOf<ArrayList<Int>>()\nlist[0] shouldBe 1\n```\n\n----------------------------------------\n\nTITLE: Adding Person Matcher Extension Function\nDESCRIPTION: Creates an extension function for the Person matcher to improve readability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/composed_matchers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Person.shouldBePerson(name: String, age: Int) = this shouldBe personMatcher(name, age)\n```\n\n----------------------------------------\n\nTITLE: Asserting BigDecimal Values in Kotest\nDESCRIPTION: Assertion functions for validating BigDecimal values in Kotest tests, including precision, scale, comparison, and range checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldHavePrecision(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldHaveScale(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBePositive()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeNegative()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeZero()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeLessThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeLessThanOrEquals(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeGreaterThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeGreaterThanOrEquals(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldBeInRange(r)\n```\n\n----------------------------------------\n\nTITLE: Applying Kotest Multiplatform Plugin for JavaScript/Native\nDESCRIPTION: Applies the Kotest multiplatform Gradle plugin to enable testing in Kotlin/JS and Kotlin/Native projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/setup.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Arrow NonEmptyList Types with KoTest Arrow Matchers\nDESCRIPTION: Examples of various matchers for Arrow's NonEmptyList type, including containment, sorting, duplicates, and null checking from the kotlintest-assertions-arrow module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nNonEmptyList.of(1, 2, null).shouldContainNull()\nNonEmptyList.of(1, 2, 3, 4).shouldBeSorted<Int>()\nNonEmptyList.of(1, 2, 3, 3).shouldHaveDuplicates()\nNonEmptyList.of(1).shouldBeSingleElement(1)\nNonEmptyList.of(1, 2, 3).shouldContain(2)\nNonEmptyList.of(1, 2, 3).shouldHaveSize(3)\nNonEmptyList.of(1, 2, 3).shouldContainNoNulls()\nNonEmptyList.of(null, null, null).shouldContainOnlyNulls()\nNonEmptyList.of(1, 2, 3, 4, 5).shouldContainAll(3, 2, 1)\n```\n\n----------------------------------------\n\nTITLE: Implementing System Environment Listener in Kotest Project Config\nDESCRIPTION: Shows how to use the SystemEnvironmentProjectListener to apply environment variable overrides at the Project level in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n    override fun listeners(): List<TestListener> = listOf(SystemEnvironmentProjectListener(\"foo\", \"bar\"))\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pythagorean Triple Function in Kotlin\nDESCRIPTION: Implements a function to check if three given integers form a Pythagorean triple.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Sharing Eventually Configuration in Kotlin\nDESCRIPTION: This example shows how to create and share EventuallyConfig objects for different test scenarios. It demonstrates configuring 'slow' and 'fast' operations with custom listeners for logging.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = EventuallyConfig<ServerResponse, ServerException>(5.minutes, interval = 25.milliseconds.fibonacci(), exceptionClass = ServerException::class)\nval fast = slow.copy(duration = 5.seconds)\n\nclass FooTests : StringSpec({\n  val logger = logger(\"FooTests\")\n  val fSlow = slow.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\")})\n\n  \"server eventually provides a result for /foo\" {\n    eventually(fSlow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : StringSpec({\n  val logger = logger(\"BarTests\")\n  val bFast = fast.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\")})\n\n  \"server eventually provides a result for /bar\" {\n    eventually(bFast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Iterable Matching Operations in Kotlin Kotest\nDESCRIPTION: Methods for matching operations on Iterable types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/collections.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\niterable.shouldMatchEach(assertions)\niterable.shouldMatchInOrder(assertions)\niterable.shouldMatchInOrderSubset(assertions)\n```\n\n----------------------------------------\n\nTITLE: Date Matchers Usage in Kotlin with Klock\nDESCRIPTION: Example usages of date-related matchers including assertions for year, month, day comparisons and temporal relationships between dates.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/klock.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYear(otherDate)\ndate.shouldHaveSameMonth(otherDate)\ndate.shouldHaveSameDay(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDay(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\n```\n\n----------------------------------------\n\nTITLE: Float Generator\nDESCRIPTION: Generates Float values within a specified range, including important edge cases like NEGATIVE_INFINITY, MIN_VALUE, and NaN when they fall within the range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.float(min, max)\n```\n\n----------------------------------------\n\nTITLE: Using Range Matchers in KotlinTest\nDESCRIPTION: Shows how to use the beInRange matcher to verify that an integer falls within a specified range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n3 should beInRange(1..10)\n4 should beInRange(1..3)\n```\n\n----------------------------------------\n\nTITLE: Combined Test Filtering with Multiple Conditions\nDESCRIPTION: Shows how to combine multiple system properties to filter both by package and test name patterns.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/gradle.md#2025-04-13_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nsystemProperty(\"kotest.filter.specs\", \"com.somepackage.*\")\nsystemProperty(\"kotest.filter.tests\", \"*Foo*\")\n```\n\nLANGUAGE: groovy\nCODE:\n```\nsystemProperty(\"kotest.filter.tests\", \"Foo*\")\n```\n\n----------------------------------------\n\nTITLE: System Property Extension Usage\nDESCRIPTION: Demonstrates how to override system properties in tests using both direct extension function and listener approach.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/system.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSystemProperty(\"foo\", \"bar\") {\n  System.getProperty(\"foo\") shouldBe \"bar\"\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n          override fun listeners() = listOf(SystemPropertyListener(\"foo\", \"bar\"))\n\n        init {\n          \"MyTest\" {\n            System.getProperty(\"foo\") shouldBe \"bar\"\n          }\n        }\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Property Test Without Assumptions\nDESCRIPTION: Example of a property test that may fail due to unhandled edge cases\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/assumptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Test Names with Whitespace Stripping\nDESCRIPTION: Example of defining test names across multiple lines with whitespace stripping enabled.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.3.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n  init {\n   \"\"\"this is a\n      test spanning multiple lines\"\"\" { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Testcontainers Per Test with Kotest Listeners\nDESCRIPTION: Example showing how to register a Testcontainer to start and stop between each test using the new testcontainers extension module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perTest())\n```\n\n----------------------------------------\n\nTITLE: Option Matchers Usage in Kotlin\nDESCRIPTION: Matchers for testing Option types in Arrow. These matchers allow asserting if an Option is Some or None, and verify specific values in Some cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\noption.shouldBeSome()  // assert option is Some\noption.shouldBeSome(v) // assert option is Some(v)\noption.shouldBeNone()  // assert option is None\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency with Gradle\nDESCRIPTION: Gradle dependency configuration for including the Kotest Testcontainers extension in your project. This allows integration between Kotest and Testcontainers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/test_containers_46x.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener in PER_SPEC Mode\nDESCRIPTION: Example of using WireMockListener in PER_SPEC mode, where the WireMockServer is started once before all tests in the spec and stopped after completing all tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/wiremock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_SPEC))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n    //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Using Bang Prefix in Kotest StringSpec\nDESCRIPTION: This example demonstrates how to use the '!' prefix to skip specific tests in a StringSpec. When a test is prefixed with '!', that test will be skipped while all other tests will be executed normally.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/focus.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Exhaustive Generator in Kotest Property Test\nDESCRIPTION: Shows how to use a custom exhaustive generator in a Kotest property test to verify prime number properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/customgens.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n    \"testing single digit primes\" {\n        checkAll(singleDigitPrimes) { prime ->\n           isPrime(prime) shouldBe true\n           isPrime(prime * prime) shouldBe false\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Future Properties in Kotlin with Kotest\nDESCRIPTION: Extension functions for Future objects that verify their state (cancelled, completed) and expected completion outcomes, including exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfuture.shouldBeCancelled()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfuture.shouldBeCompleted()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfuture.shouldBeCompletedExceptionally()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfuture.shouldCompleteExceptionallyWith(throwable)\n```\n\n----------------------------------------\n\nTITLE: Using haveValue Map Matcher in Kotest\nDESCRIPTION: Example of the haveValue matcher for maps, which verifies that a map contains a specific value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveValue(\"a\")\n```\n\n----------------------------------------\n\nTITLE: Asserting Throwable/Exception Properties in Kotlin with Kotest\nDESCRIPTION: Extension functions for Throwable objects that verify exception properties such as messages, causes, and cause types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveMessage(message)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveCause()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveCause { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveCauseInstanceOf<T>()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveCauseOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Property Testing in Project Config\nDESCRIPTION: This code snippet shows how to use Kotest's project configuration to set the default iteration count for property tests before any tests are run. It utilizes the AbstractProjectConfig class to override the beforeProject method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/globalconfig.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestConfig : AbstractProjectConfig() {\n   override suspend fun beforeProject() {\n      PropertyTesting.defaultIterationCount = 123\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SystemEnvironmentTestListener in Kotest Spec\nDESCRIPTION: Demonstrates how to use the SystemEnvironmentTestListener to apply environment variable changes at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemEnvironmentTestListener(\"foo\", \"bar\"))\n\n    init {\n      \"MyTest\" {\n        System.getenv(\"foo\") shouldBe \"bar\"\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IndexedSeq Interface in Kotlin\nDESCRIPTION: This snippet defines an interface called IndexedSeq with methods for size, adding elements, and checking containment.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_factories.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface IndexedSeq<T> {\n\n    // returns the size of t\n    fun size(): Int\n\n    // returns a new seq with t added\n    fun add(t: T): IndexedSeq<T>\n\n    // returns true if this seq contains t\n    fun contains(t: T): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener in PER_TEST Mode\nDESCRIPTION: Example of using WireMockListener in PER_TEST mode, where the WireMockServer is started before each test and stopped after each test completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/wiremock.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_TEST))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n  //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Kotlin)\nDESCRIPTION: Enables JUnit Platform for Gradle using Kotlin DSL by configuring test tasks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/setup.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Test Output Format Example\nDESCRIPTION: Shows the resulting test output format when displayFullTestPath is enabled in project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/output.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMyTests. describe 1 - test 1\nMyTests. describe 1 - test 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Invocation-level Timeout in Kotest\nDESCRIPTION: Example of setting both a global timeout and an invocation-level timeout for a test case with multiple invocations, a new feature in Kotest 4.1.0.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds,\n                         invocationTimeout = 250.milliseconds,\n                         invocations = 10) { }\n```\n\n----------------------------------------\n\nTITLE: Using Focus Prefix with Nested Tests in Kotest FunSpec\nDESCRIPTION: This example shows how the 'f:' focus prefix works with nested tests. When a parent test has the focus prefix, both the parent and all its nested tests will be executed, while other parent tests and their nested tests are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/focus.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : FunSpec({\n   context(\"test 1\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n   }\n\n   context(\"f:test 2\") {\n      // this will be executed\n      test(\"foo\") {\n         // this will be executed\n      }\n   }\n\n   context(\"test 3\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Random Email Addresses with Kotest Arb\nDESCRIPTION: Creates random email addresses using provided generators for local and domain parts. Default generators are available if not specified.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_21\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.email(localPartGen, domainGen)\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging Project-wide in Kotest\nDESCRIPTION: This snippet demonstrates how to enable coroutine debugging for all tests in a project by overriding the 'coroutineDebugProbes' property in the ProjectConfig class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val coroutineDebugProbes = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Native with Kotest\nDESCRIPTION: Kotlin multiplatform configuration for Native targets with Kotest engine dependency\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/setup.mdx#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    linuxX64() // can add any supported native targets such as linux, mac, windows etc\n  }\n}\nsourceSets {\n  val commonTest by getting {\n    dependencies {\n      implementation(\"io.kotest:kotest-framework-engine:$version\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Instant Properties in Kotlin using Kotest\nDESCRIPTION: This snippet demonstrates assertion methods for Instant objects in Kotlin using Kotest matchers. It includes comparisons between instants and checks for temporal ordering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\ninstant.shouldBeBefore(anotherInstant)\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Tag Expressions in Kotlin\nDESCRIPTION: Shows how to set tag expressions programmatically at runtime.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/tags.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nRuntimeTagExpressionExtension.expression = \"Linux & !Database\"\n```\n\n----------------------------------------\n\nTITLE: Generating Double Values in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces Double values within a specified range, including various edge cases if within range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.double(min, max)\n```\n\n----------------------------------------\n\nTITLE: Reusable Function Lifecycle Hooks in Kotest\nDESCRIPTION: Shows how to create reusable lifecycle hook functions that can be shared across multiple test specs. Demonstrates the use of type aliases for callback functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/lifecycle_hooks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval startTest: BeforeTest = {\n   println(\"Starting a test $it\")\n}\n\nclass TestSpec : WordSpec({\n\n   // used once\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"be alive\" {\n         println(\"Johnny5 is alive!\")\n      }\n   }\n})\n\nclass OtherSpec : WordSpec({\n\n   // used twice\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"fail\" {\n         fail(\"boom\")\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Discovery Extension Functions\nDESCRIPTION: The DiscoveryExtension interface provides two key functions: afterScan for filtering discovered spec classes and instantiate for controlling class instantiation. The afterScan function processes discovered classes and returns filtered results, while instantiate handles class instantiation with custom logic for constructors with parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/discovery_extension.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface DiscoveryExtension {\n   fun afterScan(classes: List<KClass<Spec>>): List<KClass<Spec>>\n   fun instantiate(kclass: KClass<Spec>): Spec?\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Isolation Mode via Project Config in Kotest\nDESCRIPTION: Shows how to set a global isolation mode for all tests by configuring it in the project-wide configuration class. This setting applies to all specs unless overridden at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/isolation_mode.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig: AbstractProjectConfig() {\n   override val isolationMode = IsolationMode.InstancePerLeaf\n}\n```\n\n----------------------------------------\n\nTITLE: Until with Fibonacci Interval in Kotlin Tests\nDESCRIPTION: Demonstrates using the until function with a fibonacci-based interval that increases the delay between checks progressively, starting at 100 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/until.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 100.milliseconds.fibonacci()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jacoco in Gradle (Kotlin)\nDESCRIPTION: This code block configures Jacoco settings in the Gradle build file. It sets the tool version and optionally specifies a custom report directory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/integrations/jacoco.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\njacoco {\n    toolVersion = \"0.8.7\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pythagorean Triple Verification Function in Kotlin\nDESCRIPTION: A simple function that verifies if three integers form a Pythagorean triple by checking if a² + b² = c².\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Date Component Validation Matchers in Kotlin with Klock\nDESCRIPTION: Assertion methods for validating specific components of a date including year, month, day, hour, minute, and second.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/klock.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDay(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\n```\n\n----------------------------------------\n\nTITLE: Using haveLength String Matcher in KotlinTest\nDESCRIPTION: Example of using the haveLength matcher to verify string length in KotlinTest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_44\n\nLANGUAGE: kotlin\nCODE:\n```\nsomeString should haveLength(10)\n```\n\n----------------------------------------\n\nTITLE: Implementing ConstantNowTestListener in Kotlin Tests\nDESCRIPTION: Shows how to implement the ConstantNowTestListener for maintaining a constant time value across all tests in a test suite. This approach is useful for broader test scenarios requiring consistent time values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/instant.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n  override fun listeners() = listOf(\n    ConstantNowTestListener(foreverNow)\n  )\n```\n\n----------------------------------------\n\nTITLE: Complete Database Integration Test Example\nDESCRIPTION: Full example showing database container setup and usage in a test case\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass QueryDatastoreTest : FunSpec({\n\n  val mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n    startupAttempts = 1\n    withUrlParam(\"connectionTimeZone\", \"Z\")\n    withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n  }\n\n  val ds = install(JdbcTestContainerExtension(mysql)) {\n    poolName = \"myconnectionpool\"\n    maximumPoolSize = 8\n    idleTimeout = 10000\n  }\n\n  val datastore = PersonDatastore(ds)\n\n  test(\"insert happy path\") {\n\n    datastore.insert(Person(\"sam\", \"Chicago\"))\n    datastore.insert(Person(\"jim\", \"Seattle\"))\n\n    datastore.findAll().shouldBe(listOf(\n      Person(\"sam\", \"Chicago\"),\n      Person(\"jim\", \"Seattle\"),\n    ))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit Platform with Groovy\nDESCRIPTION: Configures Gradle to use JUnit Platform for running Kotest tests when using Groovy build scripts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Tag Extension Implementation\nDESCRIPTION: Example of implementing a custom TagExtension to dynamically control test execution based on environment conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Hadoop : Tag()\n\nobject HadoopTagExtension : TagExtension {\n  override fun tags(): Tags =\n      if (System.getenv().containsKey(\"HADOOP_HOME\")) Tags.include(Hadoop) else Tags.exclude(Hadoop)\n}\n\nobject MyProjectConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(HadoopTagExtension)\n}\n\nobject SimpleTest : StringSpec({\n  \"simple test\" {\n    // this test would only run on environments that have hadoop configured\n  }.config(tags = setOf(Hadoop))\n})\n```\n\n----------------------------------------\n\nTITLE: Using Matchers as Infix Functions\nDESCRIPTION: Demonstrates the traditional infix style of using matchers in Kotest, which is still supported but no longer the preferred approach.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfile should exist()\n\nor\n\nlistOf(1, 2) should containNull()\n```\n\n----------------------------------------\n\nTITLE: Implementing Exhaustive Property Testing in Kotest\nDESCRIPTION: Example demonstrating the use of exhaustive generators in property testing\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.2.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = checkAll(\n    Exhaustive.ints(0..5),\n    Exhaustive.ints(0..5),\n    Exhaustive.ints(0..5)\n) { ... }\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Generator Bind\nDESCRIPTION: Example of using the bind function to generate random class instances from primitive generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val email: String, val id: Int)\n\nval userGen = Gen.bind(Gen.string(), Gen.positiveIntegers(), ::User)\n\nassertAll(userGen) {\n  it.email shouldNotBe null\n  it.id should beGreaterThan(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Container Environment Variables\nDESCRIPTION: Example of configuring Kafka container environment variables to enable dynamic topic creation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n  withEnv(\"KAFKA_AUTO_CREATE_TOPICS_ENABLE\", \"true\")\n}\n```\n\n----------------------------------------\n\nTITLE: Date Assertions in Kotlin with Kotest\nDESCRIPTION: Extension methods for asserting properties of dates, including comparison with other dates and verification of date components.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameMonthAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameDayAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeBefore(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeAfter(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeWithin(period, otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeWithin(duration, otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeBetween(firstDate, secondDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveYear(year)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveMonth(month)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfYear(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfMonth(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfWeek(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveHour(hour)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveMinute(Minute)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSecond(second)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveNano(nao)\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Class for Pythagorean Triple Testing in Kotlin\nDESCRIPTION: Defines a data class to hold test input rows for Pythagorean triple testing, with three integer fields representing the sides of a triangle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.3.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Using Matchers with Infix Notation\nDESCRIPTION: Shows examples of using KotlinTest matchers with the traditional infix notation style, which remains supported though the extension function style is preferred.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfile should exist()\n\nor\n\nlistOf(1, 2) should containNull()\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Package with Gradle Command Line\nDESCRIPTION: A command to run Gradle tests filtered by package name using the standard Gradle --tests flag. This approach can only filter at the class level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/gradle.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngradle test --tests 'com.sksamuel.somepackage*'\n```\n\n----------------------------------------\n\nTITLE: Accessing System Properties in Kotlin Tests\nDESCRIPTION: Demonstrates how to access system properties in a Kotest test that were defined in the kotest.properties file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/intellij/props.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FooTest : DescribeSpec() {\n  init {\n    describe(\"after adding kotest.properties\") {\n      it(\"foo should be set\") {\n         System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Container with Single Script in Kotlin\nDESCRIPTION: Configures a MySQL container with an initialization script using the withInitScript method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n         withInitScript(\"init.sql\")\n         startupAttempts = 1\n         withUrlParam(\"connectionTimeZone\", \"Z\")\n         withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating EmbeddedKafkaListener with Custom Kafka and Zookeeper Ports (Kotlin)\nDESCRIPTION: Shows how to create an EmbeddedKafkaListener instance with custom ports for both Kafka and Zookeeper.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/kafka.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = EmbeddedKafkaListener(kafkaPort = 6005, zookeeperPort = 9005)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Timeouts in Kotest\nDESCRIPTION: Example showing how to configure a global timeout for a test case in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds) { }\n```\n\n----------------------------------------\n\nTITLE: Creating Single Digit Primes Exhaustive Generator in Kotlin\nDESCRIPTION: Demonstrates creating an exhaustive generator from a list of prime numbers using the exhaustive() extension function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/customgens.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval singleDigitPrimes = listOf(2,3,5,7).exhaustive()\n```\n\n----------------------------------------\n\nTITLE: Database Initialization with Single Script\nDESCRIPTION: Example of initializing database container with a single SQL script\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n         withInitScript(\"init.sql\")\n         startupAttempts = 1\n         withUrlParam(\"connectionTimeZone\", \"Z\")\n         withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n      }\n```\n\n----------------------------------------\n\nTITLE: Comparable Matchers in Kotlin with Kotest\nDESCRIPTION: Matchers for comparing objects that implement the Comparable interface in Kotest. These assertions use compareTo to establish ordering relationships between objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeLessThan(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeLessThanOrEqualTo(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeEqualComparingTo(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeEqualComparingTo(other, comparator)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeGreaterThan(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeGreaterThanOrEqualTo(other)\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Gradle Plugin to Build Script\nDESCRIPTION: This Kotlin snippet shows how to add the Allure Gradle plugin to a Kotlin-based Gradle build script. It includes the plugin declaration in the plugins block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/allure.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  ...\n  id(\"io.qameta.allure\") version \"2.8.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining data structures for composed matcher examples in Kotlin\nDESCRIPTION: Sample data structures representing a Person with name, age, and address properties, and an Address with city, street, and building number properties. These are used to demonstrate composed matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/data_class_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(\n  val name: String,\n  val age: Int,\n  val address: Address,\n)\n\ndata class Address(\n  val city: String,\n  val street: String,\n  val buildingNumber: String,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform in Gradle\nDESCRIPTION: Demonstrates how to set up the JUnit Platform in Gradle's test block for Kotest 3.1.x, enabling simplified test setup without needing the JUnit Gradle plugin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting LocalDate Properties in Kotlin\nDESCRIPTION: Various assertion methods for LocalDate objects, including comparing years, months, days, and checking if a date is before, after, or within a certain range of another date.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\ndate.shouldHaveSameMonthAs(otherDate)\ndate.shouldHaveSameDayAs(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeWithin(period, otherDate)\ndate.shouldBeWithin(duration, otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDayOfYear(day)\ndate.shouldHaveDayOfMonth(day)\ndate.shouldHaveDayOfWeek(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\ndate.shouldHaveNano(nano)\n```\n\n----------------------------------------\n\nTITLE: Modifying Test Task for Jacoco in Gradle (Kotlin)\nDESCRIPTION: This code modifies the test task to finalize with the Jacoco report task, ensuring that coverage reports are generated after tests run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/integrations/jacoco.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  ...\n  finalizedBy(tasks.jacocoTestReport)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Comparison Function Definition\nDESCRIPTION: Example of creating a custom comparison function with predefined options for JSON comparison.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/json.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval myOptions = compareJsonOptions {\n   typeCoercion = TypeCoercion.Enabled\n   arrayOrder = ArrayOrder.Lenient\n}\n\ninfix fun String.lenientShouldEqualJson(other: String) = this.shouldEqualJson(other, myOptions)\n\n\"[1, 2]\" lenientShouldEqualJson \"[2, 1]\" // This will pass\n```\n\n----------------------------------------\n\nTITLE: Custom Port Configuration for Embedded Kafka\nDESCRIPTION: Shows how to initialize the embedded Kafka listener with a custom port and use it in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/kafka.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaCustomPortTest : FunSpec({\n\n   val listener = EmbeddedKafkaListener(5678)\n   listener(listener)\n\n   test(\"send / receive\") {\n\n      val producer = listener.stringStringProducer()\n      producer.send(ProducerRecord(\"foo\", \"a\"))\n      producer.close()\n\n      val consumer = listener.stringStringConsumer(\"foo\")\n      eventually(10.seconds) {\n         consumer.poll(1000).first().value() shouldBe \"a\"\n      }\n      consumer.close()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: NonEmptyList Inspectors with Arrow Extension in KotlinTest\nDESCRIPTION: Demonstrates how to use specialized inspectors for Arrow's NonEmptyList type to verify assertions on collection elements.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nval list = NonEmptyList(2, 4, 6, 7,8)\nlist.forOne {\n  it.shouldBeOdd()\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Full Test Paths in Kotest Output\nDESCRIPTION: This snippet shows the expected output format when 'displayFullTestPath' is enabled in Kotest's project configuration. It demonstrates how nested test names are concatenated for clearer identification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/output.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMyTests. describe 1 - test 1\nMyTests. describe 1 - test 2\n```\n\n----------------------------------------\n\nTITLE: Using Spring Autowired Constructor in Kotlin Tests\nDESCRIPTION: Demonstrates the use of SpringAutowireConstructorExtension for constructor injection in KotlinTest with Spring. The test class uses an injected UserService in its constructor and tests its behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec({\n  \"SpringListener\" should {\n    \"have autowired the service\" {\n      service.repository.findUser().name shouldBe \"system_user\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Focus Prefix in Kotest StringSpec\nDESCRIPTION: This example demonstrates how to use the 'f:' prefix with a top-level test in a StringSpec to focus execution on just that test, while skipping all others. Only the test prefixed with 'f:' will be executed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/focus.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale and Timezone at Test Level\nDESCRIPTION: Shows how to set default Locale and Timezone for an entire test class using listeners.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(\n    LocaleTestListener(Locale.FRANCE),\n    TimeZoneTestListener(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\")))\n)\n```\n\n----------------------------------------\n\nTITLE: Using Locale and Timezone Overrides in Tests\nDESCRIPTION: Demonstrates how to temporarily override the default Locale and Timezone within test scopes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nwithDefaultLocale(Locale.FRANCE) {\n    println(\"My locale is now France! Très bien!\")\n}\n\nwithDefaultTimeZone(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\"))) {\n    println(\"My timezone is now America/Sao_Paulo! Muito bem!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Choosing Random Generators in Kotest\nDESCRIPTION: Randomly selects one of the given arbitrary generators to produce the next value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.choice(arbs)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner for Android\nDESCRIPTION: Adds the Kotest JUnit5 runner dependency to an Android project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n   testImplementation 'io.kotest:kotest-runner-junit5:version'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Tag Expressions in Kotest\nDESCRIPTION: Setting tag expressions programmatically at runtime using the RuntimeTagExtension instead of system properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/tags.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nRuntimeTagExpressionExtension.expression = \"Linux & !Database\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Factory Usage Example\nDESCRIPTION: Demonstration of including multiple test factories alongside regular tests in a single test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_factories.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HugeTestFile : FunSpec({\n\n   test(\"first test\") {\n     // test here\n   }\n\n   include(factory1(\"foo\"))\n   include(factory2(1, 4))\n\n   test(\"another test\") {\n     //  testhere\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Coroutines in Nested Test Scopes\nDESCRIPTION: Example demonstrating how parent scopes and nested test cases can now launch coroutines directly, as all scopes are coroutine scopes in Kotest 4.1.0.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndescribe(\"some test\") {\n launch {\n    delay(100)\n    it(\"should do something\") {\n       launch {\n          delay(100)\n       }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveValue Matcher for Maps in Kotlin with KotlinTest\nDESCRIPTION: Illustrates how to use the haveValue matcher in KotlinTest to check if a map contains a specific value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveValue(\"a\")\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Data Classes in Kotlin\nDESCRIPTION: Defines two data classes Person and Address with their respective properties to be used for matcher examples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/data_class_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(\n  val name: String,\n  val age: Int,\n  val address: Address,\n)\n\ndata class Address(\n  val city: String,\n  val street: String,\n  val buildingNumber: String,\n)\n```\n\n----------------------------------------\n\nTITLE: Exhaustively Generating A-Z Strings in Kotlin using Kotest\nDESCRIPTION: Returns all A-Z strings within the given range. For example, if the range is 1..2, it would include 'a', 'b', 'c', ..., 'yz', 'zz'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.azstring(range)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core Dependency in Maven\nDESCRIPTION: Adds the core assertions library to a Maven project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-assertions-core-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency in Maven\nDESCRIPTION: This XML snippet demonstrates how to add the Kotest JUnit5 runner dependency to a Maven project. It's necessary for running Kotest tests on the JVM with Maven.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/setup.mdx#2025-04-13_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-runner-junit5</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Executing Tests with File-Based Table Data\nDESCRIPTION: Shows how to run assertions using table data loaded from a file, maintaining the same testing pattern as in-memory tables.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/table_driven_testing.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"table-driven testing from the .table file\") {\n    // asserts like before\n    tableFromFile.forAll { id, name, username ->\n        id shouldBeGreaterThan 0\n        username shouldNotBe \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Not-Null Assertion Error Output\nDESCRIPTION: Example of the output when a not-null assertion fails, showing how it can be unclear without additional context.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n<null> should not equal <null>\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Elements at Specific Positions\nDESCRIPTION: Demonstrates the haveElementAt matcher which verifies that a collection contains a specific element at a given index position.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nlistOf(\"a\", \"b\", \"c\") should haveElementAt(1, \"b\")\nlistOf(\"a\", \"b\", \"c\") shouldNot haveElementAt(1, \"c\")\n```\n\n----------------------------------------\n\nTITLE: Assertion Mode Error Output Example (Plain Text)\nDESCRIPTION: Example showing the error output when a test runs without assertions while AssertionMode.Error is configured. This demonstrates the feedback provided when assertion checking is enabled.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/assertion_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTest 'this test has no assertions' did not invoke any assertions\n```\n\n----------------------------------------\n\nTITLE: Mapping Kotest Arbitrary Values\nDESCRIPTION: Demonstrates transforming values from one type to another using map operation on arbitraries.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genops.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval integerStrings: Arb<String> = Arb.int().map { it.toString() }\n```\n\n----------------------------------------\n\nTITLE: Basic Logging in Kotest Tests\nDESCRIPTION: Shows how to use logging functions within a Kotest test case using the warn logging level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/logging.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something\") {\n  warn { \"something weird happened\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Function for Person Matcher\nDESCRIPTION: Creates an extension function for Person class to provide a more readable syntax for matcher usage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/data_class_matchers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Person.shouldBePerson(name: String, age: Int) = this shouldBe personMatcher(name, age)\n```\n\n----------------------------------------\n\nTITLE: Initializing SpringTestExtension in Kotlin\nDESCRIPTION: Adds a SpringTestExtension which exposes the test context via a coroutine context element. This allows accessing Spring test context within Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nAdd SpringTestExtension which exposes test context via coroutine context element\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest for Native Targets in Multiplatform Project\nDESCRIPTION: Sets up Kotest dependencies for native targets in a Kotlin multiplatform project, with a Linux x64 target as an example.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    linuxX64() // can add any supported native targets such as linux, mac, windows etc\n  }\n}\nsourceSets {\n  val commonTest by getting {\n    dependencies {\n      implementation(\"io.kotest:kotest-framework-engine:$version\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-line Test Names in Kotest\nDESCRIPTION: Demonstrates how to define test names over multiple lines in Kotest, which can be stripped of whitespace for cleaner output.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.3.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n  init {\n   \"\"\"this is a\n      test spanning multiple lines\"\"\" { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying EnabledIf Annotation to Control Spec Execution\nDESCRIPTION: Shows how to use the EnabledIf annotation with a custom condition class to conditionally execute a spec. The spec will only run when the attached condition returns true.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.3.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(EnabledIfMidnight::class)\nclass EnabledIfTest : FunSpec() {\n   init {\n      test(\"tis midnight when the witches roam free\") {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Output Display\nDESCRIPTION: Shows the formatted output of running the IntegerMathSpec tests, displaying the test hierarchy and results.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nIntegerMathSpec\n  ✓ Addition\n    ✓ 1 + 0\n    ✓ 1 + 1\n  ✓ Complex Math\n    ✓ 8/2(2+2)\n    ✓ 5/5 + 1*1 + 3-2\n```\n\n----------------------------------------\n\nTITLE: Basic Koin Integration with FunSpec\nDESCRIPTION: Example showing basic integration of Koin with Kotest using FunSpec. Demonstrates how to use KoinExtension and inject dependencies in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/koin.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : FunSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(myKoinModule))\n\n    val userService by inject<UserService>()\n\n    init {\n        test(\"use userService\") {\n            userService.getUser().username shouldBe \"LeoColman\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pythagorean Triple Checker in Kotlin\nDESCRIPTION: Defines a function to check if three integers form a valid Pythagorean triple.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.3.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Container with Embedded Zookeeper\nDESCRIPTION: Example of creating a Kafka container with embedded Zookeeper using the ContainerExtension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n  withEmbeddedZookeeper()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Focus Prefix in Kotest StringSpec\nDESCRIPTION: This example demonstrates how to use the 'f:' prefix to focus execution on a single test in a StringSpec. When a test is prefixed with 'f:', only that test will be executed while all other tests will be skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/focus.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Coroutine Scopes in Nested Tests\nDESCRIPTION: Example demonstrating how all scopes, including parent scopes, are now coroutine scopes in Kotest 4.1, enabling coroutine usage at any nesting level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndescribe(\"some test\") {\n launch {\n    delay(100)\n    it(\"should do something\") {\n       launch {\n          delay(100)\n       }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Tests with xit in Kotest DescribeSpec\nDESCRIPTION: This example shows how to selectively disable individual tests within an enabled test block by using the 'xit' prefix. The test with 'xit' will be skipped while other tests in the same block continue to run normally.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/xmethods.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  describe(\"this block is enabled\") {\n    xit(\"will not run\") {\n      // disabled test\n    }\n    it(\"will run\") {\n       // enabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast at Spec Level in Kotest\nDESCRIPTION: This example shows how to enable fail fast for all scopes in a Kotest Spec by setting failfast at the spec level. This causes all tests after a failure to be skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/fail_fast.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n\n      failfast = true\n\n      context(\"context with fail fast enabled at the spec level\") {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Discard Rate Example\nDESCRIPTION: Example that would fail due to exceeding default maximum discard rate\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/assumptions.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<Int, Int> { a, b ->\n  withAssumptions(a % 2 == 0) {\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ZonedDateTime Assertions in Kotest\nDESCRIPTION: Assertions specific to ZonedDateTime including today checks and instant comparisons\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nzonedDateTime.shouldBeToday()\nzonedDateTime.shouldHaveSameInstantAs(other: ZonedDateTime)\n```\n\n----------------------------------------\n\nTITLE: Chaining Kotest Assertions\nDESCRIPTION: Demonstrates the new ability to chain multiple assertions in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.3.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval employees: List<Employee> = ...\nemployees.shouldBeSorted()\n          shouldHaveSize(4)\n          shouldContain(Employee(\"Sam\", \"Chicago\"))\n```\n\n----------------------------------------\n\nTITLE: Either Generator Dependencies\nDESCRIPTION: Required dependencies for using Arrow generators in Kotest property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-property-arrow:version\nio.arrow-kt:arrow-core:arrow-version\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding Testcontainers support to Kotest project. Specifies the dependency with test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers_46x.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Strongly Typed Container for Elasticsearch in Kotlin\nDESCRIPTION: Installs a container extension using a strongly typed Elasticsearch container with custom configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval elasticsearch = install(ContainerExtension(ElasticsearchContainer(ELASTICSEARCH_IMAGE) )) {\n  withPassword(ELASTICSEARCH_PASSWORD)\n}\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener with PER_SPEC Mode in Kotest\nDESCRIPTION: Demonstrates how to use WireMockListener in PER_SPEC mode, which starts a WireMockServer before running all tests in the spec and stops it after completing all tests. It includes setting up a stub and making a test request.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/wiremock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_SPEC))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n    //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Table-Driven Testing with forAll in KotlinTest\nDESCRIPTION: This example shows how to use table-driven testing in KotlinTest using the forAll function with multiple row objects to test square roots.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forall(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Timestamp Properties in Kotlin with Kotest\nDESCRIPTION: Functions for comparing temporal ordering between Timestamp objects, including before/after relationships and range checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\ntimestamp.shouldBeAfter(anotherTimestamp)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntimestamp.shouldBeBefore(anotherTimestamp)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntimestamp.shouldBeBetween(fromTimestamp, toTimestamp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pythagorean Triple Checker in Kotlin\nDESCRIPTION: Defines a function to check if three integers form a valid Pythagorean triple.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.3.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Bang Example with StringSpec in Kotest\nDESCRIPTION: Demonstrates using the ! prefix to skip specific tests while allowing others to run. Tests marked with ! will be ignored during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/focus.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency in Maven\nDESCRIPTION: Adds the required dependency for the Kotest JUnit5 runner to a Maven project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/setup.mdx#2025-04-13_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-runner-junit5-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Spring Constructor Injection in Kotest Tests\nDESCRIPTION: Example showing how to use constructor injection in a Kotest test class with Spring autowiring for dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/spring.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"have autowired the service\" {\n        service.repository.findUser().name shouldBe \"system_user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions in KotlinTest\nDESCRIPTION: Demonstrates how to test for exceptions using shouldThrow and shouldThrowExactly functions. Includes checking exception messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should start with \"Something went wrong\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Kafka and Zookeeper Ports in Kotlin\nDESCRIPTION: Shows how to specify both Kafka and Zookeeper ports when creating an embedded Kafka listener instance. This provides complete control over the port configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/kafka.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = EmbeddedKafkaListener(kafkaPort = 6005, zookeeperPort = 9005)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Groovy)\nDESCRIPTION: Configuration to enable JUnit Platform test execution in Gradle using Groovy syntax\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/setup.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Time Comparison Matchers in Klock\nDESCRIPTION: Time-specific matchers for comparing hours, minutes, seconds, and milliseconds between time objects, as well as temporal relationships between times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/klock.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(time)\ntime.shouldHaveHours(hours)\ntime.shouldHaveSameMinutesAs(time)\ntime.shouldHaveMinutes(minutes)\ntime.shouldHaveSameSeconds(time)\ntime.shouldHaveSeconds(seconds)\ntime.shouldHaveSameMillisecondsAs(time)\ntime.shouldHaveMilliseconds(millis)\ntime.shouldBeBefore(time)\ntime.shouldBeAfter(time)\ntime.shouldBeBetween(time, time)\n```\n\n----------------------------------------\n\nTITLE: Tagging All Tests in a Spec\nDESCRIPTION: Demonstrates how to apply tags to all tests within a spec class\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/tags.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n\n  tags(Linux, Mysql)\n\n  test(\"my test\") { } // automatically marked with the above tags\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Spec-Level Fail Fast in Kotest\nDESCRIPTION: Shows how to enable fail-fast behavior at the spec level, affecting all test contexts within the specification. When a test fails, all remaining tests in the spec will be skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/fail_fast.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n\n      failfast = true\n\n      context(\"context with fail fast enabled at the spec level\") {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest Counter Example in Kotest\nDESCRIPTION: Shows how InstancePerTest mode resets variables for each test case using an atomic counter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/isolation_mode.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kotest Engine Properties in Kotlin\nDESCRIPTION: This code defines an object called KotestEngineProperties that contains constant values for various configuration properties used in the Kotest testing framework. These properties control different aspects of test execution, filtering, and framework behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/config_props.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotest.core.internal\n\nobject KotestEngineProperties {\n\n   const val scriptsEnabled = \"kotest.framework.scripts.enabled\"\n\n   const val dumpConfig = \"kotest.framework.dump.config\"\n\n   /**\n    * Sets the tag expression that determines included/excluded tags.\n    */\n   const val tagExpression = \"kotest.tags\"\n\n   const val excludeTags = \"kotest.tags.exclude\"\n\n   const val includeTags = \"kotest.tags.include\"\n\n   /**\n    * A regex expression that is used to match the test [io.kotest.core.descriptors.Descriptor]'s path\n    * to determine if a test should be included in the test plan or not.\n    */\n   const val filterTests = \"kotest.filter.tests\"\n\n   /**\n    * A regex expression that is used to match the [io.kotest.mpp.bestName] of a class\n    * to determine if a spec should be included in the test plan or not.\n    */\n   const val filterSpecs = \"kotest.filter.specs\"\n\n   const val propertiesFilename = \"kotest.properties.filename\"\n\n   /**\n    * If set to true, then source ref's will not be created for test cases.\n    * This may speed up builds (as the engine will not need to create stack traces to\n    * generate line numbers) but will also reduce functionality in the intellij plugin\n    * (by limiting the ability to drill directly into the test inside a file).\n    */\n   const val disableSourceRef = \"kotest.framework.sourceref.disable\"\n\n   /**\n    * If set to true, disables the use of '!' as a prefix to disable tests.\n    */\n   const val disableBangPrefix = \"kotest.bang.disable\"\n\n   /**\n    * The default [io.kotest.core.spec.IsolationMode] for specs.\n    */\n   const val isolationMode = \"kotest.framework.isolation.mode\"\n\n   /**\n    * The default [io.kotest.core.test.AssertionMode] for tests.\n    */\n   const val assertionMode = \"kotest.framework.assertion.mode\"\n\n   /**\n    * The default parallelism for specs.\n    */\n   const val parallelism = \"kotest.framework.parallelism\"\n\n   /**\n    * The default timeout for test cases.\n    */\n   const val timeout = \"kotest.framework.timeout\"\n\n   /**\n    * The default timeout for the entire test suite.\n    */\n   const val projectTimeout = \"kotest.framework.projecttimeout\"\n\n   const val logLevel = \"kotest.framework.loglevel\"\n\n   /**\n    * The default timeout for each invocation of a test case.\n    */\n   const val invocationTimeout = \"kotest.framework.invocation.timeout\"\n\n   /**\n    * Use classpath scanning for test discovery if no selectors are present (defaults to \"false\").\n    * - Do not enable this when using Gradle with `maxParallelForks > 1`. Gradle might inadvertently invoke one\n    *   Kotest instance with an empty class list, resulting in duplicate test runs (#3973).\n    */\n   const val discoveryClasspathFallbackEnabled = \"kotest.framework.discovery.classpath.fallback.enabled\"\n\n   const val disableTestNestedJarScanning = \"kotest.framework.disable.test.nested.jar.scanning\"\n\n   const val concurrentSpecs = \"kotest.framework.spec.concurrent\"\n\n   const val concurrentTests = \"kotest.framework.test.concurrent\"\n\n   /**\n    * Disable scanning the classpath for configuration classes by setting this property to true\n    */\n   const val disableConfigurationClassPathScanning = \"kotest.framework.classpath.scanning.config.disable\"\n\n   /**\n    * Specify a fully qualified name to use for project config.\n    * This class will be instantiated via reflection.\n    */\n   const val configurationClassName = \"kotest.framework.config.fqn\"\n\n   /**\n    * Disable scanning the classpath for listeners with @AutoScan by setting this property to true\n    */\n   const val disableAutoScanClassPathScanning = \"kotest.framework.classpath.scanning.autoscan.disable\"\n\n   const val allowMultilineTestName = \"kotest.framework.testname.multiline\"\n\n   /**\n    *  If set -> filter testCases by this severity level and higher, else running all\n    */\n   const val testSeverity = \"kotest.framework.test.severity\"\n\n   /**\n    * Enable assert softly globally.\n    * */\n   const val globalAssertSoftly = \"kotest.framework.assertion.globalassertsoftly\"\n\n   /**\n    * Appends all tags associated with a test case to its display name.\n    * */\n   const val testNameAppendTags = \"kotest.framework.testname.append.tags\"\n\n   /**\n    * Controls whether classes will inherit tags from their supertypes. Default false\n    */\n   const val tagInheritance = \"kotest.framework.tag.inheritance\"\n\n   /**\n    * Controls the [io.kotest.core.names.DuplicateTestNameMode] mode.\n    */\n   const val duplicateTestNameMode = \"kotest.framework.testname.duplicate.mode\"\n\n   const val disableJarDiscovery = \"kotest.framework.discovery.jar.scan.disable\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using AssertSoftly with Receiver in Kotest\nDESCRIPTION: Example of using the new receiver-based assertSoftly function which provides a more concise and readable way to perform multiple assertions on the same object.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nperson.assertSoftly {\n  name shouldBe \"sam\"\n  age shouldBe 99\n  city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Email Local Parts with Kotest Arb\nDESCRIPTION: Produces random local parts of email addresses, which can be used in combination with domain generators to create full email addresses.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.emailLocalPart()\n```\n\n----------------------------------------\n\nTITLE: Kotest Eventually Block\nDESCRIPTION: Example showing the usage of an eventually block in test assertions\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  eventually {\n    // test code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Weighted Values in Kotlin using Kotest\nDESCRIPTION: Generates values based on specified weights. For example, 'Arb.choose(1 to 'A', 2 to 'B')' will generate 'A' 33% of the time and 'B' 66% of the time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_24\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.choose(pairs)\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf Counter Example in Kotest\nDESCRIPTION: Illustrates variable state in InstancePerLeaf mode using an atomic counter. Shows how the counter is incremented within a leaf execution but reset between different leaf test executions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/isolation_mode.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using New Kotest Matchers for Various Types\nDESCRIPTION: Demonstrates usage of new matchers in Kotest for integers, collections, files, URIs, and more.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n4 should beEven()\n3 should beOdd()\n3 should beInRange(1..10)\nlistOf(\"a\", \"b\", \"c\") should haveElementAt(1, \"b\")\nfile should beRadable()\nfile should beWriteable()\nFile(\"/usr/home/sam\") should beAbsolute()\nobj1 should haveSameHashCodeAs(obj2)\n\"hello\" should haveSameLengthAs(\"world\")\nval uri = URI.create(\"https://localhost:443/index.html?q=findme#results\")\nuri should haveScheme(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Assigning Default TestConfig in FunSpec (Kotlin)\nDESCRIPTION: This snippet shows how to assign a default TestCaseConfig for all test cases in a FunSpec using the defaultTestConfig property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_case_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n\n    defaultTestConfig = TestCaseConfig(enabled = true, invocations = 3)\n\n    test(\"FunSpec should support Spec config syntax in init{} block\") {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Integer Operations in Kotlin with Kotest\nDESCRIPTION: Assertion methods for integers in Kotest, including range checks, comparisons, and parity checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nint.shouldBeBetween(x, y)\nint.shouldBeLessThan(n)\nint.shouldBeLessThanOrEqual(n)\nint.shouldBeGreaterThan(n)\nint.shouldBeGreaterThanOrEqual(n)\nint.shouldBeEven()\nint.shouldBeOdd()\nint.shouldBeInRange(range)\nint.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Testing Arrow Either Types in KotlinTest\nDESCRIPTION: Shows matchers for Arrow's Either type, allowing verification of Right and Left values from the kotlintest-assertions-arrow module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nEither.right(\"boo\") should beRight(\"boo\")\nEither.left(\"boo\") should beLeft(\"boo\")\n```\n\n----------------------------------------\n\nTITLE: Installing JDBC Database Container Extension in Kotlin\nDESCRIPTION: Installs a JDBC database container extension with custom configuration for connection pooling using HikariCP.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcDatabaseContainerExtension(mysql)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Maven Plugin\nDESCRIPTION: Sets up the Pitest Maven plugin configuration including target classes and coverage threshold settings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/pitest.md#2025-04-13_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.pitest</groupId>\n    <artifactId>pitest-maven</artifactId>\n    <version>${pitest-maven.version}</version>\n    <configuration>\n        <targetClasses>...</targetClasses>\n        <coverageThreshold>...</coverageThreshold>\n        ... other configurations as needed        \n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Defining IndexedSeq Interface in Kotlin\nDESCRIPTION: Interface definition for an IndexedSeq collection with basic operations like size, add, and contains.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_factories.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface IndexedSeq<T> {\n\n    // returns the size of t\n    fun size(): Int\n\n    // returns a new seq with t added\n    fun add(t: T): IndexedSeq<T>\n\n    // returns true if this seq contains t\n    fun contains(t: T): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Timestamp Assertions in Kotest\nDESCRIPTION: Methods for comparing Timestamp objects including before, after, and between checks\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\ntimestamp.shouldBeAfter(anotherTimestamp)\ntimestamp.shouldBeBefore(anotherTimestamp)\ntimestamp.shouldBeBetween(fromTimestamp, toTimestamp)\n```\n\n----------------------------------------\n\nTITLE: Registering Embedded Kafka Listener with Function Implementation in Kotlin\nDESCRIPTION: Shows how to register the embedded Kafka listener in a Kotest FunSpec using the function implementation approach. This will start a Kafka broker when the spec is created and stop it when the spec completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/kafka.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n  listener(embeddedKafkaListener)\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Short Values with Kotest Arbitrary\nDESCRIPTION: This snippet shows methods for generating short values, including signed and unsigned shorts, as well as short arrays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genslist.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.short(min, max)\nArb.positiveShort(min, max)\nArb.negativeShort(min, max)\nArb.shortArray(length, content)\nArb.uShort(min, max)\nArb.uShortArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Initializing Database with Single Script\nDESCRIPTION: Example of initializing a MySQL container with a single SQL script using the withInitScript method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n         withInitScript(\"init.sql\")\n         startupAttempts = 1\n         withUrlParam(\"connectionTimeZone\", \"Z\")\n         withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n      }\n```\n\n----------------------------------------\n\nTITLE: Time Matchers Usage in Kotlin with Klock\nDESCRIPTION: Example usages of time-related matchers including assertions for hours, minutes, seconds, milliseconds comparisons and temporal relationships between times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/klock.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(time)\ntime.shouldHaveHours(hours)\ntime.shouldHaveSameMinutesAs(time)\ntime.shouldHaveMinutes(minutes)\ntime.shouldHaveSameSeconds(time)\ntime.shouldHaveSeconds(seconds)\ntime.shouldHaveSameMillisecondsAs(time)\ntime.shouldHaveMilliseconds(millis)\ntime.shouldBeBefore(time)\ntime.shouldBeAfter(time)\ntime.shouldBeBetween(time, time)\n```\n\n----------------------------------------\n\nTITLE: Chunking Arbitrary Values into Lists in Kotlin\nDESCRIPTION: Creates lists populated from elements of an arbitrary generator. Each list has a size randomly chosen within the specified range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nArb<T>.chunked(range)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Container in Kotlin\nDESCRIPTION: Example of creating and configuring a MySQL container instance\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n  startupAttempts = 1\n  withUrlParam(\"connectionTimeZone\", \"Z\")\n  withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Before and @After Annotations in AnnotationSpec\nDESCRIPTION: AnnotationSpec now supports @Before and @After annotations for easier migration from JUnit. This allows for setting up and tearing down test environments in a familiar way.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyTest : AnnotationSpec() {\n  @Before\n  fun setup() {\n    // Setup code\n  }\n  \n  @Test\n  fun test() {\n    // Test code\n  }\n  \n  @After\n  fun teardown() {\n    // Teardown code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing Nested Tests in Kotest FunSpec\nDESCRIPTION: Shows how focusing a parent test with 'f:' allows execution of its nested tests in a Kotest FunSpec, while other top-level tests and their nested tests are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/focus.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : FunSpec({\n   context(\"test 1\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n   }\n\n   context(\"f:test 2\") {\n      // this will be executed\n      test(\"foo\") {\n         // this will be executed\n      }\n   }\n\n   context(\"test 3\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Security Manager Override in Tests\nDESCRIPTION: Demonstrates how to temporarily override the system security manager within a test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSecurityManager(myManager) {\n    // Usage of security manager\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AnnotationSpec in Kotlin\nDESCRIPTION: Shows how to use AnnotationSpec in KoTest, which mimics JUnit-style annotations for test lifecycle methods and test cases. It includes examples of @BeforeEach and @Test annotations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n    @BeforeEach\n    fun beforeTest() {\n        println(\"Before each test\")\n    }\n\n    @Test\n    fun test1() {\n        1 shouldBe 1\n    }\n\n    @Test\n    fun test2() {\n        3 shouldBe 3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Emails in Kotlin using Kotest\nDESCRIPTION: Generates random email addresses where the local part and domain part are generated by the given generators. Default generators are provided if not specified.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.email(localPartGen, domainGen)\n```\n\n----------------------------------------\n\nTITLE: Automatic Resource Closing in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the autoClose function to automatically close resources that implement AutoCloseable after tests complete, ensuring proper resource cleanup.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Assertable Interface Implementation in Kotlin\nDESCRIPTION: Defines the structure for implementing custom field matchers using the Assertable interface\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/field-matching.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun interface Assertable {\n   fun assert(expected: Any?, actual: Any?): CustomComparisonResult\n}\n\nsealed interface CustomComparisonResult {\n   val comparable: Boolean\n   data object NotComparable: CustomComparisonResult {\n      override val comparable = false\n   }\n   data object Equal: CustomComparisonResult {\n      override val comparable = true\n   }\n   data class Different(val assertionError: AssertionError): CustomComparisonResult {\n      override val comparable = true\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jacoco Settings\nDESCRIPTION: Configures Jacoco tool version and custom report directory location in Gradle build file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/integrations/jacoco.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\njacoco {\n    toolVersion = \"0.8.7\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Thread State Assertions in Kotlin\nDESCRIPTION: Methods for asserting various states of a Thread object including daemon status, alive status, and termination status.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nthread.shouldBeDaemon()\nthread.shouldBeAlive()\nthread.shouldBeTerminated()\n```\n\n----------------------------------------\n\nTITLE: Applying Kotest Multiplatform Gradle Plugin\nDESCRIPTION: Adds the Kotest multiplatform Gradle plugin to enable testing on multiple Kotlin platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging at Spec Level in Kotest\nDESCRIPTION: Shows how to enable coroutine debugging for all tests within a spec by setting coroutineDebugProbes flag at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n  init {\n\n    coroutineDebugProbes = true\n\n    test(\"foo\") {\n      // debugging enabled here\n    }\n\n    test(\"bar\") {\n      // debugging enabled here\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Assertions for Ktor with Gradle\nDESCRIPTION: Dependency declaration for adding the kotest-assertions-ktor module to a Gradle project. This module provides matchers for Ktor applications, supporting both server-side testing and HTTP client responses.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-assertions-ktor:${version}\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to Test Cases in Kotest\nDESCRIPTION: Example of marking individual test cases with tags using the config function in a StringSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/tags.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assertion Mode Error Output in Kotest\nDESCRIPTION: This snippet shows the console output when a test violates the assertion mode rule by not containing any assertions. It demonstrates the error message format used by Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/assertion_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTest 'this test has no assertions' did not invoke any assertions\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Kotest Config\nDESCRIPTION: Example of setting system properties to disable classpath scanning and specify a custom config class location for Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/project_config.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nkotest.framework.classpath.scanning.config.disable=true\nkotest.framework.config.fqn=com.wibble.KotestConfig\n```\n\n----------------------------------------\n\nTITLE: Using contain Matcher for Collections in KotlinTest\nDESCRIPTION: Demonstrates the new contain matcher for collections in KotlinTest. It shows how to assert that a collection contains a specific element.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_55\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should contain(4)\n```\n\n----------------------------------------\n\nTITLE: Negating Kotest Matchers with Extension Functions\nDESCRIPTION: Demonstrates how to negate matchers when using the extension function style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldNotStartWith(\"boo\")\n```\n\n----------------------------------------\n\nTITLE: Using Locale and Timezone Listeners for Test-level Settings\nDESCRIPTION: Shows how to use LocaleTestListener and TimeZoneTestListener to temporarily change the system's default locale and timezone for the duration of tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(\n  LocaleTestListener(Locale.FRANCE),\n  TimeZoneTestListener(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\")))\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Enum Values in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that randomly selects constants from a given enum.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.enum<T>()\n```\n\n----------------------------------------\n\nTITLE: Using KType Matchers in Kotest\nDESCRIPTION: Assertion matchers for KType that verify the underlying type.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nktype.shouldBeOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency (Maven)\nDESCRIPTION: Adds the Kotest property testing dependency to a Maven project for JVM tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: New Test Case Configuration in Kotest\nDESCRIPTION: Example showing the new recommended way of configuring test case defaults using individual setting configurations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_5.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n\n    tags(Foo, Bar)\n    timeout = 100.seconds\n\n    test(\"foo\") {\n       // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing on a Single Top-Level Test in Kotest StringSpec\nDESCRIPTION: This snippet demonstrates how to use the 'f:' prefix to focus on a single top-level test in a Kotest StringSpec. Only the test prefixed with 'f:' will be executed, while others are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/focus.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Generator Bind for Creating Complex Test Data\nDESCRIPTION: Shows how to use the bind function to combine multiple generators to create instances of custom data classes for property-based testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val email: String, val id: Int)\n\nval userGen = Gen.bind(Gen.string(), Gen.positiveIntegers(), ::User)\n\nassertAll(userGen) {\n  it.email shouldNotBe null\n  it.id should beGreaterThan(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Property Test for Non-Zero Levenshtein Distance in Kotlin\nDESCRIPTION: Shows a property test that checks if the Levenshtein distance between two non-equal strings is greater than zero. This test may fail for equal strings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/assumptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Iterator Matchers in Kotest\nDESCRIPTION: Matchers for verifying iterator state and contents\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\niterator.shouldBeEmpty()\niterator.shouldHaveNext()\n```\n\n----------------------------------------\n\nTITLE: Enabling Kotest Config Dump in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to enable the Kotest config dump feature by setting a system property in the Gradle test task configuration block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/config_dump.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntest {\n  systemProperty \"kotest.framework.dump.config\", \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Test Cases in Kotest WordSpec\nDESCRIPTION: This example shows how to set a timeout for a test case in Kotest's WordSpec. The test is configured to fail if it doesn't complete within 2 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_case_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SystemEnvironmentProjectListener for Project Level Environment Variables\nDESCRIPTION: Example of applying environment variable overrides at the project level by implementing a listener in the project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override fun listeners(): List<TestListener> = listOf(SystemEnvironmentProjectListener(\"foo\", \"bar\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to Test Case in Kotest FunSpec\nDESCRIPTION: This snippet illustrates how to apply tags to a test case in a FunSpec using the config function. Tags can be used for grouping and selective test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_case_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveValue Map Matcher in KotlinTest\nDESCRIPTION: Example of using the haveValue matcher to verify a map contains a specific value in KotlinTest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_49\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveValue(\"a\")\n```\n\n----------------------------------------\n\nTITLE: Manual Kafka Client Configuration in Kotlin\nDESCRIPTION: Shows how to manually configure Kafka clients using the host and port from the embedded Kafka listener. This approach provides more control over the client configuration compared to the convenience methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/kafka.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n   \n   val props = Properties().apply {\n      put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"${embeddedKafkaListener.host}:${embeddedKafkaListener.port}\")\n   }\n   \n   val producer = KafkaProducer<String, String>(props)\n   \n})\n```\n\n----------------------------------------\n\nTITLE: Validated Type Generators\nDESCRIPTION: Generators for Arrow's Validated and ValidatedNel types, creating balanced valid and invalid instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/arrow.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.validated(invalid, valid)\nArb.validatedNel(invalid, valid)\n```\n\n----------------------------------------\n\nTITLE: Using Coroutine Scopes in Nested Kotest Tests\nDESCRIPTION: Shows how to use coroutine scopes in nested test structures, which is now supported for all scopes in Kotest 4.1.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.1.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndescribe(\"some test\") {\n launch {\n    delay(100)\n    it(\"should do something\") {\n       launch {\n          delay(100)\n       }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Classes with Improved Diff Highlighting\nDESCRIPTION: Example showing how to compare two data class instances using Kotest's shouldBe assertion, which now highlights differences in the failure output when comparing data classes.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = Foo(\"hello\", true, 1.0)\nval b = Foo(\"world\", true, 1.3)\na shouldBe b\n```\n\n----------------------------------------\n\nTITLE: Matching TestResult in Kotlin\nDESCRIPTION: Demonstrates how to match on TestResult ADT instead of the deprecated TestStatus enum in AfterTestListener implementations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_5.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (result) {\n  is TestResult.Success -> ...\n  is TestResult.Error -> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Boolean Results\nDESCRIPTION: Shows property testing using forAll with boolean return values\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  forAll(Gen.string(), Gen.string(), { a, b ->\n    (a + b).startsWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting No Exception in Kotlin using Kotest\nDESCRIPTION: Shows how to use shouldNotThrowAny to assert that no exception is thrown during the execution of a code block. This is useful for verifying that a piece of code executes without errors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/exceptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldNotThrowAny {\n  // test here should not throw any type of Throwable!\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Kotest Arb Values\nDESCRIPTION: Illustrates how to transform values from one type to another using map operation on an Arb.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genops.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval integerStrings: Arb<String> = Arb.int().map { it.toString() }\n```\n\n----------------------------------------\n\nTITLE: Generating Random Class Instances with Gen.bind in KotlinTest\nDESCRIPTION: Demonstrates how to use Gen.bind to create generators for custom classes from primitive generators in property-based testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\ndata class User(val email: String, val id: Int)\n\nval userGen = Gen.bind(Gen.string(), Gen.positiveIntegers(), ::User)\n\nassertAll(userGen) {\n  it.email shouldNotBe null\n  it.id should beGreaterThan(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing URI Components in KotlinTest\nDESCRIPTION: Shows how to verify various components of a URI using specialized matchers like haveScheme, haveHost, havePort, havePath, haveParameter, and haveFragment.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nval uri = URI.create(\"https://localhost:443/index.html?q=findme#results\")\nuri should haveScheme(\"https\")\nuri should haveHost(\"localhost\")\nuri should havePort(443)\nuri should havePath(\"/index.html\")\nuri should haveParameter(\"q\")\nuri should haveFragment(\"results\")\n```\n\n----------------------------------------\n\nTITLE: Generating Random DateTimes within Range in Kotlin\nDESCRIPTION: Creates random date times with years falling within the specified range. Primarily available for the JVM platform in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.datetime(ranges)\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Tests with PropTestConfig in Kotlin\nDESCRIPTION: Example of configuring a property test using PropTestConfig to specify options. This allows for customizing the behavior of property tests in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      forAll<String, String>(PropTestConfig(options here...)) { a,b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Files in Kotest Tests\nDESCRIPTION: Demonstrates how to create a temporary file using the tempfile() function in a Kotest FunSpec. The temporary file is automatically cleaned up after all tests in the spec have run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/tempfile.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val file = tempfile()\n\n   test(\"a temporary file dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabled Tests in ExpectSpec using xcontext and xexpect\nDESCRIPTION: Demonstrates how to disable individual tests or entire context blocks using xcontext and xexpect modifiers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"this outer block is enabled\") {\n        xexpect(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        expect(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Context-Level Fail Fast in Kotest\nDESCRIPTION: Demonstrates how to enable fail-fast behavior for a specific test context. When enabled, any test failure will cause subsequent tests in the same context to be skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/fail_fast.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n      context(\"context with fail fast enabled\").config(failfast = true) {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding Kotest Testcontainers extension to a project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining Properties File Content\nDESCRIPTION: Example of a simple properties file that defines key-value pairs to be loaded as system properties by Kotest framework.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/intellij/props.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfoo=bar\n```\n\n----------------------------------------\n\nTITLE: Testing System.exit with SpecSystemExitListener\nDESCRIPTION: Example of testing code that calls System.exit by using a listener that captures the exit call and allows assertions on the exit code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n    \"Catch exception\" {\n      val thrown: SystemExitException = shouldThrow<SystemExitException> {\n        System.exit(22)\n      }\n\n      thrown.exitCode shouldBe 22\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Plugin in Gradle\nDESCRIPTION: Configures the Pitest plugin in Gradle to use Kotest as the test plugin and sets target classes for mutation testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/pitest.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigure<PitestPluginExtension> {\n    // testPlugin.set(\"Kotest\")    // needed only with old PIT <1.6.7, otherwise having kotest-extensions-pitest on classpath is enough\n    targetClasses.set(listOf(\"my.company.package.*\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Extension Dependency in Kotlin\nDESCRIPTION: Maven/Gradle dependency declaration for adding the Kotest Koin extension to your project. This dependency is required to use Koin with Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/koin.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-extensions-koin:${version}\n```\n\n----------------------------------------\n\nTITLE: Disabled Tests in ExpectSpec\nDESCRIPTION: Shows how to disable tests using xcontext and xexpect variants in ExpectSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"this outer block is enabled\") {\n        xexpect(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        expect(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to Test Cases in Kotest FunSpec\nDESCRIPTION: This snippet illustrates how to apply tags to a test case in Kotest's FunSpec. Tags can be used for grouping and selective test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_case_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JDBC Test Container Extension\nDESCRIPTION: Example of installing a JDBC test container extension with connection pool configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcTestContainerExtension(mysql)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Container in Kotlin\nDESCRIPTION: Example of creating and configuring a MySQL TestContainer instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n  startupAttempts = 1\n  withUrlParam(\"connectionTimeZone\", \"Z\")\n  withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using containInAnyOrder Matcher in Kotlin for Kotest\nDESCRIPTION: Shows how to use the containInAnyOrder matcher for collections in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should containInAnyOrder(4,2,3)\n```\n\n----------------------------------------\n\nTITLE: Generating Nullable Values in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to create generators that produce nullable values using Kotest's arbitrary generators. This includes options for controlling the frequency of null values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\narb.orNull()\narb.orNull(nullProbability)\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Generator with Default Shrinking in Kotest\nDESCRIPTION: Example of using Kotest's built-in positive integer generator with its default shrinking behavior. When a test fails, the framework automatically attempts to shrink the failing input to find the simplest case that still fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/shrinking.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Generating ULong Arrays in Kotlin with Kotest\nDESCRIPTION: Creates an Arb that produces ULongArrays with specified length and content generators. Ideal for testing functions that work with arrays of unsigned long integers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.uLongArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jacoco Settings\nDESCRIPTION: Configures Jacoco tool version and optional custom report directory location in Gradle build file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/integrations/jacoco.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\njacoco {\n    toolVersion = \"0.8.7\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Robolectric Test with Kotest\nDESCRIPTION: Example of a basic Robolectric test using Kotest's ShouldSpec style. The test class is annotated with @RobolectricTest to enable Robolectric functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/roboelectric.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@RobolectricTest\nclass MyTest : ShouldSpec({\n    should(\"Access Robolectric normally!\") {\n\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Dependency for Multiplatform (JavaScript)\nDESCRIPTION: This Kotlin snippet demonstrates how to add the Kotest property testing dependency specifically to the JavaScript target in a Kotlin Multiplatform project. It configures the JS target and adds the dependency to the jsTest sourceset.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/index.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: String Similarity Matching Example in Kotlin\nDESCRIPTION: Shows how Kotest handles partial string matches by highlighting matching portions with plus signs. The example demonstrates string comparison with partial matches in a list.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/similarity.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nlistOf(\"sweet green apple\", \"sweet red plum\") shouldContain (\"sweet green pear\")\n\n(snip)\n\nPossibleMatches:\nMatch[0]: part of slice with indexes [0..11] matched actual[0..11]\nLine[0] =\"sweet green apple\"\nMatch[0]= ++++++++++++-----\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf with Counter Example in Kotlin\nDESCRIPTION: Demonstrates how variables are reset in InstancePerLeaf mode using an atomic counter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/isolation_mode.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Initial Delay to 'eventually' in Kotlin\nDESCRIPTION: Demonstrates how to configure 'eventually' with an initial delay before the first test execution. This waits 1 second before attempting the first test iteration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/eventually.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  initialDelay = 1.seconds\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Per Test Mode Example in Kotest\nDESCRIPTION: Example demonstrating InstancePerTest mode where each test gets a fresh instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/isolation_mode.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Matcher in Kotlin\nDESCRIPTION: Demonstrates how to create a custom matcher that checks if a string contains 'foo'. Includes the matcher implementation and usage examples.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nfun containFoo() = object : Matcher<String> {\n  override fun test(value: String) = Result(value.contains(\"foo\"), \"String $value should include foo\", \"String $value should not include foo\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should containFoo()\n\"hello bar\" shouldNot containFoo()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldContainFoo() = this should containFoo()\nfun String.shouldNotContainFoo() = this shouldNot containFoo()\n```\n\n----------------------------------------\n\nTITLE: Long Assertions in Kotest\nDESCRIPTION: Extension functions for asserting properties of Long values in Kotest. Includes methods for checking if a long is even, odd, or zero.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nlong.shouldBeEven()\nlong.shouldBeOdd()\nlong.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Invocations in Kotest\nDESCRIPTION: This snippet illustrates how to configure a test to run multiple times using the invocations parameter in Kotest's DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/timeouts/test_timeouts.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Elements Collection Matchers in Kotlin\nDESCRIPTION: Matchers for working with collections of elements (Elements object). These matchers verify the presence and count of items in an Elements collection.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/jsoup.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nelements.shouldBePresent()\nelements.shouldBePresent(n)\n```\n\n----------------------------------------\n\nTITLE: Basic Logging in Kotest Tests\nDESCRIPTION: Shows how to use logging functions within a Kotest test case using the warn logging level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/logging.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something\") {\n  warn { \"something weird happened\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Exhaustive Enum Sequence in Kotlin using Kotest\nDESCRIPTION: Creates an Exhaustive generator that iterates through all constants defined in a given enum.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_24\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.enum<T>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequential Test Ordering in Kotest\nDESCRIPTION: This snippet demonstrates how to configure sequential test ordering, where tests run in the order they are defined in the spec file. Sequential ordering is the default behavior in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SequentialSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Sequential\n\n    init {\n      \"foo\" {\n        // I run first as I'm defined first\n      }\n\n      \"bar\" {\n        // I run second as I'm defined second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tuple Arbitraries in Kotest\nDESCRIPTION: Functions to generate Pair and Triple instances where each value in the tuple is drawn from provided arbitraries.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.pair(arb1, arb2)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.triple(arb1, arb2, arb3)\n```\n\n----------------------------------------\n\nTITLE: Placing Listeners at End of Spec Definition\nDESCRIPTION: Shows how to position test lifecycle listeners at the end of the spec definition for better readability, while maintaining the same functionality for clearing mocks after each test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/integrations/mocks.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    afterTest {\n        clearMocks(repository)  // <---- End of file, better readability\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Chained Assertions in Kotest\nDESCRIPTION: Examples of both traditional and chained assertion syntax in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.3.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval employees: List<Employee> = ...\nemployees.shouldBeSorted()\n          shouldHaveSize(4)\n          shouldContain(Employee(\"Sam\", \"Chicago\"))\n```\n\n----------------------------------------\n\nTITLE: Using Classify in Property Testing\nDESCRIPTION: Shows how to use the classify function to generate statistics on the distribution of generated values in property-based tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nassertAll(Gen.string()) { a ->\n    classify(a.contains(\" \"), \"has whitespace\", \"no whitespace\")\n    // some test\n}\n\nforAll(Gen.int()) { a ->\n    classify(a == 0, \"zero\")\n    classify(a % 2 == 0, \"even number\", \"odd number\")\n    a + a == 2 * a\n}\n```\n\n----------------------------------------\n\nTITLE: Using KoinExtension with Root Lifecycle Mode in DescribeSpec\nDESCRIPTION: Example demonstrating how to use KoinExtension with Root lifecycle mode to maintain the same Koin context across all leaf tests within a root test. Useful for sharing mocked declarations between tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/koin.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : DescribeSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(module = myKoinModule, mode = KoinLifecycleMode.Root))\n\n    val userService by inject<UserService>()\n\n    init {\n        describe(\"use userService\") {\n            it(\"inside a leaf test\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n            it(\"this shares the same context\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Testing with Inspectors\nDESCRIPTION: Shows how to use inspectors to test collections with various assertion conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"your test case\" {\n    val xs = listOf(\"aa_1\", \"aa_2\", \"aa_3\")\n    xs.forAll {\n      it.shouldContain(\"_\")\n      it.shouldStartWith(\"aa\")\n    }\n  }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Test Case Severity in Kotest\nDESCRIPTION: Shows how to assign a severity level to a test case in Kotest, which can be used for conditional test execution based on severity.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.3.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec() {\n   init {\n      test(\"very very important\").config(severity = TestCaseSeverityLevel.CRITICAL) {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Gradle\nDESCRIPTION: Adds the Kotest Testcontainers extension dependency to a Gradle build file. This is required to use Testcontainers with Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Using Locale and Timezone Extensions in Kotlin Tests\nDESCRIPTION: Demonstrates how to use withDefaultLocale and withDefaultTimeZone extensions to manipulate the default Locale and Timezone in Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nwithDefaultLocale(Locale.FRANCE) {\n  println(\"My locale is now France! Très bien!\")\n}\n\nwithDefaultTimeZone(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\"))) {\n  println(\"My timezone is now America/Sao_Paulo! Muito bem!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Pattern-Matched Strings in Kotest\nDESCRIPTION: Generates strings that match a given pattern using the RgxGen library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.stringPattern(pattern)\n```\n\n----------------------------------------\n\nTITLE: Implementing TestListener Methods in a Spec Class\nDESCRIPTION: This example demonstrates how to implement TestListener methods directly in a Spec class. The TimeTracker WordSpec measures and reports the execution time of each test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimeTracker : WordSpec() {\n\n  var started = 0L\n\n  override fun beforeTest(description: Description) {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(description: Description, result: TestResult) {\n    val duration = System.currentTimeMillis() - started\n    println(\"Test ${description.fullName()} took ${duration}ms\")\n  }\n\n  init {\n    \"some test\" should {\n      \"be timed\" {\n        // test here\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SpringListener in a Kotlin Spec Class\nDESCRIPTION: Shows how to register the SpringListener for dependency injection in a test class by overriding the listeners() function in a spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : ParentSpec() {\n  override fun listeners() = listOf(SpringListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Property Testing for JavaScript Target\nDESCRIPTION: Adding the Kotest property testing dependency specifically to the JavaScript target in a Kotlin Multiplatform project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/index.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KotlinTest Test Class Using Lambda\nDESCRIPTION: This snippet shows how to define a KotlinTest test class using a lambda expression in the constructor with StringSpec. This approach is more concise but doesn't allow overriding parent class methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding Kotest Testcontainers extension to a project\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers_46x.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Ktor Assertions Dependency in Gradle (Kotlin DSL)\nDESCRIPTION: This snippet shows how to add the Kotest Ktor assertions dependency to a Gradle project using the Kotlin DSL. It includes the implementation line that should be added to the dependencies block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.kotest.extensions:kotest-assertions-ktor:version\")\n```\n\n----------------------------------------\n\nTITLE: Generating Date and Time Values with Kotest Arb\nDESCRIPTION: Functions for generating random dates, date times, and local date/time instances within specified year ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.date(ranges)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.datetime(ranges)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.localDateTime(ranges)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.localDate(ranges)\n```\n\n----------------------------------------\n\nTITLE: Automatic Resource Closing in KotlinTest\nDESCRIPTION: Demonstrates how to use the autoClose function to automatically close resources after tests complete. Resources must implement AutoCloseable interface.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Name Whitespace Handling\nDESCRIPTION: Example of using Kotest's whitespace stripping feature for multiline test names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.3.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n  init {\n   \"\"\"this is a\n      test spanning multiple lines\"\"\" { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Table Testing with StringSpec\nDESCRIPTION: Example of table testing within StringSpec class, testing string concatenation with multiple combinations of inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forAll(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Ktor Assertions Dependency in Gradle (Groovy DSL)\nDESCRIPTION: This snippet demonstrates how to add the Kotest Ktor assertions dependency to a Gradle project using the Groovy DSL. It shows the implementation line that should be included in the dependencies block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation \"io.kotest.extensions:kotest-assertions-ktor:version\"\n```\n\n----------------------------------------\n\nTITLE: Using System Property Override in Tests\nDESCRIPTION: Demonstrates how to temporarily override system properties within a test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSystemProperty(\"foo\", \"bar\") {\n    System.getProperty(\"foo\") shouldBe \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: NonEmptyList Type Matchers in Kotest Arrow Extension\nDESCRIPTION: Matchers for testing Arrow's NonEmptyList type, including assertions for content verification, null handling, duplicates detection, and sorting validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| NonEmptyList                         |                                                                            |\n|--------------------------------------|----------------------------------------------------------------------------|\n| `nel.shouldContain(e)`               | Asserts that the NonEmptyList contains the given element e                 |\n| `nel.shouldContainAll(e1,e2,...,en)` | Asserts that the NonEmptyList contains all the given elements e1,e2,...,en |\n| `nel.shouldContainNull()`            | Asserts that the NonEmptyList contains at least one null                   |\n| `nel.shouldContainNoNulls()`         | Asserts that the NonEmptyList contains no nulls                            |\n| `nel.shouldContainOnlyNulls()`       | Asserts that the NonEmptyList contains only nulls or is empty              |\n| `nel.shouldHaveDuplicates()`         | Asserts that the NonEmptyList has at least one duplicate                   |\n| `nel.shouldBeSingleElement(e)`       | Asserts that the NonEmptyList has a single element which is e              |\n| `nel.shouldBeSorted()`               | Asserts that the NonEmptyList is sorted                                    |\n```\n\n----------------------------------------\n\nTITLE: Array Generator Examples\nDESCRIPTION: Shows how to generate arrays of various primitive types with customizable length and content parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genslist.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.booleanArray(length, content) // Generates boolean arrays\nArb.charArray(length, content) // Generates char arrays\nArb.byteArray(length, content) // Generates byte arrays\nArb.intArray(length, content) // Generates int arrays\n```\n\n----------------------------------------\n\nTITLE: Collection Testing with Inspectors in Kotest\nDESCRIPTION: Demonstrates how to test collections using inspector functions to verify conditions across elements.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"your test case\" {\n    val xs = listOf(\"aa_1\", \"aa_2\", \"aa_3\")\n    xs.forAll {\n      it.shouldContain(\"_\")\n      it.shouldStartWith(\"aa\")\n    }\n  }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinTest with Gradle using Kotlin DSL\nDESCRIPTION: Example of how to configure a Gradle build using Kotlin DSL to use KotlinTest with the JUnit Platform. This works for both Android and non-Android projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test> {\n  useJUnitPlatform()\n}\n\ndependencies {\n  testImplementation(\"io.kotlintest:kotlintest-runner-junit5:3.4.2\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Tag Expression\nDESCRIPTION: Shows how to set tag expressions programmatically at runtime\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/tags.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nRuntimeTagExpressionExtension.expression = \"Linux & !Database\"\n```\n\n----------------------------------------\n\nTITLE: Requiring Multiple Tags\nDESCRIPTION: Using @RequiresTag annotation to specify multiple required tags for a spec to run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/tags.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n@RequiresTag(\"Linux\", \"Mysql\")\nclass MyTestClass : FunSpec()\n```\n\n----------------------------------------\n\nTITLE: Disabling Classpath Scanning in Kotest\nDESCRIPTION: Common properties to disable Kotest's classpath scanning features to improve startup time when those features aren't needed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/intellij/props.md#2025-04-13_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nkotest.framework.classpath.scanning.config.disable=true\nkotest.framework.classpath.scanning.autoscan.disable=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocking and Non-blocking Tests in Kotest\nDESCRIPTION: Demonstrates how to configure blocking and non-blocking tests in Kotest using FunSpec. Shows the difference between tests that require thread interruption (using blockingTest flag) and those that use suspension points. The example includes timeout configurations for both scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/timeouts/blocking_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyBlockingTest : FunSpec() {\n  init {\n\n    test(\"interrupt me!\").config(blockingTest = true, timeout = 10.seconds) {\n       Thread.sleep(100000000)\n    }\n\n    test(\"uses suspension\").config(timeout = 10.seconds) {\n      delay(100000000)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: System Exit Testing Implementation\nDESCRIPTION: Example of testing System.exit calls using SpecSystemExitListener and exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/system.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n    \"Catch exception\" {\n      val thrown: SystemExitException = shouldThrow<SystemExitException> {\n        System.exit(22)\n      }\n\n      thrown.exitCode shouldBe 22\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Tests with Tags in Kotest\nDESCRIPTION: Shows how to mark test cases with tags using the config function in a Kotest StringSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/tags.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Container in Kotlin\nDESCRIPTION: Shows how to create a MySQL container using Testcontainers in Kotlin, setting various parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n  startupAttempts = 1\n  withUrlParam(\"connectionTimeZone\", \"Z\")\n  withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Tag Expression in Kotest\nDESCRIPTION: This snippet shows how to set a runtime tag expression using the RuntimeTagExpressionExtension in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/tags.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nRuntimeTagExpressionExtension.expression = \"Linux & !Database\"\n```\n\n----------------------------------------\n\nTITLE: AnnotationSpec Example in KotlinTest\nDESCRIPTION: Shows how to use AnnotationSpec which mimics JUnit style testing with @Test annotations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n  @Test\n  fun test1() {\n\n  }\n\n  @Test\n  fun test2() {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Not-Null Assertion in Kotlin\nDESCRIPTION: A simple assertion that checks if a value is not null, which on its own doesn't provide much context when it fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure in Gradle\nDESCRIPTION: Gradle configuration block for Allure settings including version and autoconfigure options\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/allure.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nallure {\n  autoconfigure = false\n  version = \"2.13.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of an Unclear Error Message\nDESCRIPTION: The unhelpful error message that would appear when a null check fails without additional context.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n<null> should not equal <null>\n```\n\n----------------------------------------\n\nTITLE: Asserting KType in Kotlin\nDESCRIPTION: This matcher is used to assert the type of a KType object in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nktype.shouldBeOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Instance Per Test Mode with Counter\nDESCRIPTION: Demonstrates state isolation in InstancePerTest mode using an atomic counter variable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/isolation_mode.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Propagate System Properties with Kotlin DSL\nDESCRIPTION: Shows how to configure Gradle using Kotlin DSL to propagate system properties to test executors, enabling tag-based test filtering via command line arguments.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().map { it.key.toString() to it.value }.toMap()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Functions for Custom Matcher in Kotlin\nDESCRIPTION: This snippet demonstrates how to create extension functions for the custom matcher, following Kotest's naming conventions and allowing for method chaining.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/custom.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldHaveLength(length: Int): String {\n  this should haveLength(length)\n  return this\n}\n\nfun String.shouldNotHaveLength(length: Int): String {\n  this shouldNot haveLength(length)\n  return this\n}\n```\n\n----------------------------------------\n\nTITLE: NonEmptyList Matchers Usage in Kotlin\nDESCRIPTION: Comprehensive set of matchers for testing NonEmptyList types in Arrow. Includes assertions for content, nullability, duplicates, and ordering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nnel.shouldContain(e)\nnel.shouldContainAll(e1,e2,...,en)\nnel.shouldContainNull()\nnel.shouldContainNoNulls()\nnel.shouldContainOnlyNulls()\nnel.shouldHaveDuplicates()\nnel.shouldBeSingleElement(e)\nnel.shouldBeSorted()\n```\n\n----------------------------------------\n\nTITLE: Complex Assertions in Assumptions\nDESCRIPTION: Example using multiple assertions within assumptions for string comparison tests\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/assumptions.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.string(3..4, Codepoint.az()), Arb.string(3..4, Codepoint.az())) { a, b ->\n  withAssumptions({\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }) {\n     a.compareTo(b) shouldNotBe 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Test Factory in Test Suite\nDESCRIPTION: Example of including test factory for multiple implementations in a test suite.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_factories.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IndexedSeqTestSuite : WordSpec({\n   include(indexedSeqTests(\"vector\"), Vector())\n   include(indexedSeqTests(\"list\"), List())\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Kotest Properties in Tests\nDESCRIPTION: This Kotlin code demonstrates how to access properties set in the 'kotest.properties' file within a Kotest test. It uses the DescribeSpec style and verifies that the 'foo' property is set correctly.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/intellij/props.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FooTest : DescribeSpec() {\n  init {\n    describe(\"after adding kotest.properties\") {\n      it(\"foo should be set\") {\n         System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Date Matchers in Kotlin with Klock and Kotest\nDESCRIPTION: Examples of date-related matchers provided by kotest-assertions-klock. These matchers allow for assertions on date components, comparisons, and range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/klock.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYear(otherDate)\ndate.shouldHaveSameMonth(otherDate)\ndate.shouldHaveSameDay(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDay(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom EnabledCondition for Conditional Test Execution\nDESCRIPTION: This code defines a custom EnabledCondition implementation that enables tests containing 'Linux' in their name only when running on a Linux operating system.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/annotations.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LinuxOnlyCondition : EnabledCondition {\n  override fun enabled(kclass: KClass<out Spec>): Boolean = when {\n    kclass.simpleName?.contains(\"Linux\") == true -> IS_OS_LINUX\n    else -> true // non Linux tests always run\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Kotest Assertion Example\nDESCRIPTION: Demonstrates a simple equality assertion using Kotest's shouldBe matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nname shouldBe \"sam\"\n```\n\n----------------------------------------\n\nTITLE: Using haveKey Map Matcher in KotlinTest\nDESCRIPTION: Demonstrates the haveKey matcher for asserting that a Map contains a specific key in KotlinTest. The example checks if a map contains the key 1.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveKey(1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Test Ordering in Kotest\nDESCRIPTION: Demonstrates how to configure tests to run in sequential order (order of definition) using TestCaseOrder.Sequential. Tests will execute in the exact order they are defined in the spec file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SequentialSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Sequential\n\n    init {\n      \"foo\" {\n        // I run first as I'm defined first\n      }\n\n      \"bar\" {\n        // I run second as I'm defined second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Property Testing for Multiplatform Common Tests\nDESCRIPTION: Kotlin Multiplatform configuration for adding Kotest property testing support to the commonTest sourceset.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/index.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-property:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Invocation Timeouts at Spec Level in Kotest\nDESCRIPTION: This example demonstrates how to set an invocation timeout for all tests within a Kotest spec using FunSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/timeouts/test_timeouts.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   invocationTimeout = 25.milliseconds\n\n   test(\"foo\") {\n      // test here\n   }\n\n   test(\"bar\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Coroutines in Test Cases\nDESCRIPTION: Example showing how to launch a coroutine directly in a test case, which is possible because test cases are coroutine scopes in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\") {\n  launch {\n    delay(100)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency (Gradle)\nDESCRIPTION: Adds the Kotest JUnit5 runner dependency to a Gradle project. This is required for running Kotest tests on the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-runner-junit5:$version'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Container Instance\nDESCRIPTION: Example of creating a MySQL container with specific configuration parameters like timezone settings and startup attempts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n  startupAttempts = 1\n  withUrlParam(\"connectionTimeZone\", \"Z\")\n  withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table Tests in Kotlin with KotlinTest\nDESCRIPTION: Illustrates how to use Table Tests in KotlinTest to specify combinations of values for testing. It shows how to define headers and rows for the table.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TableExample : StringSpec(), TableTesting {\n  init {\n    \"numbers should be prime\" {\n      val table = table(\n          headers(\"a\", \"b\"),\n          row(5, 5),\n          row(4, 6),\n          row(3, 7)\n      )\n      forAll(table) { a, b ->\n        a + b == 10\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing System Output with NoSystemOutListener in Kotlin\nDESCRIPTION: Demonstrates how to use NoSystemOutListener and NoSystemErrListener to test for exceptions when writing to System.out or System.err streams in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NoSystemOutOrErrTest : StringSpec() {\n\n  override fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n\n  init {\n\n    \"System.out should throw an exception when the listener is added\" {\n      shouldThrow<SystemOutWriteException> {\n        System.out.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n\n    \"System.err should throw an exception when the listener is added\" {\n      shouldThrow<SystemErrWriteException> {\n        System.err.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random LocalDates in Kotlin using Kotest\nDESCRIPTION: Generates random LocalDate instances with the year between the given range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_40\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.localDate(ranges)\n```\n\n----------------------------------------\n\nTITLE: Shared Configuration Pattern in Kotlin\nDESCRIPTION: Example of sharing and customizing eventually configurations across test suites.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/eventually.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = eventuallyConfig {\n  duration = 5.minutes\n  interval = 25.milliseconds.fibonacci()\n  listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") }\n}\n\nval fast = slow.copy(duration = 5.seconds)\n\nclass FooTests : FunSpec({\n  test(\"server eventually provides a result for /foo\") {\n    eventually(slow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : FunSpec({\n  test(\"server eventually provides a result for /bar\") {\n    eventually(fast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Jacoco XML Report Task in Gradle (Kotlin)\nDESCRIPTION: This snippet adds a task to generate XML reports for Jacoco. It depends on the test task and enables XML report generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/integrations/jacoco.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.jacocoTestReport {\n    dependsOn(tasks.test)\n    reports {\n        xml.isEnabled = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random LocalDateTimes in Kotlin using Kotest\nDESCRIPTION: Generates random LocalDateTime instances with the year between the given range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_39\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.localDateTime(ranges)\n```\n\n----------------------------------------\n\nTITLE: Using System Properties in Kotest Tests\nDESCRIPTION: Kotlin test example showing how to access system properties that were set via the kotest.properties file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/intellij/props.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FooTest : DescribeSpec() {\n  init {\n    describe(\"after adding kotest.properties\") {\n      it(\"foo should be set\") {\n         System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Directories in Kotest Tests\nDESCRIPTION: Shows how to use the 'tempdir()' function in a Kotest FunSpec to create a temporary directory for testing. Similar to temporary files, Kotest manages the cleanup of the directory after test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/tempfile.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val dir = tempdir()\n\n   test(\"a temporary dir dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Tests for List Implementation in Kotlin\nDESCRIPTION: Example test class for the List implementation of IndexedSeq. This demonstrates the traditional approach before using test factories, with redundant tests for each implementation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/test_factories.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ListTest : WordSpec({\n\n   val empty = List<Int>()\n\n   \"List\" should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout in Kotest FunSpec\nDESCRIPTION: This snippet demonstrates how to set a timeout for a specific test using the config method in a FunSpec. The test will timeout after 100 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n   test(\"this test will timeout quickly!\").config(timeout = 100.milliseconds) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration for adding Kotest Testcontainers extension to a project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Port for Embedded Kafka in Kotest (Kotlin)\nDESCRIPTION: Shows how to create an instance of EmbeddedKafkaListener with a custom port. This allows for specifying a particular port for the Kafka broker to run on during tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/kafka.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaCustomPortTest : FunSpec({\n\n   val listener = EmbeddedKafkaListener(5678)\n   listener(listener)\n\n   test(\"send / receive\") {\n\n      val producer = listener.stringStringProducer()\n      producer.send(ProducerRecord(\"foo\", \"a\"))\n      producer.close()\n\n      val consumer = listener.stringStringConsumer(\"foo\")\n      eventually(10.seconds) {\n         consumer.poll(1000).first().value() shouldBe \"a\"\n      }\n      consumer.close()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Gradle Plugin to Build Script\nDESCRIPTION: This Kotlin snippet shows how to add the Allure Gradle plugin to the build script's plugins block. This plugin is used for generating the final Allure report.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/allure.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  ...\n  id(\"io.qameta.allure\") version \"2.11.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Container Setup and Usage\nDESCRIPTION: Complete example of setting up and using a Kafka TestContainer including producer and consumer configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KafkaTestContainerExtensionTest : FunSpec() {\n  init {\n\n    val kafka = install(TestContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n      withEmbeddedZookeeper()\n    }\n\n    test(\"should send/receive message\") {\n\n      val producer = kafka.createStringStringProducer()\n      producer.send(ProducerRecord(\"foo\", null, \"bubble bobble\"))\n      producer.close()\n\n      val consumer = kafka.createStringStringConsumer {\n        this[ConsumerConfig.MAX_POLL_RECORDS_CONFIG] = 1\n      }\n\n      consumer.subscribe(listOf(\"foo\"))\n      val records = consumer.poll(Duration.ofSeconds(100))\n      records.shouldHaveSize(1)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Annotation-Based Spec Ordering Example in Kotest\nDESCRIPTION: Demonstrates how to use @Order annotations to control test specification execution order. Lower order values are executed first, and specs without annotations are executed last.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/spec_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Order(1)\nclass FooTest : FunSpec() { }\n\n@Order(0)\nclass BarTest: FunSpec() {}\n\n@Order(1)\nclass FarTest : FunSpec() { }\n\nclass BooTest : FunSpec() {}\n```\n\n----------------------------------------\n\nTITLE: Fixing Arb.map Functionality in Kotest\nDESCRIPTION: Fixes the Arb.map function to honor the minSize parameter in both generation and shrinks. This ensures consistent behavior when using this arbitrary generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfix Arb.map to honor minSize parameter in both generation and shrinks (#2890)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with Enabled Flag in Kotlin\nDESCRIPTION: This snippet demonstrates how to disable a test case by setting the 'enabled' config parameter to false. It also shows how to conditionally enable tests based on system properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/config_enabled.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = false) {\n  // test here\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = IS_OS_LINUX) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: DescribeSpec Example in KotlinTest\nDESCRIPTION: Demonstrates DescribeSpec which uses describe, and, and it keywords similar to SpekFramework.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DescribeSpecExample : DescribeSpec() {\n  init {\n    describe(\"some context\") {\n      it(\"test name\") {\n        // test here\n      }\n      describe(\"nested contexts\") {\n        and(\"another context\") {\n          it(\"test name\") {\n            // test here\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete JDBC Database Test Example\nDESCRIPTION: A full example showing how to test database operations using a MySQL container, including container setup, datasource configuration, and data insertion/retrieval.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass QueryDatastoreTest : FunSpec({\n\n  val mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n    startupAttempts = 1\n    withUrlParam(\"connectionTimeZone\", \"Z\")\n    withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n  }\n\n  val ds = install(JdbcDatabaseContainerExtension(mysql)) {\n    poolName = \"myconnectionpool\"\n    maximumPoolSize = 8\n    idleTimeout = 10000\n  }\n\n  val datastore = PersonDatastore(ds)\n\n  test(\"insert happy path\") {\n\n    datastore.insert(Person(\"sam\", \"Chicago\"))\n    datastore.insert(Person(\"jim\", \"Seattle\"))\n\n    datastore.findAll().shouldBe(listOf(\n      Person(\"sam\", \"Chicago\"),\n      Person(\"jim\", \"Seattle\"),\n    ))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Embedded Kafka Listener in Kotest FunSpec\nDESCRIPTION: Shows how to register the embeddedKafkaListener in a Kotest FunSpec class. This listener starts the embedded Kafka broker when the spec is created and stops it when the spec completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/kafka.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n  listener(embeddedKafkaListener)\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec() {\n  init {\n    listener(embeddedKafkaListener)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing a Complex Matcher from Simple Components in Kotest\nDESCRIPTION: Creating a composed matcher for Person objects by combining the previously defined matchers. The compose function maps each matcher to a specific property of the Person class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/data_class_matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun personMatcher(name: String, age: Int) = Matcher.compose(\n  nameMatcher(name) to Person::name,\n  ageMatcher(age) to Person::age,\n  addressMatcher to Person::address\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JSON Assertions Dependency in Kotlin\nDESCRIPTION: This code snippet shows how to add the Kotest JSON assertions dependency to your project's build file. This is required to use the JSON matchers described in the document.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/json/overview.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest:kotest-assertions-json:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Sample Coroutine Debug Output Format\nDESCRIPTION: Shows the format of a coroutine dump output, including creation timestamp, coroutine state, and stacktrace information.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCoroutines dump 2021/11/27 22:17:43\n\nCoroutine DeferredCoroutine{Active}@71f1906, state: CREATED\n\t(Coroutine creation stacktrace)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.async$default(Builders.common.kt:82)\n\tat kotlinx.coroutines.BuildersKt.async$default(Unknown Source)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invokeSuspend(CoroutineDebugTest.kt:37)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invoke(CoroutineDebugTest.kt)\n```\n\n----------------------------------------\n\nTITLE: General Container Extension Example\nDESCRIPTION: Example of using the ContainerExtension with a Redis container.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/test_containers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval container = install(ContainerExtension(\"redis:5.0.3-alpine\")) {\n  startupAttempts = 1\n  withExposedPorts(6379)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Dependency for JVM/Maven in XML\nDESCRIPTION: This snippet demonstrates how to add the Kotest property testing dependency to a Maven pom.xml file for JVM projects. It includes the dependency configuration for the kotest-property-jvm artifact with test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Service with Functional Interface in Kotlin\nDESCRIPTION: Demonstrates a basic service implementation using a functional interface HasAnswer. Shows the structure of a service class that depends on a function interface.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/fake_functions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun interface HasAnswer {\n   fun answer(question: String): Int\n}\n\nclass AnsweringService: HasAnswer {\n   override fun answer(question: String): Int { TODO() }\n}\n\nclass MyService(private val hasAnswer: HasAnswer) {\n   fun respond(question: String): Int = hasAnswer.answer(question)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a TestListener in KotlinTest\nDESCRIPTION: This snippet shows how to create a TestListener in KotlinTest 3.0.x. The TimeTracker listener implements beforeTest and afterTest methods to track and report test execution time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimeTracker : TestListener {\n\n  var started = 0L\n\n  override fun beforeTest(description: Description) {\n    TimeTrackerTest.started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(description: Description, result: TestResult) {\n    val duration = System.currentTimeMillis() - TimeTrackerTest.started\n    println(\"Test ${description.fullName()} took ${duration}ms\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advancing TestClock Time in Kotlin\nDESCRIPTION: Demonstrates how to advance the time of a TestClock instance by a specified duration. This method mutates the internal state of the clock.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/clock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclock.plus(6.minutes)\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Tests with xit in DescribeSpec\nDESCRIPTION: This example shows how to selectively disable individual tests within an enabled test block by using the 'xit' prefix. This allows developers to keep some tests running while disabling others in the same context.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/xmethods.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  describe(\"this block is enabled\") {\n    xit(\"will not run\") {\n      // disabled test\n    }\n    it(\"will run\") {\n       // enabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using Test Factory in Test Suite\nDESCRIPTION: Example of including test factory for multiple implementations in a test suite.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_factories.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IndexedSeqTestSuite : WordSpec({\n   include(indexedSeqTests(\"vector\"), Vector())\n   include(indexedSeqTests(\"list\"), List())\n})\n```\n\n----------------------------------------\n\nTITLE: Using containInAnyOrder Collection Matcher in KotlinTest\nDESCRIPTION: Example of using the containInAnyOrder matcher to verify a collection contains multiple elements in any order in KotlinTest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should containInAnyOrder(4,2,3)\n```\n\n----------------------------------------\n\nTITLE: Filtering Kotest Arbitrary Values\nDESCRIPTION: Shows how to create new arbitraries by filtering values from a source arbitrary, demonstrated through generating even and odd numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genops.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval evens = Arb.int().filter { it.value % 2 == 0 }\nval odds = Arb.int().filter { it.value % 2 == 1 }\n```\n\n----------------------------------------\n\nTITLE: Using StringSpec Style in Kotlin Tests\nDESCRIPTION: Shows the minimal syntax of StringSpec style where tests are defined using just strings and lambda expressions. Includes example with test configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\" {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n    \"strings.length should return size of string\".config(enabled = false, invocations = 3) {\n        \"hello\".length shouldBe 5\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Pattern-Matched Strings in Kotlin using Kotest\nDESCRIPTION: Generates strings that match a given pattern using the Generex library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.stringPattern(pattern)\n```\n\n----------------------------------------\n\nTITLE: Activating SpringExtension for a Specific Test Class\nDESCRIPTION: Demonstrates how to activate the SpringExtension for a single test class by overriding the extensions() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/spring.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : FunSpec() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Test Names in Kotest\nDESCRIPTION: Example of defining test names across multiple lines with whitespace stripping enabled.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.3.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n  init {\n   \"\"\"this is a\n      test spanning multiple lines\"\"\" { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Timestamp Properties in Kotlin with Kotest\nDESCRIPTION: These assertions validate properties of Timestamp objects, including comparisons between timestamps and verifying if a timestamp falls within a specific range. They allow for precise datetime comparisons in database contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\ntimestamp.shouldBeAfter(anotherTimestamp)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntimestamp.shouldBeBefore(anotherTimestamp)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ntimestamp.shouldBeBetween(fromTimestamp, toTimestamp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tests in Kotest DescribeSpec\nDESCRIPTION: Example showing how to structure nested tests using Kotest's DescribeSpec style. Demonstrates a test class with a describe block containing two test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/output.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: DescribeSpec({\n  describe(\"describe 1\"){\n    it(\"test 1\"){}\n    it(\"test 2\"){}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing EnabledCondition for Midnight Test Execution in Kotest\nDESCRIPTION: Creates a custom EnabledCondition that allows tests to run only at midnight.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.3.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EnabledIfMidnight : EnabledCondition {\n   override fun enabled(specKlass: KClass<out Spec>): Boolean = LocalTime.now().hour == 0\n}\n```\n\n----------------------------------------\n\nTITLE: IsolationMode Configuration for Mocks\nDESCRIPTION: Solution using IsolationMode.InstancePerTest to create fresh test class instances for each test\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/integrations/mocks.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    isolationMode = IsolationMode.InstancePerTest\n\n})\n```\n\n----------------------------------------\n\nTITLE: Catching System.exit Calls with SpecSystemExitListener\nDESCRIPTION: Using SpecSystemExitListener to detect when System.exit is called and verify the exit code by catching a SystemExitException.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n    \"Catch exception\" {\n      val thrown: SystemExitException = shouldThrow<SystemExitException> {\n        System.exit(22)\n      }\n\n      thrown.exitCode shouldBe 22\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Order Annotation for Spec Execution Order\nDESCRIPTION: Demonstrates how to use the @Order annotation to control the execution order of test spec classes. Lower order values are executed first, and classes without annotations are executed last.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/spec_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@Order(1)\nclass FooTest : FunSpec() { }\n\n@Order(0)\nclass BarTest: FunSpec() {}\n\n@Order(1)\nclass FarTest : FunSpec() { }\n\nclass BooTest : FunSpec() {}\n```\n\n----------------------------------------\n\nTITLE: Null Assertion Example in Kotlin\nDESCRIPTION: Demonstrates a basic null check assertion that shows the need for additional context through clues.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Multiplatform Gradle Plugin\nDESCRIPTION: Adds the Kotest multiplatform Gradle plugin to support testing across multiple Kotlin platforms. This is required for JavaScript and Native testing with Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Tag Expressions\nDESCRIPTION: Shows how to set tag expressions programmatically at runtime\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/tags.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nRuntimeTagExpressionExtension.expression = \"Linux & !Database\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Case Parameters in KotlinTest\nDESCRIPTION: This snippet demonstrates how to configure test case parameters such as invocations, threads, and timeout in different spec styles of KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WithDataTestName Interface in Kotest\nDESCRIPTION: Shows how to implement the WithDataTestName interface to provide custom test names through the dataTestName() function instead of using toString().\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/test_names.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int) : WithDataTestName {\n  override fun dataTestName() = \"wibble $a, $b, $c wobble\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Ktor Assertions Dependency\nDESCRIPTION: Maven/Gradle dependency configuration for adding Kotest Ktor assertions to a project. Uses a version placeholder that should be replaced with the actual version number.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-assertions-ktor:${version}\n```\n\n----------------------------------------\n\nTITLE: Generating Sets in Kotest with Arb.set Functions\nDESCRIPTION: Functions for generating random sets where values come from a provided element generator. Includes variants with configurable size ranges and slippage parameters to control uniqueness generation attempts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.set(gen, range)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.set(gen, range, slippage)\n```\n\n----------------------------------------\n\nTITLE: Collection Inspector Usage in Kotlin\nDESCRIPTION: Shows how to use inspectors to verify conditions on collection elements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nmylist.forExactly(3) {\n    it.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Test Results in Kotlin AfterTestListener\nDESCRIPTION: Example showing how to handle test results using the new TestResult ADT instead of the deprecated TestStatus enum in an AfterTestListener implementation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_5.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (result) {\n  is TestResult.Success -> ...\n  is TestResult.Error -> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Dependency for Multiplatform (Common)\nDESCRIPTION: This Kotlin snippet shows how to add the Kotest property testing dependency to a Kotlin Multiplatform project's commonTest sourceset. It uses the Kotlin DSL to configure the dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/index.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-property:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing System Output in Kotest Tests\nDESCRIPTION: Shows how to use NoSystemOutListener and NoSystemErrListener to prevent any messages from being printed to System.out or System.err during tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n```\n\n----------------------------------------\n\nTITLE: Using SystemEnvironmentProjectListener in Kotest Project Config\nDESCRIPTION: Shows how to use the SystemEnvironmentProjectListener to apply environment variable changes at the project level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n    override fun listeners(): List<TestListener> = listOf(SystemEnvironmentProjectListener(\"foo\", \"bar\"))\n\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Validated Types in Kotlin with Kotest Arrow\nDESCRIPTION: Examples of assertions for Validated types using Kotest Arrow matchers. These matchers check if a Validated is Valid or Invalid, and can verify specific values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/arrow.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nvalidated.shouldBeValid()\nvalidated.shouldBeValid(v)\nvalidated.shouldBeInvalid()\nvalidated.shouldBeInvalid(v)\n```\n\n----------------------------------------\n\nTITLE: Generating Endo Instances in Kotest with Arrow\nDESCRIPTION: Example of generating Endo instances using Arrow generators in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/arrow.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.endo(arb)\n```\n\n----------------------------------------\n\nTITLE: Test Case Configuration Examples in Kotest\nDESCRIPTION: Shows various ways to configure test cases with parameters like invocations, threads, timeouts and tags.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Embedded Kafka Listener Registration\nDESCRIPTION: Demonstrates an alternative way to register the embedded Kafka listener using the init block in a Kotest FunSpec class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/kafka.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec() {\n  init {\n    listener(embeddedKafkaListener)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Output Format with Full Test Path in Kotest\nDESCRIPTION: Example of how test names appear in output after enabling the 'displayFullTestPath' configuration option. The output shows the fully qualified test path including the class name, describe block, and test name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/output.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMyTests. describe 1 - test 1\nMyTests. describe 1 - test 2\n```\n\n----------------------------------------\n\nTITLE: Continually Testing with Custom Poll Interval in Kotlin\nDESCRIPTION: Shows how to use the continually function with a custom poll interval of 5 seconds while testing for a total duration of 60 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/continually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds, 5.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging for a Single Test in Kotest\nDESCRIPTION: Demonstrates how to enable coroutine debugging for a specific test using the 'config(coroutineDebugProbes = true)' parameter in a FunSpec test. When enabled, any coroutines launched within the test will be included in a coroutine dump after test completion or when an exception occurs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineDebugProbes = true) {\n         someMethodThatLaunchesACoroutine() // launches a new coroutine\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Pairs in Kotlin using Kotest\nDESCRIPTION: Generates Pair instances where each value of the pair is drawn from the two provided Arbs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_37\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.pair(arb1, arb2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Use Kotest HTML Reporter\nDESCRIPTION: Gradle task configuration that disables Gradle's built-in HTML and JUnit XML reports while setting up the system property for the build directory used by Kotest reporters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/html_reporter.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  useJUnitPlatform()\n  reports {\n    html.required.set(false)\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Spring Extension Per Test Class\nDESCRIPTION: Demonstrates how to register the SpringExtension for a specific test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/spring.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : FunSpec() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Using File Path Type Matchers in KoTest\nDESCRIPTION: Examples of testing if file paths are absolute or relative using KoTest matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nFile(\"/usr/home/sam\") should beAbsolute()\nFile(\"spark/bin\") should beRelative()\n```\n\n----------------------------------------\n\nTITLE: Tagging a Spec Class in Kotest\nDESCRIPTION: This snippet shows how to tag an entire spec class using the @Tags and @RequiresTag annotations in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/tags.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Tags(\"Linux\")\nclass MyTestClass : FunSpec({\n\n  tags(UnitTest)\n\n  beforeSpec { println(\"Before\") }\n\n  test(\"A\").config(tags = setOf(Mysql)) {}\n  test(\"B\").config(tags = setOf(Postgres)) {}\n  test(\"C\") {}\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Timeout in Kotest\nDESCRIPTION: Example of setting a timeout for a test case using the config function, which applies the timeout to all invocations of the test.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds) { }\n```\n\n----------------------------------------\n\nTITLE: Using plusOrMinus with Percentage in Kotlin\nDESCRIPTION: Example demonstrating how to use the plusOrMinus extension function with percentage values for double comparison in Kotest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n1.0.plusOrMinus(10.percent)\n```\n\n----------------------------------------\n\nTITLE: Using 'it' Without 'describe' Block in Kotlin Tests\nDESCRIPTION: Adds functionality to use 'it' for creating tests outside of a 'describe' block, allowing for more flexible test structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nAdd functionality to use 'it' without surrounding 'describe'\n```\n\n----------------------------------------\n\nTITLE: Single Instance Example in Kotest\nDESCRIPTION: Example showing how SingleInstance mode reuses the same instance across all test cases, demonstrated with UUID printing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/isolation_mode.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SingleInstanceExample : WordSpec({\n   val id = UUID.randomUUID()\n   \"a\" should {\n      println(id)\n      \"b\" {\n         println(id)\n      }\n      \"c\" {\n         println(id)\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing EnabledCondition for Midnight Testing\nDESCRIPTION: Custom condition implementation that enables tests only at midnight.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.3.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EnabledIfMidnight : EnabledCondition {\n   override fun enabled(specKlass: KClass<out Spec>): Boolean = LocalTime.now().hour == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using Validated Matchers in Kotlin with Kotest and Arrow\nDESCRIPTION: These matchers are used to assert the state and value of Validated types. They can check if a Validated is Valid or Invalid, and verify the contained value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nvalidated.shouldBeValid()\nvalidated.shouldBeValid(v)\nvalidated.shouldBeInvalid()\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Producer with Custom Properties (Kotlin)\nDESCRIPTION: Shows how to create a Kafka producer by accessing the host and port of the embedded Kafka instance and setting up custom properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/kafka.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n   \n   val props = Properties().apply {\n      put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"${embeddedKafkaListener.host}:${embeddedKafkaListener.port}\")\n   }\n   \n   val producer = KafkaProducer<String, String>(props)\n   \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Parallelism in Kotest\nDESCRIPTION: Demonstrates how to set up parallel test execution by overriding the parallelism property in KotestProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/project_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val parallelism = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Kafka and Zookeeper Ports (Kotlin)\nDESCRIPTION: Demonstrates how to create an EmbeddedKafkaListener instance with custom ports for both Kafka and Zookeeper. This allows for fine-grained control over port allocation in test environments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/kafka.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = EmbeddedKafkaListener(kafkaPort = 6005, zookeeperPort = 9005)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Until Function with Duration in Kotest\nDESCRIPTION: This example demonstrates testing a message broker by waiting until a message is received within a 5-second timeout. The predicate is evaluated every second by default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/until.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Test with High Discard Rate (Kotlin)\nDESCRIPTION: Illustrates a property test that would fail due to a high discard rate (approximately 50%) exceeding the default maximum discard percentage of 10%.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/assumptions.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<Int, Int> { a, b ->\n  withAssumptions(a % 2 == 0) {\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode via DSL in Kotest\nDESCRIPTION: Shows how to set isolation mode using Kotest's DSL approach within a WordSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/isolation_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec({\n isolationMode = IsolationMode.SingleInstance\n // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Invocations with Timeout in Kotest DescribeSpec\nDESCRIPTION: Illustrates how to configure a test to run multiple times using the invocations property, and set an invocation timeout.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times and each has a timeout of 60 milliseconds\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: DescribeSpec Example in KotlinTest\nDESCRIPTION: Illustrates DescribeSpec usage with describe, and, and it blocks similar to SpekFramework\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DescribeSpecExample : DescribeSpec() {\n  init {\n    describe(\"some context\") {\n      it(\"test name\") {\n        // test here\n      }\n      describe(\"nested contexts\") {\n        and(\"another context\") {\n          it(\"test name\") {\n            // test here\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Test Enablement with EnabledIf in Kotlin\nDESCRIPTION: Illustrates the use of 'enabledIf' for dynamic test enablement based on a function evaluated at runtime. The example disables tests starting with 'danger' on Fridays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/config_enabled.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: EnabledIf = { !(it.name.testName.startsWith(\"danger\") && isFriday()) }\n\n\"danger Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveSize Collection Matcher in KotlinTest\nDESCRIPTION: Example of using the haveSize matcher to verify collection size in KotlinTest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_45\n\nLANGUAGE: kotlin\nCODE:\n```\nmyCollection should haveSize(4)\n```\n\n----------------------------------------\n\nTITLE: Asserting Thread States in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates an assertion function for thread states in Kotest. It includes a check for whether a thread is blocked.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nthread.shouldBeBlocked()\n```\n\n----------------------------------------\n\nTITLE: Gradle Configuration for Tag Support\nDESCRIPTION: Gradle configuration required to support system properties for tags\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/tags.md#2025-04-13_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    //... Other configurations ...\n    systemProperties = System.properties\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().associate { it.key.toString() to it.value }\n}\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf Mode Example in Kotest\nDESCRIPTION: Demonstrates the InstancePerLeaf isolation mode where a new spec instance is created for each leaf test case, but not for inner contexts. The example shows the execution path and output pattern.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/isolation_mode.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Testing for Pythagorean Triples in Kotest\nDESCRIPTION: Demonstrates the use of Kotest's forAll function for data-driven testing of Pythagorean triples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.3.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n    forAll(\n       PythagTriple(3, 4, 5),\n       PythagTriple(6, 8, 10),\n       PythagTriple(8, 15, 17),\n       PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n        isPythagTriple(a, b, c) shouldBe true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail on Ignored Tests in Kotest\nDESCRIPTION: This code demonstrates how to configure Kotest to treat ignored tests as failures. It sets the failOnIgnoredTests property in the KotestProjectConfig object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/project_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val failOnIgnoredTests = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Lifecycle in Kotlin\nDESCRIPTION: Demonstrates how to set the lifecycle mode for a JDBC Database Container Extension, controlling when the container starts and stops.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcDatabaseContainerExtension(mysql, ContainerLifecycleMode.Spec)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Property Tests in KotlinTest\nDESCRIPTION: Demonstrates how to create property tests that automatically generate test values. The example verifies that concatenating two strings results in a string with the combined length of the originals. The test will run 100 times with random values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n\n  \"String size\" {\n    forAll({ a: String, b: String ->\n      (a + b).length == a.length + b.length\n    })\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core Dependency (Maven)\nDESCRIPTION: Adds the Kotest assertions core dependency to a Maven project for JVM tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-assertions-core-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Example of Tag Annotations Usage\nDESCRIPTION: Demonstrates using @Tags annotation to apply tags at the spec class level and shows how different tests are affected.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/tags.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n@Tags(\"Linux\")\nclass MyTestClass : FunSpec({\n\n  tags(UnitTest)\n\n  beforeSpec { println(\"Before\") }\n\n  test(\"A\").config(tags = setOf(Mysql)) {}\n  test(\"B\").config(tags = setOf(Postgres)) {}\n  test(\"C\") {}\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting KFunction Properties in Kotlin\nDESCRIPTION: Various assertion matchers for KFunction properties in Kotlin, including checking annotations, return types, and function modifiers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nkfunction.shouldHaveAnnotations()\nkfunction.shouldHaveAnnotations(n)\nkfunction.shouldBeAnnotatedWith<T>()\nkfunction.shouldBeAnnotatedWith<T> { block }\nkfunction.shouldHaveReturnType<T>()\nkfunction.shouldBeInline()\nkfunction.shouldBeInfix()\n```\n\n----------------------------------------\n\nTITLE: Integrating Jacoco with Test Task\nDESCRIPTION: This code modifies the test task to finalize with the Jacoco test report task. This ensures that Jacoco reports are generated after tests are run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/integrations/jacoco.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  ...\n  finalizedBy(tasks.jacocoTestReport)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Individual Property Matchers\nDESCRIPTION: Implementation of individual matchers for name, age, and address properties. Each matcher defines its own validation logic and custom error messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/data_class_matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun nameMatcher(name: String) = Matcher<String> {\n  MatcherResult(\n    value == name,\n    { \"Name $value should be $name\" },\n    { \"Name $value should not be $name\" }\n  )\n}\n\nfun ageMatcher(age: Int) = Matcher<Int> {\n  MatcherResult(\n    value == age,\n    { \"Age $value should be $age\" },\n    { \"Age $value should not be $age\" }\n  )\n}\n\nval addressMatcher = Matcher<Address> {\n  MatcherResult(\n    value == Address(\"Warsaw\", \"Test\", \"1/1\"),\n    { \"Address $value should be Test 1/1 Warsaw\" },\n    { \"Address $value should not be Test 1/1 Warsaw\" }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Timer Listener at Test Class Level\nDESCRIPTION: Example showing how to register the TimerListener extension at the test class level using the extensions() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/extensions/examples.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n  extensions(TimerListener)\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding System Environment Variables with withEnvironment\nDESCRIPTION: Demonstrates the use of withEnvironment extension function to temporarily override system environment variables in a test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(\"FooKey\", \"BarValue\") {\n    System.getenv(\"FooKey\") shouldBe \"BarValue\" // System environment overridden!\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Function to Determine Expected Exceptions in 'eventually'\nDESCRIPTION: Shows how to use a predicate function to dynamically determine which exceptions should be suppressed in 'eventually'. This approach provides more flexibility than listing exception types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/eventually.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  expectedExceptions = { it is UserNotFoundException }\n}\n\neventually(config) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selectively Disabling Tests with xit in Kotest DescribeSpec\nDESCRIPTION: Example showing how to selectively disable individual tests by using 'xit' instead of 'it' within an enabled test block in a DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/xmethods.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  describe(\"this block is enabled\") {\n    xit(\"will not run\") {\n      // disabled test\n    }\n    it(\"will run\") {\n       // enabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform in Gradle for Kotest\nDESCRIPTION: Sets up the Gradle test block to use JUnitPlatform for Kotest, including optional test logging configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    useJUnitPlatform()\n    testLogging {\n        events \"FAILED\", \"SKIPPED\", \"STANDARD_OUT\", \"STANDARD_ERROR\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Valid Instances with Konform and Kotest in Kotlin\nDESCRIPTION: Demonstrates how to test that an instance passes validation using Kotest's shouldBeValid matcher. The example validates a UserProfile instance that meets all validation criteria.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/konform.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval alice = UserProfile(\"Alice\", 25)\nvalidateUser shouldBeValid user1\n```\n\n----------------------------------------\n\nTITLE: Tagging All Tests in a FunSpec\nDESCRIPTION: Demonstrates how to apply tags to all tests in a spec using the tags function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tags.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n\n  tags(Linux, Mysql)\n\n  test(\"my test\") { } // automatically marked with the above tags\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Advanced Extensions Table in Markdown\nDESCRIPTION: A markdown table listing various advanced extensions in Kotest, including their names and descriptions. The table covers extensions for constructor manipulation, test and spec interception, display name formatting, execution order customization, and more.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/extensions/advanced.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Extension                     | Description                                                                                                                                |\n|-------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|\n| ConstructorExtension          | Provides custom logic to instantiate spec classes. An example is the Spring extension constructor extension which autowire's spring beans. |\n| TestCaseExtension             | Intercepts calls to a test, can skip a test, override the test result, and modify the coroutine context.                                   |\n| SpecExtension                 | Intercepts calls to a spec, can skip a spec, and modify the coroutine context.                                                             |\n| SpecRefExtension              | Intercepts calls to a spec before it is instantiated. Can skip instantiation.                                                              |\n| DisplayNameFormatterExtension | Can customize the display names of tests used in test output.                                                                              |\n| EnabledExtension              | Can provide custom logic to determine if a test is enabled or disabled.                                                                    |\n| ProjectExtension              | Intercepts calls to the test engine before a project starts.                                                                               |\n| SpecExecutionOrderExtension   | Can sort specs before execution begins to provide a custom spec execution order.                                                           |\n| TagExtension                  | Can provide active tags from arbitrary sources.                                                                                            |\n| InstantiationErrorListener    | Is notified when a spec fails to be instantiated due to some exception.                                                                    |\n| InstantiationListener         | Is notified when a spec is successfully instantiated.                                                                                      |\n| PostInstantiationExtension    | Intercepts specs when they are instantiated, can replace the spec instance and modify coroutine context.                                   |\n| IgnoredSpecListener           | Is notified when a spec is skipped.                                                                                                        |\n| SpecFilter                    | Can provide custom logic to skip a spec.                                                                                                   |\n| TestFilter                    | Can provide custom logic to skip a test.                                                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher with Kotest Assertions\nDESCRIPTION: This code shows how to use the custom haveLength matcher with Kotest's 'should' and 'shouldNot' functions for string assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/custom.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should haveLength(9)\n\"hello bar\" shouldNot haveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec Execution Order in Kotest\nDESCRIPTION: Demonstrates how to set the spec execution order in Kotest's project configuration. The specExecutionOrder property is overridden in a custom configuration class that extends AbstractProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/spec_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig: AbstractProjectConfig() {\n    override val specExecutionOrder = ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Example in Kotlin\nDESCRIPTION: Demonstrates a simple assertion using Kotest's infix function 'shouldBe'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/clues.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nusername shouldBe \"sksamuel\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Assert Softly in Kotest\nDESCRIPTION: Demonstrates how to enable soft assertions globally for all tests by configuring the globalAssertSoftly property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/project_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val globalAssertSoftly = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Timeouts in Kotest\nDESCRIPTION: Demonstrates how to set both overall and per-invocation timeouts for tests in Kotest, useful for controlling test execution time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.1.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds) { }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds,\n                         invocationTimeout = 250.milliseconds,\n                         invocations = 10) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing BehaviorSpec in Kotlin for Kotest\nDESCRIPTION: Example of using BehaviorSpec in Kotest, which follows the BDD style with 'given', 'when', and 'then' keywords. It demonstrates basic usage, nesting with 'and', and disabling tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        `when`(\"I sit on it\") {\n            then(\"I should be able to fly\") {\n                // test code\n            }\n        }\n        `when`(\"I throw it away\") {\n            then(\"it should come back\") {\n                // test code\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        and(\"a witch\") {\n            `when`(\"The witch sits on it\") {\n                and(\"she laughs hysterically\") {\n                    then(\"She should be able to fly\") {\n                        // test code\n                    }\n                }\n            }\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    xgiven(\"this is disabled\") {\n        When(\"disabled by inheritance from the parent\") {\n            then(\"disabled by inheritance from its grandparent\") {\n                // disabled test\n            }\n        }\n    }\n    given(\"this is active\") {\n        When(\"this is active too\") {\n            xthen(\"this is disabled\") {\n               // disabled test\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Field Comparison Matchers in Kotlin\nDESCRIPTION: Matchers for comparing objects by their fields rather than equals() method. Includes options for handling private fields and field exclusions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_37\n\nLANGUAGE: Kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFields(other: T)\nany.shouldBeEqualToComparingFields(other: T, ignorePrivateFields: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Matchers for Assertions in Kotlin\nDESCRIPTION: Showcases various Kotest matchers for different types of assertions, including string operations, case checking, file extensions, and map contents.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n\nuser.email.shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n\ncityMap.shouldContainKey(\"London\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Exhaustive Generator in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a simple Exhaustive generator for single-digit prime numbers using the 'exhaustive()' extension function on a List in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/customgens.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval singleDigitPrimes = listOf(2,3,5,7).exhaustive()\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with Kotest by Test Name Prefix\nDESCRIPTION: Example of using Kotest's test name filter to run only tests that start with 'Foo' in any package. This demonstrates the wildcard functionality of Kotest's filtering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/gradle.md#2025-04-13_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.tests='Foo*'\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers Gradle Dependency\nDESCRIPTION: Gradle dependency configuration for adding Testcontainers support to a Kotest project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Null Value Generation in Kotest\nDESCRIPTION: Generator functions for producing null values mixed with other types. Includes standard and probability-based null generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genslist.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\narb.orNull()\narb.orNull(nullProbability)\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Gradle Plugin to Build Script\nDESCRIPTION: This Kotlin snippet shows how to add the Allure Gradle plugin to the build script. This plugin is used for generating the final Allure report from the collected test data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/allure.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  ...\n  id(\"io.qameta.allure\") version \"2.8.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Testing for Pythagorean Triples in Kotest\nDESCRIPTION: Demonstrates how to use Kotest's forAll function for data-driven testing of Pythagorean triples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.3.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n    forAll(\n       PythagTriple(3, 4, 5),\n       PythagTriple(6, 8, 10),\n       PythagTriple(8, 15, 17),\n       PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n        isPythagTriple(a, b, c) shouldBe true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Long Matchers in Kotlin with Kotest\nDESCRIPTION: Matchers for validating long values in Kotest. Similar to integer matchers, these assertions verify numeric relationships and properties specific to long values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeBetween(x, y)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeLessThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeLessThanOrEqual(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeGreaterThan(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeGreaterThanOrEqual(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeInRange(range)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeEven()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeOdd()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nlong.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Spec Execution in Kotest\nDESCRIPTION: Implements an EnabledCondition to control spec execution based on the current time, demonstrating the use of the EnabledIf annotation in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.3.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EnabledIfMidnight : EnabledCondition {\n   override fun enabled(specKlass: KClass<out Spec>): Boolean = LocalTime.now().hour == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kotest Engine Configuration Properties in Kotlin\nDESCRIPTION: Defines an object containing constant properties used to configure various aspects of the Kotest testing framework. These properties control features like test filtering, timeout settings, parallelism, assertion modes, and classpath scanning behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/config_props.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotest.core.internal\n\nobject KotestEngineProperties {\n\n   const val scriptsEnabled = \"kotest.framework.scripts.enabled\"\n\n   const val dumpConfig = \"kotest.framework.dump.config\"\n\n   /**\n    * Sets the tag expression that determines included/excluded tags.\n    */\n   const val tagExpression = \"kotest.tags\"\n\n   const val excludeTags = \"kotest.tags.exclude\"\n\n   const val includeTags = \"kotest.tags.include\"\n\n   /**\n    * A regex expression that is used to match the test [io.kotest.core.descriptors.Descriptor]'s path\n    * to determine if a test should be included in the test plan or not.\n    */\n   const val filterTests = \"kotest.filter.tests\"\n\n   /**\n    * A regex expression that is used to match the [io.kotest.mpp.bestName] of a class\n    * to determine if a spec should be included in the test plan or not.\n    */\n   const val filterSpecs = \"kotest.filter.specs\"\n\n   const val propertiesFilename = \"kotest.properties.filename\"\n\n   /**\n    * If set to true, then source ref's will not be created for test cases.\n    * This may speed up builds (as the engine will not need to create stack traces to\n    * generate line numbers) but will also reduce functionality in the intellij plugin\n    * (by limiting the ability to drill directly into the test inside a file).\n    */\n   const val disableSourceRef = \"kotest.framework.sourceref.disable\"\n\n   /**\n    * If set to true, disables the use of '!' as a prefix to disable tests.\n    */\n   const val disableBangPrefix = \"kotest.bang.disable\"\n\n   /**\n    * The default [io.kotest.core.spec.IsolationMode] for specs.\n    */\n   const val isolationMode = \"kotest.framework.isolation.mode\"\n\n   /**\n    * The default [io.kotest.core.test.AssertionMode] for tests.\n    */\n   const val assertionMode = \"kotest.framework.assertion.mode\"\n\n   /**\n    * The default parallelism for specs.\n    */\n   const val parallelism = \"kotest.framework.parallelism\"\n\n   /**\n    * The default timeout for test cases.\n    */\n   const val timeout = \"kotest.framework.timeout\"\n\n   /**\n    * The default timeout for the entire test suite.\n    */\n   const val projectTimeout = \"kotest.framework.projecttimeout\"\n\n   const val logLevel = \"kotest.framework.loglevel\"\n\n   /**\n    * The default timeout for each invocation of a test case.\n    */\n   const val invocationTimeout = \"kotest.framework.invocation.timeout\"\n\n   const val concurrentSpecs = \"kotest.framework.spec.concurrent\"\n\n   const val concurrentTests = \"kotest.framework.test.concurrent\"\n\n   /**\n    * Disable scanning the classpath for configuration classes by setting this property to true\n    */\n   const val disableConfigurationClassPathScanning = \"kotest.framework.classpath.scanning.config.disable\"\n\n   /**\n    * Specify a fully qualified name to use for project config.\n    * This class will be instantiated via reflection.\n    */\n   const val configurationClassName = \"kotest.framework.config.fqn\"\n\n   /**\n    * Disable scanning the classpath for listeners with @AutoScan by setting this property to true\n    */\n   const val disableAutoScanClassPathScanning = \"kotest.framework.classpath.scanning.autoscan.disable\"\n\n   const val allowMultilineTestName = \"kotest.framework.testname.multiline\"\n\n   /**\n    *  If set -> filter testCases by this severity level and higher, else running all\n    */\n   const val testSeverity = \"kotest.framework.test.severity\"\n\n   /**\n    * Enable assert softly globally.\n    * */\n   const val globalAssertSoftly = \"kotest.framework.assertion.globalassertsoftly\"\n\n   /**\n    * Appends all tags associated with a test case to its display name.\n    * */\n   const val testNameAppendTags = \"kotest.framework.testname.append.tags\"\n\n   /**\n    * Controls the [io.kotest.core.names.DuplicateTestNameMode] mode.\n    */\n   const val duplicateTestNameMode = \"kotest.framework.testname.duplicate.mode\"\n\n   const val disableJarDiscovery = \"kotest.framework.discovery.jar.scan.disable\"\n}\n```\n\n----------------------------------------\n\nTITLE: Solution: Setup Mocks Before Each Test\nDESCRIPTION: Demonstrates how to set up mocks before each test using the beforeTest listener, ensuring fresh mock instances for each test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/integrations/mocks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    lateinit var repository: MyRepository\n    lateinit var target: MyService\n\n    beforeTest {\n        repository = mockk()\n        target = MyService(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Package Using Kotest Environment Variable\nDESCRIPTION: A command showing how to use environment variables for test filtering in Kotest. This approach works for both Kotlin/JVM and Kotlin/Native targets.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/gradle.md#2025-04-13_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkotest_filter_specs='com.somepackage.*' gradle test\n```\n\n----------------------------------------\n\nTITLE: Null Generators in Kotest\nDESCRIPTION: Generators for producing null values mixed with other arbitrary values. Includes configurable null probability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\narb.orNull()\narb.orNull(nullProbability)\n```\n\n----------------------------------------\n\nTITLE: Unhelpful assertion example in Kotlin with Kotest\nDESCRIPTION: An assertion example that is not helpful when it fails because it doesn't provide enough context about what's being tested or why it failed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/clues.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Generating Constant Values with Kotest Arbitrary\nDESCRIPTION: This snippet shows how to create an arbitrary generator that always returns a constant value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genslist.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.constant(t)\n```\n\n----------------------------------------\n\nTITLE: Composing a Complex Person Matcher in Kotlin\nDESCRIPTION: Creates a composed matcher for a Person by combining the individual matchers for name, age, and address. This demonstrates how to build complex matchers from simpler ones.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/data_class_matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun personMatcher(name: String, age: Int) = Matcher.compose(\n  nameMatcher(name) to Person::name,\n  ageMatcher(age) to Person::age,\n  addressMatcher to Person::address\n)\n```\n\n----------------------------------------\n\nTITLE: Generating ULong Values in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces ULong values within a specified range, including edge cases if within range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.uLong(min, max)\n```\n\n----------------------------------------\n\nTITLE: Basic Koin Integration with Kotest FunSpec\nDESCRIPTION: Example showing basic usage of Koin with Kotest FunSpec, demonstrating dependency injection and test setup with KoinExtension\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/koin.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : FunSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(myKoinModule))\n\n    val userService by inject<UserService>()\n\n    init {\n        test(\"use userService\") {\n            userService.getUser().username shouldBe \"LeoColman\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwable Assertions in Kotlin\nDESCRIPTION: Methods for validating throwable properties including message content, cause presence, and cause type verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_21\n\nLANGUAGE: Kotlin\nCODE:\n```\nthrowable.shouldHaveMessage(message)\nthrowable.shouldHaveCause()\nthrowable.shouldHaveCause { block }\nthrowable.shouldHaveCauseInstanceOf<T>()\nthrowable.shouldHaveCauseOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Environment Variables in Kotest\nDESCRIPTION: Shows how to override multiple environment variables at once using a map or list of pairs with the withEnvironment extension function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(mapOf(\"FooKey\" to \"BarValue\", \"BarKey\" to \"FooValue\")) {\n  // Use FooKey and BarKey\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Arrow Either Types with KoTest Arrow Matchers\nDESCRIPTION: Examples of testing Arrow's Either type using the beRight and beLeft matchers from the kotlintest-assertions-arrow module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nEither.right(\"boo\") should beRight(\"boo\")\nEither.left(\"boo\") should beLeft(\"boo\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Kotest Tests by Name Prefix\nDESCRIPTION: This example shows how to filter Kotest tests based on their name prefix. It executes only tests that start with 'Foo' in any package.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/gradle.md#2025-04-13_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngradle test -Dkotest.filter.tests='Foo*'\n```\n\n----------------------------------------\n\nTITLE: Soft Assertions with Receiver\nDESCRIPTION: Shows the new syntax for performing soft assertions with a receiver object\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.1.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nperson.assertSoftly {\n  name shouldBe \"sam\"\n  age shouldBe 99\n  city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Field Matching with Exclusions in Kotlin\nDESCRIPTION: Demonstrates how to compare objects while excluding specific fields from comparison using shouldBeEqualUsingFields\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/field-matching.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n   val expected = Thing(name = \"apple\", createdAt = Instant.now())\n   val actual = Thing(name = \"apple\", createdAt = Instant.now().plusMillis(42L))\n   expected shouldBeEqualUsingFields {\n      excludedProperties = setOf(Thing::createdAt)\n      actual\n   }\n```\n\n----------------------------------------\n\nTITLE: Security Manager Extension Implementation\nDESCRIPTION: Shows how to override the system security manager using both extension function and listener approaches.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/system.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSecurityManager(myManager) {\n      // Usage of security manager\n    }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n              override fun listeners() = listOf(SecurityManagerListener(myManager))\n\n            init {\n              // Use my security manager\n            }\n\n        }\n```\n\n----------------------------------------\n\nTITLE: Using Custom Port for Embedded Kafka in Kotest\nDESCRIPTION: Demonstrates how to create an instance of EmbeddedKafkaListener with a custom port and use it in a test. This allows for specifying a particular port for the Kafka broker.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/kafka.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaCustomPortTest : FunSpec({\n\n   val listener = EmbeddedKafkaListener(5678)\n   listener(listener)\n\n   test(\"send / receive\") {\n\n      val producer = listener.stringStringProducer()\n      producer.send(ProducerRecord(\"foo\", \"a\"))\n      producer.close()\n\n      val consumer = listener.stringStringConsumer(\"foo\")\n      eventually(10.seconds) {\n         consumer.poll(1000).first().value() shouldBe \"a\"\n      }\n      consumer.close()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Extension Dependency\nDESCRIPTION: Maven/Gradle dependency configuration for adding Koin extension support to Kotest project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/koin.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-extensions-koin:${version}\n```\n\n----------------------------------------\n\nTITLE: Instance Per Leaf Counter Example in Kotest\nDESCRIPTION: Shows variable reset behavior in InstancePerLeaf mode using an atomic counter\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/isolation_mode.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Config Dump in Gradle for Kotest\nDESCRIPTION: This snippet shows how to enable the config dump feature for Kotest by setting a system property in the Gradle test task configuration block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/config_dump.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntest {\n  systemProperty \"kotest.framework.dump.config\", \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: AnnotationSpec Test Example\nDESCRIPTION: Shows how to write tests using AnnotationSpec with JUnit-style @Test annotations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n  @Test\n  fun test1() {\n\n  }\n\n  @Test\n  fun test2() {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Package and Test Name Filters with Kotest\nDESCRIPTION: Example of using both package and test name filters simultaneously with Kotest system properties to execute only tests containing 'Foo' in a specific package.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/gradle.md#2025-04-13_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*' -Dkotest.filter.tests='*Foo*'\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Assertions for Ktor with Gradle\nDESCRIPTION: Gradle dependency configuration required to add Ktor matchers to your Kotest project. This adds the kotest-assertions-ktor module which provides specialized matchers for Ktor response testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-assertions-ktor:${version}\n```\n\n----------------------------------------\n\nTITLE: Generating Character Values with Kotest Arbitrary\nDESCRIPTION: This snippet illustrates how to generate character values using Kotest's arbitrary generators. It includes methods for generating characters from specific ranges and creating character arrays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genslist.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.char(range1, range2,...)\nArb.char(List<CharRange>)\nArb.charArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Null Check Assertion in Kotlin\nDESCRIPTION: A basic null check assertion that produces an unhelpful error message when it fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/clues.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Eventually with Duration in Kotlin\nDESCRIPTION: Simple example showing how to use the 'eventually' function with a duration parameter of 5 seconds to test an operation that should eventually pass.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/eventually.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\neventually(5.seconds) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Map for Custom Test Names in Kotest\nDESCRIPTION: This snippet demonstrates how to use a map to specify custom test names in data-driven testing, where the key is the test name and the value is the input for that test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/test_names.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData(\n    mapOf(\n      \"3, 4, 5\" to PythagTriple(3, 4, 5),\n      \"6, 8, 10\" to PythagTriple(6, 8, 10),\n      \"8, 15, 17\" to PythagTriple(8, 15, 17),\n      \"7, 24, 25\" to PythagTriple(7, 24, 25)\n    )\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Discard Percentage in Kotest Property Tests\nDESCRIPTION: Demonstrates how to increase the allowed discard rate in Kotest property tests using the maxDiscardPercentage configuration option.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/assumptions.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<Int, Int>(PropTestConfig(maxDiscardPercentage = 55)) { a, b ->\n  withAssumptions(a % 2 == 0) {\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding System Properties in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use the withSystemProperty extension function to temporarily override system properties for testing purposes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSystemProperty(\"foo\", \"bar\") {\n  System.getProperty(\"foo\") shouldBe \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting ZonedDateTime in Kotest\nDESCRIPTION: Assertion functions for validating ZonedDateTime objects in Kotest tests, including today check and instant equality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nzonedDateTime.shouldBeToday()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nzonedDateTime.shouldHaveSameInstantAs(other: ZonedDateTime)\n```\n\n----------------------------------------\n\nTITLE: Basic Property Test Without Assumptions in Kotest (Kotlin)\nDESCRIPTION: Shows a basic property test in Kotest that checks if the Levenshtein distance between two strings is greater than zero. This test may fail for equal strings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/assumptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Per Leaf Counter Example in Kotest\nDESCRIPTION: Example demonstrating state handling in InstancePerLeaf mode using a counter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/isolation_mode.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying @EnabledIf Conditional Execution in Kotlin Kotest\nDESCRIPTION: Shows how to apply the @EnabledIf annotation with a custom condition to multiple test specifications. This example demonstrates applying the LinuxOnlyCondition to different test classes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/annotations.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest1 : FunSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest2 : DescribeSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyWindowsTests : DescribeSpec() {\n  // tests here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest to Fail on Empty Test Suite in Kotlin\nDESCRIPTION: This code snippet demonstrates how to configure a Kotest project to fail when no tests are executed in a module. This is implemented by setting the failOnEmptyTestSuite property to true in the ProjectConfig class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/fail_on_empty.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val failOnEmptyTestSuite = true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency in Maven\nDESCRIPTION: Adds the Kotest property testing library as a test dependency in a Maven pom.xml file. This enables property-based testing in Maven JVM projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating a Konform Validator\nDESCRIPTION: Defines a validation object for the UserProfile class with rules for fullName length and age range constraints.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/konform.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval validateUser = Validation<UserProfile> {\n  UserProfile::fullName {\n     minLength(4)\n     maxLength(100)\n  }\n\n  UserProfile::age ifPresent {\n     minimum(21)\n     maximum(99)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Koin Integration with Root Lifecycle Mode\nDESCRIPTION: Example demonstrating Koin integration with DescribeSpec using Root lifecycle mode, which allows sharing context across nested tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/koin.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : DescribeSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(module = myKoinModule, mode = KoinLifecycleMode.Root))\n\n    val userService by inject<UserService>()\n\n    init {\n        describe(\"use userService\") {\n            it(\"inside a leaf test\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n            it(\"this shares the same context\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WireMock Per-Test Configuration\nDESCRIPTION: Example demonstrating WireMockListener configuration to restart the WireMockServer for each individual test. The server is started before and stopped after each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/wiremock.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_TEST))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n  //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Single Instance Mode Example in Kotest\nDESCRIPTION: Example showing how SingleInstance mode works with shared state across test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/isolation_mode.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SingleInstanceExample : WordSpec({\n   val id = UUID.randomUUID()\n   \"a\" should {\n      println(id)\n      \"b\" {\n         println(id)\n      }\n      \"c\" {\n         println(id)\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: General Container Setup with Docker Image\nDESCRIPTION: Example of setting up a general TestContainer using a Docker image.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval container = install(TestContainerExtension(\"redis:5.0.3-alpine\")) {\n  startupAttempts = 1\n  withExposedPorts(6379)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Timeout in Kotest FunSpec\nDESCRIPTION: Shows how to apply a timeout to all tests within a spec file using milliseconds duration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   timeout = 100.milliseconds\n\n   test(\"this test will timeout quickly!\") {\n      // test here\n   }\n\n   test(\"so will this one!\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Test Output Format Example\nDESCRIPTION: Shows the resulting test output format when displayFullTestPath is enabled, displaying the full path of nested tests including the class name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/output.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMyTests. describe 1 - test 1\nMyTests. describe 1 - test 2\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Classes with Improved Diff Output in Kotest\nDESCRIPTION: Example showing how data class comparison works with the new highlighted diff feature that shows exactly which properties differ in the output.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = Foo(\"hello\", true, 1.0)\nval b = Foo(\"world\", true, 1.3)\na shouldBe b\n```\n\n----------------------------------------\n\nTITLE: Generating Random Emails with Kotest Arbitrary\nDESCRIPTION: Uses Arb.email(localPartGen, domainGen) to generate random emails where the local part and domain part are generated by the given generators. Default generators are provided if not specified.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_32\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.email(localPartGen, domainGen)\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Property Arbs Dependency\nDESCRIPTION: Maven dependency required to use the additional arbitrary generators in Kotest property testing. The version should be replaced with the latest release version.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/extra_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.kotest.extensions:kotest-property-arbs:version\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit Platform in Kotlin\nDESCRIPTION: Sets up the Gradle test block to use JUnitPlatform for KotlinTest 3.1.x. Includes optional test logging configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\ntest {\n    useJUnitPlatform()\n    testLogging {\n        events \"FAILED\", \"SKIPPED\", \"STANDARD_OUT\", \"STANDARD_ERROR\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Property-Based Testing with Kotest in Kotlin\nDESCRIPTION: Shows how to use property-based testing in Kotest to generate test data automatically and verify properties across multiple inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n  \"String size\" {\n    checkAll<String, String> { a, b ->\n      (a + b) shouldHaveLength a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Project-wide Timeouts in Kotest\nDESCRIPTION: This snippet shows how to set project-wide test and invocation timeouts using Kotest's AbstractProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/timeouts/test_timeouts.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig {\n    override val timeout = 100.milliseconds\n    override val invocationTimeout = 33.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Tests with X-Variants in FunSpec\nDESCRIPTION: Shows how to disable tests using the new x-prefix functionality in FunSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.1.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFunSpec : FunSpec({\n  xtest(\"a disabled test\") {\n    // this test will not be invoked\n  }\n  xcontext(\"this context is disabled\") {\n     test(\"and so this test is by extension\") {\n     }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Global Isolation Mode Configuration in Kotest\nDESCRIPTION: Example of setting global isolation mode through project configuration\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/isolation_mode.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig: AbstractProjectConfig() {\n   override val isolationMode = IsolationMode.InstancePerLeaf\n}\n```\n\n----------------------------------------\n\nTITLE: Using Person Matcher\nDESCRIPTION: Demonstrates how to use the composed Person matcher with success and failure cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/composed_matchers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nPerson(\"John\", 21, Address(\"Warsaw\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21)\nPerson(\"Sam\", 22, Address(\"Chicago\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21) // would fail\n```\n\n----------------------------------------\n\nTITLE: Using DescribeSpec in KotlinTest for Spek-like testing\nDESCRIPTION: Example of DescribeSpec which provides a testing style similar to SpekFramework using 'describe', 'and', and 'it' keywords. This facilitates migration from SpekFramework to KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DescribeSpecExample : DescribeSpec() {\n  init {\n    describe(\"some context\") {\n      it(\"test name\") {\n        // test here\n      }\n      describe(\"nested contexts\") {\n        and(\"another context\") {\n          it(\"test name\") {\n            // test here\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Dependency for JVM/Gradle in Kotlin\nDESCRIPTION: This snippet shows how to add the Kotest property testing dependency to a Gradle build file for JVM projects. It includes the testImplementation configuration for the kotest-property artifact.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n   testImplementation(\"io.kotest:kotest-property:$version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Tests with StringSpec in Kotlin\nDESCRIPTION: Example showing how to write basic tests using Kotest's StringSpec style. Demonstrates string length and prefix testing using basic matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"length should return size of string\" {\n    \"hello\".length shouldBe 5\n  }\n  \"startsWith should test for a prefix\" {\n    \"world\" should startWith(\"wor\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering TimerListener in a Kotest Test Class (Kotlin)\nDESCRIPTION: This snippet demonstrates how to register the custom TimerListener extension within a specific Kotest test class using the FunSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/extensions/examples.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n  extensions(TimerListener)\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution in Kotest with Kotlin\nDESCRIPTION: Shows how to use the config function in Kotest to fine-tune test execution. The example sets timeout, number of invocations, thread count, and tags for a specific test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/index.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n  \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n    // test here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using containInAnyOrder Matcher in Kotlin for KotlinTest\nDESCRIPTION: Shows how to use the containInAnyOrder matcher for collections in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should containInAnyOrder(4,2,3)\n```\n\n----------------------------------------\n\nTITLE: Testing System.exit Calls in Kotlin with KotlinTest\nDESCRIPTION: Shows how to use the System.exit extension to test if System.exit(Int) is invoked in a function. This extension intercepts calls to System.exit and throws a SystemExitException with the exit code instead of terminating the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SystemExitTest : StringSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n\n    \"System.exit should throw an exception when the listener is added\" {\n      shouldThrow<SystemExitException> {\n        System.exit(123)\n      }.exitCode shouldBe 123\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Locale and Timezone Listener Implementation\nDESCRIPTION: Demonstrates how to use LocaleTestListener and TimeZoneTestListener for locale and timezone testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/system.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n  // In Project or in Spec\n  override fun listeners() = listOf(\n    LocaleTestListener(Locale.FRANCE),\n    TimeZoneTestListener(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\")))\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode via Function Override in Kotest\nDESCRIPTION: Demonstrates how to set the isolation mode by overriding the isolationMode() function in a WordSpec class. This approach is used when working with the class-based test definition style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/isolation_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n  override fun isolationMode() = IsolationMode.SingleInstance\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing with Kotest in Kotlin\nDESCRIPTION: Illustrates how to perform data-driven testing in Kotest using the forAll function and row data structure to test multiple input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/index.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"maximum of two numbers\" {\n    forAll(\n        row(1, 5, 5),\n        row(1, 0, 1),\n        row(0, 0, 0)\n    ) { a, b, max ->\n      Math.max(a, b) shouldBe max\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Kotest JUnit5 runner dependency to a Gradle project. It's required for running Kotest tests on the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/setup.mdx#2025-04-13_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-runner-junit5:$version'\n```\n\n----------------------------------------\n\nTITLE: Installing Robolectric Extension for Kotest\nDESCRIPTION: Gradle dependency configuration to add the Robolectric extension module to a Kotest project. Uses testImplementation configuration to add the kotest-extensions-robolectric dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/roboelectric.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-extensions-robolectric:${version}\")\n```\n\n----------------------------------------\n\nTITLE: Using New Matchers in KotlinTest 3.1.x\nDESCRIPTION: Demonstrates various new matchers introduced in KotlinTest 3.1.x, including matchers for numbers, collections, files, and URIs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n4 should beEven()\n3 should beOdd()\n3 should beInRange(1..10)\nlistOf(\"a\", \"b\", \"c\") should haveElementAt(1, \"b\")\nfile should beRadable()\nFile(\"/usr/home/sam\") should beAbsolute()\nobj1 should haveSameHashCodeAs(obj2)\n\"hello\" should haveSameLengthAs(\"world\")\nval uri = URI.create(\"https://localhost:443/index.html?q=findme#results\")\nuri should haveScheme(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor HTTP Client\nDESCRIPTION: Example of testing HTTP responses using Ktor client and Kotest assertions. Demonstrates how to verify response status and headers from HTTP client calls.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/ktor.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\nval response = client.post(\"http://mydomain.com/foo\")\nresponse.shouldHaveStatus(HttpStatusCode.OK)\nresponse.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n\n```\n\n----------------------------------------\n\nTITLE: Exhaustive Long Generation in Kotlin with Kotest\nDESCRIPTION: Generates all long values within a given range. Useful for exhaustive testing of functions that operate on a specific range of long integers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.longs(range)\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Dependency with Groovy\nDESCRIPTION: Gradle dependency configuration for adding the Kotest Allure extension to the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/allure.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-allure:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Solution: Adjust IsolationMode for Spec\nDESCRIPTION: Shows how to use IsolationMode.InstancePerTest to create a new instance of the spec for each test, effectively isolating mocks between tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/integrations/mocks.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    isolation = IsolationMode.InstancePerTest\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using NoSystemOutListener Extension in Kotest\nDESCRIPTION: This example demonstrates how to use the built-in NoSystemOutListener extension in Kotest to prevent tests from writing to standard output. The test will fail if any text is printed to stdout.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/extensions/examples.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : DescribeSpec({\n\n    listener(NoSystemOutListener)\n\n    describe(\"All these tests should not write to standard out\") {\n        it(\"silence in the court\") {\n          println(\"boom\") // failure\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Spring Extension in Kotest\nDESCRIPTION: Shows how to register SpringExtension globally in project configuration to enable Spring integration for all test classes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/spring.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Kotest Arbitrary Generators\nDESCRIPTION: Demonstrates how to merge two arbitrary generators for equal sampling, with an example showing probability distribution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genops.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval merged = arbA.merge(arbB)\n\nval a = arbitrary { \"a\" }\nval b = arbitrary { \"b\" }\nval ab = a.merge(b)\n\nprintln(ab.take(1000).groupingBy { it }.eachCount())\n// {a=493, b=507}\n```\n\n----------------------------------------\n\nTITLE: Either Matchers in Kotest Arrow Extension\nDESCRIPTION: Assertion methods for testing Arrow Either types, enabling verification of Left and Right cases with value checking capabilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\neither.shouldBeRight()\neither.shouldBeRight(v)\neither.shouldBeLeft()\neither.shouldBeLeft(v)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Task Dependencies\nDESCRIPTION: Modifies the test task to be finalized by the Jacoco report generation task.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/integrations/jacoco.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  ...\n  finalizedBy(tasks.jacocoTestReport)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Function for Person Matcher\nDESCRIPTION: Extension function to provide a more readable syntax for Person matching using infix notation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/data_class_matchers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Person.shouldBePerson(name: String, age: Int) = this shouldBe personMatcher(name, age)\n```\n\n----------------------------------------\n\nTITLE: Tuple Generation in Kotest\nDESCRIPTION: Generators for creating Pair and Triple instances with values drawn from provided arbitrary generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.pair(arb1, arb2)\nArb.triple(arb1, arb2, arb3)\n```\n\n----------------------------------------\n\nTITLE: Implementing NoSystemOutListener in Kotest\nDESCRIPTION: This snippet demonstrates how to use the NoSystemOutListener extension in a Kotest DescribeSpec. The listener throws an error if any output is written to standard out during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/extensions/examples.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : DescribeSpec({\n\n    listener(NoSystemOutListener)\n\n    describe(\"All these tests should not write to standard out\") {\n        it(\"silence in the court\") {\n          println(\"boom\") // failure\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Time Comparison Matchers in Kotlin with Klock\nDESCRIPTION: Assertion methods for comparing temporal relationships between time instances including before, after, and between comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/klock.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldBeBefore(time)\ntime.shouldBeAfter(time)\ntime.shouldBeBetween(time, time)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec Execution Order in Kotest\nDESCRIPTION: This snippet shows how to set the spec execution order in Kotest by overriding the specExecutionOrder property in the project configuration. The exact ordering strategy is not specified in this snippet and should be defined based on the project's needs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/spec_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig: AbstractProjectConfig() {\n    override val specExecutionOrder = ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Assert Softly in Kotest\nDESCRIPTION: Enables global assert softly mode to batch up multiple assertion failures into a single test failure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/project_config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val globalAssertSoftly = true\n}\n```\n\n----------------------------------------\n\nTITLE: Non-deterministic Testing Functions Table in Markdown\nDESCRIPTION: A markdown table showing the four main functions provided by Kotest for non-deterministic testing, including Eventually for eventual pass conditions, Continually for maintaining pass conditions, Until for predicate validation, and Retry for iteration-based retries.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/nondeterministic_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Role |\n| --- | --- |\n| [Eventually](eventually.md) | Used to ensure that a test will _eventually_ pass within a specified time duration. The test is repeatedly executed until the test passes or the duration expires. |\n| [Continually](continually.md) | Used to ensure that a test _continually_ passes for a period of time. Will repeatedly execute a test until the duration has expired or the test fails.  |\n| [Until](until.md) | Used to ensure that a predicate will eventually hold true within a specified time duration. The predicate is repeatedly executed until true or the duration expires. |\n| [Retry](retry.md) | Used to ensure that a test willi eventually pass within a given number of retries. The test is repeatedly executed until the test passes or the iteration count is reached. |\n```\n\n----------------------------------------\n\nTITLE: Using Generic Contracts in Kotest Matchers\nDESCRIPTION: Demonstrates how to use generic contracts in Kotest matchers for smart casting with shouldBeTypeOf.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.2.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval list: Any = arrayListOf(1, 2, 3)\nlist.shouldBeTypeOf<ArrayList<Int>>()\nlist[0] shouldBe 1 // can only work with a smart case\n```\n\n----------------------------------------\n\nTITLE: Implementing FunSpec Testing Style in Kotest\nDESCRIPTION: The FunSpec style allows creating tests using a 'test' function with a descriptive string and a lambda containing the test code. It's the recommended style for new users and provides context blocks for test organization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    test(\"String length should return the length of the string\") {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Tags in Kotlin\nDESCRIPTION: Shows how to create tag objects by inheriting from Tag class or using NamedTag class for test grouping\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/tags.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval tag = NamedTag(\"Linux\")\n```\n\n----------------------------------------\n\nTITLE: Mock Reset After Tests\nDESCRIPTION: Solution using afterTest listener to reset mock state after each test execution. Maintains the same mock instances but clears their state.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/integrations/mocks.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    afterTest {\n        clearMocks(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: System Property Listener Implementation\nDESCRIPTION: Shows how to use SystemPropertyListener for system property testing at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/system.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n    class MyTest : FreeSpec() {\n\n          override fun listeners() = listOf(SystemPropertyListener(\"foo\", \"bar\"))\n\n        init {\n          \"MyTest\" {\n            System.getProperty(\"foo\") shouldBe \"bar\"\n          }\n        }\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Exceptions in Eventually Function in Kotlin\nDESCRIPTION: This example shows how to configure the 'eventually' function to ignore a specific exception (UserNotFoundException) while waiting for a user to be found in the repository. It waits for up to 5 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"check if user repository has one row\") {\n      eventually(5.seconds, UserNotFoundException::class.java) {\n        userRepository.findBy(1) shouldNotBe null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Library for JVM/Gradle\nDESCRIPTION: Adds the Kotest assertions library dependency for JVM projects using Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions in Kotest\nDESCRIPTION: Demonstrates how to test for expected exceptions and verify their properties using Kotest's exception handling utilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/index.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure in Gradle (Kotlin)\nDESCRIPTION: This code snippet demonstrates how to configure Allure in the Gradle build file. It disables autoconfigure and sets the Allure version.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/allure.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nallure {\n  autoconfigure = false\n  version = \"2.13.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Property Test for String Levenshtein Distance in Kotest\nDESCRIPTION: This snippet shows a basic property test that checks if the Levenshtein distance between two non-equal strings is greater than zero. However, this test may fail when two equal strings are generated.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/assumptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Example Kotest Configuration Dump Output\nDESCRIPTION: Shows the standard output format when configuration dumping is enabled, displaying various Kotest settings including parallelization, timeouts, execution orders, and enabled extensions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/config_dump.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n~~~ Kotest Configuration ~~~\n-> Parallelization factor: 1\n-> Concurrent specs: null\n-> Global concurrent tests: 1\n-> Dispatcher affinity: true\n-> Coroutine debug probe: false\n-> Spec execution order: Lexicographic\n-> Default test execution order: Sequential\n-> Default test timeout: 600000ms\n-> Default test invocation timeout: 600000ms\n-> Default isolation mode: SingleInstance\n-> Global soft assertions: false\n-> Write spec failure file: false\n-> Fail on ignored tests: false\n-> Fail on empty test suite: false\n-> Duplicate test name mode: Warn\n-> Remove test name whitespace: false\n-> Append tags to test names: false\n-> Extensions\n  - io.kotest.engine.extensions.SystemPropertyTagExtension\n```\n\n----------------------------------------\n\nTITLE: Generating Option Instances in Kotest with Arrow\nDESCRIPTION: Examples of generating Option instances using Arrow generators in Kotest. Includes methods for generating exhaustive sets, balanced Some/None instances, and specific Some or None instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.option(a)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.none(a)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.option(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.some(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.none()\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Nested Tests with xit in Kotest\nDESCRIPTION: Example demonstrating how to selectively disable specific nested tests using the 'xit' method while keeping other tests enabled. This allows for granular control over which tests run within a test block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/xmethods.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  describe(\"this block is enabled\") {\n    xit(\"will not run\") {\n      // disabled test\n    }\n    it(\"will run\") {\n       // enabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling failOnEmptyTestSuite in Kotest Project Configuration\nDESCRIPTION: This snippet demonstrates how to enable the failOnEmptyTestSuite option in a Kotest project configuration. When set to true, it causes the build to fail if no tests are executed in a module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/fail_on_empty.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val failOnEmptyTestSuite = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveValue Map Matcher in KotlinTest\nDESCRIPTION: Shows how to use the haveValue matcher to verify that a Map contains a specific value in KotlinTest. The example checks if a map contains the value \"a\".\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveValue(\"a\")\n```\n\n----------------------------------------\n\nTITLE: Null Generators in Kotest\nDESCRIPTION: Generators for producing null-mixed values with optional probability control.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\narb.orNull()\narb.orNull(nullProbability)\n```\n\n----------------------------------------\n\nTITLE: Merging Kotest Arbitraries\nDESCRIPTION: Demonstrates merging two arbitraries for equal sampling probability and shows practical usage with frequency counting.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genops.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval merged = arbA.merge(arbB)\n\nval a = arbitrary { \"a\" }\nval b = arbitrary { \"b\" }\nval ab = a.merge(b)\n\nprintln(ab.take(1000).groupingBy { it }.eachCount())\n// {a=493, b=507}\n```\n\n----------------------------------------\n\nTITLE: Using ConstantNowTestListener for Test-wide Time Control in Kotlin\nDESCRIPTION: Shows how to implement a ConstantNowTestListener that applies to all tests in a test class. This listener ensures that all calls to LocalDateTime.now() will return the same specified time throughout the entire test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/instant.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n  override fun listeners() = listOf(\n    ConstantNowTestListener(foreverNow)\n  )\n```\n\n----------------------------------------\n\nTITLE: BigDecimal Assertions in Kotest\nDESCRIPTION: Assertion functions for BigDecimal type covering precision, scale, comparisons, and range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nbigDecimal.shouldHavePrecision(n)\nbigDecimal.shouldHaveScale(n)\nbigDecimal.shouldBePositive()\nbigDecimal.shouldBeNegative()\nbigDecimal.shouldBeZero()\nbigDecimal.shouldBeLessThan(n)\nbigDecimal.shouldBeLessThanOrEquals(n)\nbigDecimal.shouldBeGreaterThan(n)\nbigDecimal.shouldBeGreaterThanOrEquals(n)\nbigDecimal.shouldBeInRange(r)\n```\n\n----------------------------------------\n\nTITLE: Using Codepoint for String Generation in Kotest\nDESCRIPTION: Code example showing how to generate strings using Codepoint.ascii() vs Codepoint.printableAscii() in Kotest property testing\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.string() // defaults to Codepoint.printableAscii() as of 5.6.2\n\n// To use 5.6.0-5.6.1 behavior:\nArb.string(codepoints = Codepoint.ascii())\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with @Ignored Annotation in Kotest\nDESCRIPTION: Shows how to use the @Ignored annotation to completely disable a test specification. When a spec is ignored, it won't be instantiated, avoiding any expensive setup/teardown operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/annotations.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Ignored\nclass IgnoredSpec : FunSpec() {\n  init {\n    error(\"boom\") // spec will not be created so this error will not happen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Kotlinx DateTime Assertions in Kotlin\nDESCRIPTION: Example showing how to use the new kotlinx-datetime assertions module to verify a datetime's hour value\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.2.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval date = LocalDateTime(2019, 2, 15, 12, 10, 0, 0)\ndate.shouldHaveHour(12)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit XML Reporter in Kotest (Kotlin)\nDESCRIPTION: This Gradle configuration disables the default JUnit XML report generation and sets up the necessary system property for the Kotest JUnit XML reporter. It ensures that Gradle uses JUnit Platform for test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/junit_xml.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") {\n  useJUnitPlatform()\n  reports {\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Using No System Output Listeners\nDESCRIPTION: Example of using listeners that prevent code from writing to System.out and System.err, useful for ensuring proper logger usage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow Optics Extension\nDESCRIPTION: Additional dependency required for using Arrow Optics with Kotest property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nio.arrow-kt:arrow-optics:arrow-version\n```\n\n----------------------------------------\n\nTITLE: Inline Complex Assertions\nDESCRIPTION: Alternative inline syntax for multiple assertions in assumptions\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/assumptions.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume {\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Directories in Kotest Tests\nDESCRIPTION: Shows how to use the 'tempdir()' function in a Kotest FunSpec to create a temporary directory. Similar to temporary files, Kotest will handle the cleanup of the directory after all tests in the Spec have run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/tempfile.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val dir = tempdir()\n\n   test(\"a temporary dir dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating General Container with Docker Image in Kotlin\nDESCRIPTION: Shows how to create a general container using a Docker image name with TestContainerExtension in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval container = install(TestContainerExtension(\"redis:5.0.3-alpine\")) {\n  startupAttempts = 1\n  withExposedPorts(6379)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Comparison in Kotlin\nDESCRIPTION: Defines a sample data class 'Foo' with three properties to demonstrate improved data class comparison in Kotest 4.1.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.1.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Foo(val a: String, val b: Boolean, val c: Double)\n```\n\n----------------------------------------\n\nTITLE: Setting Allure Build Directory\nDESCRIPTION: Configuration for setting the Allure results directory through system properties in Gradle test task.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/allure.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") { // or \"jvmTest\" etc\n   useJUnitPlatform()\n   systemProperty(\"allure.results.directory\", project.buildDir.toString() + \"/allure-results\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Timezone Codes in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that generates three-letter timezone codes, such as 'BST' or 'EST'. Note that it doesn't include all possible timezones and is intended for sampling data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_26\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.timezoneCodeThree()\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML-specific Properties with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers focus on HTML-specific attributes and properties, such as id, class, src, and href. They also include assertions for child elements with specific attributes. Part of the kotlintest-assertions-jsoup library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/jsoup.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveId(id)\nelement.shouldHaveClass(class)\nelement.shouldHaveSrc(src)\nelement.shouldHaveHref(href)\nelement.shouldHaveElementWithId(id)\nelement.shouldHaveChildWithClass(id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Eventually with Return Value Predicate in Kotlin\nDESCRIPTION: Example showing how to use a predicate function to evaluate the return value of each test iteration, allowing the test to continue until the expected value is produced.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/concurrency/eventually.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nvar string = \"x\"\n\neventually({\n  duration = 5.seconds()\n  predicate = { it.result == \"xxx\" }\n}) {\n  string += \"x\"\n  string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Files in Kotest Tests\nDESCRIPTION: Demonstrates how to use the 'tempfile()' function in a Kotest FunSpec to create a temporary file for testing purposes. Kotest automatically handles the cleanup of this file after all tests in the spec have run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/tempfile.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val file = tempfile()\n\n   test(\"a temporary file dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Dependency for Multiplatform in Kotlin\nDESCRIPTION: This snippet shows how to add the Kotest property testing dependency to a Kotlin Multiplatform project. It demonstrates adding the dependency to the commonTest sourceset in the Gradle build file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/index.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-property:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JVM Arguments for JDK17 Compatibility\nDESCRIPTION: Configuration required in Gradle build file to make withEnvironment work with JDK17 by adding necessary JVM arguments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n    jvmArgs(\"--add-opens=java.base/java.util=ALL-UNNAMED\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Comparison Options in Kotlin\nDESCRIPTION: Example of using CompareJsonOptions to customize JSON comparison behavior with inline options specification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/json/content.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldEqualJson(b, compareJsonOptions { arrayOrder = ArrayOrder.Strict })\n```\n\n----------------------------------------\n\nTITLE: Using Inline Multiple Assertions in Kotest Assumptions\nDESCRIPTION: This snippet demonstrates the inline syntax for using multiple assertions within an assumption in Kotest. It ensures that the input strings are not equal and have the same length before checking their Levenshtein distance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/assumptions.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume {\n    a shouldNotBe b\n    a shouldHaveLength (b.length)\n  }\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Iteration Count in Kotlin Property Tests\nDESCRIPTION: Demonstrates how to override the default iteration count globally and shows usage in property tests. The example compares directly specified iteration counts versus the global default.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/globalconfig.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nPropertyTesting.defaultIterationCount = 123\n\n// will use 555 iterations specified in the test\nforAll<String, String>(555) { a,b -> a + b == \"$a$b\" }\n\n// will use 123 iterations from the global default\nforAll<String, String> { a,b -> a + b == \"$a$b\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle with Kotlin DSL for Kotest Tag Properties\nDESCRIPTION: Kotlin Gradle DSL configuration to ensure system properties are correctly passed to the JVM for tag-based test filtering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/tags.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().associate { it.key.toString() to it.value }\n}\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf Isolation Mode with Counter in Kotest\nDESCRIPTION: Demonstrates variable state in InstancePerLeaf mode using an AtomicInteger counter. Shows that the counter is reset between leaf tests but maintained within the same context path.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/isolation_mode.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Redirect Link for Kotest Listeners\nDESCRIPTION: A markdown link redirecting users from the listeners page to the extensions documentation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/listeners.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[extensions](./extensions/extensions.md)\n```\n\n----------------------------------------\n\nTITLE: Sequence-based Fake Function in Kotlin\nDESCRIPTION: Shows how to create a fake function using sequences that returns predefined values in order. Demonstrates basic sequence usage with toFunction() extension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/fake_functions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval fakeFunction = sequenceOf(\"yes\", \"no\", \"maybe\").toFunction()\nfakeFunction.next() shouldBe \"yes\"\nfakeFunction.next() shouldBe \"no\"\nfakeFunction.next() shouldBe \"maybe\"\n```\n\n----------------------------------------\n\nTITLE: Installing Robolectric Extension for Kotest\nDESCRIPTION: Gradle dependency configuration to add Robolectric support to a Kotest project. Requires specifying the kotest-extensions-robolectric dependency in the build.gradle file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/roboelectric.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-extensions-robolectric:${version}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom BlockHound Integration\nDESCRIPTION: Shows how to create a custom BlockHoundIntegration class to whitelist specific blocking calls that are considered harmless. This example allows blocking calls within the LoggerFactory's initialization method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/blockhound.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport reactor.blockhound.BlockHound\nimport reactor.blockhound.integration.BlockHoundIntegration\n\nclass MyBlockHoundIntegration : BlockHoundIntegration {\n   override fun applyTo(builder: BlockHound.Builder): Unit = with(builder) {\n      allowBlockingCallsInside(\"org.slf4j.LoggerFactory\", \"performInitialization\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Isolation Mode in Kotest\nDESCRIPTION: Isolation mode has been added to provide finer control over the instances in which tests execute, allowing for better management of test isolation and shared resources.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyIsolatedTest : StringSpec({\n  isolation = IsolationMode.InstancePerLeaf\n\n  \"test 1\" {\n    // This test runs in its own instance\n  }\n\n  \"test 2\" {\n    // This test runs in a separate instance\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Testcontainers per Test in Kotest\nDESCRIPTION: Example of integrating Testcontainers with Kotest using the per-test lifecycle, which restarts the container between tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perTest())\n```\n\n----------------------------------------\n\nTITLE: Legacy Configuration Syntax in Kotest\nDESCRIPTION: Demonstrates the old (deprecated) way of applying configuration to tests in Kotest 3.0.x, where config was applied after the test body definition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n\"this is a test\" {\n}.config(...)\n```\n\n----------------------------------------\n\nTITLE: Asserting Absolute Coverage Counts in Kotest Property Tests\nDESCRIPTION: Demonstrates how to validate that generated values meet minimum absolute count requirements using withCoverageCounts function instead of percentages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/statistics.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoverageCounts(mapOf(RoundingMode.HALF_DOWN to 75, RoundingMode.FLOOR to 75)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Character Generation in Kotest\nDESCRIPTION: Methods for generating character values and arrays in Kotest, supporting multiple character ranges and array generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.char(range1, range2,...)\nArb.char(List<CharRange>)\nArb.charArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Installing kotest-assertions-compiler Extension in Gradle\nDESCRIPTION: Gradle dependency configuration to add the kotest-assertions-compiler extension to a project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/compiler.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-assertions-compiler:${version}\")\n```\n\n----------------------------------------\n\nTITLE: Assertion Mode Error Output Example (Plain Text)\nDESCRIPTION: This snippet shows the error output when a test fails due to lack of assertions when Assertion Mode is enabled.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/assertion_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTest 'this test has no assertions' did not invoke any assertions\n```\n\n----------------------------------------\n\nTITLE: Testcontainers Integration Example\nDESCRIPTION: Demonstrates how to integrate Testcontainers with Kotest using the new perTest() and perSpec() lifecycle methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.1.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perTest())\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perSpec())\n```\n\n----------------------------------------\n\nTITLE: Registering Embedded Kafka Listener in Kotest FunSpec (Kotlin)\nDESCRIPTION: Demonstrates how to register the embeddedKafkaListener in a Kotest FunSpec class. This listener starts an embedded Kafka instance for the duration of the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/kafka.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n  listener(embeddedKafkaListener)\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec() {\n  init {\n    listener(embeddedKafkaListener)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AllureTestReporter in Kotest Project Config\nDESCRIPTION: This Kotlin code demonstrates how to wire in the AllureTestReporter class globally using Kotest's project configuration. It shows the implementation of a custom config class extending AbstractProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/allure.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig {\n    override fun listeners() = listOf(AllureTestReporter())\n}\n```\n\n----------------------------------------\n\nTITLE: Using autoClose in Kotest for Resource Management\nDESCRIPTION: Shows how to use the autoClose feature in Kotest to automatically close resources of type Closeable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AnnotationSpec with Lifecycle Methods in Kotlin\nDESCRIPTION: Shows how to use AnnotationSpec in Kotest, which uses JUnit-style annotations for defining tests and lifecycle methods like @BeforeEach and @Test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/styles.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n    @BeforeEach\n    fun beforeTest() {\n        println(\"Before each test\")\n    }\n\n    @Test\n    fun test1() {\n        1 shouldBe 1\n    }\n\n    @Test\n    fun test2() {\n        3 shouldBe 3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Initialization with Multiple Scripts\nDESCRIPTION: Example of initializing a database container with multiple SQL scripts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcTestContainerExtension(mysql, LifecycleMode.Leaf)) {\n      maximumPoolSize = 8\n      minimumIdle = 4\n      dbInitScripts = listOf(\"/init.sql\", \"/sql-changesets\")\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/JS with Kotest Engine\nDESCRIPTION: Sets up Kotlin/JS targets and adds the Kotest engine dependency to the commonTest source set for JavaScript testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/setup.mdx#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) { // LEGACY or BOTH are unsupported\n      browser() // to compile for the web\n      nodejs() // to compile against node\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Long Number Generation in Kotest\nDESCRIPTION: Collection of Arb functions for generating Long numbers with various constraints including positive and negative variants. Each function includes specific edge cases and supports customizable ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.long(min, max)\nArb.positiveLong(min, max)\nArb.negativeLong(min, max)\n```\n\n----------------------------------------\n\nTITLE: Registering BlockHound Extension in Kotest\nDESCRIPTION: Demonstrates how to register the BlockHound extension in a Kotest test class. It uses the FunSpec test style and includes a test case that calls a function potentially containing blocking code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/blockhound.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@DoNotParallelize\nclass BlockHoundSpecTest : FunSpec({\n   extension(BlockHound())\n\n   test(\"detects for spec\") {\n      blockInNonBlockingContext()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Pitest Extension Dependency in Maven\nDESCRIPTION: Adds the Kotest Pitest extension module to the project's test dependencies in Maven pom.xml configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/pitest.md#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  ... the other Kotest dependencies like kotest-runner-junit5-jvm \n  <dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-pitest</artifactId>\n    <version>${kotest-extensions-pitest.version}</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Registering SpringListener in Kotlin Test Spec\nDESCRIPTION: Shows how to register SpringListener for autowiring tests by overriding the listeners() function in a test spec\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : ParentSpec() {\n    override fun listeners() = listOf(SpringListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Maven Plugin\nDESCRIPTION: Sets up the Pitest Maven plugin configuration with target classes and coverage threshold settings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/pitest.md#2025-04-13_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.pitest</groupId>\n    <artifactId>pitest-maven</artifactId>\n    <version>${pitest-maven.version}</version>\n    <configuration>\n        <targetClasses>...</targetClasses>\n        <coverageThreshold>...</coverageThreshold>\n        ... other configurations as needed        \n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JDK17 Compatibility\nDESCRIPTION: Shows how to configure Gradle to allow the withEnvironment extension to work with JDK17.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n    jvmArgs(\"--add-opens=java.base/java.util=ALL-UNNAMED\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast at Spec Level in Kotest\nDESCRIPTION: This example shows how to enable fail fast for all scopes in a Kotest Spec. By setting failfast to true at the spec level, any test failure will cause all subsequent tests to be skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/fail_fast.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n\n      failfast = true\n\n      context(\"context with fail fast enabled at the spec level\") {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing with Kotest in Kotlin\nDESCRIPTION: Shows how to perform data-driven testing in Kotest using the forAll function to test multiple input combinations efficiently.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/index.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"maximum of two numbers\" {\n    forAll(\n        row(1, 5, 5),\n        row(1, 0, 1),\n        row(0, 0, 0)\n    ) { a, b, max ->\n      Math.max(a, b) shouldBe max\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Tuple Generation in Kotest\nDESCRIPTION: Functions for generating Pair and Triple instances with values drawn from provided arbitrary generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_48\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.pair(arb1, arb2)\nArb.triple(arb1, arb2, arb3)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Ktor Matchers Dependency (Gradle)\nDESCRIPTION: These code snippets show how to add the kotest-assertions-ktor dependency to a project using Gradle, in both Kotlin DSL and Groovy formats. The dependency is required to use the Ktor matchers in Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.kotest.extensions:kotest-assertions-ktor:version\")\n```\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation \"io.kotest.extensions:kotest-assertions-ktor:version\"\n```\n\n----------------------------------------\n\nTITLE: Using haveLength Matcher for Strings in KotlinTest\nDESCRIPTION: Demonstrates the new haveLength matcher for strings in KotlinTest. It shows how to assert the length of a string.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_53\n\nLANGUAGE: kotlin\nCODE:\n```\nsomeString should haveLength(10)\n```\n\n----------------------------------------\n\nTITLE: Using System Property Extension in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the System Property Extension to override system properties in Kotest tests for a specific scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSystemProperty(\"foo\", \"bar\") {\n  System.getProperty(\"foo\") shouldBe \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveLength Matcher in Kotlin with KotlinTest\nDESCRIPTION: Shows how to use the haveLength matcher in KotlinTest for string length assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nsomeString should haveLength(10)\n```\n\n----------------------------------------\n\nTITLE: Nested Focus Example with FunSpec in Kotest\nDESCRIPTION: Shows how focus works with nested tests in FunSpec. When a parent test is focused using f:, all its nested tests will be executed while other parent tests and their nested tests are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/focus.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : FunSpec({\n   context(\"test 1\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n   }\n\n   context(\"f:test 2\") {\n      // this will be executed\n      test(\"foo\") {\n         // this will be executed\n      }\n   }\n\n   context(\"test 3\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Dependency in Gradle\nDESCRIPTION: Shows how to add the Kotest Allure extension dependency to a Gradle build file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/allure.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-allure:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: DateTime Generator Function Examples\nDESCRIPTION: Example function signatures for generating LocalDate, LocalDateTime and Instant types with customizable ranges for various fields.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/date_gens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.date(yearRange)\nArb.datetime(yearRange, hourRange, minuteRange, secondRage)\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Overriding Multiple Environment Variables with Maps\nDESCRIPTION: Shows how to override multiple environment variables at once using a map or a list of pairs with the withEnvironment extension function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(mapOf(\"FooKey\" to \"BarValue\", \"BarKey\" to \"FooValue\")) {\n  // Use FooKey and BarKey\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure in Gradle\nDESCRIPTION: Configuration block for Allure in Gradle build file, setting version and disabling autoconfigure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/allure.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nallure {\n  autoconfigure = false\n  version = \"2.13.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Either Generators in Kotest with Arrow\nDESCRIPTION: Generators for Arrow's Either type, providing functionality to generate Either.Left and Either.Right instances with custom value generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.either(arbL, arbR)\nArb.right(arb)\nArb.left(arb)\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Dependency in Groovy\nDESCRIPTION: Gradle dependency configuration for adding the Kotest Allure extension to your project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/allure.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-allure:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Task to Finalize with Jacoco Report\nDESCRIPTION: Modifies the test task to automatically generate Jacoco reports after tests are completed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/integrations/jacoco.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  ...\n  finalizedBy(tasks.jacocoTestReport)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Valid Objects with Konform and Kotest in Kotlin\nDESCRIPTION: Demonstrates how to test that an object passes validation using Kotest's shouldBeValid matcher with Konform. The example creates a UserProfile instance and asserts that it passes the validation rules.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/konform.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval alice = UserProfile(\"Alice\", 25)\nvalidateUser shouldBeValid user1\n```\n\n----------------------------------------\n\nTITLE: Overriding Locale and Timezone in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to use withDefaultLocale and withDefaultTimeZone extension functions to temporarily change the default Locale and Timezone for testing purposes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/system.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nwithDefaultLocale(Locale.FRANCE) {\n  println(\"My locale is now France! Très bien!\")\n}\n\nwithDefaultTimeZone(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\"))) {\n  println(\"My timezone is now America/Sao_Paulo! Muito bem!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Tests with DescribeSpec in Kotest\nDESCRIPTION: Shows how to create nested tests using the DescribeSpec style, which uses 'describe' for outer tests and 'it' for inner tests. This style is familiar to JavaScript and Ruby developers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/writing_tests.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NestedTestExamples : DescribeSpec({\n\n   describe(\"an outer test\") {\n\n      it(\"an inner test\") {\n        1 + 2 shouldBe 3\n      }\n\n      it(\"an inner test too!\") {\n        3 + 4 shouldBe 7\n      }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using KCallable Matchers in Kotest\nDESCRIPTION: Assertion matchers for KCallable types that verify visibility, modifiers (final, open, abstract), parameter types and names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nkcallable.shouldHaveVisibility(visibility)\nkcallable.shouldBeFinal()\nkcallable.shouldBeOpen()\nkcallable.shouldBeAbstract()\nkcallable.shouldBeSuspendable()\nkcallable.shouldAcceptParameters(parameters)\nkcallable.shouldAcceptParameters(parameters) { block }\nkcallable.shouldHaveParametersWithName(parameters)\nkcallable.shouldHaveParametersWithName(parameters) { block }\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallelism in Kotest\nDESCRIPTION: This snippet demonstrates how to set up parallelism for running specs concurrently in Kotest. It overrides the parallelism property in the KotestProjectConfig object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/project_config.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val parallelism = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Isolation Mode in Project Config for Kotlin\nDESCRIPTION: Shows how to set the global isolation mode in the project configuration for Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/isolation_mode.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig: AbstractProjectConfig() {\n   override val isolationMode = IsolationMode.InstancePerLeaf\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency for JavaScript Target\nDESCRIPTION: Configures a Kotlin multiplatform project with Kotest property testing specifically for the JavaScript target. This enables property-based testing in browser and Node.js environments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching TestResult in Kotlin\nDESCRIPTION: Demonstrates how to match on TestResult instead of the deprecated TestStatus enum in AfterTestListener implementations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_5.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (result) {\n  is TestResult.Success -> ...\n  is TestResult.Error -> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Classes in Kotest\nDESCRIPTION: Demonstrates how to compare two instances of the Foo data class using Kotest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.1.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = Foo(\"hello\", true, 1.0)\nval b = Foo(\"world\", true, 1.3)\na shouldBe b\n```\n\n----------------------------------------\n\nTITLE: Registering Timer Listener Project-Wide\nDESCRIPTION: Example demonstrating how to register the TimerListener extension globally for all tests in a project by implementing AbstractProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/extensions/examples.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyConfig : AbstractProjectConfig() {\n    override fun extensions(): List<Extension> = listOf(TimerListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Arbs in Kotlin\nDESCRIPTION: Shows how to merge two generators so that the resulting elements are equally sampled from both generators. It also mentions Arb.choice and Arb.choose for more complex merging scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genops.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval merged = arbA.merge(arbB)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = arbitrary { \"a\" }\nval b = arbitrary { \"b\" }\nval ab = a.merge(b)\n\nprintln(ab.take(1000).groupingBy { it }.eachCount())\n// {a=493, b=507}\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf Mode with Counter Example\nDESCRIPTION: Demonstrates variable reset behavior in InstancePerLeaf mode using an atomic counter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/isolation_mode.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Based Testing Example\nDESCRIPTION: Shows how to use property based testing to automatically generate test data for string concatenation testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n  \"String size\" {\n    checkAll<String, String> { a, b ->\n      (a + b) shouldHaveLength a.length + b.length\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Pitest Kotest Extension Dependency in Maven\nDESCRIPTION: Adds the Kotest Pitest extension dependency to the Maven POM file for mutation testing support.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/pitest.md#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  ... the other Kotest dependencies like kotest-runner-junit5-jvm \n  <dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-pitest</artifactId>\n    <version>${kotest-extensions-pitest.version}</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Long Value Generation in Kotest\nDESCRIPTION: Methods for generating Long values with various constraints. Includes functions for positive and negative value generation with customizable ranges and edge cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.long(min, max)\nArb.positiveLong(min, max)\nArb.negativeLong(min, max)\n```\n\n----------------------------------------\n\nTITLE: Setting Test-Level Timeout in Kotest FunSpec\nDESCRIPTION: Demonstrates how to set a timeout for an individual test using test config with milliseconds duration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n   test(\"this test will timeout quickly!\").config(timeout = 100.milliseconds) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using the IsStableType Annotation for Data Driven Tests in Kotlin\nDESCRIPTION: IsStableType annotation can be applied to types in data driven tests to make Kotest call toString() on that type when creating test names. This is mentioned in the features section for one of the Kotest releases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@IsStableType\ndata class MyTestData(val value: String)\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging for a Single Test in Kotlin\nDESCRIPTION: This snippet demonstrates how to enable coroutine debugging for a specific test using the 'coroutineDebugProbes' configuration option in a Kotest FunSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineDebugProbes = true) {\n         someMethodThatLaunchesACoroutine() // launches a new coroutine\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable Override in Tests\nDESCRIPTION: Demonstrates how to temporarily override system environment variables within a test scope using withEnvironment extension function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(\"FooKey\", \"BarValue\") {\n    System.getenv(\"FooKey\") shouldBe \"BarValue\" // System environment overridden!\n}\n```\n\n----------------------------------------\n\nTITLE: Testing List Implementation with WordSpec in Kotlin\nDESCRIPTION: This snippet demonstrates how to test a List implementation of IndexedSeq using Kotest's WordSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_factories.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ListTest : WordSpec({\n\n   val empty = List<Int>()\n\n   \"List\" should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using KoinTest with DescribeSpec and Root Lifecycle Mode\nDESCRIPTION: Example of using Koin in a Kotest DescribeSpec with Root lifecycle mode. This configuration makes the Koin context persist across all leaf tests of a root test, allowing for shared mocked declarations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/koin.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : DescribeSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(module = myKoinModule, mode = KoinLifecycleMode.Root))\n\n    val userService by inject<UserService>()\n\n    init {\n        describe(\"use userService\") {\n            it(\"inside a leaf test\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n            it(\"this shares the same context\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Error Output with withClue\nDESCRIPTION: Example of the improved error message displayed when using withClue with a failing assertion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/clues.md#2025-04-13_snippet_5\n\nLANGUAGE: plain\nCODE:\n```\nName should be present\n<null> should not equal <null>\n```\n\n----------------------------------------\n\nTITLE: Using Generator Bind in KotlinTest\nDESCRIPTION: Demonstrates how to use the new bind function for generating random class instances from primitive generators in property-based testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val email: String, val id: Int)\n\nval userGen = Gen.bind(Gen.string(), Gen.positiveIntegers(), ::User)\n\nassertAll(userGen) {\n  it.email shouldNotBe null\n  it.id should beGreaterThan(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Using EmbeddedKafkaListener for Producer and Consumer (Kotlin)\nDESCRIPTION: Demonstrates how to create and use a producer and consumer with the EmbeddedKafkaListener. It shows sending a message with a producer and receiving it with a consumer.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/kafka.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n\n   test(\"send / receive\") {\n\n     val producer = embeddedKafkaListener.stringStringProducer()\n     producer.send(ProducerRecord(\"foo\", \"a\"))\n     producer.close()\n\n     val consumer = embeddedKafkaListener.stringStringConsumer(\"foo\")\n     eventually(10.seconds) {\n       consumer.poll(1000).first().value() shouldBe \"a\"\n     }\n     consumer.close()\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Testing of Levenshtein Distance in Kotlin\nDESCRIPTION: Demonstrates a naive approach to avoid testing equal strings by wrapping the test in an if statement. This method can potentially introduce bugs in more complex scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/assumptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  if (a != b)\n    levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Container with Embedded Zookeeper in Kotlin\nDESCRIPTION: Installs a Kafka container extension with embedded Zookeeper using Testcontainers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n  withEmbeddedZookeeper()\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Array Items Validation\nDESCRIPTION: Demonstrates how to create a schema that ensures array items are unique using the uniqueItems parameter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/json/schema.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval uniqueArray = jsonSchema {\n  array(uniqueItems = true) { number() }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Initialization with Multiple Scripts\nDESCRIPTION: Example of initializing database container with multiple SQL scripts\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcTestContainerExtension(mysql, LifecycleMode.Leaf)) {\n      maximumPoolSize = 8\n      minimumIdle = 4\n      dbInitScripts = listOf(\"/init.sql\", \"/sql-changesets\")\n   }\n```\n\n----------------------------------------\n\nTITLE: Disabling Classpath Scanning in kotest.properties\nDESCRIPTION: Common configuration to disable Kotest's classpath scanning features for improved startup time. These properties are set in the kotest.properties file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/intellij/props.md#2025-04-13_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nkotest.framework.classpath.scanning.config.disable=true\nkotest.framework.classpath.scanning.autoscan.disable=true\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core for Multiplatform\nDESCRIPTION: Adds the core assertions library to a common test source set in a multiplatform project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\n----------------------------------------\n\nTITLE: Long Assertions in Kotest\nDESCRIPTION: Assertions for validating long values and properties in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nlong.shouldBeBetween(x, y)\nlong.shouldBeLessThan(n)\nlong.shouldBeLessThanOrEqual(n)\nlong.shouldBeGreaterThan(n)\nlong.shouldBeGreaterThanOrEqual(n)\nlong.shouldBeInRange(range)\nlong.shouldBeEven()\nlong.shouldBeOdd()\n```\n\n----------------------------------------\n\nTITLE: Koin Integration with Root Lifecycle Mode\nDESCRIPTION: Example demonstrating Koin integration with DescribeSpec using Root lifecycle mode for shared context across nested tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/koin.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : DescribeSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(module = myKoinModule, mode = KoinLifecycleMode.Root))\n\n    val userService by inject<UserService>()\n\n    init {\n        describe(\"use userService\") {\n            it(\"inside a leaf test\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n            it(\"this shares the same context\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Invocation Timeout in DescribeSpec\nDESCRIPTION: Demonstrates how to set a timeout per individual test invocation using invocationTimeout property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times and each has a timeout of 60 milliseconds\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Comparison in Kotest\nDESCRIPTION: Sample data class definition used to demonstrate the improved diff output when comparing data classes in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Foo(val a: String, val b: Boolean, val c: Double)\n```\n\n----------------------------------------\n\nTITLE: Assert Softly with Receiver Example\nDESCRIPTION: Shows the new assertion style using assertSoftly with a receiver object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.1.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nperson.assertSoftly {\n  name shouldBe \"sam\"\n  age shouldBe 99\n  city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting BigDecimal Values in Kotest\nDESCRIPTION: Methods for asserting various properties of BigDecimal values in Kotest, including precision, scale, sign, and range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldHavePrecision(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldHaveScale(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldBePositive()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldBeNegative()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldBeZero()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldBeLessThan(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldBeLessThanOrEquals(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldBeGreaterThan(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldBeGreaterThanOrEquals(n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nbigDecimal.shouldBeInRange(r)\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Tests in Kotest DescribeSpec\nDESCRIPTION: Example of defining nested tests using Kotest's DescribeSpec style. This demonstrates the hierarchical structure that may not display properly in Gradle test reports without additional configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/output.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: DescribeSpec({\n  describe(\"describe 1\"){\n    it(\"test 1\"){}\n    it(\"test 2\"){}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Allure Results Directory in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to set the Allure results directory using a system property in the Gradle test task configuration. This is necessary when not using the Gradle plugin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/allure.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") { // or \"jvmTest\" etc\n   useJUnitPlatform()\n   systemProperty(\"allure.results.directory\", project.buildDir.toString() + \"/allure-results\")\n}\n```\n\n----------------------------------------\n\nTITLE: Collection and Map Matchers in Kotlin\nDESCRIPTION: Various examples of using matchers for collections and maps, including size, content, and key-value assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nsomeString should haveLength(10)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nmyCollection should haveSize(4)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should contain(4)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should containInAnyOrder(4,2,3)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveKey(1)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveValue(\"a\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should contain(1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Locale Generator\nDESCRIPTION: Generates valid Java locale strings in format like en_US or ca_ES_VALENCIA for testing internationalization features.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.locale()\n```\n\n----------------------------------------\n\nTITLE: Testing File Path Types in KotlinTest\nDESCRIPTION: Shows how to verify if a file path is absolute or relative using the beAbsolute and beRelative matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nFile(\"/usr/home/sam\") should beAbsolute()\nFile(\"spark/bin\") should beRelative()\n```\n\n----------------------------------------\n\nTITLE: Configuring JunitXmlReporter in Kotest Project Config\nDESCRIPTION: This snippet shows how to add the JunitXmlReporter to your Kotest project configuration. It demonstrates how to configure the reporter with options for handling container tests, test naming, and output directory specification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/junit_xml.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(\n    JunitXmlReporter(\n      includeContainers = false, // don't write out status for all tests\n      useTestPathAsName = true, // use the full test path (ie, includes parent test names)\n      outputDir = \"../target/junit-xml\" // include to set output dir for maven\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Assumption Syntax in Kotest Property Tests\nDESCRIPTION: Shows an alternative inline syntax for using assumptions in Kotest property tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/assumptions.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  assume(a != b)\n  levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using Matchers as Extension Functions in KotlinTest\nDESCRIPTION: Examples of using matchers as extension functions in KotlinTest, which is the new preferred style for improved IDE discovery and readability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldExist()\n\nlistOf(1, 2).shouldContainNull()\n```\n\n----------------------------------------\n\nTITLE: Generating Random Strings in Kotlin with Kotest\nDESCRIPTION: Uses Arb.string() to generate random printable strings with a specified size range. The function includes edge cases such as empty string, blank string, and unicode string.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.string(range)\n```\n\n----------------------------------------\n\nTITLE: Collecting Multiple Categories of Statistics in Kotest\nDESCRIPTION: Demonstrates how to collect multiple categories of statistics (even/odd and positive/negative) for integers in a single Kotest property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/statistics.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"even_odd\", \"EVEN\")\n    else -> collect(\"even_odd\", \"ODD\")\n  }\n  when {\n    k > 0 -> collect(\"pos_neg\", \"POS\")\n    else -> collect(\"pos_neg\", \"NEG\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Property Test Settings Using AbstractProjectConfig\nDESCRIPTION: Shows how to set global property test configuration before any tests run by using Kotest's AbstractProjectConfig class, which provides lifecycle methods for test setup.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/globalconfig.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestConfig : AbstractProjectConfig() {\n   override suspend fun beforeProject() {\n      PropertyTesting.defaultIterationCount = 123\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generator in Property Test\nDESCRIPTION: Shows how to use an exhaustive generator in a property-based test to verify prime number properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/customgens.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n    \"testing single digit primes\" {\n        checkAll(singleDigitPrimes) { prime ->\n           isPrime(prime) shouldBe true\n           isPrime(prime * prime) shouldBe false\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Composed Password Matcher in Kotlin using Kotest\nDESCRIPTION: This snippet demonstrates how to create a composed matcher for password validation using Kotest's Matcher.all() function. It combines matchers for digit presence and lowercase/uppercase letter presence.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/composed_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval passwordMatcher = Matcher.all(\n   containADigit(), contain(Regex(\"[a-z]\")), contain(Regex(\"[A-Z]\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin\nDESCRIPTION: Sets up Maven Surefire plugin for running JUnit tests with Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/setup.mdx#2025-04-13_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Documentation Links in Markdown\nDESCRIPTION: A chronologically ordered list of blog posts and articles about Kotest, formatted in Markdown. Includes resources from various authors covering topics like data-driven testing, Spring Boot integration, and comparison with other testing frameworks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blogs.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Data-Driven Testing with Kotest (2023)](https://www.baeldung.com/kotlin/kotest-data-driven-testing)\n* [JUnit 5 vs Kotest. Part 2: Parameterise 'Em All](https://test-architect.dev/junit-5-vs-kotest-part-2-parameterisation/)\n* [JUnit 5 vs Kotest. Part 1: Is it the new way we test?](https://test-architect.dev/junit-5-vs-kotest-part-1/)\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoCloseable Resource Management in Kotest StringSpec\nDESCRIPTION: Shows how to use the autoClose function to automatically close resources after tests have completed in a Kotest StringSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Official Kotest Extensions\nDESCRIPTION: A markdown table listing all official extensions maintained by the Kotest team, including their descriptions and documentation links.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Project                               | Description                                                                  |\n|---------------------------------------|------------------------------------------------------------------------------||\n| [Allure](allure.md)                   | Provides output for the allure framework                                     |\n| [HTML Reporter](html_reporter.md)     | Generates HTML reports of test results based on [JUnit XML](junit_xml.md)    |\n| [Instant](instant.md)                 | Override the 'now' context in java.time                                      |\n| [JUnit XML](junit_xml.md)             | Provides output in the JUnit XML format for integration with reporting tools |\n| [Ktor](ktor.md)                       | Provides matchers for Ktor endpoints                                         |\n| [Koin](koin.md)                       | Kotlin DI framework                                                          |\n| [Mockserver](mockserver.md)           | Integrate mockserver HTTP servers with the test lifecycle                    |\n| [Spring](spring.md)                   | Adds support for spring beans in tests and spring test annotations           |\n| [System](system.md)                   | Provides utilities for integrating with System.* functions                   |\n| [Testcontainers](test_containers.md)  | Run docker images as part of a test lifecycle                                |\n| [Wiremock](wiremock.md)               | Provides a mock HTTP server. Project homepage [here](http://wiremock.org/).  |\n```\n\n----------------------------------------\n\nTITLE: Null Generation in Kotest\nDESCRIPTION: Examples of generator syntax for creating null-mixed values in Kotest property tests. Shows both basic null generation and probability-controlled null generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\narb.orNull()\narb.orNull(nullProbability)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporter in Kotest Project Config\nDESCRIPTION: Shows how to configure the JUnit XML Reporter in Kotest Project Config to include full test paths and container tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.2.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override fun listeners(): List<Listener> = listOf(\n     JunitXmlReporter(\n        includeContainers = true, // write out status for all tests\n        useTestPathAsName = true // use the full test path (ie, includes parent test names)\n     )\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Using EnabledIf Annotation with Kotest\nDESCRIPTION: Example of applying the EnabledIf annotation to a test spec for conditional execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.3.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(EnabledIfMidnight::class)\nclass EnabledIfTest : FunSpec() {\n   init {\n      test(\"tis midnight when the witches roam free\") {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Container with Multiple Scripts in Kotlin\nDESCRIPTION: Demonstrates how to initialize a database container using multiple init scripts in the JdbcTestContainerExtension configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds: DataSource = install(JdbcDatabaseContainerExtension(mysql)) {\n      maximumPoolSize = 8\n      minimumIdle = 4\n      dbInitScripts = listOf(\"/init.sql\", \"/sql-changesets\")\n   }\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Test Factory for IndexedSeq\nDESCRIPTION: Implementation of a reusable test factory function that generates tests for any IndexedSeq implementation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_factories.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> indexedSeqTests(name: String, empty: IndexedSeq<T>) = wordSpec {\n   name should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Allure Extension Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Kotest Allure extension dependency to a Gradle build file. It includes the dependency string and Maven Central badge for the latest release.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/allure.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-allure:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Registering SpringListener in KotlinTest Spec\nDESCRIPTION: Shows how to register SpringListener for dependency injection in a test spec by overriding the listeners() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : ParentSpec() {\n    override fun listeners() = listOf(SpringListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Eventually Configuration\nDESCRIPTION: Example of creating reusable configuration objects for different test scenarios with custom logging per test suite.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/concurrency/eventually.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = EventuallyConfig<ServerResponse>(\n  duration = 5.minutes,\n  interval = 25.milliseconds.fibonacci(),\n  suppressExceptions = setOf(ServerException::class)\n)\n\nclass FooTests : StringSpec({\n  val logger = logger(\"FooTests\")\n  val fSlow = slow.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") })\n\n  \"server eventually provides a result for /foo\" {\n    eventually(fSlow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : StringSpec({\n  val logger = logger(\"BarTests\")\n  val bFast = fast.copy(listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") })\n\n  \"server eventually provides a result for /bar\" {\n    eventually(bFast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Option Type Matchers\nDESCRIPTION: Demonstrates matchers for Arrow's Option type, allowing validation of Some and None cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nval option = Option.pure(\"foo\")\noption should beSome(\"foo\")\n\nval none = None\nnone should beNone()\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Maven Plugin\nDESCRIPTION: Sets up the Maven Pitest plugin configuration including target classes and coverage threshold settings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/pitest.md#2025-04-13_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.pitest</groupId>\n    <artifactId>pitest-maven</artifactId>\n    <version>${pitest-maven.version}</version>\n    <configuration>\n        <targetClasses>...</targetClasses>\n        <coverageThreshold>...</coverageThreshold>\n        ... other configurations as needed\n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Reporter with Project Config in Kotlin\nDESCRIPTION: Implementation of ProjectConfig class to set up HTML reporting by adding HtmlReporter and JunitXmlReporter extensions. The JunitXmlReporter is configured to exclude containers and use test paths as names, while HtmlReporter uses default settings to generate HTML reports in the build directory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/html_reporter.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override val specExecutionOrder = SpecExecutionOrder.Annotated\n\n    override fun extensions(): List<Extension> = listOf(\n        JunitXmlReporter(\n            includeContainers = false,\n            useTestPathAsName = true,\n        ),\n        HtmlReporter()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kotest Property Testing for JavaScript Target\nDESCRIPTION: Shows how to add Kotest property testing specifically to a JavaScript target in a Kotlin Multiplatform project. This configuration targets both browser and Node.js environments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/index.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Person and Address\nDESCRIPTION: Data class definitions for Person and Address that will be used in the matcher examples. The Person class contains basic personal information and an Address instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/data_class_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(\n  val name: String,\n  val age: Int,\n  val address: Address,\n)\n\ndata class Address(\n  val city: String,\n  val street: String,\n  val buildingNumber: String,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SpringTestLifecycleMode in Kotest Project Config\nDESCRIPTION: This snippet demonstrates how to configure the SpringTestLifecycleMode to fire test method callbacks on root nodes instead of leaf nodes in nested spec styles.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/spring.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringTestExtension(SpringTestLifecycleMode.Root))\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Futures with whenReady in Kotest StringSpec\nDESCRIPTION: Demonstrates how to test CompletableFuture results using the whenReady extension function in a Kotest StringSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n\n    \"test a future\" {\n        val f: CompletableFuture<String> = someFuture()\n        f.whenReady {\n            it shouldBe \"wibble\"\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest Isolation Mode Example in Kotlin\nDESCRIPTION: Demonstrates InstancePerTest isolation mode where a new spec instance is created for every test case, including inner contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/isolation_mode.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform in Gradle\nDESCRIPTION: Basic Gradle configuration to enable JUnit platform for KotTest with optional test logging setup.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    useJUnitPlatform()\n}\n\ntest {\n    useJUnitPlatform()\n    testLogging {\n        events \"FAILED\", \"SKIPPED\", \"STANDARD_OUT\", \"STANDARD_ERROR\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions in Kotest\nDESCRIPTION: Demonstrates the new feature in Kotest 4.3.0 that allows chaining of assertions for more concise test code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.3.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval employees: List<Employee> = ...\nemployees.shouldBeSorted()\n          shouldHaveSize(4)\n          shouldContain(Employee(\"Sam\", \"Chicago\"))\n```\n\n----------------------------------------\n\nTITLE: Accessing Spring TestContextManager in Kotest\nDESCRIPTION: Shows how to access the Spring TestContextManager within a Kotest test specification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/spring.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"provide the test context manager\" {\n         println(\"The context is \" + testContextManager().testContext)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating General Container from Docker Image\nDESCRIPTION: Example of using ContainerExtension to create a general-purpose container from a Docker image name, exposing specific ports.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval container = install(ContainerExtension(\"redis:5.0.3-alpine\")) {\n  startupAttempts = 1\n  withExposedPorts(6379)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast at Context Level in Kotest\nDESCRIPTION: Example demonstrating how to enable fail fast for a specific test context in Kotest. When a test fails, all subsequent tests in that context will be skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/fail_fast.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n      context(\"context with fail fast enabled\").config(failfast = true) {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Even and Odd Integer Matchers\nDESCRIPTION: Demonstrates the use of even and odd matchers for integers, showing both positive and negative assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\n4 should beEven()\n3 shouldNot beEven()\n\n3 should beOdd()\n4 shouldNot beOdd()\n```\n\n----------------------------------------\n\nTITLE: Basic Test Definition in Kotest using FunSpec\nDESCRIPTION: Shows how to create a basic test class using FunSpec style. Demonstrates a simple test case with an assertion using shouldBe operator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/writing_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFirstTestClass : FunSpec({\n\n   test(\"my first test\") {\n      1 + 2 shouldBe 3\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Plugin in Gradle\nDESCRIPTION: Gradle configuration for the Pitest plugin, specifying Kotest as the test plugin and setting target classes for mutation testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/pitest.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigure<PitestPluginExtension> {\n    // testPlugin.set(\"Kotest\")    // needed only with old PIT <1.6.7, otherwise having kotest-extensions-pitest on classpath is enough\n    targetClasses.set(listOf(\"my.company.package.*\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Field Matching in Kotlin\nDESCRIPTION: Example of recursive field comparison for nested classes with detailed error messages\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/field-matching.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n         val doctor1 = Doctor(\"billy\", 23, emptyList())\n         val doctor2 = Doctor(\"barry\", 23, emptyList())\n\n         val city = City(\"test1\", Hospital(\"test-hospital1\", doctor1))\n         val city2 = City(\"test2\", Hospital(\"test-hospital2\", doctor2))\n\n         shouldThrowAny {\n            city.shouldBeEqualUsingFields {\n               city2\n            }\n         }.message shouldContain \"\"\"Using fields:\n - mainHospital.mainDoctor.age\n - mainHospital.mainDoctor.name\n - mainHospital.name\n - name\n\nFields that differ:\n - mainHospital.mainDoctor.name  =>  expected:<\"barry\"> but was:<\"billy\">\n - mainHospital.name  =>  expected:<\"test-hospital2\"> but was:<\"test-hospital1\">\n - name  =>  expected:<\"test2\"> but was:<\"test1\">\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Boolean Functions in Kotlin\nDESCRIPTION: An example of property testing using the forAll function with generators, returning a boolean result to verify a property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  forAll(Gen.string(), Gen.string(), { a, b ->\n    (a + b).startsWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using contain Map Key-Value Matcher in KotlinTest\nDESCRIPTION: Example of using the contain matcher to verify a map contains a specific key-value pair in KotlinTest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_50\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should contain(1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Numeric Type Generators in Kotest\nDESCRIPTION: Comprehensive set of generators for different numeric types including Byte, Short, Int, Long, Float, and Double with their unsigned variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.int(min, max)\nArb.positiveInt(min, max)\nArb.long(min, max)\nArb.float(min, max)\nArb.double(min, max)\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec in Kotlin for KotlinTest\nDESCRIPTION: Demonstrates the usage of StringSpec, a new test style in KotlinTest. It allows using strings as the basis for tests and supports configuration options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  init {\n    \"strings.size should return size of string\" {\n      \"hello\".length shouldBe 5\n      \"hello\" should haveLength(5)\n    }\n\n    \"strings should support config\" {\n      \"hello\".length shouldBe 5\n    }.config(invocations = 5)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Available DateTime Generators\nDESCRIPTION: Example generator usage patterns for LocalDate, LocalDateTime, and Instant types. These generators support customizable ranges for date and time components.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/date_gens.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.date(yearRange)\nArb.datetime(yearRange, hourRange, minuteRange, secondRage)\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Using withSecurityManager Extension\nDESCRIPTION: Example of using the withSecurityManager extension function to temporarily override the system security manager in a test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSecurityManager(myManager) {\n  // Usage of security manager\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Tests in Kotlin for KotlinTest\nDESCRIPTION: Shows how to use table tests in KotlinTest. Tables allow specifying combinations of values for testing, useful for edge cases and specific value tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TableExample : StringSpec(), TableTesting {\n  init {\n    \"numbers should be prime\" {\n      val table = table(\n          headers(\"a\", \"b\"),\n          row(5, 5),\n          row(4, 6),\n          row(3, 7)\n      )\n      forAll(table) { a, b ->\n        a + b == 10\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unbounded Shrinking in Kotest Property Test\nDESCRIPTION: This example demonstrates how to configure a property test to use unbounded shrinking. It uses a positive integer generator and sets the shrinking mode to Unbounded in the PropTestConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/shrinking.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll(PropTestConfig(shrinkingMode = ShrinkingMode.Unbounded)) { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf Mode Basic Example\nDESCRIPTION: Shows how InstancePerLeaf mode creates new instances for leaf test cases only.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/isolation_mode.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Allure Build Directory in Gradle\nDESCRIPTION: Gradle task configuration to set the system property for Allure results directory when not using the Gradle plugin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/allure.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") { // or \"jvmTest\" etc\n   useJUnitPlatform()\n   systemProperty(\"allure.results.directory\", project.buildDir.toString() + \"/allure-results\")\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Classes in Kotest\nDESCRIPTION: Demonstrates how to compare two instances of the Foo data class using Kotest's shouldBe assertion, which will now highlight differences in the output.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.1.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = Foo(\"hello\", true, 1.0)\nval b = Foo(\"world\", true, 1.3)\na shouldBe b\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Kotest Tags\nDESCRIPTION: Shows how to configure Gradle to propagate system properties for tag-based test execution in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/tags.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().associate { it.key.toString() to it.value }\n}\n```\n\n----------------------------------------\n\nTITLE: Isolating Tests with Focus Prefix in Kotest StringSpec\nDESCRIPTION: This snippet demonstrates how to use the 'f:' prefix to focus on a single top-level test in a Kotest StringSpec. Only the test prefixed with 'f:' will be executed, while others are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/focus.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining IndexedSeq Interface in Kotlin\nDESCRIPTION: Interface definition for an indexed sequence with basic collection operations like size, add, and contains.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_factories.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface IndexedSeq<T> {\n\n    // returns the size of t\n    fun size(): Int\n\n    // returns a new seq with t added\n    fun add(t: T): IndexedSeq<T>\n\n    // returns true if this seq contains t\n    fun contains(t: T): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Kafka Client Properties\nDESCRIPTION: Shows how to manually configure Kafka client properties using the embedded listener's host and port.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/kafka.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n   \n   val props = Properties().apply {\n      put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"${embeddedKafkaListener.host}:${embeddedKafkaListener.port}\")\n   }\n   \n   val producer = KafkaProducer<String, String>(props)\n   \n})\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Directories in Kotest FunSpec\nDESCRIPTION: Shows how to use the tempdir() function in a Kotest FunSpec to create a temporary directory that will be automatically cleaned up after all tests in the spec have run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/tempfile.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val dir = tempdir()\n\n   test(\"a temporary dir dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Kotest with Maven for JVM Projects\nDESCRIPTION: Configures Maven to use Kotest for JVM testing. Includes Surefire plugin setup and dependency configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-runner-junit5-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Deprecated Default Test Case Configuration in Kotest\nDESCRIPTION: Example of the deprecated way to set default test case configuration in a Kotest spec, using defaultTestCaseConfig. This approach is no longer recommended.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_5.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n    override fun defaultTestCaseConfig() = TestCaseConfig(tags = setOf(Foo, Bar), timeout = 100.seconds)\n    test(\"foo\") {\n      // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spring Constructor Injection in KotlinTest with Kotlin\nDESCRIPTION: Demonstrates the updated Spring extension module that allows for constructor injection in test classes. The SpringAutowireConstructorExtension must be added to ProjectConfig to enable this functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec({\n  \"SpringListener\" should {\n    \"have autowired the service\" {\n      service.repository.findUser().name shouldBe \"system_user\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock Dependency for Kotest\nDESCRIPTION: Maven/Gradle dependency declaration for adding the WireMock extension to a Kotest project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/wiremock.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-wiremock:{version}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Spring Extension in Kotest Project Config\nDESCRIPTION: Demonstrates how to activate the Spring extension globally by registering it in the project configuration class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/spring.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: URI Assertions in Kotest\nDESCRIPTION: Assertion methods for validating URI components including authority, fragment, host, parameters, and scheme.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nuri.shouldHaveAuthority(fragment)\nuri.shouldHaveFragment(fragment)\nuri.shouldHaveHost(scheme)\nuri.shouldHaveParameter(scheme)\nuri.shouldHavePath(scheme)\nuri.shouldHavePort(scheme)\nuri.shouldHaveQuery(fragment)\nuri.shouldHaveScheme(scheme)\n```\n\n----------------------------------------\n\nTITLE: Generating ULong Arrays in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces ULongArrays with specified length and content generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.uLongArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Test Filtering in Build Script\nDESCRIPTION: Example showing how to include tests matching a package pattern in the Gradle build script using the filter block within tasks.test configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/gradle.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.test {\n    filter {\n        //include all tests from package\n        includeTestsMatching(\"com.somepackage.*\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Assertions in Kotest\nDESCRIPTION: Methods for asserting properties of regular expressions, including pattern matching and regex option validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nregex.shouldBeRegex(anotherRegex)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nregex.shouldHavePattern(regexPattern)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nregex.shouldIncludeRegexOptions(regexOptions)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in FunSpec\nDESCRIPTION: Demonstrates how to disable tests and contexts in FunSpec using the 'x' prefix.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.1.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFunSpec : FunSpec({\n  xtest(\"a disabled test\") {\n    // this test will not be invoked\n  }\n  xcontext(\"this context is disabled\") {\n     test(\"and so this test is by extension\") {\n     }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Jacoco in Gradle (Kotlin)\nDESCRIPTION: This code configures Jacoco in the Gradle build file. It sets the tool version and optionally specifies a custom report directory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/integrations/jacoco.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\njacoco {\n    toolVersion = \"0.8.7\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Test Configuration via Property Assignment\nDESCRIPTION: Shows how to set default test configuration using property assignment in the init block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_case_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n\n    defaultTestConfig = TestCaseConfig(enabled = true, invocations = 3)\n\n    test(\"FunSpec should support Spec config syntax in init{} block\") {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom BlockHound Integration\nDESCRIPTION: Shows how to create a custom BlockHound integration to whitelist specific blocking calls that are considered harmless.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/blockhound.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport reactor.blockhound.BlockHound\nimport reactor.blockhound.integration.BlockHoundIntegration\n\nclass MyBlockHoundIntegration : BlockHoundIntegration {\n   override fun applyTo(builder: BlockHound.Builder): Unit = with(builder) {\n      allowBlockingCallsInside(\"org.slf4j.LoggerFactory\", \"performInitialization\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Time Properties in Kotlin with Kotest\nDESCRIPTION: This snippet shows assertion functions for time operations in Kotest. It includes checks for time component comparisons and time ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\ntime.shouldHaveSameMinutesAs(otherTime)\ntime.shouldHaveSameSecondsAs(otherTime)\ntime.shouldHaveSameNanosAs(otherTime)\ntime.shouldBeBefore(otherTime)\ntime.shouldBeAfter(otherTime)\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Kafka Listener with Custom Port in Kotest\nDESCRIPTION: Demonstrates how to create and use an EmbeddedKafkaListener instance with a custom port. It includes an example of sending and receiving a message using this custom instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/kafka.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaCustomPortTest : FunSpec({\n\n   val listener = EmbeddedKafkaListener(5678)\n   listener(listener)\n\n   test(\"send / receive\") {\n\n      val producer = listener.stringStringProducer()\n      producer.send(ProducerRecord(\"foo\", \"a\"))\n      producer.close()\n\n      val consumer = listener.stringStringConsumer(\"foo\")\n      eventually(10.seconds) {\n         consumer.poll(1000).first().value() shouldBe \"a\"\n      }\n      consumer.close()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pythagorean Triple Validation Function in Kotlin\nDESCRIPTION: Defines a function that checks if three integer values form a valid Pythagorean triple by verifying that the sum of squares of the first two values equals the square of the third value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.3.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Property Testing with String Reversal in Kotest\nDESCRIPTION: Illustrates a property test using Kotest's checkAll function, demonstrating the improved shrinking output in failed property tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.1.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String> { a ->\n  a shouldBe a.reversed()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-line Test Names in Kotest\nDESCRIPTION: Illustrates how to define test names over multiple lines in Kotest, which can be stripped of excess whitespace.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.3.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n  init {\n   \"\"\"this is a\n      test spanning multiple lines\"\"\" { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Testing with checkAll in Kotlin\nDESCRIPTION: Shows how to use checkAll function for property testing using assertions. The test passes if no exceptions are thrown during execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/test_functions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      checkAll<String, String> { a, b ->\n         a + b shouldHaveLength a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency with Gradle\nDESCRIPTION: Gradle dependency configuration for adding the Kotest Testcontainers extension to your project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Example Coroutine Dump Output in Kotest\nDESCRIPTION: Shows the format of a coroutine dump that is produced when coroutine debugging is enabled. The dump includes the coroutine's state, creation timestamp, and a detailed stacktrace showing where the coroutine was created and its execution path.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCoroutines dump 2021/11/27 22:17:43\n\nCoroutine DeferredCoroutine{Active}@71f1906, state: CREATED\n\t(Coroutine creation stacktrace)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.async$default(Builders.common.kt:82)\n\tat kotlinx.coroutines.BuildersKt.async$default(Unknown Source)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invokeSuspend(CoroutineDebugTest.kt:37)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invoke(CoroutineDebugTest.kt)\n```\n\n----------------------------------------\n\nTITLE: Kotest Double Extension Function\nDESCRIPTION: Example showing the plusOrMinus extension function on Double that accepts a percentage value instead of an absolute one\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n1.0.plusOrMinus(10.percent)\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest JSON Assertions Dependency\nDESCRIPTION: Maven/Gradle dependency declaration for adding Kotest JSON assertions to a project\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/json/overview.md#2025-04-13_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ntestImplementation(\"io.kotest:kotest-assertions-json:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Multiplatform Plugin for JavaScript\nDESCRIPTION: Adds the Kotest multiplatform Gradle plugin to enable testing in a JavaScript project. This plugin provides the necessary infrastructure for running Kotest tests in JS environments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Kotest Property Testing with Gradle (JVM)\nDESCRIPTION: Gradle dependency configuration for adding Kotest property testing support in a JVM project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n   testImplementation(\"io.kotest:kotest-property:$version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Either Matchers Usage in Kotlin\nDESCRIPTION: Matchers for testing Either types in Arrow. These matchers enable assertions for Right and Left cases, including value verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\neither.shouldBeRight()  // assert either is Right\neither.shouldBeRight(v) // assert either is Right(v)\neither.shouldBeLeft()   // assert either is Left\neither.shouldBeLeft(v)  // assert either is Left(v)\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Object Structure Example\nDESCRIPTION: Example of a JSON object showing name, location and age properties in formatted style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/json.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"sam\",\n   \"location\": \"chicago\",\n   \"age\" : 41\n}\n```\n\n----------------------------------------\n\nTITLE: Android Test Configuration\nDESCRIPTION: Configures Android test options for JUnit Platform\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/quick_start.mdx#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      useJUnitPlatform()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Matchers for ByteArrays in Kotlin\nDESCRIPTION: Matchers for comparing byte arrays against binary resource file contents. Supports both direct comparison and custom matching logic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_39\n\nLANGUAGE: Kotlin\nCODE:\n```\nbyteArray shouldMatchResource \"/path/to/test_resource.bin\"\nbyteArray shouldNotMatchResource \"/path/to/test_resource.bin\"\nbyteArray.shouldMatchResource(\"/path/to/test_resource.bin\", ::providedMatcher)\nbyteArray.shouldNotMatchResource(\"/path/to/test_resource.bin\", ::providedMatcher)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in DescribeSpec with xdescribe and xit\nDESCRIPTION: DescribeSpec provides xdescribe and xit variants to disable specific tests or blocks of tests. This allows for selectively skipping tests while keeping them in the codebase.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : DescribeSpec({\n    describe(\"this outer block is enabled\") {\n        xit(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xdescribe(\"this block is disabled\") {\n        it(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Coverage Counts in Kotest Property Tests\nDESCRIPTION: Demonstrates how to use withCoverageCounts to assert that certain absolute numbers of specific values are generated in a Kotest property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/statistics.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoverageCounts(mapOf(RoundingMode.HALF_DOWN to 75, RoundingMode.FLOOR to 75)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom BlockHound Integration Implementation\nDESCRIPTION: Example of creating a custom BlockHound integration to allow specific blocking calls.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/blockhound.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport reactor.blockhound.BlockHound\nimport reactor.blockhound.integration.BlockHoundIntegration\n\nclass MyBlockHoundIntegration : BlockHoundIntegration {\n   override fun applyTo(builder: BlockHound.Builder): Unit = with(builder) {\n      allowBlockingCallsInside(\"org.slf4j.LoggerFactory\", \"performInitialization\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using containInAnyOrder Collection Matcher in Kotest\nDESCRIPTION: Example of the containInAnyOrder matcher for collections, which verifies that a collection contains all the specified elements in any order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should containInAnyOrder(4,2,3)\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions with Receiver Syntax\nDESCRIPTION: Example of using the new receiver-based assertSoftly feature to make soft assertions more concise when working with a single object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nperson.assertSoftly {\n  name shouldBe \"sam\"\n  age shouldBe 99\n  city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Data Source Example in KotlinTest\nDESCRIPTION: Demonstrates loading test data from CSV files for table testing using CsvDataSource.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CsvDataSourceTest : WordSpec() {\n  init {\n    \"CsvDataSource\" should {\n      \"read data from csv file\" {\n        val source = CsvDataSource(javaClass.getResourceAsStream(\"/user_data.csv\"), CsvFormat())\n        val table = source.createTable<Long, String, String>(\n            { it: Record -> Row3(it.getLong(\"id\"), it.getString(\"name\"), it.getString(\"location\")) },\n            { it: Array<String> -> Headers3(it[0], it[1], it[2]) }\n        )\n        forAll(table) { a, b, c ->\n          a shouldBe gt(0)\n          b shouldNotBe null\n          c shouldNotBe null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporter in Kotest Project Config\nDESCRIPTION: Shows how to set up the JunitXmlReporter in a Kotest project configuration class. This snippet demonstrates adding the reporter as an extension with customizable parameters for handling test containers and test path naming.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/junit_xml.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(\n    JunitXmlReporter(\n      includeContainers = false,\n      useTestPathAsName = true\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest System Extensions Dependency in Kotlin\nDESCRIPTION: Gradle dependency for adding Kotest system extensions to a project. This extension is only available on the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest:kotest-extensions-jvm:${version}\n```\n\n----------------------------------------\n\nTITLE: Using Focus Prefix in StringSpec\nDESCRIPTION: Demonstrates using the f: prefix to execute only a single top-level test in StringSpec, while skipping others. Only the test prefixed with f: will be executed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/focus.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Maps with Kotest Arb\nDESCRIPTION: Functions for generating random maps with specified size ranges and element generators for keys and values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_31\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.map(Arb<Pair<K,V>>, minSize, maxSize)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.map(Arb<K>, Arb<V>, minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Checking Coverage Counts in Kotest Property Tests\nDESCRIPTION: Shows how to use withCoverageCounts to assert that certain values are being generated with a minimum absolute count in a Kotest property test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/statistics.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoverageCounts(mapOf(RoundingMode.HALF_DOWN to 75, RoundingMode.FLOOR to 75)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Tests with Name Function in Kotlin\nDESCRIPTION: Shows how to use a function to generate test names dynamically based on the input data. The name function concatenates the triple values with double underscores.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/test_names.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData<PythagTriple>(\n    nameFn = { \"${it.a}__${it.b}__${it.c}\" },\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chunking Arb Generator Results in Kotlin using Kotest\nDESCRIPTION: Generates lists where each list is populated from elements of this receiver. The size of each chunk is randomly chosen within the given range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_32\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb<T>.chunked(range)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit XML Reporting\nDESCRIPTION: Demonstrates the Gradle configuration required to disable built-in JUnit XML reporting and set up the build directory for the custom reporter. This configuration is essential for proper XML report generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/junit_xml.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") {\n  useJUnitPlatform()\n  reports {\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency in Maven\nDESCRIPTION: Adds the Kotest JUnit5 runner dependency to a Maven project. This is necessary for using Kotest as a test framework with Maven on the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-runner-junit5-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: WireMock Per-Spec Test Configuration\nDESCRIPTION: Example showing how to configure WireMockListener to run a WireMockServer for the entire test specification. The server is started before all tests and stopped after all tests complete.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/wiremock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_SPEC))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n    //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Problematic Mock Reuse in Kotest\nDESCRIPTION: Illustrates an issue where mocks are reused between tests, causing unexpected behavior. This happens due to Kotest's default isolation mode.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/integrations/mocks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n    test(\"Saves to repository as well\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Third-Party Kotest Extensions\nDESCRIPTION: A markdown table listing third-party extensions available for Kotest, including their project links and descriptions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/index.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Project                                                                                          | Description                                                                        |\n|--------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------|\n| [Android](https://github.com/LeoColman/kotest-android)                                           | Toolbox for working with Kotest and Android                                        |\n| [Fluentlenium](https://fluentlenium.io/docs/test-runners/#kotest)                                | FluentLenium integration with Kotest                                               |\n| [H2 Database Extension](https://github.com/LeoColman/kotest-extensions-h2)                       | H2 Database integration with Kotest                                                |\n| [Http4k](https://www.http4k.org/guide/reference/kotest/)                                         | Functional toolkit for Kotlin HTTP applications                                    |\n| [Kotless](https://github.com/LeoColman/kotest-kotless)                                           | Utilties for kotless and kotest                                                    |\n| [KotlinFaker](https://serpro69.github.io/kotlin-faker/extensions/kotest-property-extension/)     | Kotlin-faker data generation extensions for Kotest Property Testing                |\n| [KotlinFixture](https://github.com/appmattus/kotlinfixture/blob/main/fixture-kotest/README.adoc) | generate well-defined, but essentially random, input                               |\n| [LogCapture](https://github.com/jsalinaspolo/logcapture)                                         | LogCapture is a testing library for asserting logging messages                     |\n| [Micronaut](https://github.com/micronaut-projects/micronaut-test)                                | JVM-based, full-stack framework for building modular, easily testable microservice |\n| [Result4s](https://github.com/MrBergin/result4k-kotest-matchers)                                 | Result4s matchers                                                                  |\n| [Selfie](https://www.github.com/diffplug/selfie)                                                 | Snapshot testing (inline, disk, and memoization)                                   |\n| [Sniffy](https://www.sniffy.io/docs/latest/#_integration_with_kotest)                            | Network connectivity testing                                                       |\n| [TestFiles](https://github.com/jGleitz/testfiles)                                                | Creates organized files and directories for testing                                |\n```\n\n----------------------------------------\n\nTITLE: Boolean Generation with Kotest in Kotlin\nDESCRIPTION: Methods for generating boolean values and arrays using both arbitrary and exhaustive generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.boolean()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.booleanArray(length, content)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.boolean()\n```\n\n----------------------------------------\n\nTITLE: Using AnnotationSpec in Kotlin for JUnit-Style Tests\nDESCRIPTION: Shows how to write tests using the AnnotationSpec, which allows JUnit-style tests using the @Test annotation for test methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n  @Test\n  fun test1() {\n\n  }\n\n  @Test\n  fun test2() {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveValue Matcher for Maps in KotlinTest\nDESCRIPTION: Shows how to use the new haveValue matcher for maps in KotlinTest. It demonstrates asserting that a map contains a specific value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_58\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveValue(\"a\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure Settings in Kotlin\nDESCRIPTION: Allure configuration block in Gradle to set the version and disable autoconfigure feature.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/allure.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nallure {\n  autoconfigure = false\n  version = \"2.13.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit Platform in Kotlin\nDESCRIPTION: Setup the Gradle test block to use JUnitPlatform for KotlinTest 3.1.x. This configuration enables JUnit and can include additional test logging.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    useJUnitPlatform()\n    testLogging {\n        events \"FAILED\", \"SKIPPED\", \"STANDARD_OUT\", \"STANDARD_ERROR\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Byte Values with Kotest Arbitrary\nDESCRIPTION: This snippet demonstrates various methods for generating byte values, including signed and unsigned bytes, as well as byte arrays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genslist.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.byte(min, max)\nArb.positiveByte(min, max)\nArb.negativeByte(min, max)\nArb.byteArray(length, content)\nArb.uByte(min, max)\nArb.uByteArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Element Matchers in KotlinTest JSoup\nDESCRIPTION: Assertion functions for individual JSoup elements that verify child tags, text content, and attributes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/jsoup.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nelement.shouldHaveChildWithTag(tag)\nelement.shouldHaveText(text)\nelement.shouldHaveAttribute(name)\nelement.shouldHaveAttributeValue(name, value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest\nDESCRIPTION: Configures how Kotest handles tests that don't use Kotest assertions. Can be set to warn or error when tests lack assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/project_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val assertionMode = AssertionMode.Error\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Classpath Scanning in kotest.properties\nDESCRIPTION: Common use case for kotest.properties: disabling classpath scanning capabilities to improve startup time. These properties should be added to the kotest.properties file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/intellij/props.md#2025-04-13_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nkotest.framework.classpath.scanning.config.disable=true\nkotest.framework.classpath.scanning.autoscan.disable=true\n```\n\n----------------------------------------\n\nTITLE: InstancePerLeaf Counter Example in Kotest\nDESCRIPTION: Demonstrates variable state handling in InstancePerLeaf mode using an atomic counter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/isolation_mode.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Properties in kotest.properties File\nDESCRIPTION: Demonstrates how to set a key-value pair in the kotest.properties file. This file is used to set system properties before test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/intellij/props.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfoo=bar\n```\n\n----------------------------------------\n\nTITLE: Creating Konform Validation Rules\nDESCRIPTION: Defines validation rules for UserProfile using Konform's DSL, including length constraints for name and range constraints for age.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/konform.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval validateUser = Validation<UserProfile> {\n  UserProfile::fullName {\n     minLength(4)\n     maxLength(100)\n  }\n\n  UserProfile::age ifPresent {\n     minimum(21)\n     maximum(99)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Double Arrays in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces DoubleArrays with specified length and content generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.doubleArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Soft Assertions with Receiver in Kotlin\nDESCRIPTION: Shows the new receiver-based syntax for soft assertions in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.1.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval person = ...\nperson.assertSoftly {\n  name shouldBe \"sam\"\n  age shouldBe 99\n  city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Data Class Definition for Pythagorean Triple Testing\nDESCRIPTION: Data class to hold test input values for Pythagorean triple validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.3.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Error Output with Domain Object Clue\nDESCRIPTION: The error message produced when using a domain object as a clue, showing how the object's toString() representation is included in the failure message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nHttpResponse(status=404, body=the content)\nExpected :200\nActual   :404\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Plugin with Kotest in Gradle\nDESCRIPTION: Configuration of the Pitest plugin in Gradle to use Kotest. This sets up target classes for mutation testing and enables Kotest as the test plugin for Pitest versions before 1.6.7.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/pitest.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Assuming that you have already configured the Gradle/Maven extension\nconfigure<PitestPluginExtension> {\n    // testPlugin.set(\"Kotest\")    // needed only with old PIT <1.6.7, otherwise having kotest-extensions-pitest on classpath is enough\n    targetClasses.set(listOf(\"my.company.package.*\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution with EnabledIf in Kotlin\nDESCRIPTION: This snippet shows how to use the 'enabledIf' parameter to conditionally enable or disable tests based on a function that is evaluated at runtime. It includes an example of disabling tests that start with 'danger' on Fridays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/config_enabled.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: EnabledIf = { !(it.name.testName.startsWith(\"danger\") && isFriday()) }\n\n\"danger Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TagExtension in KotlinTest\nDESCRIPTION: Demonstrates how to implement and use a TagExtension to dynamically determine which tags should be active at runtime.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Hadoop : Tag()\n\nobject HadoopTagExtension : TagExtension {\n  override fun tags(): Tags =\n      if (System.getenv().containsKey(\"HADOOP_HOME\")) Tags.include(Hadoop) else Tags.exclude(Hadoop)\n}\n\nobject MyProjectConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(HadoopTagExtension)\n}\n\nobject SimpleTest : StringSpec({\n  \"simple test\" {\n    // this test would only run on environments that have hadoop configured\n  }.config(tags = setOf(Hadoop))\n})\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Matchers for Assertions\nDESCRIPTION: Examples of Kotest's built-in matchers showing various assertion types including string operations, case checking, file extensions, and map contents.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n\nuser.email.shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n\ncityMap.shouldContainKey(\"London\")\n```\n\n----------------------------------------\n\nTITLE: Maven Surefire Plugin Configuration\nDESCRIPTION: Configures Maven Surefire plugin for running JUnit tests\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/quick_start.mdx#2025-04-13_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Receiver-based Soft Assertions in Kotlin\nDESCRIPTION: Shows how to use assertSoftly with a test target as receiver, allowing direct assertions on the target object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/soft_assertions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly(foo) {\n    shouldNotEndWith(\"b\")\n    length shouldBe 3\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest Spec\nDESCRIPTION: This example demonstrates how to configure the assertion mode to Error inside a Kotest spec. When set to Error, Kotest will fail any test that doesn't execute an assertion, helping identify tests that aren't actually testing anything.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/assertion_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec() {\n   init {\n      assertions = AssertionMode.Error\n      test(\"this test has no assertions\") {\n         val name = \"sam\"\n         name.length == 3 // this isn't actually testing anything\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using contain Collection Matcher in KotlinTest\nDESCRIPTION: Example of using the contain matcher to verify a collection contains a specific element in KotlinTest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_46\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should contain(4)\n```\n\n----------------------------------------\n\nTITLE: Unhelpful Null Check Error Output\nDESCRIPTION: Example of the unclear error message displayed when a null check assertion fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/clues.md#2025-04-13_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n<null> should not equal <null>\n```\n\n----------------------------------------\n\nTITLE: Accessing TestContextManager in Kotest Spring Tests\nDESCRIPTION: This code shows how to access the TestContextManager in a Kotest test using the Spring extension. It demonstrates retrieving the test context from within a test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/spring.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"provide the test context manager\" {\n         println(\"The context is \" + testContextManager().testContext)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporter in Kotest Project Config\nDESCRIPTION: Shows how to set up the JunitXmlReporter in a Kotest project configuration class. The reporter can be configured with options for including containers and using test paths as names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/junit_xml.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(\n    JunitXmlReporter(\n      includeContainers = false,\n      useTestPathAsName = true\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Locales in Kotlin using Kotest\nDESCRIPTION: Generates locales in the Java format, such as 'en_US' or 'ca_ES_VALENCIA'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.locale()\n```\n\n----------------------------------------\n\nTITLE: Instance Per Leaf Mode Example in Kotest\nDESCRIPTION: Demonstrates InstancePerLeaf mode where new instances are created only for leaf test cases\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/isolation_mode.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in kotest.properties File\nDESCRIPTION: Example of defining a key-value pair in the kotest.properties file. This file should be located on the classpath (e.g., in src/main/resources) for Kotest to pick up the properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/intellij/props.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfoo=bar\n```\n\n----------------------------------------\n\nTITLE: Implementing PropTestListener in Kotest Property Tests\nDESCRIPTION: Example showing how to create and configure a PropTestListener for property tests using PropTestConfig. The listener implements beforeTest and afterTest hooks that run before and after each property test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.1.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = object : PropTestListener {\n  override suspend fun beforeTest() {\n    println(\"Startup\")\n  }\n\n  override suspend fun afterTest() {\n    println(\"Shutdown\")\n  }\n}\n\nval propConfig = PropTestConfig(listeners = listOf(listener))\n\ncheckAll<String, String>(10, propConfig) { a, b ->\n  a.length + b.length shouldBe (a + b).length\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JSON Comparison Function in Kotlin\nDESCRIPTION: Example demonstrating how to create a custom JSON comparison function with specific options and usage example.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/json/content.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval myOptions = compareJsonOptions {\n   typeCoercion = TypeCoercion.Enabled\n   arrayOrder = ArrayOrder.Lenient\n}\n\ninfix fun String.lenientShouldEqualJson(other: String) = this.shouldEqualJson(other, myOptions)\n\n\"[1, 2]\" lenientShouldEqualJson \"[2, 1]\" // This will pass\n```\n\n----------------------------------------\n\nTITLE: Assertion Functions\nDESCRIPTION: Demonstrates two Kotest utility functions for asynchronous testing\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/why.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\neventually\ncontinually\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Groovy)\nDESCRIPTION: This snippet shows how to configure the JUnit Platform for Gradle using Groovy syntax. It enables JUnit Platform for test tasks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/setup.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Matching TestResult in Kotlin\nDESCRIPTION: Demonstrates how to match on TestResult instead of the deprecated TestStatus enum in AfterTestListener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_5.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (result) {\n  is TestResult.Success -> ...\n  is TestResult.Error -> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Extension Dependency\nDESCRIPTION: Maven/Gradle dependency declaration for adding Koin extension to Kotest project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/koin.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-extensions-koin:${version}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Multiplatform Plugin\nDESCRIPTION: Adds the Kotest multiplatform Gradle plugin for JavaScript and Native support.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/setup.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: AnnotationSpec Example in KotlinTest\nDESCRIPTION: Shows how to use AnnotationSpec for JUnit-style testing with @Test annotations\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n  @Test\n  fun test1() {\n\n  }\n\n  @Test\n  fun test2() {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequential Test Ordering in Kotest\nDESCRIPTION: This snippet demonstrates how to configure sequential test ordering in a Kotest spec. Tests will run in the order they are defined in the spec file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SequentialSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Sequential\n\n    init {\n      \"foo\" {\n        // I run first as I'm defined first\n      }\n\n      \"bar\" {\n        // I run second as I'm defined second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast at Parent Test Level in Kotest\nDESCRIPTION: This snippet demonstrates how to enable fail fast for a specific parent test context in Kotest. When a test fails, subsequent tests in the same context are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/fail_fast.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n      context(\"context with fail fast enabled\").config(failfast = true) {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Tests Against Table Rows\nDESCRIPTION: Demonstrates how to run assertions against all rows in a test data table using forAll. The test will execute for each row and collect all failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/table_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"table-driven testing\") {\n    table.forAll { id, name, username ->\n      id shouldBeGreaterThan 0\n      username shouldNotBe \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing Example\nDESCRIPTION: Demonstrates data-driven testing using the forAll function to test multiple input combinations with expected outputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/index.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"maximum of two numbers\" {\n    forAll(\n        row(1, 5, 5),\n        row(1, 0, 1),\n        row(0, 0, 0)\n    ) { a, b, max ->\n      Math.max(a, b) shouldBe max\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Binding Two Arb Generators in Kotlin using Kotest\nDESCRIPTION: Generates values by pulling a value from each of two given Arbs and passing those values to a supplied function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.bind(arbA, arbB, fn)\n```\n\n----------------------------------------\n\nTITLE: Combined Filtering by Package and Test Name in Kotest\nDESCRIPTION: A command demonstrating how to combine package and test name filters using Kotest's system properties. This executes only tests containing 'Foo' in their name within the specified package.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/gradle.md#2025-04-13_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*' -Dkotest.filter.tests='*Foo*'\n```\n\n----------------------------------------\n\nTITLE: Generating Random UUIDs with Kotest Arbitrary\nDESCRIPTION: Uses Arb.uuid(type) to generate random UUIDs of the specified type. This is only compatible with the first listed Kotest version.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_34\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.uuid(type)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency for Multiplatform\nDESCRIPTION: Adds the Kotest property testing library to the common test dependencies in a multiplatform project. This allows using property-based testing across all supported platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_16\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-property:$version'\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode\nDESCRIPTION: Sets up assertion mode to error when tests don't use Kotest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/project_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val assertionMode = AssertionMode.Error\n}\n```\n\n----------------------------------------\n\nTITLE: ExpectSpec Example in KotlinTest\nDESCRIPTION: Demonstrates usage of ExpectSpec with context and expect keywords for nested test structure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ExpectSpecExample : ExpectSpec() {\n  init {\n    context(\"some context\") {\n      expect(\"some test\") {\n        // test here\n      }\n      context(\"nested context even\") {\n        expect(\"some test\") {\n          // test here\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Kotest Property Arbs Dependency\nDESCRIPTION: Instructions for adding the Kotest Property Arbs dependency to the project build. This is required to use the extra Arb generators described in the document.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/extra_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\nTo use, add `io.kotest.extensions:kotest-property-arbs:version` to your build.\n:::\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Kafka with Producer and Consumer in Kotest\nDESCRIPTION: Demonstrates creating string-based producers and consumers with the embedded Kafka instance, including sending and receiving messages in a test case with an eventually block for async verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/kafka.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n\n   test(\"send / receive\") {\n\n     val producer = embeddedKafkaListener.stringStringProducer()\n     producer.send(ProducerRecord(\"foo\", \"a\"))\n     producer.close()\n\n     val consumer = embeddedKafkaListener.stringStringConsumer(\"foo\")\n     eventually(10.seconds) {\n       consumer.poll(1000).first().value() shouldBe \"a\"\n     }\n     consumer.close()\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Exhaustive A-Z String Generation in Kotest\nDESCRIPTION: Generates all possible A-Z strings within a specified range. For example, with a range of 1..2, it would produce strings from 'a' to 'zz'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_20\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.azstring(range)\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Ktor Matchers with HTTP Client\nDESCRIPTION: This example shows how to use Kotest Ktor matchers with the Ktor HTTP client. It demonstrates how to make HTTP requests and assert the response status and headers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/ktor.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\nval response = client.post(\"http://mydomain.com/foo\")\nresponse.shouldHaveStatus(HttpStatusCode.OK)\nresponse.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n\n```\n\n----------------------------------------\n\nTITLE: Registering SpringListener in Kotlin Test Spec\nDESCRIPTION: Shows how to register SpringListener for dependency injection in a test spec by overriding the listeners() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : ParentSpec() {\n    override fun listeners() = listOf(SpringListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kotest Property Test Generators with kotlinx-datetime\nDESCRIPTION: Shows how to use Kotest's new property test generators for the kotlinx-datetime library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.3.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Arb.datetime(1987..1994)) { date ->\n   isValidStarTrekTngSeason(date) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'And' Keyword in BehaviorSpec for Additional Context\nDESCRIPTION: BehaviorSpec allows using the 'And' keyword in 'Given' and 'When' blocks to add extra depth to test scenarios. This provides more detailed context for the behavior being tested.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : BehaviorSpec({\n    given(\"a broomstick\") {\n        and(\"a witch\") {\n            `when`(\"The witch sits on it\") {\n                and(\"she laughs hysterically\") {\n                    then(\"She should be able to fly\") {\n                        // test code\n                    }\n                }\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Statistics Coverage Assertions with Counts in Kotest\nDESCRIPTION: Shows how to assert minimum absolute counts for specific categories in property tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/statistics.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoverageCounts(mapOf(RoundingMode.HALF_DOWN to 75, RoundingMode.FLOOR to 75)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Double Generator\nDESCRIPTION: Generates Double values within a specified range, including edge cases like NEGATIVE_INFINITY, MIN_VALUE, and special floating point values when in range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.double(min, max)\n```\n\n----------------------------------------\n\nTITLE: Alternative Lambda-based Test Definition in KotlinTest\nDESCRIPTION: Example showing the alternative way to define tests in KotlinTest using a lambda in the class constructor. This provides a more concise syntax for test definition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"strings.size should return size of string\" {\n    \"hello\".length shouldBe 5\n    \"hello\" should haveLength(5)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Random Subsequences with Kotest Arbitrary\nDESCRIPTION: Uses Arb.subsequence(list) to generate a random subsequence of the given list starting at index 0 and including the empty list. For example, Arb.subsequence(listOf(1,2,3)) could generate listOf(1), listOf(1,2), and so on.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_43\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.subsequence(list)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Library to JVM/Gradle Projects\nDESCRIPTION: Adds the Kotest assertions library dependency to a JVM project using Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Files in Kotest FunSpec\nDESCRIPTION: Demonstrates how to use the tempfile() function in a Kotest FunSpec to create a temporary file that will be automatically cleaned up after all tests in the spec have run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/tempfile.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val file = tempfile()\n\n   test(\"a temporary file dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: JSON Field Comparison Example in Kotlin\nDESCRIPTION: Demonstrates the difference between shouldEqualJson and shouldEqualSpecifiedJson with field comparison.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/json/content.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval a = \"\"\" { \"a\": true, \"date\": \"2019-11-03\" } \"\"\"\nval b = \"\"\" { \"a\": true } \"\"\"\n\n// this would pass\na shouldEqualSpecifiedJson b\n\n// this would fail\na shouldEqualJson b\n```\n\n----------------------------------------\n\nTITLE: Composing Complex Person Matcher\nDESCRIPTION: Composition of individual matchers into a single Person matcher using Matcher.compose. Maps each matcher to corresponding Person properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/data_class_matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun personMatcher(name: String, age: Int) = Matcher.compose(\n  nameMatcher(name) to Person::name,\n  ageMatcher(age) to Person::age,\n  addressMatcher to Person::address\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Ktor Assertions Dependency\nDESCRIPTION: Maven/Gradle dependency configuration for adding Kotest Ktor assertions to a project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-assertions-ktor:${version}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core to JavaScript Target\nDESCRIPTION: Configures a Kotlin Multiplatform project to include Kotest assertions specifically for the JavaScript target. This setup enables browser and Node.js testing with Kotest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-assertions-core:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Listeners at the End of Spec\nDESCRIPTION: Demonstrates placing test listeners at the end of the spec definition for better readability and organization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/integrations/mocks.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    afterTest {\n        clearMocks(repository)  // <---- End of file, better readability\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Blocks with xdescribe in DescribeSpec\nDESCRIPTION: This example demonstrates how to disable an entire test block including all its children by using the 'xdescribe' prefix instead of 'describe' in a DescribeSpec. When a block is disabled with 'xdescribe', none of the tests within it will execute.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/xmethods.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  xdescribe(\"this block and it's children are now disabled\") {\n    it(\"will not run\") {\n      // disabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding System Security Manager\nDESCRIPTION: Using the withSecurityManager extension function to temporarily override the system security manager in a test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSecurityManager(myManager) {\n  // Usage of security manager\n}\n```\n\n----------------------------------------\n\nTITLE: Using Coroutine Scopes in Leaf Test Cases\nDESCRIPTION: Example showing how leaf test cases act as coroutine scopes, allowing direct launching of coroutines.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\") {\n  launch {\n    delay(100)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FunSpec Disabled Tests Example\nDESCRIPTION: Demonstrates how to disable tests using x-prefixed functions in FunSpec style\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.1.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFunSpec : FunSpec({\n  xtest(\"a disabled test\") {\n    // this test will not be invoked\n  }\n  xcontext(\"this context is disabled\") {\n     test(\"and so this test is by extension\") {\n     }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Assumptions in Kotest Property Tests\nDESCRIPTION: Demonstrates the use of assumptions in Kotest to filter out unwanted input combinations while tracking the number of discarded iterations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/assumptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  withAssumptions(a != b) {\n    levenshtein(a, b) shouldBeGreaterThan 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers Maven Dependency\nDESCRIPTION: Maven dependency configuration for adding Testcontainers support to a Kotest project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Data Class for Test Cases in Kotlin\nDESCRIPTION: Defines a data class to represent a single row of test data for Pythagorean triples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Domains in Kotest\nDESCRIPTION: Generates random domain names with customizable TLDs and label generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.domain(tlds, labelArb)\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Elements from a Collection in Kotlin using Kotest\nDESCRIPTION: Randomly selects one of the elements from the given collection.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.element(collection)\n```\n\n----------------------------------------\n\nTITLE: Using Focus Prefix with Nested Tests in FunSpec\nDESCRIPTION: Shows how focus prefix affects nested tests in FunSpec. When a parent test is focused, all its nested tests are executed while other parent tests and their nested tests are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/focus.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : FunSpec({\n   context(\"test 1\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n   }\n\n   context(\"f:test 2\") {\n      // this will be executed\n      test(\"foo\") {\n         // this will be executed\n      }\n   }\n\n   context(\"test 3\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Table Data from File in Kotlin\nDESCRIPTION: Demonstrates loading table data from a .table file with type conversion from strings to appropriate data types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/table_driven_testing.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval tableFromFile = table(\n    headers = headers(\"id\", \"username\", \"fullName\"),\n    source = testResources.resolve(\"users.table\"),\n    transform = { a: String, b: String, c: String ->\n        row(a.toInt(), b, c)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Subsequences in Kotlin with Kotest\nDESCRIPTION: Uses Arb.subsequence() to generate random subsequences of a given list, starting from index 0 and including the empty list. For [1,2,3], it could generate [], [1], [1,2], etc.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_24\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.subsequence(list)\n```\n\n----------------------------------------\n\nTITLE: Creating Triple Instances from Arbitraries in Kotlin\nDESCRIPTION: Generates Triple instances where each value of the triple is drawn from three provided arbitrary generators. Useful for testing functions that take triples as parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.triple(arb1, arb2, arb3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Repository for Kotest in Kotlin\nDESCRIPTION: This code snippet shows the repository URL that needs to be added to the 'repositories' block in a Kotlin project's build file to access Kotest snapshot builds. Snapshots are automatically published on each commit to the master branch.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nhttps://s01.oss.sonatype.org/content/repositories/snapshots\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Plugin in Gradle\nDESCRIPTION: Configures the Pitest plugin in Gradle to work with Kotest. Sets up target classes for mutation testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/pitest.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigure<PitestPluginExtension> {\n    targetClasses.set(listOf(\"my.company.package.*\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests with @Ignored Annotation in Kotlin Kotest\nDESCRIPTION: Shows how to completely disable a test specification using the @Ignored annotation. When applied, the spec will not be instantiated, avoiding any resource setup or teardown.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/annotations.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Ignored\nclass IgnoredSpec : FunSpec() {\n  init {\n    error(\"boom\") // spec will not be created so this error will not happen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SystemEnvironmentTestListener for Spec Level Environment Variables\nDESCRIPTION: Example of applying environment variable overrides at the test spec level by implementing a listener that sets variables for all tests in the spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n  override fun listeners() = listOf(\n    SystemEnvironmentTestListener(\n      environment = mapOf(\n        \"foo\" to \"bar\",\n        \"bar\" to null, // Useful for resetting environment variables\n      ),\n      mode = OverrideMode.SetOrOverride,\n    )\n  )\n\n  init {\n    \"MyTest\" {\n      System.getenv(\"foo\") shouldBe \"bar\"\n      System.getenv(\"bar\") shouldBe null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Failed Ignored Tests in Kotest\nDESCRIPTION: Configuration to treat ignored tests as failures in the test suite\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/project_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val failOnIgnoredTests = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Groovy)\nDESCRIPTION: Enables JUnit Platform test runner in Gradle using Groovy DSL\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/quick_start.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collection Element Position Matchers in KoTest\nDESCRIPTION: Examples of using the haveElementAt matcher to verify elements at specific positions in collections, including handling of null values with proper type inference.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nlistOf(\"a\", \"b\", \"c\") should haveElementAt(1, \"b\")\nlistOf(\"a\", \"b\", \"c\") shouldNot haveElementAt(1, \"c\")\n```\n\n----------------------------------------\n\nTITLE: Using Percentage-Based Tolerance for Double Comparison in Kotlin\nDESCRIPTION: Adds an overload to Double.plusOrMinus that accepts a percentage value instead of an absolute one for tolerance in comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\n1.0.plusOrMinus(10.percent)\n```\n\n----------------------------------------\n\nTITLE: Integrating Testcontainers with Kotest using perTest Listener\nDESCRIPTION: This snippet demonstrates how to use a Redis Docker container as a TestListener in Kotest. The container is started before each test and stopped after each test using the perTest() extension method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Classifications in Property Testing with KoTest\nDESCRIPTION: Example of using multiple classify calls to analyze different properties of generated values in property-based tests, checking integers for zero and even/odd status.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Gen.int()) { a ->\n  classify(a == 0, \"zero\")\n  classify(a % 2 == 0, \"even number\", \"odd number\")\n  a + a == 2 * a\n}\n```\n\n----------------------------------------\n\nTITLE: Security Manager Extension Usage\nDESCRIPTION: Demonstrates how to override the system security manager in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/system.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n    withSecurityManager(myManager) {\n      // Usage of security manager\n    }\n```\n\n----------------------------------------\n\nTITLE: Error Output with Nested Clues\nDESCRIPTION: The error message produced when a test with nested clues fails, showing how all the relevant clue context is included in the failure message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nVerifying user_id=42\nemail_confirmed should be false since we've just created the user\n<true> should equal <false>\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Package via Gradle Command Line\nDESCRIPTION: Command to run tests matching a specific package pattern using Gradle's --tests command line option.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/gradle.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngradle test --tests 'com.sksamuel.somepackage*'\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Random Integer Arbitrary Generator in Kotlin\nDESCRIPTION: Demonstrates how to create a basic arbitrary generator that produces random integers between 3 and 6 using RandomSource.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/customgens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval sillyArb = arbitrary { rs: RandomSource ->\n   rs.random.nextInt(3..6)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hash Code Comparison Matchers in KoTest\nDESCRIPTION: Examples of comparing hash codes of objects using the haveSameHashCodeAs matcher in KoTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nobj1 should haveSameHashCodeAs(obj2)\n\"hello\" shouldNot haveSameHashCodeAs(\"world\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Project Level Extensions in Kotlin\nDESCRIPTION: Demonstrates how to create a project-wide listener using @AutoScan annotation that implements BeforeProjectListener and AfterProjectListener interfaces. This listener executes before and after all tests in the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/extensions/extensions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@AutoScan\nobject MyProjectListener : BeforeProjectListener, AfterProjectListener {\n  override suspend fun beforeProject() {\n    println(\"Project starting\")\n  }\n  override suspend fun afterProject() {\n    println(\"Project complete\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution with System Check in Kotlin\nDESCRIPTION: Shows how to conditionally enable tests based on system properties, specifically running tests only on Linux systems using Apache Commons Lang.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/config_enabled.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"should do something\".config(enabled = IS_OS_LINUX) {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Project Configuration Setup in Kotest\nDESCRIPTION: Demonstrates project-wide configuration including before/after hooks and parallelism settings.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotlintest.provided\n\nobject ProjectConfig : AbstractProjectConfig() {\n\n  private var started: Long = 0\n\n  override fun beforeAll() {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterAll() {\n    val time = System.currentTimeMillis() - started\n    println(\"overall time [ms]: \" + time)\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n   override fun parallelism(): Int = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Map Matchers in Kotlin with Kotest\nDESCRIPTION: Matchers for validating map contents and structure in Kotest. These assertions help verify key-value pairs, containment relationships, and other map properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldContain(\"key\", \"value\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldContainAll(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldContainExactly(other)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldContainKey(key)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldContainKeys(keys)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldContainValue(value)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldContainValues(values)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldBeEmpty()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldMatchAll(\"k1\" to {it shouldBe \"v1\"}, \"k2\" to {it shouldBe \"v2\"}, ...)\n```\n\n----------------------------------------\n\nTITLE: Adding Pitest Kotest Extension Dependency in Maven\nDESCRIPTION: Maven dependency configuration to add the Kotest Pitest extension module to the project's test dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/pitest.md#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  ... the other Kotest dependencies like kotest-runner-junit5-jvm \n  <dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-pitest</artifactId>\n    <version>${kotest-extensions-pitest.version}</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Filtering Specs Using Kotest System Property\nDESCRIPTION: Example showing how to filter specs (classes) by package using Kotest's kotest.filter.specs system property. This provides more fine-grained control than Gradle's built-in filtering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/gradle.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Framework Dump Config\nDESCRIPTION: Sets a system property to enable logging of Kotest config to the console during startup. This was disabled by default in version 5.0.0.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nkotest.framework.dump.config=true\n```\n\n----------------------------------------\n\nTITLE: Arrow Optics Dependencies\nDESCRIPTION: Additional dependency required for using Arrow Optics generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nio.arrow-kt:arrow-optics:arrow-version\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Compiler Matchers Dependency\nDESCRIPTION: Gradle dependency configuration required to add kotest-assertions-compiler to a project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/compiler.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-assertions-compiler:${version}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest Spec\nDESCRIPTION: Demonstrates how to configure assertion mode within a Kotest specification to detect tests without assertions. The example shows setting AssertionMode.Error which will fail tests that don't contain assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/assertion_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec() {\n   init {\n      assertions = AssertionMode.Error\n      test(\"this test has no assertions\") {\n         val name = \"sam\"\n         name.length == 3 // this isn't actually testing anything\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Function Style Matchers\nDESCRIPTION: Shows how to use matchers as extension functions instead of infix notation for better IDE discovery.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldExist()\n\nlistOf(1, 2).shouldContainNull()\n```\n\n----------------------------------------\n\nTITLE: Using Double.plusOrMinus with Percentage in Kotlin\nDESCRIPTION: Example of using the plusOrMinus extension function with a percentage value instead of an absolute one, allowing for relative tolerance in equality assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n1.0.plusOrMinus(10.percent)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in FunSpec with Kotest\nDESCRIPTION: Illustrates how to use the new 'x' prefixes to disable individual tests or entire contexts in the FunSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.1.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFunSpec : FunSpec({\n  xtest(\"a disabled test\") {\n    // this test will not be invoked\n  }\n  xcontext(\"this context is disabled\") {\n     test(\"and so this test is by extension\") {\n     }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Groovy)\nDESCRIPTION: Enables JUnit Platform test runner for Gradle using Groovy DSL\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/quick_start.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Kotlin)\nDESCRIPTION: Configures the JUnit Platform for Gradle using Kotlin DSL. This is required for running Kotest tests on the JVM with Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Arrow Optics Generator Dependencies\nDESCRIPTION: Additional Maven dependency required for using Arrow Optics generators in Kotest property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/arrow.md#2025-04-13_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\nio.arrow-kt:arrow-optics:arrow-version\n```\n\n----------------------------------------\n\nTITLE: Tagging All Tests in a Spec\nDESCRIPTION: Applying tags to all tests within a spec using the tags function in the spec definition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/tags.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n\n  tags(Linux, Mysql)\n\n  test(\"my test\") { } // automatically marked with the above tags\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Callable Member Characteristics in Kotlin\nDESCRIPTION: These matchers are used to assert various characteristics of Kotlin callable members, such as visibility, finality, openness, abstractness, and suspendability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nkcallable.shouldHaveVisibility(visibility)\nkcallable.shouldBeFinal()\nkcallable.shouldBeOpen()\nkcallable.shouldBeAbstract()\nkcallable.shouldBeSuspendable()\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property DateTime Module Dependency\nDESCRIPTION: Instructions for adding the Kotest Property DateTime module to a project's build configuration. This dependency is required to use the KotlinX DateTime generators in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/date_gens.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nio.kotest.extensions:kotest-property-datetime:version\n```\n\n----------------------------------------\n\nTITLE: Generating Eval Instances in Kotest with Arrow\nDESCRIPTION: Extension function for wrapping values from an arbitrary generator in Eval.now instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/arrow.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nArb<A>.evalNow()\n```\n\n----------------------------------------\n\nTITLE: Implementing Kotest Property Testing in Multiplatform Common Tests\nDESCRIPTION: Kotlin Multiplatform configuration for adding Kotest property testing support in common test sourcesets.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/index.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-property:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Class in Kotlin\nDESCRIPTION: Defines a simple data class named Foo with three properties: a (String), b (Boolean), and c (Double).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.1.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Foo(val a: String, val b: Boolean, val c: Double)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency in Gradle\nDESCRIPTION: Adds the core Kotest JUnit5 runner dependency to a Gradle project. This is required for using Kotest as a test framework on the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-runner-junit5:$version'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest for Android Projects\nDESCRIPTION: Sets up Kotest for Android unit and integration testing. Includes Gradle configuration and dependency setup.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      it.useJUnitPlatform()\n   }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n   testImplementation 'io.kotest:kotest-runner-junit5:version'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit XML Reporter in Kotest (Kotlin)\nDESCRIPTION: This snippet shows how to configure Gradle to work with the JUnit XML Reporter in Kotest. It disables Gradle's built-in JUnit XML report generation and sets the necessary system property for the build directory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/junit_xml.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") {\n  useJUnitPlatform()\n  reports {\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Constructor Injection in KotlinTest\nDESCRIPTION: Demonstrates constructor injection support in KotlinTest's Spring extension module using SpringAutowireConstructorExtension. Shows how to inject dependencies directly into test class constructors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec({\n  \"SpringListener\" should {\n    \"have autowired the service\" {\n      service.repository.findUser().name shouldBe \"system_user\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Propagate System Properties in Groovy\nDESCRIPTION: Explains how to configure Gradle (using Groovy DSL) to propagate system properties to test executors, which is necessary for tag-based test filtering via command line arguments.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_28\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    //... Other configurations ...\n    systemProperties = System.properties\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Blocks with xdescribe in Kotest DescribeSpec\nDESCRIPTION: Example showing how to disable an entire test block and its nested tests using the xdescribe prefix in DescribeSpec. When using xdescribe, the specified block and all its child tests will be skipped during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/xmethods.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  xdescribe(\"this block and it's children are now disabled\") {\n    it(\"will not run\") {\n      // disabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Compiler Matchers with Gradle\nDESCRIPTION: Gradle dependency configuration for adding the kotest-assertions-compiler extension to a project. This extension provides compiler verification matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/compiler.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-assertions-compiler:${version}\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Blocks with xdescribe in Kotest\nDESCRIPTION: Example showing how to disable an entire test block including all nested tests by using the 'xdescribe' method in DescribeSpec. This prevents the entire block and its children from running during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/xmethods.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  xdescribe(\"this block and it's children are now disabled\") {\n    it(\"will not run\") {\n      // disabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Invocations with Timeout in Kotest DescribeSpec\nDESCRIPTION: This snippet demonstrates how to configure a test to run multiple times with an invocation timeout. The test will run three times, each with a 60 millisecond timeout.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times and each has a timeout of 60 milliseconds\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: LocalDateTime Generation in Kotest\nDESCRIPTION: Generates random LocalDateTime instances within a specified range defined by minLocalDateTime and maxLocalDateTime parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_50\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.localDateTime(minLocalDateTime, maxLocalDateTime)\n```\n\n----------------------------------------\n\nTITLE: Using Collection Element Position Matchers with Nulls in KoTest\nDESCRIPTION: Example of using the haveElementAt matcher with explicit type parameter to help the type inferrer when checking for null elements in collections.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nlistOf(\"a\", \"b\", null) should haveElementAt<String?>(2, null)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions for Ktor Dependency in Gradle\nDESCRIPTION: Adds the kotest-assertions-ktor extension as a dependency in a Gradle build file. This extension provides matchers for Ktor applications.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-assertions-ktor:${version}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests via Gradle Command Line by Suffix\nDESCRIPTION: Example of using Gradle's --tests command line flag to filter tests by class name suffix. This will run all test classes that end with 'IntegrationTest'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/gradle.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradle test --tests '*IntegrationTest'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jacoco XML Report Task\nDESCRIPTION: Configures the Jacoco test report task to generate XML reports and depend on the test task.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/integrations/jacoco.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.jacocoTestReport {\n    dependsOn(tasks.test)\n    reports {\n        xml.required.set(true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tag Extension Implementation\nDESCRIPTION: Example of implementing a TagExtension to dynamically control test execution based on environment conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Hadoop : Tag()\n\nobject HadoopTagExtension : TagExtension {\n  override fun tags(): Tags =\n      if (System.getenv().containsKey(\"HADOOP_HOME\")) Tags.include(Hadoop) else Tags.exclude(Hadoop)\n}\n\nobject MyProjectConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(HadoopTagExtension)\n}\n\nobject SimpleTest : StringSpec({\n  \"simple test\" {\n    // this test would only run on environments that have hadoop configured\n  }.config(tags = setOf(Hadoop))\n})\n```\n\n----------------------------------------\n\nTITLE: Testing System.exit Calls with SpecSystemExitListener in KotlinTest\nDESCRIPTION: Example showing how to test System.exit calls using the SpecSystemExitListener, which intercepts exit calls and throws SystemExitException with the exit code instead of terminating the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SystemExitTest : StringSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n\n    \"System.exit should throw an exception when the listener is added\" {\n      shouldThrow<SystemExitException> {\n        System.exit(123)\n      }.exitCode shouldBe 123\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using System Security Manager Extension in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the System Security Manager Extension to override the security manager in Kotest tests for a specific scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSecurityManager(myManager) {\n  // Usage of security manager\n}\n```\n\n----------------------------------------\n\nTITLE: IsolationMode Configuration\nDESCRIPTION: Shows how to configure IsolationMode to InstancePerTest for automatic test isolation.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/mocks.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    isolation = IsolationMode.InstancePerTest\n\n})\n```\n\n----------------------------------------\n\nTITLE: Equivalent Static Implementation of Dynamic Tests in Kotest\nDESCRIPTION: Shows the static equivalent of the dynamic tests example, with each test explicitly defined. This helps illustrate the advantage of dynamic test generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/writing_tests.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   test(\"pam should be a three letter name\") {\n      \"pam\".shouldHaveLength(3)\n   }\n\n   test(\"tim should be a three letter name\") {\n     \"tim\".shouldHaveLength(3)\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Failure Collection Example in Kotlin\nDESCRIPTION: Shows how multiple failures can be collected when using proper assertion wrapping.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/soft_assertions.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  (2+2) shouldBe 5\n  shouldNotThrowAnyUnit {\n    verify(exactly = 1) { myClass.myMethod(any()) }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pitest Kotest Extension Dependency in Maven\nDESCRIPTION: Adds the Kotest Pitest extension as a test dependency in a Maven project's pom.xml file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/pitest.md#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  ... the other Kotest dependencies like kotest-runner-junit5\n  <dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-pitest</artifactId>\n    <version>${kotest-extensions-pitest.version}</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Generating Positive Double Values in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that produces positive Double values within a specified range, with options to include non-finite edge cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.positiveDouble(max, includeNonFiniteEdgeCases)\n```\n\n----------------------------------------\n\nTITLE: Using BehaviorSpec with Enhanced Nesting in Kotlin\nDESCRIPTION: BehaviorSpec now supports additional nesting with 'And' keyword between other keywords. This allows for more granular and descriptive test structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyTest : BehaviorSpec({\n  given(\"a condition\") {\n    and(\"another condition\") {\n      when(\"an action occurs\") {\n        then(\"a result is expected\") {\n          // Assertion\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure in Gradle Build Script\nDESCRIPTION: This Kotlin code snippet demonstrates how to configure Allure in the Gradle build script. It sets the Allure version and disables auto-configuration, which is necessary when using Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/allure.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nallure {\n  autoconfigure = false\n  version = \"2.13.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin for Kotest\nDESCRIPTION: Configures the Maven Surefire plugin for running Kotest tests with Maven. This is required to properly execute JUnit 5 based tests in a Maven project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pythagorean Triple Validation in Kotlin\nDESCRIPTION: Defines a function to check if three integers form a valid Pythagorean triple.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.3.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Iterator Assertions in Kotest\nDESCRIPTION: Matchers for asserting properties of iterators in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\niterator.shouldBeEmpty()\niterator.shouldHaveNext()\n```\n\n----------------------------------------\n\nTITLE: Configuring Android for Kotest Unit Tests\nDESCRIPTION: Sets up the Android test options to use JUnit Platform for Kotest tests. This configuration is needed for running Kotest tests in Android unit test environments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      it.useJUnitPlatform()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Matcher Interface in Kotlin\nDESCRIPTION: The Matcher interface in Kotest, which defines a single method 'test' that returns a MatcherResult.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/custom.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Matcher<in T> {\n  fun test(value: T): MatcherResult\n}\n```\n\n----------------------------------------\n\nTITLE: Extensions Documentation in Markdown\nDESCRIPTION: Markdown documentation listing various Kotest extensions with their descriptions, organized into team-maintained and third-party categories\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: index\ntitle: Extensions\nslug: extensions.html\nsidebar_label: Introduction\n---\n\nKotest integrates with many other libraries and frameworks. Some are provided by the Kotest team, and others are\nmaintained and hosted by third parties.\n\n### Kotest Team Extensions\n\n| Project | Description |\n| ------- | ----------- |\n| [Spring](spring.md) | Adds support for spring beans in tests and spring test annotations |\n| [Ktor](ktor.md) | Provides matchers for Ktor endpoints |\n| [Koin](koin.md) | Kotlin DI framework |\n| [Mockserver](mockserver.md) | Integrate mockserver HTTP servers with the test lifecycle |\n| [System](system.md) | Provides utilities for integrating with System.* functions |\n| [Instant](instant.md) | Override the 'now' context in java.time |\n| [Testcontainers](test_containers.md) | Run docker images as part of a test lifecycle |\n| [Wiremock](wiremock.md) | Provides a mock HTTP server. Project homepage [here](http://wiremock.org/). |\n| [Roboelectric](roboelectric.md) | Integrate roboelectric with the test lifecycle |\n| [Allure](allure.md) | Provides output for the allure framework |\n| [JUnit XML](junit_xml.md) | Provides output in the JUnit XML format for integration with reporting tools |\n| [HTML Reporter](html_reporter.md) | Generates HTML reports of test results based on [JUnit XML](junit_xml.md) |\n```\n\n----------------------------------------\n\nTITLE: Registering TimerListener Project-wide in Kotest\nDESCRIPTION: This snippet shows how to register the TimerListener extension project-wide using Kotest's AbstractProjectConfig. This allows the TimerListener to be applied to all tests in the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/extensions/examples.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyConfig : AbstractProjectConfig() {\n    override fun extensions(): List<Extension> = listOf(TimerListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing for JavaScript Only\nDESCRIPTION: Adds the property testing library specifically to the JavaScript target in a multiplatform project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest System Extensions Dependency in Kotlin\nDESCRIPTION: This snippet shows how to add the Kotest system extensions dependency to a Kotlin project. It includes the Maven Central and Sonatype Nexus repository badges for the latest release and snapshot versions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest:kotest-extensions-jvm:${version}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Callbacks in Kotest DescribeSpec\nDESCRIPTION: Demonstrates the usage of new callback functions beforeEach, beforeContainer, and beforeTest in a DescribeSpec test\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.2.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CallbacksTest : DescribeSpec({\n\n   beforeEach {\n      println(\"Test: \" + it.displayName)\n   }\n\n   beforeContainer {\n      println(\"Container: \" + it.displayName)\n   }\n\n   beforeTest {\n      println(\"All: \" + it.displayName)\n   }\n\n   describe(\"I am a container scope\") {\n      it(\"And I am a test scope\") { }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Case Severity Levels\nDESCRIPTION: Example of setting severity levels for test cases to control test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.3.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec() {\n   init {\n      test(\"very very important\").config(severity = TestCaseSeverityLevel.CRITICAL) {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Task Dependencies\nDESCRIPTION: Sets up the test task to be finalized by the Jacoco report generation task.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/integrations/jacoco.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  ...\n  finalizedBy(tasks.jacocoTestReport)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Extension Dependency for Kotest\nDESCRIPTION: Maven dependency declaration for adding the Kotest Koin extension to your project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/koin.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-extensions-koin:${version}\n```\n\n----------------------------------------\n\nTITLE: Eventually with Result Predicate\nDESCRIPTION: Demonstrates using eventually with a predicate to verify the return value of the test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/concurrency/eventually.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nvar string = \"x\"\n\neventually({\n  duration = 5.seconds()\n  predicate = { it.result == \"xxx\" }\n}) {\n  string += \"x\"\n  string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Test Ordering in Kotest\nDESCRIPTION: This snippet shows how to set up random test ordering in a Kotest spec. Root tests will be dispatched in a random order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_ordering.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass RandomSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Random\n\n    init {\n      \"foo\" {\n        // This test may run first or second\n      }\n\n      \"bar\" {\n        // This test may run first or second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Subsequences in Kotlin using Kotest\nDESCRIPTION: Generates a random subsequence of the given list starting at index 0 and including the empty list. For example, 'Arb.subsequence(listOf(1,2,3))' could generate 'listOf(1)', 'listOf(1,2)', and so on.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_26\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.subsequence(list)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency for Kotlin Multiplatform Common\nDESCRIPTION: Kotlin multiplatform configuration for adding the Kotest property testing library to the commonTest sourceset. This allows using property testing across all targeted platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/index.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-property:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Matching with Explicit Inclusion in Kotlin\nDESCRIPTION: Shows how to compare objects by explicitly specifying which fields to include in the comparison\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/field-matching.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n   val expected = Thing(name = \"apple\", createdAt = Instant.now())\n   val actual = Thing(name = \"apple\", createdAt = Instant.now().plusMillis(42L))\n   expected shouldBeEqualUsingFields {\n      includedProperties = setOf(Thing::name)\n      actual\n   }\n```\n\n----------------------------------------\n\nTITLE: Generating Locale Values in Kotlin using Kotest Arb\nDESCRIPTION: Creates an Arb that generates locales in the Java format, such as 'en_US' or 'ca_ES_VALENCIA'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_25\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.locale()\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions in Kotlin\nDESCRIPTION: Shows how to chain multiple assertions using various matchers in sequence.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n           .shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n           .shouldStartWith(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core Dependency in Maven\nDESCRIPTION: Adds the Kotest assertions core library as a test dependency in a Maven pom.xml file. This provides the assertion functions for test verification in Maven projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-assertions-core-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing for JavaScript (Gradle)\nDESCRIPTION: Adds the Kotest property testing dependency specifically to the JavaScript target in a multiplatform project using Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests Using Kotest Environment Variables\nDESCRIPTION: Demonstrates using Kotest's environment variable approach for test filtering, which works with both Kotlin/JVM and Kotlin/Native.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/gradle.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkotest_filter_specs='com.somepackage.*' gradle test\n```\n\n----------------------------------------\n\nTITLE: Test Output Format Example\nDESCRIPTION: Shows the resulting test output format when displayFullTestPath is enabled in project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/output.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMyTests. describe 1 - test 1\nMyTests. describe 1 - test 2\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Kotlin)\nDESCRIPTION: Enables JUnit Platform for Kotest testing in Gradle using Kotlin DSL by configuring test tasks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/quick_start.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Using TestResult ADT instead of TestStatus enum in Kotlin\nDESCRIPTION: Example of how to match on TestResult directly instead of using the deprecated TestStatus enum in AfterTestListener implementations. This demonstrates the preferred pattern for handling test results in Kotest 5.0.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_5.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nwhen (result) {\n  is TestResult.Success -> ...\n  is TestResult.Error -> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with Kotest System Property by Package\nDESCRIPTION: Example of using Kotest's specific system property to filter specs (classes) by package. This allows for more granular filtering than the Gradle built-in mechanism.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/gradle.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*'\n```\n\n----------------------------------------\n\nTITLE: Implementing and Registering a TagExtension in KotlinTest\nDESCRIPTION: Demonstrates how to create and register a TagExtension to dynamically control which tags are active based on runtime conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nobject Hadoop : Tag()\n\nobject HadoopTagExtension : TagExtension {\n  override fun tags(): Tags =\n      if (System.getenv().containsKey(\"HADOOP_HOME\")) Tags.include(Hadoop) else Tags.exclude(Hadoop)\n}\n\nobject MyProjectConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(HadoopTagExtension)\n}\n\nobject SimpleTest : StringSpec({\n  \"simple test\" {\n    // this test would only run on environments that have hadoop configured\n  }.config(tags = setOf(Hadoop))\n})\n```\n\n----------------------------------------\n\nTITLE: Using forNone in Table-Driven Testing in Kotlin\nDESCRIPTION: Shows how to use forNone with a data table to assert that a condition is not met for any row in the test data table.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_39\n\nLANGUAGE: kotlin\nCODE:\n```\nval table = table(\n  headers(\"a\", \"b\"),\n  row(0L, 2L),\n  row(2L, 2L),\n  row(4L, 5L),\n  row(4L, 6L)\n)\n\nforNone(table) { a, b ->\n  3 shouldBe between(a, b)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a TagExtension for Conditional Test Execution in KoTest\nDESCRIPTION: Example of creating and registering a TagExtension to dynamically enable or disable tests based on environment conditions, specifically checking for a Hadoop installation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Hadoop : Tag()\n\nobject HadoopTagExtension : TagExtension {\n  override fun tags(): Tags =\n    if (System.getenv().containsKey(\"HADOOP_HOME\")) Tags.include(Hadoop) else Tags.exclude(Hadoop)\n}\n\nobject MyProjectConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(HadoopTagExtension)\n}\n\nobject SimpleTest : StringSpec({\n  \"simple test\" {\n    // this test would only run on environments that have hadoop configured\n  }.config(tags = setOf(Hadoop))\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Root-Level Data-Driven Tests with Kotest in Kotlin\nDESCRIPTION: Shows how to define data-driven tests at the root level of a Kotest spec, without nesting them inside additional context blocks. This approach provides a more concise test structure for simpler scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  withData(\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    isPythagTriple(a, b, c) shouldBe true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Property Test with Unbounded Shrinking Configuration\nDESCRIPTION: Demonstrates how to configure unbounded shrinking behavior instead of the default 1000 shrink attempts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/shrinking.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll(PropTestConfig(shrinkingMode = ShrinkingMode.Unbounded)) { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest HTML Reporter with Project Config\nDESCRIPTION: Example configuration showing how to set up HTML reporting in Kotest by implementing the AbstractProjectConfig class. This setup includes both JunitXmlReporter and HtmlReporter extensions to generate HTML reports from XML test results.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/html_reporter.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override val specExecutionOrder = SpecExecutionOrder.Annotated\n\n    override fun extensions(): List<Extension> = listOf(\n        JunitXmlReporter(\n            includeContainers = false,\n            useTestPathAsName = true,\n        ),\n        HtmlReporter()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using autoClose in Kotlin with KotlinTest\nDESCRIPTION: Demonstrates how to use autoClose in KotlinTest to automatically close resources of type Closeable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Diff Comparison Example\nDESCRIPTION: Example showing how to define a data class that will be used to demonstrate the new diff comparison feature in Kotest 4.1\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.1.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Foo(val a: String, val b: Boolean, val c: Double)\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Test Iterations in Kotlin\nDESCRIPTION: Example of how to specify custom iteration count (10,000) for property tests using checkAll function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/test_functions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"a many iterations test\" {\n      checkAll<Double, Double>(10_000) { a, b ->\n         // test here\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinTest with Gradle in Groovy\nDESCRIPTION: Example of how to configure a Gradle build (Groovy syntax) to use KotlinTest with the JUnit Platform. This snippet shows how to enable the JUnit Platform and add the KotlinTest dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  useJUnitPlatform()\n}\n\ndependencies {\n  testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.4.2'\n}\n```\n\n----------------------------------------\n\nTITLE: Describe/It Testing Style\nDESCRIPTION: Shows Kotest's JavaScript-style testing syntax using describe and it blocks\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/why.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndescribe/it\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Listeners in KotlinTest\nDESCRIPTION: Demonstrates how to create and use test listeners for setup, teardown, and logging purposes. Includes registering listeners with a specific test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : TestListener {\n\n  var started = 0L\n\n  override fun beforeTest(description: Description): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(description: Description, result: TestResult): Unit {\n    println(\"Duration of $description = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n\n  override fun listeners(): List<TestListener> = listOf(TimerListener)\n\n  // tests here\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using forNone Inspector in Kotlin with Kotest\nDESCRIPTION: This example shows how to use the forNone inspector to assert that no elements in a collection meet certain conditions, such as containing 'x' and starting with 'bb'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/inspectors.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Kotest Team Extensions\nDESCRIPTION: A markdown table listing official extensions maintained by the Kotest team, including their descriptions and links to detailed documentation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/index.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Project | Description |\n| ------- | ----------- |\n| [Spring](spring.md) | Adds support for spring beans in tests and spring test annotations |\n| [Ktor](ktor.md) | Provides matchers for Ktor endpoints |\n| [Koin](koin.md) | Kotlin DI framework |\n| [Mockserver](mockserver.md) | Integrate mockserver HTTP servers with the test lifecycle |\n| [System](system.md) | Provides utilities for integrating with System.* functions |\n| [Instant](instant.md) | Override the 'now' context in java.time |\n| [Testcontainers](test_containers.md) | Run docker images as part of a test lifecycle |\n| [Wiremock](wiremock.md) | Provides a mock HTTP server. Project homepage [here](http://wiremock.org/). |\n| [Allure](allure.md) | Provides output for the allure framework |\n| [JUnit XML](junit_xml.md) | Provides output in the JUnit XML format for integration with reporting tools |\n| [HTML Reporter](html_reporter.md) | Generates HTML reports of test results based on [JUnit XML](junit_xml.md) |\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging for Single Test in Kotest\nDESCRIPTION: Demonstrates how to enable coroutine debugging for a specific test using the coroutineDebugProbes configuration option. The test will generate a coroutine dump after completion or on exception.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineDebugProbes = true) {\n         someMethodThatLaunchesACoroutine() // launches a new coroutine\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Framework Dump Config in Kotlin\nDESCRIPTION: Sets a system property to enable logging of Kotest configuration to the console during startup. This was changed to be disabled by default in version 5.0.0.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nSystem.setProperty(\"kotest.framework.dump.config\", \"true\")\n```\n\n----------------------------------------\n\nTITLE: Generating Option Instances in Kotest with Arrow\nDESCRIPTION: Various methods for generating Option instances using Arrow generators in Kotest. Includes exhaustive and arbitrary generators for None and Some types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.option(a)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.none(a)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.option(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.some(arb)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.none()\n```\n\n----------------------------------------\n\nTITLE: Including Test Factories in a Test Suite with Kotlin\nDESCRIPTION: This snippet demonstrates how to include test factories for multiple implementations in a single test suite using Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_factories.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IndexedSeqTestSuite : WordSpec({\n   include(indexedSeqTests(\"vector\"), Vector())\n   include(indexedSeqTests(\"list\"), List())\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Unbounded Shrinking Mode in Kotest\nDESCRIPTION: Example of how to configure shrinking to continue without bounds instead of the default 1000 attempts. This uses PropTestConfig with the ShrinkingMode.Unbounded parameter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/shrinking.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll(PropTestConfig(shrinkingMode = ShrinkingMode.Unbounded)) { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tags for Test Grouping in Kotlin\nDESCRIPTION: Shows how to create tag objects that can be used to categorize and group tests, enabling selective test execution by including or excluding specific tags.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n```\n\n----------------------------------------\n\nTITLE: Using Config with Tests in KotlinTest 3.1.x\nDESCRIPTION: Demonstrates the new syntax for applying configuration to tests in KotlinTest 3.1.x, where config is specified after the test name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\n\"this is a test\".config(...) {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TimerListener in Kotest (Kotlin)\nDESCRIPTION: This snippet shows how to create a custom TimerListener extension for Kotest. It logs the time taken for each test case by implementing BeforeTestListener and AfterTestListener interfaces.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/extensions/examples.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : BeforeTestListener, AfterTestListener {\n\n  var started = 0L\n\n  override fun beforeTest(testCase: TestCase): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(testCase: TestCase, result: TestResult): Unit {\n    println(\"Duration of ${testCase.descriptor} = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Test Block for JUnit Platform\nDESCRIPTION: Basic Gradle configuration to enable JUnit platform for KotlinTest with optional test logging setup.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    useJUnitPlatform()\n}\n\ntest {\n    useJUnitPlatform()\n    testLogging {\n        events \"FAILED\", \"SKIPPED\", \"STANDARD_OUT\", \"STANDARD_ERROR\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveKey Matcher for Maps in Kotlin with KotlinTest\nDESCRIPTION: Demonstrates the use of haveKey matcher in KotlinTest to check if a map contains a specific key.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveKey(1)\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Compiler Matchers Dependency with Gradle\nDESCRIPTION: Gradle dependency configuration needed to add the kotest-assertions-compiler extension to your project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/compiler.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-assertions-compiler:${version}\")\n```\n\n----------------------------------------\n\nTITLE: TestContainer Integration Example in Kotlin\nDESCRIPTION: Demonstrates how to integrate TestContainers with Kotest using the new kotest-extensions-testcontainers module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.1.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perTest())\n```\n\n----------------------------------------\n\nTITLE: Setting Test Case Severity Level in Kotest\nDESCRIPTION: Demonstrates how to set a severity level (CRITICAL) for a test case using the config method. Severity levels can be used to conditionally execute tests based on importance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.3.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec() {\n   init {\n      test(\"very very important\").config(severity = TestCaseSeverityLevel.CRITICAL) {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JunitXmlReporter\nDESCRIPTION: Gradle configuration for using Kotest's JunitXmlReporter. This disables Gradle's built-in JUnit XML report generation and sets a system property to inform the reporter about the build directory location.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/junit_xml.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") {\n  useJUnitPlatform()\n  reports {\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Using File Path Type Matchers\nDESCRIPTION: Shows how to verify if a file's path is absolute or relative using the beAbsolute and beRelative matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nFile(\"/usr/home/sam\") should beAbsolute()\nFile(\"spark/bin\") should beRelative()\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Matchers in KotlinTest\nDESCRIPTION: Examples of using matchers for the Arrow functional programming library, available in the kotlintest-assertions-arrow module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval option = Option.pure(\"foo\")\noption should beSome(\"foo\")\n\nEither.right(\"boo\") should beRight(\"boo\")\n\nNonEmptyList.of(1, 2, null).shouldContainNull()\n\nTry.Success(\"foo\") should beSuccess(\"foo\")\n\nValid(\"foo\") should beValid()\n```\n\n----------------------------------------\n\nTITLE: Deprecated Test Case Configuration in Kotest\nDESCRIPTION: Example showing the deprecated way of configuring test case defaults using defaultTestCaseConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_5.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n    override fun defaultTestCaseConfig() = TestCaseConfig(tags = setOf(Foo, Bar), timeout = 100.seconds)\n    test(\"foo\") {\n      // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withConstantNow for Time-Fixed Testing in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the withConstantNow function to create a fixed point in time for testing. It ensures that LocalDateTime.now() returns the same value throughout the test, even with delays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/instant.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval foreverNow = LocalDateTime.now()\n\nwithConstantNow(foreverNow) {\n  LocalDateTime.now() shouldBe foreverNow\n  delay(10) // Code is taking a small amount of time to execute, but `now` changed!\n  LocalDateTime.now() shouldBe foreverNow\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Timer Listener in Test Class\nDESCRIPTION: Example showing how to register the TimerListener extension at the test class level using extensions() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/extensions/examples.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n  extensions(TimerListener)\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Arrow Generators for Kotest\nDESCRIPTION: Instructions for adding the Arrow generators module to a Kotlin project using Kotest for property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-property-arrow:version\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nio.arrow-kt:arrow-core:arrow-version\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nio.arrow-kt:arrow-optics:arrow-version\n```\n\n----------------------------------------\n\nTITLE: Using Collection Element At Index Matchers with Nulls\nDESCRIPTION: Shows how to handle null values when using haveElementAt matcher by providing explicit type parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nlistOf(\"a\", \"b\", null) should haveElementAt<String?>(2, null)\n```\n\n----------------------------------------\n\nTITLE: Creating Named Tags in Kotest\nDESCRIPTION: Demonstrates how to create tags using the NamedTag class with validation rules for tag naming.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tags.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval tag = NamedTag(\"Linux\")\n```\n\n----------------------------------------\n\nTITLE: Asserting Elements Collection Properties with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers are used to assert properties of collections of HTML elements (Elements object) in Kotlin, such as presence and count of items.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/jsoup.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nelements.shouldBePresent()\nelements.shouldBePresent(n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure in Gradle Build Script\nDESCRIPTION: This Kotlin code configures Allure in the Gradle build script, setting the version and disabling autoconfigure. This configuration is necessary when using the Allure Gradle plugin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/allure.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nallure {\n  autoconfigure = false\n  version = \"2.13.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Eval Generator in Kotest with Arrow\nDESCRIPTION: Demonstrates the extension function for creating Eval.now instances from an arbitrary generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/arrow.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nArb<A>.evalNow()\n```\n\n----------------------------------------\n\nTITLE: Importing Kotest Extra Arbs Dependency\nDESCRIPTION: Maven Central dependency required to use the extra Arbs collection in Kotest property testing. Add this dependency to your build configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/extra_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nio.kotest.extensions:kotest-property-arbs:version\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Directories in Kotest Tests\nDESCRIPTION: Example of creating a temporary directory in a Kotest FunSpec that will be automatically cleaned up after test execution. Similar to temporary files, this ensures test resources are properly managed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/tempfile.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val dir = tempdir()\n\n   test(\"a temporary dir dependent test\") {\n      //...\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry in Kotest Tests\nDESCRIPTION: This snippet demonstrates how to use the retry function in a Kotest test. It shows a test that will retry a block of code up to 4 times within a 10-minute timeout period. The retry function is used within a ShouldSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/retry.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"retry up to 4 times\") {\n      retry(4, 10.minutes) {\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in FunSpec\nDESCRIPTION: Shows how to disable tests in FunSpec using the xcontext and xtest variants. These provide a convenient way to temporarily exclude specific tests or blocks from execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n    context(\"this outer block is enabled\") {\n        xtest(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        test(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Function-based Test Names in Kotest\nDESCRIPTION: Shows how to use a naming function to generate test names dynamically based on test input data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/test_names.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData<PythagTriple>(\n    nameFn = { \"${it.a}__${it.b}__${it.c}\" },\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in ExpectSpec using xcontext and xexpect\nDESCRIPTION: Demonstrates how to disable specific tests or entire context blocks in ExpectSpec using 'xcontext' and 'xexpect' variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"this outer block is enabled\") {\n        xexpect(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        expect(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using HashCode Comparison Matcher\nDESCRIPTION: Shows how to verify that two objects have the same hash code using the haveSameHashCodeAs matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nobj1 should haveSameHashCodeAs(obj2)\n\"hello\" shouldNot haveSameHashCodeAs(\"world\")\n```\n\n----------------------------------------\n\nTITLE: Implementing KotlinX DateTime Assertions in Kotlin\nDESCRIPTION: Example of using the new KotlinX DateTime assertions module to verify a LocalDateTime's hour value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.2.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval date = LocalDateTime(2019, 2, 15, 12, 10, 0, 0)\ndate.shouldHaveHour(12)\n```\n\n----------------------------------------\n\nTITLE: Installing kotest-assertions-compiler Extension in Gradle\nDESCRIPTION: Gradle dependency configuration to add the kotest-assertions-compiler extension to a project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/compiler.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-assertions-compiler:${version}\")\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests at Runtime with SkipTestException in Kotlin\nDESCRIPTION: Demonstrates how to conditionally skip tests during runtime by throwing a SkipTestException, which is particularly useful when test execution depends on environment conditions that can't be determined at compile time.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SkipTestExceptionExample : StringSpec({\n\n  \"Test should be skipped\" {\n    if(isLocalEnvironment()) {\n      throw SkipTestException(\"Cannot run this test in local environment.\")\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default TestCaseConfig in KotlinTest\nDESCRIPTION: This example shows how to specify a default TestCaseConfig for all test cases in a Spec class in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unbounded Shrinking Mode in Kotlin\nDESCRIPTION: Example of configuring shrinking behavior to continue without bounds (versus the default 1000 iterations) when testing with a positive integer generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/shrinking.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.positiveInt().checkAll(PropTestConfig(shrinkingMode = ShrinkingMode.Unbounded)) { i ->\n    calculateProperty(i) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default TestCaseConfig for Entire Spec (Kotlin)\nDESCRIPTION: This example demonstrates how to set a default TestCaseConfig for all test cases in a Spec by overriding the defaultTestCaseConfig function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_case_config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Extension Function for Person Matcher in Kotlin\nDESCRIPTION: Defines an extension function on Person to use the composed matcher, providing a more fluent API for assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/data_class_matchers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Person.shouldBePerson(name: String, age: Int) = this shouldBe personMatcher(name, age)\n```\n\n----------------------------------------\n\nTITLE: Disabled Tests in ExpectSpec\nDESCRIPTION: Shows how to disable tests using xcontext and xexpect variants in ExpectSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"this outer block is enabled\") {\n        xexpect(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        expect(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Plugin for Kotest in Gradle (Kotlin DSL)\nDESCRIPTION: This code configures the Pitest plugin in Gradle to use Kotest as the test plugin. It sets the target classes for mutation testing. The commented line is only needed for older versions of PIT.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/pitest.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigure<PitestPluginExtension> {\n    // testPlugin.set(\"Kotest\")    // needed only with old PIT <1.6.7, otherwise having kotest-extensions-pitest on classpath is enough\n    targetClasses.set(listOf(\"my.company.package.*\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Chunking Arbitrary Values with Min/Max Size Parameters in Kotlin\nDESCRIPTION: Generates lists populated from elements of an arbitrary generator with size constraints. List sizes are randomly chosen between the specified minimum and maximum parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nArb<T>.chunked(minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Using CsvDataSource for Table Testing in Kotlin\nDESCRIPTION: Demonstrates how to use CsvDataSource to load data from a CSV file for table testing. It creates a table and uses forAll to test each row of data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_46\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CsvDataSourceTest : WordSpec() {\n  init {\n\n    \"CsvDataSource\" should {\n      \"read data from csv file\" {\n\n        val source = CsvDataSource(javaClass.getResourceAsStream(\"/user_data.csv\"), CsvFormat())\n\n        val table = source.createTable<Long, String, String>(\n            { it: Record -> Row3(it.getLong(\"id\"), it.getString(\"name\"), it.getString(\"location\")) },\n            { it: Array<String> -> Headers3(it[0], it[1], it[2]) }\n        )\n\n        forAll(table) { a, b, c ->\n          a shouldBe gt(0)\n          b shouldNotBe null\n          c shouldNotBe null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Maven\nDESCRIPTION: Adds the Kotest Testcontainers extension dependency to a Maven POM file. This is required to use Testcontainers with Kotest in Maven projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Arrow Either Generator Dependencies\nDESCRIPTION: Maven dependencies required for using Arrow generators in Kotest property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\nio.kotest.extensions:kotest-property-arrow:version\nio.arrow-kt:arrow-core:arrow-version\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit XML Reports\nDESCRIPTION: Gradle configuration to disable built-in JUnit XML reporting and set the build directory for the custom reporter. This is required for the JunitXmlReporter to work correctly.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/junit_xml.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") {\n  useJUnitPlatform()\n  reports {\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Value Assertions in Kotest\nDESCRIPTION: Methods for testing Optional values, including presence checks and empty state validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\noptional.shouldBePresent()\noptional.shouldBePresent { value -> .. }\noptional.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Defining KotlinTest Test Class Using Init Block\nDESCRIPTION: This snippet demonstrates how to define a KotlinTest test class using an init block with StringSpec. This approach allows overriding parent class methods like beforeTest and afterTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec() {\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using plusOrMinus with Percentage in Kotlin\nDESCRIPTION: A new overload for Double.plusOrMinus has been added that accepts a percentage value instead of an absolute one.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\n1.0.plusOrMinus(10.percent)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables at Project Level\nDESCRIPTION: Shows how to set environment variables for an entire project using a SystemEnvironmentProjectListener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n    override fun listeners(): List<TestListener> = listOf(SystemEnvironmentProjectListener(\"foo\", \"bar\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Temporarily Changing Default Locale and Timezone\nDESCRIPTION: Demonstrates how to use withDefaultLocale and withDefaultTimeZone extension functions to temporarily change the system's default locale and timezone during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nwithDefaultLocale(Locale.FRANCE) {\n  println(\"My locale is now France! Très bien!\")\n}\n\nwithDefaultTimeZone(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\"))) {\n  println(\"My timezone is now America/Sao_Paulo! Muito bem!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Tags in Kotlin\nDESCRIPTION: Shows how to create simple tag objects by inheriting from the Tag class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/tags.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow Generators Dependencies\nDESCRIPTION: Maven dependencies required to use Arrow generators in Kotest property testing. Includes both the core Arrow dependency and the Kotest Arrow extension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nio.kotest.extensions:kotest-property-arrow:version\nio.arrow-kt:arrow-core:arrow-version\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generators in Kotest Property Testing\nDESCRIPTION: Shows how to use exhaustive generators in Kotest property testing to ensure all combinations are executed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.2.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = checkAll(\n   Exhaustive.ints(0..5),\n   Exhaustive.ints(0..5),\n   Exhaustive.ints(0..5)\n) { ... }\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions in Kotest\nDESCRIPTION: Demonstrates how to chain multiple assertions together using Kotest's fluent assertion style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.3.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval employees: List<Employee> = ...\nemployees.shouldBeSorted()\n          shouldHaveSize(4)\n          shouldContain(Employee(\"Sam\", \"Chicago\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration for adding Kotest Testcontainers extension to the project. It specifies the artifact coordinates for the extension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers_46x.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Execution to a Kotest Spec\nDESCRIPTION: Demonstrates how to use the EnabledIf annotation to conditionally execute a spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.3.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(EnabledIfMidnight::class)\nclass EnabledIfTest : FunSpec() {\n   init {\n      test(\"tis midnight when the witches roam free\") {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Valid Validation Cases\nDESCRIPTION: Example of testing a valid user profile using Kotest's shouldBeValid matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/konform.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval alice = UserProfile(\"Alice\", 25)\nvalidateUser shouldBeValid user1\n```\n\n----------------------------------------\n\nTITLE: Randomly Selecting from Multiple Arbitraries in Kotest\nDESCRIPTION: Uses Arb.choice(arbs) to randomly select one of the given arbitraries and use it to generate the next element.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_39\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.choice(arbs)\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock Dependency for Kotest\nDESCRIPTION: Adds the Kotest WireMock extension dependency to the project build file. This brings WireMockListener into scope for use in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/wiremock.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-extensions-wiremock:{version}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON structure examples\nDESCRIPTION: Examples of two JSON structures that would be considered equal by the matcher despite having different formatting and property order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/json/content.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"sam\",\n   \"location\": \"chicago\",\n   \"age\" : 41\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\" : 41, \"name\": \"sam\", \"location\": \"chicago\" }\n```\n\n----------------------------------------\n\nTITLE: Generating Boolean Arrays in Kotlin with Kotest\nDESCRIPTION: Shows how to create an Arb (arbitrary) generator for boolean arrays in Kotest. The generator allows specifying both the length of the array and the content generator for the boolean values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.booleanArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Asserting Callable Member Parameters in Kotlin\nDESCRIPTION: These matchers are used to assert the parameters of Kotlin callable members, including their types and names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nkcallable.shouldAcceptParameters(parameters)\nkcallable.shouldAcceptParameters(parameters) { block }\nkcallable.shouldHaveParametersWithName(parameters)\nkcallable.shouldHaveParametersWithName(parameters) { block }\n```\n\n----------------------------------------\n\nTITLE: Using Clues for Enhanced Test Failure Messages\nDESCRIPTION: Demonstrates the usage of withClue and asClue helpers to provide additional context in test assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") { user.name shouldNotBe null }\n\ndata class HttpResponse(val status: Int, body: String)\nval response = HttpResponse(200, \"the content\")\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Klock Matchers in Markdown Table\nDESCRIPTION: This code snippet presents a markdown table listing various Klock matchers along with their descriptions. The table includes matchers for both date and time assertions, covering comparisons and property checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/klock.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Matcher | Description    |\n| ---------- | --- |\n| `date.shouldHaveSameYear(otherDate)` | Asserts that the date has the same year as the given date. |\n| `date.shouldHaveSameMonth(otherDate)` | Asserts that the date has the same month as the given date. |\n| `date.shouldHaveSameDay(otherDate)` | Asserts that the date has the same day of the month as the given date. |\n| `date.shouldBeBefore(otherDate)` | Asserts that the date is before the given date. |\n| `date.shouldBeAfter(otherDate)` | Asserts that the date is after the given date. |\n| `date.shouldBeBetween(firstDate, secondDate)` | Asserts that the date is between firstdate and seconddate. |\n| `date.shouldHaveYear(year)` | Asserts that the date have correct year. |\n| `date.shouldHaveMonth(month)` | Asserts that the date have correct month. |\n| `date.shouldHaveDay(day)` | Asserts that the date have correct day of year. |\n| `date.shouldHaveHour(hour)` | Asserts that the date have correct hour. |\n| `date.shouldHaveMinute(Minute)` | Asserts that the date have correct minute. |\n| `date.shouldHaveSecond(second)` | Asserts that the date have correct second. |\n| `time.shouldHaveSameHoursAs(time)` | Asserts that the time has the same hours as the given time. |\n| `time.shouldHaveHours(hours)` | Asserts that the time has the given hours. |\n| `time.shouldHaveSameMinutesAs(time)` | Asserts that the time has the same minutes as the given time. |\n| `time.shouldHaveMinutes(minutes)` | Asserts that the time has the given minutes. |\n| `time.shouldHaveSameSeconds(time)` | Asserts that the time has the same seconds as the given time. |\n| `time.shouldHaveSeconds(seconds)` | Asserts that the time has the given seconds. |\n| `time.shouldHaveSameMillisecondsAs(time)` | Asserts that the time has the same milliseconds as the given time. |\n| `time.shouldHaveMilliseconds(millis)` | Asserts that the time has the given millis. |\n| `time.shouldBeBefore(time)` | Asserts that the time is before the given time. |\n| `time.shouldBeAfter(time)` | Asserts that the time is after the given time. |\n| `time.shouldBeBetween(time, time)` | Asserts that the time is between the two given times. |\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing to JVM/Gradle Projects\nDESCRIPTION: Adds the Kotest property testing dependency to a JVM project using Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-property:$version'\n```\n\n----------------------------------------\n\nTITLE: Sample Configuration Dump Output\nDESCRIPTION: Example of the configuration dump output showing various Kotest settings including parallelization, timeouts, execution order, and enabled extensions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/config_dump.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n~~~ Kotest Configuration ~~~\n-> Parallelization factor: 1\n-> Concurrent specs: null\n-> Global concurrent tests: 1\n-> Dispatcher affinity: true\n-> Coroutine debug probe: false\n-> Spec execution order: Lexicographic\n-> Default test execution order: Sequential\n-> Default test timeout: 600000ms\n-> Default test invocation timeout: 600000ms\n-> Default isolation mode: SingleInstance\n-> Global soft assertions: false\n-> Write spec failure file: false\n-> Fail on ignored tests: false\n-> Fail on empty test suite: false\n-> Duplicate test name mode: Warn\n-> Remove test name whitespace: false\n-> Append tags to test names: false\n-> Extensions\n  - io.kotest.engine.extensions.SystemPropertyTagExtension\n```\n\n----------------------------------------\n\nTITLE: Implementing CharSequence Inspectors in Kotest\nDESCRIPTION: Implements inspectors for CharSequence. This adds new functionality for testing character sequences, likely providing methods to inspect and assert on their contents.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nImplement CharSequence Inspectors (#2886)\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Example in Kotlin\nDESCRIPTION: A simple assertion example showing how a basic equality check might fail without providing enough context.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/clues.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nusername shouldBe \"sksamuel\"\n```\n\n----------------------------------------\n\nTITLE: Adding Ktor Matchers Dependency - Kotlin\nDESCRIPTION: Gradle dependency declaration for adding Ktor matchers to a Kotlin project using the implementation configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.kotest.extensions:kotest-assertions-ktor:version\")\n```\n\n----------------------------------------\n\nTITLE: Registering Embedded Kafka Listener in Kotest FunSpec with Init Block\nDESCRIPTION: Alternative approach to register the embeddedKafkaListener in a Kotest FunSpec using the init block. This initializes an embedded Kafka instance for testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/kafka.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec() {\n  init {\n    listener(embeddedKafkaListener)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Configuration Syntax\nDESCRIPTION: Demonstrates the new syntax for configuring test cases in KotTest 3.1.x, showing both old and new approaches.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n\"this is a test\" {\n}.config(...)\n\n\"this is a test\".config(...) {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Tests in Kotest DescribeSpec\nDESCRIPTION: This snippet demonstrates how to define nested tests using Kotest's DescribeSpec. It shows a simple structure with a describe block containing two test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/output.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: DescribeSpec({\n  describe(\"describe 1\"){\n    it(\"test 1\"){}\n    it(\"test 2\"){}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dispatcher Globally via ProjectConfig\nDESCRIPTION: Shows how to enable TestDispatcher globally for all tests in a module using ProjectConfig configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override var coroutineTestScope = true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Value from Kotest Arbitrary Generator\nDESCRIPTION: Demonstrates how to get the next value from an Arb generator using either the default Random or a custom Random source.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genops.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval arbA: Arb<A> = ...\nval a = arbA.next() // use Random.Default\nval a2 = arbA.next(rs) // pass in Random\n```\n\n----------------------------------------\n\nTITLE: Character Generators in Kotest\nDESCRIPTION: Generators for producing characters from specified ranges and character arrays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.char(range1, range2,...)\nArb.char(List<CharRange>)\nArb.charArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin\nDESCRIPTION: Maven configuration for Surefire plugin to enable JUnit test execution\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/setup.mdx#2025-04-13_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Customizing Statistics Reporter in Kotest\nDESCRIPTION: Demonstrates how to set a custom StatisticsReporter implementation using the PropertyTesting global configuration object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/statistics.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyStatisticsReporter : object : StatisticsReporter { ... }\nPropertyTesting.statisticsReporter = MyStatisticsReporter\n```\n\n----------------------------------------\n\nTITLE: Endo Generator in Kotest with Arrow\nDESCRIPTION: Generator for Arrow's Endo type, wrapping values from an underlying arbitrary generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.endo(arb)\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Pythagorean Triple Testing in Kotlin\nDESCRIPTION: Creates a data class to hold input values for Pythagorean triple tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.3.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Creating an Alternative Composed Password Matcher using Matcher.any in Kotlin\nDESCRIPTION: This snippet shows how to create a composed matcher using Matcher.any() instead of Matcher.all(), which passes if any of the constituent matchers pass.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/composed_matchers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval passwordMatcher = Matcher.any(\n   containADigit(), contain(Regex(\"[a-z]\")), contain(Regex(\"[A-Z]\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Selectively Disabling Individual Tests using xit\nDESCRIPTION: Demonstrates how to disable specific tests within an enabled test block using the 'xit' prefix while keeping other tests enabled.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/xmethods.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  describe(\"this block is enabled\") {\n    xit(\"will not run\") {\n      // disabled test\n    }\n    it(\"will run\") {\n       // enabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Name Pattern via Gradle Command Line\nDESCRIPTION: Command to run tests with class names ending with 'IntegrationTest' using Gradle's --tests command line option.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/gradle.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradle test --tests '*IntegrationTest'\n```\n\n----------------------------------------\n\nTITLE: HTML-Specific Matchers in KotlinTest JSoup\nDESCRIPTION: Assertion functions for HTML-specific attributes and structures including id, class, src, and href verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/jsoup.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nelement.shouldHaveId(id)\nelement.shouldHaveClass(class)\nelement.shouldHaveSrc(src)\nelement.shouldHaveHref(href)\nelement.shouldHaveElementWithId(id)\nelement.shouldHaveChildWithClass(id)\n```\n\n----------------------------------------\n\nTITLE: Implementing NoSystemOutListener in Kotest Test\nDESCRIPTION: Example showing how to use NoSystemOutListener extension to prevent writing to standard output during tests. This extension will throw an error if any output is written to standard out.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/extensions/examples.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : DescribeSpec({\n\n    listener(NoSystemOutListener)\n\n    describe(\"All these tests should not write to standard out\") {\n        it(\"silence in the court\") {\n          println(\"boom\") // failure\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging Project-Wide in Kotest\nDESCRIPTION: Demonstrates how to enable coroutine debugging for all tests in a project by configuring it in the ProjectConfig class. This setting applies globally to all tests across the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val coroutineDebugProbes = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout Settings in Kotest DescribeSpec\nDESCRIPTION: Shows how to set timeout configurations at both spec and individual test case levels using DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.2.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   timeout = 1000\n\n   describe(\"I will timeout in 1000 millis\") {\n      it(\"And so will I\") { }\n      it(\"But I'm a little faster\").config(timeout = 500.milliseconds) { }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Random List Permutations with Kotest Arb\nDESCRIPTION: Creates random permutations of a given list. This can be useful for testing functions that should work regardless of element order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.shuffle(list)\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Factory for IndexedSeq in Kotlin\nDESCRIPTION: This snippet shows how to create a test factory function that generates tests for any implementation of IndexedSeq.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_factories.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun <T> indexedSeqTests(name: String, empty: IndexedSeq<T>) = wordSpec {\n   name should {\n      \"increase size as elements are added\" {\n         empty.size() shouldBe 0\n         val plus1 = empty.add(1)\n         plus1.size() shouldBe 1\n         val plus2 = plus1.add(2)\n         plus2.size() shouldBe 2\n      }\n      \"contain an element after it is added\" {\n         empty.contains(1) shouldBe false\n         empty.add(1).contains(1) shouldBe true\n         empty.add(1).contains(2) shouldBe false\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML-specific Attributes with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers focus on HTML-specific attributes and structures, allowing assertions on ids, classes, src and href attributes, and child elements with specific properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/jsoup.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveId(id)\nelement.shouldHaveClass(class)\nelement.shouldHaveSrc(src)\nelement.shouldHaveHref(href)\nelement.shouldHaveElementWithId(id)\nelement.shouldHaveChildWithClass(id)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Arbitrary Generator for Integers in Kotest\nDESCRIPTION: Demonstrates how to create a basic arbitrary generator using the arbitrary builder function. This example generates random integers between 3 and 6 using the provided RandomSource.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/customgens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval sillyArb = arbitrary { rs: RandomSource ->\n   rs.random.nextInt(3..6)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample Kotest Configuration Dump Output\nDESCRIPTION: Example output showing the Kotest configuration when the dump feature is enabled. Displays various settings including parallelization, timeout values, test execution order, and active extensions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/config_dump.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n~~~ Kotest Configuration ~~~\n-> Parallelization factor: 1\n-> Concurrent specs: null\n-> Global concurrent tests: 1\n-> Dispatcher affinity: true\n-> Coroutine debug probe: false\n-> Spec execution order: Lexicographic\n-> Default test execution order: Sequential\n-> Default test timeout: 600000ms\n-> Default test invocation timeout: 600000ms\n-> Default isolation mode: SingleInstance\n-> Global soft assertions: false\n-> Write spec failure file: false\n-> Fail on ignored tests: false\n-> Fail on empty test suite: false\n-> Duplicate test name mode: Warn\n-> Remove test name whitespace: false\n-> Append tags to test names: false\n-> Extensions\n  - io.kotest.engine.extensions.SystemPropertyTagExtension\n```\n\n----------------------------------------\n\nTITLE: Configuring Eventually with Iteration Listener in Kotlin\nDESCRIPTION: Example demonstrating how to attach a listener function that is called after each iteration, providing visibility into the state of the test execution and allowing for custom logging or monitoring.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/concurrency/eventually.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5.seconds()\n  listener = { println(\"iteration ${it.times} returned ${it.result}\") }\n}) {\n  string += \"x\"\n  string\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Cases Method Signature Change\nDESCRIPTION: Example showing the modification of the edge cases method signature in Arb class implementations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Old\nfun edgecases(): List<A>\n\n// New\nfun edgecase(rs: RandomSource): A?\n```\n\n----------------------------------------\n\nTITLE: Generating Exhaustive A-Z Strings with Kotest Arbitrary\nDESCRIPTION: Uses Exhaustive.azstring(range) to generate all A-Z strings within the given range. For example, if the range is 1..2, it would include 'a', 'b', 'c', ..., 'yz', 'zz'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_31\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.azstring(range)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Test Lifecycle Mode\nDESCRIPTION: Shows how to configure the Spring test lifecycle mode for nested test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/spring.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringTestExtension(SpringTestLifecycleMode.Root))\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random LocalDate Objects in Kotlin\nDESCRIPTION: Creates random LocalDate instances with years falling within the specified range. This generator is designed for the JVM platform in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_39\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.localDate(ranges)\n```\n\n----------------------------------------\n\nTITLE: Customized Property Testing Iterations in Kotest\nDESCRIPTION: Shows how to specify a custom number of test iterations (2300) for property testing using forAll function to verify string concatenation properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n  init {\n\n    \"String size\" {\n      forAll(2300) { a: String, b: String ->\n        (a + b).length == a.length + b.length\n      }\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Task for Jacoco\nDESCRIPTION: Modifies the test task to be finalized by the Jacoco report generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/integrations/jacoco.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  ...\n  finalizedBy(tasks.jacocoTestReport)\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveSize Matcher in Kotlin for KotlinTest\nDESCRIPTION: Demonstrates the use of the haveSize matcher for collections in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nmyCollection should haveSize(4)\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Invocation Timeout in Kotest\nDESCRIPTION: Example of setting an invocation timeout for all tests in a spec by assigning the invocationTimeout property at the spec level. All test invocations will be limited to 25 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   invocationTimeout = 25.milliseconds\n\n   test(\"foo\") {\n      // test here\n   }\n\n   test(\"bar\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Gradle Plugin\nDESCRIPTION: Kotlin-based Gradle configuration to add the Allure Gradle plugin to your build script.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/allure.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  ...\n  id(\"io.qameta.allure\") version \"2.8.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using withConstantNow Function in Kotlin with Kotest\nDESCRIPTION: This snippet demonstrates how to use the withConstantNow function to freeze time during test execution. It creates a LocalDateTime instance and ensures that subsequent calls to LocalDateTime.now() return the same value, even after a delay.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/instant.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval foreverNow = LocalDateTime.now()\n\nwithConstantNow(foreverNow) {\n  LocalDateTime.now() shouldBe foreverNow\n  delay(10) // Code is taking a small amount of time to execute, but `now` changed!\n  LocalDateTime.now() shouldBe foreverNow\n}\n\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Boolean Functions\nDESCRIPTION: Example of property testing using forAll with functions returning boolean values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  forAll(Gen.string(), Gen.string(), { a, b ->\n    (a + b).startsWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Property Testing for JVM/Gradle\nDESCRIPTION: Gradle dependency configuration for adding Kotest property testing support to a JVM project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n   testImplementation(\"io.kotest:kotest-property:$version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform in Gradle\nDESCRIPTION: Basic Gradle configuration to enable JUnit platform for Kotest with optional test logging setup.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  useJUnitPlatform()\n}\n\ntest {\n    useJUnitPlatform()\n    testLogging {\n        events \"FAILED\", \"SKIPPED\", \"STANDARD_OUT\", \"STANDARD_ERROR\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Tests with Tags in Kotest StringSpec\nDESCRIPTION: This example demonstrates how to mark individual test cases with tags using the config function in a Kotest StringSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/tags.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Ktor Assertions Dependency in Gradle (Groovy DSL)\nDESCRIPTION: This snippet demonstrates how to add the Kotest Ktor assertions dependency to a Gradle project using the Groovy DSL. It shows the implementation line for including the dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/ktor.md#2025-04-13_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation \"io.kotest.extensions:kotest-assertions-ktor:version\"\n```\n\n----------------------------------------\n\nTITLE: Gradle Command Line Test Filtering\nDESCRIPTION: Examples of filtering tests using Gradle's --tests command line option to match package or test name patterns.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/gradle.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngradle test --tests 'com.sksamuel.somepackage*'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngradle test --tests '*IntegrationTest'\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Ktor Assertions Dependency in Gradle (Kotlin DSL)\nDESCRIPTION: This snippet shows how to add the Kotest Ktor assertions dependency to a Gradle project using the Kotlin DSL. It includes the implementation line for adding the dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.kotest.extensions:kotest-assertions-ktor:version\")\n```\n\n----------------------------------------\n\nTITLE: Implementing NoSystemOut/Err Listeners in Kotlin Tests\nDESCRIPTION: This snippet demonstrates how to use NoSystemOutListener and NoSystemErrListener to catch and test System.out and System.err output. When these listeners are added, any attempt to write to these streams will throw exceptions that can be tested.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NoSystemOutOrErrTest : StringSpec() {\n\n  override fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n\n  init {\n\n    \"System.out should throw an exception when the listener is added\" {\n      shouldThrow<SystemOutWriteException> {\n        System.out.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n\n    \"System.err should throw an exception when the listener is added\" {\n      shouldThrow<SystemErrWriteException> {\n        System.err.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Dates using Kotlinx DateTime in Kotest\nDESCRIPTION: Generates LocalDate instances with the year between the given range and other fields randomly. Requires the 'io.kotest.extensions:kotest-property-datetime' module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_41\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.date(yearRange)\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging Project-Wide\nDESCRIPTION: Example showing how to enable coroutine debugging for all tests in a project by configuring coroutineDebugProbes in ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val coroutineDebugProbes = true\n}\n```\n\n----------------------------------------\n\nTITLE: FunSpec Test Disabling Example in Kotlin\nDESCRIPTION: Shows how to use the new 'x' prefix variants to disable tests in FunSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.1.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFunSpec : FunSpec({\n  xtest(\"a disabled test\") {\n    // this test will not be invoked\n  }\n  xcontext(\"this context is disabled\") {\n     test(\"and so this test is by extension\") {\n     }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Project-wide Configuration for Unprintable Characters\nDESCRIPTION: Shows how to configure handling of unprintable characters globally using kotest.properties file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/config.md#2025-04-13_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nkotest.proptest.arb.string.output-hex-for-unprintable-chars=true\n```\n\n----------------------------------------\n\nTITLE: Skipping a Test Using Bang in Kotest StringSpec\nDESCRIPTION: This snippet illustrates how to use the '!' prefix to skip a specific test in a Kotest StringSpec. The test prefixed with '!' will be ignored, while others will run normally.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/focus.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Either Type Matchers\nDESCRIPTION: Shows matchers for Arrow's Either type, allowing verification of Right and Left cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nEither.right(\"boo\") should beRight(\"boo\")\nEither.left(\"boo\") should beLeft(\"boo\")\n```\n\n----------------------------------------\n\nTITLE: Deprecated Default Test Case Config in Kotlin\nDESCRIPTION: Shows the deprecated way of setting default test case configuration in a Kotest spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_5.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n    override fun defaultTestCaseConfig() = TestCaseConfig(tags = setOf(Foo, Bar), timeout = 100.seconds)\n    test(\"foo\") {\n      // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Property Testing with Strings in Kotlin using Kotest\nDESCRIPTION: Demonstrates basic property testing using assertAll to verify string concatenation length properties. The test runs 1000 times by default with random string combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n  init {\n\n    \"String size\" {\n      assertAll({ a: String, b: String ->\n        (a + b).length shouldBe a.length + b.length\n      })\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec Tests in Kotlin\nDESCRIPTION: Demonstrates how to use StringSpec for writing tests using string descriptions. Shows basic assertions and test configuration with invocations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  init {\n    \"strings.size should return size of string\" {\n      \"hello\".length shouldBe 5\n      \"hello\" should haveLength(5)\n    }\n\n    \"strings should support config\" {\n      \"hello\".length shouldBe 5\n    }.config(invocations = 5)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Generator for KotlinTest\nDESCRIPTION: This snippet demonstrates how to create a custom generator for a Person class in KotlinTest. It implements the Gen<T> interface with constants and random functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\nclass PersonGenerator : Gen<Person> {\n    override fun constants() = emptyList<Person>()\n    override fun random() = generateSequence {\n        Person(Gen.string().random().first(), Gen.int().random().first())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Object Validation with Error Messages\nDESCRIPTION: Demonstrates how to assert that an object fails validation and check for specific error messages using the shouldBeInvalid and shouldContainError matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/konform.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval bob = UserProfile(\"bob\", 18)\nvalidateUser.shouldBeInvalid(a) {\n  it.shouldContainError(UserProfile::fullName, \"must have at least 4 characters\")\n  it.shouldContainError(UserProfile::age, \"must be at least '21'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Comparable Object Assertions in Kotlin\nDESCRIPTION: Comparison functions for objects implementing Comparable interface.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncomp.shouldBeLessThan(other)\ncomp.shouldBeLessThanOrEqualTo(other)\ncomp.shouldBeEqualComparingTo(other)\ncomp.shouldBeEqualComparingTo(other, comparator)\ncomp.shouldBeGreaterThan(other)\ncomp.shouldBeGreaterThanOrEqualTo(other)\n```\n\n----------------------------------------\n\nTITLE: Generating Strings with Specific Characters using Kotest Arbitrary\nDESCRIPTION: Uses Arb.string(range, acceptableCharacters) to generate random strings containing only provided characters, with a size chosen from the given range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.string(range, acceptableCharacters)\n```\n\n----------------------------------------\n\nTITLE: Creating Tests with AnnotationSpec in Kotlin\nDESCRIPTION: Shows how to use AnnotationSpec to create tests using annotations similar to JUnit. Tests are defined as functions annotated with @Test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_42\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n  @Test\n  fun test1() {\n\n  }\n\n  @Test\n  fun test2() {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec Level Timeouts in Kotest\nDESCRIPTION: Example showing how to set timeout configurations at both spec and individual test levels\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.2.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   timeout = 1000\n\n   describe(\"I will timeout in 1000 millis\") {\n      it(\"And so will I\") { }\n      it(\"But I'm a little faster\").config(timeout = 500.milliseconds) { }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Kotlinx DateTime Generation with Ranges\nDESCRIPTION: Creates LocalDateTime instances with configurable ranges for year, hour, minute, and second fields.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_54\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.datetime(yearRange, hourRange, minuteRange, secondRage)\n```\n\n----------------------------------------\n\nTITLE: Implementing Kotest Property Testing with Maven (JVM)\nDESCRIPTION: Maven dependency configuration for adding Kotest property testing support in a JVM project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency with Maven for JVM\nDESCRIPTION: Maven dependency configuration for including the Kotest property-based testing library in a JVM project. This XML snippet adds the necessary dependency to your pom.xml file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependencies with Maven for JVM\nDESCRIPTION: This snippet demonstrates how to add the kotest-property-jvm dependency to a JVM project using Maven. The dependency is added with test scope to provide property testing capabilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Allure Results Directory in Gradle Test Task\nDESCRIPTION: This Kotlin snippet shows how to set the Allure results directory system property in a Gradle test task configuration. This is necessary when not using the Gradle plugin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/allure.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") { // or \"jvmTest\" etc\n   useJUnitPlatform()\n   systemProperty(\"allure.results.directory\", project.buildDir.toString() + \"/allure-results\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PropTestListener for Property Tests in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a custom PropTestListener and use it with PropTestConfig in a Kotest property test. The listener defines setup and teardown operations that run before and after each property test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval listener = object : PropTestListener {\n  override suspend fun beforeTest() {\n    println(\"Startup\")\n  }\n\n  override suspend fun afterTest() {\n    println(\"Shutdown\")\n  }\n}\n\nval propConfig = PropTestConfig(listeners = listOf(listener))\n\ncheckAll<String, String>(10, propConfig) { a, b ->\n  a.length + b.length shouldBe (a + b).length\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Factory Inclusion Example\nDESCRIPTION: Demonstration of including multiple test factories alongside regular tests in a spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/test_factories.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HugeTestFile : FunSpec({\n\n   test(\"first test\") {\n     // test here\n   }\n\n   include(factory1(\"foo\"))\n   include(factory2(1, 4))\n\n   test(\"another test\") {\n     //  testhere\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Tests with ExpectSpec in Kotlin\nDESCRIPTION: Demonstrates how to create tests using ExpectSpec, which allows using 'context' and 'expect' keywords for structuring tests in a nested hierarchy.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ExpectSpecExample : ExpectSpec() {\n  init {\n    context(\"some context\") {\n      expect(\"some test\") {\n        // test here\n      }\n      context(\"nested context even\") {\n        expect(\"some test\") {\n          // test here\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Pitest Plugin (XML)\nDESCRIPTION: This XML snippet shows how to configure the Maven Pitest plugin in a pom.xml file. It includes setting up the plugin group, artifact, version, and basic configuration options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/pitest.md#2025-04-13_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.pitest</groupId>\n    <artifactId>pitest-maven</artifactId>\n    <version>${pitest-maven.version}</version>\n    <configuration>\n        <targetClasses>...</targetClasses>\n        <coverageThreshold>...</coverageThreshold>\n        ... other configurations as needed        \n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties in Kotest Test (Kotlin)\nDESCRIPTION: Demonstrates how to access a property set in kotest.properties file within a Kotest test using DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/intellij/props.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FooTest : DescribeSpec() {\n  init {\n    describe(\"after adding kotest.properties\") {\n      it(\"foo should be set\") {\n         System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BehaviorSpec with Enhanced Nesting in Kotlin\nDESCRIPTION: BehaviorSpec now supports additional nesting with 'And' keyword between other keywords, allowing for more flexible and expressive test structures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyBehaviorTest : BehaviorSpec({\n  given(\"a condition\") {\n    and(\"another condition\") {\n      when(\"an action occurs\") {\n        then(\"a result is expected\") {\n          // Assertion\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using LocalDate Matchers in Kotest with Kotlinx Datetime\nDESCRIPTION: These matchers can be used to assert various properties of LocalDate objects, such as comparing years, months, days, and relative positions in time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/kotlinx-datetime.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameMonthAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameDayAs(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeBefore(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeAfter(otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeWithin(period, otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeWithin(duration, otherDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldBeBetween(firstDate, secondDate)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveYear(year)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveMonth(month)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfYear(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfMonth(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveDayOfWeek(day)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveHour(hour)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveMinute(Minute)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSecond(second)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveNano(nano)\n```\n\n----------------------------------------\n\nTITLE: Implementing EnabledCondition for Midnight Execution in Kotest\nDESCRIPTION: Creates a custom EnabledCondition that allows test execution only at midnight.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.3.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EnabledIfMidnight : EnabledCondition {\n   override fun enabled(specKlass: KClass<out Spec>): Boolean = LocalTime.now().hour == 0\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core for Multiplatform (Gradle)\nDESCRIPTION: Adds the Kotest assertions core dependency to a multiplatform project's common test source set using Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\n----------------------------------------\n\nTITLE: Until Function with Fibonacci Interval in Kotest\nDESCRIPTION: This example shows how to use the until function with a fibonacci interval starting at 100 milliseconds, which increases the delay between checks after each failure, reducing load on the system under test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/until.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 100.milliseconds.fibonacci()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message with String Clue\nDESCRIPTION: The improved error message that includes the clue text when the test fails, providing better context for debugging.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nName should be present\n<null> should not equal <null>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for KotlinTest\nDESCRIPTION: This snippet shows how to configure a Gradle build file to use KotlinTest with JUnit Platform. It includes setting up the test task and adding the KotlinTest dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  useJUnitPlatform()\n}\n\ndependencies {\n  testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.2.1'\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Generator\nDESCRIPTION: Randomly selects constants from a given enum type for property-based testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.enum<T>()\n```\n\n----------------------------------------\n\nTITLE: Collecting Basic Statistics with Enum Values in Kotest\nDESCRIPTION: Example showing how to collect statistics on RoundingMode enum values in a property test using the collect() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/statistics.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n  collect(mode)\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Manager at Test Level\nDESCRIPTION: Shows how to set a security manager for an entire test class using a SecurityManagerListener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n    override fun listeners() = listOf(SecurityManagerListener(myManager))\n\n    init {\n        // Use my security manager\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher with Kotest Assertions in Kotlin\nDESCRIPTION: Shows how to use the custom string length matcher with Kotest's should and shouldNot infix functions for positive and negative assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/custom.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should haveLength(9)\n\"hello bar\" shouldNot haveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest for Kotlin/Native Projects\nDESCRIPTION: Sets up a Kotlin multiplatform project for native testing with Kotest. Includes plugin and dependency configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/quick_start.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    linuxX64() // can add any supported native targets such as linux, mac, windows etc\n  }\n}\nsourceSets {\n  val commonTest by getting {\n    dependencies {\n      implementation(\"io.kotest:kotest-framework-engine:$version\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collection Inspectors\nDESCRIPTION: Example of using collection inspectors to test multiple elements against assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"your test case\" {\n    val xs = listOf(\"aa_1\", \"aa_2\", \"aa_3\")\n    xs.forExactly(3) {\n      it.shouldContain(\"_\")\n      it.shouldStartWith(\"aa\")\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Example in Kotlin\nDESCRIPTION: A simple assertion using Kotest's shouldBe matcher to compare a username.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/clues.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nusername shouldBe \"sksamuel\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Target Dependencies\nDESCRIPTION: Sets up Kotlin Multiplatform configuration for JavaScript testing with Kotest engine dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/quick_start.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) { \n      browser() \n      nodejs() \n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Configuration Dump in Gradle with Kotlin\nDESCRIPTION: Shows how to enable the Kotest configuration dump feature by setting the required system property in a Gradle build file using Kotlin DSL. This is added to the test task configuration block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/config_dump.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntest {\n  systemProperty \"kotest.framework.dump.config\", \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating A-Z Strings in Kotest\nDESCRIPTION: Returns all A-Z strings within a specified range. For example, range 1..2 would include 'a', 'b', 'c', ..., 'yz', 'zz'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.azstring(range)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit XML Reports\nDESCRIPTION: Shows how to configure Gradle to disable its default JUnit XML report generation and set the build directory property needed by Kotest's JunitXmlReporter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/junit_xml.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") {\n  useJUnitPlatform()\n  reports {\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Using autoClose for Resource Management in KotlinTest\nDESCRIPTION: Example of using autoClose feature to automatically close resources that implement Closeable interface. This helps with proper resource cleanup during testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_43\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kotest Engine Configuration Properties in Kotlin\nDESCRIPTION: Contains constant definitions for all system properties used to configure the Kotest testing framework. These properties control various aspects like test filtering, timeout settings, parallelism, assertion modes, and framework behavior customization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/config_props.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotest.core.internal\n\nobject KotestEngineProperties {\n\n   const val scriptsEnabled = \"kotest.framework.scripts.enabled\"\n\n   const val dumpConfig = \"kotest.framework.dump.config\"\n\n   /**\n    * Sets the tag expression that determines included/excluded tags.\n    */\n   const val tagExpression = \"kotest.tags\"\n\n   const val excludeTags = \"kotest.tags.exclude\"\n\n   const val includeTags = \"kotest.tags.include\"\n\n   /**\n    * A regex expression that is used to match the test [io.kotest.core.descriptors.Descriptor]'s path\n    * to determine if a test should be included in the test plan or not.\n    */\n   const val filterTests = \"kotest.filter.tests\"\n\n   /**\n    * A regex expression that is used to match the [io.kotest.mpp.bestName] of a class\n    * to determine if a spec should be included in the test plan or not.\n    */\n   const val filterSpecs = \"kotest.filter.specs\"\n\n   const val propertiesFilename = \"kotest.properties.filename\"\n\n   /**\n    * If set to true, then source ref's will not be created for test cases.\n    * This may speed up builds (as the engine will not need to create stack traces to\n    * generate line numbers) but will also reduce functionality in the intellij plugin\n    * (by limiting the ability to drill directly into the test inside a file).\n    */\n   const val disableSourceRef = \"kotest.framework.sourceref.disable\"\n\n   /**\n    * If set to true, disables the use of '!' as a prefix to disable tests.\n    */\n   const val disableBangPrefix = \"kotest.bang.disable\"\n\n   /**\n    * The default [io.kotest.core.spec.IsolationMode] for specs.\n    */\n   const val isolationMode = \"kotest.framework.isolation.mode\"\n\n   /**\n    * The default [io.kotest.core.test.AssertionMode] for tests.\n    */\n   const val assertionMode = \"kotest.framework.assertion.mode\"\n\n   /**\n    * The default parallelism for specs.\n    */\n   const val parallelism = \"kotest.framework.parallelism\"\n\n   /**\n    * The default timeout for test cases.\n    */\n   const val timeout = \"kotest.framework.timeout\"\n\n   /**\n    * The default timeout for the entire test suite.\n    */\n   const val projectTimeout = \"kotest.framework.projecttimeout\"\n\n   const val logLevel = \"kotest.framework.loglevel\"\n\n   /**\n    * The default timeout for each invocation of a test case.\n    */\n   const val invocationTimeout = \"kotest.framework.invocation.timeout\"\n\n   const val concurrentSpecs = \"kotest.framework.spec.concurrent\"\n\n   const val concurrentTests = \"kotest.framework.test.concurrent\"\n\n   /**\n    * Disable scanning the classpath for configuration classes by setting this property to true\n    */\n   const val disableConfigurationClassPathScanning = \"kotest.framework.classpath.scanning.config.disable\"\n\n   /**\n    * Specify a fully qualified name to use for project config.\n    * This class will be instantiated via reflection.\n    */\n   const val configurationClassName = \"kotest.framework.config.fqn\"\n\n   /**\n    * Disable scanning the classpath for listeners with @AutoScan by setting this property to true\n    */\n   const val disableAutoScanClassPathScanning = \"kotest.framework.classpath.scanning.autoscan.disable\"\n\n   const val allowMultilineTestName = \"kotest.framework.testname.multiline\"\n\n   /**\n    *  If set -> filter testCases by this severity level and higher, else running all\n    */\n   const val testSeverity = \"kotest.framework.test.severity\"\n\n   /**\n    * Enable assert softly globally.\n    * */\n   const val globalAssertSoftly = \"kotest.framework.assertion.globalassertsoftly\"\n\n   /**\n    * Appends all tags associated with a test case to its display name.\n    * */\n   const val testNameAppendTags = \"kotest.framework.testname.append.tags\"\n\n   /**\n    * Controls the [io.kotest.core.names.DuplicateTestNameMode] mode.\n    */\n   const val duplicateTestNameMode = \"kotest.framework.testname.duplicate.mode\"\n\n   const val disableJarDiscovery = \"kotest.framework.discovery.jar.scan.disable\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extension Function Style Matchers in KoTest\nDESCRIPTION: Examples of using the new extension function style matchers in KoTest 3.1.x, which is the preferred style moving forward as it allows for better IDE discovery.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nfile.shouldExist()\n\nor\n\nlistOf(1, 2).shouldContainNull()\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration for adding Kotest Testcontainers integration to the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers_46x.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin for Kotest\nDESCRIPTION: XML configuration for Maven's Surefire plugin to run Kotest tests. This is a prerequisite for using Kotest with Maven projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-surefire-plugin</artifactId>\n    <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Using autoClose in Kotlin for KotlinTest\nDESCRIPTION: Demonstrates the use of autoClose for automatic resource closing in KotlinTest. Fields of type Closeable can be registered for automatic closing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Classes for Complex Matching\nDESCRIPTION: Defines the data structures needed for demonstrating complex object matching.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/composed_matchers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(\n  val name: String,\n  val age: Int,\n  val address: Address,\n)\n\ndata class Address(\n  val city: String,\n  val street: String,\n  val buildingNumber: String,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner in Maven\nDESCRIPTION: Maven dependency configuration for the Kotest JUnit5 runner, which is required to use the Kotest framework. This needs to be added to the Maven POM file.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest</groupId>\n    <artifactId>kotest-runner-junit5</artifactId>\n    <version>{version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Sample Coroutine Debug Dump Output in Kotest\nDESCRIPTION: Example of the coroutine dump format that displays when debugging is enabled. The dump shows coroutine state and creation stacktrace to help diagnose issues with coroutine execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCoroutines dump 2021/11/27 22:17:43\n\nCoroutine DeferredCoroutine{Active}@71f1906, state: CREATED\n\t(Coroutine creation stacktrace)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.async$default(Builders.common.kt:82)\n\tat kotlinx.coroutines.BuildersKt.async$default(Unknown Source)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invokeSuspend(CoroutineDebugTest.kt:37)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invoke(CoroutineDebugTest.kt)\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Try Type Matchers\nDESCRIPTION: Demonstrates matchers for Arrow's Try type, allowing verification of Success and Failure cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nTry.Success(\"foo\") should beSuccess(\"foo\")\nTry.Failure<Nothing>(RuntimeException()) should beFailure()\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Files in Kotest Tests\nDESCRIPTION: Demonstrates how to create a temporary file in a Kotest test specification using the tempfile() function. The file is automatically cleaned up by Kotest after all tests in the specification complete.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/tempfile.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec({\n\n   val file = tempfile()\n\n   test(\"a temporary file dependent test\") {\n      //...\n   }\n})\n\n```\n\n----------------------------------------\n\nTITLE: Advanced Extensions Table in Markdown\nDESCRIPTION: Markdown table listing all available advanced extensions in Kotest with their descriptions. Includes extensions for constructor handling, test case interception, spec management, display name formatting, and various listeners.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/extensions/advanced.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Extension                     | Description                                                                                                                                |\n|-------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|\n| ConstructorExtension          | Provides custom logic to instantiate spec classes. An example is the Spring extension constructor extension which autowire's spring beans. |\n| TestCaseExtension             | Intercepts calls to a test, can skip a test, override the test result, and modify the coroutine context.                                   |\n| SpecExtension                 | Intercepts calls to a spec, can skip a spec, and modify the coroutine context.                                                             |\n| SpecRefExtension              | Intercepts calls to a spec before it is instantiated. Can skip instantiation.                                                              |\n| DisplayNameFormatterExtension | Can customize the display names of tests used in test output.                                                                              |\n| EnabledExtension              | Can provide custom logic to determine if a test is enabled or disabled.                                                                    |\n| ProjectExtension              | Intercepts calls to the test engine before a project starts.                                                                               |\n| SpecExecutionOrderExtension   | Can sort specs before execution begins to provide a custom spec execution order.                                                           |\n| TagExtension                  | Can provide active tags from arbitrary sources.                                                                                            |\n| InstantiationErrorListener    | Is notified when a spec fails to be instantiated due to some exception.                                                                    |\n| InstantiationListener         | Is notified when a spec is successfully instantiated.                                                                                      |\n| PostInstantiationExtension    | Intercepts specs when they are instantiated, can replace the spec instance and modify coroutine context.                                   |\n| IgnoredSpecListener           | Is notified when a spec is skipped.                                                                                                        |\n| SpecFilter                    | Can provide custom logic to skip a spec.                                                                                                   |\n| TestFilter                    | Can provide custom logic to skip a test.                                                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Setting Invocation Timeout for Multiple Test Runs in Kotest\nDESCRIPTION: This example demonstrates how to set an invocation timeout for multiple runs of a test in Kotest. Each invocation has a timeout of 60 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times and each has a timeout of 60 milliseconds\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Plugin in Gradle\nDESCRIPTION: Configures the Pitest plugin in Gradle to use Kotest as the test plugin and sets target classes for mutation testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/pitest.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigure<PitestPluginExtension> {\n    // testPlugin.set(\"Kotest\")    // needed only with old PIT <1.6.7, otherwise having kotest-extensions-pitest on classpath is enough\n    targetClasses.set(listOf(\"my.company.package.*\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Collection Size in Kotest\nDESCRIPTION: Asserts various size conditions for collections, including exact size, singleton check, and size comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/collections.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveSize(length)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeSingleton()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeSingleton { block }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeSmallerThan(col)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeLargerThan(col)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeSameSizeAs(col)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveAtLeastSize(n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldHaveAtMostSize(n)\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Gradle Plugin (Kotlin)\nDESCRIPTION: This snippet shows how to add the Allure Gradle plugin to the build's plugins block. It specifies the plugin ID and version.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/allure.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  ...\n  id(\"io.qameta.allure\") version \"2.8.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Kotest Configuration Dump Output\nDESCRIPTION: Example of the configuration dump output that appears in standard out when enabled. It shows various Kotest settings including parallelization factors, timeouts, execution orders, and enabled extensions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/config_dump.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n~~~ Kotest Configuration ~~~\n-> Parallelization factor: 1\n-> Concurrent specs: null\n-> Global concurrent tests: 1\n-> Dispatcher affinity: true\n-> Coroutine debug probe: false\n-> Spec execution order: Lexicographic\n-> Default test execution order: Sequential\n-> Default test timeout: 600000ms\n-> Default test invocation timeout: 600000ms\n-> Default isolation mode: SingleInstance\n-> Global soft assertions: false\n-> Write spec failure file: false\n-> Fail on ignored tests: false\n-> Fail on empty test suite: false\n-> Duplicate test name mode: Warn\n-> Remove test name whitespace: false\n-> Append tags to test names: false\n-> Extensions\n  - io.kotest.engine.extensions.SystemPropertyTagExtension\n```\n\n----------------------------------------\n\nTITLE: Default Test Case Configuration in Kotest\nDESCRIPTION: Shows how to specify default test case configuration for all tests in a spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Arguments for Environment Testing with Gradle\nDESCRIPTION: Shows how to add necessary JVM arguments to Gradle configuration to make withEnvironment function work with JDK17. This configuration opens up the java.util module to allow reflection access.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n  jvmArgs(\"--add-opens=java.base/java.util=ALL-UNNAMED\")\n}\n```\n\n----------------------------------------\n\nTITLE: Including a Test Factory with Lifecycle Callbacks in Kotlin\nDESCRIPTION: This example shows how to include a test factory with lifecycle callbacks into a FunSpec test class. The callbacks only apply to the tests from the included factory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/test_factories.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LifecycleExample : FunSpec({\n   include(factory1)\n   test(\"c\")\n   test(\"d\")\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Exhaustive Generator in Test Spec\nDESCRIPTION: Example of using a custom exhaustive generator in a Kotest StringSpec to test prime number properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/customgens.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n    \"testing single digit primes\" {\n        checkAll(singleDigitPrimes) { prime ->\n           isPrime(prime) shouldBe true\n           isPrime(prime * prime) shouldBe false\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Exception and Throwable Assertions\nDESCRIPTION: Methods for validating exception messages, causes, and types in error scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nthrowable.shouldHaveMessage(message)\nthrowable.shouldHaveCause()\nthrowable.shouldHaveCause { block }\nthrowable.shouldHaveCauseInstanceOf<T>()\nthrowable.shouldHaveCauseOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest Spec (Kotlin)\nDESCRIPTION: This snippet demonstrates how to set the Assertion Mode to 'Error' within a Kotest spec. It includes an example test that would fail due to lack of assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/assertion_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec() {\n   init {\n      assertions = AssertionMode.Error\n      test(\"this test has no assertions\") {\n         val name = \"sam\"\n         name.length == 3 // this isn't actually testing anything\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode via Function Override in Kotest\nDESCRIPTION: Example showing how to set isolation mode by overriding the isolationMode() function in a test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/isolation_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n  override fun isolationMode() = IsolationMode.SingleInstance\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using contain Matcher for Collections in Kotlin for Kotest\nDESCRIPTION: Demonstrates the usage of the contain matcher for collections in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_46\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should contain(4)\n```\n\n----------------------------------------\n\nTITLE: Registering SpringListener in Kotlin Test Spec\nDESCRIPTION: Shows how to register SpringListener for autowiring tests by overriding the listeners() function in a test spec class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : ParentSpec() {\n    override fun listeners() = listOf(SpringListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Email Local Parts in Kotlin with Kotest\nDESCRIPTION: Uses Arb.emailLocalPart() to generate random local parts of email addresses.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.emailLocalPart()\n```\n\n----------------------------------------\n\nTITLE: Using contain Collection Matcher in Kotest\nDESCRIPTION: Example of the contain matcher for collections, which verifies that a collection contains a specific element.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should contain(4)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Matcher in Kotlin\nDESCRIPTION: Shows how to create a custom matcher that checks if a string contains 'foo', including implementation and extension functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun containFoo() = object : Matcher<String> {\n  override fun test(value: String) = Result(value.contains(\"foo\"), \"String $value should include foo\", \"String $value should not include foo\")\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should containFoo()\n\"hello bar\" shouldNot containFoo()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldContainFoo() = this should containFoo()\nfun String.shouldNotContainFoo() = this shouldNot containFoo()\n```\n\n----------------------------------------\n\nTITLE: Markdown Redirect Link for Kotest Clues Documentation\nDESCRIPTION: A markdown link redirecting users to the new location of the Kotest clues documentation on the official website.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/clues.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[This page has moved](https://kotest.io/docs/assertions/clues.html)\n```\n\n----------------------------------------\n\nTITLE: Individual Test Cases in FreeSpec\nDESCRIPTION: Advanced example showing how to create individual test cases for each row of data in FreeSpec. Demonstrates testing of arithmetic operations with descriptive test names and expected results.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Option Matchers in Kotlin with Kotest and Arrow\nDESCRIPTION: These matchers allow asserting the state and value of Option types. They can check if an Option is Some or None, and verify the contained value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\noption.shouldBeSome()\noption.shouldBeSome(v)\noption.shouldBeNone()\n```\n\n----------------------------------------\n\nTITLE: Using SecurityManagerListener for Spec Level Security Manager\nDESCRIPTION: Example of applying a security manager override at the test spec level by implementing a listener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n  override fun listeners() = listOf(SecurityManagerListener(myManager))\n\n  init {\n    // Use my security manager\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Trampolines in Kotest\nDESCRIPTION: Implements trampolines for flatmap, map, filter, and merge operations. This change likely improves performance or memory usage for these operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimplement trampolines for flatmap, map, filter, merge. (#2900)\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration for adding Testcontainers support to Kotest project\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Pitest Plugin\nDESCRIPTION: XML configuration for the Pitest Maven plugin. This sets up the plugin with essential parameters like targetClasses and coverageThreshold for mutation testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/pitest.md#2025-04-13_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.pitest</groupId>\n    <artifactId>pitest-maven</artifactId>\n    <version>${pitest-maven.version}</version>\n    <configuration>\n        <targetClasses>...</targetClasses>\n        <coverageThreshold>...</coverageThreshold>\n        ... other configurations as needed        \n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Compatible External Assertion Usage in Kotlin\nDESCRIPTION: Demonstrates proper way to include external library assertions within soft assertion blocks using shouldNotThrowAnyUnit.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/soft_assertions.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  shouldNotThrowAnyUnit {\n    verify(exactly = 1) { myClass.myMethod(any()) }\n  }\n  foo shouldBe bar\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Groovy)\nDESCRIPTION: Enables JUnit Platform for Kotest testing in Gradle using Groovy syntax by configuring the test task.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/quick_start.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Engine for JavaScript (Gradle)\nDESCRIPTION: Configures the Kotest engine dependency for JavaScript tests in a multiplatform project using Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) { // LEGACY or BOTH are unsupported\n      browser() // to compile for the web\n      nodejs() // to compile against node\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Matcher Testing in Kotlin\nDESCRIPTION: Example data structures (Person and Address) used to demonstrate composed matchers. These classes will be the target of custom matchers in subsequent examples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/data_class_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(\n  val name: String,\n  val age: Int,\n  val address: Address,\n)\n\ndata class Address(\n  val city: String,\n  val street: String,\n  val buildingNumber: String,\n)\n```\n\n----------------------------------------\n\nTITLE: Table-Driven Testing Example in Kotest\nDESCRIPTION: Demonstrates table-driven testing using forAll to test square root calculations with multiple input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forall(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest for JavaScript in Multiplatform Project\nDESCRIPTION: Sets up Kotest dependencies for JavaScript targets in a Kotlin multiplatform project, supporting both browser and Node.js environments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) { // LEGACY or BOTH are unsupported\n      browser() // to compile for the web\n      nodejs() // to compile against node\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JDBC Database Container Extension\nDESCRIPTION: Creating a datasource using JdbcDatabaseContainerExtension with a MySQL container, configuring connection pool parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcDatabaseContainerExtension(mysql)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Using Test Disabling with FunSpec in Kotest\nDESCRIPTION: Example showing how to disable tests and contexts in FunSpec using the new 'x' prefix variants introduced in Kotest 4.1.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFunSpec : FunSpec({\n  xtest(\"a disabled test\") {\n    // this test will not be invoked\n  }\n  xcontext(\"this context is disabled\") {\n     test(\"and so this test is by extension\") {\n     }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using String Length Comparison Matchers in KoTest\nDESCRIPTION: Examples of comparing string lengths using the haveSameLengthAs matcher in KoTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello\" should haveSameLengthAs(\"world\")\n\"hello\" shouldNot haveSameLengthAs(\"you\")\n```\n\n----------------------------------------\n\nTITLE: Installing kotest-assertions-compiler Extension with Gradle\nDESCRIPTION: This Gradle dependency declaration adds the Kotest compiler assertions extension to your project, allowing you to test if Kotlin code snippets compile correctly.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/compiler.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-assertions-compiler:${version}\")\n```\n\n----------------------------------------\n\nTITLE: List Comparison Matcher Implementation in Kotlin\nDESCRIPTION: Example implementation of a custom matcher for comparing lists while ignoring their order\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/field-matching.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun<T> matchListsIgnoringOrder() = Assertable { expected: Any?, actual: Any? ->\n   customComparison<List<T>>(expected, actual) { expected: List<T>, actual: List<T> ->\n      actual shouldContainExactlyInAnyOrder expected\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arb.sample Instead of Deprecated Arb.values\nDESCRIPTION: Example of using the Arb.sample method, which replaced the deprecated Arb.values in version 4.3.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval arb = Arb.int(1..100)\nval sample = arb.sample()\n```\n\n----------------------------------------\n\nTITLE: Using Percentage-Based Plus or Minus Matcher in Kotlin\nDESCRIPTION: Example showing how to use the new percentage-based plusOrMinus matcher for floating point comparisons\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n1.0.plusOrMinus(10.percent)\n```\n\n----------------------------------------\n\nTITLE: Multiple Tests with Shared Mocks Issue\nDESCRIPTION: Shows the problem that occurs when multiple tests share the same mock instance without proper cleanup.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/mocks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n    test(\"Saves to repository as well\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporter in Kotest\nDESCRIPTION: Example of setting up the JUnit XML reporter with custom configuration options in ProjectConfig\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.2.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override fun listeners(): List<Listener> = listOf(\n     JunitXmlReporter(\n        includeContainers = true,\n        useTestPathAsName = true\n     )\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Test Case Configuration in Kotest\nDESCRIPTION: Example of the new recommended way to set default test case configuration in a Kotest spec, using individual configuration methods. This approach allows for better fallthrough of settings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_5.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n\n    tags(Foo, Bar)\n    timeout = 100.seconds\n\n    test(\"foo\") {\n       // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: General Purpose Matchers in Kotest\nDESCRIPTION: Basic assertion matchers for equality, boolean expressions, and exception handling in Kotest\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nobj.shouldBe(other)\nexpr.shouldBeTrue()\nexpr.shouldBeFalse()\nshouldThrow<T> { block }\nshouldThrowExactly<T> { block }\nshouldThrowAny { block }\nshouldThrowMessage(message) { block }\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Invocations in Kotest DescribeSpec\nDESCRIPTION: This snippet illustrates how to configure a test to run multiple times using the invocations property in a DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: AnnotationSpec JUnit-Style Testing\nDESCRIPTION: Shows how to use AnnotationSpec to write tests using JUnit-style @Test annotations\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n  @Test\n  fun test1() {\n\n  }\n\n  @Test\n  fun test2() {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pythagorean Triple Validation in Kotlin\nDESCRIPTION: A function that validates if three integers form a Pythagorean triple, along with test data setup using a data class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.3.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n    forAll(\n       PythagTriple(3, 4, 5),\n       PythagTriple(6, 8, 10),\n       PythagTriple(8, 15, 17),\n       PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n        isPythagTriple(a, b, c) shouldBe true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Negative Doubles in Kotlin using Kotest\nDESCRIPTION: Creates an Arb that produces negative Double values within a specified range. Includes edge cases like Double.NEGATIVE_INFINITY, min, -1.0, and -Double.MIN_VALUE if they fall within the range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.negativeDouble(min, max)\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Tests per Data Row in FreeSpec\nDESCRIPTION: Demonstrates how to generate individual tests for each row of data parameters in FreeSpec. Each data row becomes a separate named test case with its own description, allowing for more granular test reporting.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/data_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency in Gradle\nDESCRIPTION: Adds the property testing library to a Gradle project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_14\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-property:$version'\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Android Assertions Dependency\nDESCRIPTION: Code snippet showing how to add the required dependency for using Android matchers in Kotest. This dependency must be added to your project's build configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/android_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.kotest:kotest-assertions-android:VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Result-based Fake Function with Exception Handling\nDESCRIPTION: Shows how to create a fake function that can return both success values and exceptions. Demonstrates error handling scenarios in testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/fake_functions.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval fakeFunction = sequenceOf(\n  Result.success(\"yes\"),\n  Result.failure(RuntimeException(\"bad request\")),\n  Result.success(\"no\")\n).toFunction()\nfakeFunction.next() shouldBe \"yes\"\nshouldThrow<RuntimeException> { fakeFunction.next() }\nfakeFunction.next() shouldBe \"no\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Pythagorean Triple Validation in Kotlin\nDESCRIPTION: Function to validate if three numbers form a Pythagorean triple by checking if a² + b² = c².\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.3.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Running Kotest with System Property Filtering\nDESCRIPTION: This example demonstrates how to use Kotest-specific system properties to filter tests by spec (class) names and test names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/gradle.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*' -Dkotest.filter.tests='*Foo*'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.tests='Foo*'\n```\n\n----------------------------------------\n\nTITLE: Defining Matcher Interface in Kotlin\nDESCRIPTION: Shows the basic structure of the Matcher interface in Kotest, which requires implementing a test method that returns a MatcherResult.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/custom.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Matcher<in T> {\n  fun test(value: T): MatcherResult\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin PlusOrMinus Percentage Extension\nDESCRIPTION: Example showing new Double extension function for percentage-based plusOrMinus matching\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n1.0.plusOrMinus(10.percent)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Name Pattern with Kotest\nDESCRIPTION: Example of using Kotest's test name filter to run only tests that start with 'Foo' in any package.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/gradle.md#2025-04-13_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngradle test -Dkotest.filter.tests='Foo*'\n```\n\n----------------------------------------\n\nTITLE: Kotest Combined Test Filtering\nDESCRIPTION: Example of combining package and test name filters using Kotest's system properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/gradle.md#2025-04-13_snippet_5\n\nLANGUAGE: gradle\nCODE:\n```\ngradle test -Dkotest.filter.specs='com.somepackage.*' -Dkotest.filter.tests='*Foo*'\n```\n\n----------------------------------------\n\nTITLE: Coroutine Dump Output Example in Kotest\nDESCRIPTION: Example output of a coroutine dump generated by the debug probes. It shows the state of coroutines and their creation stacktrace, which helps in debugging coroutine-related issues.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCoroutines dump 2021/11/27 22:17:43\n\nCoroutine DeferredCoroutine{Active}@71f1906, state: CREATED\n\t(Coroutine creation stacktrace)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.async$default(Builders.common.kt:82)\n\tat kotlinx.coroutines.BuildersKt.async$default(Unknown Source)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invokeSuspend(CoroutineDebugTest.kt:37)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invoke(CoroutineDebugTest.kt)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Plugin in Gradle\nDESCRIPTION: Configures the Pitest plugin settings in Gradle build file, specifying the test plugin and target classes for mutation testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/pitest.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigure<PitestPluginExtension> {\n    // testPlugin.set(\"Kotest\")    // needed only with old PIT <1.6.7, otherwise having kotest-extensions-pitest on classpath is enough\n    targetClasses.set(listOf(\"my.company.package.*\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Type Migration Example in Kotlin\nDESCRIPTION: Code example showing the change in ListenerState result field type from T to T? to support eventual listener functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nresult: T? // Changed from result: T\n```\n\n----------------------------------------\n\nTITLE: Failed Assertion Error Output\nDESCRIPTION: Example of the error message displayed when a basic assertion fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/clues.md#2025-04-13_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nexpected: \"sksamuel\" but was: \"sam@myemailaddress.com\"\n```\n\n----------------------------------------\n\nTITLE: Using a Name Function for Custom Test Names in Kotest\nDESCRIPTION: This example shows how to customize test names by providing a name function to withData that takes the test row as input and returns a formatted string as the test name.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/test_names.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData<PythagTriple>(\n    nameFn = { \"${it.a}__${it.b}__${it.c}\" },\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Classify in Property Testing with Single Label\nDESCRIPTION: Demonstrates how to use the classify function in property testing to track and report the distribution of generated values with a single label for the true case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nassertAll(Gen.string()) { a ->\n    classify(a.contains(\" \"), \"has whitespace\", \"no whitespace\")\n    // some test\n}\n```\n\n----------------------------------------\n\nTITLE: Date and Time Generation in Kotest\nDESCRIPTION: Date and time generators for various types including LocalDate, LocalDateTime, and Instant with configurable ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_36\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.date(ranges)\nArb.datetime(ranges)\nArb.localDateTime(ranges)\nArb.localDate(ranges)\nArb.duration(ranges)\nArb.date(yearRange)\nArb.datetime(yearRange, hourRange, minuteRange, secondRage)\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Implementing NoSystemOutListener in Kotest Test\nDESCRIPTION: Example showing how to use the NoSystemOutListener extension to detect and prevent writes to standard output during test execution. This listener will cause test failures if any println statements are executed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/extensions/examples.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : DescribeSpec({\n\n    listener(NoSystemOutListener)\n\n    describe(\"All these tests should not write to standard out\") {\n        it(\"silence in the court\") {\n          println(\"boom\") // failure\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/JS with Kotest Engine\nDESCRIPTION: Sets up a Kotlin/JS project with Kotest framework engine dependency. Configures both browser and Node.js targets using the IR compiler, which is required for Kotest compatibility.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) { // LEGACY or BOTH are unsupported\n      browser() // to compile for the web\n      nodejs() // to compile against node\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Classpath Scanning in kotest.properties\nDESCRIPTION: Example of disabling Kotest's classpath scanning capabilities to improve startup time. These properties should be added to the kotest.properties file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/intellij/props.md#2025-04-13_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nkotest.framework.classpath.scanning.config.disable=true\nkotest.framework.classpath.scanning.autoscan.disable=true\n```\n\n----------------------------------------\n\nTITLE: Double Assertions in Kotest\nDESCRIPTION: Assertion methods for validating double values including infinity, NaN, and zero checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ndouble.shouldBePositiveInfinity()\ndouble.shouldBeNegativeInfinity()\ndouble.shouldBeNaN()\ndouble.shouldBeZero()\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency for Android\nDESCRIPTION: This Groovy snippet demonstrates how to add the Kotest JUnit5 runner dependency to an Android project. It's necessary for running Kotest tests in Android modules.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/setup.mdx#2025-04-13_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n   testImplementation 'io.kotest:kotest-runner-junit5:version'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing System Environment Project Listener in Kotlin\nDESCRIPTION: Shows how to use the SystemEnvironmentProjectListener to apply environment variable changes at the Project level in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n    override fun listeners(): List<TestListener> = listOf(SystemEnvironmentProjectListener(\"foo\", \"bar\"))\n\n}\n```\n\n----------------------------------------\n\nTITLE: AnnotationSpec Example in KotlinTest\nDESCRIPTION: Shows how to use AnnotationSpec which mimics JUnit style testing using @Test annotations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n  @Test\n  fun test1() {\n\n  }\n\n  @Test\n  fun test2() {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests Using Gradle Build Script\nDESCRIPTION: Example of configuring test filtering in the Gradle build script to include tests matching a specific package pattern.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/gradle.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.test {\n    filter {\n        //include all tests from package\n        includeTestsMatching(\"com.somepackage.*\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Kafka Client Creation with Embedded Kafka\nDESCRIPTION: Shows how to manually create Kafka clients by configuring Properties with the host and port from the embedded Kafka listener. This approach gives more control over client configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/kafka.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n   \n   val props = Properties().apply {\n      put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"${embeddedKafkaListener.host}:${embeddedKafkaListener.port}\")\n   }\n   \n   val producer = KafkaProducer<String, String>(props)\n   \n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocking and Non-blocking Tests in Kotest\nDESCRIPTION: Demonstrates how to configure blocking and non-blocking tests in Kotest using FunSpec. Shows the difference between handling thread-blocking operations that require the blockingTest flag and suspendable operations that use cooperative timeouts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/timeouts/blocking_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyBlockingTest : FunSpec() {\n  init {\n\n    test(\"interrupt me!\").config(blockingTest = true, timeout = 10.seconds) {\n       Thread.sleep(100000000)\n    }\n\n    test(\"uses suspension\").config(timeout = 10.seconds) {\n      delay(100000000)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Function Style Matchers\nDESCRIPTION: Shows the new extension function style for matchers, which provides better IDE discovery and a more fluent syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nfile should exist()\n\nlistOf(1, 2) should containNull()\n\nfile.shouldExist()\n\nlistOf(1, 2).shouldContainNull()\n```\n\n----------------------------------------\n\nTITLE: Using the Composed Person Matcher in Kotlin Tests\nDESCRIPTION: Demonstrates how to use the composed Person matcher in test assertions, including both passing and failing cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/data_class_matchers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nPerson(\"John\", 21, Address(\"Warsaw\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21)\nPerson(\"Sam\", 22, Address(\"Chicago\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21) // would fail\n```\n\n----------------------------------------\n\nTITLE: Using Disabled Test Prefixes in FunSpec\nDESCRIPTION: Example of using the new 'x' prefixed test functions in FunSpec to disable specific tests or contexts, similar to how it works in JavaScript testing frameworks.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFunSpec : FunSpec({\n  xtest(\"a disabled test\") {\n    // this test will not be invoked\n  }\n  xcontext(\"this context is disabled\") {\n     test(\"and so this test is by extension\") {\n     }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Ktor Assertions Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the kotest-assertions-ktor dependency to a Gradle project. This dependency provides Ktor-specific matchers for both server-side and client-side testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-assertions-ktor:${version}\n```\n\n----------------------------------------\n\nTITLE: Using contain Matcher for Maps in Kotlin for KotlinTest\nDESCRIPTION: Shows how to use the contain matcher for Map<K,V> in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should contain(1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: DescribeSpec Example in KotlinTest\nDESCRIPTION: Illustrates usage of DescribeSpec with describe, and, and it blocks similar to SpekFramework.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DescribeSpecExample : DescribeSpec() {\n  init {\n    describe(\"some context\") {\n      it(\"test name\") {\n        // test here\n      }\n      describe(\"nested contexts\") {\n        and(\"another context\") {\n          it(\"test name\") {\n            // test here\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveKey Matcher for Maps in Kotlin for KotlinTest\nDESCRIPTION: Demonstrates the use of the haveKey matcher for Map<K,V> in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveKey(1)\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions in Kotest\nDESCRIPTION: Demonstration of the new assertion chaining feature in Kotest for more concise test writing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.3.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval employees: List<Employee> = ...\nemployees.shouldBeSorted()\nemployees.shouldHaveSize(4)\nemployees.shouldContain(Employee(\"Sam\", \"Chicago\"))\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval employees: List<Employee> = ...\nemployees.shouldBeSorted()\n          shouldHaveSize(4)\n          shouldContain(Employee(\"Sam\", \"Chicago\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Pitest Kotest Extension Dependency in Gradle\nDESCRIPTION: Adds the Kotest Pitest extension module to the project's test dependencies in Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/pitest.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-extensions-pitest:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with TestLogger\nDESCRIPTION: Example showing how to use the TestLogger object for custom assertion functions with logging capabilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/logging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something else\") {\n  logger.assertSomething(\"something else\")\n}\n\nfun TestLogger.assertSomething(actual: String) {\n   info { \"asserting something about $actual\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Embedded Kafka Listener in Kotest using Init Block\nDESCRIPTION: Shows how to register the embedded Kafka listener in a Kotest FunSpec using the init block approach, which is an alternative to the constructor approach.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/kafka.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec() {\n  init {\n    listener(embeddedKafkaListener)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency with Gradle\nDESCRIPTION: Gradle dependency configuration for adding the Kotest Testcontainers extension to a project. This allows integration between Kotest tests and Testcontainers for creating Docker-based test dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers_46x.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency in Gradle\nDESCRIPTION: Adds the Kotest JUnit5 runner dependency to a Gradle project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-runner-junit5:$version'\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing in Maven\nDESCRIPTION: Maven dependency configuration for Kotest property testing module. This provides property-based testing capabilities with generators and shrinking support.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest</groupId>\n    <artifactId>kotest-property</artifactId>\n    <version>{version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating a Project-Level Extension with @AutoScan in Kotest\nDESCRIPTION: This snippet shows how to create a project-wide extension that runs before and after the entire test project. The @AutoScan annotation ensures the extension is automatically registered without requiring explicit configuration in ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/extensions/extensions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@AutoScan\nobject MyProjectListener : BeforeProjectListener, AfterProjectListener {\n  override suspend fun beforeProject() {\n    println(\"Project starting\")\n  }\n  override suspend fun afterProject() {\n    println(\"Project complete\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Person Generator Implementation in Kotlin\nDESCRIPTION: Example implementation of a custom generator for a Person class, demonstrating how to generate random Person instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\nclass PersonGenerator : Gen<Person> {\n    override fun constants() = emptyList<Person>()\n    override fun random() = generateSequence {\n        Person(Gen.string().random().first(), Gen.int().random().first())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Security Manager Listener Implementation\nDESCRIPTION: Shows how to use SecurityManagerListener at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/system.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n    class MyTest : FreeSpec() {\n\n              override fun listeners() = listOf(SecurityManagerListener(myManager))\n\n            init {\n              // Use my security manager\n            }\n\n        }\n```\n\n----------------------------------------\n\nTITLE: Using Coroutine Scopes in Leaf Test Cases\nDESCRIPTION: Example showing how leaf test cases are coroutine scopes, allowing direct launching of coroutines without providing a separate scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\") {\n  launch {\n    delay(100)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Testcontainers per Spec in Kotest\nDESCRIPTION: Example of integrating Testcontainers with Kotest using the per-spec lifecycle, which starts and stops the container once for the entire spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perSpec())\n```\n\n----------------------------------------\n\nTITLE: Using Coroutines in Kotest Tests\nDESCRIPTION: Kotest now supports using coroutines directly in tests, allowing for easier testing of asynchronous code and suspending functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyCoroutineTest : StringSpec({\n  \"test using coroutines\" {\n    runBlocking {\n      val result = someAsyncFunction()\n      result shouldBe \"expected value\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest Spec\nDESCRIPTION: This snippet demonstrates how to set the assertion mode to 'Error' within a Kotest spec. It includes an example test that would trigger the assertion mode check due to lacking an actual assertion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/assertion_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec() {\n   init {\n      assertions = AssertionMode.Error\n      test(\"this test has no assertions\") {\n         val name = \"sam\"\n         name.length == 3 // this isn't actually testing anything\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Testing with String Reversal Check\nDESCRIPTION: Example demonstrating property testing in Kotest with improved shrinking output, checking if a string equals its reversed version.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.1.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String> { a ->\n  a shouldBe a.reversed()\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated approach for setting default test case configuration in Kotest\nDESCRIPTION: Example showing the deprecated way of setting default test case configuration in a Kotest specification. This approach used the defaultTestCaseConfig method to define settings like tags and timeouts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_5.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n    override fun defaultTestCaseConfig() = TestCaseConfig(tags = setOf(Foo, Bar), timeout = 100.seconds)\n    test(\"foo\") {\n      // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table Tests in Kotlin with Kotest\nDESCRIPTION: Shows how to implement Table Tests in Kotest, allowing for manual specification of test value combinations. This is useful for testing edge cases and specific value combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TableExample : StringSpec(), TableTesting {\n  init {\n    \"numbers should be prime\" {\n      val table = table(\n          headers(\"a\", \"b\"),\n          row(5, 5),\n          row(4, 6),\n          row(3, 7)\n      )\n      forAll(table) { a, b ->\n        a + b == 10\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LocalDate Matchers in Kotest\nDESCRIPTION: Assertion matchers for LocalDate type that allow comparing dates, verifying specific date components, and checking date ranges. These matchers are part of the kotest-assertions-kotlinx-time module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\ndate.shouldHaveSameMonthAs(otherDate)\ndate.shouldHaveSameDayAs(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeWithin(period, otherDate)\ndate.shouldBeWithin(duration, otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDayOfYear(day)\ndate.shouldHaveDayOfMonth(day)\ndate.shouldHaveDayOfWeek(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\ndate.shouldHaveNano(nano)\n```\n\n----------------------------------------\n\nTITLE: Null Assertion Example\nDESCRIPTION: Demonstrates a null check assertion that shows the need for additional context through clues.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Soft Assertions Implementation in Kotest\nDESCRIPTION: Demonstrates how to use soft assertions to collect multiple test failures before reporting them.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  foo shouldBe bar\n  foo should contain(baz)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-line Test Names in Kotest\nDESCRIPTION: Shows how to define test names over multiple lines in Kotest, which can be formatted by setting removeTestNameWhitespace to true.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.3.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n  init {\n   \"\"\"this is a\n      test spanning multiple lines\"\"\" { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pythagorean Triple Validator in Kotlin\nDESCRIPTION: Function that validates if three numbers form a Pythagorean triple by checking if a² + b² = c².\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Applying @EnabledIf Annotation with Custom Condition\nDESCRIPTION: This example shows how to apply a custom EnabledCondition to multiple test specifications using the @EnabledIf annotation, allowing for platform-specific test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/annotations.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest1 : FunSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyLinuxTest2 : DescribeSpec() {\n  // tests here\n}\n\n@EnabledIf(LinuxOnlyCondition::class)\nclass MyWindowsTests : DescribeSpec() {\n  // tests here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing System Property Listener in Kotlin Tests\nDESCRIPTION: Shows how to use the SystemPropertyListener to apply system property changes at the Spec level in Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/system.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemPropertyListener(\"foo\", \"bar\"))\n\n    init {\n      \"MyTest\" {\n        System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using StringSpec with Lambda Constructor in Kotlin\nDESCRIPTION: Demonstrates how to define tests in a StringSpec by passing a lambda to the constructor, allowing for a more concise test definition style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"strings.size should return size of string\" {\n    \"hello\".length shouldBe 5\n    \"hello\" should haveLength(5)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers Dependency in Gradle\nDESCRIPTION: Adding the Kotest Testcontainers extension dependency to a Gradle build file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/test_containers.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Adding Pitest Kotest Extension Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration to add the Kotest Pitest extension module to the project's test implementation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/pitest.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-extensions-pitest:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Project-wide Environment Configuration\nDESCRIPTION: Shows how to configure environment variables at the project level using SystemEnvironmentProjectListener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/system.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n    override fun listeners(): List<TestListener> = listOf(SystemEnvironmentProjectListener(\"foo\", \"bar\"))\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Plugin in Gradle (Kotlin)\nDESCRIPTION: This code configures the Pitest plugin in a Gradle project using Kotlin DSL. It sets up the targetClasses for Pitest to analyze.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/pitest.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigure<PitestPluginExtension> {\n    // testPlugin.set(\"Kotest\")    // needed only with old PIT <1.6.7, otherwise having kotest-extensions-pitest on classpath is enough\n    targetClasses.set(listOf(\"my.company.package.*\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Allure Build Directory\nDESCRIPTION: Test configuration to set the Allure results directory system property when not using the Gradle plugin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/allure.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") { // or \"jvmTest\" etc\n   useJUnitPlatform()\n   systemProperty(\"allure.results.directory\", project.buildDir.toString() + \"/allure-results\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Blocking Call in Non-Blocking Context\nDESCRIPTION: Example of a blocking call (Thread.sleep) in a non-blocking context (Dispatchers.Default) that will be detected by BlockHound.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/blockhound.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate suspend fun blockInNonBlockingContext() {\n   withContext(Dispatchers.Default) {\n      @Suppress(\"BlockingMethodInNonBlockingContext\")\n      Thread.sleep(2)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Tuples with Kotest Arb\nDESCRIPTION: Functions for generating Pair and Triple instances with values drawn from provided arbitrary generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_32\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.pair(arb1, arb2)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.triple(arb1, arb2, arb3)\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Extension Dependency\nDESCRIPTION: Maven/Gradle dependency declaration for adding Koin extension support to Kotest\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/koin.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-extensions-koin:${version}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Generator for Kotest in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a custom generator for a Person class in Kotest. It implements the Gen<T> interface, defining constants and random value generation methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String, val age: Int)\nclass PersonGenerator : Gen<Person> {\n    override fun constants() = emptyList<Person>()\n    override fun random() = generateSequence {\n        Person(Gen.string().random().first(), Gen.int().random().first())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lexicographic Test Ordering in Kotest\nDESCRIPTION: This example illustrates how to implement lexicographic test ordering in a Kotest spec. Tests will be executed in alphabetical order based on their names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_ordering.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LexicographicSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Lexicographic\n\n    init {\n      \"foo\" {\n        // I run second as bar < foo\n      }\n\n      \"bar\" {\n        // I run first as bar < foo\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Test Task for HTML Reporting\nDESCRIPTION: Gradle configuration to disable default HTML reports and JUnit XML reports while setting up the JUnit platform for testing. Also sets a system property for the build directory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/html_reporter.md#2025-04-13_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.test {\n  useJUnitPlatform()\n  reports {\n    html.required.set(false)\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Inspector Usage\nDESCRIPTION: Shows how to use inspectors to verify conditions on collection elements with exact count matching.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/index.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nmylist.forExactly(3) {\n    it.city shouldBe \"Chicago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Tests with Shared Mocks Issue\nDESCRIPTION: Shows problematic implementation where mocks are shared between tests without proper reset, leading to verification errors\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/integrations/mocks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n    test(\"Saves to repository as well\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Compact JSON Object Structure\nDESCRIPTION: Example of the same JSON object in compact format to demonstrate format-independent comparison.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/json.md#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\" : 41, \"name\": \"sam\", \"location\": \"chicago\" }\n```\n\n----------------------------------------\n\nTITLE: Domain Object Clue Error Output\nDESCRIPTION: Example output when using a domain object as a clue, showing how the object's toString representation appears in the error message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/clues.md#2025-04-13_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nHttpResponse(status=404, body=the content)\nExpected :200\nActual   :404\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Class for Konform Validation in Kotlin\nDESCRIPTION: This snippet defines a basic data class 'UserProfile' with two properties: 'fullName' as a String and 'age' as a nullable Int. This class will be used for demonstrating Konform validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/konform.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class UserProfile(\n   val fullName: String,\n   val age: Int?\n)\n```\n\n----------------------------------------\n\nTITLE: Exception Testing in Kotest\nDESCRIPTION: Demonstrates different ways to test exceptions and verify their properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should start with \"Something went wrong\"\n```\n\n----------------------------------------\n\nTITLE: Using Generic Type Contracts with Matchers\nDESCRIPTION: Demonstrates how type contracts in shouldBeTypeOf can smart cast variables to their specific types, allowing for type-safe operations after the assertion passes.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.2.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval list: Any = arrayListOf(1, 2, 3)\nlist.shouldBeTypeOf<ArrayList<Int>>()\nlist[0] shouldBe 1 // can only work with a smart case\n```\n\n----------------------------------------\n\nTITLE: Recommended Test Case Config in Kotlin\nDESCRIPTION: Demonstrates the new recommended way of setting default test case configuration in a Kotest spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_5.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n\n    tags(Foo, Bar)\n    timeout = 100.seconds\n\n    test(\"foo\") {\n       // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Future Properties in Kotlin with Kotest\nDESCRIPTION: Functions for checking the state and outcome of Future objects, including completion status and exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nfuture.shouldBeCancelled()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfuture.shouldBeCompleted()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfuture.shouldBeCompletedExceptionally()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfuture.shouldCompleteExceptionallyWith(throwable)\n```\n\n----------------------------------------\n\nTITLE: Arrow Generators Installation Dependencies\nDESCRIPTION: Maven dependencies required to use Arrow generators in Kotest property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nio.kotest.extensions:kotest-property-arrow:version\nio.arrow-kt:arrow-core:arrow-version\nio.arrow-kt:arrow-optics:arrow-version\n```\n\n----------------------------------------\n\nTITLE: Combining Three Arbitraries with Kotest\nDESCRIPTION: Uses Arb.bind(arbA, arbB, arbC, fn) to generate values by pulling a value from each of the three given arbitraries and passing those values to the supplied function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_37\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.bind(arbA, arbB, arbC, fn)\n```\n\n----------------------------------------\n\nTITLE: Koin Integration with Root Lifecycle Mode\nDESCRIPTION: Example demonstrating Koin integration with DescribeSpec using Root lifecycle mode, which allows sharing the same Koin context across all leaf tests of a root test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/koin.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestAndKoin : DescribeSpec(), KoinTest {\n\n    override fun extensions() = listOf(KoinExtension(module = myKoinModule, mode = KoinLifecycleMode.Root))\n\n    val userService by inject<UserService>()\n\n    init {\n        describe(\"use userService\") {\n            it(\"inside a leaf test\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n            it(\"this shares the same context\") {\n                userService.getUser().username shouldBe \"LeoColman\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android for Kotest Unit Tests\nDESCRIPTION: Sets up the Android test options to use JUnit Platform for running Kotest tests in Android projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/setup.mdx#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      it.useJUnitPlatform()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in kotest.properties File\nDESCRIPTION: Example of defining a key-value pair in the kotest.properties file. This file should be located on the classpath (e.g., in src/main/resources) for Kotest to pick up the properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/intellij/props.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfoo=bar\n```\n\n----------------------------------------\n\nTITLE: Multiple Factory Inclusion Example\nDESCRIPTION: Demonstration of including multiple test factories along with individual tests in a spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/test_factories.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass HugeTestFile : FunSpec({\n\n   test(\"first test\") {\n     // test here\n   }\n\n   include(factory1(\"foo\"))\n   include(factory2(1, 4))\n\n   test(\"another test\") {\n     //  testhere\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Sonatype Snapshots Repository URL\nDESCRIPTION: Repository URL for accessing Kotest snapshot builds from Sonatype OSS snapshots repository. This needs to be added to the repositories block in the build configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nhttps://oss.sonatype.org/content/repositories/snapshots\n```\n\n----------------------------------------\n\nTITLE: Time Component Assertions in Kotest\nDESCRIPTION: Methods for asserting time components including hours, minutes, seconds, and nanoseconds comparisons\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\ntime.shouldHaveSameMinutesAs(otherTime)\ntime.shouldHaveSameSecondsAs(otherTime)\ntime.shouldHaveSameNanosAs(otherTime)\ntime.shouldBeBefore(otherTime)\ntime.shouldBeAfter(otherTime)\ntime.shouldBeBetween(firstTime, secondTime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jacoco XML Report Task\nDESCRIPTION: Configures the Jacoco test report task to generate XML reports and depend on the test task.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/integrations/jacoco.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.jacocoTestReport {\n    dependsOn(tasks.test)\n    reports {\n        xml.isEnabled = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Surefire Plugin Configuration\nDESCRIPTION: XML configuration for Maven Surefire plugin to enable JUnit 5 platform support in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-surefire-plugin</artifactId>\n    <version>2.19.1</version>\n    <dependencies>\n        <dependency>\n            <groupId>org.junit.platform</groupId>\n            <artifactId>junit-platform-surefire-provider</artifactId>\n            <version>1.1.0</version>\n        </dependency>\n    </dependencies>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Using Coroutines in Kotest Tests\nDESCRIPTION: Kotest now supports using coroutines directly in tests, allowing for more efficient asynchronous testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : StringSpec({\n  \"test using coroutines\" {\n    launch {\n      delay(1000)\n      // Assertion\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing System.exit Calls with SpecSystemExitListener in Kotlin\nDESCRIPTION: Shows how to use the SpecSystemExitListener to test for System.exit calls in KotlinTest by intercepting them and throwing a SystemExitException.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SystemExitTest : StringSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n\n    \"System.exit should throw an exception when the listener is added\" {\n      shouldThrow<SystemExitException> {\n        System.exit(123)\n      }.exitCode shouldBe 123\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocaleTestListener and TimeZoneTestListener\nDESCRIPTION: Example of applying locale and timezone overrides at the test or project level by implementing listeners.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n// In Project or in Spec\noverride fun listeners() = listOf(\n  LocaleTestListener(Locale.FRANCE),\n  TimeZoneTestListener(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\")))\n)\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Default Generators in Kotlin\nDESCRIPTION: Demonstrates basic property testing using assertAll to automatically test string concatenation properties. The test will run 1000 times with random string combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n  init {\n\n    \"String size\" {\n      assertAll({ a: String, b: String ->\n        (a + b).length shouldBe a.length + b.length\n      })\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing YAML Assertions Dependency\nDESCRIPTION: Gradle dependency declaration for adding YAML assertion capabilities to a Kotest project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/yaml.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest:kotest-assertions-yaml:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Testing System Output Listeners in Kotlin\nDESCRIPTION: Demonstrates how to use NoSystemOutListener and NoSystemErrListener to test System.out and System.err write operations by catching exceptions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NoSystemOutOrErrTest : StringSpec() {\n\n  override fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n\n  init {\n\n    \"System.out should throw an exception when the listener is added\" {\n      shouldThrow<SystemOutWriteException> {\n        System.out.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n\n    \"System.err should throw an exception when the listener is added\" {\n      shouldThrow<SystemErrWriteException> {\n        System.err.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Timeout in Kotest using ProjectConfig\nDESCRIPTION: This code snippet demonstrates how to set up a project-level timeout in Kotest using the AbstractProjectConfig class. It defines a ProjectConfig class that overrides the projectTimeout property to set a 10-minute timeout for all tests in the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/timeouts/project_timeout.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val projectTimeout: Duration = 10.minutes\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with Data-Driven Tests in Kotest\nDESCRIPTION: Implementing beforeTest callback with data-driven tests to reset test setup before each test case execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nbeforeTest {\n  // reset test setup\n}\n\ncontext(\"...\") {\n  withData(X, Y, Z) { x,y,z ->\n    // test code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Test with Conditional Check\nDESCRIPTION: Basic approach using if statement to handle unwanted test cases\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/assumptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  if (a != b)\n    levenshtein(a, b) shouldBeGreaterThan 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinTest Project-wide Settings\nDESCRIPTION: Shows how to set up project-wide configuration using ProjectConfig. Includes examples of beforeAll and afterAll hooks, and setting parallelism.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\npackage io.kotlintest.provided\n\nobject ProjectConfig : AbstractProjectConfig() {\n\n  private var started: Long = 0\n\n  override fun beforeAll() {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterAll() {\n    val time = System.currentTimeMillis() - started\n    println(\"overall time [ms]: \" + time)\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig() {\n   override fun parallelism(): Int = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jacoco XML Report Task\nDESCRIPTION: Configures the Jacoco test report task to generate XML reports and depend on the test task.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/integrations/jacoco.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.jacocoTestReport {\n    dependsOn(tasks.test)\n    reports {\n        xml.isEnabled = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Arrow Extension in Kotlin\nDESCRIPTION: Instructions for adding the Kotest Arrow extension to a Kotlin project. This snippet shows the required dependency and notes about potential additional dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nio.kotest.extensions:kotest-assertions-arrow\nio.arrow-kt:arrow-core:arrow-version\n```\n\n----------------------------------------\n\nTITLE: String Matchers in Kotlin with Kotest\nDESCRIPTION: Shows various string-specific matchers for content, case, length, and pattern matching in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nstr.shouldBeBlank()\nstr.shouldBeEmpty()\nstr.shouldBeLowerCase()\nstr.shouldBeUpperCase()\nstr.shouldContain(\"substr\")\nstr.shouldContain(regex)\nstr.shouldContainADigit()\nstr.shouldContainIgnoringCase(substring)\nstr.shouldContainOnlyDigits()\nstr.shouldBeInteger([radix])\nstr.shouldContainOnlyOnce(substring)\nstr.shouldEndWith(\"suffix\")\nstr.shouldHaveLength(length)\nstr.shouldHaveLineCount(count)\nstr.shouldHaveMaxLength(max)\nstr.shouldHaveMinLength(min)\nstr.shouldHaveSameLengthAs(anotherString)\nstr.shouldMatch(regex)\nstr.shouldStartWith(\"prefix\")\nstr.shouldBeEqualIgnoringCase(other)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Multiplatform Plugin\nDESCRIPTION: Adding Kotest multiplatform Gradle plugin for JS/Native support\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/setup.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing System Properties in Kotest Test\nDESCRIPTION: Kotlin code demonstrating how to access a system property set in the kotest.properties file within a Kotest test using DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/intellij/props.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FooTest : DescribeSpec() {\n  init {\n    describe(\"after adding kotest.properties\") {\n      it(\"foo should be set\") {\n         System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Field Comparison Matchers in Kotlin\nDESCRIPTION: New matchers shouldBeEqualToComparingFields and shouldBeEqualToComparingFieldsExcept have been added to check equality of objects by comparing their fields instead of using the equals method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nactual.shouldBeEqualToComparingFields(expected)\nactual.shouldBeEqualToComparingFieldsExcept(expected, \"fieldToExclude\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Kotest Core Matcher Modules in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the core Kotest matcher modules, their descriptions, and types (Multiplatform or JVM).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Module                                                | Description                                                  | Type          |\n|-------------------------------------------------------|--------------------------------------------------------------|---------------|\n| [kotest-assertions-core](core.md)                     | Provides matchers for standard libary types.                 | Multiplatform |\n| [kotest-assertions-collections](collections.md)       | Provides matchers for Collection, Iterable, and Array types. | Multiplatform |\n| [kotest-assertions-json](json/overview.md)            | Provides matchers for testing json objects.                  | JVM           |\n| [kotest-assertions-kotlinx-time](kotlinx-datetime.md) | Provides matchers for Kotlin's date / time library.          | Multiplatform |\n| [kotest-assertions-sql](sql.md)                       | Provides matchers for JDBC.                                  | JVM           |\n| [kotest-assertions-ktor](ktor.md)                     | Provides matchers for Ktor server test and client libraries. | Multiplatform |\n```\n\n----------------------------------------\n\nTITLE: Configuring Eventually with Retry Count in Kotlin\nDESCRIPTION: Example demonstrating how to limit the number of retry attempts with the 'retries' parameter while also suppressing specific exceptions during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/concurrency/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 8000\n  retries = 10\n  suppressExceptions = setOf(UserNotFoundException::class)\n}) {\n  userRepository.getById(1).name shouldNotBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Instant Matchers in Kotest with Kotlinx Datetime\nDESCRIPTION: These matchers can be used to assert relative positions of Instant objects in time, such as comparing whether one instant is before, after, or between other instants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/kotlinx-datetime.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeBefore(anotherInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for System Property Propagation in KotlinTest\nDESCRIPTION: Provides Gradle configuration examples for both Groovy and Kotlin DSL to ensure system properties are correctly propagated to test executors.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_22\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    //... Other configurations ...\n    systemProperties = System.properties\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().map { it.key.toString() to it.value }.toMap()\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TestDispatcher Project-wide in Kotest\nDESCRIPTION: This example shows how to enable TestDispatcher for all tests in a Kotest project by setting coroutineTestScope to true in the ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override var coroutineTestScope = true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging at Spec Level in Kotest\nDESCRIPTION: Shows how to enable coroutine debugging for all tests within a spec by setting the 'coroutineDebugProbes' property to true in the spec initialization block. This applies debugging to all tests in the spec without needing to configure each test individually.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n  init {\n\n    coroutineDebugProbes = true\n\n    test(\"foo\") {\n      // debugging enabled here\n    }\n\n    test(\"bar\") {\n      // debugging enabled here\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Solution: Setup Before Tests\nDESCRIPTION: Demonstrates how to properly initialize mocks before each test using Kotest's beforeTest listener. This ensures fresh mocks for each test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/integrations/mocks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    lateinit var repository: MyRepository\n    lateinit var target: MyService\n\n    beforeTest {\n        repository = mockk()\n        target = MyService(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Registering TimerListener Project-Wide in Kotest\nDESCRIPTION: This code demonstrates how to register the TimerListener extension project-wide by implementing the AbstractProjectConfig class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/extensions/examples.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyConfig : AbstractProjectConfig() {\n    override fun extensions(): List<Extension> = listOf(TimerListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Using containInAnyOrder Collection Matcher in KotlinTest\nDESCRIPTION: Shows how to use the containInAnyOrder matcher to verify that a collection contains all specified elements regardless of order in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should containInAnyOrder(4,2,3)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Class Name Pattern with Gradle\nDESCRIPTION: A command to run only tests in classes ending with 'IntegrationTest' using Gradle's standard test filtering approach. Works for all tests with matching class names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/gradle.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradle test --tests '*IntegrationTest'\n```\n\n----------------------------------------\n\nTITLE: Writing Tests with FreeSpec in Kotlin\nDESCRIPTION: Example of FreeSpec style which allows arbitrary nesting levels using the minus symbol.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/styles.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FreeSpec({\n    \"String.length\" - {\n        \"should return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Class for Konform Validation in Kotlin\nDESCRIPTION: A simple data class definition that will be used for validation examples. It contains a required string field and an optional integer field.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/konform.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class UserProfile(\n   val fullName: String,\n   val age: Int?\n)\n```\n\n----------------------------------------\n\nTITLE: Error Output with Domain Object Clue\nDESCRIPTION: The error output when using a domain object as a clue, showing the object's string representation along with the assertion details.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nHttpResponse(status=404, body=the content)\nExpected :200\nActual   :404\n```\n\n----------------------------------------\n\nTITLE: Using Generator Bind for Creating Complex Test Data in KoTest\nDESCRIPTION: Example of using the bind function with generators to create instances of a data class for property-based testing in KoTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val email: String, val id: Int)\n\nval userGen = Gen.bind(Gen.string(), Gen.positiveIntegers(), ::User)\n\nassertAll(userGen) {\n  it.email shouldNotBe null\n  it.id should beGreaterThan(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding Kotest Testcontainers extension to the project. It includes the full XML snippet for the dependency declaration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers_46x.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Test Task for JUnit XML Reporting\nDESCRIPTION: Gradle configuration to disable built-in JUnit XML reporting and set the build directory system property required by the reporter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/junit_xml.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") {\n  useJUnitPlatform()\n  reports {\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Focus and Bang Test Examples in Kotest\nDESCRIPTION: Demonstrates how to use focus (f:) and bang (!) prefixes to selectively run or skip tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : StringSpec({\n    \"test 1\" {\n     // this will be skipped\n    }\n\n    \"f:test 2\" {\n     // this will be executed\n    }\n\n    \"test 3\" {\n     // this will be skipped\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Activating SpringExtension Per Test Class in Kotest\nDESCRIPTION: This code demonstrates how to activate the SpringExtension for a specific test class by overriding the extensions() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/spring.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : FunSpec() {\n   override fun extensions() = listOf(SpringExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: Test Lifecycle Listener Implementation\nDESCRIPTION: Shows how to implement test listeners for measuring test execution time and handling test lifecycle events.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimerListener : TestListener {\n\n  var started = 0L\n\n  override fun beforeTest(testCase: TestCase): Unit {\n    started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(testCase: TestCase, result: TestResult): Unit {\n    println(\"Duration of ${testCase.descriptor} = \" + (System.currentTimeMillis() - started))\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n\n  override fun listeners(): List<TestListener> = listOf(TimerListener)\n\n  // tests here\n\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n\n    override fun beforeTest(testCase: TestCase) {\n      // BeforeTest here\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion in Kotlin Using Kotest\nDESCRIPTION: A simple Kotest assertion comparing a username with an expected value. When this fails, it shows both the expected and actual values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/clues.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nusername shouldBe \"sksamuel\"\n```\n\n----------------------------------------\n\nTITLE: Using Property Testing with Classify for Distribution Analysis\nDESCRIPTION: Shows how to use the classify function in property testing to track distribution of generated values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nassertAll(Gen.string()) { a ->\n    classify(a.contains(\" \"), \"has whitespace\", \"no whitespace\")\n    // some test\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Allure Results Directory in Gradle Test Task\nDESCRIPTION: This Gradle configuration sets the Allure results directory system property for the test task. This is required when not using the Allure Gradle plugin to specify where Allure should store its results.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/allure.md#2025-04-13_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.named<Test>(\"test\") { // or \"jvmTest\" etc\n   useJUnitPlatform()\n   systemProperty(\"allure.results.directory\", project.buildDir.toString() + \"/allure-results\")\n}\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Testing of Pythagorean Triples in Kotest\nDESCRIPTION: Demonstrates how to use Kotest's new data-driven testing feature to test multiple Pythagorean triples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.3.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n    forAll(\n       PythagTriple(3, 4, 5),\n       PythagTriple(6, 8, 10),\n       PythagTriple(8, 15, 17),\n       PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n        isPythagTriple(a, b, c) shouldBe true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: IsolationMode Configuration Solution\nDESCRIPTION: Solution using IsolationMode.InstancePerTest to create fresh instances for each test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/integrations/mocks.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    isolation = IsolationMode.InstancePerTest\n\n})\n```\n\n----------------------------------------\n\nTITLE: Testing File Path Prefixes in KotlinTest\nDESCRIPTION: Demonstrates how to verify if a file path starts with a specific prefix using the startWithPath matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nFile(\"/usr/home/sam\") should startWithPath(\"/usr/home\")\nFile(\"/usr/home/sam\") shouldNot startWithPath(\"/var\")\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Assertions with Clues\nDESCRIPTION: Demonstrates how to add contextual information to test assertions using withClue and asClue helpers for better failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithClue(\"Name should be present\") { user.name shouldNotBe null }\n\ndata class HttpResponse(val status: Int, body: String)\nval response = HttpResponse(200, \"the content\")\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveValue Matcher for Maps in Kotlin for KotlinTest\nDESCRIPTION: Illustrates the usage of the haveValue matcher for Map<K,V> in KotlinTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveValue(\"a\")\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Kafka with Custom Kafka Port\nDESCRIPTION: Demonstrates how to create an embedded Kafka listener with a custom port instead of using the default instance, then using it to send and receive messages in a test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/kafka.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaCustomPortTest : FunSpec({\n\n   val listener = EmbeddedKafkaListener(5678)\n   listener(listener)\n\n   test(\"send / receive\") {\n\n      val producer = listener.stringStringProducer()\n      producer.send(ProducerRecord(\"foo\", \"a\"))\n      producer.close()\n\n      val consumer = listener.stringStringConsumer(\"foo\")\n      eventually(10.seconds) {\n         consumer.poll(1000).first().value() shouldBe \"a\"\n      }\n      consumer.close()\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Null Check Assertion Example\nDESCRIPTION: Demonstrates a basic null check assertion that shows the need for additional context through clues.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/index.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-line Test Names in Kotest\nDESCRIPTION: Shows how to define test names over multiple lines in Kotest, which can be formatted with whitespace removal.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.3.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n  init {\n   \"\"\"this is a\n      test spanning multiple lines\"\"\" { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Callbacks in DescribeSpec\nDESCRIPTION: Shows how to use the new beforeEach, beforeContainer, and beforeTest callbacks in a DescribeSpec. These callbacks allow for more granular control over test setup for different scope levels.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.2.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CallbacksTest : DescribeSpec({\n\n   beforeEach {\n      println(\"Test: \" + it.displayName)\n   }\n\n   beforeContainer {\n      println(\"Container: \" + it.displayName)\n   }\n\n   beforeTest {\n      println(\"All: \" + it.displayName)\n   }\n\n   describe(\"I am a container scope\") {\n      it(\"And I am a test scope\") { }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting NonEmptyList Properties in Kotlin with Kotest Arrow Matchers\nDESCRIPTION: These matchers provide various assertions for NonEmptyList types, including content checks, null checks, duplicate detection, and sorting verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nnel.shouldContain(e)\nnel.shouldContainAll(e1,e2,...,en)\nnel.shouldContainNull()\nnel.shouldContainNoNulls()\nnel.shouldContainOnlyNulls()\nnel.shouldHaveDuplicates()\nnel.shouldBeSingleElement(e)\nnel.shouldBeSorted()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Container\nDESCRIPTION: Example of setting up a Kafka container with embedded Zookeeper.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval kafka = install(ContainerExtension(KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:6.2.1\")))) {\n  withEmbeddedZookeeper()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Logging in Kotest Test\nDESCRIPTION: Shows how to use logging functions within a Kotest test scope. Demonstrates the basic usage of warning level logging.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/logging.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something\") {\n  warn { \"something weird happened\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Using autoClose in Kotlin for Kotest\nDESCRIPTION: Shows how to use the autoClose feature in Kotest to automatically close resources of type Closeable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_43\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure in Gradle\nDESCRIPTION: Gradle configuration block for Allure settings including version and autoconfigure options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/allure.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nallure {\n  autoconfigure = false\n  version = \"2.13.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency with Maven\nDESCRIPTION: Maven dependency configuration for adding the Kotest Testcontainers extension to your project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Konform Validation\nDESCRIPTION: Shows how to test that a UserProfile instance fails validation and verify specific error messages using shouldBeInvalid matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/konform.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval bob = UserProfile(\"bob\", 18)\nvalidateUser.shouldBeInvalid(bob) {\n  it.shouldContainError(UserProfile::fullName, \"must have at least 4 characters\")\n  it.shouldContainError(UserProfile::age, \"must be at least '21'\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Config Dump in Gradle\nDESCRIPTION: Shows how to enable configuration dumping by setting a system property in the Gradle test task. This sets the 'kotest.framework.dump.config' property to 'true'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/config_dump.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntest {\n  systemProperty \"kotest.framework.dump.config\", \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying EnabledIf Annotation to Kotest Spec\nDESCRIPTION: Shows how to use the EnabledIf annotation with a custom EnabledCondition to conditionally execute a test spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.3.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(EnabledIfMidnight::class)\nclass EnabledIfTest : FunSpec() {\n   init {\n      test(\"tis midnight when the witches roam free\") {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using haveSize Matcher in Kotlin with KotlinTest\nDESCRIPTION: Demonstrates the use of haveSize matcher in KotlinTest for collection size assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nmyCollection should haveSize(4)\n```\n\n----------------------------------------\n\nTITLE: Setting Invocation Timeout for Multiple Test Runs\nDESCRIPTION: Demonstrates setting a timeout per individual test invocation when running multiple times.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times and each has a timeout of 60 milliseconds\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core for JavaScript Only\nDESCRIPTION: Adds the core assertions library specifically to the JavaScript target in a multiplatform project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-assertions-core:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually Shared Configuration in Kotlin\nDESCRIPTION: Example demonstrating how to share and customize eventually configurations across different test suites.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/eventually.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval slow = eventuallyConfig {\n  duration = 5.minutes\n  interval = 25.milliseconds.fibonacci()\n  listener = { i, t -> logger.info(\"Current $i after {${t.times} attempts\") }\n}\n\nval fast = slow.copy(duration = 5.seconds)\n\nclass FooTests : FunSpec({\n  test(\"server eventually provides a result for /foo\") {\n    eventually(slow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : FunSpec({\n  test(\"server eventually provides a result for /bar\") {\n    eventually(fast) {\n      barApi()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Callbacks in Kotest DescribeSpec\nDESCRIPTION: Shows how to use the new extended callbacks (beforeEach, afterEach, beforeContainer, afterContainer) in a Kotest DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.2.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CallbacksTest : DescribeSpec({\n\n   beforeEach {\n      println(\"Test: \" + it.displayName)\n   }\n\n   beforeContainer {\n      println(\"Container: \" + it.displayName)\n   }\n\n   beforeTest {\n      println(\"All: \" + it.displayName)\n   }\n\n   describe(\"I am a container scope\") {\n      it(\"And I am a test scope\") { }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast at Spec Level in Kotest\nDESCRIPTION: This snippet shows how to enable fail fast for an entire spec in Kotest. When enabled at the spec level, all tests after a failure will be skipped, regardless of their nesting level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/fail_fast.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FailFastTests() : FunSpec() {\n   init {\n\n      failfast = true\n\n      context(\"context with fail fast enabled at the spec level\") {\n         test(\"a\") {} // pass\n         test(\"b\") { error(\"boom\") } // fail\n         test(\"c\") {} // skipped\n         context(\"d\") {  // skipped\n            test(\"e\") {} // skipped\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Property-Based Test with Shrinking in Kotest\nDESCRIPTION: Example of using the property testing framework in Kotest to check that a string reversed equals the original, demonstrating the improved shrinking output in Kotest 4.1.0.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String> { a ->\n  a shouldBe a.reversed()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tests with Command-line Filtering\nDESCRIPTION: These examples show how to use Gradle's --tests flag to filter tests from the command line. The first command runs tests in a specific package, while the second runs tests with names ending in 'IntegrationTest'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/gradle.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngradle test --tests 'com.sksamuel.somepackage*'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngradle test --tests '*IntegrationTest'\n```\n\n----------------------------------------\n\nTITLE: AnnotationSpec Example in KotlinTest\nDESCRIPTION: Shows how to use AnnotationSpec with JUnit-style test annotations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n  @Test\n  fun test1() {\n\n  }\n\n  @Test\n  fun test2() {\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Comparison Options in Kotlin\nDESCRIPTION: Example of using CompareJsonOptions to customize JSON comparison behavior with array ordering.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/json/content.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldEqualJson(b, compareJsonOptions { arrayOrder = ArrayOrder.Strict })\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing to JavaScript Target\nDESCRIPTION: Configures a Kotlin Multiplatform project to include Kotest property testing specifically for the JavaScript target. This setup enables property-based testing in browser and Node.js environments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using String Length Comparison Matcher\nDESCRIPTION: Demonstrates the haveSameLengthAs matcher for comparing the length of two strings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello\" should haveSameLengthAs(\"world\")\n\"hello\" shouldNot haveSameLengthAs(\"you\")\n```\n\n----------------------------------------\n\nTITLE: Generating Random Strings with Kotest Arbitrary\nDESCRIPTION: Uses Arb.string(range) to generate random printable strings with a size chosen from the given range. If no range is specified, it defaults to (0..100). Edge cases include empty string, blank string, and unicode string.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.string(range)\n```\n\n----------------------------------------\n\nTITLE: Spring Field Injection in KotlinTest with SpringListener\nDESCRIPTION: Shows how to integrate KotlinTest with Spring Framework using field injection, where the SpringListener autowires beans into test class fields.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(TestConfiguration::class)])\nclass SpringExampleSpec : WordSpec() {\n\n  override fun listeners() = listOf(SpringListener)\n\n  @Autowired\n  var bean: MyBean? = null\n\n  init {\n    \"Spring Extension\" should {\n      \"have wired up the bean\" {\n        bean shouldNotBe null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instant Generation in Kotest\nDESCRIPTION: Generates Instant instances with epoch values within specified range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_55\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Kotlin/JS Test Configuration\nDESCRIPTION: Configures Kotlin/JS test dependencies and targets for browser and Node.js\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/quick_start.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) {\n      browser()\n      nodejs()\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency for JVM/Gradle in Kotlin\nDESCRIPTION: This snippet shows how to add the Kotest property testing dependency to a Gradle build file for JVM projects. It includes the dependency in the testImplementation configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n   testImplementation(\"io.kotest:kotest-property:$version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Dates within Range in Kotlin\nDESCRIPTION: Creates random dates with years falling within the specified range. Primarily available for the JVM platform in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.date(ranges)\n```\n\n----------------------------------------\n\nTITLE: Adding Pitest Kotest Extension Dependency in Gradle\nDESCRIPTION: Adds the Kotest Pitest extension dependency to the Gradle build file for mutation testing support.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/pitest.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-extensions-pitest:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Using Composed Matchers in Kotest Tests\nDESCRIPTION: Example of how to use the composed matcher in test assertions. Shows both a passing and failing case to demonstrate the matcher's behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/data_class_matchers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nPerson(\"John\", 21, Address(\"Warsaw\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21)\nPerson(\"Sam\", 22, Address(\"Chicago\", \"Test\", \"1/1\")).shouldBePerson(\"John\", 21) // would fail\n```\n\n----------------------------------------\n\nTITLE: Adding Jacoco Plugin in Gradle\nDESCRIPTION: Adds the Jacoco plugin to the Gradle build configuration for enabling code coverage analysis.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/integrations/jacoco.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n   ...\n   jacoco\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Option Type Matchers in Kotest Arrow Extension\nDESCRIPTION: Matchers for testing Arrow's Option type, including assertions for Some and None variants with optional value verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Option                   |                                                           |\n|--------------------------|-----------------------------------------------------------|\n| `option.shouldBeSome()`  | Asserts that the option is of type Some and returns value |\n| `option.shouldBeSome(v)` | Asserts that the option is of type Some with value v      |\n| `option.shouldBeNone()`  | Asserts that the option is of type None                   |\n```\n\n----------------------------------------\n\nTITLE: Installing WireMock Kotest Extension Dependency\nDESCRIPTION: Maven/Gradle dependency declaration for adding the WireMock extension to a Kotest project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/wiremock.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.kotest.extensions:kotest-extensions-wiremock:{version}\n```\n\n----------------------------------------\n\nTITLE: Using Property Test Generators for KotlinX DateTime in Kotest\nDESCRIPTION: Illustrates the use of new property test generators for the KotlinX DateTime library in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.3.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Arb.datetime(1987..1994)) { date ->\n   isValidStarTrekTngSeason(date) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Strongly Typed Container in Kotlin\nDESCRIPTION: Demonstrates how to create a strongly typed container (Elasticsearch) using TestContainerExtension in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval elasticsearch = install(TestContainerExtension(ElasticsearchContainer(ELASTICSEARCH_IMAGE) )) {\n  withPassword(ELASTICSEARCH_PASSWORD)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Timeouts in Kotest\nDESCRIPTION: Shows how to set timeouts for test cases and individual invocations in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.1.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds) { }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds,\n                         invocationTimeout = 250.milliseconds,\n                         invocations = 10) { }\n```\n\n----------------------------------------\n\nTITLE: Using AnnotationSpec with Expected Exception in Kotlin\nDESCRIPTION: AnnotationSpec now supports configuring expected exceptions. This allows for easier migration from JUnit-style tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : AnnotationSpec() {\n  @Test\n  fun test() {\n    expected = IllegalArgumentException::class\n    // Test code that should throw IllegalArgumentException\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TestScope in Kotlin Extension Functions\nDESCRIPTION: Example of using the renamed TestScope (formerly TextContext) in a custom extension function for Kotest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun TestScope.customAssert() {\n  // Custom assertion logic\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Extension Dependency\nDESCRIPTION: Maven/Gradle dependency declaration for adding the Kotest Koin extension to your project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/koin.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-extensions-koin:${version}\n```\n\n----------------------------------------\n\nTITLE: Disabling BlockHound for Specific Test\nDESCRIPTION: Shows how to disable BlockHound for an individual test case using configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/blockhound.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"allow blocking\").config(extensions = listOf(BlockHound(BlockHoundMode.DISABLED))) {\n   blockInNonBlockingContext()\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Config Dump in Gradle\nDESCRIPTION: Shows how to enable configuration dumping by setting a system property in the Gradle test task configuration block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/config_dump.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntest {\n  systemProperty \"kotest.framework.dump.config\", \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using TimeTracker TestListener in KotlinTest\nDESCRIPTION: Example of implementing a TestListener for tracking test execution time. The listener records the start time before each test and calculates duration after the test completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nobject TimeTracker : TestListener {\n\n  var started = 0L\n\n  override fun beforeTest(description: Description) {\n    TimeTrackerTest.started = System.currentTimeMillis()\n  }\n\n  override fun afterTest(description: Description, result: TestResult) {\n    val duration = System.currentTimeMillis() - TimeTrackerTest.started\n    println(\"Test ${description.fullName()} took ${duration}ms\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Equality Configuration - Kotlin\nDESCRIPTION: Example demonstrating configuration of field equality checks using FieldsEqualityCheckConfig class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldBeEqualToComparingFields(expected, FieldsEqualityCheckConfig())\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Test Options\nDESCRIPTION: Sets up Android test options to use JUnit Platform for Kotest testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/quick_start.mdx#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      it.useJUnitPlatform()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Modern Test Case Configuration in Kotest\nDESCRIPTION: Shows the new recommended way to configure test case defaults using individual property settings\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_5.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n\n    tags(Foo, Bar)\n    timeout = 100.seconds\n\n    test(\"foo\") {\n       // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Class in Kotlin for Diff Comparison Example\nDESCRIPTION: Example of a simple data class definition used to demonstrate the improved diff comparison feature in Kotest 4.1.0.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Foo(val a: String, val b: Boolean, val c: Double)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jacoco Settings\nDESCRIPTION: Configures Jacoco tool version and optional custom report directory in Gradle build file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/integrations/jacoco.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\njacoco {\n    toolVersion = \"0.8.7\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Exhaustive Generator for Prime Numbers\nDESCRIPTION: Demonstrates creating an exhaustive generator from a list of prime numbers using the exhaustive() extension function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/customgens.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval singleDigitPrimes = listOf(2,3,5,7).exhaustive()\n```\n\n----------------------------------------\n\nTITLE: Iterator Matchers in Kotlin with Kotest\nDESCRIPTION: Shows matchers for asserting the state of iterators in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\niterator.shouldBeEmpty()\niterator.shouldHaveNext()\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Pythagorean Triple Tests in Kotlin\nDESCRIPTION: Creates a data class to represent a set of inputs for Pythagorean triple tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.3.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Classifying Property Test Outputs in KotlinTest\nDESCRIPTION: Shows how to use the classify function in property-based testing to generate statistics on the distribution of generated values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nassertAll(Gen.string()) { a ->\n    classify(a.contains(\" \"), \"has whitespace\", \"no whitespace\")\n    // some test\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency (Gradle)\nDESCRIPTION: Adds the Kotest property testing dependency to a Gradle project for JVM tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-property:$version'\n```\n\n----------------------------------------\n\nTITLE: Registering TimerListener Project-wide in Kotest\nDESCRIPTION: This snippet shows how to register the TimerListener extension project-wide in Kotest using AbstractProjectConfig. This applies the extension to all tests in the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/extensions/examples.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyConfig : AbstractProjectConfig() {\n    override fun extensions(): List<Extension> = listOf(TimerListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Kotest Property Testing in Multiplatform JavaScript Tests\nDESCRIPTION: Kotlin Multiplatform configuration for adding Kotest property testing support specifically for JavaScript tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/index.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Absolute Coverage Counts in Kotest Property Tests\nDESCRIPTION: Shows how to use withCoverageCounts to verify that specific categories of test values appear a minimum number of times, providing an alternative to percentage-based validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/statistics.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nwithCoverageCounts(mapOf(RoundingMode.HALF_DOWN to 75, RoundingMode.FLOOR to 75)) {\n  checkAll(Arb.enum<RoundingMode>(), Arb.bigDecimal()) { mode, decimal ->\n    collect(mode)\n    // use the mode / decimal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using forNone in Table Testing in Kotlin\nDESCRIPTION: Demonstrates the use of forNone for table testing, which asserts that the given test fails for all rows in the table.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_48\n\nLANGUAGE: kotlin\nCODE:\n```\nval table = table(\n    headers(\"a\", \"b\"),\n    row(0L, 2L),\n    row(2L, 2L),\n    row(4L, 5L),\n    row(4L, 6L)\n)\n\nforNone(table) { a, b ->\n  3 shouldBe between(a, b)\n}\n```\n\n----------------------------------------\n\nTITLE: Endo Type Generator\nDESCRIPTION: Generator for Arrow's Endo type, wrapping values in Endo instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/arrow.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.endo(arb)\n```\n\n----------------------------------------\n\nTITLE: Exhaustive Collection Generation in Kotest\nDESCRIPTION: Function to create an exhaustive generator that enumerates each element of a given list one by one.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_30\n\nLANGUAGE: Kotlin\nCODE:\n```\nExhaustive.collection(list)\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to Test Cases in Kotlin\nDESCRIPTION: Demonstrates how to apply tags to individual test cases using the config function, allowing tests to be associated with one or more categorizing tags for selective execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotlintest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Mocks After Tests Solution\nDESCRIPTION: Solution using afterTest hook to clear mock states after each test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/integrations/mocks.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    afterTest {\n        clearMocks(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using contain Matcher for Maps in Kotlin with KotlinTest\nDESCRIPTION: Shows how to use the contain matcher in KotlinTest to check if a map contains a specific key-value pair.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should contain(1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Using haveLength String Matcher in KotlinTest\nDESCRIPTION: Demonstrates the haveLength matcher for asserting string length in KotlinTest. This matcher provides a more readable syntax for string length assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nsomeString should haveLength(10)\n```\n\n----------------------------------------\n\nTITLE: Using containInAnyOrder Matcher in Kotlin with KotlinTest\nDESCRIPTION: Shows how to use the containInAnyOrder matcher in KotlinTest to check if a collection contains specific elements in any order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should containInAnyOrder(4,2,3)\n```\n\n----------------------------------------\n\nTITLE: Adding Koin Extension Dependency\nDESCRIPTION: Maven/Gradle dependency declaration for adding Koin extension support to a Kotest project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/koin.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-extensions-koin:${version}\n```\n\n----------------------------------------\n\nTITLE: Release Version Headers\nDESCRIPTION: Version headers showing the release date and version number for major Kotest releases\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.5.5 February 2023\n\n## 5.5.4 November 2022\n\n## 5.5.3 October 2022\n\n## 5.5.2 October 2022\n\n## 5.5.1 October 2022\n\n## 5.5.0 October 2022\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Name Pattern Using Kotest\nDESCRIPTION: A command to run only tests with names starting with 'Foo' in any package using Kotest's test name filtering capability. This demonstrates the flexibility of Kotest's filtering approach.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/conditional/gradle.md#2025-04-13_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.tests='Foo*'\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Dependency in Gradle (Groovy)\nDESCRIPTION: This snippet shows how to add the Kotest Allure extension dependency to a Gradle build file. It uses the kotest.version variable to specify the version.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/allure.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-allure:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Asserting Date Properties in Kotest\nDESCRIPTION: This snippet shows assertion methods for Dates in Kotest. It covers comparisons, period checks, and individual date component assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\ndate.shouldHaveSameMonthAs(otherDate)\ndate.shouldHaveSameDayAs(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeWithin(period, otherDate)\ndate.shouldBeWithin(duration, otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDayOfYear(day)\ndate.shouldHaveDayOfMonth(day)\ndate.shouldHaveDayOfWeek(day)\ndate.shouldHaveHour(hour)\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec in Kotlin for KotlinTest\nDESCRIPTION: Demonstrates how to use StringSpec in KotlinTest to create simple string-based tests. It shows basic assertions and configuration of test invocations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  init {\n    \"strings.size should return size of string\" {\n      \"hello\".length shouldBe 5\n      \"hello\" should haveLength(5)\n    }\n\n    \"strings should support config\" {\n      \"hello\".length shouldBe 5\n    }.config(invocations = 5)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring System Properties at Test Level\nDESCRIPTION: Shows how to set system properties for an entire test class using a SystemPropertyListener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n    override fun listeners() = listOf(SystemPropertyListener(\"foo\", \"bar\"))\n\n    init {\n        \"MyTest\" {\n            System.getProperty(\"foo\") shouldBe \"bar\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core Dependency in Gradle\nDESCRIPTION: Adds the core assertions library to a Gradle project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\n----------------------------------------\n\nTITLE: Testing System Properties in Kotest\nDESCRIPTION: Kotlin test example demonstrating how to verify system properties are correctly loaded from the properties file using Kotest's DescribeSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/intellij/props.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FooTest : DescribeSpec() {\n  init {\n    describe(\"after adding kotest.properties\") {\n      it(\"foo should be set\") {\n         System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Type Assertions in Kotlin\nDESCRIPTION: Demonstrates smart casting using shouldBeTypeOf with generic types in Kotlin assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.2.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval list: Any = arrayListOf(1, 2, 3)\nlist.shouldBeTypeOf<ArrayList<Int>>()\nlist[0] shouldBe 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Test Task for HTML Reporting\nDESCRIPTION: This Gradle configuration disables the default HTML and JUnit XML reports, and sets a system property for the build directory. This is necessary to prevent conflicts with Kotest's HTML reporter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/html_reporter.md#2025-04-13_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.test {\n  useJUnitPlatform()\n  reports {\n    html.required.set(false)\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Long Array Generator Usage\nDESCRIPTION: Generates LongArray instances with specified length and content generators\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.longArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Maven\nDESCRIPTION: Demonstrates how to add the Kotest Testcontainers extension dependency to a Maven POM file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/test_containers.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Asserting Property Types and Characteristics in Kotlin\nDESCRIPTION: These matchers are used to assert various characteristics of Kotlin properties, such as their type, whether they are const or late init, and their visibility.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nkproperty.shouldBeOfType<T>()\nkproperty.shouldBeConst()\nkproperty.shouldBeLateInit()\n```\n\n----------------------------------------\n\nTITLE: Defining IndexedSeq Interface in Kotlin\nDESCRIPTION: Interface definition for an indexed sequence data structure with basic operations like size, add, and contains.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/test_factories.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface IndexedSeq<T> {\n\n    // returns the size of t\n    fun size(): Int\n\n    // returns a new seq with t added\n    fun add(t: T): IndexedSeq<T>\n\n    // returns true if this seq contains t\n    fun contains(t: T): Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Config Syntax in KotlinTest 3.0.x\nDESCRIPTION: Shows the deprecated configuration syntax used in KotlinTest 3.0.x, where configuration was applied after the test block. This approach is no longer supported in 3.1.x.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n\"this is a test\" {\n}.config(...)\n```\n\n----------------------------------------\n\nTITLE: Individual Row Tests in FreeSpec KotlinTest\nDESCRIPTION: This example shows how to generate individual tests for each row of data in a FreeSpec, demonstrating addition and complex math operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Maven\nDESCRIPTION: Demonstrates how to add the Kotest Testcontainers extension dependency to a Maven pom.xml file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Integrating Testcontainers Per Test with Kotest\nDESCRIPTION: Example showing how to register a Testcontainer to be started and stopped between individual tests using the perTest() function from the kotest-extensions-testcontainers module.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval testStartable = SomeTestContainer()\nlisteners(testStartable.perTest())\n```\n\n----------------------------------------\n\nTITLE: Accessing TestContextManager in Kotest Spring Test\nDESCRIPTION: This code shows how to access the TestContextManager provided by the Spring extension within a Kotest test using the testContextManager() extension method.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/spring.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec(service: UserService) : WordSpec() {\n  init {\n    \"SpringExtension\" should {\n      \"provide the test context manager\" {\n         println(\"The context is \" + testContextManager().testContext)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing System Output with NoSystemOutListener in Kotlin\nDESCRIPTION: Example test class demonstrating how to use NoSystemOutListener and NoSystemErrListener to catch and verify system output writes. The listeners intercept calls to System.out and System.err and throw exceptions that can be tested.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass NoSystemOutOrErrTest : StringSpec() {\n\n  override fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n\n  init {\n\n    \"System.out should throw an exception when the listener is added\" {\n      shouldThrow<SystemOutWriteException> {\n        System.out.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n\n    \"System.err should throw an exception when the listener is added\" {\n      shouldThrow<SystemErrWriteException> {\n        System.err.println(\"boom\")\n      }.str shouldBe \"boom\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Choosing Random Arbitraries in Kotlin with Kotest\nDESCRIPTION: Uses Arb.choice() to randomly select one of the given arbitraries for generating the next element.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_21\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.choice(arbs)\n```\n\n----------------------------------------\n\nTITLE: Testing Objects for Same Hash Code\nDESCRIPTION: Shows how to verify that two objects have the same hash code using the haveSameHashCodeAs matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nobj1 should haveSameHashCodeAs(obj2)\n\"hello\" shouldNot haveSameHashCodeAs(\"world\")\n```\n\n----------------------------------------\n\nTITLE: Gradle Configuration for System Properties\nDESCRIPTION: Shows how to configure Gradle to properly propagate system properties to test executors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/tags.md#2025-04-13_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    //... Other configurations ...\n    systemProperties = System.properties\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().associate { it.key.toString() to it.value }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest WireMock Extension Dependency\nDESCRIPTION: Maven/Gradle dependency declaration for adding the Kotest WireMock extension to your project. Replace {version} with the desired version of the extension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/wiremock.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.kotest.extensions:kotest-extensions-wiremock:{version}\n```\n\n----------------------------------------\n\nTITLE: Setting System Properties for Config Auto-scanning\nDESCRIPTION: Shows how to disable auto-scanning for config classes and specify a well-known class name for Kotest to instantiate reflectively.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/project_config.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nkotest.framework.classpath.scanning.config.disable=true\nkotest.framework.config.fqn=com.wibble.KotestConfig\n```\n\n----------------------------------------\n\nTITLE: Automatic Resource Closing in KotlinTest\nDESCRIPTION: Demonstrates how to use the autoClose function to automatically close resources after test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Default Test Case Configuration in Kotest\nDESCRIPTION: Shows the deprecated way of setting default test case configuration in Kotest specs, which uses the defaultTestCaseConfig function. This approach is no longer recommended.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_5.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n    override fun defaultTestCaseConfig() = TestCaseConfig(tags = setOf(Foo, Bar), timeout = 100.seconds)\n    test(\"foo\") {\n      // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Class Definition Example in Kotlin\nDESCRIPTION: Example showing a simple data class definition used to demonstrate the new diff comparison feature.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.1.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Foo(val a: String, val b: Boolean, val c: Double)\n```\n\n----------------------------------------\n\nTITLE: Generating Random LocalDateTime Objects in Kotlin\nDESCRIPTION: Creates random LocalDateTime instances with years falling within the specified range. This generator is designed for the JVM platform in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.localDateTime(ranges)\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class in Kotlin\nDESCRIPTION: Example of defining a data class named Foo with three properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.1.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Foo(val a: String, val b: Boolean, val c: Double)\n```\n\n----------------------------------------\n\nTITLE: Example of Blocking Call Detection\nDESCRIPTION: Shows an example of a blocking call in a non-blocking context that BlockHound will detect.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/blockhound.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate suspend fun blockInNonBlockingContext() {\n   withContext(Dispatchers.Default) {\n      @Suppress(\"BlockingMethodInNonBlockingContext\")\n      Thread.sleep(2)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Property-Based Testing in Kotlin\nDESCRIPTION: Demonstrates property-based testing with automatically generated test values. Tests string concatenation properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n\n  \"String size\" {\n    forAll({ a: String, b: String ->\n      (a + b).length == a.length + b.length\n    })\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Extension Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration for adding the Kotest Allure extension to your project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/allure.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-allure:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Creating Cartesian Product of Exhaustives in Kotlin\nDESCRIPTION: A new method has been added to Exhaustive to create a cartesian product of two Exhaustives.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nval product = Exhaustive.cartesian(exhaustive1, exhaustive2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Test Filtering in Build Script\nDESCRIPTION: Example of how to include tests matching a specific package pattern in the Gradle build script using the filter configuration block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/conditional/gradle.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.test {\n    filter {\n        //include all tests from package\n        includeTestsMatching(\"com.somepackage.*\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency for Multiplatform in Kotlin\nDESCRIPTION: This snippet shows how to add the Kotest property testing dependency to a Kotlin Multiplatform project's commonTest sourceset. It uses the Kotlin DSL to configure the dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/index.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-property:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Assertion Example - Kotlin\nDESCRIPTION: Example showing map assertions with shouldMatchAll where each value is a function containing assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nmap.shouldMatchAll { value -> value.assertions() }\n```\n\n----------------------------------------\n\nTITLE: Generating Byte Arrays in Kotlin with Kotest\nDESCRIPTION: Shows how to create an Arb generator for byte arrays in Kotest. The generator allows specifying both the length of the array and the content generator for the byte values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.byteArray(length, content)\n```\n\n----------------------------------------\n\nTITLE: CSV Data Source Example in KotlinTest\nDESCRIPTION: Shows how to use CsvDataSource for table testing with data loaded from CSV files.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CsvDataSourceTest : WordSpec() {\n  init {\n\n    \"CsvDataSource\" should {\n      \"read data from csv file\" {\n\n        val source = CsvDataSource(javaClass.getResourceAsStream(\"/user_data.csv\"), CsvFormat())\n\n        val table = source.createTable<Long, String, String>(\n            { it: Record -> Row3(it.getLong(\"id\"), it.getString(\"name\"), it.getString(\"location\")) },\n            { it: Array<String> -> Headers3(it[0], it[1], it[2]) }\n        )\n\n        forAll(table) { a, b, c ->\n          a shouldBe gt(0)\n          b shouldNotBe null\n          c shouldNotBe null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Subsequences in Kotest\nDESCRIPTION: Creates random subsequences of a given list, including the empty list and starting from index 0.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_25\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.subsequence(list)\n```\n\n----------------------------------------\n\nTITLE: IPv4 Address Generation in Kotest\nDESCRIPTION: Generates random IPv4 addresses in standard format (a.b.c.d) where each octet is between 0 and 255.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_56\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.ipAddressV4()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest Engine for Native (Gradle)\nDESCRIPTION: Configures the Kotest engine dependency for Native tests in a multiplatform project using Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    linuxX64() // can add any supported native targets such as linux, mac, windows etc\n  }\n}\nsourceSets {\n  val commonTest by getting {\n    dependencies {\n      implementation(\"io.kotest:kotest-framework-engine:$version\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Test Configuration\nDESCRIPTION: Configures Kotlin multiplatform for JavaScript testing with Kotest\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/quick_start.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) { \n      browser()\n      nodejs()\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing for Multiplatform (Gradle)\nDESCRIPTION: Adds the Kotest property testing dependency to a multiplatform project's common test source set using Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_15\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-property:$version'\n```\n\n----------------------------------------\n\nTITLE: Manipulating TestClock in Kotlin\nDESCRIPTION: Demonstrates how to advance the TestClock by a specific duration. This method mutates the internal state of the clock instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/clock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclock.plus(6.minutes)\n```\n\n----------------------------------------\n\nTITLE: Adding Pitest Kotest Extension Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration to add the Kotest Pitest extension module to the project's test implementation dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/pitest.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n    testImplementation(\"io.kotest.extensions:kotest-extensions-pitest:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Gradle Command Line Test Filtering by Pattern\nDESCRIPTION: Example of filtering tests by name pattern using Gradle's command line --tests option.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/gradle.md#2025-04-13_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\ngradle test --tests '*IntegrationTest'\n```\n\n----------------------------------------\n\nTITLE: Using TestLogger Object in Kotest Tests\nDESCRIPTION: Shows how to use the TestLogger object in Kotest to pass logging capabilities to test helper functions. This approach allows for adding logging statements in extension functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/logging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something else\") {\n  logger.assertSomething(\"something else\")\n}\n\nfun TestLogger.assertSomething(actual: String) {\n   info { \"asserting something about $actual\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration for adding Allure support to Kotest project\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/allure.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-allure:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Creating a Konform validator for a UserProfile in Kotlin\nDESCRIPTION: Defines validation rules for the UserProfile class. It requires the fullName to be between 4 and 100 characters, and if age is present, it must be between 21 and 99.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/konform.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval validateUser = Validation<UserProfile> {\n  UserProfile::fullName {\n     minLength(4)\n     maxLength(100)\n  }\n\n  UserProfile::age ifPresent {\n     minimum(21)\n     maximum(99)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Pitest Extension in Maven\nDESCRIPTION: XML configuration to add the Kotest extension for Pitest to Maven dependencies. This enables integration between Kotest and Pitest for mutation testing in Maven projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/pitest.md#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  ... the other Kotest dependencies like kotest-runner-junit5-jvm \n  <dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-pitest</artifactId>\n    <version>${kotest-extensions-pitest.version}</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuration Property Example - Kotlin\nDESCRIPTION: Example of configuration properties supported by Kotest, demonstrating support for variable names with underscores instead of dots.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nkotest.properties\nkotest_properties\n```\n\n----------------------------------------\n\nTITLE: Configuring ConstantNowTestListener in Kotest\nDESCRIPTION: This snippet shows how to configure a ConstantNowTestListener to maintain a constant time value across all tests in a test class. This approach affects the entire test class rather than a specific block of code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/instant.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun listeners() = listOf(\n  ConstantNowTestListener(foreverNow)\n)\n```\n\n----------------------------------------\n\nTITLE: Using DateTime Property Testing\nDESCRIPTION: Example of using Kotest's property testing generators with kotlinx datetime library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.3.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Arb.datetime(1987..1994)) { date ->\n   isValidStarTrekTngSeason(date) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spring Dependency Injection in KotlinTest with Constructor Injection\nDESCRIPTION: Demonstrates how to use the SpringAutowireConstructorExtension to enable constructor injection for Spring dependencies in KotlinTest specs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec({\n  \"SpringListener\" should {\n    \"have autowired the service\" {\n      service.repository.findUser().name shouldBe \"system_user\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Kotest External Matcher Modules in Markdown\nDESCRIPTION: This code snippet presents a markdown table listing external Kotest matcher modules, their descriptions, and types (Multiplatform or JVM).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Module | Description | Type |\n| -------- | ---- | ---- |\n| [kotest-assertions-arrow](arrow.md) | Provides matchers for the Arrow functional programming library. | JVM |\n| [kotest-assertions-compiler](compiler.md) | Provides matchers that test for compilable code. | JVM |\n| [kotest-assertions-klock](klock.md) | Providers matchers for Klock. | Multiplatform |\n| [kotest-assertions-konform](konform.md) | Provides matchers for Konform. | Multiplatform |\n| [kotest-assertions-jsoup](jsoup.md) | Provides matchers JSoup. | JVM |\n```\n\n----------------------------------------\n\nTITLE: Updating Spring Extension Dependency in Kotlin\nDESCRIPTION: Example of updating the Spring extension dependency from the old namespace to the new namespace introduced in Kotest 4.5.0.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Old dependency\nimplementation(\"io.kotest:kotest-extensions-spring:4.x.y\")\n\n// New dependency\nimplementation(\"io.kotest.extensions:kotest-extensions-spring:1.x.y\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Until Function with Fixed Interval in Kotlin\nDESCRIPTION: This example shows how to use the 'until' function with a custom fixed interval. It sets a 5-second timeout and checks for messages every 250 milliseconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/until.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 250.milliseconds.fixed()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bang to Skip Tests in Kotest StringSpec\nDESCRIPTION: This snippet illustrates the use of the '!' prefix to skip a specific test in a StringSpec. Tests without the prefix are executed normally.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/focus.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Boolean Functions\nDESCRIPTION: Example of property testing using forAll with functions returning boolean values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\n\"startsWith\" {\n  forAll(Gen.string(), Gen.string(), { a, b ->\n    (a + b).startsWith(a)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Thread State Assertions\nDESCRIPTION: Methods for checking various states of Thread objects including blocked, daemon, alive, and terminated states.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nthread.shouldBeBlocked()\nthread.shouldBeDaemon()\nthread.shouldBeAlive()\nthread.shouldBeTerminated()\n```\n\n----------------------------------------\n\nTITLE: Adding Snapshot Repository for Kotest in Kotlin Build Configuration\nDESCRIPTION: This snippet shows the repository URL that needs to be added to the project's build configuration to access Kotest snapshot builds. It should be included in the 'repositories' block of the build file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/quick_start.mdx#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nhttps://oss.sonatype.org/content/repositories/snapshots\n```\n\n----------------------------------------\n\nTITLE: Using Config Syntax with KoTest Tests - Old Style\nDESCRIPTION: The deprecated way to apply configuration to tests in KoTest 3.0.x, where config was applied after the test definition using a function call.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n\"this is a test\" {\n}.config(...)\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock Extension Dependency\nDESCRIPTION: Maven/Gradle dependency configuration needed to include the Kotest WireMock extension in your project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/wiremock.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nio.kotest.extensions:kotest-extensions-wiremock:{version}\n```\n\n----------------------------------------\n\nTITLE: Generating Individual Tests from Data Rows in Kotest FreeSpec\nDESCRIPTION: This snippet shows how to generate individual tests from data rows in Kotest's FreeSpec. It creates separate tests for addition and complex math operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Throwable Properties in Kotlin\nDESCRIPTION: These snippets show various assertions for throwable objects, including message content, cause presence, and cause type checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_25\n\nLANGUAGE: Kotlin\nCODE:\n```\nthrowable.shouldHaveMessage(message)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nthrowable.shouldHaveCause()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nthrowable.shouldHaveCause { block }\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nthrowable.shouldHaveCauseInstanceOf<T>()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nthrowable.shouldHaveCauseOfType<T>()\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Using MockServer in Kotest Tests\nDESCRIPTION: This example demonstrates how to use MockServer with Kotest to mock HTTP endpoints. It shows how to attach a MockServerListener to a test spec, configure mock routes with MockServerClient before each test, and use Ktor client to send requests and verify responses with assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/mockserver.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyMockServerTest : FunSpec() {\n  init {\n\n      // this attaches the server to the lifeycle of the spec\n      listener(MockServerListener(1080))\n\n      // we can use the client to create routes. Here we are setting them up\n      // before each test by using the beforeTest callback.\n      beforeTest {\n         MockServerClient(\"localhost\", 1080).`when`(\n            HttpRequest.request()\n               .withMethod(\"POST\")\n               .withPath(\"/login\")\n               .withHeader(\"Content-Type\", \"application/json\")\n               .withBody(\"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\")\n         ).respond(\n            HttpResponse.response()\n               .withStatusCode(202)\n               .withHeader(\"X-Test\", \"foo\")\n         )\n      }\n\n      // this test will confirm the endpoint works\n      test(\"login endpoint should accept username and password json\") {\n\n         // using the ktor client to send requests\n         val client = HttpClient(CIO)\n         val resp = client.post<io.ktor.client.statement.HttpResponse>(\"http://localhost:1080/login\") {\n            contentType(ContentType.Application.Json)\n            body = \"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\"\n         }\n\n         // these handy matchers come from the kotest-assertions-ktor module\n         resp.shouldHaveStatus(HttpStatusCode.Accepted)\n         resp.shouldHaveHeader(\"X-Test\", \"foo\")\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Android Matchers Dependency in Kotest\nDESCRIPTION: Code snippet showing how to add the Android matchers dependency to a Kotest project. This dependency is required to use Android-specific matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/android_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.kotest:kotest-assertions-android:VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Using Config with Tests in KotlinTest 3.1.x\nDESCRIPTION: Demonstrates the new syntax for applying configuration to tests in KotlinTest 3.1.x. The config is now specified after the test name instead of after the test block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n\"this is a test\".config(...) {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency in Maven\nDESCRIPTION: Adds the property testing library to a Maven project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Iterations for Property Tests in Kotlin\nDESCRIPTION: This snippet demonstrates how to set a global default iteration count for property tests and how it affects different test scenarios. It shows both a test using the global default and one with a specific iteration count.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/globalconfig.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nPropertyTesting.defaultIterationCount = 123\n\n// will use 555 iterations specified in the test\nforAll<String, String>(555) { a,b -> a + b == \"$a$b\" }\n\n// will use 123 iterations from the global default\nforAll<String, String> { a,b -> a + b == \"$a$b\" }\n```\n\n----------------------------------------\n\nTITLE: Using PropTestListener for Setup and Teardown in Kotest Property Tests\nDESCRIPTION: Demonstrates how to use PropTestListener to perform setup and teardown operations for each iteration of a property test. This is useful when each test iteration requires specific initialization or cleanup.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/config.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some property test which require setup and tear down in each iteration\" {\n      forAll<String, String>(PropTestConfig(listeners = listOf(MyPropTestListener))) { a,b ->\n         // some assertion\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Gradle's Default HTML Reports for Kotest\nDESCRIPTION: This snippet shows the Gradle configuration needed to disable Gradle's default HTML and JUnit XML reporting, which is necessary to avoid duplicate reports when using Kotest's HTML reporter extension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/html_reporter.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  useJUnitPlatform()\n  reports {\n    html.required.set(false)\n    junitXml.required.set(false)\n  }\n  systemProperty(\"gradle.build.dir\", project.buildDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sonatype Snapshots Repository URL\nDESCRIPTION: Repository URL that needs to be added to the build configuration's repositories block to access Kotest snapshot builds\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/quick_start.mdx#2025-04-13_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nhttps://oss.sonatype.org/content/repositories/snapshots\n```\n\n----------------------------------------\n\nTITLE: Using haveValue Matcher for Maps in Kotlin for Kotest\nDESCRIPTION: Shows how to use the haveValue matcher for Maps in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_49\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should haveValue(\"a\")\n```\n\n----------------------------------------\n\nTITLE: Setting Properties File Example\nDESCRIPTION: Example of a basic properties file named kotest.properties that sets a key-value pair.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/intellij/props.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfoo=bar\n```\n\n----------------------------------------\n\nTITLE: Date and Time Generation in Kotest\nDESCRIPTION: Generators for various date and time types including LocalDate, LocalDateTime, and Instant with customizable ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genslist.md#2025-04-13_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.localDateTime(ranges)\nArb.localDate(ranges)\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Test Lifecycle Mode in Kotest\nDESCRIPTION: Example of configuring SpringTestLifecycleMode to control when test method callbacks are fired in nested tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/spring.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringTestExtension(SpringTestLifecycleMode.Root))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive.cartesian for Combinatorial Testing in Kotest\nDESCRIPTION: This code references the Exhaustive.cartesian function that creates a cartesian product of two Exhaustive objects, allowing for comprehensive combinatorial testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.cartesian\n```\n\n----------------------------------------\n\nTITLE: Sample Coroutine Debug Output Format\nDESCRIPTION: Shows the format of a coroutine dump output, including creation stacktrace and coroutine state information.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCoroutines dump 2021/11/27 22:17:43\n\nCoroutine DeferredCoroutine{Active}@71f1906, state: CREATED\n\t(Coroutine creation stacktrace)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.async$default(Builders.common.kt:82)\n\tat kotlinx.coroutines.BuildersKt.async$default(Unknown Source)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invokeSuspend(CoroutineDebugTest.kt:37)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invoke(CoroutineDebugTest.kt)\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Gradle Plugin\nDESCRIPTION: Gradle plugins configuration to include the Allure reporting plugin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/allure.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  ...\n  id(\"io.qameta.allure\") version \"2.8.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating API Dumps using Gradle\nDESCRIPTION: Command to generate updates to the API dumps using the Kotlin Binary Compatibility Validator before submitting PRs that change the API.\nSOURCE: https://github.com/kotest/kotest/blob/master/CONTRIBUTING.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew apiDump\n```\n\n----------------------------------------\n\nTITLE: Using Classify for Value Distribution Analysis in Property Testing with KoTest\nDESCRIPTION: Example of using the classify function to analyze the distribution of generated values in property-based tests, checking strings for whitespace.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nassertAll(Gen.string()) { a ->\n  classify(a.contains(\" \"), \"has whitespace\", \"no whitespace\")\n  // some test\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Surefire Plugin Configuration\nDESCRIPTION: Configures Maven Surefire plugin for JUnit tests\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/quick_start.mdx#2025-04-13_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-surefire-plugin</artifactId>\n   <version>2.22.2</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Tests in Kotlin with KotlinTest\nDESCRIPTION: Shows how to use Property Tests in KotlinTest to automatically generate test values. It demonstrates testing string concatenation properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n\n  \"String size\" {\n    forAll({ a: String, b: String ->\n      (a + b).length == a.length + b.length\n    })\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pythagorean Triple Checker in Kotlin\nDESCRIPTION: Defines a function to check if three integers form a valid Pythagorean triple.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.3.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n```\n\n----------------------------------------\n\nTITLE: Adding JVM Arguments for Environment Testing with JDK17+\nDESCRIPTION: Gradle configuration to add the necessary JVM arguments when running tests with JDK17+ to enable environment variable manipulation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n  jvmArgs(\"--add-opens=java.base/java.util=ALL-UNNAMED\", \"--add-opens=java.base/java.lang=ALL-UNNAMED\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Test Options for Kotest\nDESCRIPTION: Configures Android test options to use JUnit Platform, allowing Kotest tests to run on Android projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/quick_start.mdx#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      it.useJUnitPlatform()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Characters from Specific Ranges in Kotlin with Kotest\nDESCRIPTION: Illustrates the use of Kotest's Arb.char() function to generate characters from one or more specified ranges. This allows for creation of non-consecutive character sets for testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.char(range1, range2,...)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.char(listOf('A'..'C', 'X'..'Z'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Data-Driven Tests with Nested Context in Kotest\nDESCRIPTION: A FunSpec implementation that demonstrates data-driven testing with multiple input rows, wrapped in a context block for better organization and readability.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  context(\"Pythag triples tests\") {\n    withData(\n      PythagTriple(3, 4, 5),\n      PythagTriple(6, 8, 10),\n      PythagTriple(8, 15, 17),\n      PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n      isPythagTriple(a, b, c) shouldBe true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Traditional Mocking Approach with MockK in Kotlin\nDESCRIPTION: Shows the traditional approach of mocking dependencies using MockK library. Creates a mock HasAnswer instance that returns a fixed value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/fake_functions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval mockHasAnswer = run {\n  val ret = mockk<HasAnswer>()\n  every { ret.answer(any()) } returns 42\n  ret\n}\n\nval myService = MyService(mockHasAnswer)\n// tests here\n```\n\n----------------------------------------\n\nTITLE: Overriding System Properties with withSystemProperty\nDESCRIPTION: Using the withSystemProperty extension function to temporarily override system properties within a test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSystemProperty(\"foo\", \"bar\") {\n  System.getProperty(\"foo\") shouldBe \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Pitest Extension Dependency in Gradle\nDESCRIPTION: Adds the Kotest Pitest extension module to the project's test dependencies in Gradle build configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/pitest.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n    testImplementation(\"io.kotest.extensions:kotest-extensions-pitest:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Using System.exit Extension in KotlinTest\nDESCRIPTION: This example shows how to use the System.exit extension from kotlintest-extensions-system module. It intercepts calls to System.exit and throws a SystemExitException with the exit code instead of terminating the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SystemExitTest : StringSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n\n    \"System.exit should throw an exception when the listener is added\" {\n      shouldThrow<SystemExitException> {\n        System.exit(123)\n      }.exitCode shouldBe 123\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KotlinX DateTime Assertions in Kotlin\nDESCRIPTION: Example showing how to use the new kotlinx-datetime assertions module to verify a date's hour value\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.2.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval date = LocalDateTime(2019, 2, 15, 12, 10, 0, 0)\ndate.shouldHaveHour(12)\n```\n\n----------------------------------------\n\nTITLE: Creating Tests with StringSpec Using Lambda Expression\nDESCRIPTION: Example of creating KotlinTest tests using StringSpec style with a lambda expression in the constructor. This approach is more concise but doesn't allow overriding lifecycle methods.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Integer Math Table Tests with Individual Cases\nDESCRIPTION: Example of creating individual test cases from table data in FreeSpec for testing integer math operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering TimerListener in a Kotest FunSpec\nDESCRIPTION: This snippet demonstrates how to register the TimerListener extension in a Kotest FunSpec test class. The extension is applied to all tests within the class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/extensions/examples.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : FunSpec({\n  extensions(TimerListener)\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency in Gradle\nDESCRIPTION: Adds the Kotest property testing library dependency to a Gradle project. This enables property-based testing functionality for JVM-based tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_14\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-property:$version'\n```\n\n----------------------------------------\n\nTITLE: Configuring SpringTestLifecycleMode in Kotest Project Config\nDESCRIPTION: This snippet demonstrates how to configure the SpringTestLifecycleMode to fire test method callbacks on root nodes instead of leaf nodes in nested spec styles.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/spring.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n   override fun extensions() = listOf(SpringTestExtension(SpringTestLifecycleMode.Root))\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Environment Variables Configuration\nDESCRIPTION: Shows how to set multiple environment variables using a map or list of pairs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/system.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(mapOf(\"FooKey\" to \"BarValue\", \"BarKey\" to \"FooValue\")) {\n  // Use FooKey and BarKey\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Password Matcher Extension Function\nDESCRIPTION: Shows how to create an extension function for the password matcher to make it more readable and reusable.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/composed_matchers.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldBeStrongPassword() = this shouldBe passwordMatcher\n```\n\n----------------------------------------\n\nTITLE: New Configuration Syntax in Kotest 3.1.x\nDESCRIPTION: Shows the new way of applying configuration to tests in Kotest 3.1.x, where config is specified between the test name and the test body.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n\"this is a test\".config(...) {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository URL for Kotest Snapshots\nDESCRIPTION: This snippet shows the Sonatype repository URL that should be added to the repositories block in your build configuration to access Kotest snapshot builds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/quick_start.mdx#2025-04-13_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nhttps://oss.sonatype.org/content/repositories/snapshots\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Reference\nDESCRIPTION: Maven Central dependency required to use the extra Arbs collection in Kotest property testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/extra_arbs.md#2025-04-13_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nio.kotest.extensions:kotest-property-arbs:version\n```\n\n----------------------------------------\n\nTITLE: Global Isolation Mode Configuration in Kotest\nDESCRIPTION: Shows how to configure isolation mode globally through project configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/isolation_mode.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig: AbstractProjectConfig() {\n   override val isolationMode = IsolationMode.InstancePerLeaf\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Setup with beforeTest Listener\nDESCRIPTION: Solution using beforeTest listener to create fresh mock instances before each test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/mocks.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    lateinit var repository: MyRepository\n    lateinit var target: MyService\n\n    beforeTest {\n        repository = mockk()\n        target = MyService(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Generation in Kotest\nDESCRIPTION: Generator functions for producing boolean values and boolean arrays with configurable length and content.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genslist.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.boolean()\nArb.booleanArray(length, content)\nExhaustive.boolean()\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Setup for Kotest Arrow Integration\nDESCRIPTION: Required dependencies to use Arrow generators in Kotest property tests. Includes both the Kotest Arrow extension and Arrow Core library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nio.kotest.extensions:kotest-property-arrow:version\nio.arrow-kt:arrow-core:arrow-version\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoClose in Kotest StringSpec\nDESCRIPTION: Demonstrates how to use the autoClose feature in a Kotest StringSpec test class to automatically close a StringReader resource after test completion. The resource must implement java.lang.AutoCloseable interface.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/autoclose.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  init {\n    \"your test case\" {\n      // use resource reader here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of an Unclear Test Without Clues\nDESCRIPTION: A basic assertion checking for non-null values that would produce an unclear error message if it fails.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Table-Driven Testing in StringSpec with Kotest in Kotlin\nDESCRIPTION: This example demonstrates table-driven testing using StringSpec in Kotest. It tests string concatenation with multiple input combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forall(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TestContainers Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding TestContainers support to a Kotest project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Installing KotlinX DateTime Generators Module\nDESCRIPTION: Maven dependency required to use the KotlinX DateTime generators in Kotest projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/date_gens.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.kotest.extensions:kotest-property-datetime:version\n```\n\n----------------------------------------\n\nTITLE: Non-deterministic Testing Functions Table in Markdown\nDESCRIPTION: A markdown table listing the four main Kotest functions for non-deterministic testing, including Eventually, Continually, Until, and Retry, along with their specific roles and purposes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/nondeterministic_testing.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Role |\n| --- | --- |\n| [Eventually](eventually.md) | Used to ensure that a test will _eventually_ pass within a specified time duration. The test is repeatedly executed until the test passes or the duration expires. |\n| [Continually](continually.md) | Used to ensure that a test _continually_ passes for a period of time. Will repeatedly execute a test until the duration has expired or the test fails.  |\n| [Until](until.md) | Used to ensure that a predicate will eventually hold true within a specified time duration. The predicate is repeatedly executed until true or the duration expires. |\n| [Retry](retry.md) | Used to ensure that a test willi eventually pass within a given number of retries. The test is repeatedly executed until the test passes or the iteration count is reached. |\n```\n\n----------------------------------------\n\nTITLE: Defining Tests with StringSpec Init Block\nDESCRIPTION: Example of writing tests using Kotest StringSpec style with init block approach.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec() {\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Dispatcher for All Tests in a Spec\nDESCRIPTION: Shows how to configure TestDispatcher at the spec level to apply to all tests within that spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      coroutineTestScope = true\n      test(\"this test uses a test dispatcher\") {\n      }\n      test(\"and so does this test!\") {\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Matchers in Kotest\nDESCRIPTION: Shows examples of using the new Arrow matchers in Kotest for Option, Either, NonEmptyList, Try, and Validation types.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval option = Option.pure(\"foo\")\noption should beSome(\"foo\")\n\nEither.right(\"boo\") should beRight(\"boo\")\n\nNonEmptyList.of(1, 2, null).shouldContainNull()\n\nTry.Success(\"foo\") should beSuccess(\"foo\")\n\nValid(\"foo\") should beValid()\n```\n\n----------------------------------------\n\nTITLE: Registering Timer Listener Project-Wide\nDESCRIPTION: Example demonstrating how to register the TimerListener extension globally for the entire project using AbstractProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/extensions/examples.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyConfig : AbstractProjectConfig() {\n    override fun extensions(): List<Extension> = listOf(TimerListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Installation for Kotlinx DateTime Generators\nDESCRIPTION: Maven dependency required to use the Kotlinx DateTime generators in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/date_gens.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.kotest.extensions:kotest-property-datetime:version\n```\n\n----------------------------------------\n\nTITLE: Using SecurityManagerListener for Spec-level Security Manager\nDESCRIPTION: Shows how to use SecurityManagerListener to apply a custom security manager at the test specification level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/system.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n          override fun listeners() = listOf(SecurityManagerListener(myManager))\n\n        init {\n          // Use my security manager\n        }\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for System Properties in KotlinTest\nDESCRIPTION: Shows how to configure Gradle to propagate system properties to test executors, which is necessary for tag-based test filtering to work properly.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_25\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    //... Other configurations ...\n    systemProperties = System.properties\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit Platform with Kotlin DSL\nDESCRIPTION: Enables the JUnit Platform for Kotest in Gradle using Kotlin DSL. This configuration is used for Gradle projects that use the Kotlin DSL build script instead of Groovy.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency in Maven\nDESCRIPTION: Adds the Kotest JUnit5 runner as a test dependency in a Maven pom.xml file. This dependency is required to run Kotest tests through the Maven build system.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-runner-junit5-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests Using Kotest Environment Variable\nDESCRIPTION: Example showing how to filter specs using environment variables, which works for both Kotlin/JVM and Kotlin/Native targets.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/gradle.md#2025-04-13_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkotest_filter_specs='com.somepackage.*' gradle test\n```\n\n----------------------------------------\n\nTITLE: Kotest Multiplatform Plugin Configuration\nDESCRIPTION: Adds Kotest multiplatform plugin to Gradle build\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/quick_start.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests Using Gradle CLI Commands\nDESCRIPTION: Shows examples of using Gradle's --tests command line option to filter test execution by package or test name patterns.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/gradle.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngradle test --tests 'com.sksamuel.somepackage*'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngradle test --tests '*IntegrationTest'\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Test Case in Kotest WordSpec\nDESCRIPTION: This example shows how to set a timeout of 2 seconds for a test case in Kotest's WordSpec style. The test verifies the length property of strings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_case_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core to Multiplatform Project\nDESCRIPTION: Adds the Kotest assertions core library to the common test dependencies in a Kotlin Multiplatform project. This makes assertions available across all targeted platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-assertions-core:$version'\n```\n\n----------------------------------------\n\nTITLE: Custom Generator with Custom Shrinker Implementation\nDESCRIPTION: Complete example showing how to implement a custom shrinker for a Coordinate data class. The shrinker generates four neighboring coordinates as potential simpler cases for testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/shrinking.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Coordinate(val x: Int, val y: Int)\n\nclass CoordinateTest : FunSpec({\n    context(\"Coordinate Transformations\") {\n        // Shrinker takes the four neighbouring coordinates\n        val coordinateShrinker = Shrinker<Coordinate> { c ->\n            listOf(\n                Coordinate(c.x - 1, c.y),\n                Coordinate(c.x, c.y - 1),\n                Coordinate(c.x + 1, c.y),\n                Coordinate(c.x, c.y + 1),\n            )\n        }\n        val coordinateArb = arbitrary(coordinateShrinker) {\n            Coordinate(Arb.nonNegativeInt().bind(), Arb.nonNegativeInt().bind())\n        }\n\n        test(\"Coordinates are always positive after transformation\") {\n            coordinateArb.checkAll {\n                transform(it).x shouldBeGreaterThanOrEqualTo 0\n                transform(it).y shouldBeGreaterThanOrEqualTo 0\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Native Target with Kotest Engine\nDESCRIPTION: Sets up a Kotlin Native project with Kotest engine for native platform testing. It configures Linux x64 target and adds the Kotest engine dependency to the common test source set.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    linuxX64() // can add any supported native targets such as linux, mac, windows etc\n  }\n}\nsourceSets {\n  val commonTest by getting {\n    dependencies {\n      implementation(\"io.kotest:kotest-framework-engine:$version\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Maven Plugin\nDESCRIPTION: Maven plugin configuration for Pitest, including version specification and basic settings like target classes and coverage threshold.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/pitest.md#2025-04-13_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.pitest</groupId>\n    <artifactId>pitest-maven</artifactId>\n    <version>${pitest-maven.version}</version>\n    <configuration>\n        <targetClasses>...</targetClasses>\n        <coverageThreshold>...</coverageThreshold>\n        ... other configurations as needed        \n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property DateTime Module Dependency\nDESCRIPTION: Instructions for adding the Kotest property datetime module to a project's build configuration. This dependency is required to use the KotlinX DateTime generators in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/date_gens.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nio.kotest.extensions:kotest-property-datetime:version\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependencies for Kotlin Multiplatform Common Tests\nDESCRIPTION: This code shows how to add the kotest-property dependency to the commonTest sourceset in a Kotlin Multiplatform project, making property testing available across all supported platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/index.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-property:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Class for Konform Validation in Kotlin\nDESCRIPTION: A basic data class definition that will be used with Konform validation. It contains a required fullName string and an optional age integer.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/konform.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class UserProfile(\n   val fullName: String,\n   val age: Int?\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven for KotlinTest\nDESCRIPTION: This snippet demonstrates how to set up a Maven project to use KotlinTest. It includes configuring the surefire plugin for JUnit tests and adding the KotlinTest JUnit5 runner dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-surefire-plugin</artifactId>\n    <version>2.22.1</version>\n    <dependencies>\n        <dependency>\n            <groupId>org.junit.platform</groupId>\n            <artifactId>junit-platform-surefire-provider</artifactId>\n            <version>1.2.0</version>\n        </dependency>\n    </dependencies>\n</plugin>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotlintest</groupId>\n    <artifactId>kotlintest-runner-junit5</artifactId>\n    <version>3.1.8</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Spec Execution Order in Kotest Project Config\nDESCRIPTION: Shows how to override the default spec execution order by implementing AbstractProjectConfig. The specExecutionOrder property can be set to control how test specs are ordered.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/spec_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig: AbstractProjectConfig() {\n    override val specExecutionOrder = ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Random Integer Arbitrary in Kotlin\nDESCRIPTION: Creates a custom arbitrary generator that produces random integers between 3 and 6 using the arbitrary builder and RandomSource.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/customgens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval sillyArb = arbitrary { rs: RandomSource ->\n   rs.random.nextInt(3..6)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Target Dependencies\nDESCRIPTION: Sets up Kotlin Multiplatform configuration for Native testing with Kotest engine dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/quick_start.mdx#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    linuxX64()\n  }\n}\nsourceSets {\n  val commonTest by getting {\n    dependencies {\n      implementation(\"io.kotest:kotest-framework-engine:$version\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSpec in Kotlin for Kotest\nDESCRIPTION: Demonstrates how to use StringSpec in Kotest to write tests using strings as the basis. It shows basic assertions and configuration options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_40\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  init {\n    \"strings.size should return size of string\" {\n      \"hello\".length shouldBe 5\n      \"hello\" should haveLength(5)\n    }\n\n    \"strings should support config\" {\n      \"hello\".length shouldBe 5\n    }.config(invocations = 5)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Elements Collection Matchers in Jsoup KotlinTest\nDESCRIPTION: Matchers for verifying collections of elements, including presence and count assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/jsoup.md#2025-04-13_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nelements.shouldBePresent()\nelements.shouldBePresent(n)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core Dependency for JavaScript Target\nDESCRIPTION: Configures a Kotlin multiplatform project with Kotest assertions core specifically for the JavaScript target. This allows running assertion-based tests in browser and Node.js environments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-assertions-core:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Coroutine Dump Output in Kotest\nDESCRIPTION: This code block shows an example of a coroutine dump generated by Kotest when coroutine debugging is enabled. It includes information about the coroutine's state and its creation stack trace.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCoroutines dump 2021/11/27 22:17:43\n\nCoroutine DeferredCoroutine{Active}@71f1906, state: CREATED\n\t(Coroutine creation stacktrace)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.async$default(Builders.common.kt:82)\n\tat kotlinx.coroutines.BuildersKt.async$default(Unknown Source)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invokeSuspend(CoroutineDebugTest.kt:37)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invoke(CoroutineDebugTest.kt)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JSON Assertions Dependency in Kotlin\nDESCRIPTION: This code snippet shows how to add the Kotest JSON assertions dependency to a Kotlin project's build file. It's required to use the JSON matchers described in the document.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/json/overview.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest:kotest-assertions-json:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Using haveSize Collection Matcher in KotlinTest\nDESCRIPTION: Shows how to use the haveSize matcher to verify the size of collections in KotlinTest. This matcher provides a more readable syntax for collection size assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nmyCollection should haveSize(4)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Tag Extension in KotlinTest\nDESCRIPTION: Demonstrates how to create and register a custom TagExtension that dynamically enables or disables tags based on runtime environment conditions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Hadoop : Tag()\n\nobject HadoopTagExtension : TagExtension {\n  override fun tags(): Tags =\n      if (System.getenv().containsKey(\"HADOOP_HOME\")) Tags.include(Hadoop) else Tags.exclude(Hadoop)\n}\n\nobject MyProjectConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(HadoopTagExtension)\n}\n\nobject SimpleTest : StringSpec({\n  \"simple test\" {\n    // this test would only run on environments that have hadoop configured\n  }.config(tags = setOf(Hadoop))\n})\n```\n\n----------------------------------------\n\nTITLE: Example Test Output with Full Path Display\nDESCRIPTION: This snippet demonstrates the expected output when the full test path display is enabled in Kotest. It shows how the test names are concatenated with their parent contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/output.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMyTests. describe 1 - test 1\nMyTests. describe 1 - test 2\n```\n\n----------------------------------------\n\nTITLE: Using Endo Generator in Kotest with Arrow\nDESCRIPTION: Shows the generator for Arrow's Endo type, which wraps values from an underlying arbitrary generator.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/arrow.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.endo(arb)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Pitest Extension in Gradle\nDESCRIPTION: This snippet shows how to add the Kotest extension for Pitest to your Gradle dependencies. The extension allows Kotest to work with Pitest for mutation testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/pitest.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-extensions-pitest:<version>\")\n```\n\n----------------------------------------\n\nTITLE: Installing KotlinX DateTime Generator Dependencies\nDESCRIPTION: Maven dependency required to use KotlinX DateTime generators in Kotest projects. Uses a placeholder 'version' which should be replaced with the actual version number.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/date_gens.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.kotest.extensions:kotest-property-datetime:version\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporter in Kotest Project Config\nDESCRIPTION: Shows how to configure the JUnit XML Reporter in Kotest Project Config to include full test paths and all test containers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.2.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override fun listeners(): List<Listener> = listOf(\n     JunitXmlReporter(\n        includeContainers = true, // write out status for all tests\n        useTestPathAsName = true // use the full test path (ie, includes parent test names)\n     )\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Duplicate Test Name Behavior in Kotlin\nDESCRIPTION: Sets the behavior for duplicate test names to mangle the names instead of throwing an error. This enables data driven testing to work properly in JavaScript.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nConfiguration.duplicateTestNameMode = Error\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Callbacks in Kotest DescribeSpec\nDESCRIPTION: Shows how to use the new beforeEach, beforeContainer, and beforeTest callbacks in a DescribeSpec to execute code before different test scopes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.2.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CallbacksTest : DescribeSpec({\n\n   beforeEach {\n      println(\"Test: \" + it.displayName)\n   }\n\n   beforeContainer {\n      println(\"Container: \" + it.displayName)\n   }\n\n   beforeTest {\n      println(\"All: \" + it.displayName)\n   }\n\n   describe(\"I am a container scope\") {\n      it(\"And I am a test scope\") { }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using System.exit Extension in Kotlin Tests\nDESCRIPTION: This example shows how to use the System.exit extension to test if System.exit(Int) is invoked in a function. It demonstrates adding the SpecSystemExitListener and asserting that a SystemExitException is thrown with the correct exit code.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SystemExitTest : StringSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n\n    \"System.exit should throw an exception when the listener is added\" {\n      shouldThrow<SystemExitException> {\n        System.exit(123)\n      }.exitCode shouldBe 123\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest-Allure Extension Dependency in Gradle\nDESCRIPTION: This snippet shows how to add the Kotest-Allure extension dependency to a Gradle build file. It's required to enable Allure reporting in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/allure.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-allure:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Disabling Classpath Scanning in kotest.properties\nDESCRIPTION: Common configuration to disable Kotest's classpath scanning features to improve startup time when these features aren't needed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/intellij/props.md#2025-04-13_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nkotest.framework.classpath.scanning.config.disable=true\nkotest.framework.classpath.scanning.autoscan.disable=true\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporter in Kotest\nDESCRIPTION: Shows how to configure the JUnit XML reporter with custom options in project config.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.2.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override fun listeners(): List<Listener> = listOf(\n     JunitXmlReporter(\n        includeContainers = true, // write out status for all tests\n        useTestPathAsName = true // use the full test path (ie, includes parent test names)\n     )\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jacoco in Gradle\nDESCRIPTION: Configures Jacoco tool version and optionally sets a custom report directory in the Gradle build file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/integrations/jacoco.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\njacoco {\n    toolVersion = \"0.8.7\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Instant Properties in Kotlin with Kotest\nDESCRIPTION: Functions for comparing temporal ordering between Instant objects, including before/after relationships, range checking, and proximity assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/core.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeBefore(anotherInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeCloseTo(anotherInstant, duration)\n```\n\n----------------------------------------\n\nTITLE: Using Builder Functions in Kotest\nDESCRIPTION: Functions for creating custom generators and combining existing generators to produce new values through binding operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.create(fn)\nArb.bind(arbA, arbB, fn)\nArb.bind(arbA, arbB, arbC, fn)\nArb.bind(arbA, ...., fn)\n```\n\n----------------------------------------\n\nTITLE: Updating Coroutines Version in Kotest\nDESCRIPTION: Updates the kotlinx-coroutines dependency to version 1.6 final. This change ensures compatibility with the latest coroutines library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nUpdate coroutines to 1.6 final [#2768]\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Tests in Kotlin for KotlinTest\nDESCRIPTION: Demonstrates how to use Property Tests in KotlinTest. It shows an example of testing string concatenation properties using automatically generated values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_51\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n\n  \"String size\" {\n    forAll({ a: String, b: String ->\n      (a + b).length == a.length + b.length\n    })\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Container in Kotlin\nDESCRIPTION: Creating and configuring a MySQL TestContainer instance with specific parameters.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/test_containers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n  startupAttempts = 1\n  withUrlParam(\"connectionTimeZone\", \"Z\")\n  withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure Gradle Plugin\nDESCRIPTION: Kotlin-based Gradle configuration for setting up Allure options including version and disabling autoconfigure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/allure.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nallure {\n  autoconfigure = false\n  version = \"2.13.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML-Specific Matchers in Kotlin with KotlinTest Jsoup\nDESCRIPTION: These matchers are used to assert HTML-specific properties of Jsoup elements. They check for ID, class, src, href attributes, and the presence of child elements with specific IDs or classes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/jsoup.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveId(id)\nelement.shouldHaveClass(class)\nelement.shouldHaveSrc(src)\nelement.shouldHaveHref(href)\nelement.shouldHaveElementWithId(id)\nelement.shouldHaveChildWithClass(id)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest JUnit5 Runner Dependency (Gradle)\nDESCRIPTION: Gradle dependency declaration for Kotest JUnit5 runner\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/setup.mdx#2025-04-13_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-runner-junit5:$version'\n```\n\n----------------------------------------\n\nTITLE: Overriding Multiple System Environment Variables in Kotlin Tests\nDESCRIPTION: Shows how to override multiple system environment variables using a map or list of pairs with the withEnvironment function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(mapOf(\"FooKey\" to \"BarValue\", \"BarKey\" to \"FooValue\")) {\n  // Use FooKey and BarKey\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WireMock Kotest Extension Dependency\nDESCRIPTION: Maven/Gradle dependency declaration for adding the WireMock extension to a Kotest project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/wiremock.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.kotest.extensions:kotest-extensions-wiremock:{version}\n```\n\n----------------------------------------\n\nTITLE: WireMock Per-Spec Test Configuration in Kotest\nDESCRIPTION: Example showing how to configure WireMock listener for per-specification testing, where the WireMock server is started once before all tests in the spec and stopped after completion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/wiremock.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_SPEC))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n    //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Diff Comparison in Kotlin\nDESCRIPTION: Example showing data class definition used to demonstrate the new diff comparison feature in Kotest 4.1.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.1.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Foo(val a: String, val b: Boolean, val c: Double)\n```\n\n----------------------------------------\n\nTITLE: Using Spring Constructor Injection in a KotlinTest Test Class\nDESCRIPTION: Shows a test class that uses Spring constructor injection to autowire a service directly into the test constructor for testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\n@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec() {\n  init {\n    \"SpringListener\" should {\n      \"have autowired the service\" {\n        service.repository.findUser().name shouldBe \"system_user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Per Test Counter Example in Kotest\nDESCRIPTION: Example showing how state is reset in InstancePerTest mode using a counter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/isolation_mode.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  val counter = AtomicInteger(0)\n\n  init {\n    \"a\" should {\n      println(\"a=\" + counter.getAndIncrement())\n      \"b\" {\n        println(\"b=\" + counter.getAndIncrement())\n      }\n      \"c\" {\n        println(\"c=\" + counter.getAndIncrement())\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring Kafka Producer with Custom Properties\nDESCRIPTION: Shows how to manually configure a Kafka producer by accessing the host and port of the embedded Kafka instance and setting up the Properties object for the KafkaProducer.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/kafka.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n\n   listener(embeddedKafkaListener)\n   \n   val props = Properties().apply {\n      put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"${embeddedKafkaListener.host}:${embeddedKafkaListener.port}\")\n   }\n   \n   val producer = KafkaProducer<String, String>(props)\n   \n})\n```\n\n----------------------------------------\n\nTITLE: Adding WireMock Dependency for Kotest\nDESCRIPTION: Shows how to add the kotest-extensions-wiremock dependency to the project build file. This dependency is required to use WireMock with Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/wiremock.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.kotest.extensions:kotest-extensions-wiremock:{version}\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporting in KotlinTest\nDESCRIPTION: This example shows how to configure KotlinTest to generate JUnit XML reports by registering the JUnitXmlListener in the ProjectConfig class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_39\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n    override fun listeners() = listOf(JUnitXmlListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Test Output Format Example\nDESCRIPTION: Shows the resulting test output format when displayFullTestPath is enabled in project configuration. Demonstrates how nested test paths are concatenated in the output.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/output.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMyTests. describe 1 - test 1\nMyTests. describe 1 - test 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Failure Tolerance in Property Tests\nDESCRIPTION: Demonstrates how to configure maximum allowed failures in a property test using maxFailure parameter in PropTestConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"some flakey test\" {\n      forAll<String, String>(PropTestConfig(maxFailure = 3)) { a,b ->\n         // max of 3 inputs can fail\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Generator Bind Example\nDESCRIPTION: Demonstrates how to use the new bind function to generate random class instances from primitive generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class User(val email: String, val id: Int)\n\nval userGen = Gen.bind(Gen.string(), Gen.positiveIntegers(), ::User)\n\nassertAll(userGen) {\n  it.email shouldNotBe null\n  it.id should beGreaterThan(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Option Generators in Kotest with Arrow\nDESCRIPTION: Generators for Arrow's Option type, providing both exhaustive and arbitrary generation of None and Some values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/arrow.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nExhaustive.option(a)\nExhaustive.none(a)\nArb.option(arb)\nArb.some(arb)\nArb.none()\n```\n\n----------------------------------------\n\nTITLE: Customizing Test Names with Map in Kotest Data-Driven Testing\nDESCRIPTION: This snippet demonstrates how to use a map to specify custom test names in Kotest's withData function. The map keys represent test names, while values are input data for each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/test_names.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"Pythag triples tests\") {\n  withData(\n    mapOf(\n      \"3, 4, 5\" to PythagTriple(3, 4, 5),\n      \"6, 8, 10\" to PythagTriple(6, 8, 10),\n      \"8, 15, 17\" to PythagTriple(8, 15, 17),\n      \"7, 24, 25\" to PythagTriple(7, 24, 25)\n    )\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Timezone Codes in Kotlin using Kotest\nDESCRIPTION: Generates three-letter timezone codes, such as BST or EST. Note that this doesn't include all possible timezones and is intended for sampling data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.timezoneCodeThree()\n```\n\n----------------------------------------\n\nTITLE: Customizing Poll Interval in Continually Testing with Kotlin\nDESCRIPTION: This example shows how to specify a custom poll interval when using the 'continually' function in Kotest. The test will check the condition every 5 seconds for a total duration of 60 seconds.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/continually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"pass for 60 seconds\") {\n      continually(60.seconds, 5.seconds) {\n        // code here that should succeed and continue to succeed for 60 seconds\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotest with Gradle for Android (Groovy)\nDESCRIPTION: Gradle setup for using Kotest in Android projects with the Groovy build script. It demonstrates how to configure Android test options to use JUnit platform and add the required Kotest dependencies.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nandroid.testOptions {\n    unitTests.all {\n        useJUnitPlatform()\n    }\n}\n\ndependencies {\n    testImplementation 'io.kotest:kotest-runner-junit5:<version>' // for kotest framework\n    testImplementation 'io.kotest:kotest-assertions-core:<version>' // for kotest core jvm assertions\n    testImplementation 'io.kotest:kotest-property:<version>' // for kotest property test\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration for adding Testcontainers support to Kotest project. Uses the kotest-extensions-testcontainers artifact from the io.kotest.extensions group.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers_46x.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-extensions-testcontainers:${kotest.version}\n```\n\n----------------------------------------\n\nTITLE: Using Eventually for Non-Deterministic Code Testing in KotlinTest\nDESCRIPTION: Demonstrates the use of the eventually function to test non-deterministic code with a timeout.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"do something\") {\n      eventually(5.seconds) {\n        // code here that should complete in 5 seconds but takes an non-deterministic amount of time.\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in ShouldSpec with xcontext and xshould\nDESCRIPTION: ShouldSpec provides xcontext and xshould variants to disable specific tests or blocks of tests. Tests disabled this way remain in the code but won't be executed during test runs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/styles.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec({\n    context(\"this outer block is enabled\") {\n        xshould(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        should(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Tests in Kotest DescribeSpec\nDESCRIPTION: This snippet shows how to define nested tests using Kotest's DescribeSpec. It creates a test class with a describe block containing two test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/output.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: DescribeSpec({\n  describe(\"describe 1\"){\n    it(\"test 1\"){}\n    it(\"test 2\"){}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Properties with Jsoup Matchers in Kotlin\nDESCRIPTION: These matchers allow asserting various properties of individual elements, such as child tags, text content, and attributes. They are part of the kotlintest-assertions-jsoup library.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/jsoup.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nelement.shouldHaveChildWithTag(tag)\nelement.shouldHaveText(text)\nelement.shouldHaveAttribute(name)\nelement.shouldHaveAttributeValue(name, value)\n```\n\n----------------------------------------\n\nTITLE: FunSpec Disabled Tests Example\nDESCRIPTION: Shows how to use the new 'x' prefix variants to disable tests in FunSpec style\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.1.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyFunSpec : FunSpec({\n  xtest(\"a disabled test\") {\n    // this test will not be invoked\n  }\n  xcontext(\"this context is disabled\") {\n     test(\"and so this test is by extension\") {\n     }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting OffsetDateTime Properties in Kotlin with Kotest\nDESCRIPTION: Extension functions for OffsetDateTime objects that verify temporal properties like current day and instant equality with other OffsetDateTime objects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/core.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\noffsetDateTime.shouldBeToday()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\noffsetDateTime.shouldHaveSameInstantAs(other: OffsetDateTime)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Third Party Extensions\nDESCRIPTION: A markdown table listing third-party extensions available for Kotest, including their descriptions and links to respective project documentation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/index.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Project | Description |\n| ------- | ----------- |\n| [Fluentlenium](https://fluentlenium.io/docs/test-runners/#kotest) | FluentLenium integration with Kotest |\n| [Http4k](https://www.http4k.org/guide/reference/kotest/) | Functional toolkit for Kotlin HTTP applications |\n| [Kotless](https://github.com/LeoColman/kotest-kotless) | Utilties for kotless and kotest |\n| [KotlinFixture](https://github.com/appmattus/kotlinfixture/blob/main/fixture-kotest/README.adoc) | generate well-defined, but essentially random, input |\n| [LogCapture](https://github.com/jsalinaspolo/logcapture) | LogCapture is a testing library for asserting logging messages |\n| [Micronaut](https://github.com/micronaut-projects/micronaut-test) | JVM-based, full-stack framework for building modular, easily testable microservice |\n| [Result4s](https://github.com/MrBergin/result4k-kotest-matchers) | Result4s matchers|\n| [Selfie](https://www.github.com/diffplug/selfie) | Snapshot testing (inline, disk, and memoization) |\n| [Sniffy](https://www.sniffy.io/docs/latest/#_integration_with_kotest) | Network connectivity testing |\n| [TestFiles](https://github.com/jGleitz/testfiles) | Creates organized files and directories for testing |\n```\n\n----------------------------------------\n\nTITLE: Example of a Blocking Call in Non-Blocking Context\nDESCRIPTION: Demonstrates a problematic blocking call using Thread.sleep in a non-blocking coroutine context that would be detected by BlockHound.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/blockhound.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate suspend fun blockInNonBlockingContext() {\n   withContext(Dispatchers.Default) {\n      @Suppress(\"BlockingMethodInNonBlockingContext\")\n      Thread.sleep(2)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependencies for Kotlin Multiplatform JavaScript Target\nDESCRIPTION: This snippet demonstrates how to add the kotest-property dependency specifically to the JavaScript target in a Kotlin Multiplatform project, enabling property testing in JavaScript tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/index.mdx#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation(\"io.kotest:kotest-property:$version\")\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Runner Dependency for Android\nDESCRIPTION: Adds the Kotest JUnit5 runner dependency to an Android project. This allows Kotest to be used for unit and integration tests in Android development.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n   testImplementation 'io.kotest:kotest-runner-junit5:version'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing Dependency in Maven\nDESCRIPTION: Adds the Kotest property testing library dependency to a Maven project. This enables using Kotest's property-based testing features on the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Kotlin)\nDESCRIPTION: Enables JUnit Platform test runner in Gradle using Kotlin DSL\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/quick_start.mdx#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.withType<Test>().configureEach {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Combined Conditional Statistics in Kotest\nDESCRIPTION: Shows how to collect multiple categories of statistics using combined conditions for positive/negative and even/odd numbers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/statistics.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k > 0 && k % 2 == 0 -> collect(\"EVEN_POS\")\n    k % 2 == 0 -> collect(\"EVEN_NEG\")\n    k > 0 -> collect(\"ODD_POS\")\n    else -> collect(\"ODD_NEG\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Using forNone Inspector in Kotlin with Kotest\nDESCRIPTION: Shows how to use the forNone inspector to verify that no elements in a collection satisfy the given assertions. This example tests that no string contains 'x' and starts with 'bb'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/inspectors.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nxs.forNone {\n  it.shouldContain(\"x\")\n  it.shouldStartWith(\"bb\")\n}\n```\n\n----------------------------------------\n\nTITLE: Kotest Gradle Multiplatform Plugin Configuration\nDESCRIPTION: Adds Kotest multiplatform plugin to Gradle build for testing JS and Native targets\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/quick_start.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Matcher Interface in Kotlin\nDESCRIPTION: This snippet shows the basic structure of the Matcher interface in Kotest. It defines a single method 'test' that returns a MatcherResult.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/custom.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface Matcher<in T> {\n  fun test(value: T): MatcherResult\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode using DSL in Kotlin\nDESCRIPTION: Demonstrates how to set the isolation mode using the DSL approach in a Kotest spec class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/isolation_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec({\n isolationMode = IsolationMode.SingleInstance\n // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Changing BlockHound Mode for a Code Section\nDESCRIPTION: Shows how to temporarily change the BlockHound mode for a specific section of code using the withBlockHoundMode function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/blockhound.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n   test(\"allow blocking section\") {\n      // ...\n      withBlockHoundMode(BlockHoundMode.DISABLED) {\n        blockInNonBlockingContext()\n      }\n      // ...\n   }\n```\n\n----------------------------------------\n\nTITLE: Using Classify in Kotest Property Testing\nDESCRIPTION: Shows how to use the classify function in Kotest property testing to generate statistics on the distribution of generated values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/changelog.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nassertAll(Gen.string()) { a ->\n    classify(a.contains(\" \"), \"has whitespace\", \"no whitespace\")\n    // some test\n}\n\nforAll(Gen.int()) { a ->\n    classify(a == 0, \"zero\")\n    classify(a % 2 == 0, \"even number\", \"odd number\")\n    a + a == 2 * a\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Tags for Test Grouping in KotlinTest\nDESCRIPTION: Shows how to define custom tags and apply them to test cases for grouping and selective execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Linux : Tag()\nobject Windows: Tag()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotlintest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Table Test in StringSpec\nDESCRIPTION: Example of table-driven testing in StringSpec for testing string concatenation with multiple test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forall(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Iteration Count in Kotest Property Tests\nDESCRIPTION: Demonstrates how to override the default 1000 iterations in property tests by setting a global value and shows how tests can use either global or specific iteration counts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/globalconfig.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nPropertyTesting.defaultIterationCount = 123\n\n// will use 555 iterations specified in the test\nforAll<String, String>(555) { a,b -> a + b == \"$a$b\" }\n\n// will use 123 iterations from the global default\nforAll<String, String> { a,b -> a + b == \"$a$b\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode Using Function Override in Kotest\nDESCRIPTION: Example demonstrating how to set isolation mode by overriding the isolationMode() function in a test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/isolation_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n  override fun isolationMode() = IsolationMode.SingleInstance\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Mockk for Mocking in Kotest FunSpec\nDESCRIPTION: Shows how to use the Mockk library for mocking within a Kotest FunSpec. It mocks a repository and verifies method calls on a service.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Property-based Test Iterations in Kotlin\nDESCRIPTION: Shows how to specify the number of times a property-based test should run using the forAll function. In this example, the test will run 2300 times with different string combinations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n  init {\n\n    \"String size\" {\n      forAll(2300) { a: String, b: String ->\n        (a + b).length == a.length + b.length\n      }\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Konform Validation\nDESCRIPTION: Example data class representing a user profile with name and age fields that will be validated using Konform.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/konform.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class UserProfile(\n   val fullName: String,\n   val age: Int?\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure Test Reporter in Kotlin\nDESCRIPTION: Implementation of project configuration to enable Allure test reporting in Kotest by adding the AllureTestReporter listener.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/allure.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyConfig : AbstractProjectConfig {\n    override fun listeners() = listOf(AllureTestReporter())\n}\n```\n\n----------------------------------------\n\nTITLE: Using contain Map Matcher in KotlinTest\nDESCRIPTION: Demonstrates the contain matcher for Maps to verify that a Map contains a specific key-value pair in KotlinTest. The example checks if a map contains the key 1 with value \"a\".\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nval map = mapOf(Pair(1, \"a\"), Pair(2, \"b\"))\nmap should contain(1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Adding Jacoco Plugin in Gradle\nDESCRIPTION: Adds the Jacoco plugin to the Gradle build configuration for enabling code coverage analysis.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/integrations/jacoco.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n   ...\n   jacoco\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Property Testing Classification\nDESCRIPTION: Examples of using classify to analyze the distribution of generated test values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nassertAll(Gen.string()) { a ->\n    classify(a.contains(\" \"), \"has whitespace\", \"no whitespace\")\n    // some test\n}\n\nforAll(Gen.int()) { a ->\n    classify(a == 0, \"zero\")\n    classify(a % 2 == 0, \"even number\", \"odd number\")\n    a + a == 2 * a\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Tests in Kotlin for KotlinTest\nDESCRIPTION: Illustrates the use of property tests in KotlinTest. Property tests automatically generate values for testing, executing the test multiple times with different inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n\n  \"String size\" {\n    forAll({ a: String, b: String ->\n      (a + b).length == a.length + b.length\n    })\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Surefire Plugin for KotlinTest\nDESCRIPTION: XML configuration for Maven Surefire plugin to enable JUnit 5 test execution. This is required to run KotlinTest with Maven.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-surefire-plugin</artifactId>\n    <version>2.22.1</version>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jacoco in Gradle\nDESCRIPTION: This code configures Jacoco settings in the Gradle build file. It sets the tool version and optionally specifies a custom reports directory.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/integrations/jacoco.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\njacoco {\n    toolVersion = \"0.8.7\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Kotest Config Dump (Kotlin)\nDESCRIPTION: This code block demonstrates the typical output of the Kotest config dump feature when activated. It shows various configuration settings for the test run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/config_dump.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n~~~ Kotest Configuration ~~~\n-> Parallelization factor: 1\n-> Concurrent specs: null\n-> Global concurrent tests: 1\n-> Dispatcher affinity: true\n-> Coroutine debug probe: false\n-> Spec execution order: Lexicographic\n-> Default test execution order: Sequential\n-> Default test timeout: 600000ms\n-> Default test invocation timeout: 600000ms\n-> Default isolation mode: SingleInstance\n-> Global soft assertions: false\n-> Write spec failure file: false\n-> Fail on ignored tests: false\n-> Fail on empty test suite: false\n-> Duplicate test name mode: Warn\n-> Remove test name whitespace: false\n-> Append tags to test names: false\n-> Extensions\n  - io.kotest.engine.extensions.SystemPropertyTagExtension\n```\n\n----------------------------------------\n\nTITLE: Using Kotlinx Date/Time Matchers in Kotest\nDESCRIPTION: Demonstrates how to use the new Kotlinx Date/Time matchers in Kotest 4.2.0. This example checks if a LocalDateTime has a specific hour.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.2.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval date = LocalDateTime(2019, 2, 15, 12, 10, 0, 0)\ndate.shouldHaveHour(12)\n```\n\n----------------------------------------\n\nTITLE: Registering SpringListener in Kotlin Test Spec\nDESCRIPTION: Shows how to register SpringListener for test autowiring by overriding the listeners() function in a test spec\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : ParentSpec() {\n    override fun listeners() = listOf(SpringListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Coroutine Scopes in Nested Test Blocks\nDESCRIPTION: Example showing how all test scopes, including parent scopes, now act as coroutine scopes in Kotest 4.1.0.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.1.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndescribe(\"some test\") {\n launch {\n    delay(100)\n    it(\"should do something\") {\n       launch {\n          delay(100)\n       }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Futures with whenReady in KotlinTest\nDESCRIPTION: Shows how to use the whenReady function to test future-based code without blocking.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n\n    \"test a future\" {\n        val f: CompletableFuture<String> = someFuture()\n        whenReady(f) {\n            it shouldBe \"wibble\"\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Kotest Config Dump in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to enable the Kotest configuration dump feature by setting a system property in the Gradle test task. It sets the 'kotest.framework.dump.config' property to 'true'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/config_dump.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntest {\n  systemProperty \"kotest.framework.dump.config\", \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Database Test Example\nDESCRIPTION: Full example of using a MySQL container in a Kotest test class with data insertion and retrieval.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/test_containers.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass QueryDatastoreTest : FunSpec({\n\n  val mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n    startupAttempts = 1\n    withUrlParam(\"connectionTimeZone\", \"Z\")\n    withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n  }\n\n  val ds = install(JdbcDatabaseContainerExtension(mysql)) {\n    poolName = \"myconnectionpool\"\n    maximumPoolSize = 8\n    idleTimeout = 10000\n  }\n\n  val datastore = PersonDatastore(ds)\n\n  test(\"insert happy path\") {\n\n    datastore.insert(Person(\"sam\", \"Chicago\"))\n    datastore.insert(Person(\"jim\", \"Seattle\"))\n\n    datastore.findAll().shouldBe(listOf(\n      Person(\"sam\", \"Chicago\"),\n      Person(\"jim\", \"Seattle\"),\n    ))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Map Generation in Kotest\nDESCRIPTION: Arb functions for generating random maps with specified size ranges and key-value pairs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_47\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.map(Arb<Pair<K,V>>, minSize, maxSize)\nArb.map(Arb<K>, Arb<V>, minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Legacy Test Case Configuration in Kotest\nDESCRIPTION: Demonstrates the deprecated way of configuring test case defaults using defaultTestCaseConfig\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_5.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n    override fun defaultTestCaseConfig() = TestCaseConfig(tags = setOf(Foo, Bar), timeout = 100.seconds)\n    test(\"foo\") {\n      // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Test Case Severity Level\nDESCRIPTION: Example of configuring test case severity level in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.3.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec() {\n   init {\n      test(\"very very important\").config(severity = TestCaseSeverityLevel.CRITICAL) {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mocking Setup Causing Test Failures\nDESCRIPTION: Illustrates a common pitfall when using mocks across multiple tests without proper isolation, leading to unexpected verification failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/integrations/mocks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n    test(\"Saves to repository as well\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Section\nDESCRIPTION: Section showing bullet point list of changes, fixes and improvements for a specific release\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/changelog.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Fixes\n\n* Fix issue using compiler plugin with Kotlin 1.7.20. (#3220)\n* Allow registering global custom arbs through `GlobalArbResolver` (#3185)\n* Fix data tests for all `BehaviorSpec` scopes. (#3222)\n* Fix nullable maps in data tests (#3218)\n```\n\n----------------------------------------\n\nTITLE: Duration Generation in Kotest\nDESCRIPTION: Produces random duration values within specified ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_52\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.duration(ranges)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform with Gradle (Groovy)\nDESCRIPTION: Sets up the JUnit Platform in Gradle using Groovy syntax to enable Kotest to run tests via JUnit.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/setup.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Array Length Validation in JSON Schema\nDESCRIPTION: Demonstrates how to specify array length constraints using minItems and maxItems keywords.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/json/schema.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval lengthBoundedSchema = jsonSchema {\n  array(minItems = 0, maxItems = 1) { number() }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout Settings in Kotest DescribeSpec\nDESCRIPTION: Shows how to set timeout configurations at both spec and test case levels\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.2.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   timeout = 1000\n\n   describe(\"I will timeout in 1000 millis\") {\n      it(\"And so will I\") { }\n      it(\"But I'm a little faster\").config(timeout = 500.milliseconds) { }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin JS Target with Kotest\nDESCRIPTION: Sets up Kotlin JS target with Kotest engine dependency for browser and Node.js environments.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/setup.mdx#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) { // LEGACY or BOTH are unsupported\n      browser() // to compile for the web\n      nodejs() // to compile against node\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing System.exit Calls with SpecSystemExitListener in Kotest\nDESCRIPTION: Demonstrates how to use the SpecSystemExitListener to catch and verify System.exit calls in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n    \"Catch exception\" {\n      val thrown: SystemExitException = shouldThrow<SystemExitException> {\n        System.exit(22)\n      }\n\n      thrown.exitCode shouldBe 22\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering EmbeddedKafkaListener in Kotest FunSpec (Kotlin)\nDESCRIPTION: Shows how to register the embeddedKafkaListener in a Kotest FunSpec class. This listener starts an embedded Kafka broker when the spec is created and stops it when the spec completes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/kafka.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec({\n  listener(embeddedKafkaListener)\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EmbeddedKafkaListenerTest : FunSpec() {\n  init {\n    listener(embeddedKafkaListener)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tests with StringSpec Lambda Style\nDESCRIPTION: Example of writing tests using Kotest StringSpec style with constructor lambda approach.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  // tests here\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions Core Dependency in Maven\nDESCRIPTION: Adds the Kotest assertions core library dependency to a Maven project. This enables the use of Kotest's assertion functions in JVM-based tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-assertions-core-jvm</artifactId>\n   <version>{version}</version>\n   <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Collecting Conditional Statistics in Kotest\nDESCRIPTION: Demonstrates collecting statistics based on conditional logic, categorizing integers as even or odd.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/statistics.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"EVEN\")\n    else -> collect(\"ODD\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SpringListener in Kotlin Test Spec\nDESCRIPTION: Shows how to register a SpringListener within a test spec class by overriding the listeners() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/changelog.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : ParentSpec() {\n    override fun listeners() = listOf(SpringListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kotlinx Date/Time Matchers in Kotlin\nDESCRIPTION: Demonstrates how to use the new Kotlinx Date/Time matchers in Kotest 4.2.0 to check if a LocalDateTime has a specific hour.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/blog/release_4.2.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval date = LocalDateTime(2019, 2, 15, 12, 10, 0, 0)\ndate.shouldHaveHour(12)\n```\n\n----------------------------------------\n\nTITLE: Assertion with Insufficient Error Information in Kotlin\nDESCRIPTION: Shows an assertion that, when failed, provides limited information for debugging.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/clues.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nuser.name shouldNotBe null\n```\n\n----------------------------------------\n\nTITLE: Using WireMockListener in Kotest FunSpec (Per Test Mode)\nDESCRIPTION: Example of using WireMockListener in a Kotest FunSpec test class. This snippet demonstrates setting up a WireMockServer that runs for each individual test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/wiremock.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SomeTest : FunSpec({\n  val customerServiceServer = WireMockServer(9000)\n  listener(WireMockListener(customerServiceServer, ListenerMode.PER_TEST))\n\n  test(\"let me get customer information\") {\n    customerServiceServer.stubFor(\n      WireMock.get(WireMock.urlEqualTo(\"/customers/123\"))\n        .willReturn(WireMock.ok())\n    )\n\n    val connection = URL(\"http://localhost:9000/customers/123\").openConnection() as HttpURLConnection\n    connection.responseCode shouldBe 200\n  }\n\n  //  ------------OTHER TEST BELOW ----------------\n})\n```\n\n----------------------------------------\n\nTITLE: Using Testcontainers with Kotest TestListener\nDESCRIPTION: Example Kotlin code showing how to convert a Testcontainers container into a Kotest TestListener. This example uses the perTest() extension to start a Redis container before each test and stop it afterward.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/test_containers_46x.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Class in Kotlin for Testing\nDESCRIPTION: Creating a simple data class called Foo with string, boolean and double properties for demonstrating the improved data class comparison feature in Kotest 4.1.0.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.1.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Foo(val a: String, val b: Boolean, val c: Double)\n```\n\n----------------------------------------\n\nTITLE: Database Initialization with Multiple Scripts\nDESCRIPTION: Example of initializing a database container with multiple SQL scripts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcTestContainerExtension(mysql, LifecycleMode.Leaf)) {\n      maximumPoolSize = 8\n      minimumIdle = 4\n      dbInitScripts = listOf(\"/init.sql\", \"/sql-changesets\")\n   }\n```\n\n----------------------------------------\n\nTITLE: Collection Generation in Kotest\nDESCRIPTION: Collection of generators for sets, lists and collections with configurable sizes and element generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.set(gen, range, slippage)\nArb<T>.chunked(range)\nArb<T>.chunked(minSize, maxSize)\nExhaustive.collection(list)\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to Test Cases in KotlinTest StringSpec\nDESCRIPTION: Demonstrates how to apply tags to test cases using the config function. This allows selective test execution based on operating system or other categorizations.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotlintest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: InstancePerTest Mode Example in Kotest\nDESCRIPTION: Demonstrates the InstancePerTest isolation mode where a new spec instance is created for every test case, including outer contexts. The example shows how the 'Hello' message is printed multiple times as each context is executed in its own instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/isolation_mode.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerTestExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerTest\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Pythagorean Triple in Kotlin\nDESCRIPTION: Creates a data class to represent a Pythagorean triple for use in data-driven testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.3.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Property Testing with Gradle\nDESCRIPTION: Adding the Kotest property testing dependency to a JVM project using Gradle build system.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n   testImplementation(\"io.kotest:kotest-property:$version\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Iteration Count in Kotlin for Kotest Property Tests\nDESCRIPTION: Demonstrates how to set the default iteration count for property tests globally and how it affects different test configurations. It shows both direct assignment and usage within a test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/globalconfig.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nPropertyTesting.defaultIterationCount = 123\n\n// will use 555 iterations specified in the test\nforAll<String, String>(555) { a,b -> a + b == \"$a$b\" }\n\n// will use 123 iterations from the global default\nforAll<String, String> { a,b -> a + b == \"$a$b\" }\n```\n\n----------------------------------------\n\nTITLE: Android Test Configuration\nDESCRIPTION: Configures Android test options for using JUnit Platform\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/quick_start.mdx#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      it.useJUnitPlatform()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sonatype Snapshots Repository URL\nDESCRIPTION: Repository URL that needs to be added to the repositories block to access Kotest snapshot builds from Sonatype OSS.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nhttps://oss.sonatype.org/content/repositories/snapshots\n```\n\n----------------------------------------\n\nTITLE: Implementing KotlinX DateTime Assertions in Kotlin\nDESCRIPTION: Example showing how to use the new KotlinX DateTime assertions module to verify the hour value of a LocalDateTime object.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.2.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval date = LocalDateTime(2019, 2, 15, 12, 10, 0, 0)\ndate.shouldHaveHour(12)\n```\n\n----------------------------------------\n\nTITLE: Creating Chunked Lists from Arbitraries in Kotest\nDESCRIPTION: Methods to generate lists populated from elements of a source arbitrary. The size of each generated list is randomly chosen within a specified range.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nArb<T>.chunked(range)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nArb<T>.chunked(minSize, maxSize)\n```\n\n----------------------------------------\n\nTITLE: Testing System Exit in Kotlin\nDESCRIPTION: Shows how to use SpecSystemExitListener to test System.exit calls by intercepting them and throwing SystemExitException.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SystemExitTest : StringSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n\n    \"System.exit should throw an exception when the listener is added\" {\n      shouldThrow<SystemExitException> {\n        System.exit(123)\n      }.exitCode shouldBe 123\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with shouldThrow\nDESCRIPTION: Examples of testing exception throwing and validating exception properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Adding Pitest Kotest Extension Dependency in Maven\nDESCRIPTION: Maven dependency configuration to add the Kotest Pitest extension module to the project's test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/pitest.md#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  ... the other Kotest dependencies like kotest-runner-junit5-jvm \n  <dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-pitest</artifactId>\n    <version>${kotest-extensions-pitest.version}</version>\n    <scope>test</scope>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Explicit Generators in Kotlin\nDESCRIPTION: Demonstrates property testing using explicitly specified generators for string values using Gen.string().\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec() {\n  init {\n\n    \"String size\" {\n      forAll(Gen.string(), Gen.string(), { a: String, b: String ->\n        (a + b).length == a.length + b.length\n      })\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Field-by-Field Comparison Matchers in Kotlin\nDESCRIPTION: Matchers that compare objects field-by-field instead of using the equals() method. These matchers provide options to include or exclude private fields and to specify particular fields to exclude from the comparison.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFields(other: T)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFields(other: T, ignorePrivateFields: Boolean)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFieldsExcept(other: T, ignoreProperty: KProperty<*>, vararg ignoreProperties: KProperty<*>)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToComparingFieldsExcept(other: T, ignorePrivateFields: Boolean, ignoreProperty: KProperty<*>, vararg ignoreProperties: KProperty<*>)\n```\n\n----------------------------------------\n\nTITLE: Spring Constructor Injection in KotlinTest with SpringAutowireConstructorExtension\nDESCRIPTION: Demonstrates how to use constructor injection with Spring and KotlinTest, registering the extension in ProjectConfig to autowire beans into test class constructors.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override fun extensions(): List<ProjectLevelExtension> = listOf(SpringAutowireConstructorExtension)\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Data Source Example in KotlinTest\nDESCRIPTION: Demonstrates loading test data from CSV files for table testing using CsvDataSource.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_39\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CsvDataSourceTest : WordSpec() {\n  init {\n\n    \"CsvDataSource\" should {\n      \"read data from csv file\" {\n\n        val source = CsvDataSource(javaClass.getResourceAsStream(\"/user_data.csv\"), CsvFormat())\n\n        val table = source.createTable<Long, String, String>(\n            { it: Record -> Row3(it.getLong(\"id\"), it.getString(\"name\"), it.getString(\"location\")) },\n            { it: Array<String> -> Headers3(it[0], it[1], it[2]) }\n        )\n\n        forAll(table) { a, b, c ->\n          a shouldBe gt(0)\n          b shouldNotBe null\n          c shouldNotBe null\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin/Native with Kotest Engine\nDESCRIPTION: Sets up a Kotlin/Native project with Kotest framework engine dependency. Configures the Linux x64 target and adds the Kotest engine to the common test source set.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/quick_start.mdx#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    linuxX64() // can add any supported native targets such as linux, mac, windows etc\n  }\n}\nsourceSets {\n  val commonTest by getting {\n    dependencies {\n      implementation(\"io.kotest:kotest-framework-engine:$version\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Default Locale and Timezone in Kotlin Tests\nDESCRIPTION: Demonstrates how to use withDefaultLocale and withDefaultTimeZone functions to temporarily change the default locale and timezone in tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/extensions/system.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nwithDefaultLocale(Locale.FRANCE) {\n  println(\"My locale is now France! Très bien!\")\n}\n\nwithDefaultTimeZone(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\"))) {\n  println(\"My timezone is now America/Sao_Paulo! Muito bem!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Comparison Function Definition in Kotlin\nDESCRIPTION: Example of creating a custom comparison function with specific JSON comparison options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/json/content.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval myOptions = compareJsonOptions {\n   typeCoercion = TypeCoercion.Enabled\n   arrayOrder = ArrayOrder.Lenient\n}\n\ninfix fun String.lenientShouldEqualJson(other: String) = this.shouldEqualJson(other, myOptions)\n\n\"[1, 2]\" lenientShouldEqualJson \"[2, 1]\" // This will pass\n```\n\n----------------------------------------\n\nTITLE: Date Comparison Matchers in Kotlin with Klock\nDESCRIPTION: Assertion methods for comparing date components like year, month, and day between dates. Also includes methods for comparing temporal relationships (before/after/between).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/klock.md#2025-04-13_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYear(otherDate)\ndate.shouldHaveSameMonth(otherDate)\ndate.shouldHaveSameDay(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\n```\n\n----------------------------------------\n\nTITLE: Test Output Format for Individual Data Row Tests\nDESCRIPTION: Shows the output format when generating individual tests for each data row. This example displays how parent descriptions and individual test cases appear in the test report.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nIntegerMathSpec\n  ✓ Addition\n    ✓ 1 + 0\n    ✓ 1 + 1\n  ✓ Complex Math\n    ✓ 8/2(2+2)\n    ✓ 5/5 + 1*1 + 3-2\n```\n\n----------------------------------------\n\nTITLE: DescribeSpec Example in KotlinTest\nDESCRIPTION: Demonstrates DescribeSpec which uses describe, and, and it keywords similar to SpekFramework.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DescribeSpecExample : DescribeSpec() {\n  init {\n    describe(\"some context\") {\n      it(\"test name\") {\n        // test here\n      }\n      describe(\"nested contexts\") {\n        and(\"another context\") {\n          it(\"test name\") {\n            // test here\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using autoClose for Resource Management in KotlinTest\nDESCRIPTION: Shows how to use the autoClose feature in KotlinTest for automatic resource closing. It demonstrates registering a Closeable field for automatic closing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_52\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec() {\n  val reader = autoClose(StringReader(\"xyz\"))\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with Bang Operator in KotlinTest\nDESCRIPTION: Demonstrates how to use the bang (!) operator to skip specific tests in a KotlinTest StringSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.2.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow Matchers Extension for Kotest\nDESCRIPTION: To use Arrow matchers, add the kotest-assertions-arrow module to your project. The module is versioned independently of the main Kotest project. Additionally, ensure arrow-core is in your classpath to prevent Unresolved Reference errors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Add to your build.gradle.kts or pom.xml\n\"io.kotest.extensions:kotest-assertions-arrow:<version>\"\n\"io.arrow-kt:arrow-core:<arrow-version>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Assertions in Maven\nDESCRIPTION: Maven dependency configuration for Kotest assertions library. This module provides over 300 rich assertions and should be added to the Maven POM file.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest</groupId>\n    <artifactId>kotest-assertions-core</artifactId>\n    <version>{version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ExpectSpec in Kotlin\nDESCRIPTION: Demonstrates the basic structure of an ExpectSpec test in KoTest. It shows how to create a test using the 'expect' keyword.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/styles.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    expect(\"my test\") {\n        // test here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Global Isolation Mode Configuration in Kotest\nDESCRIPTION: Example showing how to configure isolation mode globally using ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/isolation_mode.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig: AbstractProjectConfig() {\n   override val isolationMode = IsolationMode.InstancePerLeaf\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocking and Non-blocking Tests in Kotest\nDESCRIPTION: Demonstrates how to configure blocking and non-blocking tests in Kotest using FunSpec. Shows the difference between using Thread.sleep (blocking) which requires blockingTest=true configuration, and delay (non-blocking) which uses coroutine suspension.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/timeouts/blocking_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyBlockingTest : FunSpec() {\n  init {\n\n    test(\"interrupt me!\").config(blockingTest = true, timeout = 10.seconds) {\n       Thread.sleep(100000000)\n    }\n\n    test(\"uses suspension\").config(timeout = 10.seconds) {\n      delay(100000000)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Per Leaf Mode Basic Example\nDESCRIPTION: Shows how InstancePerLeaf mode creates new instances for leaf test cases while reusing instances for nested contexts.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/isolation_mode.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass InstancePerLeafExample : WordSpec() {\n\n  override fun isolationMode(): IsolationMode = IsolationMode.InstancePerLeaf\n\n  init {\n    \"a\" should {\n      println(\"Hello\")\n      \"b\" {\n        println(\"From\")\n      }\n      \"c\" {\n        println(\"Sam\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Coroutine Debug Output\nDESCRIPTION: Example of a coroutine dump output showing the state and stacktrace of a created coroutine. This output helps in debugging coroutine execution and tracking their lifecycle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCoroutines dump 2021/11/27 22:17:43\n\nCoroutine DeferredCoroutine{Active}@71f1906, state: CREATED\n\t(Coroutine creation stacktrace)\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.async$default(Builders.common.kt:82)\n\tat kotlinx.coroutines.BuildersKt.async$default(Unknown Source)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invokeSuspend(CoroutineDebugTest.kt:37)\n\tat com.sksamuel.kotest.engine.coroutines.Wibble$1.invoke(CoroutineDebugTest.kt)\n```\n\n----------------------------------------\n\nTITLE: Creating Named Tags in Kotlin\nDESCRIPTION: Demonstrates creating a tag using the NamedTag class with validation rules for tag names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/tags.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval tag = NamedTag(\"Linux\")\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Compiler Assertions Dependency\nDESCRIPTION: Adds the kotest-assertions-compiler dependency to the project build configuration using Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/compiler.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-assertions-compiler:${version}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing MockServer Test with Kotest FunSpec\nDESCRIPTION: Example showing how to set up a MockServer test using Kotest's FunSpec. Demonstrates configuring mock HTTP endpoints, making requests with Ktor client, and validating responses using Kotest assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/mockserver.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyMockServerTest : FunSpec() {\n  init {\n\n      // this attaches the server to the lifeycle of the spec\n      listener(MockServerListener(1080))\n\n      // we can use the client to create routes. Here we are setting them up\n      // before each test by using the beforeTest callback.\n      beforeTest {\n         MockServerClient(\"localhost\", 1080).`when`(\n            HttpRequest.request()\n               .withMethod(\"POST\")\n               .withPath(\"/login\")\n               .withHeader(\"Content-Type\", \"application/json\")\n               .withBody(\"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\")\n         ).respond(\n            HttpResponse.response()\n               .withStatusCode(202)\n               .withHeader(\"X-Test\", \"foo\")\n         )\n      }\n\n      // this test will confirm the endpoint works\n      test(\"login endpoint should accept username and password json\") {\n\n         // using the ktor client to send requests\n         val client = HttpClient(CIO)\n         val resp = client.post<io.ktor.client.statement.HttpResponse>(\"http://localhost:1080/login\") {\n            contentType(ContentType.Application.Json)\n            body = \"{\\\"username\\\": \\\"foo\\\", \\\"password\\\": \\\"bar\\\"}\"\n         }\n\n         // these handy matchers come from the kotest-assertions-ktor module\n         resp.shouldHaveStatus(HttpStatusCode.Accepted)\n         resp.shouldHaveHeader(\"X-Test\", \"foo\")\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withSystemProperty Extension\nDESCRIPTION: Example of using the withSystemProperty extension function to temporarily override a system property in a test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/system.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nwithSystemProperty(\"foo\", \"bar\") {\n  System.getProperty(\"foo\") shouldBe \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collection Emptiness Assertions in Kotest\nDESCRIPTION: Verifies if a collection has zero elements using shouldBeEmpty() matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/collections.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Creating Tests with StringSpec using Init Block\nDESCRIPTION: Example of creating a test class using StringSpec with an init block. This approach allows overriding parent class methods like beforeTest and afterTest.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec() {\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in kotest.properties\nDESCRIPTION: Example of setting a key-value pair in the kotest.properties file that will be loaded as a system property before test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/intellij/props.md#2025-04-13_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nfoo=bar\n```\n\n----------------------------------------\n\nTITLE: Using haveLength Matcher in Kotlin for Kotest\nDESCRIPTION: Demonstrates the usage of the haveLength matcher for strings in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_44\n\nLANGUAGE: kotlin\nCODE:\n```\nsomeString should haveLength(10)\n```\n\n----------------------------------------\n\nTITLE: Adding Jacoco Plugin in Gradle\nDESCRIPTION: Adds the Jacoco plugin to the Gradle build configuration for enabling code coverage reporting.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/integrations/jacoco.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n   ...\n   jacoco\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: SingleInstance Isolation Mode Example in Kotest\nDESCRIPTION: Illustrates the SingleInstance isolation mode, where one instance of the Spec class is created for all test cases. In this example, the same UUID would be printed for all tests as they share the same instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/isolation_mode.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SingleInstanceExample : WordSpec({\n   val id = UUID.randomUUID()\n   \"a\" should {\n      println(id)\n      \"b\" {\n         println(id)\n      }\n      \"c\" {\n         println(id)\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Jacoco Plugin in Gradle\nDESCRIPTION: Adds the Jacoco plugin to the Gradle build configuration for enabling code coverage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/integrations/jacoco.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n   ...\n   jacoco\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Timeouts in Kotest\nDESCRIPTION: Demonstrates how to set timeouts for individual test cases and invocations in Kotest 4.1, including the new invocation-level timeout feature.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.1.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds) { }\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"some test\").config(timeout = 3000.milliseconds,\n                         invocationTimeout = 250.milliseconds,\n                         invocations = 10) { }\n```\n\n----------------------------------------\n\nTITLE: Using Even/Odd Matchers in KoTest\nDESCRIPTION: Examples of using the new even and odd matchers in KoTest to verify if integers have expected properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n4 should beEven()\n3 shouldNot beEven()\n\n3 should beOdd()\n4 shouldNot beOdd()\n```\n\n----------------------------------------\n\nTITLE: Assertion Mode Error Output\nDESCRIPTION: Shows the error message output when a test fails due to having no assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/assertion_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTest 'this test has no assertions' did not invoke any assertions\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution with Reason in Kotlin\nDESCRIPTION: Demonstrates using enabledOrReasonIf to provide explanatory messages when tests are disabled. Returns an Enabled type that can contain a skip reason for test reports.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/config_enabled.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: (TestCase) -> Enabled = {\n   if (it.name.testName.startsWith(\"danger\") && isFriday())\n      Enabled.disabled(\"It's a friday, and we don't like danger!\")\n   else\n      Enabled.enabled\n}\n\n\"danger Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually with Initial Delay\nDESCRIPTION: Demonstrates how to add an initial delay before the first test iteration using the initialDelay parameter.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/concurrency/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5000\n  initialDelay = 1000\n}) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Isolation in Kotest\nDESCRIPTION: Isolation mode allows for finer control over the instances in which tests execute, improving test independence.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : StringSpec({\n  isolation = IsolationMode.InstancePerLeaf\n  \n  \"test 1\" {\n    // Test code\n  }\n  \n  \"test 2\" {\n    // Test code\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Random Email Local Parts with Kotest Arbitrary\nDESCRIPTION: Uses Arb.emailLocalPart() to generate random local parts of email addresses.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/genslist.md#2025-04-13_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.emailLocalPart()\n```\n\n----------------------------------------\n\nTITLE: Configuring One Instance Per Test in Kotest\nDESCRIPTION: This snippet demonstrates how to configure a Kotest spec to create a new instance for every test case by overriding the isInstancePerTest() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec() {\n  override fun isInstancePerTest() = true\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Schema from Text in Kotlin\nDESCRIPTION: Demonstrates how to parse a JSON Schema from a text string. The example schema defines validation rules for geographical coordinates with latitude and longitude properties, including their type and value ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/json/schema.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval parsedSchema = parseSchema(\n  \"\"\"\n  {\n  \"$id\": \"https://example.com/geographical-location.schema.json\",  // will  be ignored\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",       // will be ignored\n  \"title\": \"Longitude and Latitude Values\",                        // will be ignored\n  \"description\": \"A geographical coordinate.\",                     // will be ignored\n  \"required\": [ \"latitude\", \"longitude\" ],\n  \"type\": \"object\",\n  \"properties\": {\n    \"latitude\": {\n      \"type\": \"number\",\n      \"minimum\": -90,\n      \"maximum\": 90\n    },\n    \"longitude\": {\n      \"type\": \"number\",\n      \"minimum\": -180,\n      \"maximum\": 180\n    }\n  }\n}\n  \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Plugin in Gradle\nDESCRIPTION: Gradle configuration block for setting up Pitest plugin with Kotest, including target classes specification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/pitest.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nconfigure<PitestPluginExtension> {\n    // testPlugin.set(\"Kotest\")    // needed only with old PIT <1.6.7, otherwise having kotest-extensions-pitest on classpath is enough\n    targetClasses.set(listOf(\"my.company.package.*\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KotlinTest with Gradle\nDESCRIPTION: Instructions for setting up KotlinTest in a Gradle build file. This requires enabling the JUnit Platform with useJUnitPlatform() and adding the KotlinTest JUnit5 runner dependency.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n  useJUnitPlatform()\n}\n\ndependencies {\n  testCompile 'io.kotlintest:kotlintest-runner-junit5:3.1.10'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Test Options for JUnit Platform\nDESCRIPTION: This Kotlin snippet shows how to configure Android test options to use the JUnit Platform. It's required for running Kotest tests in Android projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/setup.mdx#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid.testOptions {\n   unitTests.all {\n      it.useJUnitPlatform()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency with Maven\nDESCRIPTION: Maven dependency configuration for integrating Testcontainers with Kotest. This adds the kotest-extensions-testcontainers library to your project with test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers_46x.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions in Kotest\nDESCRIPTION: Shows how to chain multiple assertions together using Kotest's fluent assertion API.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/index.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n\"substring\".shouldContain(\"str\")\n           .shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(\".jpg\")\n           .shouldStartWith(\"https\")\n```\n\n----------------------------------------\n\nTITLE: Gradle Configuration for Tags\nDESCRIPTION: Required Gradle configuration to support system properties for tags\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/tags.md#2025-04-13_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    //... Other configurations ...\n    systemProperties = System.properties\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval test by tasks.getting(Test::class) {\n    // ... Other configurations ...\n    systemProperties = System.getProperties().asIterable().associate { it.key.toString() to it.value }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default TestCaseConfig in Kotest\nDESCRIPTION: This snippet demonstrates how to set a default TestCaseConfig for all test cases in a Kotest spec by overriding the defaultTestCaseConfig() function.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n\n  override fun defaultTestCaseConfig() = TestCaseConfig(invocations = 3)\n\n  init {\n    // your test cases ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JDBC Container Extension\nDESCRIPTION: Example of installing and configuring JDBC container extension with connection pool settings\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/extensions/test_containers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcTestContainerExtension(mysql)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Kotest Environment Variable Test Filtering\nDESCRIPTION: Example of using Kotest's environment variable to filter tests by package name, compatible with both Kotlin/JVM and Kotlin/Native.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/gradle.md#2025-04-13_snippet_4\n\nLANGUAGE: gradle\nCODE:\n```\nkotest_filter_specs='com.somepackage.*' gradle test\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher with Kotest Assertions in Kotlin\nDESCRIPTION: This code shows how to use the custom string length matcher with Kotest's should and shouldNot assertion functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/custom.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should haveLength(9)\n\"hello bar\" shouldNot haveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Setting Allure Results Directory in Gradle Test Task\nDESCRIPTION: This Kotlin snippet shows how to set the Allure results directory using a system property in the Gradle test task configuration. This step is necessary when not using the Gradle plugin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/allure.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.named<Test>(\"test\") { // or \"jvmTest\" etc\n   useJUnitPlatform()\n   systemProperty(\"allure.results.directory\", project.buildDir.toString() + \"/allure-results\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Android Assertions Dependency in Kotlin\nDESCRIPTION: This code snippet shows how to add the Kotest Android assertions dependency to a Kotlin project. This dependency is required to use the Android-specific matchers in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/android_matchers.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.kotest:kotest-assertions-android:VERSION\")\n```\n\n----------------------------------------\n\nTITLE: Generating Random Emails in Kotest\nDESCRIPTION: Generates random email addresses with customizable local part and domain generators.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.email(localPartGen, domainGen)\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Maven (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the Kotest Testcontainers extension dependency to a Maven pom.xml file. It includes the groupId, artifactId, version, and scope elements.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers_46x.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generators in Kotest Property Testing\nDESCRIPTION: Shows how to use exhaustive generators with checkAll to ensure all combinations of values are tested.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.2.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval context = checkAll(\n   Exhaustive.ints(0..5),\n   Exhaustive.ints(0..5),\n   Exhaustive.ints(0..5)\n) { ... }\n```\n\n----------------------------------------\n\nTITLE: Setting Invocation Timeout in DescribeSpec\nDESCRIPTION: Shows how to set a timeout for each individual test invocation when running multiple times\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times and each has a timeout of 60 milliseconds\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Name Prefix in Kotest\nDESCRIPTION: Command showing how to run only tests that start with 'Foo' in any package using Kotest's test filtering system property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/conditional/gradle.md#2025-04-13_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngradle test -Dkotest.filter.tests='Foo*'\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Lifecycle in Kotlin\nDESCRIPTION: Shows how to configure the lifecycle of a container using LifecycleMode with JdbcTestContainerExtension in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcTestContainerExtension(mysql, LifecycleMode.Root)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JDBC Test Container Extension in Kotlin\nDESCRIPTION: Demonstrates how to install a JDBC Test Container Extension with custom configuration in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcTestContainerExtension(mysql)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tests with ExpectSpec in Kotlin\nDESCRIPTION: Demonstrates how to create a basic test using ExpectSpec style in Kotest. This specification style uses the 'expect' keyword to define test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    expect(\"my test\") {\n        // test here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Random Email Addresses in Kotlin with Kotest\nDESCRIPTION: Employs Arb.email() to generate random email addresses with customizable local part and domain generators. Default generators are provided if not specified.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/genslist.md#2025-04-13_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.email(localPartGen, domainGen)\n```\n\n----------------------------------------\n\nTITLE: Adding Allure Gradle Plugin in Kotlin\nDESCRIPTION: Gradle plugin configuration for Allure reporting in the plugins block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/allure.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  ...\n  id(\"io.qameta.allure\") version \"2.8.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: DescribeSpec Spek-Style Testing\nDESCRIPTION: Example of using DescribeSpec to write tests in a Spek-like style with describe, and, and it blocks\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DescribeSpecExample : DescribeSpec() {\n  init {\n    describe(\"some context\") {\n      it(\"test name\") {\n        // test here\n      }\n      describe(\"nested contexts\") {\n        and(\"another context\") {\n          it(\"test name\") {\n            // test here\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Instant Matchers in Kotest with Kotlinx Datetime\nDESCRIPTION: A collection of matcher functions for asserting temporal relationships between Instant objects in tests. These matchers allow verification of temporal ordering and range checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeBefore(anotherInstant)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporter in ProjectConfig\nDESCRIPTION: Shows how to configure the JunitXmlReporter with options to include container tests and use full test paths in the XML output, which provides better reporting for nested tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/blog/release_4.2.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override fun listeners(): List<Listener> = listOf(\n     JunitXmlReporter(\n        includeContainers = true, // write out status for all tests\n        useTestPathAsName = true // use the full test path (ie, includes parent test names)\n     )\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CompareJsonOptions for JSON Comparison in Kotlin\nDESCRIPTION: Shows how to use CompareJsonOptions to customize the behavior of JSON comparison. The example demonstrates inline option specification and creating a custom comparison function with predefined options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/json/content.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\na.shouldEqualJson(b, compareJsonOptions { arrayOrder = ArrayOrder.Strict })\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval myOptions = compareJsonOptions {\n   typeCoercion = TypeCoercion.Enabled\n   arrayOrder = ArrayOrder.Lenient\n}\n\ninfix fun String.lenientShouldEqualJson(other: String) = this.shouldEqualJson(other, myOptions)\n\n\"[1, 2]\" lenientShouldEqualJson \"[2, 1]\" // This will pass\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Runner Dependency (Groovy)\nDESCRIPTION: Adds the Kotest JUnit5 runner dependency to the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/setup.mdx#2025-04-13_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation 'io.kotest:kotest-runner-junit5:$version'\n```\n\n----------------------------------------\n\nTITLE: Testing Arrow Validation Types in KotlinTest\nDESCRIPTION: Demonstrates matchers for Arrow's Validation type, allowing verification of Valid and Invalid values from the kotlintest-assertions-arrow module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nValid(\"foo\") should beValid()\nInvalid(RuntimeException()) should beInvalid()\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Ktor Assertions Dependency\nDESCRIPTION: Maven/Gradle dependency configuration for adding Ktor assertions to a Kotest project. Uses a version placeholder that should be replaced with the actual version number.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nio.kotest.extensions:kotest-assertions-ktor:${version}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pitest Plugin in Maven\nDESCRIPTION: Sets up the Pitest Maven plugin configuration with essential settings like target classes and coverage threshold.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/pitest.md#2025-04-13_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.pitest</groupId>\n    <artifactId>pitest-maven</artifactId>\n    <version>${pitest-maven.version}</version>\n    <configuration>\n        <targetClasses>...</targetClasses>\n        <coverageThreshold>...</coverageThreshold>\n        ... other configurations as needed\n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Repository in Kotlin\nDESCRIPTION: Sets up snapshot repository configuration in Kotlin build file to access latest development builds.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n    maven(url = \"https://oss.sonatype.org/content/repositories/snapshots/\")\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Assertions in Kotest\nDESCRIPTION: Methods for testing Optional objects including presence verification with optional value processing and emptiness checking.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\noptional.shouldBePresent()\noptional.shouldBePresent { value -> .. }\noptional.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Feature-Based Testing with FeatureSpec\nDESCRIPTION: Demonstrates FeatureSpec style which uses feature/scenario keywords similar to Cucumber. Shows both basic structure and test disabling options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"the can of coke\") {\n        scenario(\"should be fizzy when I shake it\") {\n            // test here\n        }\n        scenario(\"and should be tasty\") {\n            // test here\n        }\n    }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FeatureSpec({\n    feature(\"this outer block is enabled\") {\n        xscenario(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xfeature(\"this block is disabled\") {\n        scenario(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding KotlinTest JUnit5 Runner Dependency in Maven\nDESCRIPTION: XML configuration for adding the KotlinTest JUnit 5 runner dependency to a Maven project. This dependency is required to run KotlinTest tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.3.md#2025-04-13_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotlintest</groupId>\n    <artifactId>kotlintest-runner-junit5</artifactId>\n    <version>3.3.0</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Selectively Disabling Individual Tests with xit in Kotest DescribeSpec\nDESCRIPTION: Demonstrates how to selectively disable individual tests within an enabled test block using the xit prefix. This allows for granular control over which specific tests are skipped while keeping others active.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/xmethods.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass XMethodsExample : DescribeSpec({\n\n  describe(\"this block is enabled\") {\n    xit(\"will not run\") {\n      // disabled test\n    }\n    it(\"will run\") {\n       // enabled test\n    }\n  }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Thread State Assertions in Kotest\nDESCRIPTION: Methods for verifying thread states including blocked, daemon, alive, and terminated states.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nthread.shouldBeBlocked()\nthread.shouldBeDaemon()\nthread.shouldBeAlive()\nthread.shouldBeTerminated()\n```\n\n----------------------------------------\n\nTITLE: Installing JDBC Database Container Extension\nDESCRIPTION: Setting up a JDBC database container extension with connection pool configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/test_containers.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds = install(JdbcDatabaseContainerExtension(mysql)) {\n  poolName = \"myconnectionpool\"\n  maximumPoolSize = 8\n  idleTimeout = 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Environment Variables in Tests\nDESCRIPTION: Shows how to override multiple environment variables at once using a map or list of pairs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/system.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nwithEnvironment(mapOf(\"FooKey\" to \"BarValue\", \"BarKey\" to \"FooValue\")) {\n    // Use FooKey and BarKey\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with TestLogger in Kotest\nDESCRIPTION: Demonstrates how to use the TestLogger object for logging in separate test functions, showing extension function usage with logging capabilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/logging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"test something else\") {\n  logger.assertSomething(\"something else\")\n}\n\nfun TestLogger.assertSomething(actual: String) {\n   info { \"asserting something about $actual\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Tests with StringSpec Style in Kotlin\nDESCRIPTION: Demonstrates how to write simple and beautiful tests using the StringSpec style in Kotest. It shows two example tests: one checking string length and another testing string prefix.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/index.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n  \"length should return size of string\" {\n    \"hello\".length shouldBe 5\n  }\n  \"startsWith should test for a prefix\" {\n    \"world\" should startWith(\"wor\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updated Test Configuration Syntax\nDESCRIPTION: Demonstrates the new configuration syntax for tests in Kotest 3.1.x where config is specified after the test name instead of after the test block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n\"this is a test\".config(...) {\n}\n```\n\n----------------------------------------\n\nTITLE: Arrow Extension Assertions in KotlinTest\nDESCRIPTION: Shows how to use KotlinTest's Arrow extension module to test functional programming types like Option with specialized matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nval option: Option<String> = ...\noption shouldBe beSome(\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Recommended Test Case Config in Kotlin\nDESCRIPTION: Demonstrates the new recommended way of setting default test case configuration in a Kotest spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_5.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n\n    tags(Foo, Bar)\n    timeout = 100.seconds\n\n    test(\"foo\") {\n       // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Contracts in Kotest Matchers\nDESCRIPTION: Demonstrates how to use generic contracts in Kotest matchers for smart casting.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.2.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval list: Any = arrayListOf(1, 2, 3)\nlist.shouldBeTypeOf<ArrayList<Int>>()\nlist[0] shouldBe 1 // can only work with a smart case\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers Dependency in Maven\nDESCRIPTION: Adding the Kotest Testcontainers extension dependency to a Maven pom file.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/test_containers.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using Kotlinx DateTime Matchers in Kotlin\nDESCRIPTION: Example of using the new Kotlinx DateTime matchers to check that a LocalDateTime has a specific hour.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.2.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval date = LocalDateTime(2019, 2, 15, 12, 10, 0, 0)\ndate.shouldHaveHour(12)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Property Testing for Multiplatform\nDESCRIPTION: Adds the property testing library to a common test source set in a multiplatform project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/quick_start.mdx#2025-04-13_snippet_16\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kotest:kotest-property:$version'\n```\n\n----------------------------------------\n\nTITLE: Testing Arrow Option Types with KoTest Arrow Matchers\nDESCRIPTION: Examples of testing Arrow's Option type using the beSome and beNone matchers from the kotlintest-assertions-arrow module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/changelog.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nval option = Option.pure(\"foo\")\noption should beSome(\"foo\")\n\nval none = None\nnone should beNone()\n```\n\n----------------------------------------\n\nTITLE: Testing Futures with whenReady in KotlinTest\nDESCRIPTION: Shows how to test asynchronous code that returns CompletableFuture objects without blocking. The whenReady function waits for future completion before executing assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : StringSpec({\n\n    \"test a future\" {\n        val f: CompletableFuture<String> = someFuture()\n        whenReady(f) {\n            it shouldBe \"wibble\"\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Arrow Generators for Kotest\nDESCRIPTION: Instructions for adding Arrow generators to a Kotest project. Requires adding dependencies for kotest-property-arrow and arrow-core to the build configuration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/arrow.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nio.kotest.extensions:kotest-property-arrow:version\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nio.arrow-kt:arrow-core:arrow-version\n```\n\n----------------------------------------\n\nTITLE: Using containInAnyOrder Matcher for Collections in KotlinTest\nDESCRIPTION: Shows how to use the new containInAnyOrder matcher for collections in KotlinTest. It demonstrates asserting that a collection contains specific elements in any order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_56\n\nLANGUAGE: kotlin\nCODE:\n```\nval col = listOf(1,2,3,4,5)\ncol should containInAnyOrder(4,2,3)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit XML Reporter in Kotest Project Config\nDESCRIPTION: Shows how to configure the JUnit XML Reporter with custom options in a Kotest Project Config.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.2.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n   override fun listeners(): List<Listener> = listOf(\n     JunitXmlReporter(\n        includeContainers = true, // write out status for all tests\n        useTestPathAsName = true // use the full test path (ie, includes parent test names)\n     )\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Default TestConfig in Kotest FunSpec Initialization Block\nDESCRIPTION: This snippet demonstrates how to set a default TestConfig for all test cases in a Kotest FunSpec by assigning to the defaultTestConfig property in the init block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/test_case_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n\n    defaultTestConfig = TestCaseConfig(enabled = true, invocations = 3)\n\n    test(\"FunSpec should support Spec config syntax in init{} block\") {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Invocation Timeout in Kotest FunSpec\nDESCRIPTION: Shows how to set an invocation timeout for all tests in a spec by setting the invocationTimeout property at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   invocationTimeout = 25.milliseconds\n\n   test(\"foo\") {\n      // test here\n   }\n\n   test(\"bar\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Eventually with Custom Exception Handling\nDESCRIPTION: Example of using eventually with a custom exception handling function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/concurrency/eventually.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 8000\n  suppressExceptionIf = { it is UserNotFoundException && it.username == \"bob\" }\n}) {\n  userRepository.getById(1).name shouldNotBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with FreeSpec in Kotlin\nDESCRIPTION: Shows FreeSpec style which allows arbitrary nesting levels using the minus (-) operator. Demonstrates deep nesting capabilities.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FreeSpec({\n    \"String.length\" - {\n        \"should return the length of the string\" {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n    }\n    \"containers can be nested as deep as you want\" - {\n        \"and so we nest another container\" - {\n            \"yet another container\" - {\n                \"finally a real test\" {\n                    1 + 1 shouldBe 2\n                }\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Table Tests with KotlinTest\nDESCRIPTION: Shows how to implement Table Tests in KotlinTest. Tables allow specifying combinations of values for testing, with headers for clear output when tests fail. The example tests if pairs of numbers sum to 10.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TableExample : StringSpec(), TableTesting {\n  init {\n    \"numbers should be prime\" {\n      val table = table(\n          headers(\"a\", \"b\"),\n          row(5, 5),\n          row(4, 6),\n          row(3, 7)\n      )\n      forAll(table) { a, b ->\n        a + b == 10\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatcherResult Interface in Kotlin\nDESCRIPTION: Defines the MatcherResult interface with methods for indicating test pass/fail status and providing failure messages for both positive and negative assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/custom.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MatcherResult {\n  fun passed(): Boolean\n  fun failureMessage(): String\n  fun negatedFailureMessage(): String\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Mode Using Function Override in Kotest\nDESCRIPTION: Example demonstrating how to set isolation mode by overriding the isolationMode() function in a test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/isolation_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestClass : WordSpec() {\n  override fun isolationMode() = IsolationMode.SingleInstance\n  init {\n    // tests here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Configuration Dump Output\nDESCRIPTION: Example output showing the configuration dump format, including parallelization settings, timeouts, execution orders, and enabled extensions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/config_dump.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n~~~ Kotest Configuration ~~~\n-> Parallelization factor: 1\n-> Concurrent specs: null\n-> Global concurrent tests: 1\n-> Dispatcher affinity: true\n-> Coroutine debug probe: false\n-> Spec execution order: Lexicographic\n-> Default test execution order: Sequential\n-> Default test timeout: 600000ms\n-> Default test invocation timeout: 600000ms\n-> Default isolation mode: SingleInstance\n-> Global soft assertions: false\n-> Write spec failure file: false\n-> Fail on ignored tests: false\n-> Fail on empty test suite: false\n-> Duplicate test name mode: Warn\n-> Remove test name whitespace: false\n-> Append tags to test names: false\n-> Extensions\n  - io.kotest.engine.extensions.SystemPropertyTagExtension\n```\n\n----------------------------------------\n\nTITLE: Generating Individual Tests for Data Rows in FreeSpec with Kotest\nDESCRIPTION: This snippet demonstrates how to generate individual tests for each row of data parameters in a FreeSpec. It includes examples for basic addition and more complex mathematical operations, showing how to create a hierarchical test structure.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jacoco XML Report Task\nDESCRIPTION: Configures the Jacoco test report task to generate XML reports and depend on the test task execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/integrations/jacoco.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.jacocoTestReport {\n    dependsOn(tasks.test)\n    reports {\n        xml.required.set(true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Syntax for Ktor Matchers Documentation\nDESCRIPTION: A markdown link indicating the new location of the Ktor matchers documentation.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/matchers/ktor.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[This page has moved](https://kotest.io/docs/assertions/ktor-matchers.html)\n```\n\n----------------------------------------\n\nTITLE: Reflection Assertions in Kotlin\nDESCRIPTION: Comprehensive set of methods for testing class properties, functions, annotations, and other reflection-based features in Kotlin.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_24\n\nLANGUAGE: Kotlin\nCODE:\n```\nkclass.shouldHaveAnnotations()\nkclass.shouldHaveAnnotations(n)\nkclass.shouldBeAnnotatedWith<T>()\nkclass.shouldBeAnnotatedWith<T> { block }\nkclass.shouldHaveFunction(name)\nkclass.shouldHaveFunction(name) { block }\nkclass.shouldHaveMemberProperty(name)\nkclass.shouldHaveMemberProperty(name) { block }\nkclass.shouldBeSubtypeOf<T>()\nkclass.shouldBeSupertypeOf<T>()\nkclass.shouldBeData()\nkclass.shouldBeSealed()\nkclass.shouldBeCompanion()\nkclass.shouldHavePrimaryConstructor()\nkclass.shouldHaveVisibility(visibility)\nkfunction.shouldHaveAnnotations()\nkfunction.shouldHaveAnnotations(n)\nkfunction.shouldBeAnnotatedWith<T>()\nkfunction.shouldBeAnnotatedWith<T> { block }\nkfunction.shouldHaveReturnType<T>()\nkfunction.shouldBeInline()\nkfunction.shouldBeInfix()\nkproperty.shouldBeOfType<T>()\nkproperty.shouldBeConst()\nkproperty.shouldBeLateInit()\nkcallable.shouldHaveVisibility(visibility)\nkcallable.shouldBeFinal()\nkcallable.shouldBeOpen()\nkcallable.shouldBeAbstract()\nkcallable.shouldBeSuspendable()\nkcallable.shouldAcceptParameters(parameters)\nkcallable.shouldAcceptParameters(parameters) { block }\nkcallable.shouldHaveParametersWithName(parameters)\nkcallable.shouldHaveParametersWithName(parameters) { block }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shrinker for Coordinate Generator in Kotest\nDESCRIPTION: This snippet demonstrates how to implement a custom Shrinker for a Coordinate data class. The shrinker returns the four neighboring coordinates. It also shows how to use this custom shrinker in a property-based test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/shrinking.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Coordinate(val x: Int, val y: Int)\n\nclass CoordinateTest : FunSpec({\n    context(\"Coordinate Transformations\") {\n        // Shrinker takes the four neighbouring coordinates\n        val coordinateShrinker = Shrinker<Coordinate> { c ->\n            listOf(\n                Coordinate(c.x - 1, c.y),\n                Coordinate(c.x, c.y - 1),\n                Coordinate(c.x + 1, c.y),\n                Coordinate(c.x, c.y + 1),\n            )\n        }\n        val coordinateArb = arbitrary(coordinateShrinker) {\n            Coordinate(Arb.nonNegativeInt().bind(), Arb.nonNegativeInt().bind())\n        }\n\n        test(\"Coordinates are always positive after transformation\") {\n            coordinateArb.checkAll {\n                transform(it).x shouldBeGreaterThanOrEqualTo 0\n                transform(it).y shouldBeGreaterThanOrEqualTo 0\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Providing Reason for Disabled Tests with EnabledOrReasonIf in Kotlin\nDESCRIPTION: This snippet demonstrates the use of 'enabledOrReasonIf' to provide a reason when disabling tests. It allows returning an 'Enabled' type that can contain a skip reason, which is passed through to test reports.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/conditional/config_enabled.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval disableDangerOnFridays: (TestCase) -> Enabled = {\n   if (it.name.testName.startsWith(\"danger\") && isFriday())\n      Enabled.disabled(\"It's a friday, and we don't like danger!\")\n   else\n      Enabled.enabled\n}\n\n\"danger Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n  // test here\n}\n\n\"safe Will Robinson\".config(enabledOrReasonIf = disableDangerOnFridays) {\n // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Kotest Convention Plugin Hierarchy with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the hierarchical relationships between different convention plugins used in the Kotest project. It shows how various platform-specific and publishing conventions build upon the base Kotlin conventions.\nSOURCE: https://github.com/kotest/kotest/blob/master/buildSrc/README.md#2025-04-13_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n  state \"kotlin-conventions\" as base\n  state \"kotest-jvm-conventions\" as jvm\n  state \"kotest-js-conventions\" as js\n  state \"kotest-native-conventions\" as native\n  state \"kotest-publishing-conventions\" as publishing\n  state \"kotest-multiplatform-library-conventions\" as mpplib\n\n  jvm --> base\n  js --> base\n  native --> base\n  mpplib --> native\n  mpplib --> jvm\n  mpplib --> js\n  mpplib --> publishing\n```\n\n----------------------------------------\n\nTITLE: Using Until with Fibonacci Interval in Kotest\nDESCRIPTION: This snippet demonstrates configuring the 'until' function with a fibonacci interval strategy, where the delay between checks increases according to the fibonacci sequence, starting from 100 milliseconds. This approach is useful for reducing contention on frequently checked resources.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/until.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 100.milliseconds.fibonacci()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Individual Test Cases in FreeSpec\nDESCRIPTION: Demonstrates how to generate individual test cases from table data using FreeSpec, including nested test structure and arithmetic operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass IntegerMathSpec : FreeSpec({\n    \"Addition\" - {\n        listOf(\n            row(\"1 + 0\", 1) { 1 + 0 },\n            row(\"1 + 1\", 2) { 1 + 1 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n    // ...\n    \"Complex Math\" - {\n        listOf(\n            row(\"8/2(2+2)\", 16) { 8 / 2 * (2 + 2) },\n            row(\"5/5 + 1*1 + 3-2\", 3) { 5 / 5 + 1 * 1 + 3 - 2 }\n        ).map { (description: String, expected: Int, math: () -> Int) ->\n            description {\n                math() shouldBe expected\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Test Execution with Focus Prefix in Kotest FunSpec\nDESCRIPTION: This example shows how the focus prefix 'f:' on a parent test allows nested tests to execute in a Kotest FunSpec. The focused context and its nested tests are executed, while others are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/conditional/focus.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : FunSpec({\n   context(\"test 1\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n   }\n\n   context(\"f:test 2\") {\n      // this will be executed\n      test(\"foo\") {\n         // this will be executed\n      }\n   }\n\n   context(\"test 3\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Project-wide Extensions with @AutoScan in Kotlin\nDESCRIPTION: This example shows how to create a project-level extension that runs for all specs in the project. It implements BeforeProjectListener and AfterProjectListener interfaces and uses the @AutoScan annotation for automatic registration. The extension prints messages at the start and end of the project execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/extensions/extensions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n@AutoScan\nobject MyProjectListener : BeforeProjectListener, AfterProjectListener {\n  override suspend fun beforeProject() {\n    println(\"Project starting\")\n  }\n  override suspend fun afterProject() {\n    println(\"Project complete\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Lifecycle Hook Functions in Kotest\nDESCRIPTION: This example shows how to define reusable lifecycle hook functions that can be applied across multiple test specifications. The startTest function is defined once and used in both TestSpec and OtherSpec classes.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/lifecycle_hooks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval startTest: BeforeTest = {\n   println(\"Starting a test $it\")\n}\n\nclass TestSpec : WordSpec({\n\n   // used once\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"be alive\" {\n         println(\"Johnny5 is alive!\")\n      }\n   }\n})\n\nclass OtherSpec : WordSpec({\n\n   // used twice\n   beforeTest(startTest)\n\n   \"this test\" should {\n      \"fail\" {\n         fail(\"boom\")\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Illustrating Focus Behavior in Nested Tests with Kotest FunSpec\nDESCRIPTION: This example demonstrates how focus works with nested tests in a FunSpec. When a parent test is focused, all its nested tests are executed, while other top-level tests and their nested tests are skipped.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/conditional/focus.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FocusExample : FunSpec({\n   context(\"test 1\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n   }\n\n   context(\"f:test 2\") {\n      // this will be executed\n      test(\"foo\") {\n         // this will be executed\n      }\n   }\n\n   context(\"test 3\") {\n      // this will be skipped\n      test(\"foo\") {\n         // this will be skipped\n      }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring failOnEmptyTestSuite in Kotest ProjectConfig\nDESCRIPTION: This snippet demonstrates how to enable the 'failOnEmptyTestSuite' option in Kotest's project configuration. When set to true, it causes the build to fail if a module has no tests executed, helping to catch scenarios where tests are being filtered out erroneously.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/fail_on_empty.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val failOnEmptyTestSuite = true\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting LocalDate Properties in Kotlin using Kotest\nDESCRIPTION: This snippet demonstrates various assertion methods for LocalDate objects in Kotlin using Kotest matchers. It includes checks for year, month, day, and comparisons between dates.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\ndate.shouldHaveSameMonthAs(otherDate)\ndate.shouldHaveSameDayAs(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeWithin(period, otherDate)\ndate.shouldBeWithin(duration, otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\ndate.shouldHaveDayOfYear(day)\ndate.shouldHaveDayOfMonth(day)\ndate.shouldHaveDayOfWeek(day)\ndate.shouldHaveHour(hour)\ndate.shouldHaveMinute(Minute)\ndate.shouldHaveSecond(second)\ndate.shouldHaveNano(nano)\n```\n\n----------------------------------------\n\nTITLE: Manipulating Time with TestDispatcher in Kotest\nDESCRIPTION: This example demonstrates how to use the testCoroutineScheduler to manipulate virtual time in a coroutine test. It shows launching a coroutine with a delay and then advancing the virtual time to complete the delay immediately.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.test.testCoroutineScheduler\n\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"advance time\").config(coroutineTestScope = true) {\n        val duration = 1.days\n        // launch a coroutine that would normally sleep for 1 day\n        launch {\n          delay(duration.inWholeMilliseconds)\n        }\n        // move the clock on and the delay in the above coroutine will finish immediately.\n        testCoroutineScheduler.advanceTimeBy(duration.inWholeMilliseconds)\n        val currentTime = testCoroutineScheduler.currentTime\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic in Kotest Tests\nDESCRIPTION: This snippet demonstrates how to use the retry function in a Kotest test. It shows a test that will retry a block of code up to 4 times within a 10-minute timeout period. The retry function is useful for handling flaky tests or operations that may occasionally fail.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/retry.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests: ShouldSpec() {\n  init {\n    should(\"retry up to 4 times\") {\n      retry(4, 10.minutes) {\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Max Discard Percentage in Kotest Property Tests\nDESCRIPTION: This snippet shows how to adjust the maximum discard percentage in Kotest property tests using PropTestConfig. It allows for a higher percentage of discarded values, which can be useful when filtering out a large portion of generated inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/assumptions.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<Int, Int>(PropTestConfig(maxDiscardPercentage = 55)) { a, b ->\n  withAssumptions(a % 2 == 0) {\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Data Testing in Kotest\nDESCRIPTION: Demonstrates how to implement nested data tests using withData blocks to test multiple services against multiple HTTP methods. The example shows how to create a cartesian product of test cases using two levels of nesting.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/nested.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ncontext(\"each service should support all http methods\") {\n\n  val services = listOf(\n    \"http://internal.foo\",\n    \"http://internal.bar\",\n    \"http://public.baz\",\n  )\n\n  val methods = listOf(\"GET\", \"POST\", \"PUT\")\n\n   withData(services) { service ->\n     withData(methods) { method ->\n       // test service against method\n     }\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Overall and Invocation Timeouts in Kotest\nDESCRIPTION: Example showing how to set both an overall test timeout and per-invocation timeouts. The test must complete all three invocations within 100ms total, with each individual invocation limited to 60ms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   describe(\"my test context\") {\n        it(\"run me three times\").config(timeout = 100.milliseconds, invocations = 3, invocationTimeout = 60.milliseconds) {\n            // this test will be invoked three times\n        }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using Testcontainers in Kotest Spec\nDESCRIPTION: Kotlin code example demonstrating how to use Testcontainers in a Kotest FunSpec. It shows how to create a Redis container, convert it to a TestListener, and register it with Kotest for lifecycle management.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/test_containers_46x.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.spec.style.FunSpec\nimport io.kotest.extensions.testcontainers.perTest\nimport org.testcontainers.containers.GenericContainer\n\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>(\"redis:5.0.3-alpine\")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test(\"some test which assume to have redis container running\") {\n      //\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Issue with Mock Reuse in Multiple Tests\nDESCRIPTION: Illustrates the problem of mock reuse when multiple tests use the same mock object, leading to unexpected verification failures.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/integrations/mocks.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n    test(\"Saves to repository as well\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Blocking and Non-Blocking Tests with Timeouts in Kotest\nDESCRIPTION: This code snippet demonstrates how to configure both blocking and non-blocking tests with timeouts in Kotest. It shows the usage of the 'blockingTest' flag for thread-blocking operations and how to set timeouts for both scenarios.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/timeouts/blocking_tests.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyBlockingTest : FunSpec() {\n  init {\n\n    test(\"interrupt me!\").config(blockingTest = true, timeout = 10.seconds) {\n       Thread.sleep(100000000)\n    }\n\n    test(\"uses suspension\").config(timeout = 10.seconds) {\n      delay(100000000)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Table Testing with forAll in Kotest\nDESCRIPTION: Demonstrates how to use the forAll function with row objects to test a square root function with multiple input combinations. The test verifies that multiplying a root by itself equals the expected square value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n\"square roots\" {\n  forAll(\n      row(2, 4),\n      row(3, 9),\n      row(4, 16),\n      row(5, 25)\n  ) { root, square ->\n    root * root shouldBe square\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Until Function with Fixed Interval in Kotest\nDESCRIPTION: This example demonstrates using the until function with a custom fixed interval of 250 milliseconds instead of the default 1-second interval, allowing for more frequent checking of the condition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/until.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n\n  private val broker = createBrokerClient()\n\n  init {\n    should(\"broker should receive a message\") {\n      sendMessage()\n      until(5.seconds, 250.milliseconds.fixed()) {\n        broker.poll().size > 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Generators in Kotest Property Tests\nDESCRIPTION: Demonstrates using custom integer range generators for age verification tests in different locations. Shows how to specify precise value ranges for property tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/proptest/test_functions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"is allowed to drink in Chicago\" {\n      forAll(Arb.int(21..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n   \"is allowed to drink in London\" {\n      forAll(Arb.int(18..150)) { a ->\n         isDrinkingAge(a) // assuming some function that calculates if we're old enough to drink\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution in Kotlin with Kotest\nDESCRIPTION: Demonstrates how to configure test execution parameters in Kotest using the config function. This example sets timeout, invocations, threads, and tags for a specific test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/index.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n  \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n    // test here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Testing with Kotest Project Config\nDESCRIPTION: This snippet shows how to set global property test configurations using Kotest's project configuration. It uses AbstractProjectConfig with the beforeProject hook to set the default iteration count before any tests run.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/globalconfig.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestConfig : AbstractProjectConfig() {\n   override suspend fun beforeProject() {\n      PropertyTesting.defaultIterationCount = 123\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eventually with Exception Suppression in Kotlin\nDESCRIPTION: Example showing how to specify which exceptions should be ignored during test attempts, allowing the test to continue retrying after expected exceptions while still failing on unexpected ones.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/concurrency/eventually.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 8000\n  suppressExceptions = setOf(UserNotFoundException::class)\n}) {\n  userRepository.getById(1).name shouldNotBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging for a Single Test in Kotlin\nDESCRIPTION: This snippet demonstrates how to enable coroutine debugging for a specific test using the 'coroutineDebugProbes' configuration option. It allows capturing and dumping information about coroutines launched within the test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n   init {\n      test(\"foo\").config(coroutineDebugProbes = true) {\n         someMethodThatLaunchesACoroutine() // launches a new coroutine\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using forNone for Table Tests in KotlinTest\nDESCRIPTION: Example of using the forNone function with table tests in KotlinTest, which verifies that a condition is false for all rows in the table. This complements the forAll function for table testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nval table = table(\n    headers(\"a\", \"b\"),\n    row(0L, 2L),\n    row(2L, 2L),\n    row(4L, 5L),\n    row(4L, 6L)\n)\n\nforNone(table) { a, b ->\n  3 shouldBe between(a, b)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Timeout in Kotest using ProjectConfig\nDESCRIPTION: Implementation of project-wide timeout configuration by extending AbstractProjectConfig class. Sets a maximum duration for all tests in the project, including setup and teardown phases. If tests exceed the specified duration, the build will fail.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/timeouts/project_timeout.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override val projectTimeout: Duration = 10.minutes\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Mockk Usage in Kotest\nDESCRIPTION: Simple example showing how to use Mockk mocking library in a Kotest FunSpec test class. Demonstrates basic mock creation, behavior stubbing, and verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/integrations/mocks.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    test(\"Saves to repository\") {\n        every { repository.save(any()) } just Runs\n        target.save(MyDataClass(\"a\"))\n        verify(exactly = 1) { repository.save(MyDataClass(\"a\")) }\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Elements with Kotest Inspectors in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the forAtLeast inspector to test that a list contains at least two elements with a length of 7 or more characters. It showcases the basic usage of Kotest inspectors for collection testing.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/inspectors.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval xs = listOf(\"sam\", \"gareth\", \"timothy\", \"muhammad\")\nxs.forAtLeast(2) {\n    it.shouldHaveMinLength(7)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in ExpectSpec with xcontext and xexpect\nDESCRIPTION: Demonstrates how to disable specific tests or test blocks in ExpectSpec using the xcontext and xexpect variants. This provides a quick way to exclude tests from execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"this outer block is enabled\") {\n        xexpect(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        expect(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Data-Driven Tests with Context in Kotest\nDESCRIPTION: Example showing how to implement data-driven tests within a context block using FunSpec and withData function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : FunSpec({\n  context(\"Pythag triples tests\") {\n    withData(\n      PythagTriple(3, 4, 5),\n      PythagTriple(6, 8, 10),\n      PythagTriple(8, 15, 17),\n      PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n      isPythagTriple(a, b, c) shouldBe true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Generic Contracts with Type Matchers\nDESCRIPTION: Example of using shouldBeTypeOf with generic contracts to smart cast instances after type checking. Demonstrates how the assertion allows for type-safe access to the object's properties after verification.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/blog/release_4.2.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval list: Any = arrayListOf(1, 2, 3)\nlist.shouldBeTypeOf<ArrayList<Int>>()\nlist[0] shouldBe 1 // can only work with a smart case\n```\n\n----------------------------------------\n\nTITLE: Testing Ktor HTTP Client Responses with Kotest Matchers\nDESCRIPTION: Shows how to use Kotest matchers with Ktor's HTTP client responses. The example demonstrates creating an HTTP client, making a POST request, and asserting on the response status and headers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/ktor.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = HttpClient(CIO)\nval response = client.post(\"http://mydomain.com/foo\")\nresponse.shouldHaveStatus(HttpStatusCode.OK)\nresponse.shouldHaveHeader(name = \"Authorization\", value = \"Bearer\")\n\n```\n\n----------------------------------------\n\nTITLE: Mocking Solution: Reset After Tests\nDESCRIPTION: Shows how to reset mocks after each test using Kotest's afterTest listener. This clears any interactions and expectations set during the test.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/integrations/mocks.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n    afterTest {\n        clearMocks(repository)\n    }\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Using checkAll Function for Property Testing in Kotlin\nDESCRIPTION: This snippet shows the equivalent test using checkAll instead of forAll. Instead of returning a boolean, it uses Kotest assertions. The test passes if no exceptions are thrown during the execution of the test block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/test_functions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample: StringSpec({\n   \"String size\" {\n      checkAll<String, String> { a, b ->\n         a + b shouldHaveLength a.length + b.length\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating JUnit-Style Tests with AnnotationSpec in Kotest\nDESCRIPTION: Demonstrates how to use AnnotationSpec for JUnit-style testing in Kotest with annotations like @BeforeEach and @Test. This spec allows for easy migration from JUnit tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/styles.md#2025-04-13_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nclass AnnotationSpecExample : AnnotationSpec() {\n\n    @BeforeEach\n    fun beforeTest() {\n        println(\"Before each test\")\n    }\n\n    @Test\n    fun test1() {\n        1 shouldBe 1\n    }\n\n    @Test\n    fun test2() {\n        3 shouldBe 3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Time with Test Coroutine Scheduler\nDESCRIPTION: Demonstrates how to use testCoroutineScheduler to control time in coroutine tests, including advancing time and checking current time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.core.test.testCoroutineScheduler\n\nclass TestDispatcherTest : FunSpec() {\n   init {\n      test(\"advance time\").config(coroutineTestScope = true) {\n        val duration = 1.days\n        // launch a coroutine that would normally sleep for 1 day\n        launch {\n          delay(duration.inWholeMilliseconds)\n        }\n        // move the clock on and the delay in the above coroutine will finish immediately.\n        testCoroutineScheduler.advanceTimeBy(duration.inWholeMilliseconds)\n        val currentTime = testCoroutineScheduler.currentTime\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Callbacks in Kotest Tests\nDESCRIPTION: Demonstrates how to use beforeEach and afterEach callbacks in Kotest tests. These callbacks are invoked before and after each test case, allowing for setup and teardown operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/writing_tests.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Callbacks : FunSpec({\n\n   beforeEach {\n      println(\"Hello from $it\")\n   }\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   afterEach {\n      println(\"Goodbye from $it\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Mocking Solution: Adjust Isolation Mode\nDESCRIPTION: Demonstrates how to change Kotest's isolation mode to InstancePerTest, which creates a new instance of the test class for each test, effectively isolating mocks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/integrations/mocks.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    isolationMode = IsolationMode.InstancePerTest\n\n})\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with Bang Prefix in KotlinTest StringSpec\nDESCRIPTION: Demonstrates how to skip tests in KotlinTest by prefixing test names with an exclamation mark (!). The prefix causes the test to be ignored during test execution while other tests run normally.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nclass BangExample : StringSpec({\n\n  \"!test 1\" {\n    // this will be ignored\n  }\n\n  \"test 2\" {\n    // this will run\n  }\n\n  \"test 3\" {\n    // this will run too\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing ExpectSpec in KotlinTest\nDESCRIPTION: Example of using the ExpectSpec testing style in KotlinTest, which allows organizing tests using 'context' and 'expect' keywords. This provides a BDD-style approach to test organization.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/changelog.md#2025-04-13_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ExpectSpecExample : ExpectSpec() {\n  init {\n    context(\"some context\") {\n      expect(\"some test\") {\n        // test here\n      }\n      context(\"nested context even\") {\n        expect(\"some test\") {\n          // test here\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating custom JSON comparison function with specific options\nDESCRIPTION: Example of defining custom comparison options and creating an extension function for JSON comparison with those options. This creates a lenient array order comparison.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/json/content.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval myOptions = compareJsonOptions {\n   typeCoercion = TypeCoercion.Enabled\n   arrayOrder = ArrayOrder.Lenient\n}\n\ninfix fun String.lenientShouldEqualJson(other: String) = this.shouldEqualJson(other, myOptions)\n\n\"[1, 2]\" lenientShouldEqualJson \"[2, 1]\" // This will pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Assertion Mode in Kotest Spec Class (Kotlin)\nDESCRIPTION: Example showing how to configure assertion mode in a Kotest spec class to detect tests that don't execute assertions. The example sets AssertionMode.Error which will fail tests that don't include assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/assertion_mode.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : FunSpec() {\n   init {\n      assertions = AssertionMode.Error\n      test(\"this test has no assertions\") {\n         val name = \"sam\"\n         name.length == 3 // this isn't actually testing anything\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Date Assertions in Kotest\nDESCRIPTION: Extension functions for asserting properties of Date objects. Includes methods for comparing dates, checking date components, and verifying temporal relationships between dates.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\ndate.shouldHaveSameYearAs(otherDate)\ndate.shouldHaveSameMonthAs(otherDate)\ndate.shouldHaveSameDayAs(otherDate)\ndate.shouldBeBefore(otherDate)\ndate.shouldBeAfter(otherDate)\ndate.shouldBeWithin(period, otherDate)\ndate.shouldBeWithin(duration, otherDate)\ndate.shouldBeBetween(firstDate, secondDate)\ndate.shouldHaveYear(year)\ndate.shouldHaveMonth(month)\n```\n\n----------------------------------------\n\nTITLE: Time Assertions in Kotest\nDESCRIPTION: Methods for comparing time components (hours, minutes, seconds, nanos) and relationships between time objects (before, after, between, approximate equality).\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/core.md#2025-04-13_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\ntime.shouldHaveSameHoursAs(otherTime)\ntime.shouldHaveSameMinutesAs(otherTime)\ntime.shouldHaveSameSecondsAs(otherTime)\ntime.shouldHaveSameNanosAs(otherTime)\ntime.shouldBeBefore(otherTime)\ntime.shouldBeAfter(otherTime)\ntime.shouldBeBetween(firstTime, secondTime)\ntime.shouldBe(otherTime plusOrMinus 1.minutes)\n```\n\n----------------------------------------\n\nTITLE: DateTime Generator Usage Reference\nDESCRIPTION: Code reference showing the available datetime generators with their parameters. Includes Arb.date for LocalDate generation, Arb.datetime for LocalDateTime generation with configurable ranges, and Arb.instant for Instant generation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/date_gens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.date(yearRange)\nArb.datetime(yearRange, hourRange, minuteRange, secondRage)\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Creating a Konform Validator for UserProfile in Kotlin\nDESCRIPTION: This snippet defines a Konform validator for the UserProfile class. It sets validation rules for the 'fullName' and 'age' properties, including length constraints and age range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/konform.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval validateUser = Validation<UserProfile> {\n  UserProfile::fullName {\n     minLength(4)\n     maxLength(100)\n  }\n\n  UserProfile::age ifPresent {\n     minimum(21)\n     maximum(99)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom TagExtension\nDESCRIPTION: Demonstrates how to create a custom TagExtension that dynamically determines which tags should be active based on environment variables.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/changelog.md#2025-04-13_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nobject Hadoop : Tag()\n\nobject HadoopTagExtension : TagExtension {\n  override fun tags(): Tags =\n      if (System.getenv().containsKey(\"HADOOP_HOME\")) Tags.include(Hadoop) else Tags.exclude(Hadoop)\n}\n\nobject MyProjectConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(HadoopTagExtension)\n}\n\nobject SimpleTest : StringSpec({\n  \"simple test\" {\n    // this test would only run on environments that have hadoop configured\n  }.config(tags = setOf(Hadoop))\n})\n```\n\n----------------------------------------\n\nTITLE: Eventually Testing with Exception Handling in Kotlin\nDESCRIPTION: Shows how to configure eventually to handle specific exceptions while testing. The example demonstrates ignoring UserNotFoundException while waiting for a repository query to succeed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"check if user repository has one row\") {\n      eventually(5.seconds, UserNotFoundException::class.java) {\n        userRepository.findBy(1) shouldNotBe null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Tests in Kotest\nDESCRIPTION: This snippet showcases Kotest's ability to generate tests dynamically at runtime. It demonstrates how to create multiple tests based on a list of items, highlighting Kotest's flexibility in test creation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/writing_tests.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n    listOf(\n      \"sam\",\n      \"pam\",\n      \"tim\",\n    ).forEach {\n       test(\"$it should be a three letter name\") {\n           it.shouldHaveLength(3)\n       }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Maven\nDESCRIPTION: This snippet demonstrates how to add the Kotest Testcontainers extension dependency to a Maven POM file. It specifies the group ID, artifact ID, version, and test scope.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/test_containers_46x.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using withAssumptions for Levenshtein Distance Test in Kotlin\nDESCRIPTION: Shows how to use the withAssumptions function to filter out equal strings in a property test, ensuring that the Levenshtein distance is only checked for non-equal strings.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/assumptions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String, String> { a, b ->\n  withAssumptions(a != b) {\n    levenshtein(a, b) shouldBeGreaterThan 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exhaustive Generator with Enum in Kotest Property Test\nDESCRIPTION: Demonstrates how to use an exhaustive generator with an enum class Season in a property test. The test will iterate through all enum values repeatedly to complete the requested number of iterations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/gens.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nenum class Season { Winter, Fall, Spring, Summer }\n\nforAll<Int, Season>(100) { a, season -> ... }\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in ExpectSpec with xcontext and xexpect\nDESCRIPTION: Shows how to disable specific tests or entire context blocks using the 'xcontext' and 'xexpect' variants in ExpectSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/styles.md#2025-04-13_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    context(\"this outer block is enabled\") {\n        xexpect(\"this test is disabled\") {\n            // test here\n        }\n    }\n    xcontext(\"this block is disabled\") {\n        expect(\"disabled by inheritance from the parent\") {\n            // test here\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Exact Exception Type with shouldThrowExactly\nDESCRIPTION: Demonstrates the use of shouldThrowExactly to test for a specific exception type without catching its parent exceptions. This is useful when you need to ensure exactly the specified exception type is thrown.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/exceptions.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrowExactly<FileNotFoundException> {\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: String Assertions in Kotlin using Kotest\nDESCRIPTION: Assertions for string content, case, length, and pattern matching in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nstr.shouldBeBlank()\nstr.shouldBeEmpty()\nstr.shouldBeLowerCase()\nstr.shouldBeUpperCase()\nstr.shouldContain(\"substr\")\nstr.shouldContain(regex)\nstr.shouldContainADigit()\nstr.shouldContainIgnoringCase(substring)\nstr.shouldContainOnlyDigits()\nstr.shouldBeInteger([radix])\nstr.shouldContainOnlyOnce(substring)\nstr.shouldEndWith(\"suffix\")\nstr.shouldHaveLength(length)\nstr.shouldHaveLineCount(count)\nstr.shouldHaveMaxLength(max)\nstr.shouldHaveMinLength(min)\nstr.shouldHaveSameLengthAs(anotherString)\nstr.shouldMatch(regex)\nstr.shouldStartWith(\"prefix\")\nstr.shouldBeEqualIgnoringCase(other)\nstr.shouldBeTruthy()\nstr.shouldBeFalsy()\n```\n\n----------------------------------------\n\nTITLE: Generating Long Values with Kotest Arbitrary and Exhaustive\nDESCRIPTION: This snippet shows methods for generating long values, including signed and unsigned longs, as well as long arrays.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/proptest/genslist.md#2025-04-13_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.long(min, max)\nArb.positiveLong(min, max)\nArb.negativeLong(min, max)\nArb.longArray(length, content)\nArb.uLong(min, max)\nArb.uLongArray(length, content)\nExhaustive.longs(range)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Cases with Parameters in Kotest\nDESCRIPTION: This example shows how to configure individual test cases with parameters such as invocations, threads, and timeout in Kotest using different spec styles.\nSOURCE: https://github.com/kotest/kotest/blob/master/doc/reference_3.1.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ShouldSpec() {\n  init {\n    should(\"return the length of the string\").config(invocations = 10, threads = 2) {\n      \"sammy\".length shouldBe 5\n      \"\".length shouldBe 0\n    }\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FunSpecTest : FunSpec() {\n  init {\n    test(\"FunSpec should support config syntax\").config(tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NoSystemOutListener in Kotest (Kotlin)\nDESCRIPTION: This snippet demonstrates how to use the NoSystemOutListener extension in Kotest. It throws an error if any output is written to standard out during test execution.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/extensions/examples.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTestSpec : DescribeSpec({\n\n    listener(NoSystemOutListener)\n\n    describe(\"All these tests should not write to standard out\") {\n        it(\"silence in the court\") {\n          println(\"boom\") // failure\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Pitest Extension Dependency in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to add the Kotest Pitest extension dependency to a Gradle project using Kotlin DSL. It includes the testImplementation configuration for the kotest-extensions-pitest module.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/pitest.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-extensions-pitest:<version>\")\n```\n\n----------------------------------------\n\nTITLE: IsolationMode Configuration\nDESCRIPTION: Shows how to configure IsolationMode to create new instance per test, providing another solution for mock isolation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/integrations/mocks.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    isolation = IsolationMode.InstancePerTest\n\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling BlockHound for a Specific Test Case\nDESCRIPTION: Demonstrates how to disable BlockHound for an individual test case by configuring the test with BlockHoundMode.DISABLED. This allows blocking operations to run without triggering BlockHound detection.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/extensions/blockhound.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"allow blocking\").config(extensions = listOf(BlockHound(BlockHoundMode.DISABLED))) {\n   blockInNonBlockingContext()\n}\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Callbacks in Kotest\nDESCRIPTION: Shows how to implement test lifecycle callbacks using beforeEach and afterEach hooks, including both inline and reusable callback implementations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/writing_tests.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Callbacks : FunSpec({\n\n   beforeEach {\n      println(\"Hello from $it\")\n   }\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   afterEach {\n      println(\"Goodbye from $it\")\n   }\n})\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval resetDatabase: BeforeTest = {\n  // truncate all tables here\n}\n\nclass ReusableCallbacks : FunSpec({\n\n   beforeTest(resetDatabase)\n\n   test(\"this test will have a sparkling clean database!\") {\n       // test logic here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Functions for Custom Matcher\nDESCRIPTION: Implementation of extension functions to provide a more fluent API for the custom matcher. Includes both positive and negative variants.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/custom.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldHaveLength(length: Int): String {\n  this should haveLength(length)\n  return this\n}\n\nfun String.shouldNotHaveLength(length: Int): String {\n  this shouldNot haveLength(length)\n  return this\n}\n```\n\n----------------------------------------\n\nTITLE: Custom ByteArray Matching with Resource in Kotest\nDESCRIPTION: These functions allow for custom matching logic when comparing a byte array to a binary resource file. They use a provided matcher function for more flexible comparisons.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/core.md#2025-04-13_snippet_31\n\nLANGUAGE: Kotlin\nCODE:\n```\nbyteArray.shouldMatchResource(\"/path/to/test_resource.bin\", ::providedMatcher)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nbyteArray.shouldNotMatchResource(\"/path/to/test_resource.bin\", ::providedMatcher)\n```\n\n----------------------------------------\n\nTITLE: Marking Tests with Tags in Kotest\nDESCRIPTION: Demonstrates how to apply tags to individual test cases using the config function in a StringSpec test class.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/tags.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.kotest.specs.StringSpec\n\nclass MyTest : StringSpec() {\n  init {\n    \"should run on Windows\".config(tags = setOf(Windows)) {\n      // ...\n    }\n\n    \"should run on Linux\".config(tags = setOf(Linux)) {\n      // ...\n    }\n\n    \"should run on Windows and Linux\".config(tags = setOf(Windows, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts in Kotest DescribeSpec\nDESCRIPTION: Demonstrates how to set a global timeout for all tests in a spec and override it for a specific test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.2.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : DescribeSpec({\n\n   timeout = 1000\n\n   describe(\"I will timeout in 1000 millis\") {\n      it(\"And so will I\") { }\n      it(\"But I'm a little faster\").config(timeout = 500.milliseconds) { }\n   }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Konform Validation Rules in Kotlin\nDESCRIPTION: Defines validation rules for UserProfile using Konform's DSL. Sets minimum and maximum length constraints for fullName, and age range constraints if age is present.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/konform.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval validateUser = Validation<UserProfile> {\n  UserProfile::fullName {\n     minLength(4)\n     maxLength(100)\n  }\n\n  UserProfile::age ifPresent {\n     minimum(21)\n     maximum(99)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Example in Kotlin\nDESCRIPTION: A simple assertion comparing a username to an expected value. This example demonstrates a basic use case where the error message might be sufficient without additional clues.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/clues.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nusername shouldBe \"sksamuel\"\n```\n\n----------------------------------------\n\nTITLE: Using asClue with Custom Objects for Detailed Assertion Context in Kotlin\nDESCRIPTION: Shows how to use 'asClue' extension function with a custom data class to provide detailed context for multiple assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/clues.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class HttpResponse(val status: Int, val body: String)\n\nval response = HttpResponse(404, \"the content\")\n\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe \"the content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Test Ordering in Kotest\nDESCRIPTION: Demonstrates how to configure sequential test ordering where tests are executed in the order they are defined in the spec file. Sequential ordering is the default behavior.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/test_ordering.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SequentialSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Sequential\n\n    init {\n      \"foo\" {\n        // I run first as I'm defined first\n      }\n\n      \"bar\" {\n        // I run second as I'm defined second\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Name Whitespace Handling in Kotest\nDESCRIPTION: Enables removal of extra whitespace from multi-line test names, making test output cleaner and more readable when test names span multiple lines.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/project_config.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nobject KotestProjectConfig : AbstractProjectConfig() {\n    override val testNameRemoveWhitespace = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Class for Pythagorean Triple Test Cases in Kotlin\nDESCRIPTION: A data class that holds the input values for testing Pythagorean triples. Each instance represents one test case with three integer values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/datatesting/data_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Enabling Coroutine Debugging for All Tests in a Spec in Kotlin\nDESCRIPTION: This snippet shows how to enable coroutine debugging for all tests within a spec by setting the 'coroutineDebugProbes' property in the spec's init block.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/coroutines/coroutine_debugging.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass CoroutineDebugging : FunSpec() {\n  init {\n\n    coroutineDebugProbes = true\n\n    test(\"foo\") {\n      // debugging enabled here\n    }\n\n    test(\"bar\") {\n      // debugging enabled here\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Table-Driven Tests\nDESCRIPTION: Demonstrates how to run assertions on all rows in the test data table. The test will execute all rows even if some fail, collecting all errors.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/table_driven_testing.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ntest(\"table-driven testing\") {\n    table.forAll { id, name, username ->\n      id shouldBeGreaterThan 0\n      username shouldNotBe \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Testing in StringSpec\nDESCRIPTION: Shows how to use table testing within StringSpec for testing string concatenation operations with multiple test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass StringSpecExample : StringSpec({\n  \"string concat\" {\n    forAll(\n      row(\"a\", \"b\", \"c\", \"abc\"),\n      row(\"hel\", \"lo wo\", \"rld\", \"hello world\"),\n      row(\"\", \"z\", \"\", \"z\")\n    ) { a, b, c, d ->\n      a + b + c shouldBe d\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Equivalent Static Tests in Kotest\nDESCRIPTION: Shows the static equivalent of the dynamic tests, demonstrating how dynamic test generation can reduce code duplication.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/writing_tests.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass DynamicTests : FunSpec({\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   test(\"pam should be a three letter name\") {\n      \"pam\".shouldHaveLength(3)\n   }\n\n   test(\"tim should be a three letter name\") {\n     \"tim\".shouldHaveLength(3)\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Wide Timeouts in Kotest\nDESCRIPTION: Example of setting project-wide test and invocation timeouts using the ProjectConfig object. These settings apply to all tests in the module unless overridden at the spec or test level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nobject ProjectConfig : AbstractProjectConfig {\n    override val timeout = 100.milliseconds\n    override val invocationTimeout = 33.milliseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Matchers in Kotest\nDESCRIPTION: JSON schema validation matcher that supports both String and kotlinx.serialization.JsonElement inputs for schema validation. Available for multiplatform projects.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/json/overview.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Matcher                                        | Description                                                                                                                                         | Targets       |\n|------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|:--------------||\n| [shouldMatchSchema](json-schema-matchers.html) | Validates that a `String` or `kotlinx.serialization.JsonElement` matches a `JsonSchema`. See description below for details on constructing schemas. | Multiplatform |\n```\n\n----------------------------------------\n\nTITLE: Smart Casting with Generic Contracts in Kotest Matchers\nDESCRIPTION: Demonstrates how shouldBeTypeOf can smart cast a value to a specific type, allowing for type-safe operations.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.2.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval list: Any = arrayListOf(1, 2, 3)\nlist.shouldBeTypeOf<ArrayList<Int>>()\nlist[0] shouldBe 1 // can only work with a smart case\n```\n\n----------------------------------------\n\nTITLE: Weighted Random Selection in Kotest\nDESCRIPTION: Generates values based on specified weights. For example, 'A' could be generated 33% of the time and 'B' 66% of the time.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/genslist.md#2025-04-13_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.choose(pairs)\nArb.frequency(list)\n```\n\n----------------------------------------\n\nTITLE: Positioning Listeners at End\nDESCRIPTION: Demonstrates improved code readability by placing test listeners at the end of the spec definition.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/integrations/mocks.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec({\n\n    val repository = mockk<MyRepository>()\n    val target = MyService(repository)\n\n\n    test(\"Saves to repository\") {\n        // ...\n    }\n\n    test(\"Saves to repository as well\") {\n        // ...\n    }\n\n    afterTest {\n        clearMocks(repository)  // <---- End of file, better readability\n    }\n\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Execution to a Kotest Spec\nDESCRIPTION: Demonstrates how to use the EnabledIf annotation with a custom EnabledCondition to conditionally execute a test spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.3.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(EnabledIfMidnight::class)\nclass EnabledIfTest : FunSpec() {\n   init {\n      test(\"tis midnight when the witches roam free\") {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties in Kotest Test\nDESCRIPTION: Shows how to access a property set in kotest.properties file within a Kotest test using DescribeSpec. It verifies that the property 'foo' is set to 'bar'.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/intellij/props.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FooTest : DescribeSpec() {\n  init {\n    describe(\"after adding kotest.properties\") {\n      it(\"foo should be set\") {\n         System.getProperty(\"foo\") shouldBe \"bar\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Extension Function for Person Validation in Kotlin using Kotest\nDESCRIPTION: This snippet shows how to create an extension function for the Person class to use the composed person matcher, allowing for more readable test assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/composed_matchers.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Person.shouldBePerson(name: String, age: Int) = this shouldBe personMatcher(name, age)\n```\n\n----------------------------------------\n\nTITLE: Adding Jacoco Plugin in Gradle (Kotlin)\nDESCRIPTION: This snippet shows how to add the Jacoco plugin to the Gradle build file. It's the first step in setting up Jacoco for code coverage.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/integrations/jacoco.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n   ...\n   jacoco\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Exception Throwing in Kotlin with Kotest\nDESCRIPTION: Shows how to test if a specific exception type is thrown using shouldThrow function. This basic example demonstrates exception type checking without capturing the exception instance.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/exceptions.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nshouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Konform Validation in Kotlin\nDESCRIPTION: Creates a data class UserProfile with two fields: fullName as String and age as nullable Int. This class serves as the model for validation examples.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/konform.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class UserProfile(\n   val fullName: String,\n   val age: Int?\n)\n```\n\n----------------------------------------\n\nTITLE: Using Percentage-Based plusOrMinus Matcher for Doubles in Kotest\nDESCRIPTION: This code showcases a new overload for Double.plusOrMinus that accepts a percentage value instead of an absolute one, allowing for percentage-based tolerance in equality assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n1.0.plusOrMinus(10.percent)\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests in Gradle Build Script\nDESCRIPTION: Example of configuring test filtering in a Gradle build script to include all tests from a specific package. This approach uses Gradle's built-in test filtering mechanism.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/conditional/gradle.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntasks.test {\n    filter {\n        //include all tests from package\n        includeTestsMatching(\"com.somepackage.*\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fibonacci Backoff for Eventually Interval in Kotlin\nDESCRIPTION: Example showing how to use a fibonacci sequence for gradually increasing intervals between test attempts instead of fixed intervals.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  duration = 5.seconds\n  intervalFn = 100.milliseconds.fibonacci()\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Locale and Timezone\nDESCRIPTION: Using withDefaultLocale and withDefaultTimeZone extension functions to temporarily change the JVM's default locale and timezone.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nwithDefaultLocale(Locale.FRANCE) {\n  println(\"My locale is now France! Très bien!\")\n}\n\nwithDefaultTimeZone(TimeZone.getTimeZone(ZoneId.of(\"America/Sao_Paulo\"))) {\n  println(\"My timezone is now America/Sao_Paulo! Muito bem!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Failed Assertion Error Message\nDESCRIPTION: An example of what the error output looks like when a basic assertion fails, showing the expected and actual values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/clues.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nexpected: \"sksamuel\" but was: \"sam@myemailaddress.com\"\n```\n\n----------------------------------------\n\nTITLE: Property Testing with Kotest\nDESCRIPTION: Illustrates a simple property test using Kotest's checkAll function, demonstrating how the framework tests properties across multiple generated inputs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.1.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<String> { a ->\n  a shouldBe a.reversed()\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Combined Person Matcher\nDESCRIPTION: Combines individual property matchers into a single Person matcher using Matcher.compose, mapping each matcher to its corresponding property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/data_class_matchers.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun personMatcher(name: String, age: Int) = Matcher.compose(\n  nameMatcher(name) to Person::name,\n  ageMatcher(age) to Person::age,\n  addressMatcher to Person::address\n)\n```\n\n----------------------------------------\n\nTITLE: System Environment Test Listeners Implementation\nDESCRIPTION: Shows how to implement system environment listeners at both spec and project levels for broader scope environment variable control.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/extensions/system.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemEnvironmentTestListener(\"foo\", \"bar\"))\n\n    init {\n      \"MyTest\" {\n        System.getenv(\"foo\") shouldBe \"bar\"\n      }\n    }\n\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n    override fun listeners(): List<TestListener> = listOf(SystemEnvironmentProjectListener(\"foo\", \"bar\"))\n\n}\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Callbacks in Kotest\nDESCRIPTION: Shows how to use beforeEach and afterEach lifecycle callbacks to execute code before and after each test case.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/writing_tests.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass Callbacks : FunSpec({\n\n   beforeEach {\n      println(\"Hello from $it\")\n   }\n\n   test(\"sam should be a three letter name\") {\n      \"sam\".shouldHaveLength(3)\n   }\n\n   afterEach {\n      println(\"Goodbye from $it\")\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting File Properties in Kotlin with Kotest\nDESCRIPTION: These assertions check various properties and characteristics of files and directories. They cover aspects such as file type, permissions, size, content, and path properties.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeAbsolute()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeADirectory()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeAFile()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeCanonical()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeEmpty()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeExecutable()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeHidden()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeReadable()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeRelative()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeSmaller(file)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeLarger(file)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeWriteable()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndir.shouldBeNonEmptyDirectory()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndir.shouldContainFile(name)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndir.shouldContainNFiles(name)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldExist()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldHaveExtension(ext)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldHaveFileSize(size)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldHaveName(name)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldHavePath(path)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldStartWithPath(prefix)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndir.shouldContainFileDeep(name)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\ndir.shouldContainFiles(name1, name2, ..., nameN)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldBeSymbolicLink()\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nfile.shouldHaveParent(name)\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Properties with shouldThrow\nDESCRIPTION: Shows how to capture and verify properties of a thrown exception. The example demonstrates checking the exception message using assertion functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/exceptions.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Asserting Future Properties in Kotlin with Kotest\nDESCRIPTION: This snippet shows assertion functions for Futures in Kotest. It includes checks for future cancellation, completion, and exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/core.md#2025-04-13_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nfuture.shouldBeCancelled()\nfuture.shouldBeCompleted()\nfuture.shouldBeCompletedExceptionally()\nfuture.shouldCompleteExceptionallyWith(throwable)\n```\n\n----------------------------------------\n\nTITLE: Implementing MatcherResult Interface in Kotlin\nDESCRIPTION: This code defines the MatcherResult interface, which includes methods for determining if a test passed and providing failure messages.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/custom.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ninterface MatcherResult {\n  fun passed(): Boolean\n  fun failureMessage(): String\n  fun negatedFailureMessage(): String\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unprintable Characters in Property Tests\nDESCRIPTION: Example of configuring PropTestConfig to handle unprintable characters in test failure messages by displaying them as Unicode code points.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/config.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass PropertyExample : StringSpec({\n    \"handle unprintable characters in failure messages\" {\n        forAll<String>(\n            PropTestConfig(outputHexForUnprintableChars = true)\n        ) { str ->\n            // some assertion\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for JUnit Platform with Groovy\nDESCRIPTION: Enables the JUnit Platform for Kotest in Gradle using Groovy syntax. This configuration is necessary for running Kotest tests with Gradle 4.6 and higher on the JVM.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/quick_start.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: ExpectSpec Example in KotlinTest\nDESCRIPTION: Demonstrates the usage of ExpectSpec which allows using context and expect keywords to structure tests hierarchically.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/changelog.md#2025-04-13_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ExpectSpecExample : ExpectSpec() {\n  init {\n    context(\"some context\") {\n      expect(\"some test\") {\n        // test here\n      }\n      context(\"nested context even\") {\n        expect(\"some test\") {\n          // test here\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexicographic Test Ordering in Kotest\nDESCRIPTION: Illustrates how to configure tests to run in lexicographic (alphabetical) order by overriding testCaseOrder() to return TestCaseOrder.Lexicographic.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/test_ordering.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LexicographicSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Lexicographic\n\n    init {\n      \"foo\" {\n        // I run second as bar < foo\n      }\n\n      \"bar\" {\n        // I run first as bar < foo\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Output Example in Table Testing\nDESCRIPTION: Shows how Kotest displays error messages when a table test fails, matching input values to parameter names.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/datatesting/data_driven_testing_4.2.0.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTest failed for (root, 5), (square, 55) with error expected: 55 but was: 25\n```\n\n----------------------------------------\n\nTITLE: Time Assertions in Kotest\nDESCRIPTION: Methods for asserting temporal relationships between Instant and Timestamp objects including before/after comparisons and range checks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\ninstant.shouldBeBefore(anotherInstant)\ninstant.shouldBeBetween(fromInstant, toInstant)\ninstant.shouldBeCloseTo(anotherInstant, duration)\n```\n\n----------------------------------------\n\nTITLE: Using Kotlinx Datetime Generators in Kotest Property Tests\nDESCRIPTION: Shows how to use the new kotlinx datetime generators in Kotest property tests, available for JVM and JS.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/blog/release_4.3.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nforAll(Arb.datetime(1987..1994)) { date ->\n   isValidStarTrekTngSeason(date) shouldBe true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Discard Percentage in Kotlin Property Tests\nDESCRIPTION: Shows how to increase the allowed discard rate in a property test using the maxDiscardPercentage parameter in PropTestConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/assumptions.md#2025-04-13_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll<Int, Int>(PropTestConfig(maxDiscardPercentage = 55)) { a, b ->\n  withAssumptions(a % 2 == 0) {\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Test Execution with EnabledIf Annotation\nDESCRIPTION: Example of using the EnabledIf annotation with a custom condition to control test execution based on time of day.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/blog/release_4.3.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EnabledIfMidnight : EnabledCondition {\n   override fun enabled(specKlass: KClass<out Spec>): Boolean = LocalTime.now().hour == 0\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n@EnabledIf(EnabledIfMidnight::class)\nclass EnabledIfTest : FunSpec() {\n   init {\n      test(\"tis midnight when the witches roam free\") {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TestDispatcher for All Tests in a Spec\nDESCRIPTION: Shows how to configure TestDispatcher at the spec level to apply to all tests within that spec\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TestDispatcherTest : FunSpec() {\n   init {\n      coroutineTestScope = true\n      test(\"this test uses a test dispatcher\") {\n      }\n      test(\"and so does this test!\") {\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Assertions in Kotest\nDESCRIPTION: Assertion methods for testing Kotlin channels including receive operations, size checks, and state validation.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nchannel.shouldReceiveWithin(duration)\nchannel.shouldReceiveNoElementsWithin(duration)\nchannel.shouldHaveSize(n)\nchannel.shouldReceiveAtLeast(n)\nchannel.shouldReceiveAtMost(n)\nchannel.shouldBeClosed()\nchannel.shouldBeOpen()\nchannel.shouldBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Setting Spec-Level Timeout in Kotest FunSpec\nDESCRIPTION: Demonstrates how to apply a timeout to all tests within a spec by setting the timeout property at the spec level.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n\n   timeout = 100.milliseconds\n\n   test(\"this test will timeout quickly!\") {\n      // test here\n   }\n\n   test(\"so will this one!\") {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: ExpectSpec Example Implementation\nDESCRIPTION: Demonstrates using ExpectSpec to structure tests using context and expect keywords for nested test organization\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ExpectSpecExample : ExpectSpec() {\n  init {\n    context(\"some context\") {\n      expect(\"some test\") {\n        // test here\n      }\n      context(\"nested context even\") {\n        expect(\"some test\") {\n          // test here\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tests with Command-line Filtering\nDESCRIPTION: These examples show how to use the Gradle command-line option --tests to filter tests based on package or test name patterns.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/conditional/gradle.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngradle test --tests 'com.sksamuel.somepackage*'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngradle test --tests '*IntegrationTest'\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Structure Example\nDESCRIPTION: Example of two JSON structures that would be considered equal by the shouldEqualJson matcher despite different formatting and key order.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/json/content.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"sam\",\n   \"location\": \"chicago\",\n   \"age\" : 41\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\" : 41, \"name\": \"sam\", \"location\": \"chicago\" }\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Validation Case\nDESCRIPTION: Example of testing an invalid UserProfile instance and asserting specific validation error messages using Kotest matchers.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/konform.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval bob = UserProfile(\"bob\", 18)\nvalidateUser.shouldBeInvalid(a) {\n  it.shouldContainError(UserProfile::fullName, \"must have at least 4 characters\")\n  it.shouldContainError(UserProfile::age, \"must be at least '21'\")\n}\n```\n\n----------------------------------------\n\nTITLE: FlatMapping Kotest Arb Values\nDESCRIPTION: Shows how to create dependent arbitraries where one generator depends on the output of another using flatMap.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/proptest/genops.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval dependentArbs: Arb<String> = Arb.of(\"foo\", \"bar\").flatMap { prefix ->\n   Arb.int(1..10).map { integer ->\n      \"${prefix}-${integer}\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Result Type Assertions\nDESCRIPTION: Methods for testing Result objects including success and failure states with their associated values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/core.md#2025-04-13_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nresult.shouldBeSuccess()\nresult.shouldBeSuccess(value)\nresult.shouldBeSuccess(block)\nresult.shouldBeFailure()\nresult.shouldBeFailureOfType<Type : Throwable>()\nresult.shouldBeFailure(block)\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Konform Validation\nDESCRIPTION: Example data class definition representing a UserProfile with name and age fields that will be validated using Konform.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/konform.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class UserProfile(\n   val fullName: String,\n   val age: Int?\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout with Test Config in Kotest\nDESCRIPTION: This snippet demonstrates how to set a test timeout for a specific test using the config method in Kotest's FunSpec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/timeouts/test_timeouts.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n   test(\"this test will timeout quickly!\").config(timeout = 100.milliseconds) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matchers\nDESCRIPTION: Example usage of the custom string length matcher using both the direct matcher syntax and extension function syntax.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/assertions/custom.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should haveLength(9)\n\"hello bar\" shouldNot haveLength(3)\n\n\"hello foo\".shouldHaveLength(9)\n\"hello bar\".shouldNotHaveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Implementing ShouldThrowWithMessage in Kotest\nDESCRIPTION: Implements a new assertion ShouldThrowWithMessage. This allows for more specific exception assertions, checking both the exception type and its message.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/changelog.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nImplement ShouldThrowWithMessage (#2847)\n```\n\n----------------------------------------\n\nTITLE: Basic ExpectSpec Implementation in Kotlin\nDESCRIPTION: Shows the basic structure of a test using ExpectSpec style, which uses the 'expect' keyword for defining test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/framework/styles.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    expect(\"my test\") {\n        // test here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution\nDESCRIPTION: Demonstrates how to configure test execution parameters including timeout, invocations, threads, and tags.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/index.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec({\n  \"should use config\".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n    // test here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic ExpectSpec Implementation in Kotlin\nDESCRIPTION: Shows the basic structure of a test using ExpectSpec style, which uses the 'expect' keyword for defining test cases.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/styles.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : ExpectSpec({\n    expect(\"my test\") {\n        // test here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Deprecated Default Test Case Config in Kotlin\nDESCRIPTION: Shows the deprecated way of setting default test case configuration in a Kotest spec.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_5.0.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec: FunSpec() {\n  init {\n    override fun defaultTestCaseConfig() = TestCaseConfig(tags = setOf(Foo, Bar), timeout = 100.seconds)\n    test(\"foo\") {\n      // will time out after 100 seconds and has tags Foo and Bar applied\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Regex Matchers in Kotlin\nDESCRIPTION: Matchers for comparing regular expressions, their patterns, and regex options. These allow verification of regex equality, pattern matching, and option inclusion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldBeRegex(anotherRegex)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldHavePattern(regexPattern)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldHaveExactRegexOptions(regexOptions)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldIncludeRegexOption(regexOption)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nregex.shouldIncludeRegexOptions(regexOptions)\n```\n\n----------------------------------------\n\nTITLE: Using System Environment Listener at Project Level\nDESCRIPTION: Setting up a project-wide SystemEnvironmentProjectListener to override environment variables for all tests in the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/system.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n\n    override fun listeners(): List<TestListener> = listOf(SystemEnvironmentProjectListener(\"foo\", \"bar\"))\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test-Level Timeout in Kotest FunSpec\nDESCRIPTION: Shows how to set a timeout for a single test using test config with a duration of 100 milliseconds\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/timeouts/test_timeouts.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass TimeoutTest : FunSpec({\n   test(\"this test will timeout quickly!\").config(timeout = 100.milliseconds) {\n      // test here\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Arb Generators in Kotlin using Kotest\nDESCRIPTION: Generates values by pulling a value from each of the given Arbs and passing those values to a supplied function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.bind(arbA, ...., fn)\n```\n\n----------------------------------------\n\nTITLE: Using Generic Contracts in Kotest Matchers\nDESCRIPTION: Illustrates how generic contracts in Kotest matchers allow for smart casting of types after assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/blog/release_4.2.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval list: Any = arrayListOf(1, 2, 3)\nlist.shouldBeTypeOf<ArrayList<Int>>()\nlist[0] shouldBe 1 // can only work with a smart case\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Statistics Reporter in Kotest\nDESCRIPTION: Shows how to configure a custom StatisticsReporter in Kotest to customize the format of statistics reports or generate custom reports from raw data.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/statistics.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nobject MyStatisticsReporter : object : StatisticsReporter { ... }\nPropertyTesting.statisticsReporter = MyStatisticsReporter\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jacoco XML Report Task\nDESCRIPTION: Configures the Jacoco test report task to generate XML reports and depend on the test task.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/integrations/jacoco.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.jacocoTestReport {\n    dependsOn(tasks.test)\n    reports {\n        xml.isEnabled = true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin JS with Kotest\nDESCRIPTION: Kotlin multiplatform configuration for JavaScript targets with Kotest engine dependency\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/framework/setup.mdx#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n  targets {\n    js(IR) { // LEGACY or BOTH are unsupported\n      browser() // to compile for the web\n      nodejs() // to compile against node\n    }\n  }\n\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation(\"io.kotest:kotest-framework-engine:$version\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Functions for Custom Matcher in Kotlin\nDESCRIPTION: Defining extension functions to improve the usage syntax of the custom string length matcher in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/custom.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nfun String.shouldHaveLength(length: Int): String {\n  this should haveLength(length)\n  return this\n}\n\nfun String.shouldNotHaveLength(length: Int): String {\n  this shouldNot haveLength(length)\n  return this\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Database with Multiple Scripts\nDESCRIPTION: Example of initializing a database container with multiple SQL scripts or changesets using the dbInitScripts property.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/extensions/test_containers.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval ds: DataSource = install(JdbcDatabaseContainerExtension(mysql)) {\n      maximumPoolSize = 8\n      minimumIdle = 4\n      dbInitScripts = listOf(\"/init.sql\", \"/sql-changesets\")\n   }\n```\n\n----------------------------------------\n\nTITLE: Setting Global Config Using Project Configuration\nDESCRIPTION: Shows how to set global property test configuration using Kotest's project configuration class before tests are executed.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/globalconfig.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass KotestConfig : AbstractProjectConfig() {\n   override suspend fun beforeProject() {\n      PropertyTesting.defaultIterationCount = 123\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle to Support Tags with System Properties (Groovy)\nDESCRIPTION: Gradle configuration in Groovy to propagate system properties to test executors, required for tag functionality.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/tags.md#2025-04-13_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n    //... Other configurations ...\n    systemProperties = System.properties\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout Configuration in WordSpec\nDESCRIPTION: Demonstrates how to set a timeout duration for a test case using WordSpec style.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_case_config.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTests : WordSpec() {\n  init {\n    \"String.length\" should {\n      \"return the length of the string\".config(timeout = 2.seconds) {\n        \"sammy\".length shouldBe 5\n        \"\".length shouldBe 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Field Comparison Functions in Kotlin\nDESCRIPTION: Functions for comparing objects based on specific fields, allowing selective field comparison and field exclusion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/assertions/core.md#2025-04-13_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nany.shouldBeEqualToUsingFields(other: T, vararg properties: KProperty<*>)\nany.shouldBeEqualToIgnoringFields(other: T, vararg properties: KProperty<*>)\n```\n\n----------------------------------------\n\nTITLE: Conditional Statistics Collection in Kotest\nDESCRIPTION: Shows how to collect statistics with conditional logic to categorize integer values as even or odd.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/proptest/statistics.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncheckAll(Arb.int()) { k ->\n  when {\n    k % 2 == 0 -> collect(\"EVEN\")\n    else -> collect(\"ODD\")\n  }\n  // test here\n}\n```\n\n----------------------------------------\n\nTITLE: Database Initialization with Single Script\nDESCRIPTION: Example of initializing a database container with a single SQL script.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/extensions/test_containers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n         withInitScript(\"init.sql\")\n         startupAttempts = 1\n         withUrlParam(\"connectionTimeZone\", \"Z\")\n         withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Jacoco Settings\nDESCRIPTION: Configures Jacoco tool version and optional custom report directory location in Gradle.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/integrations/jacoco.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\njacoco {\n    toolVersion = \"0.8.7\"\n    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Matcher with Should Functions\nDESCRIPTION: Example usage of the custom length matcher with Kotest's should and shouldNot functions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/custom.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n\"hello foo\" should haveLength(9)\n\"hello bar\" shouldNot haveLength(3)\n```\n\n----------------------------------------\n\nTITLE: Comparable Matchers in Kotlin with Kotest\nDESCRIPTION: Illustrates matchers for comparing objects using compareTo and custom comparators in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/core.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ncomp.shouldBeLessThan(other)\ncomp.shouldBeLessThanOrEqualTo(other)\ncomp.shouldBeEqualComparingTo(other)\ncomp.shouldBeEqualComparingTo(other, comparator)\ncomp.shouldBeGreaterThan(other)\ncomp.shouldBeGreaterThanOrEqualTo(other)\n```\n\n----------------------------------------\n\nTITLE: Eventually with Retries and Exception Suppression\nDESCRIPTION: Shows how to configure eventually with retry count and specific exception handling.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/concurrency/eventually.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 8000\n  retries = 10\n  suppressExceptions = setOf(UserNotFoundException::class)\n}) {\n  userRepository.getById(1).name shouldNotBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Matchers in Kotest\nDESCRIPTION: Demonstrates the new ability to chain multiple matchers in Kotest for more concise assertions.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.3.md#2025-04-13_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval employees: List<Employee> = ...\nemployees.shouldBeSorted()\n          shouldHaveSize(4)\n          shouldContain(Employee(\"Sam\", \"Chicago\"))\n```\n\n----------------------------------------\n\nTITLE: Date and Time Generation in Kotest\nDESCRIPTION: Generation of various date and time types including LocalDate, LocalDateTime, and Instant with configurable ranges.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/genslist.md#2025-04-13_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.localDateTime(ranges)\nArb.localDate(ranges)\nArb.instant(range)\n```\n\n----------------------------------------\n\nTITLE: Instant Matchers in Kotest\nDESCRIPTION: Assertion matchers for Instant type that provide temporal comparison capabilities between different Instant instances.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/kotlinx-datetime.md#2025-04-13_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\ninstant.shouldBeAfter(anotherInstant)\ninstant.shouldBeBefore(anotherInstant)\ninstant.shouldBeBetween(fromInstant, toInstant)\n```\n\n----------------------------------------\n\nTITLE: Mockk Verification Incompatibility Example in Kotlin\nDESCRIPTION: Shows how external library assertions like Mockk verifications can break soft assertion flow.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/assertions/soft_assertions.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nassertSoftly {\n  verify(exactly = 1) { myClass.myMethod(any()) }\n  foo shouldBe bar\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eventually Function with Block in Kotlin\nDESCRIPTION: Shows how to use the 'eventually' function with a configuration block for more advanced options.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/framework/concurrency/eventually.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5000\n  interval = 1000.fixed()\n}) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-line Test Names in Kotest\nDESCRIPTION: Demonstrates how to define test names that span multiple lines in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/blog/release_4.3.md#2025-04-13_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MySpec : StringSpec() {\n  init {\n   \"\"\"this is a\n      test spanning multiple lines\"\"\" { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Collection Content in Kotest\nDESCRIPTION: Asserts that a collection contains specific elements, with various options for checking order and completeness.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/collections.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContain(element)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainAll(e1, e2, ..., en)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainDuplicates()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainExactly()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainExactlyInAnyOrder()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ncollection.shouldContainAllInAnyOrder()\n```\n\n----------------------------------------\n\nTITLE: JSON Structure Example - Formatted\nDESCRIPTION: Example of a formatted JSON object with multiple properties demonstrating how JSON equality matching works regardless of formatting.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/json/content.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"sam\",\n   \"location\": \"chicago\",\n   \"age\" : 41\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class for Pythagorean Triple Tests in Kotlin\nDESCRIPTION: Creates a data class to represent a set of inputs for Pythagorean triple tests.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/blog/release_4.3.md#2025-04-13_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class PythagTriple(val a: Int, val b: Int, val c: Int)\n```\n\n----------------------------------------\n\nTITLE: Cutting New Documentation Version in Bash\nDESCRIPTION: Shell command for automating the documentation version cutting process. This script handles steps 1-4 in the documentation release process.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./cut-docs.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Dispatcher Globally in ProjectConfig\nDESCRIPTION: Demonstrates how to enable TestDispatcher globally for all tests in a module using ProjectConfig.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/framework/coroutines/test_coroutine_dispatcher.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass ProjectConfig : AbstractProjectConfig() {\n  override var testCoroutineDispatcher = true\n}\n```\n\n----------------------------------------\n\nTITLE: Assertion Mode Error Output\nDESCRIPTION: Shows the console output when a test fails due to having no assertions when assertion mode is enabled.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2.x/assertions/assertion_mode.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTest 'this test has no assertions' did not invoke any assertions\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Task Dependencies\nDESCRIPTION: Modifies the test task to ensure Jacoco report generation runs after test execution completion.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/integrations/jacoco.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ntasks.test {\n  ...\n  finalizedBy(tasks.jacocoTestReport)\n}\n```\n\n----------------------------------------\n\nTITLE: Matcher Extension Functions\nDESCRIPTION: Examples of using matchers as extension functions instead of infix notation for improved IDE discovery.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/docs/changelog.md#2025-04-13_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nfile should exist()\n\nlistOf(1, 2) should containNull()\n\nfile.shouldExist()\n\nlistOf(1, 2).shouldContainNull()\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Platform for Gradle (Groovy)\nDESCRIPTION: Enables JUnit Platform for Gradle using Groovy syntax by adding useJUnitPlatform() to test tasks.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/framework/setup.mdx#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntest {\n   useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Initialization Script\nDESCRIPTION: Example of configuring an initialization script for a database container.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/extensions/test_containers.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval mysql = MySQLContainer<Nothing>(\"mysql:8.0.26\").apply {\n         withInitScript(\"init.sql\")\n         startupAttempts = 1\n         withUrlParam(\"connectionTimeZone\", \"Z\")\n         withUrlParam(\"zeroDateTimeBehavior\", \"convertToNull\")\n      }\n```\n\n----------------------------------------\n\nTITLE: Setting Test Case Severity in Kotest\nDESCRIPTION: Shows how to assign a severity level to a test case in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/blog/release_4.3.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec() {\n   init {\n      test(\"very very important\").config(severity = TestCaseSeverityLevel.CRITICAL) {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Test Case Severity in Kotest\nDESCRIPTION: Shows how to assign a severity level to a test case in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/blog/release_4.3.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest : FunSpec() {\n   init {\n      test(\"very very important\").config(severity = TestCaseSeverityLevel.CRITICAL) {\n        // test here\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Value Generation with Kotest in Kotlin\nDESCRIPTION: Method for creating an arbitrary that always returns the same constant value.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.constant(t)\n```\n\n----------------------------------------\n\nTITLE: Eventually with Initial Delay\nDESCRIPTION: Demonstrates using eventually with an initial delay before the first test iteration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/concurrency/eventually.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\neventually({\n  duration = 5000\n  initialDelay = 1000\n}) {\n  userRepository.getById(1).name shouldBe \"bob\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kotest Compiler Matchers Dependency\nDESCRIPTION: Gradle dependency configuration required to add the kotest-assertions-compiler extension to a project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/assertions/compiler.md#2025-04-13_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestImplementation(\"io.kotest.extensions:kotest-assertions-compiler:${version}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Testcontainers Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding Kotest Testcontainers integration to the project.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/extensions/test_containers_46x.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.kotest.extensions</groupId>\n    <artifactId>kotest-extensions-testcontainers</artifactId>\n    <version>${kotest.version}</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Duration Arbitraries in Kotest\nDESCRIPTION: Function to generate random duration values within a specified range, compatible across platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.6.x/proptest/genslist.md#2025-04-13_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nArb.duration(ranges)\n```\n\n----------------------------------------\n\nTITLE: Adding Kotest Multiplatform Plugin\nDESCRIPTION: Adds the Kotest Multiplatform Gradle plugin to enable testing across different platforms.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/quick_start.mdx#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"io.kotest.multiplatform\") version \"5.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Jacoco Plugin in Gradle\nDESCRIPTION: Adds the Jacoco plugin to the Gradle build configuration for enabling code coverage analysis.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/framework/integrations/jacoco.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n   ...\n   jacoco\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Command Line Test Filtering by Package\nDESCRIPTION: Example of filtering tests by package name using Gradle's command line --tests option.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/framework/conditional/gradle.md#2025-04-13_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ngradle test --tests 'com.sksamuel.somepackage*'\n```\n\n----------------------------------------\n\nTITLE: Testing Valid Validation Case\nDESCRIPTION: Example of testing a valid UserProfile instance using Kotest's shouldBeValid matcher.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/assertions/konform.md#2025-04-13_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval alice = UserProfile(\"Alice\", 25)\nvalidateUser shouldBeValid user1\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Example in Kotlin\nDESCRIPTION: A simple Kotest assertion example showing a comparison between expected and actual values.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3.x/assertions/clues.md#2025-04-13_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nusername shouldBe \"sksamuel\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Elements from Collections in Kotest\nDESCRIPTION: Randomly selects an element from a given collection or varargs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.7.x/proptest/genslist.md#2025-04-13_snippet_26\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.element(collection)\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Elements from Varargs in Kotlin using Kotest\nDESCRIPTION: Randomly selects one of the elements from the provided varargs.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.element(vararg T)\n```\n\n----------------------------------------\n\nTITLE: Generating Eval Instances in Kotest with Arrow\nDESCRIPTION: Example of generating Eval instances using Arrow generators in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/proptest/arrow.md#2025-04-13_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nArb<A>.evalNow()\n```\n\n----------------------------------------\n\nTITLE: Initial Delay Configuration in Kotlin\nDESCRIPTION: Adding initial delay before first test iteration.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.8.x/assertions/eventually.md#2025-04-13_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval config = eventuallyConfig {\n  initialDelay = 1.seconds\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Extensions Documentation\nDESCRIPTION: Simple markdown link redirecting users to the extensions documentation page.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5.x/framework/listeners.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[extensions](./extensions/extensions.md)\n```\n\n----------------------------------------\n\nTITLE: Iterator Assertions in Kotlin using Kotest\nDESCRIPTION: Assertions for checking iterator state in Kotest.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.9.x/assertions/core.md#2025-04-13_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\niterator.shouldBeEmpty()\niterator.shouldHaveNext()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Arb Generators in Kotlin using Kotest\nDESCRIPTION: Generates values using a supplied function.\nSOURCE: https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.4.x/proptest/genslist.md#2025-04-13_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nArb.create(fn)\n```"
  }
]