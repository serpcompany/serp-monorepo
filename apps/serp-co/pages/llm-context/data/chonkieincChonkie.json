[
  {
    "owner": "chonkie-inc",
    "repo": "chonkie",
    "content": "TITLE: Generating Embeddings for Chunks (Python)\nDESCRIPTION: This code snippet generates embeddings for each text chunk using the model2vec model. It extracts the text from each chunk, encodes it using the model, and prints the shape of the resulting vectors. Depends on the model being initialized earlier and the chunks being available.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nitems = [chunk.text for chunk in chunks]\nvectors = model.encode(items)\nprint(vectors.shape)\n```\n\n----------------------------------------\n\nTITLE: Defining Embedding Retrieval Function (Python)\nDESCRIPTION: This code snippet defines a function get_embeddings that retrieves relevant embeddings for a given query. It encodes the query using the model, queries the vicinity index for the top k (k=4 in this case) most similar chunks, and returns a list of those retrieved chunks.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef get_embeddings(query: str):\n  query_vector = model.encode(query)\n  results = vicinity.query(query_vector, k=4)\n  return [x[0] for x in results[0]]\n```\n\n----------------------------------------\n\nTITLE: Creating Vicinity Index from Vectors and Items (Python)\nDESCRIPTION: This code snippet creates a Vicinity index from the generated vectors and the corresponding items (chunks). It initializes a Vicinity instance using the basic backend and cosine metric. The Vicinity instance facilitates efficient similarity searches.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the Vicinity instance (using basic backend and cosine metric)\nvicinity = Vicinity.from_vectors_and_items(\n    vectors=vectors,\n    items=items,\n    backend_type=Backend.BASIC,\n    metric=Metric.COSINE\n)\n```\n\n----------------------------------------\n\nTITLE: Creating LLM Prompt with Retrieved Chunks (Python)\nDESCRIPTION: This code snippet defines a function `create_prompt` that creates a prompt for the LLM using the retrieved chunks and the user query.  It formats the chunks into a context section with document labels, and the query into a query section.  It uses a prompt template to combine these elements.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# A simple function to make LLM prompts with chunks\ndef create_prompt(chunks: List[str], query: str) -> str:\n  prompt_template = \"\"\"<instructions>\n  Based on the provided contexts, answer the given question to the best of your ability. Remember to also add citations at appropriate points in the format of square brackets like [1][2][3], especially at sentence or paragraph endings.\n  You will be given 4 passages in the context, marked with a label 'Doc [1]:' to denote the passage number. Use that number for citations. Answer only from the given context, and if there's no appropriate context, reply \"No relevant context found!\".\n  </instructions>\n\n  <context>\n  {context}\n  </context>\n\n  <query>\n  {query}\n  </query>\n  \"\"\"\n  context = \"\\n\\n\".join([f\"Doc {i+1}: {chunk}\" for i, chunk in enumerate(chunks)])\n  prompt = prompt_template.format(context=context, query=query)\n  return prompt\n```\n\n----------------------------------------\n\nTITLE: Generating LLM Response with Together AI (Python)\nDESCRIPTION: This code snippet generates a response from the DeepSeek R1 model using the Together AI client. It creates a chat completion request with the generated prompt and then extracts the answer from the response. It removes the thinking tokens to only show the final response.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat.completions.create(\n    model=\"deepseek-ai/DeepSeek-R1\",\n    messages=[{\"role\": \"user\", \"content\": prompt}],\n)\n# Print the final response without the thinking tokens\nanswer = response.choices[0].message.content.split(\"</think>\")[-1]\nrprint(answer)\n```\n\n----------------------------------------\n\nTITLE: Initializing RecursiveChunker with Rules (Python)\nDESCRIPTION: This code snippet initializes a RecursiveChunker with custom RecursiveRules for markdown chunking. It defines rules with multiple levels of delimiters to help Chonkie understand the markdown syntax. The chunk_size is set to 384.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrules = RecursiveRules(\n    levels=[\n        RecursiveLevel(delimiters=['######', '#####', '####', '###', '##', '#']),\n        RecursiveLevel(delimiters=['\\n\\n', '\\n', '\\r\\n', '\\r']),\n        RecursiveLevel(delimiters=['.?!;:']),\n        RecursiveLevel()\n    ]\n)\nchunker = RecursiveChunker(rules=rules, chunk_size=384)\n```\n\n----------------------------------------\n\nTITLE: Chunking Text with RecursiveChunker (Python)\nDESCRIPTION: This code snippet chunks the input text using the initialized RecursiveChunker. It calls the chunker with the text and then prints the total number of chunks generated. It depends on the chunker and rules being initialized beforehand.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# This is all it takes to chunk!\nchunks = chunker(text)\nprint(f\"Total number of chunks: {len(chunks)}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Model and API Key (Python)\nDESCRIPTION: This code snippet initializes the necessary components for interacting with the Together AI's DeepSeek R1 model. It sets the Together API key from Google Colab userdata, initializes a model2vec model for generating embeddings, initializes the Together client for calling the LLM, and initializes the tokenizer for DeepSeek R1 to count tokens.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Set your Together API key to use Deepseek R1 with it~\nos.environ['TOGETHER_API_KEY'] = userdata.get('TOGETHER_API_KEY')\n\n# Initialise a model2vec model for encoding sentences for retrieval\nmodel = StaticModel.from_pretrained(\"minishlab/potion-retrieval-32M\")\n\n# Initialise the Together client to call upon Deepseek R1\nclient = Together()\n\n# (Optional) Initialise the tokenizer for Deepseek R1\n# We use this to get token counts at various points in this colab.\ntokenizer = AutoTokenizer.from_pretrained(\"deepseek-ai/DeepSeek-R1\")\n```\n\n----------------------------------------\n\nTITLE: Installing Chonkie and Dependencies (Python)\nDESCRIPTION: This code snippet installs the necessary Python packages, including chonkie, docling, model2vec, vicinity, together, and rich, using pip. It prepares the environment for the subsequent steps in the notebook, such as converting PDFs to Markdown, chunking, creating embeddings, and building the RAG application.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -q chonkie docling model2vec vicinity together rich[jupyter]\n```\n\n----------------------------------------\n\nTITLE: Basic Chonkie Usage Example\nDESCRIPTION: This example demonstrates the basic usage of the Chonkie library. It imports the `RecursiveChunker`, initializes it, chunks a sample text, and prints the text and token count of each chunk. This provides a quick start for understanding how to use Chonkie for text chunking.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# First import the chunker you want from Chonkie\nfrom chonkie import RecursiveChunker\n\n# Initialize the chunker\nchunker = RecursiveChunker()\n\n# Chunk some text\nchunks = chunker(\"Chonkie is the goodest boi! My favorite chunking hippo hehe.\")\n\n# Access chunks\nfor chunk in chunks:\n    print(f\"Chunk: {chunk.text}\")\n    print(f\"Tokens: {chunk.token_count}\")\n```\n\n----------------------------------------\n\nTITLE: Counting Tokens in PDF Text (Python)\nDESCRIPTION: This code snippet calculates the total number of tokens in the PDF text using the tokenizer.encode method from the transformers library. It prints the token count to the console using the rprint function, indicating the size of the PDF document in tokens.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntotal_text_tokens = len(tokenizer.encode(text))\nrprint(f\"This PDF contains: {total_text_tokens} tokens\")\n```\n\n----------------------------------------\n\nTITLE: Counting Tokens in Prompt (Python)\nDESCRIPTION: This code snippet counts the number of tokens present in the generated LLM prompt using the tokenizer's encode method. It prints the token count to the console, providing insight into the size of the prompt sent to the LLM.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nprompt_tokens = len(tokenizer.encode(prompt))\nrprint(f\"This prompt contains: {prompt_tokens} tokens\")\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries (Python)\nDESCRIPTION: This code snippet imports the required libraries for using Chonkie, docling, model2vec, vicinity, together, rich, transformers and other utilities. It sets up the environment for the various functionalities used in the notebook, such as chunking, document conversion, embedding generation, and interacting with LLMs.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom chonkie import RecursiveChunker, RecursiveRules, RecursiveLevel\nfrom docling.document_converter import DocumentConverter\nfrom google.colab import userdata\nfrom model2vec import StaticModel\nimport numpy as np\nimport os\nfrom pprint import pprint\nfrom rich.console import Console\nfrom rich.text import Text\nfrom together import Together\nfrom transformers import AutoTokenizer\nfrom typing import List\nfrom vicinity import Vicinity, Backend, Metric\n```\n\n----------------------------------------\n\nTITLE: Converting PDF to Markdown with Docling (Python)\nDESCRIPTION: This code snippet uses the docling library to convert a PDF document from a given URL to Markdown format. It initializes a DocumentConverter, converts the PDF from the source URL, and extracts the markdown text from the resulting document object. Requires the `docling` package to be installed.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Docling can convert any PDF to markdown!\nconverter = DocumentConverter()\nsource = \"https://arxiv.org/pdf/1706.03762\"\nresult = converter.convert(source)\ntext = result.document.export_to_markdown()\n```\n\n----------------------------------------\n\nTITLE: Installing Chonkie with pip\nDESCRIPTION: This command demonstrates how to install the Chonkie library using pip, the Python package installer. It installs the base package with minimal dependencies. This is the recommended installation method for most users.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install chonkie\n```\n\n----------------------------------------\n\nTITLE: Development Setup\nDESCRIPTION: This snippet guides contributors on setting up their local development environment for the Chonkie project. It includes cloning the repository, creating a virtual environment, and installing the necessary dependencies using pip.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 1. Fork and clone the repository\ngit clone https://github.com/your-username/chonkie.git\ncd chonkie\n\n# 2. Create a virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# 3. Install dependencies (choose one)\npip install -e \".[dev]\"                # Base development setup\npip install -e \".[dev,semantic]\"       # If working on semantic features\npip install -e \".[dev,all]\"            # For all features\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This snippet demonstrates how to run tests for the Chonkie project using pytest. It includes commands for running all tests, running specific test files, and running tests with coverage reporting.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest                           # Run all tests\npytest tests/test_token_chunker.py    # Run specific test file\npytest --cov=chonkie            # Run tests with coverage\n```\n\n----------------------------------------\n\nTITLE: Installing Chonkie with all optional dependencies\nDESCRIPTION: This command demonstrates how to install the Chonkie library with all optional dependencies using pip. This includes dependencies for all supported chunkers, tokenizers, and embedding models. Note that this is not recommended for production environments due to the increased size and potential for conflicts.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install chonkie[all]\n```\n\n----------------------------------------\n\nTITLE: Code Style Check\nDESCRIPTION: This snippet illustrates how to use ruff to check and automatically fix code style issues in the Chonkie project. It enforces code formatting, import sorting, documentation style, and docstring coverage.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nruff check .                     # Check code quality\nruff check --fix .               # Auto-fix issues where possible\n```\n\n----------------------------------------\n\nTITLE: Docstring Example\nDESCRIPTION: This code snippet demonstrates the Google-style docstring format used in the Chonkie project.  It shows how to document function arguments, return values, and exceptions.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef chunk_text(text: str, chunk_size: int = 512) -> List[str]:\n    \"\"\"Split text into chunks of specified size.\n    \n    Args:\n        text: Input text to chunk\n        chunk_size: Maximum size of each chunk\n        \n    Returns:\n        List of text chunks\n        \n    Raises:\n        ValueError: If chunk_size <= 0\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Initializing Rich Console and rprint Function (Python)\nDESCRIPTION: This code snippet initializes a Rich Console object and defines a utility function `rprint` for pretty printing text with word wrapping. It enhances the notebook's readability by providing a formatted output for text displayed to the user.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Rich text console for better printing\nconsole = Console()\n\n# A wrapper to pretty print\ndef rprint(text: str, console: Console=console, width: int = 80) -> None:\n  richtext = Text(text)\n  console.print(richtext.wrap(console, width=width))\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Copy Button (Python)\nDESCRIPTION: Creates a button that, when clicked, copies the contents of the `text` variable to the clipboard using JavaScript. Uses IPython.display.HTML to inject HTML into the notebook output.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/cookbook/tutorials/Chonkie_RecursiveChunker_for_PDF_and_Markdown.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import HTML\nHTML(f\"<button onclick=navigator.clipboard.writeText('{text}')>Copy</button>\")\n```\n\n----------------------------------------\n\nTITLE: Development Dependencies\nDESCRIPTION: This snippet defines the development dependencies for the Chonkie project using the TOML format. It specifies the required versions for tools like tiktoken, datasets, transformers, pytest, coverage, ruff, and mypy.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[project.optional-dependencies]\ndev = [\n    \"tiktoken>=0.5.0\",\n    \"datasets>=1.14.0\",\n    \"transformers>=4.0.0\",\n    \"pytest>=6.2.0\", \n    \"pytest-cov>=4.0.0\",\n    \"pytest-xdist>=2.5.0\",\n    \"coverage\",\n    \"ruff>=0.0.265\",\n    \"mypy>=1.11.0\"\n]\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example\nDESCRIPTION: This snippet provides an example of a well-formatted commit message for the Chonkie project, including a brief description of the changes and a list of specific updates.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nfeat: add batch processing to WordChunker\n\n- Implement batch_process method\n- Add tests for batch processing\n- Update documentation\n```\n\n----------------------------------------\n\nTITLE: Citation for Chonkie Library\nDESCRIPTION: This snippet provides the BibTeX entry for citing the Chonkie library in academic publications. It includes the authors, title, year, publisher, and URL of the GitHub repository. Using this citation helps give credit to the library's developers and maintainers.\nSOURCE: https://github.com/chonkie-inc/chonkie/blob/main/README.md#_snippet_3\n\nLANGUAGE: bibtex\nCODE:\n```\n@software{chonkie2025,\n  author = {Minhas, Bhavnick AND Nigam, Shreyash},\n  title = {Chonkie: A no-nonsense fast, lightweight, and efficient text chunking library},\n  year = {2025},\n  publisher = {GitHub},\n  howpublished = {\\url{https://github.com/chonkie-inc/chonkie}},\n}\n```"
  }
]