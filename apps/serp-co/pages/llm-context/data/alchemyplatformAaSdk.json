[
  {
    "owner": "alchemyplatform",
    "repo": "aa-sdk",
    "content": "TITLE: Watching and Hydrating Smart Account Client\nDESCRIPTION: Set up a watchSmartAccountClient to handle state changes and hydrate the account state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/quickstart.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"./config.ts\";\nimport { hydrate, watchSmartAccountClient, getSigner } from \"@account-kit/core\";\n\n// How you actually store this state variable\n// depends on the framework you're using\nlet clientState;\n\n// The watch smart account client will handle all the possible state changes that can impact this client:\n//  - Signer status\n//  - Account instantiation\n//  - Chain changes\nconst clientSubscription = watchSmartAccountClient(\n  {\n    type: \"LightAccount\",\n  },\n  config\n)((clientState_) => {\n  clientState = clientState_;\n\n  const signer = getSigner(config);\n\n  if (!signer) {\n    throw new Error(\"No signer found\");\n  }\n\n  console.log(\"signer ready\", signer);\n});\n\nif (clientState == null || clientState.isLoadingClient) {\n  console.log(\"Loading...\");\n  const { onMount } = hydrate(config);\n  onMount();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SmartAccountClient Type in TypeScript\nDESCRIPTION: Defines the SmartAccountClient type, a custom viem Client that enables client applications to interact with SmartContractAccounts. Similar to WalletClient, but provides SmartAccountClientActions for smart contract account interactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/client/smartAccountClient.ts:SmartAccountClient]\n```\n\n----------------------------------------\n\nTITLE: Creating an Alchemy Account Kit Client for ERC-4337 Infrastructure\nDESCRIPTION: Code to create a Smart Account Client that connects to Alchemy's ERC-4337 infrastructure. Configures the client with a chain, account implementation, connection details, and optional gas sponsorship.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/infra/quickstart.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/shared/infra/client.ts]\n```\n\n----------------------------------------\n\nTITLE: Sending Single User Operations with Account Kit in TypeScript\nDESCRIPTION: This example demonstrates how to send a single user operation using the watchSmartAccountClient method from Account Kit's core package. It creates a client subscription that handles state changes such as signer status, account instantiation, and chain changes, then uses the client to send a user operation with a target address, data, and value.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/send-user-operations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\nimport { config } from \"./config.js\";\n\n// How you actually store this state variable\n// depends on the framework you're using\nlet clientState;\n\n// The watch smart account client will handle all of the possible state changes\n// that can impact this client:\n//  - Signer status\n//  - Account instantiation\n//  - Chain changes\nconst clientSubscription = watchSmartAccountClient(\n  {\n    type: \"LightAccount\",\n  },\n  config\n)((clientState_) => {\n  clientState = clientState_;\n});\n\nif (clientState == null || clientState.isLoadingClient) {\n  console.log(\"Loading...\");\n}\n\nconst client = clientState.client;\n\nawait client.sendUserOperation({\n  uo: {\n    target: \"0xtarget\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using createAccount Method - TypeScript\nDESCRIPTION: Demonstrates how to use the createAccount method to create a LightAccount type account using configuration parameters. The method accepts account type parameters and a configuration object.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/createAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAccount } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst account = createAccount(\n  {\n    type: \"LightAccount\",\n  },\n  config\n);\n```\n\n----------------------------------------\n\nTITLE: Defining SmartContractAccount Type in TypeScript\nDESCRIPTION: Defines the SmartContractAccount type, which extends viem's Account. It represents smart contract accounts on the blockchain, providing extended functionalities beyond basic EOAs, including custom capabilities and programmable automation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/account/smartContractAccount.ts:SmartContractAccount]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Light Account to Modular Account v2 in TypeScript\nDESCRIPTION: Performs the upgrade of a Light Account to a Modular Account v2. It retrieves upgrade data, calls the upgrade function, and creates a new Modular Account v2 client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { createMAV2Account, ...upgradeToData } = await getMAV2UpgradeToData(\n  lightAccountclient,\n  { account: lightAccountClient.account }\n);\n\nawait lightAccountClient.upgradeAccount({\n  upgradeTo: upgradeToData,\n  waitForTx: true,\n});\n\nconst maV2Client = createSmartAccountClient({\n  client: createBundlerClient({\n    chain: yourchain,\n    transport: yourTransport,\n  }),\n  account: await createMAV2Account(),\n});\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Gas Sponsorship\nDESCRIPTION: This code demonstrates how to send a user operation with gas sponsorship. It imports the client and sends a simple transaction to a target address with no value transfer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/infra/sponsor-gas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./client\";\n\nconst { hash } = await client.sendUserOperation({\n  uo: {\n    target: \"0xTARGET_ADDRESS\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Modular Account V2 Client in TypeScript\nDESCRIPTION: TypeScript code to create a Modular Account V2 client. It uses the createModularAccountV2Client function with specified chain, transport, and signer options. The client can be configured for different modes and networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst accountClient = await createModularAccountV2Client({\n  mode: \"default\", // optional param to specify the MAv2 variant (either \"default\" or \"7702\")\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }), // Get your API key at https://dashboard.alchemy.com/apps or http(\"RPC_URL\") for non-alchemy infra\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Smart Account Client with @aa-sdk/core\nDESCRIPTION: Example of creating a smart account client using the @aa-sdk/core package. This code demonstrates initialization with a local signer, connecting to the Polygon Mumbai testnet, and creating a modular multi-owner account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/aa-sdk/core/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccount } from \"@alchemy/aa-accounts\";\nimport {\n  LocalAccountSigner,\n  SmartAccountSigner,\n  createSmartAccountClient,\n  polygonMumbai,\n} from \"@aa-sdk/core\";\nimport { http } from \"viem\";\n\nconst chain = polygonMumbai;\nconst signer: SmartAccountSigner = LocalAccountSigner.mnemonicToAccountSigner(\n  \"YOUR_OWNER_MNEMONIC\"\n);\nconst rpcTransport = http(\"https://polygon-mumbai.g.alchemy.com/v2/demo\");\n\nexport const smartAccountClient = createSmartAccountClient({\n  transport: rpcTransport,\n  chain,\n  account: await createMultiOwnerModularAccount({\n    transport: rpcTransport,\n    chain,\n    signer,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Alchemy API Transport\nDESCRIPTION: TypeScript configuration for setting up Alchemy API transport with custom settings for SSR and OAuth.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/quickstart.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }), // TODO: add your Alchemy API key - https://dashboard.alchemy.com/accounts\n    chain: sepolia,\n    ssr: true, // more about ssr: https://accountkit.alchemy.com/react/ssr\n    storage: cookieStorage, // more about persisting state with cookies: https://accountkit.alchemy.com/react/ssr#persisting-the-account-state\n    enablePopupOauth: true, // must be set to \"true\" if you plan on using popup rather than redirect in the social login flow\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Creating LightAccount Client and Sending UserOperation in TypeScript\nDESCRIPTION: This code creates a LightAccount client using the createLightAccountAlchemyClient function from @account-kit/smart-contracts. It sets up the client with an Alchemy API key, Sepolia network, and a local account signer generated from a private key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/light-account/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst lightAccountClient = await createLightAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"your-api-key\" })\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Batch User Operations with Account Kit in React\nDESCRIPTION: This snippet demonstrates how to use the useSendUserOperation hook to send multiple user operations in a batch. It includes error handling and success callbacks, and allows for multiple operations to be sent simultaneously.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/send-user-operations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  type UseSendUserOperationResult,\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react\";\n\nexport default function MyOpSenderComponent() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({\n    client,\n    // optional parameter that will wait for the transaction to be mined before returning\n    waitForTxn: true,\n    onSuccess: ({ hash, request }) => {\n      // [optional] Do something with the hash and request\n    },\n    onError: (error) => {\n      // [optional] Do something with the error\n    },\n  });\n\n  return (\n    <div>\n      <button\n        onClick={() =>\n          sendUserOperation({\n            uo: [\n              {\n                target: \"0xTARGET_ADDRESS\",\n                data: \"0x\",\n                value: 0n,\n              },\n              {\n                target: \"0xTARGET_ADDRESS\",\n                data: \"0x\",\n                value: 0n,\n              },\n            ],\n          })\n        }\n        disabled={isSendingUserOperation}\n      >\n        {isSendingUserOperation ? \"Sending...\" : \"Send UO\"}\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Batch User Operations with Account Kit in React\nDESCRIPTION: This snippet demonstrates how to send multiple user operations in a batch using the useSendUserOperation hook from Account Kit. It shows the setup for sending multiple transactions in a single operation, with error handling and UI state management.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/send-user-operations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  type UseSendUserOperationResult,\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react\";\n\nexport default function MyOpSenderComponent() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({\n    client,\n    // optional parameter that will wait for the transaction to be mined before returning\n    waitForTxn: true,\n    onSuccess: ({ hash, request }) => {\n      // [optional] Do something with the hash and request\n    },\n    onError: (error) => {\n      // [optional] Do something with the error\n    },\n  });\n\n  return (\n    <div>\n      <button\n        onClick={() =>\n          sendUserOperation({\n            uo: [\n              {\n                target: \"0xTARGET_ADDRESS\",\n                data: \"0x\",\n                value: 0n,\n              },\n              {\n                target: \"0xTARGET_ADDRESS\",\n                data: \"0x\",\n                value: 0n,\n              },\n            ],\n          })\n        }\n        disabled={isSendingUserOperation}\n      >\n        {isSendingUserOperation ? \"Sending...\" : \"Send UO\"}\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Account Features Comparison Matrix\nDESCRIPTION: A feature comparison table showing capabilities across different smart account implementations including Light Account, MultiOwnerLightAccount, ModularAccountV1, and ModularAccountV2.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/choosing-a-smart-account.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature           | LightAccount | MultiOwnerLightAccount | ModularAccountV1 | ModularAccountV2 |\n| ----------------- | ------------ | ---------------------- | ---------------- | ---------------- |\n| Multiple owners   | ❌           | ✅                     | ✅               | ✅               |\n| Session keys      | ❌           | ❌                     | ✅               | ✅               |\n| Multi-sig         | ❌           | ❌                     | ✅               | 🔜               |\n| Ecosystem modules | ❌           | ❌                     | ✅               | ✅               |\n| EIP-7702 support  | ❌           | ❌                     | ❌               | ✅               |\n| Gas optimized     | ✅           | ✅                     | ❌               | ✅               |\n```\n\n----------------------------------------\n\nTITLE: Using getConnection with Config in Account Kit (TypeScript)\nDESCRIPTION: This multi-line snippet shows how to import both getConnection and a custom config object in TypeScript, then calls getConnection with the config to obtain the current active chain connection. It requires @account-kit/core as a dependency and expects a config parameter of type AlchemyAccountsConfig. The output is a Connection object suitable for interacting with chain operations; ensure config is correctly structured as required by the library.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getConnection.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getConnection } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst connection = getConnection(config);\n```\n\n----------------------------------------\n\nTITLE: Initializing Light Account Client\nDESCRIPTION: Creates a Light Account client using Alchemy provider. The client is configured with Sepolia network and uses a generated private key for signing transactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/light-account/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst lightAccountClient = await createLightAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"your-api-key\" })\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing EthersProviderAdapter from AA-SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `EthersProviderAdapter` class from the `@aa-sdk/ethers` package. This adapter is essential for integrating an AA-SDK compatible account provider with the ethers.js library, enabling interaction via methods like `send`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/send.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { EthersProviderAdapter } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Configuring SmartAccountClient with alchemyGasAndPaymasterAndDataMiddleware (TypeScript)\nDESCRIPTION: Demonstrates integrating `alchemyGasAndPaymasterAndDataMiddleware` into `createSmartAccountClient` from `@aa-sdk/core`. It configures the client to use Alchemy's Gas Manager for paymaster services by spreading the middleware's configuration, including the `policyId` and `transport`. This setup enables sponsored transactions on the Sepolia chain using the specified Alchemy API key and Gas Manager policy.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyGasAndPaymasterAndDataMiddleware.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  sepolia,\n  alchemy,\n  alchemyGasAndPaymasterAndDataMiddleware,\n} from \"@account-kit/infra\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst client = createSmartAccountClient({\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  chain: sepolia,\n  ...alchemyGasAndPaymasterAndDataMiddleware({\n    policyId: \"policyId\",\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing simulateUserOperationChanges from @account-kit/infra in TypeScript\nDESCRIPTION: This snippet demonstrates the standard ES module import statement required to use the `simulateUserOperationChanges` function within a TypeScript project. It requires the `@account-kit/infra` package as a dependency.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/simulateUserOperationChanges.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { simulateUserOperationChanges } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Account Client with Alchemy Smart Account\nDESCRIPTION: Demonstrates how to create and configure a smart account client with light account actions using Alchemy's infrastructure. Includes setting up the client with API key and chain configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/lightAccountClientActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lightAccountClientActions, createLightAccount } from \"@account-kit/smart-contracts\";\nimport { createAlchemySmartAccountClient } from \"@account-kit/infra\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst smartAccountClient = createAlchemySmartAccountClient({\naccount: await createLightAccount(...),\napiKey: \"your-api-key\",\nchain: sepolia,\n}).extend(lightAccountClientActions);\n```\n\n----------------------------------------\n\nTITLE: Sending User Operations with Smart Account Client\nDESCRIPTION: Shows how to set up and use the smart account client to send user operations, including state management and client subscription.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/quickstart.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nlet clientState;\n\n// The watch smart account client will handle all of the possible state changes\n// that can impact this client:\n//  - Signer status\n//  - Account instantiation\n//  - Chain changes\nconst clientSubscription = watchSmartAccountClient(\n  {\n    type: \"LightAccount\",\n  },\n  config\n)((clientState_) => {\n  clientState = clientState_;\n});\n\nif (clientState == null || clientState.isLoadingClient) {\n  console.log(\"Loading...\");\n}\n\nconst client = clientState.client;\n\nawait client.sendUserOperation({\n  uo: {\n    target: \"0xtarget\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using LocalAccountSigner with viem\nDESCRIPTION: Demonstrates how to create a new LocalAccountSigner instance using viem's privateKeyToAccount and generatePrivateKey functions. This example shows the complete setup process for initializing a signer with a generated private key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { privateKeyToAccount, generatePrivateKey } from \"viem\";\n\nconst signer = new LocalAccountSigner(\n  privateKeyToAccount(generatePrivateKey())\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Single User Operation with Alchemy SDK\nDESCRIPTION: This code demonstrates how to send a single user operation using the Alchemy client. It imports a pre-configured client and sends a user operation with a target address, empty data, and zero value, returning the operation hash.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/infra/send-user-operations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./client\";\n\nconst { hash } = await client.sendUserOperation({\n  uo: {\n    target: \"0xTARGET_ADDRESS\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Kit Authentication in React\nDESCRIPTION: This code snippet demonstrates how to set up the configuration for Account Kit authentication in a React application. It defines UI configuration options for authentication methods and creates a configuration with transport, chain, and SSR settings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\n// Define UI configuration for authentication components\n// See individual login method pages for detailed configuration options\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        // Example: Email OTP authentication\n        {\n          type: \"email\",\n          emailMode: \"otp\",\n        },\n        // You can add more authentication methods here\n        // See login method pages for available options\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }), // TODO: add your Alchemy API key - https://dashboard.alchemy.com/accounts\n    chain: sepolia,\n    ssr: true, // more about ssr: https://accountkit.alchemy.com/react/ssr\n    enablePopupOauth: true, // must be set to \"true\" if you plan on using popup rather than redirect in the social login flow\n    // For more about persisting state with cookies, see: https://accountkit.alchemy.com/react/ssr#persisting-the-account-state\n    // storage: cookieStorage,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Modular Account V2\nDESCRIPTION: Demonstrates how to send a User Operation using the Modular Account V2 client, including creating and deploying a new account on the first operation. Shows transaction configuration with target address, data, and value.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { parseEther } from \"viem\";\n\nconst accountClient = await createModularAccountV2Client({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst operation = await accountClient.sendUserOperation({\n  // simple UO sending no data or value to vitalik's address\n  uo: {\n    target: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\", // The address to call in the UO\n    data: \"0x\", // The calldata to send in the UO\n    value: parseEther(\"0\"), // The value to send in the UO\n  },\n});\n\nconsole.log(\n  \"User operation sent! \\nUO hash: \",\n  operation.hash,\n  \"\\nModular Account v2 Address: \",\n  operation.request.sender\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain Switching with useChain Hook\nDESCRIPTION: Shows how to implement chain switching functionality in a React component using the useChain hook. Includes UI elements for switching between Mainnet and Sepolia networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/multi-chain-apps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useChain } from \"@account-kit/react\";\nimport { mainnet, sepolia } from \"@account-kit/infra\";\n\nexport default function MyComponent() {\n  const { chain, setChain } = useChain();\n\n  return (\n    <div>\n      <p>Current chain: {chain.name}</p>\n      <button onClick={() => setChain({ chain: mainnet })}>\n        Switch to Mainnet\n      </button>\n      <button onClick={() => setChain({ chain: sepolia })}>\n        Switch to Sepolia\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alchemy Provider in NextJS Layout\nDESCRIPTION: This code demonstrates how to wrap a NextJS application with the Alchemy Provider in the root layout. It uses cookies to set the initial state for persisting across reloads.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { config } from \"@/config\";\nimport { cookieToInitialState } from \"@account-kit/core\";\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport { headers } from \"next/headers\";\nimport \"./globals.css\";\nimport { Providers } from \"./providers\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Embedded Accounts UI Components Quickstart NextJs Template\",\n  description: \"Embedded Accounts UI Components Quickstart NextJs Template\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const initialState = cookieToInitialState(\n    config,\n    headers().get(\"cookie\") ?? undefined\n  );\n\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <Providers initialState={initialState}>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using createLightAccountClient to Create a Light Account Client\nDESCRIPTION: Demonstrates how to create a light account client with the sepolia network, HTTP transport, and a local account signer. This example shows the full initialization process including private key generation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createLightAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\";\n\nconst account = await createLightAccountClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Account Client with TypeScript\nDESCRIPTION: Demonstrates two approaches to creating a Smart Account Client: with account hoisting (where account instance is passed directly to client constructor) and without hoisting (where account is passed to each method call). Shows initialization, configuration, and basic message signing.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/concepts/smart-account-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createAlchemySmartAccountClient,\n  sepolia,\n  alchemy,\n} from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\n// with account hoisting\nconst transport = alchemy({ apiKey: \"your-api-key\" });\nconst hoistedClient = createAlchemySmartAccountClient({\n  transport,\n  chain: sepolia,\n  account: await createLightAccount({\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n    chain: sepolia,\n    transport,\n  }),\n});\n\nconst signature = await hoistedClient.signMessage({ message: \"Hello world! \" });\n\n// without account hoisting\nconst nonHoistedClient = createAlchemySmartAccountClient({\n  transport,\n  chain: sepolia,\n});\n\nconst lightAccount = await createLightAccount({\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  chain: sepolia,\n  transport,\n});\n\nconst signature2 = await nonHoistedClient.signMessage({\n  message: \"Hello world! \",\n  account: lightAccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Using useAuthenticate Hook for Custom Authentication in React\nDESCRIPTION: This snippet demonstrates how to use the useAuthenticate hook, which is the foundation for all authentication methods in Account Kit. It provides the authenticate function that handles the authentication process and returns loading states.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/react-hooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\n\nfunction MyAuthComponent() {\n  const { authenticate, authenticateAsync, isPending } = useAuthenticate();\n\n  // Use authenticate with different parameters based on auth method\n  // The specific parameters depend on the authentication method\n  // See the individual authentication method pages for details\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Time-Limited Session Key in TypeScript\nDESCRIPTION: This snippet shows how to add a session key with a time range restriction to a Modular Account V2. It uses the Time Range Module to enforce time-based validation for User Operations, allowing the key to be valid for a specific time period.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/session-keys/adding-session-keys.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  HookType,\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  getDefaultTimeRangeModuleAddress,\n  TimeRangeModule,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\nconst ecdsaValidationModuleAddress =\n  getDefaultSingleSignerValidationModuleAddress(client.chain);\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(\"SESSION_KEY_MNEMONIC\");\n\nconst hookEntityId = 0; // Make sure that the account does not have a hook with this entity id on the module yet\nconst validAfter = 0; // valid once added\nconst validUntil = validAfter + 2 * 86400; // validity ends 2 days from now\n\n// Adding a session key that starts in a day and expires in two days\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: true,\n    isSignatureValidation: true,\n    isUserOpValidation: true,\n  },\n  selectors: [],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(), // Address of the session key\n  }),\n  hooks: [\n    {\n      hookConfig: {\n        address: getDefaultTimeRangeModuleAddress(client.chain),\n        entityId: hookEntityId,\n        hookType: HookType.VALIDATION, // fixed value\n        hasPreHooks: true, // fixed value\n        hasPostHooks: false, // fixed value\n      },\n      initData: TimeRangeModule.encodeOnInstallData({\n        entityId: hookEntityId,\n        validAfter,\n        validUntil,\n      }),\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions with Smart Account Client in AA-SDK using TypeScript\nDESCRIPTION: This snippet illustrates creating a smart account client and utilizing its sendTransactions method to dispatch a batch of transaction requests. It shows required transaction fields such as 'to', 'data', and optionally 'value', and demonstrates how to provide an account reference if not already connected. Dependencies include the @aa-sdk/core package and an initialized client. Input parameters include an array of transaction requests and optionally the account property, and the output is a promise resolving to a transaction hash (Hex). The client must be correctly initialized prior to usage.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/sendTransactions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with sendTransactions\nconst client = createSmartAccountClient(...);\nconst result = await client.sendTransactions({\nrequests: [{\nto: \"0x...\",\ndata: \"0x...\", // or \"0x\",\nvalue: 0n, // optional\n}],\naccount, // only required if the client above is not connected to an account\n});\n```\n\n----------------------------------------\n\nTITLE: Sending a User Operation with Account Kit Client\nDESCRIPTION: Example of sending a user operation using the Account Kit client. The operation includes a target address, calldata, and value to transfer. Returns a hash that can be used to track the operation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/infra/quickstart.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./client\";\n\nconst { hash } = await client.sendUserOperation({\n  uo: {\n    target: \"0xTARGET_ADDRESS\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/shared/infra/client.ts]\n```\n\n----------------------------------------\n\nTITLE: Initializing Authentication and Handling MFA Required Error in React\nDESCRIPTION: This snippet shows how to initiate authentication with email and handle the MFA required error. It uses the useAuthenticate hook from @account-kit/react to manage the authentication process and captures the multiFactorId when MFA is required.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/mfa/email-magic-link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\nimport { MfaRequiredError } from \"@account-kit/signer\";\nimport { useState } from \"react\";\n\nfunction MagicLinkWithMFA() {\n  const { authenticate } = useAuthenticate();\n\n  // Step 1: Handle initial email submission and check for MFA requirement\n  const handleInitialAuthentication = (email: string) => {\n    authenticate(\n      {\n        type: \"email\",\n        emailMode: \"magicLink\",\n        email,\n      },\n      {\n        onSuccess: () => {\n          // This callback only fires when the entire auth flow is complete\n          // (user clicked magic link and completed MFA if required)\n          console.log(\"Authentication successful!\");\n        },\n        onError: (error) => {\n          // If MFA is required the attempt will result in an MfaRequiredError\n          if (error instanceof MfaRequiredError) {\n            const { multiFactorId } = error.multiFactors[0];\n\n            // Store the multiFactorId to use when the user enters their TOTP code\n\n            // In step 2, we will prompt the user to enter their TOTP code (from their authenticator app)\n            // and we'll use this multiFactorId to verify the TOTP code\n          }\n          // Handle other errors\n        },\n      }\n    );\n  };\n\n  return <div>{/* Your UI components here */}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Smart Account Client\nDESCRIPTION: Use the watchSmartAccountClient to handle state changes and send a user operation using the smart account client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/quickstart.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nlet clientState;\n\n// The watch smart account client will handle all of the possible state changes\n// that can impact this client:\n//  - Signer status\n//  - Account instantiation\n//  - Chain changes\nconst clientSubscription = watchSmartAccountClient(\n  {\n    type: \"LightAccount\",\n  },\n  config\n)((clientState_) => {\n  clientState = clientState_;\n});\n\nif (clientState == null || clientState.isLoadingClient) {\n  console.log(\"Loading...\");\n}\n\nconst client = clientState.client;\n\nawait client.sendUserOperation({\n  uo: {\n    target: \"0xtarget\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Account Alchemy Client Setup in TypeScript\nDESCRIPTION: Demonstrates the complete setup of a Light Account Alchemy client including necessary imports, configuration with API key, chain selection, and signer setup using a generated private key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createLightAccountAlchemyClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst lightAccountClient = await createLightAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multisig Modular Account Implementation\nDESCRIPTION: Demonstrates the complete implementation of creating a multisig modular account including necessary imports, chain configuration, transport setup, and account creation with multiple owners and threshold settings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultisigModularAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigModularAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\"\n\nconst account = await createMultisigModularAccount({\nchain: sepolia,\ntransport: http(\"RPC_URL\"),\nsigner: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\nowners: [...], // other owners on the account\nthreshold: 2, // 2 of N signatures\n});\n```\n\n----------------------------------------\n\nTITLE: Using sendUserOperation with Smart Account Client in TypeScript\nDESCRIPTION: This example demonstrates how to use the sendUserOperation method with a smart account client. It includes creating a smart account, initializing a client, and sending a user operation with target address, data, and optional value.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/sendUserOperation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient, toSmartContractAccount } from \"@aa-sdk/core\";\n\nconst account = await toSmartContractAccount(...);\nconst result = await createSmartAccountClient(...).sendUserOperation({\nuo: {\ntarget: \"0x...\",\ndata: \"0x...\", // or \"0x\",\nvalue: 0n, // optional\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Using alchemyUserOperationSimulator with createSmartAccountClient in TypeScript\nDESCRIPTION: Demonstrates how to use the alchemyUserOperationSimulator function when creating a smart account client. It shows setting up the Alchemy transport and passing the simulator to the client configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyUserOperationSimulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  alchemyUserOperationSimulator,\n  alchemy,\n  sepolia,\n} from \"@account-kit/infra\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst alchemyTransport = alchemy({\n  chain: sepolia,\n  apiKey: \"your-api-key\",\n});\n\nconst client = createSmartAccountClient({\n  chain: sepolia,\n  userOperationSimulator: alchemyUserOperationSimulator(alchemyTransport),\n  ...otherParams,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Account Clients with and without Account Hoisting in TypeScript\nDESCRIPTION: This example demonstrates two ways to create a Smart Account Client: with account hoisting (passing an account instance directly to the client constructor) and without hoisting (providing the account for each method call). It shows how to initialize clients, create Light Accounts, and sign messages.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/concepts/smart-account-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createAlchemySmartAccountClient,\n  sepolia,\n  alchemy,\n} from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\n// with account hoisting\nconst transport = alchemy({ apiKey: \"your-api-key\" });\nconst hoistedClient = createAlchemySmartAccountClient({\n  transport,\n  chain: sepolia,\n  account: await createLightAccount({\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n    chain: sepolia,\n    transport,\n  }),\n});\n\nconst signature = await hoistedClient.signMessage({ message: \"Hello world! \" });\n\n// without account hoisting\nconst nonHoistedClient = createAlchemySmartAccountClient({\n  transport,\n  chain: sepolia,\n});\n\nconst lightAccount = await createLightAccount({\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  chain: sepolia,\n  transport,\n});\n\nconst signature2 = await nonHoistedClient.signMessage({\n  message: \"Hello world! \",\n  account: lightAccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Using default7702GasEstimator with createSmartAccountClient (TypeScript)\nDESCRIPTION: Demonstrates how to utilize `default7702GasEstimator` when creating a `SmartAccountClient` for an EIP-7702 compatible modular account (created via `createModularAccountV2` with `mode: \"7702\"`). It passes the function to the `gasEstimator` property of `createSmartAccountClient`, optionally wrapping a custom base `gasEstimator` from the configuration. It also shows the use of `default7702UserOpSigner` for signing operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/default7702GasEstimator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  default7702GasEstimator,\n  default7702UserOpSigner,\n  createSmartAccountClient,\n  type SmartAccountClient,\n} from \"@aa-sdk/core\";\nimport {\n  createModularAccountV2,\n  type CreateModularAccountV2ClientParams,\n} from \"@account-kit/smart-contracts\";\n\nasync function createSMA7702AccountClient(\n  config: CreateModularAccountV2ClientParams\n): Promise<SmartAccountClient> {\n  const sma7702Account = await createModularAccountV2({\n    ...config,\n    mode: \"7702\",\n  });\n\n  return createSmartAccountClient({\n    account: sma7702Account,\n    gasEstimator: default7702GasEstimator(config.gasEstimator),\n    signUserOperation: default7702UserOpSigner(config.signUserOperation),\n    ...config,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Email\nDESCRIPTION: Authenticate the user using email-based authentication, including handling the redirect and bundle.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/quickstart.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"./config\";\nimport { getSigner } from \"@account-kit/core\";\n\nconst signer = getSigner(config);\n\nif (!signer) {\n  // this can happen if your rendering this on the server\n  // the signer instance is only available on the client\n  throw new Error(\"Signer not found\");\n}\n\n// authenticate the user with email\nawait signer.authenticate({\n  type: \"email\",\n  email: \"user@email.com\",\n});\n\n// once the user has clicked on the email and been redirected back to your site\nconst bundle = new URLSearchParams(window.location.search).get(\"bundle\");\nif (!bundle) {\n  throw new Error(\"No bundle found in URL\");\n}\nawait signer.authenticate({ type: \"email\", bundle });\n```\n\n----------------------------------------\n\nTITLE: Initializing Account Kit Configuration with UI Settings using createConfig (TypeScript)\nDESCRIPTION: Demonstrates configuring Account Kit using `createConfig` from `@account-kit/react`. It sets up the Alchemy transport, specifies the Sepolia chain, enables SSR, and provides a UI configuration object (`uiConfig`) to customize the authentication modal's appearance and behavior (e.g., illustration style, authentication methods like email and passkey, and enabling passkey addition on signup). It also initializes a TanStack `QueryClient`, commonly used with Account Kit React.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/functions/createConfig.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { sepolia, alchemy } from \"@account-kit/infra\"\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\"\nimport { QueryClient } from \"@tanstack/react-query\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\nillustrationStyle: \"linear\",\nauth: {\nsections: [[{ type: \"email\" }], [{ type: \"passkey\" }]],\naddPasskeyOnSignup: true,\n},\n}\n\nconst config = createConfig({\ntransport: alchemy({ apiKey: \"your_api_key\" })\nchain: sepolia,\nssr: true,\n}, uiConfig)\n\nexport const queryClient = new QueryClient();\n```\n\n----------------------------------------\n\nTITLE: Using buildUserOperation with Smart Account Client\nDESCRIPTION: Demonstrates how to use buildUserOperation with a smart account client to create a user operation. Shows initialization of the client and building an operation with target address, data, and optional value parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/buildUserOperation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with buildUserOperation\nconst client = createSmartAccountClient(...);\nconst result = await client.buildUserOperation({\nuo: {\ntarget: \"0x...\",\ndata: \"0x...\", // or \"0x\",\nvalue: 0n, // optional\n},\naccount, // only required if the client above is not connected to an account\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSendUserOperation in a React Component\nDESCRIPTION: Demonstrates how to use the useSendUserOperation hook within a React component. It shows setting up the hook with a client, handling success and error cases, and using the returned functions to send a user operation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSendUserOperation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react\";\n\nfunction ComponentWithSendUserOperation() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({\n    client,\n    // optional parameter that will wait for the transaction to be mined before returning\n    waitForTxn: true,\n    onSuccess: ({ hash, request }) => {\n      // [optional] Do something with the hash and request\n    },\n    onError: (error) => {\n      // [optional] Do something with the error\n    },\n    // [optional] ...additional mutationArgs\n  });\n\n  return (\n    <div>\n      <button\n        onClick={() =>\n          sendUserOperation({\n            uo: {\n              target: \"0xTARGET_ADDRESS\",\n              data: \"0x\",\n              value: 0n,\n            },\n          })\n        }\n        disabled={isSendingUserOperation}\n      >\n        {isSendingUserOperation ? \"Sending...\" : \"Send UO\"}\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Sign In Component with OTP Flow in React Native\nDESCRIPTION: This complete sign-in component implements the full OTP authentication flow. It handles sending the OTP to the user's email and shows a modal for entering the verification code. The component utilizes the useAuthenticate and useUser hooks from Account Kit.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/signer/authenticating-users/authenticating-with-otp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// @noErrors\nimport React, { useCallback, useState } from \"react\";\nimport { View, Text, TextInput, Button } from \"react-native\";\nimport { useAuthenticate, useUser } from \"@account-kit/react-native\";\n\nimport { OtpPopUp } from \"./otp-popup\";\n\nexport const SignInWithOtp = () => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [showOtp, setShowOtp] = useState<boolean>(false);\n\n  const [loading, setLoading] = useState<boolean>(false);\n  const { authenticate } = useAuthenticate();\n  const { user } = useUser();\n\n  // Make an authentication request to a user's email\n  const performAuthRequest = useCallback(\n    (email: string) => {\n      try {\n        authenticate({\n          email,\n          type: \"email\",\n          emailMode: \"otp\",\n        });\n\n        setLoading(true);\n        setShowOtp(true);\n      } catch (e) {\n        Alert.alert(\"Error sending OTP Code. Check logs for more details.\");\n\n        console.log(\"Error seding OTP CODE: \", e);\n      }\n    },\n    [authenticate]\n  );\n\n  const completeAuth = useCallback(() => {\n    setLoading(false);\n    setShowOtp(false);\n  }, []);\n\n  return (\n    <View>\n      {user && (\n        <>\n          <Text>User Authenticated As: {user.email}</Text>\n          <Text>{user.address}</Text>\n        </>\n      )}\n\n      <Text style={{ fontSize: 16 }}>Enter Email</Text>\n      <TextInput\n        value={email}\n        style={{ fontSize: 20 }}\n        onChangeText={setEmail}\n        placeholder=\"Enter Email\"\n        autoCapitalize=\"none\"\n      />\n      <Button\n        title={loading ? \"Loading\" : \"Sign In\"}\n        disabled={loading}\n        onPress={() => performAuthRequest(email)}\n      />\n\n      <OtpPopUp\n        show={showOtp}\n        completeAuth={completeAuth}\n        close={() => {\n          setShowOtp(false);\n          setLoading(false);\n        }}\n      />\n    </View>\n  );\n```\n\n----------------------------------------\n\nTITLE: Checking MFA Availability in React with Account Kit\nDESCRIPTION: This snippet demonstrates how to check if multi-factor authentication is available for the user using the useMFA hook from Account Kit. It conditionally renders MFA setup UI based on the isReady state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/mfa/setup-mfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useMFA } from \"@account-kit/react\";\n\n// Inside your component\nconst { isReady } = useMFA();\n\n// Only show MFA setup options if available\nif (isReady) {\n  // Render MFA setup UI\n} else {\n  // User needs to authenticate first\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Smart Account Client with EIP-7702 Mode\nDESCRIPTION: This code snippet shows how to set up a Smart Account Client using the EIP-7702 supported version of a Modular Account v2. It uses the useSmartAccountClient hook from Account Kit's React library and configures it to use the \"7702\" mode parameter.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/using-7702.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSmartAccountClient } from \"@account-kit/react\";\n\nconst { client, address, isLoadingClient } = useSmartAccountClient({\n  type: \"ModularAccountV2\",\n  accountParams: {\n    mode: \"7702\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Authentication with Email Backup\nDESCRIPTION: Demonstrates how to implement passkey authentication with email backup support. This method requires email verification to ensure account recovery capability.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/authenticate-users.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"./config.js\";\nimport { getSigner } from \"@account-kit/core\";\n\nconst signer = getSigner(config);\n\nif (!signer) {\n  // this can happen if your rendering this on the server\n  // the signer instance is only available on the client\n  throw new Error(\"Signer not found\");\n}\n\nawait signer.authenticate({\n  type: \"passkey\",\n  email: \"name@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Addition for Authenticated Users with React\nDESCRIPTION: This React component demonstrates how to use the useAddPasskey hook to add a passkey to an already authenticated user's account, typically used in settings or profile sections of an application.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/add-passkey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAddPasskey } from \"@account-kit/react\";\n\nexport default function MyComponent() {\n  const { addPasskey, isAddingPasskey } = useAddPasskey();\n\n  return (\n    <button\n      disabled={isAddingPasskey}\n      onClick={() => {\n        addPasskey();\n      }}\n    >\n      Add Passkey\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Global and Execute-Only Session Keys in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a global session key (full account control) and an execute-only session key to a Modular Account V2. It uses the Account Kit SDK to create a client, generate session keys, and install validations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/session-keys/adding-session-keys.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  semiModularAccountBytecodeAbi,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { toFunctionSelector, getAbiItem } from \"viem\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\nconst ecdsaValidationModuleAddress =\n  getDefaultSingleSignerValidationModuleAddress(client.chain);\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(\"SESSION_KEY_MNEMONIC\");\n\n// 1. Adding a session key with full permissions\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: true,\n    isSignatureValidation: true,\n    isUserOpValidation: true,\n  },\n  selectors: [],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(), // Address of the session key\n  }),\n  hooks: [],\n});\n\n// 2. Adding a session key that can only call `execute` or `executeBatch` on the account\nsessionKeyEntityId = 2;\nconst executeSelector = toFunctionSelector(\n  getAbiItem({\n    abi: semiModularAccountBytecodeAbi,\n    name: \"execute\",\n  })\n);\n\nconst executeBatchSelector = toFunctionSelector(\n  getAbiItem({\n    abi: semiModularAccountBytecodeAbi,\n    name: \"executeBatch\",\n  })\n);\n\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: false,\n    isSignatureValidation: false,\n    isUserOpValidation: true,\n  },\n  selectors: [executeSelector, executeBatchSelector],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(), // Address of the session key\n  }),\n  hooks: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Authentication with Account Kit React\nDESCRIPTION: Shows how to implement a modal-based authentication system using the useAuthModal hook from Account Kit React. The code creates a simple sign-in button that triggers an authentication modal when clicked.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/shared/modal-auth-example.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthModal } from \"@account-kit/react\";\n\nexport default function MyPage() {\n  const { openAuthModal } = useAuthModal();\n\n  return <button onClick={openAuthModal}>Sign in</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Smart Account Client with React Hook\nDESCRIPTION: Example showing how to initialize a Smart Account Client using the useSmartAccountClient hook from Alchemy's Account Kit. The hook provides access to the client instance, account address, and loading state for managing smart account transactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/how-to-set-up-smart-account-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSmartAccountClient } from \"@account-kit/react\";\n\nconst { client, address, isLoadingClient } = useSmartAccountClient({});\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Packages with NPM\nDESCRIPTION: Commands to install required Account Kit packages using NPM package manager. This includes smart contracts and infrastructure packages.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @account-kit/smart-contracts\nnpm install @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI in NextJS Page\nDESCRIPTION: This snippet showcases how to use Alchemy react components for authentication in a NextJS page. It demonstrates opening an auth modal, handling user login/logout, and displaying user information.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport {\n  useAuthModal,\n  useLogout,\n  useSignerStatus,\n  useUser,\n} from \"@account-kit/react\";\n\nexport default function Home() {\n  const user = useUser();\n  const { openAuthModal } = useAuthModal();\n  const signerStatus = useSignerStatus();\n  const { logout } = useLogout();\n\n  return (\n    <main className=\"flex min-h-screen flex-col items-center p-24 gap-4 justify-center text-center\">\n      {signerStatus.isInitializing ? (\n        <>Loading...</>\n      ) : user ? (\n        <div className=\"flex flex-col gap-2 p-2\">\n          <p className=\"text-xl font-bold\">Success!</p>\n          You're logged in as {user.email ?? \"anon\"}.<button\n            className=\"akui-btn akui-btn-primary mt-6\"\n            onClick={() => logout()}\n          >\n            Log out\n          </button>\n        </div>\n      ) : (\n        <button className=\"akui-btn akui-btn-primary\" onClick={openAuthModal}>\n          Login\n        </button>\n      )}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Owner Modular Account with Account Kit in TypeScript\nDESCRIPTION: Demonstrates the usage of createMultiOwnerModularAccount function to create a multi-owner modular account. It includes importing necessary dependencies, setting up configuration parameters, and calling the function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerModularAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\";\n\nconst account = await createMultiOwnerModularAccount({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UI for Social Login with Account Kit React Hooks\nDESCRIPTION: This code snippet shows how to implement a custom UI for Social Login using Account Kit hooks. It includes examples for both redirect and popup authentication flows, as well as error handling.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/social-login.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate, isPending } = useAuthenticate();\n\n// For redirect flow\nconst handleGoogleRedirectLogin = () => {\n  authenticate(\n    {\n      type: \"oauth\",\n      authProviderId: \"google\",\n      mode: \"redirect\",\n      redirectUrl: \"/\", // Redirect to this page after authentication\n    },\n    {\n      onError: (error) => {\n        // Handle error\n        // The page will redirect on success, so no need for onSuccess handler\n      },\n    }\n  );\n};\n\n// For popup flow\nconst handleGooglePopupLogin = () => {\n  authenticate(\n    {\n      type: \"oauth\",\n      authProviderId: \"google\",\n      mode: \"popup\",\n    },\n    {\n      onSuccess: () => {\n        // Authentication successful!\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Owner Light Account Client Implementation\nDESCRIPTION: Demonstrates the complete implementation of creating a multi-owner light account client using Sepolia network. The example shows importing necessary dependencies, configuring the client with RPC URL, and generating a private key signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccountClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\";\n\nconst account = await createMultiOwnerLightAccountClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with Smart Account Client\nDESCRIPTION: Demonstrates how to use sendTransaction with a smart account client to send a transaction. Shows configuration of transaction parameters including destination address, data, and optional value.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/sendTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with sendTransaction\nconst client = createSmartAccountClient(...);\nconst result = await client.sendTransaction({\nto: \"0x...\",\ndata: \"0x...\", // or \"0x\",\nvalue: 0n, // optional\naccount, // only required if the client above is not connected to an account\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Modular Account Alchemy Client\nDESCRIPTION: Demonstrates how to create a modular account Alchemy client with custom configuration including transport, chain, and signer settings. Uses the Sepolia network and requires an Alchemy API key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createModularAccountAlchemyClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst alchemyAccountClient = await createModularAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSmartAccountClient Hook with TypeScript\nDESCRIPTION: Demonstrates basic usage of the useSmartAccountClient hook to create a smart account client. The hook returns client, address, and loading state information.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSmartAccountClient } from \"@account-kit/react\";\n\nconst { client, address, isLoadingClient } = useSmartAccountClient({});\n```\n\n----------------------------------------\n\nTITLE: Creating an Account with Account Kit in TypeScript\nDESCRIPTION: This snippet provides a complete example showing how to import the necessary modules and use the createAccount function. It demonstrates creating a new account by specifying the type as 'LightAccount' and passing a configuration object. Dependencies required are @account-kit/core and a local module providing the config object. The expected input is an object specifying the account type and a configuration object, and the output is a Promise resolving to the created account. Users should refer to createConfig for information about generating compatible configuration objects.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/createAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createAccount } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst account = createAccount(\n  {\n    type: \"LightAccount\",\n  },\n  config\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Time-Restricted Session Keys in TypeScript\nDESCRIPTION: Shows how to add a session key with time-based restrictions using the TimeRangeModule. The session key is configured with specific start and end times for validity.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/session-keys/adding-session-keys.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  HookType,\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  getDefaultTimeRangeModuleAddress,\n  TimeRangeModule,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\nconst ecdsaValidationModuleAddress =\n  getDefaultSingleSignerValidationModuleAddress(client.chain);\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(\"SESSION_KEY_MNEMONIC\");\n\nconst hookEntityId = 0;\nconst validAfter = 0;\nconst validUntil = validAfter + 2 * 86400;\n\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: true,\n    isSignatureValidation: true,\n    isUserOpValidation: true,\n  },\n  selectors: [],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(),\n  }),\n  hooks: [\n    {\n      hookConfig: {\n        address: getDefaultTimeRangeModuleAddress(client.chain),\n        entityId: hookEntityId,\n        hookType: HookType.VALIDATION,\n        hasPreHooks: true,\n        hasPostHooks: false,\n      },\n      initData: TimeRangeModule.encodeOnInstallData({\n        entityId: hookEntityId,\n        validAfter,\n        validUntil,\n      }),\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Sending a Transaction with AccountSigner and EthersProviderAdapter in TypeScript\nDESCRIPTION: This snippet demonstrates the complete workflow to send a blockchain transaction using the AccountSigner class and EthersProviderAdapter in TypeScript. It imports necessary classes from @aa-sdk/ethers, @aa-sdk/core, @account-kit/infra, and @account-kit/smart-contracts, as well as the http transport from viem. It shows how to create a local account signer from a private key, initialize a provider and signer, and send a transaction by providing target address, value, and data. Dependencies include those modules and a compatible testnet provider. Inputs are the target address, value, and data for the transaction; output is a TransactionResponse promise. Proper TypeScript async/await usage and correct order of initialization are required.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/sendTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n\nconst tx = await signer.sendTransaction({\n  to: \"0x1234567890123456789012345678901234567890\",\n  value: \"0x0\",\n  data: \"0x\",\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Single User Operation with Account Kit in React\nDESCRIPTION: This snippet shows how to use the useSendUserOperation hook to send a single user operation. It includes error handling and success callbacks, and uses the ModularAccountV2 smart contract.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/send-user-operations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  type UseSendUserOperationResult,\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react\";\n\nexport default function MyOpSenderComponent() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({\n    client,\n    // optional parameter that will wait for the transaction to be mined before returning\n    waitForTxn: true,\n    onSuccess: ({ hash, request }) => {\n      // [optional] Do something with the hash and request\n    },\n    onError: (error) => {\n      // [optional] Do something with the error\n    },\n  });\n\n  return (\n    <div>\n      <button\n        onClick={() =>\n          sendUserOperation({\n            uo: {\n              target: \"0xTARGET_ADDRESS\",\n              data: \"0x\",\n              value: 0n,\n            },\n          })\n        }\n        disabled={isSendingUserOperation}\n      >\n        {isSendingUserOperation ? \"Sending...\" : \"Send UO\"}\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using createAlchemySmartAccountClient in TypeScript\nDESCRIPTION: Demonstrates how to use the createAlchemySmartAccountClient function to create an Alchemy smart account client. It includes setting up the chain, transport, and API key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/createAlchemySmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAlchemySmartAccountClient, alchemy } from \"@account-kit/infra\";\nimport { sepolia } from \"@account-kit/infra/chain\";\n\nconst client = createAlchemySmartAccountClient({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using watchConnection with Configuration\nDESCRIPTION: Demonstrates how to use the watchConnection method with a configuration object to subscribe to connection changes. The method returns an unsubscribe function and accepts a callback for handling connection updates.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchConnection.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchConnection } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchConnection(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating Alchemy Account Provider in React\nDESCRIPTION: This snippet shows how to create a provider component that wraps the AlchemyAccountProvider and QueryClientProvider. It's used to provide the Alchemy Account context to the entire application.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/quickstart.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { config, queryClient } from \"@/config\";\nimport { AlchemyClientState } from \"@account-kit/core\";\nimport { AlchemyAccountProvider } from \"@account-kit/react\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { PropsWithChildren } from \"react\";\n\nexport const Providers = (\n  props: PropsWithChildren<{ initialState?: AlchemyClientState }>\n) => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AlchemyAccountProvider\n        config={config}\n        queryClient={queryClient}\n        initialState={props.initialState}\n      >\n        {props.children}\n      </AlchemyAccountProvider>\n    </QueryClientProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Owner Light Account Client with Configuration\nDESCRIPTION: Demonstrates how to create a multi-owner light account client using Alchemy with specific configuration including API key, chain selection, and signer setup.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccountAlchemyClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\"\n\nconst lightAccountClient = await createMultiOwnerLightAccountAlchemyClient({\ntransport: alchemy({\napiKey: \"your-api-key\",\n}),\nchain: sepolia\nsigner: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Global Session Keys in TypeScript\nDESCRIPTION: Demonstrates how to add two types of session keys: one with full account control and another with execute-only permissions. Uses the SingleSignerValidationModule to configure session key permissions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/session-keys/adding-session-keys.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  semiModularAccountBytecodeAbi,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { toFunctionSelector, getAbiItem } from \"viem\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\nconst ecdsaValidationModuleAddress =\n  getDefaultSingleSignerValidationModuleAddress(client.chain);\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(\"SESSION_KEY_MNEMONIC\");\n\n// 1. Adding a session key with full permissions\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: true,\n    isSignatureValidation: true,\n    isUserOpValidation: true,\n  },\n  selectors: [],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(), // Address of the session key\n  }),\n  hooks: [],\n});\n\n// 2. Adding a session key that can only call `execute` or `executeBatch` on the account\nsessionKeyEntityId = 2;\nconst executeSelector = toFunctionSelector(\n  getAbiItem({\n    abi: semiModularAccountBytecodeAbi,\n    name: \"execute\",\n  })\n);\n\nconst executeBatchSelector = toFunctionSelector(\n  getAbiItem({\n    abi: semiModularAccountBytecodeAbi,\n    name: \"executeBatch\",\n  })\n);\n\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: false,\n    isSignatureValidation: false,\n    isUserOpValidation: true,\n  },\n  selectors: [executeSelector, executeBatchSelector],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(), // Address of the session key\n  }),\n  hooks: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Smart Account Client with React Hook in Alchemy AA-SDK\nDESCRIPTION: This code snippet demonstrates how to use the useSmartAccountClient hook from @account-kit/react to initialize a smart account client. It returns the client instance, wallet address, and loading state, which are used to create a new smart account and send transactions signed by the Alchemy Signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/how-to-set-up-smart-account-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSmartAccountClient } from \"@account-kit/react\";\n\nconst { client, address, isLoadingClient } = useSmartAccountClient({});\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Authentication in TypeScript with Account Kit Core\nDESCRIPTION: Demonstrates the two-step email authentication process using Account Kit Core. First initiates the login flow by sending an email, then completes authentication using the returned bundle from URL parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/authenticate-users.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"./config\";\nimport { getSigner } from \"@account-kit/core\";\n\nconst signer = getSigner(config);\n\nif (!signer) {\n  // this can happen if your rendering this on the server\n  // the signer instance is only available on the client\n  throw new Error(\"Signer not found\");\n}\n\n// authenticate the user with email\nawait signer.authenticate({\n  type: \"email\",\n  email: \"user@email.com\",\n});\n\n// once the user has clicked on the email and been redirected back to your site\nconst bundle = new URLSearchParams(window.location.search).get(\"bundle\");\nif (!bundle) {\n  throw new Error(\"No bundle found in URL\");\n}\n\nawait signer.authenticate({ type: \"email\", bundle });\n```\n\n----------------------------------------\n\nTITLE: Managing MFA Factors in React with Account Kit\nDESCRIPTION: This code demonstrates how to manage MFA factors, including retrieving existing factors and removing them. It uses the getMFAFactors and removeMFA mutations from the useMFA hook to handle these operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/mfa/setup-mfa.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect, useState } from \"react\";\nimport { useMFA } from \"@account-kit/react\";\nimport type { MfaFactor } from \"@account-kit/signer\";\n\nfunction ManageMfaComponent() {\n  const { getMFAFactors, removeMFA } = useMFA();\n  const [factors, setFactors] = useState<MfaFactor[]>([]);\n\n  // Fetch all MFA verification methods (factors) for the current user\n  useEffect(() => {\n    // Only fetch when component mounts and we're ready\n    getMFAFactors.mutate(undefined, {\n      onSuccess: (result) => {\n        // factors.multiFactors is an array of verification methods\n        setFactors(result.multiFactors);\n      },\n    });\n  }, [getMFAFactors]);\n\n  // Remove a TOTP authenticator app by its multiFactorId\n  const handleRemoveAuthenticator = (multiFactorId: string) => {\n    removeMFA.mutate(\n      { multiFactorIds: [multiFactorId] },\n      {\n        onSuccess: () => {\n          console.log(\"Authenticator removed successfully!\");\n          // Update local state to reflect the removal\n          setFactors(factors.filter((f) => f.multiFactorId !== multiFactorId));\n        },\n      }\n    );\n  };\n\n  // Loading states are available directly from the mutation objects\n  if (getMFAFactors.isPending) return <div>Loading MFA settings...</div>;\n\n  return (\n    <div>\n      <h2>Your Authentication Methods</h2>\n\n      {factors.length === 0 ? (\n        <p>No authenticator apps configured.</p>\n      ) : (\n        <ul>\n          {factors.map((factor) => (\n            <li key={factor.multiFactorId}>\n              {factor.multiFactorType === \"totp\"\n                ? \"Authenticator App\"\n                : factor.multiFactorType}\n              <button\n                onClick={() => handleRemoveAuthenticator(factor.multiFactorId)}\n                disabled={removeMFA.isPending}\n              >\n                Remove\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {getMFAFactors.isError && (\n        <div className=\"error\">\n          Error loading MFA settings: {getMFAFactors.error.message}\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Single User Operation with Account Kit in React\nDESCRIPTION: This snippet shows how to send a single user operation using the useSendUserOperation hook from Account Kit. It includes setting up the hook, handling success and error cases, and rendering a button to trigger the operation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/send-user-operations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  type UseSendUserOperationResult,\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react\";\n\nexport default function MyOpSenderComponent() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({\n    client,\n    // optional parameter that will wait for the transaction to be mined before returning\n    waitForTxn: true,\n    onSuccess: ({ hash, request }) => {\n      // [optional] Do something with the hash and request\n    },\n    onError: (error) => {\n      // [optional] Do something with the error\n    },\n  });\n\n  return (\n    <div>\n      <button\n        onClick={() =>\n          sendUserOperation({\n            uo: {\n              target: \"0xTARGET_ADDRESS\",\n              data: \"0x\",\n              value: 0n,\n            },\n          })\n        }\n        disabled={isSendingUserOperation}\n      >\n        {isSendingUserOperation ? \"Sending...\" : \"Send UO\"}\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users with Social Login in TypeScript\nDESCRIPTION: This snippet demonstrates how to authenticate users using social login providers like Google. It shows both redirect and popup login flows, with the popup flow requiring 'enablePopupOauth' to be set to true in the config.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/authenticate-users.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"./config\";\nimport { getSigner } from \"@account-kit/core\";\n\nconst signer = getSigner(config);\n\nif (!signer) {\n  // this can happen if your rendering this on the server\n  // the signer instance is only available on the client\n  throw new Error(\"Signer not found\");\n}\n\n// authenticate the user with a social login provider\nawait signer.authenticate({\n  // redirect login flow\n  type: \"oauth\",\n  authProviderId: \"google\",\n  mode: \"redirect\",\n  redirectUrl: \"/\", // After logging in, redirect to the index page\n});\n\nawait signer.authenticate({\n  // popup login flow\n  type: \"oauth\",\n  authProviderId: \"google\",\n  mode: \"popup\", // remember to set \"enablePopupOauth\" to \"true\" in config.ts to enable\n});\n```\n\n----------------------------------------\n\nTITLE: Using Alchemy Auth Modal in NextJS Page Component\nDESCRIPTION: This snippet shows how to implement the Alchemy auth modal in a NextJS page component. It uses various hooks from the Alchemy Account Kit to manage user authentication state and actions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/quickstart.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport {\n  useAuthModal,\n  useLogout,\n  useSignerStatus,\n  useUser,\n} from \"@account-kit/react\";\n\nexport default function Home() {\n  const user = useUser();\n  const { openAuthModal } = useAuthModal();\n  const signerStatus = useSignerStatus();\n  const { logout } = useLogout();\n\n  return (\n    <main className=\"flex min-h-screen flex-col items-center p-24 gap-4 justify-center text-center\">\n      {signerStatus.isInitializing ? (\n        <>Loading...</>\n      ) : user ? (\n        <div className=\"flex flex-col gap-2 p-2\">\n          <p className=\"text-xl font-bold\">Success!</p>\n          You're logged in as {user.email ?? \"anon\"}.<button\n            className=\"akui-btn akui-btn-primary mt-6\"\n            onClick={() => logout()}\n          >\n            Log out\n          </button>\n        </div>\n      ) : (\n        <button className=\"akui-btn akui-btn-primary\" onClick={openAuthModal}>\n          Login\n        </button>\n      )}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAccount Hook to Access Smart Contract Account in React\nDESCRIPTION: Example of how to use the useAccount hook to access a user's smart contract account instance. This hook provides the account object, address, and loading state, which are primarily used for interacting with the smart contract account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/react-hooks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAccount } from \"@account-kit/react\";\n\nfunction MyComponent() {\n  const { account, address, isLoadingAccount } = useAccount({\n    type: \"ModularAccountV2\", // Specify the account type you're using\n  });\n\n  if (isLoadingAccount) {\n    return <div>Loading account...</div>;\n  }\n\n  if (!account) {\n    return <div>Please log in to access your account</div>;\n  }\n\n  return (\n    <div>\n      <p>Smart contract account address: {address}</p>\n      {/* Now you can use the account instance for transactions */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Social Login Authentication with MFA\nDESCRIPTION: Implement social login authentication that automatically handles TOTP verification during OAuth callback flow.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nawait signer.authenticate({\n  type: \"oauth\",\n  authProviderId: \"google\", // Choose between the auth providers you selected to support from your auth policy\n  mode: \"redirect\", // Alternatively, you can choose \"popup\" mode\n  redirectUrl: \"/\", // After logging in, redirect to the index page\n});\n```\n\n----------------------------------------\n\nTITLE: Using buildUserOperation with Smart Account Client in TypeScript\nDESCRIPTION: Demonstrates how to use the buildUserOperation function with a smart account client. It includes creating a client and building a user operation with target address, data, and optional value.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/buildUserOperation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with buildUserOperation\nconst client = createSmartAccountClient(...);\nconst result = await client.buildUserOperation({\nuo: {\ntarget: \"0x...\",\ndata: \"0x...\", // or \"0x\",\nvalue: 0n, // optional\n},\naccount, // only required if the client above is not connected to an account\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-7677 Paymaster with Single RPC Provider in TypeScript\nDESCRIPTION: This example shows how to implement an ERC-7677 standard compliant paymaster using a single RPC provider for Paymaster, Bundler, and Node RPC traffic. It uses the erc7677Middleware function from @aa-sdk/core.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/paymasters.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient, erc7677Middleware } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst chain = sepolia;\nconst client = createSmartAccountClient({\n  chain,\n  // This example assumes that your RPC provider supports the ERC-7677 methods\n  transport: http(\"RPC_URL\"),\n  ...erc7677Middleware(),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding or Removing Owners for a Modular Account in TypeScript\nDESCRIPTION: This code demonstrates how to add or remove owners from a Modular Account using the updateOwners method from the multiOwnerPluginActions extended SmartAccountClient. It also shows how to wait for the user operation transaction to complete.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/manage-ownership-mav1.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\n\nconst ownersToAdd = []; // the addresses of owners to be added\nconst ownersToRemove = []; // the addresses of owners to be removed\n\nconst result = await modularAccountClient.updateOwners({\n  args: [ownersToAdd, ownersToRemove],\n});\n\nconst txHash = await modularAccountClient.waitForUserOperationTransaction(\n  result\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing ModularAccount V2 Creation\nDESCRIPTION: Demonstrates complete implementation of creating a ModularAccount V2 including necessary imports, signer setup, chain configuration, and transport initialization. Shows how to use the createModularAccountV2 function with different modes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createModularAccountV2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2 } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { alchemy, sepolia } from \"@account-kit/infra\";\n\nconst MNEMONIC = \"...\";\nconst RPC_URL = \"...\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(MNEMONIC);\n\nconst chain = sepolia;\n\nconst transport = alchemy({ rpcUrl: RPC_URL });\n\nconst modularAccountV2 = await createModularAccountV2({\n  mode: \"default\", // or \"7702\"\n  chain,\n  signer,\n  transport,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Modular Account Client with Alchemy Infrastructure\nDESCRIPTION: Code example demonstrating how to create a Modular Account client using Alchemy's infrastructure. This approach uses the createModularAccountAlchemyClient function with an Alchemy API key on the Sepolia network.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst alchemyAccountClient = await createModularAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Using initEmailAuth to Authenticate Users via Email\nDESCRIPTION: Demonstrates how to initialize the AlchemySignerWebClient with API key and iframe configuration, then authenticate a user by their email address. This initiates the email authentication flow which sends an email to the user.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/initEmailAuth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.initEmailAuth({ email: \"you@mail.com\" });\n```\n\n----------------------------------------\n\nTITLE: Using getSmartAccountClient in TypeScript\nDESCRIPTION: Demonstrates how to use the getSmartAccountClient function to obtain a smart account client. It requires a configuration object and returns client information including the address and loading status.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getSmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSmartAccountClient } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst { client, address, isLoadingClient } = getSmartAccountClient(\n  {\n    type: \"LightAccount\",\n  },\n  config\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a SmartAccountClient using createSmartAccountClient in TypeScript\nDESCRIPTION: This code snippet illustrates the usage of the `createSmartAccountClient` function to instantiate a smart account client. It requires configuration including the target blockchain (`chain`), a transport method (`http` from `viem` in this example pointing to an RPC URL), and optionally, a pre-configured smart contract account using `toSmartContractAccount`. The resulting client can manage transactions and signing for the specified smart account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/createSmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSmartAccountClient, toSmartContractAccount } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst client = createSmartAccountClient({\nchain: sepolia,\ntransport: http(\"RPC_URL\"),\n// optionally hoist the account\naccount: toSmartContractAccount(...),\n});\n```\n\n----------------------------------------\n\nTITLE: Session Key Removal with Allowlist Hook in TypeScript\nDESCRIPTION: Shows how to remove a session key that includes an allowlist hook. Demonstrates the proper way to include hook uninstallation data using the AllowlistModule's encodeOnUninstallData helper function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/session-keys/removing-session-keys.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  modularAccountAbi,\n  AllowlistModule,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\n\n// Removing a basic session key\nawait client.uninstallValidation({\n  moduleAddress: getDefaultSingleSignerValidationModuleAddress(client.chain),\n  entityId: sessionKeyEntityId,\n  uninstallData: SingleSignerValidationModule.encodeOnUninstallData({\n    entityId: sessionKeyEntityId,\n  }),\n  hookUninstallDatas: [],\n});\n\nconst hookEntityId = 1;\nconst target = \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\";\n\n// Removing a session key with an allowlist hook\nawait client.uninstallValidation({\n  moduleAddress: getDefaultSingleSignerValidationModuleAddress(client.chain),\n  entityId: sessionKeyEntityId,\n  uninstallData: SingleSignerValidationModule.encodeOnUninstallData({\n    entityId: sessionKeyEntityId,\n  }),\n  hookUninstallDatas: [\n    AllowlistModule.encodeOnUninstallData({\n      entityId: hookEntityId,\n      inputs: [\n        {\n          target,\n          hasSelectorAllowlist: false,\n          hasERC20SpendLimit: false,\n          erc20SpendLimit: 0n,\n          selectors: [],\n        },\n      ],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Paymaster-Restricted Session Keys in TypeScript\nDESCRIPTION: Demonstrates adding a session key that is restricted to using a specific paymaster for transactions. Uses the PaymasterGuardModule to enforce paymaster restrictions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/session-keys/adding-session-keys.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  HookType,\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  getDefaultPaymasterGuardModuleAddress,\n  PaymasterGuardModule,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\nconst ecdsaValidationModuleAddress =\n  getDefaultSingleSignerValidationModuleAddress(client.chain);\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(\"SESSION_KEY_MNEMONIC\");\n\nconst hookEntityId = 0;\nconst paymasterAddress = \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\";\n\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: true,\n    isSignatureValidation: true,\n    isUserOpValidation: true,\n  },\n  selectors: [],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(),\n  }),\n  hooks: [\n    {\n      hookConfig: {\n        address: getDefaultPaymasterGuardModuleAddress(client.chain),\n        entityId: hookEntityId,\n        hookType: HookType.VALIDATION,\n        hasPreHooks: true,\n        hasPostHooks: false,\n      },\n      initData: PaymasterGuardModule.encodeOnInstallData({\n        entityId: hookEntityId,\n        paymaster: paymasterAddress,\n      }),\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Single User Operation with Account Kit\nDESCRIPTION: Demonstrates how to send a single user operation using the watchSmartAccountClient from Account Kit's core package. The example shows how to track client state changes related to signer status, account instantiation, and chain changes before sending a user operation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/send-user-operations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\nimport { config } from \"./config.js\";\n\n// How you actually store this state variable\n// depends on the framework you're using\nlet clientState;\n\n// The watch smart account client will handle all of the possible state changes\n// that can impact this client:\n//  - Signer status\n//  - Account instantiation\n//  - Chain changes\nconst clientSubscription = watchSmartAccountClient(\n  {\n    type: \"LightAccount\",\n  },\n  config\n)((clientState_) => {\n  clientState = clientState_;\n});\n\nif (clientState == null || clientState.isLoadingClient) {\n  console.log(\"Loading...\");\n}\n\nconst client = clientState.client;\n\nawait client.sendUserOperation({\n  uo: {\n    target: \"0xtarget\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Authentication with useAuthModal in React\nDESCRIPTION: This snippet demonstrates how to implement modal-based authentication using the useAuthModal hook from Account Kit. It shows a simple button implementation that opens the authentication modal when clicked.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/ui-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthModal } from \"@account-kit/react\";\n\nexport default function MyPage() {\n  const { openAuthModal } = useAuthModal();\n\n  return <button onClick={openAuthModal}>Authenticate</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Owner Light Account Client Implementation\nDESCRIPTION: Demonstrates the complete implementation of creating a multi-owner light account client using the Sepolia network, HTTP transport, and local account signer with a generated private key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccountClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\";\n\nconst account = await createMultiOwnerLightAccountClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Token Spending Limits with Session Keys\nDESCRIPTION: Example of configuring a session key with a 1 ETH native token spending limit using validation and execution hooks. Demonstrates setup of gas cost tracking and native token limit modules.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/session-keys/adding-session-keys.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  HookType,\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  getDefaultNativeTokenLimitModuleAddress,\n  NativeTokenLimitModule,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { parseEther } from \"viem\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\nconst ecdsaValidationModuleAddress =\n  getDefaultSingleSignerValidationModuleAddress(client.chain);\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(\"SESSION_KEY_MNEMONIC\");\n\nconst hookEntityId = 0;\n\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: true,\n    isSignatureValidation: true,\n    isUserOpValidation: true,\n  },\n  selectors: [],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(),\n  }),\n  hooks: [\n    {\n      hookConfig: {\n        address: getDefaultNativeTokenLimitModuleAddress(client.chain),\n        entityId: hookEntityId,\n        hookType: HookType.VALIDATION,\n        hasPreHooks: true,\n        hasPostHooks: false,\n      },\n      initData: NativeTokenLimitModule.encodeOnInstallData({\n        entityId: hookEntityId,\n        spendLimit: parseEther(\"1\"),\n      }),\n    },\n    {\n      hookConfig: {\n        address: getDefaultNativeTokenLimitModuleAddress(client.chain),\n        entityId: hookEntityId,\n        hookType: HookType.EXECUTION,\n        hasPreHooks: true,\n        hasPostHooks: false,\n      },\n      initData: \"0x\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Global Shims in React Native\nDESCRIPTION: TypeScript code to import necessary packages for global shims in the topmost entry point of the React Native app.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"node-libs-react-native/globals.js\";\nimport \"react-native-get-random-values\";\n\n// rest of App.tsx\n```\n\n----------------------------------------\n\nTITLE: Importing createBundlerClient from aa-sdk in TypeScript\nDESCRIPTION: Demonstrates how to import the createBundlerClient method from the @aa-sdk/core package for later use in TypeScript projects. Requires the @aa-sdk/core npm package to be installed as a dependency. Import is performed using ES6 syntax, making the function available for client creation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/createBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createBundlerClient } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Transaction Gas Sponsorship with useSmartAccountClient\nDESCRIPTION: This React Native component demonstrates how to set a gas policy ID for specific UserOperations. It uses the useSmartAccountClient hook with a policy ID parameter, giving more control over which transactions are sponsored and which are not.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/using-smart-accounts/sponsor-gas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, Pressable, Text } from \"react-native\";\nimport {\n  useSmartAccountClient,\n  useSendUserOperation,\n} from \"@account-kit/react-native\";\n\nexport default function MyComponent() {\n  const { client } = useSmartAccountClient({\n    policyId: \"GAS_MANAGER_POLICY_ID\",\n  });\n  const { sendUserOperation } = useSendUserOperation({ client });\n\n  return (\n    <View>\n      <Pressable\n        onPress={() =>\n          sendUserOperation({\n            uo: {\n              target: \"0xTARGET_ADDRESS\",\n              data: \"0x\",\n              value: 0n,\n            },\n          })\n        }\n      >\n        <View>\n          <Text>Send Sponsored User Operation</Text>\n        </View>\n      </Pressable>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Passkey Authentication in TypeScript\nDESCRIPTION: Demonstrates how to add a new passkey to an already authenticated user account. The code uses a signer object and allows for customization of Credential Creation Options.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/add-passkey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\n// NOTE: this assumes you have already authenticated the user\n// you can further customize the Credential Creation Options here\nawait signer.addPasskey({});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/shared/signer/signer.ts]\n```\n\n----------------------------------------\n\nTITLE: Sending Batch User Operations with Alchemy SDK\nDESCRIPTION: Shows how to send multiple user operations in a single batch by passing an array of operations to the sendUserOperation method. Each operation specifies its own target, data, and value.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/infra/send-user-operations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./client\";\n\nconst { hash } = await client.sendUserOperation({\n  uo: [\n    {\n      target: \"0xTARGET_ADDRESS\",\n      data: \"0x\",\n      value: 0n,\n    },\n    {\n      target: \"0xTARGET_ADDRESS_2\",\n      data: \"0x\",\n      value: 0n,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Sending a Single User Operation with Account Kit in React Native\nDESCRIPTION: This component demonstrates how to send a single user operation using the useSendUserOperation hook with a ModularAccountV2 smart contract. It includes success and error handling callbacks and displays a button that updates its state while sending.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/using-smart-accounts/send-user-operations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState, useEffect } from \"react\";\nimport { Alert, View, Button } from \"react-native\";\nimport { User } from \"@account-kit/signer\";\nimport {\n  createModularAccountV2Client,\n  ModularAccountV2,\n} from \"@account-kit/smart-contracts\";\nimport {\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react-native\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { SmartAccountClient } from \"@aa-sdk/core\";\n\nexport default function MyOpSenderComponent() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({\n    client,\n    waitForTxn: true,\n    onSuccess: ({ hash, request }) => {\n      // [optional] Do something with the hash and request\n    },\n    onError: (error) => {\n      // [optional] Do something with the error\n    },\n  });\n\n  const handleSendUserOperation = () => {\n    sendUserOperation({\n      uo: {\n        target: \"0xTARGET_ADDRESS\",\n        data: \"0x\",\n        value: 0n,\n      },\n    });\n  };\n\n  return (\n    <View>\n      <Button\n        onPress={handleSendUserOperation}\n        disabled={isSendingUserOperation}\n        title={isSendingUserOperation ? \"Sending...\" : \"Send UO\"}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAuthenticate Hook in TypeScript\nDESCRIPTION: Demonstrates how to use the useAuthenticate hook, including optional success and error callbacks. The hook returns functions for authentication and state variables for tracking the authentication process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAuthenticate.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\nconst { authenticate, authenticateAsync, isPending, error } = useAuthenticate({\n  // these are optional\n  onSuccess: () => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop and Replace for User Operations in TypeScript\nDESCRIPTION: This code snippet demonstrates how to send a user operation, wait for it to be mined, and use the drop and replace technique if it fails. It utilizes the client object to interact with the AA-SDK, showcasing error handling and retry logic.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/infra/drop-and-replace.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./client\";\n\n// 1. send a user operation\nconst { hash, request } = await client.sendUserOperation({\n  uo: {\n    target: \"0xTARGET_ADDRESS\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n\ntry {\n  // 2. wait for it to be mined\n  const txHash = await client.waitForUserOperationTransaction({ hash });\n} catch (e) {\n  // 3. if it fails, resubmit the user operation via drop and replace\n  const { hash: newHash } = await client.dropAndReplaceUserOperation({\n    uoToDrop: request,\n  });\n\n  // 4. wait for the new user operation to be mined\n  await client.waitForUserOperationTransaction({ hash: newHash });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Passkey Login with Email using useAuthenticate Hook (React)\nDESCRIPTION: This snippet illustrates how to implement a custom Passkey Login UI flow using the `useAuthenticate` hook from `@account-kit/react`. It triggers authentication by specifying the type as 'passkey' and providing the user's associated email. Success and error callbacks are included for handling the authentication result.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/passkey-login.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user wants to log in with their passkey and email\nconst handlePasskeyLogin = (email: string) => {\n  authenticate(\n    {\n      type: \"passkey\",\n      email,\n    },\n    {\n      onSuccess: () => {\n        // Success - user authenticated with passkey\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth0 Authentication with Custom UI in React\nDESCRIPTION: Code example demonstrating how to implement Auth0 authentication with custom UI using Account Kit hooks. It shows two authentication approaches: generic Auth0 login and direct provider login for a better user experience.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/social-providers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// Option 1: Generic Auth0 login (shows Auth0 provider selection screen)\nconst handleAuth0Login = () => {\n  authenticate(\n    {\n      type: \"oauth\",\n      authProviderId: \"auth0\",\n      mode: \"popup\", // or \"redirect\"\n    },\n    {\n      onSuccess: () => {\n        // Authentication successful!\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n\n// Option 2: Direct provider login (bypasses Auth0 selection screen)\nconst handleGitHubLogin = () => {\n  authenticate(\n    {\n      type: \"oauth\",\n      authProviderId: \"auth0\",\n      auth0Connection: \"github\", // Use the connection name from Auth0\n      mode: \"popup\", // or \"redirect\"\n    },\n    {\n      onSuccess: () => {\n        // Authentication successful!\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing createMultiOwnerModularAccountClient from Account Kit\nDESCRIPTION: Shows how to import the createMultiOwnerModularAccountClient function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerModularAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccountClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Transferring Light Account Ownership using sendUserOperation in TypeScript\nDESCRIPTION: This code snippet shows how to transfer ownership of a Light Account using the more verbose sendUserOperation method. It requires an existing lightAccountClient and the address of the new owner to complete the transfer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/light-account/transfer-ownership-light-account.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData } from \"viem\";\nimport { lightAccountClient } from \"./client\";\n\n// this will return the address of the smart account you want to transfer ownerhip of\nconst accountAddress = lightAccountClient.getAddress();\nconst newOwner = \"0x...\"; // the address of the new owner\n\nconst result = await lightAccountClient.sendUserOperation({\n  to: accountAddress,\n  data: lightAccountClient.encodeTransferOwnership(newOwner),\n});\n// wait for txn with UO to be mined\nawait lightAccountClient.waitForUserOperationTransaction(result);\n```\n\n----------------------------------------\n\nTITLE: Using getMfaStatus with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance and check MFA status. Shows configuration of RPC URL and iframe container, then checks if MFA is required.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getMfaStatus.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst mfaStatus = signer.getMfaStatus();\nif (mfaStatus === AlchemyMfaStatus.REQUIRED) {\n  // Handle MFA requirement\n}\n```\n\n----------------------------------------\n\nTITLE: Using createSmartAccountClientFromExisting in TypeScript\nDESCRIPTION: Demonstrates how to create a smart account client by utilizing an existing BundlerClient and configuring a smart contract account. Shows the complete setup process including necessary imports and client creation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/createSmartAccountClientFromExisting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\ncreateBundlerClient,\ncreateSmartAccountClientFromExisting,\ntoSmartContractAccount\n} from \"@aa-sdk/core\";\n\nconst bundlerClient = createBundlerClient(...);\nconst client = createSmartAccountClientFromExisting({\nclient,\naccount: toSmartContractAccount(...),\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Batch User Operations with Account Kit in React Native\nDESCRIPTION: This component shows how to send multiple user operations in a single transaction using the useSendUserOperation hook. The component passes an array of operations to the sendUserOperation method, enabling batch processing with a single user interaction.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/using-smart-accounts/send-user-operations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState, useEffect } from \"react\";\nimport { Alert, View, Button } from \"react-native\";\nimport { User } from \"@account-kit/signer\";\nimport {\n  createModularAccountV2Client,\n  ModularAccountV2,\n} from \"@account-kit/smart-contracts\";\nimport {\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react-native\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { SmartAccountClient } from \"@aa-sdk/core\";\n\nexport default function MyOpSenderComponent() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({\n    client,\n    waitForTxn: true,\n    onSuccess: ({ hash, request }) => {\n      // [optional] Do something with the hash and request\n    },\n    onError: (error) => {\n      // [optional] Do something with the error\n    },\n  });\n\n  const handleSendBatchUserOperations = () => {\n    sendUserOperation({\n      uo: [\n        {\n          target: \"0xTARGET_ADDRESS\",\n          data: \"0x\",\n          value: 0n,\n        },\n        {\n          target: \"0xTARGET_ADDRESS\",\n          data: \"0x\",\n          value: 0n,\n        },\n      ],\n    });\n  };\n\n  return (\n    <View>\n      <Button\n        onPress={handleSendBatchUserOperations}\n        disabled={isSendingUserOperation}\n        title={isSendingUserOperation ? \"Sending...\" : \"Send UO\"}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Gas Policy in Account Kit\nDESCRIPTION: Sets up Account Kit configuration with a global gas policy ID for sponsoring all UserOperations. Requires Alchemy API key and gas manager policy ID.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/sponsor-gas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  apiKey: \"ALCHEMY_API_KEY\",\n  chain: sepolia,\n  policyId: \"GAS_MANAGER_POLICY_ID\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Modular Account v2 Client for New Users in TypeScript\nDESCRIPTION: Sets up a Modular Account v2 client for new users or accounts without assets. It uses the Alchemy transport, Sepolia network, and generates a new private key for the signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst maV2Client = await createModularAccountV2Client({\n  mode: \"default\", // optional param to specify the MAv2 variant (either \"default\" or \"7702\")\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }), // Get your API key at https://dashboard.alchemy.com/apps or http(\"RPC_URL\") for non-alchemy infra\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating MultiOwnerLightAccount Client and Sending UserOperation in TypeScript\nDESCRIPTION: This code creates a MultiOwnerLightAccount client using the createMultiOwnerLightAccountAlchemyClient function from @account-kit/smart-contracts. It sets up the client with an Alchemy API key, Sepolia network, and a local account signer generated from a private key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/light-account/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst lightAccountClient = await createMultiOwnerLightAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"your-api-key\" })\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authentication in TypeScript with AA-SDK\nDESCRIPTION: Demonstrates how to authenticate users using OAuth providers like Google through the AA-SDK. Supports both redirect and popup authentication modes with configurable redirect URLs after successful authentication.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/social-login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nawait signer.authenticate({\n  type: \"oauth\",\n  authProviderId: \"google\", // Choose between the auth providers you selected to support from your auth policy\n  mode: \"redirect\", // Alternatively, you can choose \"popup\" mode\n  redirectUrl: \"/\", // After logging in, redirect to the index page\n});\n```\n\n----------------------------------------\n\nTITLE: Using getSigner Function with Account Kit Configuration in TypeScript\nDESCRIPTION: This example demonstrates how to use the getSigner function with an account configuration object to retrieve a signer instance.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSigner } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst signer = getSigner(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring SmartAccountClient with Custom Paymaster in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a SmartAccountClient with a custom paymaster using the createSmartAccountClient function from @aa-sdk/core. It includes setting up dummy paymaster data and an async function to handle actual paymaster interactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/paymasters.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst chain = sepolia;\nconst client = createSmartAccountClient({\n  chain,\n  transport: http(\"RPC_URL\"),\n  // sets the dummy paymasterAndData with paymaster address appended with some dummy paymasterData\n  // that looks like a valid paymasterData\n  dummyPaymasterAndData: async (userop) => ({\n    ...userop,\n    paymasterAndData: `0x<PAYMASTER_ADDRESS><PAYMASTER_DUMMY_DATA>`,\n  }),\n  paymasterAndData: async (userop, opts) => {\n    // call your paymaster here to sponsor the userop\n    // leverage the `opts` field to apply any overrides\n    return {\n      ...userop,\n      paymasterAndData: \"0xresponsefromprovider\",\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Status with Account Kit React Hook\nDESCRIPTION: This code snippet shows how to use the useSignerStatus hook from Account Kit to determine if a user is authenticated. It can be used to conditionally render UI components based on the authentication status.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/email-magic-link.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n\n----------------------------------------\n\nTITLE: Implementing Alchemy Provider in NextJS Layout\nDESCRIPTION: This snippet demonstrates how to use the Alchemy Provider in a NextJS layout file. It includes setting up the initial state using cookies and wrapping the entire application with the Providers component.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/quickstart.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { config } from \"@/config\";\nimport { cookieToInitialState } from \"@account-kit/core\";\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport { headers } from \"next/headers\";\nimport \"./globals.css\";\nimport { Providers } from \"./providers\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Embedded Accounts UI Components Quickstart NextJs Template\",\n  description: \"Embedded Accounts UI Components Quickstart NextJs Template\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  // This will allow us to persist state across page boundaries (read more here: https://accountkit.alchemy.com/react/ssr#persisting-the-account-state)\n  const initialState = cookieToInitialState(\n    config,\n    headers().get(\"cookie\") ?? undefined\n  );\n\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <Providers initialState={initialState}>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ERC-7677 Paymaster with Multiple RPC Providers in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up an ERC-7677 paymaster with separate RPC providers for Paymaster and other services. It uses the split transport to route ERC-7677 traffic to a dedicated provider.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/paymasters.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createSmartAccountClient,\n  erc7677Middleware,\n  split,\n} from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst chain = sepolia;\nconst erc7677Methods = [\"pm_getPaymasterStubData\", \"pm_getPaymasterData\"];\nconst transport = split({\n  overrides: [\n    // NOTE: if you're splitting Node and Bundler traffic too, you can add the bundler config to this array\n    {\n      methods: erc7677Methods,\n      transport: http(\"PAYMASTER_RPC_URL\"),\n    },\n  ],\n  fallback: http(\"NODE_AND_BUNDLER_RPC_URL\"),\n});\n\nconst client = createSmartAccountClient({\n  chain,\n  transport,\n  ...erc7677Middleware(),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Alchemy Transport Configuration\nDESCRIPTION: Demonstrates the basic setup of alchemy transport using an API key. Supports chains with both Bundler and Node RPCs.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemy } from \"@account-kit/infra\";\n\nconst transport = alchemy({\n  // NOTE: you can also pass in an rpcUrl or jwt here or rpcUrl and jwt\n  apiKey: \"your-api-key\",\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a New Session Key with Permissions in TypeScript\nDESCRIPTION: Shows how to add a new session key and set its initial permissions using the addSessionKey function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\nimport { keccak256 } from \"viem\";\nimport { client } from \"./base-client\";\n\nconst result = await client.addSessionKey({\n  key: \"0xSessionKeyAddress\",\n  // tag is an identifier for the emitted SessionKeyAdded event\n  tag: keccak256(new TextEncoder().encode(\"session-key-tag\")),\n  permissions: new SessionKeyPermissionsBuilder().encode(),\n});\n```\n\n----------------------------------------\n\nTITLE: Using createLightAccountClient with Sepolia Network\nDESCRIPTION: Demonstrates how to create a light account client using the Sepolia testnet chain, HTTP transport, and a local account signer with a generated private key. Shows complete implementation with necessary imports and configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createLightAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\";\n\nconst account = await createLightAccountClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multisig Modular Account Client in TypeScript\nDESCRIPTION: Demonstrates the usage of createMultisigModularAccountClient function to create a multisig modular account client. It includes importing necessary dependencies, setting up configuration parameters, and calling the function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultisigModularAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigModularAccountClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst accountClient = await createMultisigModularAccountClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  owners: [], // other owners on the account\n  threshold: 2, // 2 of N signatures\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Alchemy Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and export a configuration for Alchemy Account Kit, including API key setup, chain selection, and authentication UI customization. It also exports a QueryClient instance.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, cookieStorage } from \"@account-kit/react\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { sepolia } from \"@account-kit/infra\";\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your_api_key\" }),\n    chain: sepolia,\n    ssr: true,\n    storage: cookieStorage,\n    enablePopupOauth: true,\n    sessionConfig: {\n      expirationTimeMs: 1000 * 60 * 60,\n    },\n  },\n  {\n    auth: {\n      sections: [\n        [{ type: \"email\" }],\n        [\n          { type: \"passkey\" },\n          { type: \"social\", authProviderId: \"google\", mode: \"popup\" },\n          { type: \"social\", authProviderId: \"facebook\", mode: \"popup\" },\n        ],\n        [\n          {\n            type: \"external_wallets\",\n            walletConnect: { projectId: \"your-project-id\" },\n          },\n        ],\n      ],\n      addPasskeyOnSignup: true,\n      showSignInText: true,\n    },\n  }\n);\n\nexport const queryClient = new QueryClient();\n```\n\n----------------------------------------\n\nTITLE: Creating Alchemy Account Provider in React\nDESCRIPTION: This snippet shows how to create a Providers component that wraps the application with AlchemyAccountProvider and QueryClientProvider. It's designed for use in a NextJS app with the app router.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { config, queryClient } from \"@/config\";\nimport { AlchemyClientState } from \"@account-kit/core\";\nimport { AlchemyAccountProvider } from \"@account-kit/react\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { PropsWithChildren } from \"react\";\n\nexport const Providers = (\n  props: PropsWithChildren<{ initialState?: AlchemyClientState }>\n) => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AlchemyAccountProvider\n        config={config}\n        queryClient={queryClient}\n        initialState={props.initialState}\n      >\n        {props.children}\n      </AlchemyAccountProvider>\n    </QueryClientProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Passkey and Email in TypeScript\nDESCRIPTION: Demonstrates how to authenticate a user using a passkey and associated email address. The example shows the basic authentication call using the signer object that returns an authentication result.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/passkey-signup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst result = await signer.authenticate({\n  type: \"passkey\",\n  email: \"user@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Kit with UI Settings\nDESCRIPTION: Demonstrates how to create a complete configuration including UI settings for authentication components, chain settings, and transport configuration. Shows initialization of QueryClient and custom UI configuration for authentication sections.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/functions/createConfig.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sepolia, alchemy } from \"@account-kit/infra\"\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\"\nimport { QueryClient } from \"@tanstack/react-query\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\nillustrationStyle: \"linear\",\nauth: {\nsections: [[{ type: \"email\" }], [{ type: \"passkey\" }]],\naddPasskeyOnSignup: true,\n},\n}\n\nconst config = createConfig({\ntransport: alchemy({ apiKey: \"your_api_key\" })\nchain: sepolia,\nssr: true,\n}, uiConfig)\n\nexport const queryClient = new QueryClient();\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Account Client Setup in TypeScript\nDESCRIPTION: Demonstrates complete setup of a light account client using the Alchemy Smart Account Client with necessary imports and configuration. Includes creating the client instance with API key and chain specification.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/lightAccountClientActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lightAccountClientActions, createLightAccount } from \"@account-kit/smart-contracts\";\nimport { createAlchemySmartAccountClient } from \"@account-kit/infra\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst smartAccountClient = createAlchemySmartAccountClient({\naccount: await createLightAccount(...),\napiKey: \"your-api-key\",\nchain: sepolia,\n}).extend(lightAccountClientActions);\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Magic Link Authentication in TypeScript\nDESCRIPTION: Demonstrates the two-step process of email magic link authentication. First sends a magic link to the user's email, then handles the authentication once the user clicks the link and returns to the application with a bundle parameter.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/email-magic-link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\n// send the email\nawait signer.authenticate({\n  type: \"email\",\n  emailMode: \"magicLink\",\n  email: \"user@mail.com\",\n});\n\n// later once the user has clicked the link\nconst url = new URL(window.location.href);\nconst bundle = url.searchParams.get(\"bundle\");\nif (!bundle) {\n  throw new Error(\"No bundle found in URL\");\n}\n\nawait signer.authenticate({\n  type: \"email\",\n  bundle,\n});\n```\n\n----------------------------------------\n\nTITLE: Using alchemyUserOperationSimulator with SmartAccountClient in TypeScript\nDESCRIPTION: This example illustrates how to configure a `SmartAccountClient` from `@aa-sdk/core` to use `alchemyUserOperationSimulator` for simulating user operations. It involves creating an `AlchemyTransport` with an API key and passing the simulator function, initialized with the transport, to the `userOperationSimulator` option during client creation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyUserOperationSimulator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  alchemyUserOperationSimulator,\n  alchemy,\n  sepolia,\n} from \"@account-kit/infra\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst alchemyTransport = alchemy({\n  chain: sepolia,\n  apiKey: \"your-api-key\",\n});\n\nconst client = createSmartAccountClient({\n  chain: sepolia,\n  userOperationSimulator: alchemyUserOperationSimulator(alchemyTransport),\n  ...otherParams,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing EIP-7702 Smart Account Client\nDESCRIPTION: Demonstrates how to create and use a ModularAccountV2Client for sending user operations with EIP-7702 support. Includes initialization and transaction sending examples.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/using-7702.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { signer } from \"./signer.js\";\n\n// Constructing the smart account client\nconst smartAccountClient = await createModularAccountV2Client({\n  mode: \"7702\",\n  transport: alchemy({ apiKey: \"your-api-key\" }), // Get your API key: https://dashboard.alchemy.com/apps\n  chain: sepolia,\n  signer,\n});\n\n// Sending a user operation\nconst uoHash = await smartAccountClient.sendUserOperation({\n  uo: {\n    target: zeroAddress,\n    value: 0n,\n    data: \"0x\",\n  },\n});\n\nconst txnHash = await smartAccountClient.waitForUserOperationTransaction(\n  uoHash\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Modular Account V2 Client\nDESCRIPTION: Initializes a Modular Account V2 client with configuration options including chain selection, transport layer setup, and signer configuration. Supports both 'default' and '7702' modes for different use cases.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst accountClient = await createModularAccountV2Client({\n  mode: \"default\", // optional param to specify the MAv2 variant (either \"default\" or \"7702\")\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }), // Get your API key at https://dashboard.alchemy.com/apps or http(\"RPC_URL\") for non-alchemy infra\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Passkey to an Authenticated User with Account Kit Core in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a passkey to a user's account after they have been authenticated. It uses the watchSignerStatus method to monitor the signer's connection status and automatically adds a passkey once the signer is connected. The getSigner method retrieves the signer instance based on the provided configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/add-passkey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSignerStatus, getSigner } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst signerSubscription = watchSignerStatus(config)(async (status) => {\n  if (status.isConnected) {\n    const signer = getSigner(config);\n\n    await signer.addPasskey();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating AlchemyAccountProvider with React Query and Alchemy Config - React TSX\nDESCRIPTION: This code demonstrates instantiating and configuring AlchemyAccountProvider in a typical React app setup, including usage of createConfig to configure access to the Alchemy API, and integrating with React Query via QueryClientProvider. Required dependencies are @account-kit/react, @account-kit/infra for chain info, and @tanstack/react-query for state management. The App function accepts a children prop and provides context to all descendant React components via AlchemyAccountProvider, requiring apiKey and chain configuration. Inputs include configuration objects and children components; output is the provider-wrapped application tree. Ensure API keys and networks are valid, and required providers are nested correctly.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/components/AlchemyAccountProvider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountProvider, createConfig } from \"@account-kit/react\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\n\nconst config = createConfig({\n  apiKey: \"your-api-key\",\n  chain: sepolia,\n});\n\nconst queryClient = new QueryClient();\n\nfunction App({ children }: React.PropsWithChildren) {\n  return (\n    <QueryClientProvider queryClient={queryClient}>\n      <AlchemyAccountProvider config={config} queryClient={queryClient}>\n        {children}\n      </AlchemyAccountProvider>\n    </QueryClientProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using toViemAccount Method with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to create an AlchemyWebSigner instance and convert it to a viem LocalAccount using the toViemAccount method. This example configures the signer with an RPC URL and iframe container ID.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/toViemAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst account = signer.toViemAccount();\n```\n\n----------------------------------------\n\nTITLE: Using AccountSigner to get an account address\nDESCRIPTION: Demonstrates the process of creating an AccountSigner instance and using it to retrieve an account address. It includes creating a light account, setting up a provider, and calling the getAddress method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/getAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n\nconst address = await signer.getAddress();\n```\n\n----------------------------------------\n\nTITLE: Proposing User Operation with Multisig\nDESCRIPTION: Demonstrates how to propose a new user operation for review by multisig signers using the proposeUserOperation method. The method handles gas estimation, user operation construction, and optional paymaster integration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/multisig-plugin/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multisigAccountClient } from \"./client\";\nimport { createMultisigAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n\nconst {\n  request,\n  aggregatedSignature,\n  signatureObj: firstSig,\n} = await multisigAccountClient.proposeUserOperation({\n  uo: {\n    target: targetAddress,\n    data: \"0x\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Smart Contract Account in TypeScript\nDESCRIPTION: This snippet shows how to use the toSmartContractAccount function from @aa-sdk/core to create a custom smart contract account instance. This is useful when working with the Infra library or implementing custom account logic.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/concepts/smart-contract-account.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toSmartContractAccount } from '@aa-sdk/core';\n\nconst customAccount = toSmartContractAccount(/* custom account parameters */);\n```\n\n----------------------------------------\n\nTITLE: Using buildUserOperationFromTxs for Batch Transactions\nDESCRIPTION: Demonstrates how to use buildUserOperationFromTxs to create and send multiple transactions as a single UserOperation. Includes creating transaction requests, building the UserOperation struct, signing it, and sending it to the bundler.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/buildUserOperationFromTxs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RpcTransactionRequest } from \"viem\";\nimport { smartAccountClient } from \"./smartAccountClient\";\n\nconst requests: RpcTransactionRequest[] = [\n{\nfrom, // ignored\nto,\ndata: encodeFunctionData({\n  abi: ContractABI.abi,\n  functionName: \"func\",\n  args: [arg1, arg2, ...],\n}),\n},\n{\nfrom, // ignored\nto,\ndata: encodeFunctionData({\n  abi: ContractABI.abi,\n  functionName: \"func\",\n  args: [arg1, arg2, ...],\n}),\n},\n];\nconst uoStruct = await smartAccountClient.buildUserOperationFromTxs({\nrequests,\n});\n\n// signUserOperation signs the above unsigned user operation struct built\n// using the account connected to the smart account client\nconst request = await smartAccountClient.signUserOperation({ uoStruct });\n\n// You can use the BundlerAction `sendRawUserOperation` (packages/core/src/actions/bundler/sendRawUserOperation.ts)\n// to send the signed user operation request to the bundler, requesting the bundler to send the signed uo to the\n// EntryPoint contract pointed at by the entryPoint address parameter\nconst entryPointAddress = client.account.getEntryPoint().address;\nconst uoHash = await smartAccountClient.sendRawUserOperation({\nrequest,\nentryPoint: entryPointAddress,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Modular Account v2 Client for New Users in TypeScript\nDESCRIPTION: Constructs a Modular Account v2 client for new users or accounts without assets, specifying the mode, chain, transport, and signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst maV2Client = await createModularAccountV2Client({\n  mode: \"default\", // optional param to specify the MAv2 variant (either \"default\" or \"7702\")\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }), // Get your API key at https://dashboard.alchemy.com/apps or http(\"RPC_URL\") for non-alchemy infra\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Passkey-Only Login using useAuthenticate Hook (React)\nDESCRIPTION: This snippet shows how to use the `useAuthenticate` hook for a Passkey Login flow without requiring an email. It specifies the type as 'passkey' and sets `createNew: false` to ensure it attempts to log in with an existing passkey rather than creating a new one. Success and error handling callbacks are provided.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/passkey-login.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user wants to log in with just their passkey\nconst handlePasskeyOnlyLogin = () => {\n  authenticate(\n    {\n      type: \"passkey\",\n      createNew: false, // Important: set to false to prevent creating a new passkey\n    },\n    {\n      onSuccess: () => {\n        // Success - user authenticated with passkey\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using createBundlerClientFromExisting with a Public Client in TypeScript\nDESCRIPTION: Demonstrates creating a `BundlerClient` by calling `createBundlerClientFromExisting` with an existing `PublicClient` instance (e.g., created using `viem`). The resulting `bundlerClient` inherits the transport and chain from the `publicClient` and gains additional bundler-specific methods. Requires `viem` for `createPublicClient` and `@aa-sdk/core`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/createBundlerClientFromExisting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createPublicClient } from \"viem\";\nimport { createBundlerClientFromExisting } from \"@aa-sdk/core\";\n\nconst publicClient = createPublicClient(...);\nconst bundlerClient = createBundlerClientFromExisting(publicClient);\n```\n\n----------------------------------------\n\nTITLE: Sending Single User Operation with Alchemy SDK\nDESCRIPTION: Demonstrates how to send a single user operation using the Alchemy client. The operation includes a target address, data payload, and value parameter.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/infra/send-user-operations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./client\";\n\nconst { hash } = await client.sendUserOperation({\n  uo: {\n    target: \"0xTARGET_ADDRESS\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Magic Link Email with Custom UI\nDESCRIPTION: Implementation of sending a magic link email using the useAuthenticate hook from Account Kit. This handles the first step of the authentication process by prompting the user for their email and sending the magic link.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/email-magic-link.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user submits their email\nconst handleSendMagicLink = (email: string) => {\n  authenticate(\n    {\n      type: \"email\",\n      emailMode: \"magicLink\",\n      email,\n    },\n    {\n      onSuccess: () => {\n        // Success - inform user to check their email\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing AlchemyAccountProvider in React Application\nDESCRIPTION: Demonstrates the complete setup of AlchemyAccountProvider including configuration with API key, chain selection, and QueryClient integration. Shows how to wrap application components with the necessary providers.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/components/AlchemyAccountProvider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountProvider, createConfig } from \"@account-kit/react\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\n\nconst config = createConfig({\n  apiKey: \"your-api-key\",\n  chain: sepolia,\n});\n\nconst queryClient = new QueryClient();\n\nfunction App({ children }: React.PropsWithChildren) {\n  return (\n    <QueryClientProvider queryClient={queryClient}>\n      <AlchemyAccountProvider config={config} queryClient={queryClient}>\n        {children}\n      </AlchemyAccountProvider>\n    </QueryClientProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Account Client with Alchemy Gas Manager Middleware in TypeScript\nDESCRIPTION: This snippet shows how to create a smart account client and integrate the alchemyGasManagerMiddleware with it, specifying the chain (sepolia), transport method (http), and a policyId to configure the middleware. Dependencies include the @account-kit/infra and viem packages. The key parameter 'policyId' configures gas sponsorship eligibility via Alchemy's Gas Manager. The function returns a partial middleware configuration required for facilitating sponsored transactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyGasManagerMiddleware.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { sepolia, alchemyGasManagerMiddleware } from \"@account-kit/infra\";\nimport { http } from \"viem\";\n\nconst client = createSmartAccountClient({\n  transport: http(\"rpc-url\"),\n  chain: sepolia,\n  ...alchemyGasManagerMiddleware(\"policyId\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SmartAccountClient with ERC-7677 Paymaster (Multiple RPCs) in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a SmartAccountClient with an ERC-7677 compliant paymaster using separate RPC providers for paymaster and other operations. It uses the split function to route ERC-7677 traffic to a different provider.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/paymasters.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createSmartAccountClient,\n  erc7677Middleware,\n  split,\n} from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst chain = sepolia;\nconst erc7677Methods = [\"pm_getPaymasterStubData\", \"pm_getPaymasterData\"];\nconst transport = split({\n  overrides: [\n    // NOTE: if you're splitting Node and Bundler traffic too, you can add the bundler config to this array\n    {\n      methods: erc7677Methods,\n      transport: http(\"PAYMASTER_RPC_URL\"),\n    },\n  ],\n  fallback: http(\"NODE_AND_BUNDLER_RPC_URL\"),\n});\n\nconst client = createSmartAccountClient({\n  chain,\n  transport,\n  ...erc7677Middleware(),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login Authentication with Account Kit Core\nDESCRIPTION: Shows how to implement OAuth-based social login using both redirect and popup flows. Supports providers like Google, Facebook, and Auth0, with configuration options for each flow type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/authenticate-users.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"./config\";\nimport { getSigner } from \"@account-kit/core\";\n\nconst signer = getSigner(config);\n\nif (!signer) {\n  // this can happen if your rendering this on the server\n  // the signer instance is only available on the client\n  throw new Error(\"Signer not found\");\n}\n\n// authenticate the user with a social login provider\nawait signer.authenticate({\n  // redirect login flow\n  type: \"oauth\",\n  authProviderId: \"google\",\n  mode: \"redirect\",\n  redirectUrl: \"/\", // After logging in, redirect to the index page\n});\n\nawait signer.authenticate({\n  // popup login flow\n  type: \"oauth\",\n  authProviderId: \"google\",\n  mode: \"popup\", // remember to set \"enablePopupOauth\" to \"true\" in config.ts to enable\n});\n```\n\n----------------------------------------\n\nTITLE: Third-Party Paymaster Integration (Stackup Example)\nDESCRIPTION: Implementation example for integrating non-ERC-7677 compliant paymasters, specifically using Stackup for ERC-20 gas payments.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/infra/sponsor-gas.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createSmartAccountClient,\n  split,\n  deepHexlify,\n  resolveProperties,\n} from \"@aa-sdk/core\";\nimport {\n  sepolia,\n  alchemyFeeEstimator,\n  createAlchemyPublicRpcClient,\n  alchemy,\n} from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { http, custom } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst alchemyTransport = alchemy({\n  apiKey: \"API_KEY\",\n});\n\nconst alchemyRpcClient = createAlchemyPublicRpcClient({\n  chain: sepolia,\n  transport: alchemyTransport,\n});\n\nconst transport = split({\n  overrides: [\n    {\n      methods: [\"pm_sponsorUserOperation\"],\n      transport: http(\"https://api.stackup.sh/v1/paymaster/STACKUP_API_KEY\"),\n    },\n  ],\n  fallback: alchemyTransport,\n});\n\nexport const client = createSmartAccountClient({\n  transport,\n  chain: sepolia,\n  account: await createLightAccount({\n    chain: sepolia,\n    transport: alchemyTransport,\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  }),\n  gasEstimator: async (userOp) => ({\n    ...userOp,\n    callGasLimit: \"0x0\",\n    preVerificationGas: \"0x0\",\n    verificationGasLimit: \"0x0\",\n  }),\n  feeEstimator: alchemyFeeEstimator(alchemyRpcClient),\n  dummyPaymasterAndData: async (userop) => ({\n    ...userop,\n    paymasterAndData: \"0x\",\n  }),\n  paymasterAndData: async (userop, { client, account }) => {\n    const pmResponse: any = await client.request({\n      method: \"pm_sponsorUserOperation\",\n      params: [\n        deepHexlify(await resolveProperties(userop)),\n        account.getEntryPoint().address,\n        {\n          type: \"payg\",\n        },\n      ],\n    });\n    return {\n      ...userop,\n      ...pmResponse,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Batch User Operations with Account Kit in TypeScript\nDESCRIPTION: This example shows how to send multiple user operations in a batch using the watchSmartAccountClient method. Like the single operation example, it creates a client subscription to handle state changes, but then sends an array of operations in a single transaction, which can be more efficient for multiple operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/send-user-operations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\nimport { config } from \"./config.js\";\n\n// How you actually store this state variable\n// depends on the framework you're using\nlet clientState;\n\n// The watch smart account client will handle all of the possible state changes\n// that can impact this client:\n//  - Signer status\n//  - Account instantiation\n//  - Chain changes\nconst clientSubscription = watchSmartAccountClient(\n  {\n    type: \"LightAccount\",\n  },\n  config\n)((clientState_) => {\n  clientState = clientState_;\n});\n\nif (clientState == null || clientState.isLoadingClient) {\n  console.log(\"Loading...\");\n}\n\nconst client = clientState.client;\n\nawait client.sendUserOperation({\n  uo: [\n    {\n      target: \"0xtarget\",\n      data: \"0x\",\n      value: 0n,\n    },\n    {\n      target: \"0xtarget\",\n      data: \"0x\",\n      value: 0n,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Sending a User Operation via Smart Account Client in TypeScript\nDESCRIPTION: This code snippet shows how to create a smart account client using the AA SDK, obtain a smart contract account, and then send a user operation object with specified target, data, and value. Dependencies include @aa-sdk/core, and it requires asynchronous context for handling Promises. The snippet expects valid input parameters such as target account address and calldata, and returns a Promise resolving to the result of the user operation. The client setup and account conversion must precede the user operation submission.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/sendUserOperation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSmartAccountClient, toSmartContractAccount } from \"@aa-sdk/core\";\n\nconst account = await toSmartContractAccount(...);\nconst result = await createSmartAccountClient(...).sendUserOperation({\n  uo: {\n    target: \"0x...\",\n    data: \"0x...\", // or \"0x\",\n    value: 0n, // optional\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UI for Social Login with Account Kit React Hooks\nDESCRIPTION: This code demonstrates how to implement custom social login authentication UI using Account Kit hooks. It includes examples for both redirect and popup authentication flows with Google as the provider.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/social-login.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate, isPending } = useAuthenticate();\n\n// For redirect flow\nconst handleGoogleRedirectLogin = () => {\n  authenticate(\n    {\n      type: \"oauth\",\n      authProviderId: \"google\",\n      mode: \"redirect\",\n      redirectUrl: \"/\", // Redirect to this page after authentication\n    },\n    {\n      onError: (error) => {\n        // Handle error\n        // The page will redirect on success, so no need for onSuccess handler\n      },\n    }\n  );\n};\n\n// For popup flow\nconst handleGooglePopupLogin = () => {\n  authenticate(\n    {\n      type: \"oauth\",\n      authProviderId: \"google\",\n      mode: \"popup\",\n    },\n    {\n      onSuccess: () => {\n        // Authentication successful!\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding Authentication Card in React Component\nDESCRIPTION: This code snippet shows how to create a React component that embeds the AuthCard for authentication. It imports the necessary dependencies and renders the AuthCard within a styled container.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/shared/embedded-auth-example.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { AuthCard } from \"@account-kit/react\";\n\nexport default function MyLoginPage() {\n  return (\n    <div className=\"flex flex-row p-4 bg-white border border-gray-200 rounded-lg\">\n      <AuthCard />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Kit with SSR and Cookie Storage\nDESCRIPTION: This snippet demonstrates the configuration setup for Account Kit with SSR and cookie storage enabled. It includes setting up the transport, chain, and storage options.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/ssr.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, cookieStorage } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { QueryClient } from \"@tanstack/react-query\";\n\nexport const queryClient = new QueryClient();\n\n// When using SSR, you need to be able to create a config per request\n// This is to avoid sharing state between requests (eg. signed in users)\nexport const config = () =>\n  createConfig({\n    transport: alchemy({ rpcUrl: \"/api/rpc\" }),\n    chain: sepolia,\n    ssr: true,\n    storage: cookieStorage,\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing createMultiOwnerModularAccount in TypeScript\nDESCRIPTION: Shows how to import the createMultiOwnerModularAccount function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerModularAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccount } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Using alchemyFeeEstimator with createSmartAccountClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a `SmartAccountClient` (from `@aa-sdk/core`) to use Alchemy for transaction fee estimation. It first imports necessary functions, creates an `AlchemyTransport` with chain details and an API key, and then passes the `alchemyFeeEstimator` function, initialized with the transport, to the `feeEstimator` option when calling `createSmartAccountClient`. Dependencies include `@account-kit/infra`, `@aa-sdk/core`, and a configured `AlchemyTransport`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyFeeEstimator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { alchemyFeeEstimator, alchemy } from \"@account-kit/infra\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst alchemyTransport = alchemy({\n  chain: sepolia,\n  apiKey: \"your-api-key\",\n});\n\nconst client = createSmartAccountClient({\n  feeEstimator: alchemyFeeEstimator(alchemyTransport),\n  ...otherParams,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Drop and Replace User Operation Hook in React Component\nDESCRIPTION: Demonstrates a complete example of implementing the useDropAndReplaceUserOperation hook in a React component, including sending and replacing user operations with error handling and loading states.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useDropAndReplaceUserOperation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  useDropAndReplaceUserOperation,\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react\";\n\nexport function ComponentWithDropAndReplaceUO() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperationAsync, isSendingUserOperation } =\n    useSendUserOperation({\n      client,\n    });\n  const { dropAndReplaceUserOperation, isDroppingAndReplacingUserOperation } =\n    useDropAndReplaceUserOperation({\n      client,\n      onSuccess: ({ hash, request }) => {\n        // [optional] Do something with the hash and request\n      },\n      onError: (error) => {\n        // [optional] Do something with the error\n      },\n      // [optional] ...additional mutationArgs\n    });\n\n  return (\n    <div>\n      <button\n        onClick={async () => {\n          const { request } = await sendUserOperationAsync({\n            uo: {\n              target: \"0xTARGET_ADDRESS\",\n              data: \"0x\",\n              value: 0n,\n            },\n          });\n\n          dropAndReplaceUserOperation({\n            uoToDrop: request,\n          });\n        }}\n        disabled={isSendingUserOperation || isDroppingAndReplacingUserOperation}\n      >\n        {isSendingUserOperation\n          ? \"Sending...\"\n          : isDroppingAndReplacingUserOperation\n          ? \"Replacing...\"\n          : \"Send then Replace UO\"}\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Transaction with aa-sdk in TypeScript\nDESCRIPTION: This example illustrates usage of the sendTransaction method by first importing a smart account client factory from @aa-sdk/core, then sending a transaction through the client. Required parameters include the transaction destination address (to), call data, and optionally value and account. The result is a Promise resolving to a hex string transaction hash. The client must be properly instantiated and connected; optional overrides and context can further customize user operation behavior.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/sendTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with sendTransaction\nconst client = createSmartAccountClient(...);\nconst result = await client.sendTransaction({\n  to: \"0x...\",\n  data: \"0x...\", // or \"0x\",\n  value: 0n, // optional\n  account, // only required if the client above is not connected to an account\n});\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner from @aa-sdk/ethers\nDESCRIPTION: Shows how to import the AccountSigner class from the @aa-sdk/ethers package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/getAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Using Alchemy Signer as Owner on Smart Contract Account in TypeScript\nDESCRIPTION: Code to create a Light Account using the authenticated Alchemy Signer as the owner. It uses the createLightAccount function from @account-kit/smart-contracts and configures it with the signer, chain, and transport.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/quickstart.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { http } from \"viem\";\nimport { signer } from \"./signer\";\n\nconst account = await createLightAccount({\n  signer,\n  chain: sepolia,\n  transport: http(`${sepolia.rpcUrls.alchemy.http[0]}/API_KEY`),\n});\n```\n\n----------------------------------------\n\nTITLE: Using buildUserOperationFromTx to Create and Send a User Operation in TypeScript\nDESCRIPTION: Demonstrates how to use the buildUserOperationFromTx function to create an unsigned user operation, sign it, and send it to a bundler. It includes creating a transaction object, building the user operation, signing it, and sending it to the EntryPoint contract.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/buildUserOperationFromTx.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RpcTransactionRequest } from \"viem\";\nimport { smartAccountClient } from \"./smartAccountClient\";\n// buildUserOperationFromTx converts a traditional Ethereum transaction and returns\n// the unsigned user operation struct after constructing the user operation struct\n// through the middleware pipeline\nconst tx: RpcTransactionRequest = {\nfrom, // ignored\nto,\ndata: encodeFunctionData({\nabi: ContractABI.abi,\nfunctionName: \"func\",\nargs: [arg1, arg2, ...],\n}),\n};\nconst uoStruct = await smartAccountClient.buildUserOperationFromTx(tx);\n\n// signUserOperation signs the above unsigned user operation struct built\n// using the account connected to the smart account client\nconst request = await smartAccountClient.signUserOperation({ uoStruct });\n\n// You can use the BundlerAction `sendRawUserOperation` (packages/core/src/actions/bundler/sendRawUserOperation.ts)\n// to send the signed user operation request to the bundler, requesting the bundler to send the signed uo to the\n// EntryPoint contract pointed at by the entryPoint address parameter\nconst entryPointAddress = client.account.getEntryPoint().address;\nconst uoHash = await smartAccountClient.sendRawUserOperation({ request, entryPoint: entryPointAddress });\n```\n\n----------------------------------------\n\nTITLE: Validating TOTP Code for MFA in Alchemy Signer\nDESCRIPTION: Validates the Time-based One-Time Password (TOTP) code from the user's authenticator app as the final step in the multi-factor authentication process. This completes the authentication flow when MFA is enabled.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst user = await signer?.validateMultiFactors({\n  multiFactorCode: totpCode,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Magic Link Redirect in React with Account Kit\nDESCRIPTION: This snippet demonstrates how to handle the redirect after a user clicks the magic link in their email. It extracts the authentication bundle from the URL and completes the authentication process using the useAuthenticate hook.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/email-magic-link.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// Handle the redirect when the component mounts\nuseEffect(() => {\n  const handleRedirect = () => {\n    const url = new URL(window.location.href);\n    const bundle = url.searchParams.get(\"bundle\");\n\n    if (bundle) {\n      authenticate(\n        {\n          type: \"email\",\n          bundle,\n        },\n        {\n          onSuccess: () => {\n            // Authentication successful!\n          },\n          onError: (error) => {\n            // Handle error\n          },\n        }\n      );\n    }\n  };\n\n  handleRedirect();\n}, [authenticate]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Login with Email in Account Kit\nDESCRIPTION: Shows how to implement passkey login with email identification using Account Kit hooks. This approach is useful when the user's passkey is associated with an email address to help identify the correct passkey.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/passkey-login.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user wants to log in with their passkey and email\nconst handlePasskeyLogin = (email: string) => {\n  authenticate(\n    {\n      type: \"passkey\",\n      email,\n    },\n    {\n      onSuccess: () => {\n        // Success - user authenticated with passkey\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Passkey and Email in TypeScript\nDESCRIPTION: Demonstrates how to authenticate a user using a combination of passkey and email address. The authentication process checks for existing accounts and can be used for both signup and login flows. Requires email validation to prevent access loss.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/passkey-signup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst result = await signer.authenticate({\n  type: \"passkey\",\n  email: \"user@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Account with AlchemySignerWebClient in TypeScript\nDESCRIPTION: Demonstrates how to initialize the AlchemySignerWebClient with configuration options and create a new account using email authentication. The example shows setup with API key and iframe configuration followed by account creation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/createAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.createAccount({\n  type: \"email\",\n  email: \"you@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using multisigPluginActions with a ModularAccountAlchemyClient in TypeScript\nDESCRIPTION: This example demonstrates how to use the multisigPluginActions function with a ModularAccountAlchemyClient. It extends the client with multisig plugin actions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/multisigPluginActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountAlchemyClient, multisigPluginActions } from \"@account-kit/smart-contracts\";\n\nconst client = createModularAccountAlchemyClient(...).extend(multisigPluginActions);\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionKeyPluginActions with Client\nDESCRIPTION: Demonstrates how to create a modular account client with session key plugin actions. The client is extended with session key management capabilities.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/sessionKeyPluginActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountAlchemyClient, sessionKeyPluginActions } from \"@account-kit/smart-contracts\";\n\nconst client = createModularAccountAlchemyClient(...).extend(sessionKeyPluginActions);\n```\n\n----------------------------------------\n\nTITLE: Using watchAccount to Monitor Account Changes in TypeScript\nDESCRIPTION: Illustrates how to use watchAccount to observe changes to a specific account type ('LightAccount'), providing a configuration object and a callback to handle change events. Dependencies include @account-kit/core, a valid configuration object (typically created using createConfig), and a callback (e.g., console.log) to process each account update. Input parameters: the account type as a string, a configuration object, and a callback function; the function returns an unsubscribe handle. The example includes both the import and usage, highlighting practical application and extensibility.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { watchAccount } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchAccount(\"LightAccount\", config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Viewing Session Key Permissions in TypeScript\nDESCRIPTION: Demonstrates how to view the current permissions of a session key using the view functions provided by the Session Key Plugin.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionKeyPlugin = new SessionKeyPlugin();\nconst account = \"0x...\"; // The account address\nconst sessionKey = \"0x...\"; // The session key address\n\nconst accessControlType = await sessionKeyPlugin.getAccessControlType(account, sessionKey);\nconst timeRange = await sessionKeyPlugin.getKeyTimeRange(account, sessionKey);\nconst nativeTokenSpendLimit = await sessionKeyPlugin.getNativeTokenSpendLimitInfo(account, sessionKey);\nconst gasSpendLimit = await sessionKeyPlugin.getGasSpendLimit(account, sessionKey);\nconst erc20SpendLimit = await sessionKeyPlugin.getERC20SpendLimitInfo(account, sessionKey, tokenAddress);\nconst requiredPaymaster = await sessionKeyPlugin.getRequiredPaymaster(account, sessionKey);\n\nconsole.log(\"Access Control Type:\", accessControlType);\nconsole.log(\"Time Range:\", timeRange);\nconsole.log(\"Native Token Spend Limit:\", nativeTokenSpendLimit);\nconsole.log(\"Gas Spend Limit:\", gasSpendLimit);\nconsole.log(\"ERC20 Spend Limit:\", erc20SpendLimit);\nconsole.log(\"Required Paymaster:\", requiredPaymaster);\n```\n\n----------------------------------------\n\nTITLE: Using addContractFunctionAccessEntry in TypeScript\nDESCRIPTION: Demonstrates how to use the addContractFunctionAccessEntry method of the SessionKeyPermissionsBuilder class. It creates a new instance of the builder and adds a contract method entry with specified parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addContractFunctionAccessEntry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.addContractAddressAccessEntry({\n  contractAddress: \"0x1234\",\n  methodSelector: \"0x45678\",\n  isOnList: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Permissions for a New Session Key\nDESCRIPTION: This snippet demonstrates how to set initial permissions when adding a new session key using the addSessionKey function. It uses the SessionKeyPermissionBuilder to generate the permissions data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionKeyPlugin = new SessionKeyPlugin()\nconst publicKey = \"0x...\"\nconst permissionsData = PermissionBuilder.create({}).getPermissionData()\n\nconst addKeyCalldata = sessionKeyPlugin.encodeCalldata(\"addSessionKey\", [\n  publicKey,\n  permissionsData,\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop and Replace for Failed User Operations in TypeScript\nDESCRIPTION: This example demonstrates the workflow for handling failing user operations using drop and replace functionality. It shows how to send a user operation, wait for it to be mined, catch failures, and then resubmit the operation with the dropAndReplaceUserOperation method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/infra/drop-and-replace.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./client\";\n\n// 1. send a user operation\nconst { hash, request } = await client.sendUserOperation({\n  uo: {\n    target: \"0xTARGET_ADDRESS\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n\ntry {\n  // 2. wait for it to be mined\n  const txHash = await client.waitForUserOperationTransaction({ hash });\n} catch (e) {\n  // 3. if it fails, resubmit the user operation via drop and replace\n  const { hash: newHash } = await client.dropAndReplaceUserOperation({\n    uoToDrop: request,\n  });\n\n  // 4. wait for the new user operation to be mined\n  await client.waitForUserOperationTransaction({ hash: newHash });\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Basic and Hooked Session Keys in TypeScript\nDESCRIPTION: This code demonstrates how to remove session keys from a Modular Account V2 using the uninstallValidation method. It shows examples of removing both a basic session key and a session key with hooks, highlighting the configuration required for each scenario.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/session-keys/removing-session-keys.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  modularAccountAbi,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\n\n// Removing a basic session key\nawait client.uninstallValidation({\n  moduleAddress: getDefaultSingleSignerValidationModuleAddress(client.chain),\n  entityId: sessionKeyEntityId,\n  uninstallData: SingleSignerValidationModule.encodeOnUninstallData({\n    entityId: sessionKeyEntityId,\n  }),\n  hookUninstallDatas: [],\n});\n\n// Removing a session key with hooks\nawait client.uninstallValidation({\n  moduleAddress: getDefaultSingleSignerValidationModuleAddress(client.chain),\n  entityId: sessionKeyEntityId,\n  uninstallData: SingleSignerValidationModule.encodeOnUninstallData({\n    entityId: sessionKeyEntityId,\n  }),\n  hookUninstallDatas: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Checking MFA Availability in React with Account Kit\nDESCRIPTION: This snippet demonstrates how to check if multi-factor authentication is available for the current user using the useMFA hook from Account Kit in a React component.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/mfa/setup-mfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useMFA } from \"@account-kit/react\";\n\n// Inside your component\nconst { isReady } = useMFA();\n\n// Only show MFA setup options if available\nif (isReady) {\n  // Render MFA setup UI\n} else {\n  // User needs to authenticate first\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Signup without Email in Custom UI\nDESCRIPTION: This code demonstrates how to implement Passkey Signup without an associated email address. It uses the useAuthenticate hook with the createNew and username parameters to create a new passkey for the user.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/passkey-signup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user wants to create a passkey without email\nconst handlePasskeyOnlySignup = (username: string) => {\n  authenticate(\n    {\n      type: \"passkey\",\n      createNew: true,\n      username, // A unique identifier for the passkey\n    },\n    {\n      onSuccess: () => {\n        // Success - passkey created and user authenticated\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Client Gas Policy in Account Kit\nDESCRIPTION: Demonstrates how to set up gas policy for specific Smart Account Client instances using the watchSmartAccountClient function. Allows for more granular control over which UserOperations are sponsored.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/sponsor-gas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\n// How you actually store this state variable\n// depends on the framework you're using\nlet clientState;\n\n// The watch smart account client will handle all of the possible state changes\n// that can impact this client:\n//  - Signer status\n//  - Account instantiation\n//  - Chain changes\nconst clientSubscription = watchSmartAccountClient(\n  {\n    type: \"LightAccount\",\n    policyId: \"GAS_MANAGER_POLICY_ID\",\n  },\n  config\n)((clientState_) => {\n  clientState = clientState_;\n});\n\n// .. do stuff with the client state\n```\n\n----------------------------------------\n\nTITLE: Configuring SmartAccountClient with ERC-7677 Paymaster (Single RPC) in TypeScript\nDESCRIPTION: This code shows how to set up a SmartAccountClient with an ERC-7677 compliant paymaster using a single RPC provider. It utilizes the erc7677Middleware function from @aa-sdk/core to handle ERC-7677 specific interactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/paymasters.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient, erc7677Middleware } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst chain = sepolia;\nconst client = createSmartAccountClient({\n  chain,\n  // This example assumes that your RPC provider supports the ERC-7677 methods\n  transport: http(\"RPC_URL\"),\n  ...erc7677Middleware(),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Modular Account Client with Alchemy Infra in TypeScript\nDESCRIPTION: Code snippet demonstrating how to create a Modular Account client using Alchemy infrastructure. It imports necessary modules, sets up the client with an API key, specifies the network chain, and configures a signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst alchemyAccountClient = await createModularAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Complete OTP Sign-In Component in React Native\nDESCRIPTION: This snippet provides a complete implementation of an OTP-based sign-in component in React Native. It includes functionality for sending an OTP, displaying a popup for OTP entry, and handling the authentication process using the Account Kit SDK.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/signer/authenticating-users/authenticating-with-otp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useState } from \"react\";\nimport { View, Text, TextInput, Button } from \"react-native\";\nimport { useAuthenticate, useUser } from \"@account-kit/react-native\";\n\nimport { OtpPopUp } from \"./otp-popup\";\n\nexport const SignInWithOtp = () => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [showOtp, setShowOtp] = useState<boolean>(false);\n\n  const [loading, setLoading] = useState<boolean>(false);\n  const { authenticate } = useAuthenticate();\n  const { user } = useUser();\n\n  // Make an authentication request to a user's email\n  const performAuthRequest = useCallback(\n    (email: string) => {\n      try {\n        authenticate({\n          email,\n          type: \"email\",\n          emailMode: \"otp\",\n        });\n\n        setLoading(true);\n        setShowOtp(true);\n      } catch (e) {\n        Alert.alert(\"Error sending OTP Code. Check logs for more details.\");\n\n        console.log(\"Error seding OTP CODE: \", e);\n      }\n    },\n    [authenticate]\n  );\n\n  const completeAuth = useCallback(() => {\n    setLoading(false);\n    setShowOtp(false);\n  }, []);\n\n  return (\n    <View>\n      {user && (\n        <>\n          <Text>User Authenticated As: {user.email}</Text>\n          <Text>{user.address}</Text>\n        </>\n      )}\n\n      <Text style={{ fontSize: 16 }}>Enter Email</Text>\n      <TextInput\n        value={email}\n        style={{ fontSize: 20 }}\n        onChangeText={setEmail}\n        placeholder=\"Enter Email\"\n        autoCapitalize=\"none\"\n      />\n      <Button\n        title={loading ? \"Loading\" : \"Sign In\"}\n        disabled={loading}\n        onPress={() => performAuthRequest(email)}\n      />\n\n      <OtpPopUp\n        show={showOtp}\n        completeAuth={completeAuth}\n        close={() => {\n          setShowOtp(false);\n          setLoading(false);\n        }}\n      />\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Email OTP Authentication in React with Account Kit\nDESCRIPTION: This snippet demonstrates how to configure Email OTP authentication using the AlchemyAccountsUIConfig in a React application. It sets up the UI configuration for email authentication with customizable options.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/email-otp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        {\n          type: \"email\",\n          emailMode: \"otp\",\n\n          // Optional customizations:\n          buttonLabel: \"Continue with Email\",\n          placeholder: \"Enter your email address\",\n        },\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Using signAuthorization with AlchemyWebSigner - TypeScript\nDESCRIPTION: Demonstrates how to create an AlchemyWebSigner instance and use it to sign an authorization. Shows configuration of RPC URL and iframe container settings, followed by calling signAuthorization with contract address, chain ID, and nonce parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signAuthorization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst tx = await signer.signAuthorization({\n  contractAddress: \"0x1234123412341234123412341234123412341234\",\n  chainId: 1,\n  nonce: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Smart Account Client with ERC-7677 Middleware in TypeScript\nDESCRIPTION: This example shows how to set up a smart account client leveraging the erc7677Middleware with the @aa-sdk/core library. It integrates an HTTP transport and Sepolia chain configuration using the viem library. The ERC-7677 middleware is assumed to provide paymaster-related methods, requiring the RPC provider to support ERC-7677 specific methods (pm_getPaymasterStubData and pm_getPaymasterData). Inputs include the RPC URL and chain, and the output is a client with middleware attached for enhanced user operation handling.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/erc7677Middleware.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSmartAccountClient, erc7677Middleware } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst client = createSmartAccountClient({\n  transport: http(\"rpc-url\"),\n  chain: sepolia,\n  // this assumes that your RPC provider supports the ERC-7677 methods AND takes no context\n  ...erc7677Middleware(),\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Email and Passkey in TypeScript\nDESCRIPTION: This snippet demonstrates how to authenticate a user using their email and passkey. It uses the signer.authenticate method with the 'passkey' type and requires an email address.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/passkey-login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst result = await signer.authenticate({\n  type: \"passkey\",\n  email: \"user@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining BundlerClient Type in TypeScript\nDESCRIPTION: Defines the BundlerClient type, a custom viem Client that extends PublicClient with BundlerActions. It serves as an intermediary between client applications and the Bundler, supporting both Public Actions and Bundler-specific functionalities.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/client/bundlerClient.ts:BundlerClient]\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop and Replace User Operation Functionality in React Component\nDESCRIPTION: A complete example showing how to use the useDropAndReplaceUserOperation hook in a React component along with useSendUserOperation to first send an operation and then replace it.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useDropAndReplaceUserOperation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  useDropAndReplaceUserOperation,\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react\";\n\nexport function ComponentWithDropAndReplaceUO() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperationAsync, isSendingUserOperation } =\n    useSendUserOperation({\n      client,\n    });\n  const { dropAndReplaceUserOperation, isDroppingAndReplacingUserOperation } =\n    useDropAndReplaceUserOperation({\n      client,\n      onSuccess: ({ hash, request }) => {\n        // [optional] Do something with the hash and request\n      },\n      onError: (error) => {\n        // [optional] Do something with the error\n      },\n      // [optional] ...additional mutationArgs\n    });\n\n  return (\n    <div>\n      <button\n        onClick={async () => {\n          const { request } = await sendUserOperationAsync({\n            uo: {\n              target: \"0xTARGET_ADDRESS\",\n              data: \"0x\",\n              value: 0n,\n            },\n          });\n\n          dropAndReplaceUserOperation({\n            uoToDrop: request,\n          });\n        }}\n        disabled={isSendingUserOperation || isDroppingAndReplacingUserOperation}\n      >\n        {isSendingUserOperation\n          ? \"Sending...\"\n          : isDroppingAndReplacingUserOperation\n          ? \"Replacing...\"\n          : \"Send then Replace UO\"}\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch User Operations in React Native with Account Kit\nDESCRIPTION: Example component demonstrating how to send multiple user operations in a single transaction using the useSendUserOperation hook. Shows batch transaction handling with multiple targets.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/using-smart-accounts/send-user-operations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState, useEffect } from \"react\";\nimport { Alert, View, Button } from \"react-native\";\nimport { User } from \"@account-kit/signer\";\nimport {\n  createModularAccountV2Client,\n  ModularAccountV2,\n} from \"@account-kit/smart-contracts\";\nimport {\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react-native\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { SmartAccountClient } from \"@aa-sdk/core\";\n\nexport default function MyOpSenderComponent() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({\n    client,\n    waitForTxn: true,\n    onSuccess: ({ hash, request }) => {\n      // [optional] Do something with the hash and request\n    },\n    onError: (error) => {\n      // [optional] Do something with the error\n    },\n  });\n\n  const handleSendBatchUserOperations = () => {\n    sendUserOperation({\n      uo: [\n        {\n          target: \"0xTARGET_ADDRESS\",\n          data: \"0x\",\n          value: 0n,\n        },\n        {\n          target: \"0xTARGET_ADDRESS\",\n          data: \"0x\",\n          value: 0n,\n        },\n      ],\n    });\n  };\n\n  return (\n    <View>\n      <Button\n        onPress={handleSendBatchUserOperations}\n        disabled={isSendingUserOperation}\n        title={isSendingUserOperation ? \"Sending...\" : \"Send UO\"}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Kit Authentication in React\nDESCRIPTION: This code snippet defines the configuration for Account Kit authentication in a React application. It sets up authentication methods (email OTP in the example), configures the transport layer using Alchemy, and specifies the blockchain network (Sepolia). The config handles SSR support and popup OAuth settings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\n// Define UI configuration for authentication components\n// See individual login method pages for detailed configuration options\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        // Example: Email OTP authentication\n        {\n          type: \"email\",\n          emailMode: \"otp\",\n        },\n        // You can add more authentication methods here\n        // See login method pages for available options\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }), // TODO: add your Alchemy API key - https://dashboard.alchemy.com/accounts\n    chain: sepolia,\n    ssr: true, // more about ssr: https://accountkit.alchemy.com/react/ssr\n    enablePopupOauth: true, // must be set to \"true\" if you plan on using popup rather than redirect in the social login flow\n    // For more about persisting state with cookies, see: https://accountkit.alchemy.com/react/ssr#persisting-the-account-state\n    // storage: cookieStorage,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Batch User Operations with Account Kit\nDESCRIPTION: Shows how to send multiple user operations in a single batch using the watchSmartAccountClient from Account Kit's core package. The example demonstrates how to create a batch of operations by passing an array of transaction objects to the sendUserOperation method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/send-user-operations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\nimport { config } from \"./config.js\";\n\n// How you actually store this state variable\n// depends on the framework you're using\nlet clientState;\n\n// The watch smart account client will handle all of the possible state changes\n// that can impact this client:\n//  - Signer status\n//  - Account instantiation\n//  - Chain changes\nconst clientSubscription = watchSmartAccountClient(\n  {\n    type: \"LightAccount\",\n  },\n  config\n)((clientState_) => {\n  clientState = clientState_;\n});\n\nif (clientState == null || clientState.isLoadingClient) {\n  console.log(\"Loading...\");\n}\n\nconst client = clientState.client;\n\nawait client.sendUserOperation({\n  uo: [\n    {\n      target: \"0xtarget\",\n      data: \"0x\",\n      value: 0n,\n    },\n    {\n      target: \"0xtarget\",\n      data: \"0x\",\n      value: 0n,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Smart Account: Hoisting the Account\nDESCRIPTION: This snippet demonstrates how to hoist a smart account when creating a client, similar to the .connect method in previous versions. It shows the creation of a bundler client, a light account, and a smart account client with the account hoisted.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/migration-guide.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport {\n  createBundlerClient,\n  createSmartAccountClientFromExisting\n  LocalAccountSigner,\n  type Hex,\n} from \"@aa-sdk/core\";\nimport { sepolia } from \"@aa-sdk/core\";\nimport { http, custom } from \"viem\";\n\nconst chain = sepolia;\n\nconst client = createBundlerClient({\n  chain,\n  transport: http(\"JSON_RPC_URL\"),\n});\n\n// [!code focus:99]\nconst account = await createLightAccount({\n  signer,\n  transport: custom(client),\n  chain,\n});\n\nconst smartAccountClient = createSmartAccountClientFromExisting({\n  account, // [!code ++]\n  client,\n});\n\nconst { hash } = await smartAccountClient.sendUserOperation({\n  uo: {\n    target: \"0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef\",\n    data: \"0x\",\n    value: 10n,\n  },\n  account, // [!code --]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Social Providers with Auth0 in Account Kit React\nDESCRIPTION: Configuration code for implementing custom social providers via Auth0 in Account Kit. The example shows how to set up both standard social providers (Google) and custom Auth0 providers (GitHub and Twitter) with customized logos and display names.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/social-providers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        // Standard social providers\n        { type: \"social\", authProviderId: \"google\", mode: \"popup\" },\n\n        // Custom social providers via Auth0\n        {\n          type: \"social\",\n          authProviderId: \"auth0\",\n          // Specify the Auth0 connection to use directly\n          auth0Connection: \"github\",\n          displayName: \"GitHub\",\n          // Custom logo URL for the provider\n          logoUrl:\n            \"https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png\",\n          // Optional dark mode logo\n          logoUrlDark:\n            \"https://github.githubassets.com/assets/GitHub-Mark-Light-ea2971cee799.png\",\n          mode: \"popup\",\n        },\n        {\n          type: \"social\",\n          authProviderId: \"auth0\",\n          auth0Connection: \"twitter\",\n          displayName: \"Twitter\",\n          logoUrl: \"https://path-to-twitter-logo.png\",\n          mode: \"popup\",\n        },\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n    // Required for popup flow\n    enablePopupOauth: true,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Smart Account Client with EIP-7702 Support in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a Smart Account Client using the EIP-7702 supported version of a Modular Account v2. It uses the useSmartAccountClient hook from Account Kit to create a client with '7702' mode.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/using-7702.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSmartAccountClient } from \"@account-kit/react\";\n\nconst { client, address, isLoadingClient } = useSmartAccountClient({\n  type: \"ModularAccountV2\",\n  accountParams: {\n    mode: \"7702\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Gas Policy in Account Kit\nDESCRIPTION: Sets up Account Kit configuration with a global gas policy ID for transaction sponsorship. Requires Alchemy API key and uses Sepolia network.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/sponsor-gas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }),\n  chain: sepolia,\n  policyId: \"GAS_MANAGER_POLICY_ID\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using watchChain to Subscribe to Chain Changes in TypeScript\nDESCRIPTION: This example demonstrates how to use the `watchChain` function. It requires an `AlchemyAccountsConfig` object (referred to as `config` and assumed to be imported from `./config`). The function is called with the config and returns another function that accepts an `onChange` callback (here, `console.log`). This callback is executed whenever the connected chain changes. The outer function call returns an unsubscribe function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchChain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { watchChain } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchChain(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiOwner Plugin Actions with Smart Account Client\nDESCRIPTION: Demonstrates how to integrate multiOwnerPluginActions with a smart account client using the extend method. This setup enables access to owner management functions like readOwners and isOwnerOf.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/multiOwnerPluginActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerPluginActions } from \"@account-kit/smart-contracts\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst client = createSmartAccountClient(...).extend(multiOwnerPluginActions);\n```\n\n----------------------------------------\n\nTITLE: Using getAccountAddress to Retrieve Account Address in TypeScript\nDESCRIPTION: This example shows how to call the `getAccountAddress` function to retrieve a smart contract account address. It requires a `PublicClient` instance (`client`), the entry point definition (obtained using `getEntryPoint`), and an asynchronous function `getAccountInitCode` that provides the account's initialization code if the address isn't already known. The function returns a Promise resolving to the account's `Address`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/getAccountAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { getEntryPoint, getAccountAddress } from \"@aa-sdk/core\";\n\nconst accountAddress = await getAccountAddress({\n  client,\n  entryPoint: getEntryPoint(chain),\n  getAccountInitCode: async () => \"0x{factoryAddress}{factoryCallData}\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using createMultisigAccountAlchemyClient to Create a Multisig Account\nDESCRIPTION: Demonstrates how to create a multisig account client with Alchemy using the Sepolia testnet. The example shows setting up the transport, chain, signer, owners, and threshold configuration parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultisigAccountAlchemyClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\"\n\nconst alchemyAccountClient = await createMultisigAccountAlchemyClient({\ntransport: alchemy({ apiKey: \"your-api-key\" }),\nchain: sepolia,\nsigner: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\nowners: [...], // other owners on the account\nthreshold: 2, // 2 of N signatures\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP Code in Custom UI Implementation\nDESCRIPTION: This code demonstrates the second step of a custom Email OTP authentication flow. It shows how to verify the OTP code entered by the user using the useAuthenticate hook and handle success or error responses.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/email-otp.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user submits the OTP code\nconst handleVerifyCode = (otpCode: string) => {\n  authenticate(\n    {\n      type: \"otp\",\n      otpCode,\n    },\n    {\n      onSuccess: () => {\n        // Authentication successful!\n      },\n      onError: (error) => {\n        // Handle invalid code error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using verifyMfa with AlchemyWebSigner\nDESCRIPTION: Example of creating an AlchemyWebSigner instance and using the verifyMfa method to verify an MFA factor with a 6-digit code from an authenticator app.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/verifyMfa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.verifyMfa({\n  multiFactorId: \"factor-id\",\n  multiFactorCode: \"123456\", // 6-digit code from authenticator app\n});\n```\n\n----------------------------------------\n\nTITLE: Using useAccount Hook in TypeScript\nDESCRIPTION: This example demonstrates how to use the useAccount hook to manage account state. It initializes the hook with a LightAccount type and destructures the returned object to access account information, address, and loading state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccount } from \"@account-kit/react\";\n\nconst { account, address, isLoadingAccount } = useAccount({\n  type: \"LightAccount\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Connecting AccountSigner with Provider - TypeScript\nDESCRIPTION: This snippet details the process for creating a local account signer, initializing an Ethers provider, instantiating AccountSigner, and dynamically reconnecting the provider. It shows dependencies on @aa-sdk/ethers, @aa-sdk/core, @account-kit/infra, @account-kit/smart-contracts, and viem. The code initializes a light account with a provider and signer, and demonstrates using AccountSigner.connect to switch the account's provider. Inputs include transport URL and chain, and the connect method returns an updated AccountSigner instance.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/connect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n\nsigner.connect(provider);\n```\n\n----------------------------------------\n\nTITLE: Proposing User Operation with Multisig Account\nDESCRIPTION: Demonstrates how to propose a new user operation for review by multisig signers. The code shows the process of creating a request with a target address and collecting the first signature.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/multisig-plugin/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  request,\n  aggregatedSignature,\n  signatureObj: firstSig,\n} = await multisigAccountClient.proposeUserOperation({\n  uo: {\n    target: targetAddress,\n    data: \"0x\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Smart Account: Passing Account to Client Methods\nDESCRIPTION: This example shows how to use a smart account by passing it directly to client methods. It demonstrates creating a bundler client, a smart account client, and a light account, then using the account with the sendUserOperation method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/migration-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport {\n  createBundlerClient,\n  createSmartAccountClientFromExisting\n  LocalAccountSigner,\n  type Hex,\n} from \"@aa-sdk/core\";\nimport { sepolia } from \"@aa-sdk/core\";\nimport { custom, http } from \"viem\";\n\nconst chain = sepolia;\n\nconst client = createBundlerClient({\n  chain,\n  transport: http(\"JSON_RPC_URL\"),\n});\n\n// [!code focus:99]\n// createSmartAccountClientFromExisting is a helper method that allows you\n// to reuse a JSON RPC client to create a Smart Account client.\nconst smartAccountClient = createSmartAccountClientFromExisting({\n  client,\n});\n\nconst account = await createLightAccount({\n  signer,\n  chain,\n  transport: custom(client),\n});\n\nconst { hash } = await smartAccountClient.sendUserOperation({\n    uo: {\n        target: \"0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef\",\n        data: \"0x\",\n        value: 10n,\n    },\n    account, // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to the Authentication Modal in Account Kit React\nDESCRIPTION: This example shows how to add an icon above the default 'Sign in' text in the authentication modal. It uses the auth.header option to insert an image element while keeping the default sign-in text visible by not setting hideSignInText to true.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/customization/authentication-modal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// @jsx: react-jsx\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const confg = createConfig(\n  {\n    transport: alchemy({ apiKey: \"YOUR_API_KEY\" }),\n    chain: sepolia,\n  },\n  {\n    auth: {\n      header: <img src=\"img.src\" />, // [!code ++]\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useAuthenticate Hook with Callback Options\nDESCRIPTION: Demonstrates how to use the useAuthenticate hook with optional success and error callbacks. The hook provides authentication methods and state variables to manage the authentication process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAuthenticate.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\nconst { authenticate, authenticateAsync, isPending, error } = useAuthenticate({\n  // these are optional\n  onSuccess: () => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Owner Light Account with Account Kit in TypeScript\nDESCRIPTION: Demonstrates the usage of createMultiOwnerLightAccount function to create a multi-owner light account. It includes importing necessary dependencies, setting up the chain, transport, and signer, and calling the function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\";\n\nconst account = await createMultiOwnerLightAccount({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users with Existing Passkey in TypeScript\nDESCRIPTION: This snippet demonstrates how to authenticate users with an existing passkey. This method is useful for providing an easier login experience for users who have already set up a passkey.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/authenticate-users.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"./config\";\nimport { getSigner } from \"@account-kit/core\";\n\nconst signer = getSigner(config);\n\nif (!signer) {\n  // this can happen if your rendering this on the server\n  // the signer instance is only available on the client\n  throw new Error(\"Signer not found\");\n}\n\nawait signer.authenticate({\n  type: \"passkey\",\n  createNew: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Policy ID per UserOperation in React Component\nDESCRIPTION: This React component demonstrates how to set a gas policy ID for specific UserOperations. It uses the useSmartAccountClient hook to create a client with the policy ID and the useSendUserOperation hook to send sponsored transactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/sponsor-gas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  useSmartAccountClient,\n  useSendUserOperation,\n} from \"@account-kit/react\";\n\nexport default function MyComponent() {\n  const { client } = useSmartAccountClient({\n    policyId: \"GAS_MANAGER_POLICY_ID\",\n  });\n  const { sendUserOperation } = useSendUserOperation({ client });\n\n  return (\n    <button\n      onClick={() =>\n        sendUserOperation({\n          uo: {\n            target: \"0xTARGET_ADDRESS\",\n            data: \"0x\",\n            value: 0n,\n          },\n        })\n      }\n    >\n      Send Sponsored User Operation\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending OTP for Email Authentication in React\nDESCRIPTION: This React component snippet shows how to send an OTP (One-Time Password) for email authentication using the useAuthenticate hook from Account Kit. It handles the initial step of the authentication process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/email-otp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user submits their email\nconst handleSendCode = (email: string) => {\n  authenticate(\n    {\n      type: \"email\",\n      emailMode: \"otp\",\n      email,\n    },\n    {\n      onSuccess: () => {\n        // Success - now show the OTP input form\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Account Kit Client\nDESCRIPTION: Example of sending a user operation using the Account Kit client. Demonstrates how to specify target address, data, and value for the operation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/infra/quickstart.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./client\";\n\nconst { hash } = await client.sendUserOperation({\n  uo: {\n    target: \"0xTARGET_ADDRESS\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Access Control Type in SessionKeyPermissionsBuilder\nDESCRIPTION: Shows how to create a new SessionKeyPermissionsBuilder instance and set the contract access control type to ALLOWLIST. This determines how contract access is controlled for the session key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setContractAccessControlType.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setContractAccessControlType(SessionKeyAccessListType.ALLOWLIST);\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Storage for Account State Persistence\nDESCRIPTION: Configures Account Kit to use cookie storage for persisting state between server and client. This ensures a consistent user experience by serializing the account state to a cookie that can be passed between server and client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/ssr.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createConfig,\n  cookieStorage, // [!code ++]\n} from \"@account-kit/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }),\n  chain: sepolia,\n  ssr: true, // [!code ++]\n  storage: cookieStorage, // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Using AuthCard Component with Alchemy Account Context (React TSX)\nDESCRIPTION: This TSX (TypeScript React) snippet illustrates how to use the AuthCard component within a functional component through integration with the Alchemy Account context. It imports both AuthCard and the useAlchemyAccountContext hook, obtains UI configuration from the context, and passes appropriate props to AuthCard. Prerequisites include a configured Account Provider higher up in the component tree and the @account-kit/react package. Input parameters are read from context, and the output is a JSX element rendering the configured AuthCard.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/components/AuthCard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { AuthCard, useAlchemyAccountContext } from \"@account-kit/react\";\n\nfunction ComponentWithAuthCard() {\n  // assumes you've passed in a UI config to the Account Provider\n  // you can also directly set the properties on the AuthCard component\n  const { uiConfig } = useAlchemyAccountContext();\n\n  return <AuthCard {...uiConfig!.auth} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SmartAccountClient with Custom Account in TypeScript\nDESCRIPTION: This code snippet shows how to create a SmartAccountClient using a custom account implementation. It demonstrates the integration of the custom account with the Alchemy infrastructure.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/smart-contracts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAlchemySmartAccountClient, alchemy } from \"@account-kit/infra\";\nimport { sepolia } from \"viem/chains\";\nimport { myAccount } from \"./my-account\";\n\nconst client = createAlchemySmartAccountClient({\n  // created above\n  account: myAccount,\n  chain: sepolia,\n  transport: alchemy({\n    apiKey: \"YOUR_API_KEY\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing createAlchemySmartAccountClient in TypeScript\nDESCRIPTION: Shows how to import the createAlchemySmartAccountClient function from the @account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/createAlchemySmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAlchemySmartAccountClient } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: ERC-7677 Paymaster Integration\nDESCRIPTION: Implementation of a Smart Account Client configured to work with ERC-7677 compliant paymasters, including transport setup and middleware configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/infra/sponsor-gas.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createSmartAccountClient,\n  erc7677Middleware,\n  split,\n} from \"@aa-sdk/core\";\nimport {\n  sepolia,\n  alchemyFeeEstimator,\n  createAlchemyPublicRpcClient,\n  alchemy,\n} from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { http, custom } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst alchemyTransport = alchemy({\n  apiKey: \"API_KEY\",\n});\n\nconst alchemyRpcClient = createAlchemyPublicRpcClient({\n  chain: sepolia,\n  transport: alchemyTransport,\n});\n\nconst transport = split({\n  overrides: [\n    {\n      methods: [\"pm_getPaymasterStubData\", \"pm_getPaymasterData\"],\n      transport: http(\"PAYMASTER_URL\"),\n    },\n  ],\n  fallback: alchemyTransport,\n});\n\nexport const client = createSmartAccountClient({\n  transport,\n  chain: sepolia,\n  account: await createLightAccount({\n    chain: sepolia,\n    transport: alchemyTransport,\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  }),\n  feeEstimator: alchemyFeeEstimator(alchemyRpcClient),\n  ...erc7677Middleware(),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Passkey Using AA-SDK Signer in TypeScript\nDESCRIPTION: This code snippet demonstrates how to add a new passkey to an authenticated user's account using the signer object from the AA-SDK. It assumes the user is already authenticated and allows for customization of the Credential Creation Options.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/add-passkey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\n// NOTE: this assumes you have already authenticated the user\n// you can further customize the Credential Creation Options here\nawait signer.addPasskey({});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Gas Policy in Account Kit\nDESCRIPTION: Sets up a global gas policy configuration for Account Kit using Alchemy's infrastructure. Requires an Alchemy API key and gas manager policy ID.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/sponsor-gas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }),\n  chain: sepolia,\n  policyId: \"GAS_MANAGER_POLICY_ID\", // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Modular Account v2 Client in TypeScript\nDESCRIPTION: Demonstrates how to send a user operation using the Modular Account v2 client to deploy the upgraded account. It specifies the target, value, and empty data for the operation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await maV2Client.sendUserOperation({\n  uo: {\n    target: target,\n    value: sendAmount,\n    data: \"0x\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Session Keys with Allowlist Hooks in TypeScript\nDESCRIPTION: This code snippet demonstrates how to remove session keys that have associated allowlist hooks from a Modular Account V2. It shows how to properly format the uninstallation data for both the session key validation module and its associated allowlist hook.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/session-keys/removing-session-keys.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  modularAccountAbi,\n  AllowlistModule,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\n\n// Removing a basic session key\nawait client.uninstallValidation({\n  moduleAddress: getDefaultSingleSignerValidationModuleAddress(client.chain),\n  entityId: sessionKeyEntityId,\n  uninstallData: SingleSignerValidationModule.encodeOnUninstallData({\n    entityId: sessionKeyEntityId,\n  }),\n  hookUninstallDatas: [],\n});\n\nconst hookEntityId = 1;\nconst target = \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\";\n\n// Removing a session key with an allowlist hook\nawait client.uninstallValidation({\n  moduleAddress: getDefaultSingleSignerValidationModuleAddress(client.chain),\n  entityId: sessionKeyEntityId,\n  uninstallData: SingleSignerValidationModule.encodeOnUninstallData({\n    entityId: sessionKeyEntityId,\n  }),\n  hookUninstallDatas: [\n    AllowlistModule.encodeOnUninstallData({\n      entityId: hookEntityId,\n      inputs: [\n        {\n          target,\n          hasSelectorAllowlist: false,\n          hasERC20SpendLimit: false,\n          erc20SpendLimit: 0n,\n          selectors: [],\n        },\n      ],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSolanaTransaction Hook for Solana Transfers in TypeScript\nDESCRIPTION: This example demonstrates how to use the useSolanaTransaction hook to initiate a Solana transfer. It shows setting up the hook with a policyId and then calling the mutate function with transfer details.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSolanaTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {mutate} = useSolanaTransaction({\npolicyId: \"<policyId>\",\n});\n\nmutate({\ntransfer: {\namount: <amount:number>,\ntoAddress: \"<toAddress>\",\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Alchemy Account Configuration\nDESCRIPTION: Demonstrates how to create an AlchemyAccountsConfig object by configuring the chain and transport parameters. This example uses the Sepolia network and requires an Alchemy API key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/createConfig.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/core\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst config = createConfig({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing disconnect from Account Kit Core (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the 'disconnect' function from the '@account-kit/core' package. It is necessary to include this import before making any calls to the disconnect method within your TypeScript project. No additional dependencies beyond the Account Kit core package are required.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/disconnect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { disconnect } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Creating EthersProviderAdapter and Connecting to Smart Account Signer\nDESCRIPTION: This snippet demonstrates how to create an EthersProviderAdapter from an Alchemy provider and connect it to a LightSmartContractAccount. It includes setting up the provider, creating a signer, and connecting the provider to the smart account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/aa-sdk/ethers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  LightSmartContractAccount,\n  getDefaultLightAccountFactoryAddress,\n} from \"@alchemy/aa-accounts\";\nimport { EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner, SmartAccountSigner } from \"@aa-sdk/core\";\nimport { Alchemy, Network } from \"alchemy-sdk\";\nimport { polygonMumbai } from \"@aa-sdk/core\";\n\nconst chain = polygonMumbai;\n\n// 1. Create a provider using EthersProviderAdapter\nconst alchemy = new Alchemy({\n  apiKey: process.env.API_KEY!,\n  network: Network.MATIC_MUMBAI,\n});\nconst ethersProvider = await alchemy.config.getProvider();\n\nconst provider = EthersProviderAdapter.fromEthersProvider(ethersProvider);\n\nconst signer: SmartAccountSigner = LocalAccountSigner.mnemonicToAccountSigner(\n  process.env.YOUR_OWNER_MNEMONIC!\n);\n\n// 2. Connect the provider to the smart account signer\nexport const signer = provider.connectToAccount(\n  (rpcClient) =>\n    new LightSmartContractAccount({\n      chain,\n      factoryAddress: getDefaultLightAccountFactoryAddress(chain),\n      rpcClient,\n      signer,\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Smart Account Client with createSmartAccountClient\nDESCRIPTION: Demonstrates how to use createSmartAccountClient to create a smart account client. It includes importing necessary dependencies, configuring the client with a specific chain and transport, and optionally hoisting an account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/createSmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient, toSmartContractAccount } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst client = createSmartAccountClient({\nchain: sepolia,\ntransport: http(\"RPC_URL\"),\n// optionally hoist the account\naccount: toSmartContractAccount(...),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Smart Account Client with useSmartAccountClient Hook in React Native\nDESCRIPTION: This code snippet demonstrates how to set up a Smart Account Client using the useSmartAccountClient hook from the @account-kit/react-native package. It allows creation of a new smart account and enables sending transactions signed by an Alchemy Signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/using-smart-accounts/setup-smart-account-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSmartAccountClient } from \"@account-kit/react-native\";\n\nconst { client, address, isLoadingClient } = useSmartAccountClient({});\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Signup with Email in Custom UI\nDESCRIPTION: This snippet shows how to implement Passkey Signup with an associated email address using the useAuthenticate hook. It includes email validation and error handling, providing user account recovery options.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/passkey-signup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user submits their email and wants to create a passkey\nconst handlePasskeySignup = (email: string) => {\n  // Important: Validate the email before proceeding\n  if (!isValidEmail(email)) {\n    // Handle validation error\n    return;\n  }\n\n  authenticate(\n    {\n      type: \"passkey\",\n      email,\n    },\n    {\n      onSuccess: () => {\n        // Success - passkey created and user authenticated\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n\n// Simple email validation function\nconst isValidEmail = (email: string) => {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n};\n```\n\n----------------------------------------\n\nTITLE: Using WalletClientSigner to Sign Typed Data in TypeScript\nDESCRIPTION: This example demonstrates how to create a WalletClientSigner instance and use it to sign typed data. It includes setting up a wallet client with viem, creating a signer, and calling the signTypedData method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/WalletClientSigner/signTypedData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\nimport { createWalletClient, custom } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n});\n\nconst signer = new WalletClientSigner(client, \"wallet\");\nconsole.log(\n  await signer.signTypedData({\n    types: {\n      Message: [{ name: \"content\", type: \"string\" }],\n    },\n    primaryType: \"Message\",\n    message: { content: \"Hello\" },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Key Client for Modular Account V2\nDESCRIPTION: Demonstrates how to create a client instance with session key validation and send user operations. The code shows setup of both main client and session key client, including configuration of session key properties and transaction handling.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/session-keys/using-session-keys.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\nimport { parseEther } from \"viem\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst client = await createModularAccountV2Client({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nlet sessionKeyEntityId = 1;\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\n\nconst sessionKeyClient = await createModularAccountV2Client({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  signer: sessionKeySigner,\n  accountAddress: client.getAddress(client.account),\n  signerEntity: {\n    entityId: sessionKeyEntityId,\n    isGlobalValidation: true,\n  },\n});\n\nawait sessionKeyClient.sendUserOperation({\n  uo: {\n    target: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\", // The address to call in the UO\n    data: \"0x\", // The calldata to send in the UO\n    value: parseEther(\"1\"), // The value to send in the UO\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Email OTP Authentication in TypeScript\nDESCRIPTION: Demonstrates the two-step process of email OTP authentication: first sending the OTP code to the user's email, then validating the code they enter. Uses the signer object to handle authentication flow.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/email-otp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\n// send the email\nawait signer.authenticate({\n  type: \"email\",\n  emailMode: \"otp\",\n  email: \"user@mail.com\",\n});\n\n// later once the user has entered the code from their email\nawait signer.authenticate({\n  type: \"otp\",\n  otpCode: \"123456\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Email OTP Authentication in TypeScript\nDESCRIPTION: Demonstrates the two-step process for email OTP authentication. First sends an OTP code to the user's email address, then verifies the code when the user enters it. Uses the signer authentication module for handling the authentication flow.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/email-otp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\n// send the email\nawait signer.authenticate({\n  type: \"email\",\n  emailMode: \"otp\",\n  email: \"user@mail.com\",\n});\n\n// later once the user has entered the code from their email\nawait signer.authenticate({\n  type: \"otp\",\n  otpCode: \"123456\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing getLightAccountVersionForAccount in TypeScript\nDESCRIPTION: This snippet shows how to import the getLightAccountVersionForAccount function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getLightAccountVersionForAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLightAccountVersionForAccount } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Using getMAInitializationData with Smart Account Client\nDESCRIPTION: Demonstrates how to use the getMAInitializationData function with a smart account client to retrieve initialization data for a multi-owner modular account. It accepts parameters such as the client instance and signer address(es).\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getMAInitializationData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMAInitializationData } from \"@account-kit/smart-contracts\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst client = createSmartAccountClient(...);\nconst initializationData = await getMAInitializationData({\nclient,\nsignerAddress: \"0x...\", // or array of signers\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contract using Forge\nDESCRIPTION: Command to deploy a smart contract using Forge with constructor arguments, utilizing previously set environment variables.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/contracts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nforge create <contract-name> --rpc-url=$RPC_URL --private-key=$PRIVATE_KEY --constructor-args <name> <symbol>\n```\n\n----------------------------------------\n\nTITLE: Importing SolanaSigner in TypeScript\nDESCRIPTION: Shows how to import the SolanaSigner class from the @account-kit/signer package. This class is a wrapper around the Alchemy client focused on Solana Web3 functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/SolanaSigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SolanaSigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Multisig Modular Account Client in TypeScript\nDESCRIPTION: Demonstrates how to create a multisig modular account client with specific configurations including chain, transport, signer, owners, and threshold settings. This example utilizes the sepolia test network and generates a private key for the signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultisigModularAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigModularAccountClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst accountClient = await createMultisigModularAccountClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  owners: [], // other owners on the account\n  threshold: 2, // 2 of N signatures\n});\n```\n\n----------------------------------------\n\nTITLE: Adding TOTP Multi-Factor Authentication in Alchemy Signer\nDESCRIPTION: Adds a Time-based One-Time Password (TOTP) multi-factor authentication factor to an already authenticated user. Returns the TOTP URL and factor ID that can be used to set up an authenticator app.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst { multiFactors } = await signer.addMFA({\n  multiFactorType: \"totp\",\n});\n\n// Display the QR code or secret to the user\nconst totpUrl = result?.multiFactors[0].multiFactorTotpUrl;\nconst multiFactorId = result?.multiFactors[0].multiFactorId;\n```\n\n----------------------------------------\n\nTITLE: Using getSmartAccountClient to Initialize Smart Account in TypeScript\nDESCRIPTION: This snippet shows the implementation of getSmartAccountClient by providing account type parameters and a configuration object within a TypeScript context. Requires prior setup of a config object, usually imported from a separate configuration file created with createConfig. Returns an object containing the smart account client, its address, and a loading state boolean. Ensures dependency on @account-kit/core and a valid config; supports dynamic account types and indicates loading if the signer is not connected or initialization is pending.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getSmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getSmartAccountClient } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst { client, address, isLoadingClient } = getSmartAccountClient(\n  {\n    type: \"LightAccount\",\n  },\n  config\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Gas Sponsorship with Stackup in TypeScript\nDESCRIPTION: This example demonstrates how to use Stackup as a third-party paymaster to sponsor gas fees with ERC-20 tokens. It configures a MultiOwnerModularAccountClient with Stackup for gas estimation and sponsorship.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/paymasters.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccountClient } from \"@account-kit/smart-contracts\";\nimport {\n  alchemyFeeEstimator,\n  createAlchemyPublicRpcClient,\n  alchemy,\n} from \"@account-kit/infra\";\nimport {\n  deepHexlify,\n  resolveProperties,\n  LocalAccountSigner,\n} from \"@aa-sdk/core\";\nimport { createClient, http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst signer = LocalAccountSigner.generatePrivateKeySigner();\nconst chain = sepolia;\nconst stackupClient = createClient({\n  // TODO: Replace with your stackup API key here (https://docs.stackup.sh/docs/paymaster-api)\n  transport: http(\"https://api.stackup.sh/v1/paymaster/STACKUP_API_KEY\"),\n});\n\nconst alchemyTransport = http(\"ALCHEMY_RPC_URL\");\n\nconst alchemyClient = await createMultiOwnerModularAccountClient({\n  chain,\n  signer,\n  transport: http(\"ALCHEMY_RPC_URL\"),\n  // Bypasses alchemy gas estimation and instead uses Stackup for gas estimation\n  gasEstimator: async (userOp) => ({\n    ...userOp,\n    callGasLimit: \"0x0\",\n    preVerificationGas: \"0x0\",\n    verificationGasLimit: \"0x0\",\n  }),\n  // Uses alchemy fee estimation to comply with bundler\n  feeEstimator: alchemyFeeEstimator(alchemyTransport),\n  paymasterAndData: async (userop, opts) => {\n    const pmResponse: any = await stackupClient.request({\n      // @ts-ignore\n      method: \"pm_sponsorUserOperation\",\n      params: [\n        deepHexlify(await resolveProperties(userop)),\n        opts.account.getEntryPoint().address,\n        {\n          // @ts-ignore\n          type: \"payg\", // Replace with ERC20 context based on stackups documentation\n        },\n      ],\n    });\n    return {\n      ...userop,\n      ...pmResponse,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Transferring Ownership of Modular Account V2 using TypeScript\nDESCRIPTION: This code snippet demonstrates how to transfer ownership of a Modular Account V2 using the 'updateFallbackSignerData' function. It sets up a client, defines a new owner address, and sends a user operation to update the fallback signer data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/managing-ownership.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { semiModularAccountBytecodeAbi } from \"@account-kit/smart-contracts/experimental\";\nimport { type SmartAccountSigner, LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { encodeFunctionData } from \"viem\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst client = await createModularAccountV2Client({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst newOwner = \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\";\n\n// The boolean parameter in updateFallbackSignerData is `isFallbackSignerDisabled`, and false indicates that we are using the value of the fallback signer\nawait client.sendUserOperation({\n  uo: {\n    target: client.account.address,\n    value: 0n,\n    data: encodeFunctionData({\n      abi: semiModularAccountBytecodeAbi,\n      functionName: \"updateFallbackSignerData\",\n      args: [newOwner, false],\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading Light Account to Modular Account in TypeScript\nDESCRIPTION: This snippet demonstrates how to upgrade a Light Account to a Modular Account using the Account Kit. It uses the getMSCAUpgradeToData utility function to retrieve the upgrade data and the upgradeAccount method of the lightAccountClient to perform the upgrade.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/upgrading-to-modular-account.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lightAccountClient } from \"./lightAccountClient\";\nimport { getMSCAUpgradeToData } from \"@account-kit/smart-contracts\";\n\nconst { createMAAccount, ...upgradeToData } = await getMSCAUpgradeToData(\n  lightAccountClient,\n  { account: lightAccountClient.account }\n);\n\nconst hash = await lightAccountClient.upgradeAccount({\n  upgradeTo: upgradeToData,\n  waitForTx: true,\n});\n\nconst upgradedAccount = await createMAAccount();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-chain Support in Account Kit\nDESCRIPTION: Sets up the initial configuration for multi-chain support using Account Kit. Demonstrates how to specify multiple chains with optional gas policy IDs for each chain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/multi-chain-apps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, mainnet } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  apiKey: \"ALCHEMY_API_KEY\",\n  // this is the default chain\n  chain: sepolia,\n  chains: [\n    {\n      chain: mainnet, // optional: you can specify a policy ID for this chain, if you want to sponsor gas\n      policyId: \"MAINNET_GAS_MANAGER_POLICY_ID\",\n    },\n    {\n      chain: sepolia,\n      // optional: you can specify a policy ID for this chain, if you want to sponsor gas\n      policyId: \"SEPOLIA_GAS_MANAGER_POLICY_ID\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Extending a Public Client with Alchemy Actions - TypeScript\nDESCRIPTION: Demonstrates importing both alchemyActions and createPublicClient, creating a viem public client, and extending it with Alchemy Smart Account actions. This enables the client to perform actions specific to Alchemy Smart Accounts. Dependencies include @account-kit/infra and viem; the main parameters are the public client instance and alchemyActions; the output is a client enhanced with new capabilities.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { alchemyActions } from \"@account-kit/infra\";\nimport { createPublicClient } from \"viem\";\n\nconst client = createPublicClient(...);\nconst clientWithAlchemyActions = client.extend(alchemyActions);\n\n```\n\n----------------------------------------\n\nTITLE: Using defineAlchemyChain to Configure Alchemy Chain in TypeScript\nDESCRIPTION: This example demonstrates how to use the defineAlchemyChain function to create an Alchemy-specific chain configuration. It imports the necessary dependencies, including the sepolia chain from viem/chains, and defines a new chain with an Alchemy RPC base URL.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/defineAlchemyChain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAlchemyChain } from \"@account-kit/infra\";\nimport { sepolia } from \"viem/chains\";\n\nconst chain = defineAlchemyChain({\n  chain: sepolia,\n  rpcBaseUrl: \"https://eth-sepolia.g.alchemy.com/v2\",\n});\n```\n\n----------------------------------------\n\nTITLE: Sending OTP Code in Custom UI Implementation\nDESCRIPTION: This snippet shows how to implement the first step of a custom Email OTP authentication flow using the useAuthenticate hook. It demonstrates how to send an OTP code to the user's email address with success and error callbacks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/email-otp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user submits their email\nconst handleSendCode = (email: string) => {\n  authenticate(\n    {\n      type: \"email\",\n      emailMode: \"otp\",\n      email,\n    },\n    {\n      onSuccess: () => {\n        // Success - now show the OTP input form\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Account Client for Gas Sponsorship\nDESCRIPTION: This snippet demonstrates how to create a Smart Account Client configured to sponsor gas. It's included from a shared client.ts file and is a foundational step for gas sponsorship implementation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/infra/sponsor-gas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/shared/infra/client.ts]\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Owner Modular Account Client in TypeScript\nDESCRIPTION: Demonstrates the complete implementation of creating a multi-owner modular account client using the Sepolia test network. Includes imports, configuration, and client initialization with a local account signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerModularAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccountClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst accountClient = await createMultiOwnerModularAccountClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Modular Account Client\nDESCRIPTION: Extends the base modular account client with session key plugin actions for enhanced functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\nimport { sessionKeyPluginActions } from \"@account-kit/smart-contracts\";\n\nconst extendedClient = modularAccountClient.extend(sessionKeyPluginActions);\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP for Email Authentication in React\nDESCRIPTION: This React component snippet demonstrates how to verify the OTP (One-Time Password) entered by the user for email authentication. It uses the useAuthenticate hook from Account Kit to complete the authentication process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/email-otp.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user submits the OTP code\nconst handleVerifyCode = (otpCode: string) => {\n  authenticate(\n    {\n      type: \"otp\",\n      otpCode,\n    },\n    {\n      onSuccess: () => {\n        // Authentication successful!\n      },\n      onError: (error) => {\n        // Handle invalid code error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Viem Wallet Client with Alchemy Signer\nDESCRIPTION: Demonstrates how to create a viem WalletClient using an Alchemy Signer configured as an EOA on the Sepolia network. The code shows the integration between the Alchemy Signer and viem's wallet client using HTTP transport.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/as-an-eoa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\nimport { createWalletClient, http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nexport const walletClient = createWalletClient({\n  transport: http(\"alchemy_rpc_url\"),\n  chain: sepolia,\n  account: signer.toViemAccount(),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating ModularAccount V2 Implementation\nDESCRIPTION: Demonstrates complete implementation of creating a ModularAccount V2 instance using createModularAccountV2 function. Includes setup of signer, chain configuration, and transport layer using Alchemy.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createModularAccountV2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2 } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { alchemy, sepolia } from \"@account-kit/infra\";\n\nconst MNEMONIC = \"...\";\nconst RPC_URL = \"...\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(MNEMONIC);\n\nconst chain = sepolia;\n\nconst transport = alchemy({ rpcUrl: RPC_URL });\n\nconst modularAccountV2 = await createModularAccountV2({\n  mode: \"default\", // or \"7702\"\n  chain,\n  signer,\n  transport,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Contract Account Configuration in TypeScript\nDESCRIPTION: Demonstrates the complete setup of a smart contract account using toSmartContractAccount, including both required and optional parameters. Shows integration with viem for HTTP transport and chain configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/toSmartContractAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, type SignableMessage } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst myAccount = await toSmartContractAccount({\n  /// REQUIRED PARAMS ///\n  source: \"MyAccount\",\n  transport: http(\"RPC_URL\"),\n  chain: sepolia,\n  // The EntryPointDef that your account is com\"patible with\n  entryPoint: getEntryPoint(sepolia, { version: \"0.6.0\" }),\n  // This should return a concatenation of your `factoryAddress` and the `callData` for your factory's create account method\n  getAccountInitCode: async () => \"0x{factoryAddress}{callData}\",\n  // an invalid signature that doesn't cause your account to revert during validation\n  getDummySignature: () => \"0x1234...\",\n  // given a UO in the form of {target, data, value} should output the calldata for calling your contract's execution method\n  encodeExecute: async (uo) => \"0xcalldata\",\n  signMessage: async ({ message }: { message: SignableMessage }) => \"0x...\",\n  signTypedData: async (typedData) => \"0x000\",\n\n  /// OPTIONAL PARAMS ///\n  // if you already know your account's address, pass that in here to avoid generating a new counterfactual\n  accountAddress: \"0xaddressoverride\",\n  // if your account supports batching, this should take an array of UOs and return the calldata for calling your contract's batchExecute method\n  encodeBatchExecute: async (uos) => \"0x...\",\n  // if your contract expects a different signing scheme than the default signMessage scheme, you can override that here\n  signUserOperationHash: async (hash) => \"0x...\",\n  // allows you to define the calldata for upgrading your account\n  encodeUpgradeToAndCall: async (params) => \"0x...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authentication UI with Account Kit in React\nDESCRIPTION: This code example demonstrates how to create a custom UI configuration for Alchemy Account Kit. It sets up three authentication sections: email authentication, passkey and social logins, and external wallet connections. The configuration is passed to the createConfig function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/ui-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  illustrationStyle: \"outline\",\n  auth: {\n    sections: [\n      [{ type: \"email\" }],\n      [\n        { type: \"passkey\" },\n        { type: \"social\", authProviderId: \"google\", mode: \"popup\" },\n        { type: \"social\", authProviderId: \"facebook\", mode: \"popup\" },\n      ],\n      [\n        {\n          type: \"external_wallets\",\n          walletConnect: { projectId: \"your-project-id\" },\n        },\n      ],\n    ],\n    addPasskeyOnSignup: false,\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Magic Link Redirect in React Application\nDESCRIPTION: This snippet shows how to handle the magic link redirect in a React application. It extracts the bundle parameter from the URL and uses it to complete the authentication process with the authenticate function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/mfa/email-magic-link.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\n\nfunction MagicLinkRedirect() {\n  const { authenticate } = useAuthenticate();\n\n  const handleMagicLinkRedirect = () => {\n    const url = new URL(window.location.href);\n    const bundle = url.searchParams.get(\"bundle\");\n\n    // If there's no bundle parameter, this isn't a magic link redirect\n    if (!bundle) return;\n\n    authenticate(\n      {\n        type: \"email\",\n        bundle,\n      },\n      {\n        onSuccess: () => {\n          // Authentication successful!\n        },\n        onError: (error) => {\n          // Handle error\n        },\n      }\n    );\n  };\n\n  // Call this function when the component mounts\n  useEffect(() => {\n    handleMagicLinkRedirect();\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Authenticator App Setup in React with Account Kit\nDESCRIPTION: This snippet shows how to confirm the setup of an authenticator app for MFA by verifying a code entered by the user. It uses the verifyMFA mutation from the useMFA hook in Account Kit.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/mfa/setup-mfa.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { useMFA } from \"@account-kit/react\";\n\nfunction VerifyAuthenticatorComponent({\n  multiFactorId,\n}: {\n  multiFactorId: string;\n}) {\n  const { verifyMFA } = useMFA();\n  const [code, setCode] = useState(\"\");\n\n  const handleVerifyAuthenticator = () => {\n    verifyMFA.mutate(\n      {\n        multiFactorId,\n        multiFactorCode: code, // The TOTP code from the user's authenticator app\n      },\n      {\n        onSuccess: () => {\n          // Authenticator setup successful\n          console.log(\"MFA setup complete!\");\n        },\n        onError: (error) => {\n          // Handle error\n          console.error(\"Verification failed:\", error);\n        },\n      }\n    );\n  };\n\n  // For async/await pattern, you can use mutateAsync\n  const handleVerifyAsync = async () => {\n    try {\n      const result = await verifyMFA.mutateAsync({\n        multiFactorId,\n        multiFactorCode: code,\n      });\n      console.log(\"MFA setup complete!\", result);\n    } catch (error) {\n      console.error(\"Verification failed:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={code}\n        onChange={(e) => setCode(e.target.value)}\n        placeholder=\"Enter 6-digit code\"\n        maxLength={6}\n      />\n      <button\n        onClick={handleVerifyAuthenticator}\n        disabled={verifyMFA.isPending}\n      >\n        {verifyMFA.isPending ? \"Verifying...\" : \"Verify Code\"}\n      </button>\n\n      {verifyMFA.isError && (\n        <div className=\"error\">Invalid code. Please try again.</div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing getMSCAUpgradeToData in TypeScript\nDESCRIPTION: Shows how to import the getMSCAUpgradeToData function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getMSCAUpgradeToData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMSCAUpgradeToData } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Auth0 and GitHub Provider in TypeScript\nDESCRIPTION: Example showing how to authenticate users using Auth0 with direct GitHub login integration. The code demonstrates using the authenticate function with Auth0-specific configuration parameters including the auth0Connection parameter for direct GitHub authentication.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/auth0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nawait authenticate({\n  type: \"oauth\",\n  authProviderId: \"auth0\",\n  auth0Connection: \"github\",\n  mode: \"popup\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using default7702UserOpSigner to Create a Smart Account Client\nDESCRIPTION: Demonstrates creating a SmartAccountClient configured for an EIP-7702 modular account. It initializes a modular account using `createModularAccountV2` in '7702' mode and then creates the client using `createSmartAccountClient`. The `default7702UserOpSigner` is passed to the `signUserOperation` parameter, wrapping the original signer provided in the configuration. This setup ensures that EIP-7702 authorization signatures are handled correctly. Requires `@aa-sdk/core` and `@account-kit/smart-contracts` dependencies.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/default7702UserOpSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  default7702GasEstimator,\n  default7702UserOpSigner,\n  createSmartAccountClient,\n  type SmartAccountClient,\n} from \"@aa-sdk/core\";\nimport {\n  createModularAccountV2,\n  type CreateModularAccountV2ClientParams,\n} from \"@account-kit/smart-contracts\";\n\nasync function createSMA7702AccountClient(\n  config: CreateModularAccountV2ClientParams\n): Promise<SmartAccountClient> {\n  const sma7702Account = await createModularAccountV2({\n    ...config,\n    mode: \"7702\",\n  });\n\n  return createSmartAccountClient({\n    account: sma7702Account,\n    gasEstimator: default7702GasEstimator(config.gasEstimator),\n    signUserOperation: default7702UserOpSigner(config.signUserOperation),\n    ...config,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Batch User Operations with Alchemy SDK\nDESCRIPTION: This code shows how to batch multiple user operations together by passing an array to the sendUserOperation method. It sends two operations with different target addresses but both with empty data and zero value.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/infra/send-user-operations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./client\";\n\nconst { hash } = await client.sendUserOperation({\n  uo: [\n    {\n      target: \"0xTARGET_ADDRESS\",\n      data: \"0x\",\n      value: 0n,\n    },\n    {\n      target: \"0xTARGET_ADDRESS_2\",\n      data: \"0x\",\n      value: 0n,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using completeAuthWithBundle Method to Authenticate a User\nDESCRIPTION: Example showing how to initialize the AlchemySignerWebClient and use the completeAuthWithBundle method to complete authentication with a credential bundle. This method requires an organization ID and a bundle from an email.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/completeAuthWithBundle.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.completeAuthWithBundle({\n  orgId: \"user-org-id\",\n  bundle: \"bundle-from-email\",\n  connectedEventName: \"connectedEmail\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing SolanaSigner for Creating Transfer Transactions in TypeScript\nDESCRIPTION: This code shows how to import the SolanaSigner module from the @account-kit/signer package. This import is required to use the createTransfer method for creating Solana transfer transactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/SolanaSigner/createTransfer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SolanaSigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Basic Session Key Removal in TypeScript\nDESCRIPTION: Demonstrates how to remove a basic session key using the uninstallValidation method. Shows initialization of the modular account client and basic session key removal process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/session-keys/removing-session-keys.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  modularAccountAbi,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\n\n// Removing a basic session key\nawait client.uninstallValidation({\n  moduleAddress: getDefaultSingleSignerValidationModuleAddress(client.chain),\n  entityId: sessionKeyEntityId,\n  uninstallData: SingleSignerValidationModule.encodeOnUninstallData({\n    entityId: sessionKeyEntityId,\n  }),\n  hookUninstallDatas: [],\n});\n\n// Removing a session key with hooks\nawait client.uninstallValidation({\n  moduleAddress: getDefaultSingleSignerValidationModuleAddress(client.chain),\n  entityId: sessionKeyEntityId,\n  uninstallData: SingleSignerValidationModule.encodeOnUninstallData({\n    entityId: sessionKeyEntityId,\n  }),\n  hookUninstallDatas: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Splitting Bundler and Node RPC Traffic with Alchemy in TypeScript\nDESCRIPTION: This code shows how to use the alchemyTransport to split bundler traffic from node RPC traffic. It sets up an Alchemy transport with a custom API key and node RPC URL.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/bundlers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemy } from \"@account-kit/infra\";\n\nconst alchemyTransport = alchemy({\n  alchemyConnection: { apiKey: \"your-api-key\" },\n  nodeRpcUrl: \"YOUR_NODE_RPC_URL\",\n});\n// now use this transport in a client\n```\n\n----------------------------------------\n\nTITLE: Using AlchemyWebSigner for Authentication in TypeScript\nDESCRIPTION: Demonstrates how to create an instance of AlchemyWebSigner and use it to authenticate a user with an email. It includes configuration for the client connection and iframe setup.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/authenticate.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.authenticate({\n  type: \"email\",\n  email: \"foo@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-chain Support in Account Kit\nDESCRIPTION: Sets up configuration for multi-chain support using Account Kit core. Demonstrates how to specify default chain, multiple chain configurations, custom transports, and gas manager policy IDs for different chains.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/multi-chain-apps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/core\";\nimport { sepolia, mainnet, alchemy } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  // use this transport for all chains\n  transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }),\n  // this is the default chain\n  chain: sepolia,\n  chains: [\n    {\n      chain: mainnet,\n      // optional: sponsor gas for this chain\n      policyId: \"MAINNET_GAS_MANAGER_POLICY_ID\",\n    },\n    {\n      chain: sepolia,\n      // optional: override the default transport for this chain\n      transport: alchemy({ apiKey: \"OTHER_API_KEY\" }),\n      // optional: sponsor gas for this chain\n      policyId: \"SEPOLIA_GAS_MANAGER_POLICY_ID\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Account with getAccount in Account Kit using TypeScript\nDESCRIPTION: This snippet demonstrates a full example of importing getAccount and config, then invoking getAccount to retrieve a LightAccount type from the configured client store. Prerequisites include installing @account-kit/core and providing a valid configuration object created as described by createConfig. The function returns an object with account and status properties, while the type parameter and configuration must match expected interfaces. Inputs: an object specifying type and a config object; outputs: account object and status. Usage is constrained to valid account and configuration types.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getAccount } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst { account, status } = getAccount(\n  {\n    type: \"LightAccount\",\n  },\n  config\n);\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient from Account Kit\nDESCRIPTION: How to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/completeAuthWithBundle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient for OAuth Authentication in TypeScript\nDESCRIPTION: Demonstrates how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/oauthWithRedirect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Using hydrate to Initialize Client State in TypeScript\nDESCRIPTION: This example demonstrates the practical application of the `hydrate` function. It involves importing necessary functions (`hydrate`, `cookieToInitialState`), retrieving an initial state (e.g., from `document.cookie`), and then calling `hydrate` with the application's configuration (`config`) and the retrieved `initialState`. The returned `onMount` function is designed to be called after the component has mounted on the client-side.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/hydrate.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { hydrate, cookieToInitialState } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst initialState = cookieToInitialState(document.cookie);\nconst { onMount } = hydrate(config, initialState);\n// call onMount once your component has mounted\n```\n\n----------------------------------------\n\nTITLE: Creating a Bundler Client Instance with Parameters in TypeScript\nDESCRIPTION: Shows how to configure and instantiate a Bundler Client with the provided chain and transport parameters using createBundlerClient. Dependencies include @aa-sdk/core for the client, and viem/chains for chain configuration. The main parameters are chain (e.g., sepolia) and transport, with optional type support. Returns a BundlerClient configured for specified blockchain operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/createBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createBundlerClient } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst client = createBundlerClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Magic Link Authentication in TypeScript\nDESCRIPTION: This code demonstrates how to send a magic link email to a user and handle the authentication response once they click the link. It includes error handling for missing URL parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/email-magic-link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\n// send the email\nawait signer.authenticate({\n  type: \"email\",\n  emailMode: \"magicLink\",\n  email: \"user@mail.com\",\n});\n\n// later once the user has clicked the link\nconst url = new URL(window.location.href);\nconst bundle = url.searchParams.get(\"bundle\");\nif (!bundle) {\n  throw new Error(\"No bundle found in URL\");\n}\n\nawait signer.authenticate({\n  type: \"email\",\n  bundle,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Login in UI Components with Account Kit React\nDESCRIPTION: This snippet demonstrates how to configure Social Login authentication in the application config using Account Kit. It includes setting up UI configuration for social login providers and creating the main config object.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/social-login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        // Include social login providers\n        { type: \"social\", authProviderId: \"google\", mode: \"popup\" },\n        { type: \"social\", authProviderId: \"facebook\", mode: \"popup\" },\n        { type: \"social\", authProviderId: \"apple\", mode: \"popup\" },\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n    // Required for popup flow\n    enablePopupOauth: true,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Viem WalletClient with Alchemy Signer as EOA in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Viem WalletClient using the Alchemy Signer as an EOA. It imports necessary dependencies, creates a wallet client with HTTP transport, specifies the Sepolia chain, and uses the signer's Viem account adapter.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/as-an-eoa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\nimport { createWalletClient, http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nexport const walletClient = createWalletClient({\n  transport: http(\"alchemy_rpc_url\"),\n  chain: sepolia,\n  account: signer.toViemAccount(),\n});\n```\n\n----------------------------------------\n\nTITLE: Using useClientActions with Session Key Plugin in React\nDESCRIPTION: Example of how to use the useClientActions hook with a MultiOwnerModularAccount client to execute session key plugin actions. The code demonstrates importing required dependencies, setting up the client, and executing an action to check if an account is a session key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useClientActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useSmartAccountClient } from \"@account-kit/react\";\nimport { sessionKeyPluginActions } from \"@account-kit/smart-contracts\";\nimport { useClientActions } from \"@account-kit/react\";\n\nconst Foo = () => {\n  const { client } = useSmartAccountClient({\n    type: \"MultiOwnerModularAccount\",\n  });\n  const { executeAction } = useClientActions({\n    client: client,\n    actions: sessionKeyPluginActions,\n  });\n\n  executeAction({\n    functionName: \"isAccountSessionKey\",\n    args: [{ key: \"0x0\" }],\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using watchBundlerClient to Monitor Changes\nDESCRIPTION: Demonstrates how to use watchBundlerClient to monitor bundler client changes and handle updates using a callback function. Requires a pre-configured AlchemyAccountsConfig object.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBundlerClient } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchBundlerClient(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Using useSmartAccountClient Hook in TypeScript\nDESCRIPTION: Demonstrates basic usage of the useSmartAccountClient hook, which returns a client object, address, and loading state. The hook accepts an optional configuration object as a parameter.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSmartAccountClient } from \"@account-kit/react\";\n\nconst { client, address, isLoadingClient } = useSmartAccountClient({});\n```\n\n----------------------------------------\n\nTITLE: Hoisting the Account for Client Methods\nDESCRIPTION: This example shows how to hoist an account to a client, similar to the previous .connect method. The account is passed when creating the client, eliminating the need to specify it for each operation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/migration-guide.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport {\n  createBundlerClient,\n  createSmartAccountClientFromExisting\n  LocalAccountSigner,\n  type Hex,\n} from \"@aa-sdk/core\";\nimport { sepolia } from \"@aa-sdk/core\";\nimport { http, custom } from \"viem\";\n\nconst chain = sepolia;\n\nconst client = createBundlerClient({\n  chain,\n  transport: http(\"JSON_RPC_URL\"),\n});\n\n// [!code focus:99]\nconst account = await createLightAccount({\n  signer,\n  transport: custom(client),\n  chain,\n});\n\nconst smartAccountClient = createSmartAccountClientFromExisting({\n  account, // [!code ++]\n  client,\n});\n\nconst { hash } = await smartAccountClient.sendUserOperation({\n  uo: {\n    target: \"0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef\",\n    data: \"0x\",\n    value: 10n,\n  },\n  account, // [!code --]\n});\n```\n\n----------------------------------------\n\nTITLE: Using TraceHeader Methods\nDESCRIPTION: Demonstrates how to create a TraceHeader instance from existing headers or create a default one, and then convert it to the trace header format\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/TraceHeader/toTraceHeader.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst traceHeader =\n  TraceHeader.fromTraceHeader(headers) || TraceHeader.default();\nconst headers = traceHeader.toTraceHeader();\n```\n\n----------------------------------------\n\nTITLE: Sending Email Magic Link for User Authentication in React Native\nDESCRIPTION: This snippet demonstrates how to create a sign-in component that sends a magic link to the user's email. It uses the useAuthenticate hook from @account-kit/react-native to handle the authentication process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/signer/authenticating-users/authenticating-with-magic-link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react-native\";\nimport React, { useState } from \"react\";\nimport { Alert, View, Text, TextInput, Button, Pressable } from \"react-native\";\n\nfunction SignInWithOtp() {\n  const { authenticate } = useAuthenticate();\n  const [email, setEmail] = useState(\"\");\n\n  const handleUserSignInWithMagicLink = () => {\n    try {\n      authenticate({\n        email,\n        type: \"email\",\n      });\n\n      // Magic link sent to the user's email. Prompt the user to click the link in their email.\n    } catch (e) {\n      Alert.alert(\"Error sending Magic Link. Check logs for more details.\");\n\n      console.log(\"Error sending Magic Link: \", e);\n    }\n  };\n\n  return (\n    <View>\n      <Text>Enter Your Email to Sign In</Text>\n      <View>\n        <TextInput\n          value={email}\n          onChangeText={(val) => setEmail(val.toLowerCase())}\n          placeholder=\"john@doe.com\"\n        />\n        <Pressable onPress={handleUserSignInWithMagicLink}>\n          {({ pressed }) => (\n            <View\n              style={[\n                {\n                  opacity: pressed ? 0.5 : 1,\n                  transform: [\n                    {\n                      scale: pressed ? 0.98 : 1,\n                    },\n                  ],\n                },\n              ]}\n            >\n              <Text>Sign In</Text>\n            </View>\n          )}\n        </Pressable>\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Signer Status with getSignerStatus in TypeScript\nDESCRIPTION: Shows a complete example of importing the getSignerStatus function along with a configuration object, then calling getSignerStatus to fetch the signer status from the client store. Requires the @account-kit/core package and a valid config object, typically created using createConfig. The function returns the signer's status as a SignerStatus object.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getSignerStatus.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getSignerStatus } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst signerStatus = getSignerStatus(config);\n```\n\n----------------------------------------\n\nTITLE: Using SessionKeyPermissionsBuilder to encode permissions in TypeScript\nDESCRIPTION: Demonstrates how to create a SessionKeyPermissionsBuilder instance, set a required paymaster, and encode the permissions into hexadecimal strings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/encode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setRequiredPaymaster(\"0x1234\");\nconst encoded = builder.encode();\n```\n\n----------------------------------------\n\nTITLE: Integrating with Non-ERC-7677 Paymasters (Stackup Example)\nDESCRIPTION: This code demonstrates how to integrate with paymasters that are not ERC-7677 compliant, using Stackup as an example. It requires custom middleware overrides for handling paymaster calls, setting up appropriate transport splits, and implementing custom gas estimation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/infra/sponsor-gas.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createSmartAccountClient,\n  split,\n  deepHexlify,\n  resolveProperties,\n} from \"@aa-sdk/core\";\nimport {\n  sepolia,\n  alchemyFeeEstimator,\n  createAlchemyPublicRpcClient,\n  alchemy,\n} from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\n// You can replace this with any signer you'd like\n// We're using a LocalAccountSigner to generate a local key to sign with\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { http, custom } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\n// 1. create an alchemy rpc client\nconst alchemyTransport = alchemy({\n  apiKey: \"API_KEY\",\n});\n\nconst alchemyRpcClient = createAlchemyPublicRpcClient({\n  chain: sepolia,\n  transport: alchemyTransport,\n});\n\n// 2. create a split transport to route traffic between the paymaster and the bundler\nconst transport = split({\n  overrides: [\n    {\n      methods: [\"pm_sponsorUserOperation\"],\n      // TODO: Replace with your stackup API key here (https://docs.stackup.sh/docs/paymaster-api)\n      transport: http(\"https://api.stackup.sh/v1/paymaster/STACKUP_API_KEY\"),\n    },\n  ],\n  fallback: alchemyTransport,\n});\n\n// 3. create smart account client\nexport const client = createSmartAccountClient({\n  transport,\n  chain: sepolia,\n  account: await createLightAccount({\n    chain: sepolia,\n    transport: alchemyTransport,\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  }),\n  // Bypasses alchemy gas estimation and instead uses Stackup for gas estimation\n  // If your paymaster doesn't provide gas estimation, then don't replace the gasEstimator\n  gasEstimator: async (userOp) => ({\n    ...userOp,\n    callGasLimit: \"0x0\",\n    preVerificationGas: \"0x0\",\n    verificationGasLimit: \"0x0\",\n  }),\n  // this is required to get correct fee estimates when using our Bundler RPC\n  feeEstimator: alchemyFeeEstimator(alchemyRpcClient),\n  dummyPaymasterAndData: async (userop) => ({\n    ...userop,\n    paymasterAndData: \"0x\",\n  }),\n  paymasterAndData: async (userop, { client, account }) => {\n    const pmResponse: any = await client.request({\n      // @ts-ignore\n      method: \"pm_sponsorUserOperation\",\n      params: [\n        deepHexlify(await resolveProperties(userop)),\n        account.getEntryPoint().address,\n        {\n          // @ts-ignore\n          type: \"payg\", // Replace with ERC20 context based on stackups documentation\n        },\n      ],\n    });\n    return {\n      ...userop,\n      ...pmResponse,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Email Authentication and Handling MFA Required Error in React\nDESCRIPTION: This code demonstrates how to initiate authentication with email and handle the MFA required error when it occurs. It uses the useAuthenticate hook from @account-kit/react to start the magic link authentication process and captures the multiFactorId needed for the next step.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/mfa/email-magic-link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\nimport { MfaRequiredError } from \"@account-kit/signer\";\nimport { useState } from \"react\";\n\nfunction MagicLinkWithMFA() {\n  const { authenticate } = useAuthenticate();\n\n  // Step 1: Handle initial email submission and check for MFA requirement\n  const handleInitialAuthentication = (email: string) => {\n    authenticate(\n      {\n        type: \"email\",\n        emailMode: \"magicLink\",\n        email,\n      },\n      {\n        onSuccess: () => {\n          // This callback only fires when the entire auth flow is complete\n          // (user clicked magic link and completed MFA if required)\n          console.log(\"Authentication successful!\");\n        },\n        onError: (error) => {\n          // If MFA is required the attempt will result in an MfaRequiredError\n          if (error instanceof MfaRequiredError) {\n            const { multiFactorId } = error.multiFactors[0];\n\n            // Store the multiFactorId to use when the user enters their TOTP code\n\n            // In step 2, we will prompt the user to enter their TOTP code (from their authenticator app)\n            // and we'll use this multiFactorId to verify the TOTP code\n          }\n          // Handle other errors\n        },\n      }\n    );\n  };\n\n  return <div>{/* Your UI components here */}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users with Passkey and Email Backup in TypeScript\nDESCRIPTION: This snippet shows how to authenticate users using a passkey as the primary mechanism and register an email as a backup. It's important to verify the email to ensure account recovery if the passkey is lost.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/authenticate-users.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"./config.js\";\nimport { getSigner } from \"@account-kit/core\";\n\nconst signer = getSigner(config);\n\nif (!signer) {\n  // this can happen if your rendering this on the server\n  // the signer instance is only available on the client\n  throw new Error(\"Signer not found\");\n}\n\nawait signer.authenticate({\n  type: \"passkey\",\n  email: \"name@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Owners of Modular Account in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to add or remove owners from a Modular Account using the SmartAccountClient's updateOwners method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/manage-ownership-mav1.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\n\nconst ownersToAdd = []; // the addresses of owners to be added\nconst ownersToRemove = []; // the addresses of owners to be removed\n\nconst result = await modularAccountClient.updateOwners({\n  args: [ownersToAdd, ownersToRemove],\n});\n\nconst txHash = await modularAccountClient.waitForUserOperationTransaction(\n  result\n);\n```\n\n----------------------------------------\n\nTITLE: Using createSmartAccountClientFromExisting to Instantiate a SmartAccountClient in TypeScript\nDESCRIPTION: This example demonstrates the usage of `createSmartAccountClientFromExisting`. It first imports necessary functions, including `createBundlerClient` and `toSmartContractAccount`. It then creates a `bundlerClient` (details omitted) and uses it along with a smart contract `account` to initialize a new `SmartAccountClient` via `createSmartAccountClientFromExisting`. This approach reuses the underlying transport and chain configuration from the existing client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/createSmartAccountClientFromExisting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\ncreateBundlerClient,\ncreateSmartAccountClientFromExisting,\ntoSmartContractAccount\n} from \"@aa-sdk/core\";\n\nconst bundlerClient = createBundlerClient(...);\nconst client = createSmartAccountClientFromExisting({\nclient, // Assumes a variable 'client' holds the bundlerClient instance\naccount: toSmartContractAccount(...),\n})\n```\n\n----------------------------------------\n\nTITLE: Using combineSignatures Function in TypeScript\nDESCRIPTION: Demonstrates how to use the combineSignatures function with parameters including upper limit values for gas fees and signature details. The function combines multiple signatures and returns a concatenated hex result.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/combineSignatures.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { combineSignatures } from \"@account-kit/smart-contracts\";\n\nconst combinedSignature = combineSignatures({\n// this is the upper limit pre-verification gas\nupperLimitPvg: \"0x01\",\nupperLimitMaxFeePerGas: \"0x02\",\nupperLimitMaxPriorityFeePerGas: \"0x03\",\nsignatures: [{\nsignerType: \"EOA\",\nuserOpSigType: \"UPPERLIMIT\",\nsigner: `0x...`,\nsignature: `0x...`,\n}]\nusingMaxValues: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Popup Authentication\nDESCRIPTION: Demonstrates how to initialize the AlchemySignerWebClient and use the oauthWithPopup method for Google OAuth authentication. Shows configuration of API key and iframe container setup, followed by the authentication call.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/oauthWithPopup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst user = await client.oauthWithPopup({\n  type: \"oauth\",\n  authProviderId: \"google\",\n  mode: \"popup\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using SessionKeySigner to Sign Messages\nDESCRIPTION: Demonstrates how to create a new SessionKeySigner instance and use it to sign a message. The example shows signing a simple 'hello' message and awaiting the resulting session key address.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/signMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst signer = new SessionKeySigner();\nconst sessionKeyAddress = await signer.signMessage(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Using checkGasSponsorshipEligibility in TypeScript\nDESCRIPTION: This example demonstrates how to use the checkGasSponsorshipEligibility method with a smartAccountClient. It checks the eligibility of a user operation for gas sponsorship and logs the result.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/checkGasSponsorshipEligibility.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { smartAccountClient } from \"./smartAccountClient\";\n// [!code focus:99]\nconst { eligible } = await smartAccountClient.checkGasSponsorshipEligibility({\n  uo: {\n    data: \"0xCalldata\",\n    target: \"0xTarget\",\n    value: 0n,\n  },\n});\n\nconsole.log(\n  `User Operation is ${\n    eligible ? \"eligible\" : \"ineligible\"\n  } for gas sponsorship.`\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Structure in TypeScript for Smart Wallet Policies\nDESCRIPTION: This snippet outlines the structure of rules within a smart wallet policy. It includes different types of rules such as methods, recipients, and contracts, with their respective actions and conditions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/policies/offchain-policy-configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype Rule =\n  | {\n      name: string;\n      type: \"methods\";\n      action: \"ALLOW\" | \"DENY\";\n      method:\n        | \"eth_signTransaction\" // EVM only\n        | \"sign_operation\" // EVM only\n        | \"wallet_prepareCalls\" // EVM only https://github.com/ethereum/ERCs/pull/758\n        | \"wallet_sendPreparedCalls\" // EVM only https://github.com/ethereum/ERCs/pull/758\n        | \"signAndSendTransaction\" // SVM only\n        | \"sendTransaction\"; // SVM only\n      conditions: Condition[];\n    }\n  | {\n      type: \"recipients\";\n      action: \"ALLOW\" | \"DENY\";\n      address: string[];\n    }\n  | {\n      type: \"contracts\";\n      action: \"ALLOW\" | \"DENY\";\n      address: string[];\n    };\n```\n\n----------------------------------------\n\nTITLE: Creating Session Key Client in TypeScript with AA-SDK\nDESCRIPTION: Demonstrates how to create a Modular Account V2 client with session key configuration and send a user operation. The code shows setting up both the main client and session key client, including necessary imports and configuration parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/session-keys/using-session-keys.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\nimport { parseEther } from \"viem\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst client = await createModularAccountV2Client({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nlet sessionKeyEntityId = 1;\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\n\nconst sessionKeyClient = await createModularAccountV2Client({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  signer: sessionKeySigner,\n  accountAddress: client.getAddress(client.account),\n  signerEntity: {\n    entityId: sessionKeyEntityId,\n    isGlobalValidation: true,\n  },\n});\n\nawait sessionKeyClient.sendUserOperation({\n  uo: {\n    target: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\", // The address to call in the UO\n    data: \"0x\", // The calldata to send in the UO\n    value: parseEther(\"1\"), // The value to send in the UO\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with LocalAccountSigner\nDESCRIPTION: Demonstrates how to create a signer instance using a mnemonic and sign a message. Uses both the AA-SDK core package and viem for private key generation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\nconst signature = await signer.signMessage(\"Hello, world!\");\n```\n\n----------------------------------------\n\nTITLE: Transferring Ownership of Modular Account V2 using TypeScript\nDESCRIPTION: This code snippet demonstrates how to transfer ownership of a Modular Account V2 using the 'updateFallbackSignerData' function. It creates a client, sets up a new owner address, and sends a user operation to update the fallback signer data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/managing-ownership.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { semiModularAccountBytecodeAbi } from \"@account-kit/smart-contracts/experimental\";\nimport { type SmartAccountSigner, LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { encodeFunctionData } from \"viem\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst client = await createModularAccountV2Client({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst newOwner = \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\";\n\n// The boolean parameter in updateFallbackSignerData is `isFallbackSignerDisabled`, and false indicates that we are using the value of the fallback signer\nawait client.sendUserOperation({\n  uo: {\n    target: client.account.address,\n    value: 0n,\n    data: encodeFunctionData({\n      abi: semiModularAccountBytecodeAbi,\n      functionName: \"updateFallbackSignerData\",\n      args: [newOwner, false],\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing an Alchemy Smart Account Client in TypeScript\nDESCRIPTION: This snippet shows the basic usage of `createAlchemySmartAccountClient`. It initializes a client for the Sepolia chain using an Alchemy transport configured with an API key. The function requires a configuration object (`AlchemySmartAccountClientConfig`) specifying the target blockchain (`chain`) and the connection method (`transport`). It returns an instance of `AlchemySmartAccountClient`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/createAlchemySmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAlchemySmartAccountClient, alchemy } from \"@account-kit/infra\";\nimport { sepolia } from \"@account-kit/infra/chain\";\n\nconst client = createAlchemySmartAccountClient({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Paymaster with SmartAccountClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a SmartAccountClient with a custom paymaster. It includes configuring a dummy paymaster for testing and implementing a real paymaster that sponsors user operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/paymasters.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst chain = sepolia;\nconst client = createSmartAccountClient({\n  chain,\n  transport: http(\"RPC_URL\"),\n  // sets the dummy paymasterAndData with paymaster address appended with some dummy paymasterData\n  // that looks like a valid paymasterData\n  dummyPaymasterAndData: async (userop) => ({\n    ...userop,\n    paymasterAndData: `0x<PAYMASTER_ADDRESS><PAYMASTER_DUMMY_DATA>`,\n  }),\n  paymasterAndData: async (userop, opts) => {\n    // call your paymaster here to sponsor the userop\n    // leverage the `opts` field to apply any overrides\n    return {\n      ...userop,\n      paymasterAndData: \"0xresponsefromprovider\",\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using watchBundlerClient to Monitor Changes (TypeScript)\nDESCRIPTION: This example shows how to call `watchBundlerClient` with a configuration object (`config`) and a callback function (`console.log`). The function monitors the bundler client within the provided config and executes the callback whenever changes are detected. It depends on `@account-kit/core` and a pre-configured `AlchemyAccountsConfig` object.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { watchBundlerClient } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchBundlerClient(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Adding Contract Address Access Entry Using SessionKeyPermissionsBuilder\nDESCRIPTION: Demonstrates how to create a new SessionKeyPermissionsBuilder instance and add a contract address access entry with specific parameters. This configures permissions for contract interactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addContractAddressAccessEntry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.addContractAddressAccessEntry({\n  contractAddress: \"0x1234\",\n  isOnList: true,\n  checkSelectors: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationOverrides Type in TypeScript\nDESCRIPTION: Defines a partial structure for overriding default values in a UserOperationStruct, including gas limits, fees, and other parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationOverrides]\n```\n\n----------------------------------------\n\nTITLE: Importing defaultUserOpSigner in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `defaultUserOpSigner` function from the `@aa-sdk/core` package. This function serves as a default middleware to sign user operations using a client account, validating the request and adding the signature. It requires the `@aa-sdk/core` package as a dependency.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/defaultUserOpSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { defaultUserOpSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder from Account Kit Smart Contracts\nDESCRIPTION: This snippet demonstrates how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setGasSpendLimit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Login UI Components in Account Kit React Application\nDESCRIPTION: This snippet demonstrates how to configure social login authentication using pre-built UI components in an Account Kit React application. It sets up Google, Facebook, and Apple authentication providers in popup mode.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/social-login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        // Include social login providers\n        { type: \"social\", authProviderId: \"google\", mode: \"popup\" },\n        { type: \"social\", authProviderId: \"facebook\", mode: \"popup\" },\n        { type: \"social\", authProviderId: \"apple\", mode: \"popup\" },\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n    // Required for popup flow\n    enablePopupOauth: true,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Link Authentication in React Native\nDESCRIPTION: This snippet shows how to handle the authentication process when a user clicks on the magic link in their email. It uses the Linking API to handle incoming deep links and extracts the bundle parameter to authenticate the user.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/signer/authenticating-users/authenticating-with-magic-link.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from \"react\";\nimport { Linking } from \"react-native\";\nimport { useAuthenticate } from \"@account-kit/react-native\";\n\nconst App = () => {\n  const { authenticate } = useAuthenticate();\n\n  // Authenticate a user using a bundle returned from a deep link\n  const handleUserAuth = async ({ bundle }: { bundle: string }) => {\n    authenticate({ bundle, type: \"email\" });\n  };\n\n  // Handle incoming deep links and authenticate the user\n  const handleIncomingURL = (event: { url: string }) => {\n    const regex = /[?&]([^=#]+)=([^&#]*)/g;\n\n    let params: Record<string, string> = {};\n    let match: RegExpExecArray | null;\n\n    while ((match = regex.exec(event.url))) {\n      if (match[1] && match[2]) {\n        params[match[1]] = match[2];\n      }\n    }\n\n    if (!params.bundle) {\n      return;\n    }\n\n    handleUserAuth({\n      bundle: params.bundle ?? \"\",\n    });\n  };\n\n  // Create a subscription to handle incoming deep links\n  useEffect(() => {\n    const subscription = Linking.addEventListener(\"url\", handleIncomingURL);\n\n    return () => subscription.remove();\n  }, []);\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Alchemy Signer in TypeScript\nDESCRIPTION: Example of authenticating a user using the Alchemy Signer. This snippet demonstrates email authentication, but other methods are supported as well.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/quickstart.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst result = await signer.authenticate({\n  type: \"email\",\n  email: \"example@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating WalletClientSigner with Viem in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a WalletClientSigner using Viem's WalletClient. It shows the setup process for both local and JSON RPC based wallets, and how to use them with Account Kit.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/signers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { mainnet } from \"viem/chains\";\nimport { WalletClientSigner } from \"@alchemy/aa-core\";\n\n// Local Account\nconst account = privateKeyToAccount(\"0x...\");\nconst localAccountClient = createWalletClient({\n  account,\n  chain: mainnet,\n});\nconst signer = new WalletClientSigner(localAccountClient, \"local\");\n\n// Remote Account\nconst window = {} as any; // replace with actual window object\nconst remoteSigner = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum),\n});\nconst [address] = await remoteSigner.getAddresses();\nconst signer2 = new WalletClientSigner(remoteSigner, \"json-rpc\", address);\n```\n\n----------------------------------------\n\nTITLE: Hydrating State from Cookies in SSR Environment\nDESCRIPTION: Shows how to extract the initial state from cookies and use it to hydrate the account state. This approach works for both client and server environments, ensuring consistent rendering across both contexts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/ssr.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookieToInitialState, hydrate } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\n// this is an example of how to get the cookie on the client\n// but on the server you might get it from the `req.cookies` object\n// it all depends on your framework\nconst initialState = cookieToInitialState(config, document.cookie); // [!code ++]\nconst { onMount } = hydrate(config, initialState);\n\nif (typeof window !== \"undefined\") {\n  onMount();\n}\n```\n\n----------------------------------------\n\nTITLE: Using alchemyGasAndPaymasterAndDataMiddleware with SmartAccountClient in TypeScript\nDESCRIPTION: Demonstrates how to use the alchemyGasAndPaymasterAndDataMiddleware function to configure a SmartAccountClient with Alchemy's Gas Manager for transaction sponsorship. It includes setting up the client with the Alchemy transport and Sepolia network.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyGasAndPaymasterAndDataMiddleware.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  sepolia,\n  alchemy,\n  alchemyGasAndPaymasterAndDataMiddleware,\n} from \"@account-kit/infra\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst client = createSmartAccountClient({\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  chain: sepolia,\n  ...alchemyGasAndPaymasterAndDataMiddleware({\n    policyId: \"policyId\",\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using getDefaultUserOperationFeeOptions with Arbitrum in TypeScript\nDESCRIPTION: Demonstrates how to use the getDefaultUserOperationFeeOptions function to retrieve fee options for the Arbitrum chain. It imports the necessary functions and chain object, then calls the function with the Arbitrum chain as an argument.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/getDefaultUserOperationFeeOptions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultUserOperationFeeOptions } from \"@account-kit/infra\";\nimport { arbitrum } from \"@account-kit/infra\";\n\nconst feeOpts = getDefaultUserOperationFeeOptions(arbitrum);\n```\n\n----------------------------------------\n\nTITLE: Using useMFA Hook with TypeScript\nDESCRIPTION: Demonstrates how to destructure and use the useMFA hook's returned functions and state variables for MFA operations. Returns functions for adding, verifying, removing, and getting MFA factors, along with a ready state indicator.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useMFA.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMFA } from \"@account-kit/react\";\n\nconst { addMFA, verifyMFA, removeMFA, getMFAFactors, isReady } = useMFA();\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationEstimateGasResponse Interface for Gas Estimation\nDESCRIPTION: Interface defining the structure for responses from the eth_estimateUserOperationGas RPC method, providing detailed information about the estimated gas usage for a UserOperation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationEstimateGasResponse]\n```\n\n----------------------------------------\n\nTITLE: Using isEntryPointVersion Function\nDESCRIPTION: Demonstrates how to use the isEntryPointVersion function to check if a version string is a valid EntryPointRegistry key. Returns a boolean indicating validity.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/isEntryPointVersion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isEntryPointVersion } from \"@aa-sdk/core\";\n\nconst valid = isEntryPointVersion(\"0.6.0\");\nconst invalid = isEntryPointVersion(\"0.8.0\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Smart Account Client with React Hook in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the useSmartAccountClient hook from the @account-kit/react-native package to set up a Smart Account Client. The hook returns the client object, the smart account address, and a loading state indicator.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/using-smart-accounts/setup-smart-account-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSmartAccountClient } from \"@account-kit/react-native\";\n\nconst { client, address, isLoadingClient } = useSmartAccountClient({});\n```\n\n----------------------------------------\n\nTITLE: Initializing AlchemySignerWebClient in TypeScript\nDESCRIPTION: Demonstrates how to create a new instance of AlchemySignerWebClient with connection and iframe configuration. This setup is necessary for connecting to the service and setting up the iframe stamper.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Variable Gas\nDESCRIPTION: Demonstrates sending the final user operation after collecting all required signatures using the default variable gas feature of the Multisig Plugin smart contract.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/multisig-plugin/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { signers, owners, threshold } from \"./client\";\n\nconst multisigAccountClient = await createMultisigAccountAlchemyClient({\n  chain,\n  // using the last signer\n  signer: signers[2],\n  owners,\n  threshold,\n  apiKey: \"YOUR_API_KEY\",\n});\n\nconst result = await multisigAccountClient.sendUserOperation({\n  uo: request.callData,\n  context: {\n    aggregatedSignature,\n    signatures: [firstSig, secondSig],\n    userOpSignatureType: \"ACTUAL\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Session Key Plugin Installation\nDESCRIPTION: Verifies if the Session Key Plugin is installed on a Modular Account using account loupe actions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPlugin } from \"@account-kit/smart-contracts\";\n\nconst isPluginInstalled = await modularAccountClient\n  .getInstalledPlugins({})\n  .then((x) => x.includes(SessionKeyPlugin.meta.addresses[chain.id]));\n```\n\n----------------------------------------\n\nTITLE: Creating Upgraded Account Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a smart account client for the upgraded Modular Account. It uses the createAlchemySmartAccountClient function and extends it with multiOwnerPluginActions. The snippet also shows how to read the owners of the upgraded account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/upgrading-to-modular-account.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAlchemySmartAccountClient, alchemy } from \"@account-kit/infra\";\nimport { multiOwnerPluginActions } from \"@account-kit/smart-contracts\";\nimport { upgradedAccount } from \"./upgradedAccount\";\n\nconst upgradedAccountClient = await createAlchemySmartAccountClient({\n  transport: alchemy({ apiKey: \"YOUR_API_KEY\" }),\n  chain: lightAccountClient.chain,\n  account: upgradedAccount,\n}).extend(multiOwnerPluginActions);\n\nconst owners = await upgradedAccountClient.readOwners();\n```\n\n----------------------------------------\n\nTITLE: Generating Permissions with SessionKeyPermissionBuilder in TypeScript\nDESCRIPTION: Demonstrates how to use the SessionKeyPermissionBuilder to generate permissions data for a session key, including setting time range, access control list, and spending limits.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SessionKeyPermissionBuilder();\nconst permissionsData = builder\n  .setTimeRange({ validFrom: 0, validUntil: 1000 })\n  .setContractAccessControl({\n    type: ContractAccessControlType.ALLOWLIST,\n    list: [\n      {\n        address: contractAddress,\n        selectorOrSignature: \"function()\" // optional\n      }\n    ]\n  })\n  .setNativeTokenSpendLimit({\n    value: 100000000000000000n, // 0.1 ETH\n    resetPeriod: 60 * 60 * 24 // 1 day\n  })\n  .setErc20SpendLimit({\n    address: tokenAddress,\n    value: 1000000000000000000n, // 1 token\n    resetPeriod: 60 * 60 * 24 * 7 // 1 week\n  })\n  .setGasSpendLimit({\n    value: 1000000000000000n, // 0.001 ETH\n    resetPeriod: 60 * 60 * 24 // 1 day\n  })\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Using useAuthModal Hook in a React Component\nDESCRIPTION: Demonstrates how to implement the useAuthModal hook in a React component to create a login button that opens the authentication modal when clicked.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAuthModal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthModal } from \"@account-kit/react\";\n\nconst ComponentWithAuthModal = () => {\n  const { openAuthModal } = useAuthModal();\n\n  return (\n    <div>\n      <button onClick={openAuthModal}>Login</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Email and Passkey in TypeScript\nDESCRIPTION: This snippet demonstrates how to authenticate a user using their email and passkey. It's important to validate the email before creating an account to prevent loss of wallet access.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/passkey-login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst result = await signer.authenticate({\n  type: \"passkey\",\n  email: \"user@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Status with Account Kit React Hook\nDESCRIPTION: This snippet demonstrates how to use the useSignerStatus hook from Account Kit to determine if a user is authenticated. This can be used to conditionally render UI elements based on the authentication state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/social-login.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Owner Light Account Implementation - TypeScript\nDESCRIPTION: Demonstrates the complete implementation of creating a multi-owner light account using the Sepolia network, including necessary imports, transport configuration, and signer setup using a generated private key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\";\n\nconst account = await createMultiOwnerLightAccount({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for User Authentication in TypeScript\nDESCRIPTION: Demonstrates how to import the BaseSignerClient class from the @account-kit/signer package. This client is needed to use the stampWhoami method for generating signed authentication requests.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/stampWhoami.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Alchemy Transport in TypeScript\nDESCRIPTION: Demonstrates the basic usage of the `alchemy` function to create a transport. It uses an API key, assuming the chain supports both Bundler and Node RPCs via Alchemy. Alternatively, an `rpcUrl` or `jwt` (or both `rpcUrl` and `jwt`) can be provided instead of `apiKey`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { alchemy } from \"@account-kit/infra\";\n\nconst transport = alchemy({\n  // NOTE: you can also pass in an rpcUrl or jwt here or rpcUrl and jwt\n  apiKey: \"your-api-key\",\n});\n```\n\n----------------------------------------\n\nTITLE: Transferring Light Account Ownership using transferOwnership Client Action in TypeScript\nDESCRIPTION: This code snippet demonstrates how to transfer ownership of a Light Account using the transferOwnership client action, and then create a new client instance with the new owner. It requires an existing lightAccountClient and the new owner's credentials.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/light-account/transfer-ownership-light-account.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lightAccountClient } from \"./client\";\nimport { createLightAccountClient } from \"@account-kit/smart-contracts\";\n\n// this will return the signer of the smart account you want to transfer ownerhip to\nconst newOwner = LocalAccountSigner.mnemonicToAccountSigner(NEW_OWNER_MNEMONIC);\nconst accountAddress = lightAccountClient.getAddress();\n\nconst hash = lightAccountClient.transferOwnership({\n  newOwner,\n  waitForTxn: true,\n});\n\n// after transaction is mined on the network,\n// create a new light account client for the transferred Light Account\nconst transferredClient = await createLightAccountClient({\n  transport: custom(smartAccountClient),\n  chain: smartAccountClient.chain,\n  signer: newOwner,\n  accountAddress, // NOTE: you MUST specify the original smart account address to connect using the new owner/signer\n  version: \"v2.0.0\", // NOTE: if the version of the light account is not v2.0.0, it must be specified here\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Magic Link in UI Components with Account Kit React\nDESCRIPTION: This snippet demonstrates how to configure Email Magic Link authentication using pre-built UI components from Account Kit. It sets up the authentication config with customizable options for the email input and button.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/email-magic-link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        {\n          type: \"email\",\n          emailMode: \"magicLink\",\n\n          // Optional customizations:\n          buttonLabel: \"Continue with Email\",\n          placeholder: \"Enter your email address\",\n        },\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users via Google OAuth in React Native\nDESCRIPTION: This code demonstrates how to implement Google authentication in a React Native application using the useAuthenticate hook from Account Kit. It sets up a sign-in button that triggers OAuth authentication with Google as the provider and handles potential errors.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/signer/authenticating-users/authenticating-with-social-auth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, Text, Pressable, Alert } from \"react-native\";\nimport { useAuthenticate } from \"@account-kit/react-native\";\n\nfunction SignInWithSocialAuth() {\n  const { authenticate } = useAuthenticate();\n\n  const handleUserSignInWithGoogle = () => {\n    try {\n      authenticate({\n        type: \"oauth\",\n        redirectUrl: \"<your-app-scheme>://<your-auth-callback-route>\",\n        mode: \"redirect\",\n        authProviderId: \"google\",\n      });\n    } catch (e) {\n      Alert.alert(\"Error authenticating user. Check logs for more details.\");\n\n      console.log(\"Error authenticating user: \", e);\n    }\n  };\n\n  return (\n    <View>\n      <Text>Sign In with Google</Text>\n      <Pressable onPress={handleUserSignInWithGoogle}>\n        <Text>Sign In</Text>\n      </Pressable>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LocalAccountSigner with Private Key\nDESCRIPTION: Demonstrates how to create a new LocalAccountSigner instance using a generated private key. Uses the viem library for private key generation and account creation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { privateKeyToAccount, generatePrivateKey } from \"viem\";\n\nconst signer = new LocalAccountSigner(\n  privateKeyToAccount(generatePrivateKey())\n);\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Modular Account v2 in TypeScript\nDESCRIPTION: Demonstrates how to send a user operation using the upgraded Modular Account v2 client to deploy the account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await maV2Client.sendUserOperation({\n  uo: {\n    target: target,\n    value: sendAmount,\n    data: \"0x\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ERC-20 Gas Sponsorship with Stackup Paymaster in TypeScript\nDESCRIPTION: This code example shows how to set up ERC-20 gas sponsorship using the Stackup paymaster with the Alchemy SDK. It includes configuration for the Stackup client, Alchemy client, and custom gas and fee estimation logic.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/paymasters.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccountClient } from \"@account-kit/smart-contracts\";\nimport {\n  alchemyFeeEstimator,\n  createAlchemyPublicRpcClient,\n  alchemy,\n} from \"@account-kit/infra\";\nimport {\n  deepHexlify,\n  resolveProperties,\n  LocalAccountSigner,\n} from \"@aa-sdk/core\";\nimport { createClient, http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst signer = LocalAccountSigner.generatePrivateKeySigner();\nconst chain = sepolia;\nconst stackupClient = createClient({\n  // TODO: Replace with your stackup API key here (https://docs.stackup.sh/docs/paymaster-api)\n  transport: http(\"https://api.stackup.sh/v1/paymaster/STACKUP_API_KEY\"),\n});\n\nconst alchemyTransport = http(\"ALCHEMY_RPC_URL\");\n\nconst alchemyClient = await createMultiOwnerModularAccountClient({\n  chain,\n  signer,\n  transport: http(\"ALCHEMY_RPC_URL\"),\n  // Bypasses alchemy gas estimation and instead uses Stackup for gas estimation\n  gasEstimator: async (userOp) => ({\n    ...userOp,\n    callGasLimit: \"0x0\",\n    preVerificationGas: \"0x0\",\n    verificationGasLimit: \"0x0\",\n  }),\n  // Uses alchemy fee estimation to comply with bundler\n  feeEstimator: alchemyFeeEstimator(alchemyTransport),\n  paymasterAndData: async (userop, opts) => {\n    const pmResponse: any = await stackupClient.request({\n      // @ts-ignore\n      method: \"pm_sponsorUserOperation\",\n      params: [\n        deepHexlify(await resolveProperties(userop)),\n        opts.account.getEntryPoint().address,\n        {\n          // @ts-ignore\n          type: \"payg\", // Replace with ERC20 context based on stackups documentation\n        },\n      ],\n    });\n    return {\n      ...userop,\n      ...pmResponse,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating EthersProviderAdapter with a Light Account in TypeScript\nDESCRIPTION: This snippet demonstrates creating an instance of `EthersProviderAdapter`. It first creates a `LightAccount` using `@account-kit/smart-contracts` and a `LocalAccountSigner` from `@aa-sdk/core`. Then, it initializes `EthersProviderAdapter` with the created account, the chain definition (e.g., `sepolia` from `@account-kit/infra`), and a standard RPC provider URL. This adapter allows interaction with the blockchain via the smart account using an Ethers.js compatible interface.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter({\n  account,\n  chain: sepolia,\n  rpcProvider: \"https://eth-sepolia.g.alchemy.com/v2/your-api-key\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing EthersProviderAdapter Send Method\nDESCRIPTION: Shows how to import the EthersProviderAdapter class which contains the send method implementation for making EIP-1193 compliant RPC requests.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/send.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EthersProviderAdapter } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Using getBundlerClient in TypeScript\nDESCRIPTION: Demonstrates how to use the getBundlerClient method to retrieve a BundlerClient instance from a configuration object. Requires a pre-configured AlchemyAccountsConfig object.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// see `createConfig` for more information on how to create a config\nimport { config } from \"./config\";\n\nconst bundlerClient = getBundlerClient(config);\n```\n\n----------------------------------------\n\nTITLE: Initializing AlchemyWebSigner Instance\nDESCRIPTION: Demonstrates how to create a new instance of AlchemyWebSigner with configuration for RPC URL and iframe container. The signer requires client configuration including connection details and iframe settings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemyWebSigner/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Global Shims in React Native\nDESCRIPTION: Code to import and register global shims for crypto functionality in the index.js file.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"node-libs-react-native/globals.js\";\nimport \"react-native-get-random-values\";\n\n// rest of index.js\n```\n\n----------------------------------------\n\nTITLE: Using SessionKeySigner to Sign Messages\nDESCRIPTION: Demonstrates how to create a SessionKeySigner instance and use it to sign a message. The method accepts a SignableMessage parameter and returns a Promise that resolves to a Hex value.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/signMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst signer = new SessionKeySigner();\nconst sessionKeyAddress = await signer.signMessage(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Implementing alchemyFeeEstimator with Smart Account Client\nDESCRIPTION: Demonstrates how to use alchemyFeeEstimator with the createSmartAccountClient, including setting up the Alchemy transport and configuring the client with the fee estimator.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyFeeEstimator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemyFeeEstimator, alchemy } from \"@account-kit/infra\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst alchemyTransport = alchemy({\n  chain: sepolia,\n  apiKey: \"your-api-key\",\n});\n\nconst client = createSmartAccountClient({\n  feeEstimator: alchemyFeeEstimator(alchemyTransport),\n  ...otherParams,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SmartContractAccount with toSmartContractAccount in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom smart account implementation using the toSmartContractAccount function. It includes required and optional parameters for configuring the account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/smart-contracts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEntryPoint, toSmartContractAccount } from \"@aa-sdk/core\";\nimport { http, type SignableMessage, type Hash } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst myAccount = await toSmartContractAccount({\n  /// REQUIRED PARAMS ///\n  source: \"MyAccount\",\n  transport: http(\"RPC_URL\"),\n  chain: sepolia,\n  // The EntryPointDef that your account is compatible with\n  entryPoint: getEntryPoint(sepolia),\n  // This should return a concatenation of your `factoryAddress` and the `callData` for your factory's create account method\n  getAccountInitCode: async (): Promise<Hash> => \"0x{factoryAddress}{callData}\",\n  // an invalid signature that doesn't cause your account to revert during validation\n  getDummySignature: async (): Promise<Hash> => \"0x1234...\",\n  // given a UO in the form of {target, data, value} should output the calldata for calling your contract's execution method\n  encodeExecute: async (uo): Promise<Hash> => \"0x....\",\n  signMessage: async ({ message }): Promise<Hash> => \"0x...\",\n  signTypedData: async (typedData): Promise<Hash> => \"0x000\",\n\n  /// OPTIONAL PARAMS ///\n  // if you already know your account's address, pass that in here to avoid generating a new counterfactual\n  accountAddress: \"0x...\",\n  // if your account supports batching, this should take an array of UOs and return the calldata for calling your contract's batchExecute method\n  encodeBatchExecute: async (uos): Promise<Hash> => \"0x...\",\n  // if your contract expects a different signing scheme than the default signMessage scheme, you can override that here\n  signUserOperationHash: async (hash): Promise<Hash> => \"0x...\",\n  // allows you to define the calldata for upgrading your account\n  encodeUpgradeToAndCall: async (params): Promise<Hash> => \"0x...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Splitting Bundler and Node RPC Traffic with Third-Party Providers in TypeScript\nDESCRIPTION: This example illustrates how to use two different third-party RPC providers for bundler and node traffic. It uses the split function to override specific methods for the bundler while using a fallback for other RPC calls.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/bundlers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { split } from \"@aa-sdk/core\";\nimport { createPublicClient, http } from \"viem\";\n\nconst bundlerMethods = [\n  \"eth_sendUserOperation\",\n  \"eth_estimateUserOperationGas\",\n  \"eth_getUserOperationReceipt\",\n  \"eth_getUserOperationByHash\",\n  \"eth_supportedEntryPoints\",\n];\n\nconst clientWithSplit = createPublicClient({\n  transport: split({\n    overrides: [\n      {\n        methods: bundlerMethods,\n        transport: http(\"BUNDLER_RPC_URL\"),\n      },\n    ],\n    fallback: http(\"OTHER_RPC_URL\"),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using getBundlerClient with AccountSigner in TypeScript\nDESCRIPTION: This example demonstrates how to instantiate an `AccountSigner` using an `EthersProviderAdapter` and a smart account (created via `createLightAccount`). It then calls the `getBundlerClient()` method on the `signer` instance to retrieve the associated `BundlerClient`. This requires dependencies like `@aa-sdk/ethers`, `@aa-sdk/core`, `@account-kit/infra`, `@account-kit/smart-contracts`, and `viem`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/getBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n\nconst bundler = signer.getBundlerClient();\n```\n\n----------------------------------------\n\nTITLE: Generating Permissions with SessionKeyPermissionBuilder in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the SessionKeyPermissionBuilder to generate permissions data for a session key. It sets various permissions including time range, access control list, and spending limits.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = PermissionBuilder.create({\n  validAfter: 0n,\n  validUntil: 0n,\n})\n  .setAccessListType(\"ALLOWLIST\")\n  .setAccessControlEntry({\n    address: contractAddress,\n    isOnList: true,\n    checkSelectors: true,\n  })\n  .setAccessControlEntrySelector({\n    address: contractAddress,\n    selector: \"0x095ea7b3\",\n    isOnList: true,\n  })\n  .setNativeTokenSpendLimit({\n    address: ethers.ZeroAddress,\n    limit: ethers.parseEther(\"1\"),\n  })\n  .setInterval({\n    type: \"NATIVE_TOKEN_SPEND\",\n    address: ethers.ZeroAddress,\n    interval: 7 * 24 * 60 * 60n, // 1 week\n  })\n  .setERC20SpendLimit({\n    address: usdcAddress,\n    limit: ethers.parseUnits(\"100\", 6),\n  })\n  .setGasSpendLimit({\n    limit: ethers.parseEther(\"0.1\"),\n  })\n  .setInterval({\n    type: \"GAS_SPEND\",\n    address: ethers.ZeroAddress,\n    interval: 24 * 60 * 60n, // 1 day\n  })\n\nconst permissionsData = builder.getPermissionData()\n```\n\n----------------------------------------\n\nTITLE: Setting Illustration Style in Account Kit\nDESCRIPTION: This snippet demonstrates how to customize the illustration style of icons used in Account Kit components by setting the illustrationStyle property in the uiConfig when calling createConfig. The example uses the 'outline' style.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/customization/theme.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"YOUR_KEY\" }),\n    chain: sepolia,\n  },\n  {\n    // ... other ui config options\n    illustrationStyle: \"outline\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using GetSignerType with Local Account Signer\nDESCRIPTION: Demonstrates how to use getSignerType with a LocalAccountSigner to determine the signer type. Shows complete setup including creating a signer, public client, and generating a signature.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getSignerType.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSignerType } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { createPublicClient, generatePrivateKey } from \"viem\";\n\nconst signer = LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey());\nconst client = createPublicClient(...);\nconst signature = signer.signMessage(\"Hello World\");\n\nconst signerType = await getSignerType({ client, signature, signer }); // EOA\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Owners of Modular Account in TypeScript\nDESCRIPTION: TypeScript code showing how to fetch all current owners of a connected Modular Account using the SmartAccountClient.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/manage-ownership-mav1.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\n\n// owners is an array of the addresses of the account owners\nconst owners = await modularAccountClient.readOwners();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Social Providers with Account Kit UI Components in React\nDESCRIPTION: This code demonstrates how to configure custom social providers like GitHub and Twitter using Auth0 with Account Kit's UI components. It shows how to set up the authentication configuration including provider display settings, logos, and authentication mode.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/social-providers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        // Standard social providers\n        { type: \"social\", authProviderId: \"google\", mode: \"popup\" },\n\n        // Custom social providers via Auth0\n        {\n          type: \"social\",\n          authProviderId: \"auth0\",\n          // Specify the Auth0 connection to use directly\n          auth0Connection: \"github\",\n          displayName: \"GitHub\",\n          // Custom logo URL for the provider\n          logoUrl:\n            \"https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png\",\n          // Optional dark mode logo\n          logoUrlDark:\n            \"https://github.githubassets.com/assets/GitHub-Mark-Light-ea2971cee799.png\",\n          mode: \"popup\",\n        },\n        {\n          type: \"social\",\n          authProviderId: \"auth0\",\n          auth0Connection: \"twitter\",\n          displayName: \"Twitter\",\n          logoUrl: \"https://path-to-twitter-logo.png\",\n          mode: \"popup\",\n        },\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n    // Required for popup flow\n    enablePopupOauth: true,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Using useSignMessage Hook with Smart Account Client\nDESCRIPTION: Demonstrates how to use the useSignMessage hook to sign messages with a smart account client, including handling success and error callbacks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSignMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignMessage, useSmartAccountClient } from \"@account-kit/react\";\nconst data = \"messageToSign\";\nconst { client } = useSmartAccountClient({});\n\nconst {\n  signMessage,\n  signMessageAsync,\n  signedMessage,\n  isSigningMessage,\n  error,\n} = useSignMessage({\n  client,\n  // these are optional\n  onSuccess: (result) => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n\nconst result = await signMessage({ message: data });\n```\n\n----------------------------------------\n\nTITLE: Installing SessionKeyPlugin with Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to extend a SmartAccountClient with sessionKeyPluginActions and use it to install the SessionKeyPlugin on a Modular Account. It includes the process of calling the installSessionKeyPlugin method and waiting for the transaction to complete.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/manage-plugins/install-plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\nimport { sessionKeyPluginActions } from \"@account-kit/smart-contracts\";\n\n// extend smart account client with sessionKeyPluginActions to call SessionKeyPlugin methods\nconst sessionKeyExtendedClient = modularAccountClient.extend(\n  sessionKeyPluginActions\n);\n\nconst { hash } = await sessionKeyExtendedClient.installSessionKeyPlugin({\n  // 1st arg is the initial set of session keys\n  // 2nd arg is the tags for the session keys\n  // 3rd arg is the initial set of permissions\n  args: [[], [], []],\n});\n\nawait client.waitForUserOperationTransaction({ hash });\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Redirect Authentication\nDESCRIPTION: Demonstrates how to initialize the AlchemySignerWebClient and use the oauthWithRedirect method for OAuth authentication. Shows configuration of API key and iframe container along with OAuth parameters setup.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/oauthWithRedirect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nawait client.oauthWithRedirect({\n  type: \"oauth\",\n  authProviderId: \"google\",\n  mode: \"redirect\",\n  redirectUrl: \"/\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing installPlugin from Account Kit Smart Contracts in TypeScript\nDESCRIPTION: Shows how to import the installPlugin method from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/installPlugin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { installPlugin } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Initializing AlchemyWebSigner Instance\nDESCRIPTION: Demonstrates how to create a new instance of AlchemyWebSigner with custom client configuration including RPC URL and iframe container settings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemyWebSigner/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using getSignerType to determine signer type\nDESCRIPTION: Demonstrates how to use the getSignerType function with a LocalAccountSigner to determine if the signer is an Externally Owned Account (EOA) or a CONTRACT. This example sets up a signer using a private key, creates a client, and then calls getSignerType.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getSignerType.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSignerType } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { createPublicClient, generatePrivateKey } from \"viem\";\n\nconst signer = LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey());\nconst client = createPublicClient(...);\nconst signature = signer.signMessage(\"Hello World\");\n\nconst signerType = await getSignerType({ client, signature, signer }); // EOA\n```\n\n----------------------------------------\n\nTITLE: Constructing Modular Account v2 Client in TypeScript\nDESCRIPTION: Creates a Modular Account v2 client using the Alchemy AA-SDK. It configures the client with an Alchemy transport, Sepolia network, and a user-provided signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nconst modularAccountV2Client = await createModularAccountV2Client({\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  chain: sepolia,\n  signer: yourSigner,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Application\nDESCRIPTION: Command to create a new Expo application using the latest version of the create-expo-app tool.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app@latest\n```\n\n----------------------------------------\n\nTITLE: Using simulateUserOperationChanges with Alchemy Client\nDESCRIPTION: Demonstrates how to create an Alchemy client and use it with simulateUserOperationChanges to simulate user operations. The function returns a promise with asset change information.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/simulateUserOperationChanges.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateUserOperationChanges, createAlchemyPublicRpcClient } from \"@account-kit/infra\";\n\nconst client = createAlchemyPublicRpcClient(...);\nconst response = await simulateUserOperationChanges(client, {\nuo: ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating WalletClientSigner with Viem WalletClient in TypeScript\nDESCRIPTION: This example demonstrates how to create a WalletClientSigner using Viem's WalletClient. It shows the setup process, including creating a transport, creating a WalletClient, and initializing the WalletClientSigner.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/signers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClient, custom } from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { mainnet } from \"viem/chains\";\nimport { WalletClientSigner } from \"@alchemy/aa-core\";\n\n// 1. Import your private key or however you manage keys\nconst privateKey = \"0x...\";\n\n// 2. Create an account from the private key\nconst account = privateKeyToAccount(privateKey);\n\n// 3. Create a transport (you can use any viem transport)\nconst transport = custom(window.ethereum);\n\n// 4. Create the wallet client\nconst client = createWalletClient({\n  account,\n  chain: mainnet,\n  transport,\n});\n\n// 5. Create the WalletClientSigner\nconst signer = new WalletClientSigner(client, \"custom\");\n\n// Now you can use the signer with your Smart Account Client\nconst smartAccountClient = new LightSmartContractAccount({\n  //...\n  signer, // Pass the signer here\n});\n```\n\n----------------------------------------\n\nTITLE: Completing MFA Authentication with TOTP in React\nDESCRIPTION: This component handles the second factor of authentication when MFA is required. It monitors the signer status for the MFA verification state and provides a handler to validate the TOTP code from an authenticator app.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/mfa/email-otp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useSignerStatus,\n  useSigner,\n  useAuthenticate,\n} from \"@account-kit/react\";\nimport { AlchemySignerStatus } from \"@account-kit/signer\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction MfaVerification() {\n  const signer = useSigner();\n  const { status } = useSignerStatus();\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  // Called when user enters their TOTP code from authenticator app\n  const handleVerify = async (totpCode: string) => {\n    try {\n      setIsVerifying(true);\n      await signer?.validateMultiFactors({\n        multiFactorCode: totpCode,\n      });\n      // After successful MFA validation, the user will be authenticated\n      // and the onSuccess callback from the initial authenticate call will fire\n    } catch (error) {\n      console.error(\"MFA verification failed:\", error);\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  // Example of prompting user when MFA verification is needed\n  useEffect(() => {\n    if (status === AlchemySignerStatus.AWAITING_MFA_AUTH) {\n      // Show TOTP input UI to the user\n    }\n  }, [status]);\n\n  return (\n    // Your TOTP input UI\n    <div>{/* TOTP input component */}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using preparePopupOauth with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance and call the preparePopupOauth method. This setup is necessary before using popup-based OAuth authentication.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/preparePopupOauth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nawait signer.preparePopupOauth();\n```\n\n----------------------------------------\n\nTITLE: Creating Account Kit Core Configuration\nDESCRIPTION: Create a static configuration object containing all the state used by the package functions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/quickstart.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/shared/core/config.ts]\n```\n\n----------------------------------------\n\nTITLE: Sending Email Magic Link for User Authentication in React Native\nDESCRIPTION: This snippet demonstrates how to send an email magic link to a user for authentication. It uses the useAuthenticate hook from @account-kit/react-native to handle the authentication process. The component includes a form for email input and a button to trigger the magic link sending process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/signer/authenticating-users/authenticating-with-magic-link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react-native\";\nimport React, { useState } from \"react\";\nimport { Alert, View, Text, TextInput, Button, Pressable } from \"react-native\";\n\nfunction SignInWithOtp() {\n  const { authenticate } = useAuthenticate();\n  const [email, setEmail] = useState(\"\");\n\n  const handleUserSignInWithMagicLink = () => {\n    try {\n      authenticate({\n        email,\n        type: \"email\",\n      });\n\n      // Magic link sent to the user's email. Prompt the user to click the link in their email.\n    } catch (e) {\n      Alert.alert(\"Error sending Magic Link. Check logs for more details.\");\n\n      console.log(\"Error sending Magic Link: \", e);\n    }\n  };\n\n  return (\n    <View>\n      <Text>Enter Your Email to Sign In</Text>\n      <View>\n        <TextInput\n          value={email}\n          onChangeText={(val) => setEmail(val.toLowerCase())}\n          placeholder=\"john@doe.com\"\n        />\n        <Pressable onPress={handleUserSignInWithMagicLink}>\n          {({ pressed }) => (\n            <View\n              style={[\n                {\n                  opacity: pressed ? 0.5 : 1,\n                  transform: [\n                    {\n                      scale: pressed ? 0.98 : 1,\n                    },\n                  ],\n                },\n              ]}\n            >\n              <Text>Sign In</Text>\n            </View>\n          )}\n        </Pressable>\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring LightAccount Ownership Using SendUserOperation\nDESCRIPTION: Alternative implementation of ownership transfer using the sendUserOperation method, which provides a more direct but verbose approach.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/light-account/transfer-ownership-light-account.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await lightAccountClient.sendUserOperation({\n  to: accountAddress,\n  data: lightAccountClient.encodeTransferOwnership(newOwner),\n});\n// wait for txn with UO to be mined\nawait lightAccountClient.waitForUserOperationTransaction(result);\n```\n\n----------------------------------------\n\nTITLE: Importing Alchemy Transport Module\nDESCRIPTION: Shows how to import the alchemy transport module from the account-kit infrastructure package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemy } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing disconnect method in TypeScript\nDESCRIPTION: Shows how to import the disconnect method from the @account-kit/core module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/disconnect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { disconnect } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Using disconnect method with Sepolia network in TypeScript\nDESCRIPTION: Demonstrates how to use the disconnect method with a configuration for the Sepolia network. It includes creating a config object and then calling the disconnect method with that config.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/disconnect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { disconnect, createConfig } from \"@account-kit/core\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst config = createConfig({\n  chain: sepolia,\n  apiKey: \"your-api-key\",\n});\n\nawait disconnect(config);\n```\n\n----------------------------------------\n\nTITLE: Using the useSignerStatus Hook\nDESCRIPTION: Demonstrates basic usage of the useSignerStatus hook to obtain the current signer status.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSignerStatus.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\nconst signerStatus = useSignerStatus();\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Link Authentication in React Native\nDESCRIPTION: This snippet shows how to handle the authentication process when a user clicks on the magic link in their email. It uses the Linking API from React Native to handle incoming deep links and extracts the 'bundle' parameter to authenticate the user using the useAuthenticate hook.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/signer/authenticating-users/authenticating-with-magic-link.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from \"react\";\nimport { Linking } from \"react-native\";\nimport { useAuthenticate } from \"@account-kit/react-native\";\n\nconst App = () => {\n  const { authenticate } = useAuthenticate();\n\n  // Authenticate a user using a bundle returned from a deep link\n  const handleUserAuth = async ({ bundle }: { bundle: string }) => {\n    authenticate({ bundle, type: \"email\" });\n  };\n\n  // Handle incoming deep links and authenticate the user\n  const handleIncomingURL = (event: { url: string }) => {\n    const regex = /[?&]([^=#]+)=([^&#]*)/g;\n\n    let params: Record<string, string> = {};\n    let match: RegExpExecArray | null;\n\n    while ((match = regex.exec(event.url))) {\n      if (match[1] && match[2]) {\n        params[match[1]] = match[2];\n      }\n    }\n\n    if (!params.bundle) {\n      return;\n    }\n\n    handleUserAuth({\n      bundle: params.bundle ?? \"\",\n    });\n  };\n\n  // Create a subscription to handle incoming deep links\n  useEffect(() => {\n    const subscription = Linking.addEventListener(\"url\", handleIncomingURL);\n\n    return () => subscription.remove();\n  }, []);\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForUserOperationTransaction Hook with TypeScript\nDESCRIPTION: Demonstrates complete usage of the useWaitForUserOperationTransaction hook with the SmartAccountClient. Includes handling success and error callbacks, and accessing the transaction status.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useWaitForUserOperationTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  useWaitForUserOperationTransaction,\n  useSmartAccountClient,\n} from \"@account-kit/react\";\n\nconst { client } = useSmartAccountClient({});\nconst {\n  waitForUserOperationTransaction,\n  waitForUserOperationTransactionResult,\n  isWaitingForUserOperationTransaction,\n  error,\n} = useWaitForUserOperationTransaction({\n  client,\n  // these are optional\n  onSuccess: (result) => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n```\n\n----------------------------------------\n\nTITLE: Using pluginManagerActions with a Smart Account Client\nDESCRIPTION: Demonstrates how to extend a smart account client with plugin management capabilities using the pluginManagerActions method. This enables installing and uninstalling plugins on the account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/pluginManagerActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginManagerActions } from \"@account-kit/smart-contracts\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst client = createSmartAccountClient(...).extend(pluginManagerActions);\n```\n\n----------------------------------------\n\nTITLE: Using alchemyGasManagerMiddleware in TypeScript\nDESCRIPTION: Demonstrates how to use the alchemyGasManagerMiddleware method when creating a smart account client. It includes importing necessary dependencies, setting up the client with a transport, chain, and the middleware.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyGasManagerMiddleware.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sepolia, alchemyGasManagerMiddleware } from \"@account-kit/infra\";\nimport { http } from \"viem\";\n\nconst client = createSmartAccountClient({\n  transport: http(\"rpc-url\"),\n  chain: sepolia,\n  ...alchemyGasManagerMiddleware(\"policyId\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Auth0 GitHub Connection in TypeScript\nDESCRIPTION: This snippet demonstrates how to authenticate a user directly with GitHub via Auth0 using the AA SDK. It uses the 'auth0Connection' parameter to bypass the Auth0 selection screen and send users directly to GitHub authentication.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/auth0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nawait authenticate({\n  type: \"oauth\",\n  authProviderId: \"auth0\",\n  auth0Connection: \"github\",\n  mode: \"popup\",\n});\n```\n\n----------------------------------------\n\nTITLE: Removing MFA Factors Implementation\nDESCRIPTION: Demonstrates how to initialize the AlchemyWebSigner and use it to remove MFA factors. The example shows configuration of RPC URL and iframe container, followed by calling the removeMfa method with specific factor IDs.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/removeMfa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.removeMfa({\n  multiFactorIds: [\"factor-id-1\", \"factor-id-2\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading EOA to Smart Account with EIP-7702 using Account Kit in TypeScript\nDESCRIPTION: This code example shows how to create a Modular Account v2 client with EIP-7702 support, and how to send a user operation that will automatically upgrade the EOA to a smart account on the first transaction.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/using-7702.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { signer } from \"./signer.js\";\n\n// Constructing the smart account client\nconst smartAccountClient = await createModularAccountV2Client({\n  mode: \"7702\",\n  transport: alchemy({ apiKey: \"your-api-key\" }), // Get your API key: https://dashboard.alchemy.com/apps\n  chain: sepolia,\n  signer,\n});\n\n// Sending a user operation\nconst uoHash = await smartAccountClient.sendUserOperation({\n  uo: {\n    target: zeroAddress,\n    value: 0n,\n    data: \"0x\",\n  },\n});\n\nconst txnHash = await smartAccountClient.waitForUserOperationTransaction(\n  uoHash\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiOwner Plugin Actions with Smart Account Client\nDESCRIPTION: Demonstrates how to integrate multiOwnerPluginActions with a smart account client using the extend method. This setup enables access to owner management functions like readOwners and isOwnerOf.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/multiOwnerPluginActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerPluginActions } from \"@account-kit/smart-contracts\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst client = createSmartAccountClient(...).extend(multiOwnerPluginActions);\n```\n\n----------------------------------------\n\nTITLE: Hydrating Account State in SSR Environment\nDESCRIPTION: Demonstrates how to hydrate the account state on the client-side after SSR. The hydrate function is called with the config, and the onMount method is executed when the component has mounted on the client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/ssr.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hydrate } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst { onMount } = hydrate(config);\n\n// when your component has mounted on the client, call the onMount method\n// how you do this will depend on your framework, but here we'll just check for `window`\n// to be defined\nif (typeof window !== \"undefined\") {\n  onMount();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing defaultGasEstimator in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import the defaultGasEstimator middleware from the @aa-sdk/core package. It shows the standard ES module import syntax required to access the middleware functionality within the SDK. The import is necessary to use the default gas estimator or to override it with a custom implementation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/defaultGasEstimator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defaultGasEstimator } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Address Mapping - SemiModularAccountBytecode v2.0.0\nDESCRIPTION: Contract addresses for SemiModularAccountBytecode implementation and factory across different chains. Factory address remains consistent across networks while implementing specific account functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nFactory: 0x00000000000017c61b5bEe81050EC8eFc9c6fecd\nImplementation: 0x000000000000c5A9089039570Dd36455b5C07383\n```\n\n----------------------------------------\n\nTITLE: Checking User Operation Gas Sponsorship Eligibility with Smart Account Client in TypeScript\nDESCRIPTION: This code demonstrates how to use a smartAccountClient to call the checkGasSponsorshipEligibility method by providing a user operation (UO) object. It requires an instantiated smartAccountClient and inputs for the UserOperation structure, including 'data', 'target', and 'value' fields. The function returns an object with an 'eligible' boolean, which is logged for user feedback. All dependencies must be correctly installed, and the client configured before use.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/checkGasSponsorshipEligibility.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { smartAccountClient } from \"./smartAccountClient\";\n// [!code focus:99]\nconst { eligible } = await smartAccountClient.checkGasSponsorshipEligibility({\n  uo: {\n    data: \"0xCalldata\",\n    target: \"0xTarget\",\n    value: 0n,\n  },\n});\n\nconsole.log(\n  `User Operation is ${\n    eligible ? \"eligible\" : \"ineligible\"\n  } for gas sponsorship.`\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Paymaster-Restricted Session Key in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a session key that is restricted to using a specific paymaster for user operations in a Modular Account V2. It uses the Paymaster Guard Module to enforce this restriction, limiting the session key's ability to only use the specified paymaster.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/session-keys/adding-session-keys.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  HookType,\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  getDefaultPaymasterGuardModuleAddress,\n  PaymasterGuardModule,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\nconst ecdsaValidationModuleAddress =\n  getDefaultSingleSignerValidationModuleAddress(client.chain);\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(\"SESSION_KEY_MNEMONIC\");\n\nconst hookEntityId = 0; // Make sure that the account does not have a hook with this entity id on the module yet\nconst paymasterAddress = \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\";\n\n// Adding a session key that can only use the above paymaster for user operations\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: true,\n    isSignatureValidation: true,\n    isUserOpValidation: true,\n  },\n  selectors: [],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(), // Address of the session key\n  }),\n  hooks: [\n    {\n      hookConfig: {\n        address: getDefaultPaymasterGuardModuleAddress(client.chain),\n        entityId: hookEntityId,\n        hookType: HookType.VALIDATION, // fixed value\n        hasPreHooks: true, // fixed value\n        hasPostHooks: false, // fixed value\n      },\n      initData: PaymasterGuardModule.encodeOnInstallData({\n        entityId: hookEntityId,\n        paymaster: paymasterAddress,\n      }),\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Status with useSignerStatus in Account Kit\nDESCRIPTION: Shows how to use the useSignerStatus hook to determine if a user is authenticated. This can be used to conditionally render UI elements based on the user's authentication state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/passkey-login.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Auth0 Authentication with Account Kit Hooks in React\nDESCRIPTION: Code example showing how to implement custom Auth0 authentication using Account Kit's React hooks. Demonstrates both generic Auth0 login and direct provider login (e.g., GitHub) using the useAuthenticate hook.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/social-providers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// Option 1: Generic Auth0 login (shows Auth0 provider selection screen)\nconst handleAuth0Login = () => {\n  authenticate(\n    {\n      type: \"oauth\",\n      authProviderId: \"auth0\",\n      mode: \"popup\", // or \"redirect\"\n    },\n    {\n      onSuccess: () => {\n        // Authentication successful!\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n\n// Option 2: Direct provider login (bypasses Auth0 selection screen)\nconst handleGitHubLogin = () => {\n  authenticate(\n    {\n      type: \"oauth\",\n      authProviderId: \"auth0\",\n      auth0Connection: \"github\", // Use the connection name from Auth0\n      mode: \"popup\", // or \"redirect\"\n    },\n    {\n      onSuccess: () => {\n        // Authentication successful!\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using simulateUserOperationChanges with an Alchemy Client in TypeScript\nDESCRIPTION: This example shows the practical usage of `simulateUserOperationChanges`. It involves importing necessary functions (`simulateUserOperationChanges`, `createAlchemyPublicRpcClient`), creating an Alchemy Public RPC client, and then calling the simulation function with the client and user operation details (`uo`). The function returns a promise resolving to the simulation results including asset changes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/simulateUserOperationChanges.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { simulateUserOperationChanges, createAlchemyPublicRpcClient } from \"@account-kit/infra\";\n\nconst client = createAlchemyPublicRpcClient(...);\nconst response = await simulateUserOperationChanges(client, {\nuo: ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Alchemy Public RPC Client in TypeScript\nDESCRIPTION: This snippet shows the usage of `createAlchemyPublicRpcClient` to initialize a client. It requires importing `createAlchemyPublicRpcClient`, `alchemy`, and the desired chain configuration (e.g., `sepolia`) from `@account-kit/infra`. The client is configured with a transport using an Alchemy API key and the specific blockchain chain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/createAlchemyPublicRpcClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { createAlchemyPublicRpcClient, alchemy } from \"@account-kit/infra\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst client = createAlchemyPublicRpcClient({\n  transport: alchemy({\n    apiKey: \"ALCHEMY_API_KEY\",\n  }),\n  chain: sepolia,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Modular Account Alchemy Client in TypeScript\nDESCRIPTION: Demonstrates how to create a modular account Alchemy client by configuring the transport, chain, and signer. This example uses the sepolia network, an Alchemy API key for transport, and a LocalAccountSigner with a generated private key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createModularAccountAlchemyClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst alchemyAccountClient = await createModularAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Operation Gas Sponsorship\nDESCRIPTION: React component demonstrating how to set gas policy ID for specific UserOperations using the useSmartAccountClient and useSendUserOperation hooks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/sponsor-gas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  useSmartAccountClient,\n  useSendUserOperation,\n} from \"@account-kit/react\";\n\nexport default function MyComponent() {\n  const { client } = useSmartAccountClient({\n    policyId: \"GAS_MANAGER_POLICY_ID\",\n  });\n  const { sendUserOperation } = useSendUserOperation({ client });\n\n  return (\n    <button\n      onClick={() =>\n        sendUserOperation({\n          uo: {\n            target: \"0xTARGET_ADDRESS\",\n            data: \"0x\",\n            value: 0n,\n          },\n        })\n      }\n    >\n      Send Sponsored User Operation\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Light Account Client in TypeScript\nDESCRIPTION: This snippet shows how to create a Light Account client using the Account Kit. It uses the createLightAccountAlchemyClient function and configures it with an Alchemy transport, the Sepolia network, and a local account signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/upgrading-to-modular-account.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nexport const lightAccountClient = await createLightAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"YOUR_API_KEY\" }),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Using AlchemyWebSigner to Sign Transactions in TypeScript\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner with client configuration and use it to sign a transaction. The example shows setting up RPC URL and iframe container configurations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst tx = await signer.signTransaction({\n  to: \"0x1234\",\n  value: \"0x1234\",\n  data: \"0x1234\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using AlchemyWebSigner for Transaction Signing\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance and use it to sign a transaction. The example shows configuration with RPC URL and iframe settings, followed by signing a transaction with basic parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst tx = await signer.signTransaction({\n  to: \"0x1234\",\n  value: \"0x1234\",\n  data: \"0x1234\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using useAuthenticate Hook for Custom Authentication in React\nDESCRIPTION: Example of how to use the useAuthenticate hook to create custom authentication UI. This hook provides the authenticate and authenticateAsync functions that handle the authentication process depending on the specific authentication method chosen.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/react-hooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\n\nfunction MyAuthComponent() {\n  const { authenticate, authenticateAsync, isPending } = useAuthenticate();\n\n  // Use authenticate with different parameters based on auth method\n  // The specific parameters depend on the authentication method\n  // See the individual authentication method pages for details\n}\n```\n\n----------------------------------------\n\nTITLE: Using Disconnect Method with AlchemyWebSigner\nDESCRIPTION: Example showing how to initialize the AlchemyWebSigner with configuration options and call the disconnect method to log out a user. Includes RPC URL and iframe container configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/disconnect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nawait signer.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Migrating LightAccount Initialization in TypeScript\nDESCRIPTION: This snippet demonstrates the changes required to initialize a LightAccount in version 3.x.x. It shows the transition from using the LightSmartContractAccount class to the createLightAccount function, and updates the parameters accordingly.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/migration-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  LightSmartContractAccount, // [!code --]\n  createLightAccount, // [!code ++]\n  getDefaultLightAccountFactoryAddress, // [!code --]\n} from \"@account-kit/smart-contracts\";\nimport {\n  LocalAccountSigner,\n  type Hex,\n} from \"@aa-sdk/core\";\nimport { sepolia } from \"@aa-sdk/core\";\n\nconst chain = sepolia;\n\nconst account = new LightSmartContractAccount({ // [!code --]\nconst account = await createLightAccount({ // [!code ++]\n    rpcClient: client, // [!code --]\n    transport: http(\"RPC_URL\"), // [!code ++]\n    signer,\n    chain,\n    factoryAddress: getDefaultLightAccountFactoryAddress(chain), // [!code --]\n  });\n```\n\n----------------------------------------\n\nTITLE: Using connect Method with AccountSigner in TypeScript\nDESCRIPTION: This example demonstrates how to create an AccountSigner instance, set up a provider, and use the connect method. It includes creating a light account, setting up a provider, and connecting it to the signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/connect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n\nsigner.connect(provider);\n```\n\n----------------------------------------\n\nTITLE: Importing createMultisigModularAccount in TypeScript\nDESCRIPTION: Shows how to import the createMultisigModularAccount function from the Account Kit smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultisigModularAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigModularAccount } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Checking Modular Account Implementation in TypeScript\nDESCRIPTION: Retrieves the implementation address of a Modular Account and checks if it's already a Modular Account implementation, requiring no further action.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"docs/shared/infra/client\";\nconst impl = await client.account.getImplementationAddress();\n\n// implementation slot exists and is a deployed modular account. this user has a modular account at the modular account counterfactual address. no work needs to be done.\nif (impl == \"ModularAccountImpl\") {\n  // done\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop and Replace User Operations in React Native\nDESCRIPTION: Example component demonstrating how to use useDropAndReplaceUserOperation hook to handle failed user operations. The component includes functionality to send a user operation and then drop and replace it with updated fees. It also handles loading states and success/error callbacks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/using-smart-accounts/retry-user-operations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, Pressable, Text } from \"react-native\";\nimport {\n  useDropAndReplaceUserOperation,\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react-native\";\n\nexport function ComponentWithDropAndReplaceUO() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperationAsync, isSendingUserOperation } =\n    useSendUserOperation({\n      client,\n    });\n\n  const { dropAndReplaceUserOperation, isDroppingAndReplacingUserOperation } =\n    useDropAndReplaceUserOperation({\n      client,\n      onSuccess: ({ hash, request }) => {\n        // [optional] Do something with the hash and request\n      },\n      onError: (error) => {\n        // [optional] Do something with the error\n      },\n      // [optional] ...additional mutationArgs\n    });\n\n  return (\n    <View>\n      <Pressable\n        onPress={async () => {\n          const { request } = await sendUserOperationAsync({\n            uo: {\n              target: \"0xTARGET_ADDRESS\",\n              data: \"0x\",\n              value: 0n,\n            },\n          });\n\n          dropAndReplaceUserOperation({\n            uoToDrop: request,\n          });\n        }}\n        disabled={isSendingUserOperation || isDroppingAndReplacingUserOperation}\n      >\n        <View>\n          <Text>\n            {isSendingUserOperation\n              ? \"Sending...\"\n              : isDroppingAndReplacingUserOperation\n              ? \"Replacing...\"\n              : \"Send then Replace UO\"}\n          </Text>\n        </View>\n      </Pressable>\n    </View>\n  );\n```\n\n----------------------------------------\n\nTITLE: Using createLightAccountAlchemyClient in TypeScript\nDESCRIPTION: This example demonstrates how to use the createLightAccountAlchemyClient function to create an Alchemy smart account client. It includes importing necessary dependencies, setting up the configuration, and creating the client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createLightAccountAlchemyClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst lightAccountClient = await createLightAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Export with AlchemySignerWebClient\nDESCRIPTION: Demonstrates complete usage of the exportWallet method, including client initialization with API key and iframe configuration, followed by the wallet export process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/exportWallet.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.exportWallet({\n  iframeContainerId: \"export-iframe-container\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Viem Client with Split Transport in @aa-sdk/core (TypeScript)\nDESCRIPTION: Demonstrates how to use the `split` function to configure a `viem` `createPublicClient`. It defines specific RPC methods (`bundlerMethods`) to be routed to one transport (`BUNDLER_RPC_URL`) via the `overrides` parameter, while all other methods use the `fallback` transport (`OTHER_RPC_URL`). This allows directing UserOperation-related requests to a bundler and standard RPC calls elsewhere.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/split.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createPublicClient, http } from \"viem\";\nimport { split } from \"@aa-sdk/core\";\n\nconst bundlerMethods = [\n  \"eth_sendUserOperation\",\n  \"eth_estimateUserOperationGas\",\n  \"eth_getUserOperationReceipt\",\n  \"eth_getUserOperationByHash\",\n  \"eth_supportedEntryPoints\",\n];\n\nconst clientWithSplit = createPublicClient({\n  transport: split({\n    overrides: [\n      {\n        methods: bundlerMethods,\n        transport: http(BUNDLER_RPC_URL),\n      },\n    ],\n    fallback: http(OTHER_RPC_URL),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Native Token Limit Module in TypeScript\nDESCRIPTION: This code snippet demonstrates how to install a native token limit module for a modular account. It sets up a session key with a 1 ETH spending limit, configuring both validation and execution hooks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/session-keys/adding-session-keys.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  HookType,\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  getDefaultNativeTokenLimitModuleAddress,\n  NativeTokenLimitModule,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { parseEther } from \"viem\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\nconst ecdsaValidationModuleAddress =\n  getDefaultSingleSignerValidationModuleAddress(client.chain);\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(\"SESSION_KEY_MNEMONIC\");\n\nconst hookEntityId = 0; // Make sure that the account does not have a hook with this entity id on the module yet\n\n// Adding a session key that has a 1 eth native token spend limit\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: true,\n    isSignatureValidation: true,\n    isUserOpValidation: true,\n  },\n  selectors: [],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(), // Address of the session key\n  }),\n  hooks: [\n    {\n      hookConfig: {\n        address: getDefaultNativeTokenLimitModuleAddress(client.chain),\n        entityId: hookEntityId,\n        hookType: HookType.VALIDATION, // fixed value\n        hasPreHooks: true, // fixed value\n        hasPostHooks: false, // fixed value\n      },\n      initData: NativeTokenLimitModule.encodeOnInstallData({\n        entityId: hookEntityId,\n        spendLimit: parseEther(\"1\"),\n      }),\n    },\n    {\n      hookConfig: {\n        address: getDefaultNativeTokenLimitModuleAddress(client.chain),\n        entityId: hookEntityId,\n        hookType: HookType.EXECUTION, // fixed value\n        hasPreHooks: true, // fixed value\n        hasPostHooks: false, // fixed value\n      },\n      initData: \"0x\", // no initdata required as the limit was set up in the above installation call\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Logger from @aa-sdk/core in TypeScript\nDESCRIPTION: Imports the `Logger` class specifically from the '@aa-sdk/core' package. This import is necessary to access the static methods available on the Logger class, such as `debug`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/debug.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing Logger from AA SDK Core in TypeScript\nDESCRIPTION: Shows how to import the Logger class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/info.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing getMAV2UpgradeToData from @account-kit/smart-contracts\nDESCRIPTION: Shows how to import the getMAV2UpgradeToData method from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getMAV2UpgradeToData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMAV2UpgradeToData } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing Logger from @aa-sdk/core in TypeScript\nDESCRIPTION: Shows how to import the Logger class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/info.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchConnection in TypeScript\nDESCRIPTION: Shows how to import the watchConnection method from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchConnection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchConnection } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Using disconnect to Clear Account State (TypeScript, Account Kit)\nDESCRIPTION: This usage example illustrates how to initialize a configuration with a specific chain and API key and then disconnect by passing the config object to the 'disconnect' function. It requires '@account-kit/core' and '@account-kit/infra' as dependencies. The 'config' parameter must be an 'AlchemyAccountsConfig' object, typically created using 'createConfig'. The disconnect operation is asynchronous and clears the signer, accounts, and internal store, with no output returned. Replace 'your-api-key' with an actual API key for production or testing.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/disconnect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { disconnect, createConfig } from \"@account-kit/core\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst config = createConfig({\n  chain: sepolia,\n  apiKey: \"your-api-key\",\n});\n\nawait disconnect(config);\n```\n\n----------------------------------------\n\nTITLE: Using LocalAccountSigner to Sign a Message\nDESCRIPTION: This example demonstrates how to create a LocalAccountSigner instance from a mnemonic, and use it to sign a message. It imports necessary functions, generates a private key, creates a signer, and signs a message.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\nconst signature = await signer.signMessage(\"Hello, world!\");\n```\n\n----------------------------------------\n\nTITLE: Using useAddPasskey Hook with Callbacks\nDESCRIPTION: Demonstrates how to use the useAddPasskey hook with success and error callbacks. Returns an object containing the addPasskey function, isAddingPasskey status boolean, and potential error state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAddPasskey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAddPasskey } from \"@account-kit/react\";\n\nconst { addPasskey, isAddingPasskey, error } = useAddPasskey({\n  // these are optional\n  onSuccess: () => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Existing Passkey\nDESCRIPTION: Shows how to authenticate users with an existing passkey, useful for implementing passkey-based login after initial email signup.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/authenticate-users.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"./config\";\nimport { getSigner } from \"@account-kit/core\";\n\nconst signer = getSigner(config);\n\nif (!signer) {\n  // this can happen if your rendering this on the server\n  // the signer instance is only available on the client\n  throw new Error(\"Signer not found\");\n}\n\nawait signer.authenticate({\n  type: \"passkey\",\n  createNew: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Using buildSessionKeysToRemoveStruct in TypeScript\nDESCRIPTION: Demonstrates how to use the buildSessionKeysToRemoveStruct function with a smart account client to remove session keys. It requires a client instance and an object with keys to remove.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/buildSessionKeysToRemoveStruct.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildSessionKeysToRemoveStruct } from \"@account-kit/smart-contracts\";\n\nconst client = createSmartAccountClient(...);\n\nconst keysToRemove = await buildSessionKeysToRemoveStruct(client, {\nkeys: [\"0x...\", \"0x...\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Token Limits and Allowlist\nDESCRIPTION: Example of setting up allowlist and ERC-20 token spending limits for modular accounts. Shows configuration of address and function-level permissions along with token spending restrictions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/session-keys/adding-session-keys.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  HookType,\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  getDefaultAllowlistModuleAddress,\n  AllowlistModule,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { parseEther } from \"viem\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\nconst ecdsaValidationModuleAddress =\n  getDefaultSingleSignerValidationModuleAddress(client.chain);\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(\"SESSION_KEY_MNEMONIC\");\n\nconst hookEntityId = 0;\nconst allowlistInstallData = AllowlistModule.encodeOnInstallData({\n  entityId: hookEntityId,\n  inputs: [\n    {\n      target: \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\",\n      hasSelectorAllowlist: false,\n      hasERC20SpendLimit: false,\n      erc20SpendLimit: parseEther(\"100\"),\n      selectors: [],\n    },\n  ],\n});\n\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: true,\n    isSignatureValidation: true,\n    isUserOpValidation: true,\n  },\n  selectors: [],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(),\n  }),\n  hooks: [\n    {\n      hookConfig: {\n        address: getDefaultAllowlistModuleAddress(client.chain),\n        entityId: hookEntityId,\n        hookType: HookType.VALIDATION,\n        hasPreHooks: true,\n        hasPostHooks: false,\n      },\n      initData: allowlistInstallData,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Object Properties with filterUndefined in TypeScript\nDESCRIPTION: Shows usage of the filterUndefined function to remove properties with undefined or null values from an object. The input is an object literal with some values as undefined and null, and the function returns a new object omitting those properties. No required parameters except the target object; returns a sanitized object. The main limitation is that only undefined and null properties are removed; other falsy values (such as 0 or \"\") are retained.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/filterUndefined.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { filterUndefined } from \"@aa-sdk/core\";\n\nconst result = filterUndefined({\n  foo: undefined,\n  bar: null,\n  baz: \"baz\",\n}); // { baz: \"baz\" }\n```\n\n----------------------------------------\n\nTITLE: Using getMAV2UpgradeToData Function with Light Account Client\nDESCRIPTION: Demonstrates how to create a light account client and use it with getMAV2UpgradeToData to initiate an upgrade to Modular Account V2.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getMAV2UpgradeToData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createLightAccountClient,\n  getMAV2UpgradeToData,\n} from \"@account-kit/smart-contracts\";\n\nconst client = createLightAccountClient({});\nconst upgradeData = await getMAV2UpgradeToData(client, {});\n```\n\n----------------------------------------\n\nTITLE: Displaying LightAccount v1.1.0 Addresses in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the factory and implementation addresses for LightAccount v1.1.0 across various blockchain networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Chain            | Factory Address                              | Account Implementation                       |\n| ---------------- | -------------------------------------------- | -------------------------------------------- |\n| Eth Mainnet      | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Eth Sepolia      | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Polygon Mainnet  | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Polygon Amoy     | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Optimism         | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Optimism Sepolia | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Arbitrum         | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Arbitrum Sepolia | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Base             | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Base Sepolia     | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Zora Mainnet     | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Zora Sepolia     | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Fraxtal Mainnet  | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n| Fraxtal Sepolia  | `0x00004EC70002a32400f8ae005A26081065620D20` | `0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba` |\n```\n\n----------------------------------------\n\nTITLE: Transferring LightAccount Ownership Using Client Action\nDESCRIPTION: Implementation of ownership transfer using the transferOwnership client action method. Includes creating a new client instance for the transferred account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/light-account/transfer-ownership-light-account.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = lightAccountClient.transferOwnership({\n  newOwner,\n  waitForTxn: true,\n});\n\n// after transaction is mined on the network,\n// create a new light account client for the transferred Light Account\nconst transferredClient = await createLightAccountClient({\n  transport: custom(smartAccountClient),\n  chain: smartAccountClient.chain,\n  signer: newOwner,\n  accountAddress, // NOTE: you MUST specify the original smart account address to connect using the new owner/signer\n  version: \"v2.0.0\", // NOTE: if the version of the light account is not v2.0.0, it must be specified here\n});\n```\n\n----------------------------------------\n\nTITLE: Using toSmartContractAccount to Create a Smart Contract Account\nDESCRIPTION: Demonstrates the usage of `toSmartContractAccount` with required and optional parameters. It initializes a smart contract account by providing essential configuration like the source identifier, transport mechanism (HTTP RPC URL), blockchain chain (Sepolia), EntryPoint definition, and functions for account initialization (`getAccountInitCode`), dummy signature generation (`getDummySignature`), execution encoding (`encodeExecute`), message signing (`signMessage`), and typed data signing (`signTypedData`). Optional parameters like a predefined `accountAddress`, batch execution encoding (`encodeBatchExecute`), custom user operation hash signing (`signUserOperationHash`), and upgrade encoding (`encodeUpgradeToAndCall`) are also shown. Requires dependencies like `viem` and `viem/chains`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/toSmartContractAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, type SignableMessage } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst myAccount = await toSmartContractAccount({\n  /// REQUIRED PARAMS ///\n  source: \"MyAccount\",\n  transport: http(\"RPC_URL\"),\n  chain: sepolia,\n  // The EntryPointDef that your account is com\"patible with\n  entryPoint: getEntryPoint(sepolia, { version: \"0.6.0\" }),\n  // This should return a concatenation of your `factoryAddress` and the `callData` for your factory's create account method\n  getAccountInitCode: async () => \"0x{factoryAddress}{callData}\",\n  // an invalid signature that doesn't cause your account to revert during validation\n  getDummySignature: () => \"0x1234...\",\n  // given a UO in the form of {target, data, value} should output the calldata for calling your contract's execution method\n  encodeExecute: async (uo) => \"0xcalldata\",\n  signMessage: async ({ message }: { message: SignableMessage }) => \"0x...\",\n  signTypedData: async (typedData) => \"0x000\",\n\n  /// OPTIONAL PARAMS ///\n  // if you already know your account's address, pass that in here to avoid generating a new counterfactual\n  accountAddress: \"0xaddressoverride\",\n  // if your account supports batching, this should take an array of UOs and return the calldata for calling your contract's batchExecute method\n  encodeBatchExecute: async (uos) => \"0x...\",\n  // if your contract expects a different signing scheme than the default signMessage scheme, you can override that here\n  signUserOperationHash: async (hash) => \"0x...\",\n  // allows you to define the calldata for upgrading your account\n  encodeUpgradeToAndCall: async (params) => \"0x...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users via Google OAuth in React Native\nDESCRIPTION: This code demonstrates how to create a sign-in button that authenticates users via Google using the Account Kit SDK. It utilizes the useAuthenticate hook to handle the authentication flow, setting up a redirect to the app's deep link when authentication completes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/signer/authenticating-users/authenticating-with-social-auth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, Text, Pressable, Alert } from \"react-native\";\nimport { useAuthenticate } from \"@account-kit/react-native\";\n\nfunction SignInWithSocialAuth() {\n  const { authenticate } = useAuthenticate();\n\n  const handleUserSignInWithGoogle = () => {\n    try {\n      authenticate({\n        type: \"oauth\",\n        redirectUrl: \"<your-app-scheme>://<your-auth-callback-route>\",\n        mode: \"redirect\",\n        authProviderId: \"google\",\n      });\n    } catch (e) {\n      Alert.alert(\"Error authenticating user. Check logs for more details.\");\n\n      console.log(\"Error authenticating user: \", e);\n    }\n  };\n\n  return (\n    <View>\n      <Text>Sign In with Google</Text>\n      <Pressable onPress={handleUserSignInWithGoogle}>\n        <Text>Sign In</Text>\n      </Pressable>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Modular Account V2 Client in TypeScript\nDESCRIPTION: Demonstrates the usage of createModularAccountV2Client function to create a Modular Account V2 client. It includes setting up necessary imports, defining required variables, and calling the function with appropriate parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createModularAccountV2Client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { alchemy, sepolia } from \"@account-kit/infra\";\n\nconst MNEMONIC = \"...\";\nconst RPC_URL = \"...\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(MNEMONIC);\n\nconst chain = sepolia;\n\nconst transport = alchemy({ rpcUrl: RPC_URL });\n\nconst policyId = \"...\";\n\nconst modularAccountV2Client = await createModularAccountV2Client({\n  chain,\n  signer,\n  transport,\n  policyId, // NOTE: you may only pass in a gas policy ID if you provide an Alchemy transport!\n});\n```\n\n----------------------------------------\n\nTITLE: Destructuring useAccount Hook State - React TypeScript\nDESCRIPTION: Shows usage of the useAccount hook in a React component, invoking it with an object specifying the account type (e.g., 'LightAccount'). The resulting destructured variables include the account instance, its address, and a loading state indicator. This hook is dependent on proper signer initialization and is tailored for either smart contract accounts or EOAs, returning relevant address and object information with respective loading states.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccount } from \"@account-kit/react\";\n\nconst { account, address, isLoadingAccount } = useAccount({\n  type: \"LightAccount\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize AlchemyWebSigner with RPC configuration and authenticate a user using email. Shows complete implementation including iframe container setup and authentication call.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/authenticate.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.authenticate({\n  type: \"email\",\n  email: \"foo@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using signAuthorization Method with LocalAccountSigner in TypeScript\nDESCRIPTION: Demonstrates how to use the LocalAccountSigner to create a signer from a private key and sign an authorization. It includes generating a private key, creating a signer, and signing an authorization with specific parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signAuthorization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst signer = LocalAccountSigner.privateKeyToAccountSigner(\n  generatePrivateKey()\n);\nconst signedAuthorization = await signer.signAuthorization({\n  contractAddress: \"0x1234123412341234123412341234123412341234\",\n  chainId: 1,\n  nonce: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Modular Account Client with Third-Party Infra in TypeScript\nDESCRIPTION: Code snippet showing how to create a Modular Account client using a third-party infrastructure. It imports required modules, sets up the client with a custom RPC URL, specifies the network chain, and configures a signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccountClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst accountClient = await createMultiOwnerModularAccountClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Using signTypedData Method with SessionKeySigner\nDESCRIPTION: Demonstrates how to instantiate a SessionKeySigner and use it to sign typed data according to EIP-712 standard. The example creates a simple Message type with a content field.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/signTypedData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst signer = new SessionKeySigner();\nconsole.log(\n  await signer.signTypedData({\n    types: {\n      Message: [{ name: \"content\", type: \"string\" }],\n    },\n    primaryType: \"Message\",\n    message: { content: \"Hello\" },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating SmartAccountClient with Custom Account in TypeScript\nDESCRIPTION: This snippet shows how to create a SmartAccountClient using a custom account implementation. It uses the Alchemy infrastructure and the Sepolia test network.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/smart-contracts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAlchemySmartAccountClient, alchemy } from \"@account-kit/infra\";\nimport { sepolia } from \"viem/chains\";\nimport { myAccount } from \"./my-account\";\n\nconst client = createAlchemySmartAccountClient({\n  // created above\n  account: myAccount,\n  chain: sepolia,\n  transport: alchemy({\n    apiKey: \"YOUR_API_KEY\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Session Key Permissions\nDESCRIPTION: This example shows how to update an existing session key's permissions, specifically changing the time range. It uses the SessionKeyPermissionBuilder to generate the update data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionKeyPlugin = new SessionKeyPlugin()\nconst publicKey = \"0x...\"\nconst permissionsData = PermissionBuilder.create({\n  validAfter: BigInt(Math.floor(Date.now() / 1000)),\n  validUntil: BigInt(Math.floor(Date.now() / 1000)) + 60n * 60n * 24n * 7n, // 1 week\n}).getPermissionData()\n\nconst updateKeyCalldata = sessionKeyPlugin.encodeCalldata(\"updateKeyPermissions\", [\n  publicKey,\n  permissionsData,\n])\n```\n\n----------------------------------------\n\nTITLE: Handling Magic Link Redirect in React Authentication Flow\nDESCRIPTION: This code demonstrates how to handle the redirect that occurs when a user clicks on a magic link sent to their email. It extracts the bundle parameter from the URL and uses it to complete the authentication process with the authenticate function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/mfa/email-magic-link.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\n\nfunction MagicLinkRedirect() {\n  const { authenticate } = useAuthenticate();\n\n  const handleMagicLinkRedirect = () => {\n    const url = new URL(window.location.href);\n    const bundle = url.searchParams.get(\"bundle\");\n\n    // If there's no bundle parameter, this isn't a magic link redirect\n    if (!bundle) return;\n\n    authenticate(\n      {\n        type: \"email\",\n        bundle,\n      },\n      {\n        onSuccess: () => {\n          // Authentication successful!\n        },\n        onError: (error) => {\n          // Handle error\n        },\n      }\n    );\n  };\n\n  // Call this function when the component mounts\n  useEffect(() => {\n    handleMagicLinkRedirect();\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Using setChain Method in TypeScript\nDESCRIPTION: This example demonstrates how to use the setChain method to change the current chain. It imports necessary dependencies, including the config and sepolia chain, then calls setChain with these parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/setChain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setChain } from \"@account-kit/core\";\nimport { config } from \"./config\";\nimport { sepolia } from \"@account-kit/infra\";\n\nawait setChain(config, sepolia);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Chain-Specific Alchemy Paymaster Address (TypeScript)\nDESCRIPTION: Shows how to use the getAlchemyPaymasterAddress method, passing a chain constant (such as sepolia) as a parameter. The method returns the Alchemy paymaster address corresponding to the specified blockchain chain. Requires both the Chain constant and the utility function from the @account-kit/infra package; expects a valid Chain object as input and returns an Address object as output.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/getAlchemyPaymasterAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { sepolia, getAlchemyPaymasterAddress } from \"@account-kit/infra\";\n\nconst paymasterAddress = getAlchemyPaymasterAddress(sepolia);\n```\n\n----------------------------------------\n\nTITLE: Authenticating Anonymous User with Passkey in TypeScript\nDESCRIPTION: This code snippet shows how to authenticate an anonymous user using a passkey. It uses the signer.authenticate method with the 'passkey' type and sets createNew to false to prevent creating a new account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/passkey-login.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst result = await signer.authenticate({\n  type: \"passkey\",\n  createNew: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multisig Account Alchemy Client\nDESCRIPTION: Demonstrates how to create and configure a multisig account Alchemy client with custom transport, chain, signer, owners, and threshold settings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultisigAccountAlchemyClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\"\n\nconst alchemyAccountClient = await createMultisigAccountAlchemyClient({\ntransport: alchemy({ apiKey: \"your-api-key\" }),\nchain: sepolia,\nsigner: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\nowners: [...], // other owners on the account\nthreshold: 2, // 2 of N signatures\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Session Key Permissions in TypeScript\nDESCRIPTION: Demonstrates how to update permissions for an existing session key using the SessionKeyPermissionsBuilder.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst initialPermissions =\n  new SessionKeyPermissionsBuilder().setNativeTokenSpendLimit({\n    spendLimit: 1000000n,\n  });\n\nconst result = await extendedClient.updateKeyPermissions({\n  args: [sessionKeyAddress, initialPermissions.encode()],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Signup without Email\nDESCRIPTION: Implementation of passkey-only signup without email verification, suitable for cases with alternative recovery mechanisms.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/passkey-signup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user wants to create a passkey without email\nconst handlePasskeyOnlySignup = (username: string) => {\n  authenticate(\n    {\n      type: \"passkey\",\n      createNew: true,\n      username, // A unique identifier for the passkey\n    },\n    {\n      onSuccess: () => {\n        // Success - passkey created and user authenticated\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Managing MFA Factors in React with Account Kit\nDESCRIPTION: This code demonstrates how to manage multi-factor authentication factors, including retrieving all factors and removing a specific factor. It uses the getMFAFactors and removeMFA mutations from the useMFA hook in Account Kit.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/mfa/setup-mfa.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect, useState } from \"react\";\nimport { useMFA } from \"@account-kit/react\";\nimport type { MfaFactor } from \"@account-kit/signer\";\n\nfunction ManageMfaComponent() {\n  const { getMFAFactors, removeMFA } = useMFA();\n  const [factors, setFactors] = useState<MfaFactor[]>([]);\n\n  // Fetch all MFA verification methods (factors) for the current user\n  useEffect(() => {\n    // Only fetch when component mounts and we're ready\n    getMFAFactors.mutate(undefined, {\n      onSuccess: (result) => {\n        // factors.multiFactors is an array of verification methods\n        setFactors(result.multiFactors);\n      },\n    });\n  }, [getMFAFactors]);\n\n  // Remove a TOTP authenticator app by its multiFactorId\n  const handleRemoveAuthenticator = (multiFactorId: string) => {\n    removeMFA.mutate(\n      { multiFactorIds: [multiFactorId] },\n      {\n        onSuccess: () => {\n          console.log(\"Authenticator removed successfully!\");\n          // Update local state to reflect the removal\n          setFactors(factors.filter((f) => f.multiFactorId !== multiFactorId));\n        },\n      }\n    );\n  };\n\n  // Loading states are available directly from the mutation objects\n  if (getMFAFactors.isPending) return <div>Loading MFA settings...</div>;\n\n  return (\n    <div>\n      <h2>Your Authentication Methods</h2>\n\n      {factors.length === 0 ? (\n        <p>No authenticator apps configured.</p>\n      ) : (\n        <ul>\n          {factors.map((factor) => (\n            <li key={factor.multiFactorId}>\n              {factor.multiFactorType === \"totp\"\n                ? \"Authenticator App\"\n                : factor.multiFactorType}\n              <button\n                onClick={() => handleRemoveAuthenticator(factor.multiFactorId)}\n                disabled={removeMFA.isPending}\n              >\n                Remove\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {getMFAFactors.isError && (\n        <div className=\"error\">\n          Error loading MFA settings: {getMFAFactors.error.message}\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSendUserOperation Hook in React Component\nDESCRIPTION: Demonstrates how to implement the useSendUserOperation hook in a React component with the useSmartAccountClient hook. Shows configuration options including success/error callbacks and waiting for transaction mining.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSendUserOperation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport {\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react\";\n\nfunction ComponentWithSendUserOperation() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({\n    client,\n    // optional parameter that will wait for the transaction to be mined before returning\n    waitForTxn: true,\n    onSuccess: ({ hash, request }) => {\n      // [optional] Do something with the hash and request\n    },\n    onError: (error) => {\n      // [optional] Do something with the error\n    },\n    // [optional] ...additional mutationArgs\n  });\n\n  return (\n    <div>\n      <button\n        onClick={() =>\n          sendUserOperation({\n            uo: {\n              target: \"0xTARGET_ADDRESS\",\n              data: \"0x\",\n              value: 0n,\n            },\n          })\n        }\n        disabled={isSendingUserOperation}\n      >\n        {isSendingUserOperation ? \"Sending...\" : \"Send UO\"}\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Session Key Plugin Permission View Functions in Solidity\nDESCRIPTION: This code block defines the Solidity interface for the view functions provided by the Session Key Plugin. These functions allow querying various aspects of session key permissions, including access control, time ranges, and spending limits.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nenum ContractAccessControlType {\n    ALLOWLIST,\n    DENYLIST,\n    ALLOW_ALL_ACCESS\n}\n\nstruct SpendLimitInfo {\n    bool hasLimit;\n    uint256 limit;\n    uint256 limitUsed;\n    uint48 refreshInterval;\n    uint48 lastUsedTime;\n}\n\nfunction getAccessControlType(address account, address sessionKey)\n    external\n    view\n    returns (ContractAccessControlType);\n\nfunction getAccessControlEntry(address account, address sessionKey, address targetAddress)\n    external\n    view\n    returns (bool isOnList, bool checkSelectors);\n\nfunction isSelectorOnAccessControlList(\n    address account,\n    address sessionKey,\n    address targetAddress,\n    bytes4 selector\n) external view returns (bool isOnList);\n\nfunction getKeyTimeRange(address account, address sessionKey)\n    external\n    view\n    returns (uint48 validAfter, uint48 validUntil);\n\nfunction getNativeTokenSpendLimitInfo(address account, address sessionKey)\n    external\n    view\n    returns (SpendLimitInfo memory);\n\nfunction getGasSpendLimit(address account, address sessionKey)\n    external\n    view\n    returns (SpendLimitInfo memory info, bool shouldReset);\n\nfunction getERC20SpendLimitInfo(address account, address sessionKey, address token)\n    external\n    view\n    returns (SpendLimitInfo memory);\n\nfunction getRequiredPaymaster(address account, address sessionKey) external view returns (address);\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with OAuth in TypeScript\nDESCRIPTION: This code snippet demonstrates how to authenticate a user using OAuth with the signer object from the AA-SDK. It specifies the authentication type, provider ID, mode, and redirect URL.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/social-login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nawait signer.authenticate({\n  type: \"oauth\",\n  authProviderId: \"google\", // Choose between the auth providers you selected to support from your auth policy\n  mode: \"redirect\", // Alternatively, you can choose \"popup\" mode\n  redirectUrl: \"/\", // After logging in, redirect to the index page\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a LocalAccountSigner with Mnemonic in TypeScript\nDESCRIPTION: This example demonstrates how to create a LocalAccountSigner using a generated mnemonic. It imports necessary functions and creates a signer instance.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/mnemonicToAccountSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generateMnemonic } from \"viem\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(generateMnemonic());\n```\n\n----------------------------------------\n\nTITLE: Using createMultiOwnerModularAccount in TypeScript\nDESCRIPTION: Demonstrates how to use the createMultiOwnerModularAccount function to create a multi-owner modular account. It includes importing necessary dependencies, setting up configuration parameters, and calling the function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerModularAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\";\n\nconst account = await createMultiOwnerModularAccount({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Colors in Account Kit using Tailwind\nDESCRIPTION: This snippet demonstrates how to customize the color scheme for Account Kit components by passing a custom colors object to the withAccountKitUi function in the Tailwind configuration. It specifically shows how to override the active border color.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/customization/theme.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAccountKitUi, createColorSet } from \"@account-kit/react/tailwind\";\n\nexport const tailwindConfig = withAccountKitUi(\n  {\n    content: [],\n    // your tailwind config\n  },\n  {\n    colors: {\n      active: createColorSet(\"#94A3B8\", \"#94A3B8\"),\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyGasAndPaymasterAndDataMiddleware (TypeScript)\nDESCRIPTION: Imports the `alchemyGasAndPaymasterAndDataMiddleware` factory function from the `@account-kit/infra` package. This function is essential for setting up Alchemy's Gas Manager for transaction sponsorship within the account-kit infrastructure.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyGasAndPaymasterAndDataMiddleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { alchemyGasAndPaymasterAndDataMiddleware } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForUserOperationTransaction Hook in React\nDESCRIPTION: Demonstrates the complete usage of the useWaitForUserOperationTransaction hook including configuration, success and error handling callbacks, and accessing the returned state and methods.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useWaitForUserOperationTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  useWaitForUserOperationTransaction,\n  useSmartAccountClient,\n} from \"@account-kit/react\";\n\nconst { client } = useSmartAccountClient({});\nconst {\n  waitForUserOperationTransaction,\n  waitForUserOperationTransactionResult,\n  isWaitingForUserOperationTransaction,\n  error,\n} = useWaitForUserOperationTransaction({\n  client,\n  // these are optional\n  onSuccess: (result) => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n```\n\n----------------------------------------\n\nTITLE: Using SessionKeyPermissionsBuilder to Add Contract Function Access Entry\nDESCRIPTION: This example demonstrates how to create a SessionKeyPermissionsBuilder instance and add a contract address access entry. It includes setting the contract address, method selector, and isOnList flag.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addContractFunctionAccessEntry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.addContractAddressAccessEntry({\n  contractAddress: \"0x1234\",\n  methodSelector: \"0x45678\",\n  isOnList: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Sending OTP to User's Email in React Native\nDESCRIPTION: This snippet shows how to send a one-time password (OTP) to a user's email using the useAuthenticate hook from the @account-kit/react-native package. It includes a form for email input and error handling.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/signer/authenticating-users/authenticating-with-otp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react-native\";\nimport React, { useState } from \"react\";\nimport { Alert, View, Text, TextInput, Button, Pressable } from \"react-native\";\n\nfunction SignInWithOtp() {\n  const { authenticate } = useAuthenticate();\n  const [email, setEmail] = useState(\"\");\n\n  const handleUserSignInWithOtp = () => {\n    try {\n      authenticate({\n        email,\n        type: \"email\",\n      });\n\n      // OTP sent to the user's email. Prompt the user to enter the OTP into your app.\n    } catch (e) {\n      Alert.alert(\"Error sending OTP Code. Check logs for more details.\");\n\n      console.log(\"Error seding OTP CODE: \", e);\n    }\n  };\n\n  return (\n    <View>\n      <Text>Enter Your Email to Sign In</Text>\n      <View>\n        <TextInput\n          value={email}\n          onChangeText={(val) => setEmail(val.toLowerCase())}\n          placeholder=\"john@doe.com\"\n        />\n        <Pressable onPress={handleUserSignInWithOtp}>\n          {({ pressed }) => (\n            <View\n              style={[\n                {\n                  opacity: pressed ? 0.5 : 1,\n                  transform: [\n                    {\n                      scale: pressed ? 0.98 : 1,\n                    },\n                  ],\n                },\n              ]}\n            >\n              <Text>Sign In</Text>\n            </View>\n          )}\n        </Pressable>\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Magic Link for Custom UI Authentication with Account Kit React\nDESCRIPTION: This code snippet shows how to send a magic link to a user's email address using the useAuthenticate hook from Account Kit. It handles the user's email submission and initiates the authentication process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/email-magic-link.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user submits their email\nconst handleSendMagicLink = (email: string) => {\n  authenticate(\n    {\n      type: \"email\",\n      emailMode: \"magicLink\",\n      email,\n    },\n    {\n      onSuccess: () => {\n        // Success - inform user to check their email\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize AlchemyWebSigner with client configuration and prepare popup OAuth. Shows setup of RPC URL and iframe container configuration followed by calling preparePopupOauth method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/preparePopupOauth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nawait signer.preparePopupOauth();\n```\n\n----------------------------------------\n\nTITLE: Using alchemyEnhancedApiActions to Extend Alchemy Client in TypeScript\nDESCRIPTION: This example shows the usage of `alchemyEnhancedApiActions`. It initializes an Alchemy SDK instance, calls `alchemyEnhancedApiActions` with this instance to create a decorator, and then uses the `extend` method to apply this decorator to an existing `alchemySCAClient`, thereby adding enhanced API functionalities.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyEnhancedApiActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { Alchemy } from \"alchemy-sdk\";\nimport { alchemyEnhancedApiActions } from \"@account-kit/infra\";\nimport { alchemySCAClient } from \"./client\";\n\nconst alchemy = new Alchemy(...);\nconst enhancedApiDecorator = alchemyEnhancedApiActions(alchemy);\nconst withEnhancedApis = alchemySCAClient.extend(enhancedApiDecorator);\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating Signer with Smart Contract Account\nDESCRIPTION: Demonstrates how to use the authenticated signer as an owner for a Smart Contract Account, utilizing the Light Account implementation with Sepolia network configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/quickstart.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { http } from \"viem\";\nimport { signer } from \"./signer\";\n\nconst account = await createLightAccount({\n  signer,\n  chain: sepolia,\n  transport: http(`${sepolia.rpcUrls.alchemy.http[0]}/API_KEY`),\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Email OTP Verification in React\nDESCRIPTION: Implements the OTP verification process using the useSignerStatus and useAuthenticate hooks. Monitors authentication status and handles OTP submission.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/mfa/email-otp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus, useAuthenticate } from \"@account-kit/react\";\nimport { AlchemySignerStatus } from \"@account-kit/signer\";\nimport React, { useEffect } from \"react\";\n\nfunction EmailOtpVerification() {\n  const { status } = useSignerStatus();\n  const { authenticate, isPending } = useAuthenticate({\n    onError: (error) => {\n      // Handle OTP verification errors\n      console.error(\"OTP verification failed:\", error);\n    },\n  });\n\n  // Called when user enters their OTP code from email\n  const handleVerify = (emailOtp: string) => {\n    authenticate({\n      type: \"otp\",\n      otpCode: emailOtp,\n    });\n  };\n\n  // Example of prompting user when OTP verification is needed\n  useEffect(() => {\n    if (status === AlchemySignerStatus.AWAITING_EMAIL_AUTH) {\n      // Show OTP input UI to the user\n    }\n  }, [status]);\n\n  return (\n    // Your OTP input UI\n    <div>{/* OTP input component */}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using alchemyEnhancedApiActions with Alchemy SDK\nDESCRIPTION: Demonstrates how to create and use an enhanced API decorator with the Alchemy Smart Account client. Shows the complete setup including importing dependencies, initializing Alchemy, and extending the client with enhanced API capabilities.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyEnhancedApiActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy } from \"alchemy-sdk\";\nimport { alchemyEnhancedApiActions } from \"@account-kit/infra\";\nimport { alchemySCAClient } from \"./client\";\n\nconst alchemy = new Alchemy(...);\nconst enhancedApiDecorator = alchemyEnhancedApiActions(alchemy);\nconst withEnhancedApis = alchemySCAClient.extend(enhancedApiDecorator);\n```\n\n----------------------------------------\n\nTITLE: Using sendTransactions with Smart Account Client in TypeScript\nDESCRIPTION: Demonstrates how to use the sendTransactions method with a smart account client. It includes creating the client, preparing transaction requests, and sending transactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/sendTransactions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with sendTransactions\nconst client = createSmartAccountClient(...);\nconst result = await client.sendTransactions({\nrequests: [{\nto: \"0x...\",\ndata: \"0x...\", // or \"0x\",\nvalue: 0n, // optional\n}],\naccount, // only required if the client above is not connected to an account\n});\n```\n\n----------------------------------------\n\nTITLE: Converting AlchemyWebSigner to Viem Account\nDESCRIPTION: Demonstrates how to create an AlchemyWebSigner instance with RPC and iframe configuration, then convert it to a viem LocalAccount using toViemAccount().\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/toViemAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst account = signer.toViemAccount();\n```\n\n----------------------------------------\n\nTITLE: Importing Light Account Alchemy Client in TypeScript\nDESCRIPTION: Shows how to import the createLightAccountAlchemyClient method from the smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createLightAccountAlchemyClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Kit Core for SSR\nDESCRIPTION: Sets up the Account Kit configuration with SSR enabled by adding the ssr: true flag. This defers hydration of the account kit state until you manually call the hydrate method on mount.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/ssr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }),\n  chain: sepolia,\n  ssr: true, // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Smart Contract Accounts with useAccount Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useAccount hook to retrieve the smart contract account instance for an authenticated user. It provides the account address and instance for performing transactions and interacting with the account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/react-hooks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAccount } from \"@account-kit/react\";\n\nfunction MyComponent() {\n  const { account, address, isLoadingAccount } = useAccount({\n    type: \"ModularAccountV2\", // Specify the account type you're using\n  });\n\n  if (isLoadingAccount) {\n    return <div>Loading account...</div>;\n  }\n\n  if (!account) {\n    return <div>Please log in to access your account</div>;\n  }\n\n  return (\n    <div>\n      <p>Smart contract account address: {address}</p>\n      {/* Now you can use the account instance for transactions */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using AlchemyWebSigner to Sign a Message\nDESCRIPTION: Creates an instance of AlchemyWebSigner and uses it to sign a message. The signer is configured with an RPC URL and an iframe container ID for the web interface.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst signature = await signer.signMessage(\"Hello, world!\");\n```\n\n----------------------------------------\n\nTITLE: Migrating SmartAccountProvider to SmartAccountClient in AA-SDK v3.x.x\nDESCRIPTION: Example showing how to migrate from the deprecated SmartAccountProvider class to the new SmartAccountClient type that extends viem's Client. The client implementation now uses transport from viem instead of rpcProvider.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/migration-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SmartAccountProvider } from \"@aa-sdk/core\"; // [!code --]\nimport { getDefaultEntryPointAddress } from \"@aa-sdk/core\"; // [!code --]\nimport { http } from \"viem\"; // [!code ++]\nimport { sepolia } from \"@aa-sdk/core\";\n\nconst provider = new SmartAccountProvider({ // [!code --]\nconst client = createSmartAccountClient({ // [!code ++]\n  rpcProvider: \"RPC_URL\", // [!code --]\n  transport: http(\"RPC_URL\"), // [!code ++]\n  chain: sepolia,\n  entryPointAddress: getDefaultEntryPointAddress(sepolia), // [!code --]\n});\n```\n\n----------------------------------------\n\nTITLE: Using submitOtpCode with AlchemySignerWebClient\nDESCRIPTION: Demonstrates the complete workflow for authenticating using an OTP code, including initializing the client and submitting the OTP code received via email. The example shows how to configure the client with an API key and iframe container, then authenticate with orgId, otpId, and otpCode parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/submitOtpCode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.submitOtpCode({\n  orgId: \"user-org-id\",\n  otpId: \"opt-returned-from-initEmailAuth\",\n  otpCode: \"otp-code-from-email\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSignTypedData Hook with TypeScript\nDESCRIPTION: Demonstrates the complete usage of useSignTypedData hook including typed data structure definition, hook initialization with client, and handling success/error callbacks. The example shows how to create and sign a simple message using EIP-712 format.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSignTypedData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignTypedData, useSmartAccountClient } from \"@account-kit/react\";\nconst typedData = {\n  types: {\n    Message: [{ name: \"content\", type: \"string\" }],\n  },\n  primaryType: \"Message\",\n  message: { content: \"Hello\" },\n};\nconst { client } = useSmartAccountClient({});\nconst {\n  signTypedData,\n  signTypedDataAsync,\n  signedTypedData,\n  isSigningTypedData,\n  error,\n} = useSignTypedData({\n  client,\n  // these are optional\n  onSuccess: (result) => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n\nconst result = await signTypedData({ typedData });\n```\n\n----------------------------------------\n\nTITLE: Updating Owners of MultiOwnerLightAccount in TypeScript\nDESCRIPTION: This code shows how to add or remove owners from a MultiOwnerLightAccount using the updateOwners method on the multiOwnerLightAccountClientActions extended smart account client. It also demonstrates waiting for the user operation transaction to complete.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/light-account/multi-owner-light-account.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerLightAccountClient } from \"./client\";\n\nconst ownersToAdd = []; // the addresses of owners to be added\nconst ownersToRemove = []; // the addresses of owners to be removed\n\nconst opHash = await multiOwnerLightAccountClient.updateOwners({\n  ownersToAdd,\n  ownersToRemove,\n});\n\nconst txHash =\n  await multiOwnerLightAccountClient.waitForUserOperationTransaction({\n    hash: opHash,\n  });\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with AccountSigner in TypeScript\nDESCRIPTION: Demonstrates the setup and usage of the sendTransaction method with AccountSigner, EthersProviderAdapter, and other related components. It includes creating a light account, setting up the provider and signer, and sending a transaction.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/sendTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n\nconst tx = await signer.sendTransaction({\n  to: \"0x1234567890123456789012345678901234567890\",\n  value: \"0x0\",\n  data: \"0x\",\n});\n```\n\n----------------------------------------\n\nTITLE: Collecting Threshold Signatures\nDESCRIPTION: Shows how to collect additional required signatures from multisig members. Uses signMultisigUserOperation to gather k-2 signatures excluding the first and last signatures.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/multisig-plugin/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst multisigAccountClient = await createMultisigAccountAlchemyClient({\n  chain,\n  signer: signers[1], // using the second signer\n  owners,\n  threshold,\n  apiKey: \"YOUR_API_KEY\",\n});\n\nconst { aggregatedSignature, signatureObj: secondSig } =\n  await multisigAccountClient.signMultisigUserOperation({\n    account: multisigAccountClient.account,\n    // output from step 1, and from this step if k-2 > 1\n    signatures: [previousAggregatedSignature],\n    userOperationRequest: request,\n  });\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP Code in React Native\nDESCRIPTION: This component handles the verification of the one-time password received by the user. It provides a form for the user to enter the OTP code and uses the authenticate function with type 'otp' to verify the code and complete authentication.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/signer/authenticating-users/authenticating-with-otp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react-native\";\nimport React, { useState } from \"react\";\nimport { Alert, View, Text, TextInput, Button, Pressable } from \"react-native\";\n\nfunction VerifyOtp() {\n  const { authenticate } = useAuthenticate();\n  const [otpCode, setOtpCode] = useState(\"\");\n\n  const handleUserVerifyOtp = () => {\n    try {\n      authenticate({\n        otpCode,\n        type: \"otp\",\n      });\n\n      // OTP verified. User is authenticated.\n    } catch (e) {\n      Alert.alert(\"Error verifying OTP Code. Check logs for more details.\");\n\n      console.log(\"Error verifying OTP CODE: \", e);\n    }\n  };\n\n  return (\n    <View>\n      <View>\n        <Text>Enter Your OTP Code</Text>\n        <View>\n          <TextInput\n            value={otpCode}\n            onChangeText={setOtpCode}\n            placeholder=\"123456\"\n          />\n          <Pressable onPress={handleUserVerifyOtp}>\n            {({ pressed }) => (\n              <View\n                style={[\n                  {\n                    opacity: pressed ? 0.5 : 1,\n                    transform: [\n                      {\n                        scale: pressed ? 0.98 : 1,\n                      },\n                    ],\n                  },\n                ]}\n              >\n                <Text>Submit OTP</Text>\n              </View>\n            )}\n          </Pressable>\n        </View>\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to check if a user has an active authentication session using the AlchemyWebSigner. The code handles potential errors by returning null if no authenticated user is found.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/user-sessions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\n// NOTE: this method throws if there is no authenticated user\n// so we return null in the case of an error\nconst user = await signer.getAuthDetails().catch(() => null);\n```\n\n----------------------------------------\n\nTITLE: Using getBundlerClient with EthersProviderAdapter in TypeScript\nDESCRIPTION: This example demonstrates how to instantiate an `EthersProviderAdapter` and then call its `getBundlerClient` method. It involves setting up a light account, configuring the adapter with the account, chain, and an RPC provider URL, and finally retrieving the `BundlerClient`. The returned client uses the provider's existing transport and chain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/getBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\n\n// Assume http and generatePrivateKey are available, e.g., from viem\n// import { http, generatePrivateKey } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter({\n  account,\n  chain: sepolia,\n  rpcProvider: \"https://eth-sepolia.g.alchemy.com/v2/your-api-key\",\n});\n\nconst bundlerClient = provider.getBundlerClient();\n```\n\n----------------------------------------\n\nTITLE: Creating Providers Component for Account Kit with SSR Support\nDESCRIPTION: This code snippet shows how to create a Providers component that wraps the application with necessary providers for Account Kit, including SSR support and initial state hydration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/ssr.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport React, { useRef } from \"react\";\nimport { AlchemyClientState } from \"@account-kit/core\";\nimport {\n  AlchemyAccountProvider,\n  type AlchemyAccountsConfigWithUI,\n} from \"@account-kit/react\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { PropsWithChildren, Suspense } from \"react\";\nimport { config, queryClient } from \"./config\";\n\nexport const Providers = (\n  props: PropsWithChildren<{ initialState?: AlchemyClientState }>\n) => {\n  const ref = useRef<AlchemyAccountsConfigWithUI>();\n  if (!ref.current) {\n    ref.current = config();\n  }\n\n  return (\n    <Suspense>\n      <QueryClientProvider client={queryClient}>\n        <AlchemyAccountProvider\n          config={ref.current!}\n          queryClient={queryClient}\n          initialState={props.initialState}\n        >\n          {props.children}\n        </AlchemyAccountProvider>\n      </QueryClientProvider>\n    </Suspense>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Final Signature\nDESCRIPTION: Demonstrates sending the user operation after collecting all required signatures. Includes formatting the aggregated signature and handling the final transaction submission.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/multisig-plugin/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst multisigAccountClient = await createMultisigAccountAlchemyClient({\n  chain,\n  // using the last signer\n  signer: signers[2],\n  owners,\n  threshold,\n  apiKey: \"YOUR_API_KEY\",\n});\n\nconst result = await multisigAccountClient.sendUserOperation({\n  uo: request.callData,\n  context: {\n    aggregatedSignature,\n    signatures: [firstSig, secondSig],\n    userOpSignatureType: \"ACTUAL\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Side Rendering in Next.js App Directory with Account Kit\nDESCRIPTION: This set of code snippets demonstrates how to implement Server Side Rendering with Account Kit in a Next.js App Directory, including layout configuration, providers setup, and config implementation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/ssr.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// @noErrors\nimport React from \"react\";\nimport { cookieToInitialState } from \"@account-kit/core\";\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport { headers } from \"next/headers\";\nimport { config } from \"./config\";\nimport \"./globals.css\";\nimport { Providers } from \"./providers\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Embedded Accounts Getting Started\",\n  description: \"Embedded Accounts Quickstart Guide\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  // This will allow us to persist state across page boundaries\n  const initialState = cookieToInitialState(\n    // the config here is just used to compute the initial state\n    config(),\n    headers().get(\"cookie\") ?? undefined\n  );\n\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <Providers initialState={initialState}>{children}</Providers>\n      </body>\n    </html>\n  );\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// @noErrors\n\"use client\";\n\nimport React, { useRef } from \"react\";\nimport { AlchemyClientState } from \"@account-kit/core\";\nimport {\n  AlchemyAccountProvider,\n  type AlchemyAccountsConfigWithUI,\n} from \"@account-kit/react\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { PropsWithChildren, Suspense } from \"react\";\nimport { config, queryClient } from \"./config\";\n\nexport const Providers = (\n  props: PropsWithChildren<{ initialState?: AlchemyClientState }>\n) => {\n  const ref = useRef<AlchemyAccountsConfigWithUI>();\n  if (!ref.current) {\n    ref.current = config();\n  }\n\n  return (\n    <Suspense>\n      <QueryClientProvider client={queryClient}>\n        <AlchemyAccountProvider\n          config={ref.current!}\n          queryClient={queryClient}\n          initialState={props.initialState}\n        >\n          {props.children}\n        </AlchemyAccountProvider>\n      </QueryClientProvider>\n    </Suspense>\n  );\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, cookieStorage } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { QueryClient } from \"@tanstack/react-query\";\n\nexport const queryClient = new QueryClient();\n\n// When using SSR, you need to be able to create a config per request\n// This is to avoid sharing state between requests (eg. signed in users)\nexport const config = () =>\n  createConfig({\n    transport: alchemy({ rpcUrl: \"/api/rpc\" }),\n    chain: sepolia,\n    ssr: true,\n    storage: cookieStorage,\n  });\n```\n\n----------------------------------------\n\nTITLE: Passkey Type Definition\nDESCRIPTION: Type definition for passkey authentication configuration in Account Kit.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/passkey-signup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype PasskeyAuthType = {\n  type: \"passkey\";\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing SessionKeySigner in TypeScript\nDESCRIPTION: Demonstrates how to create a new instance of the SessionKeySigner class. This signer manages session keys, either fetching from storage or generating a new one if it doesn't exist.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst signer = new SessionKeySigner();\n```\n\n----------------------------------------\n\nTITLE: Auth0 Custom Social Provider Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for Auth0 custom social providers in Account Kit. It specifies the required and optional properties for configuring a custom social provider through Auth0.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/social-providers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype SocialAuthType = {\n  type: \"social\";\n  // For Auth0 custom providers\n  authProviderId: \"auth0\";\n  // Auth0-specific connection string (e.g., \"github\", \"twitter\")\n  auth0Connection?: string;\n  // Display name for the provider button\n  displayName?: string;\n  // URL for the provider's logo\n  logoUrl: string;\n  // URL for the provider's logo in dark mode (optional, `logoUrl` is used for both light & dark mode if not provided)\n  logoUrlDark?: string;\n  // Authentication mode (popup or redirect)\n  mode: \"popup\" | \"redirect\";\n  // Optional: Specifies the requested OAuth scope\n  scope?: string;\n  // Optional: Specifies additional claims to be included in the authentication token\n  claims?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP for User Authentication in React Native\nDESCRIPTION: This snippet demonstrates how to verify a one-time password (OTP) entered by the user to complete the authentication process. It uses the useAuthenticate hook to verify the OTP and includes error handling.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/signer/authenticating-users/authenticating-with-otp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react-native\";\nimport React, { useState } from \"react\";\nimport { Alert, View, Text, TextInput, Button, Pressable } from \"react-native\";\n\nfunction VerifyOtp() {\n  const { authenticate } = useAuthenticate();\n  const [otpCode, setOtpCode] = useState(\"\");\n\n  const handleUserVerifyOtp = () => {\n    try {\n      authenticate({\n        otpCode,\n        type: \"otp\",\n      });\n\n      // OTP verified. User is authenticated.\n    } catch (e) {\n      Alert.alert(\"Error verifying OTP Code. Check logs for more details.\");\n\n      console.log(\"Error verifying OTP CODE: \", e);\n    }\n  };\n\n  return (\n    <View>\n      <View>\n        <Text>Enter Your OTP Code</Text>\n        <View>\n          <TextInput\n            value={otpCode}\n            onChangeText={setOtpCode}\n            placeholder=\"123456\"\n          />\n          <Pressable onPress={handleUserVerifyOtp}>\n            {({ pressed }) => (\n              <View\n                style={[\n                  {\n                    opacity: pressed ? 0.5 : 1,\n                    transform: [\n                      {\n                        scale: pressed ? 0.98 : 1,\n                      },\n                    ],\n                  },\n                ]}\n              >\n                <Text>Submit OTP</Text>\n              </View>\n            )}\n          </Pressable>\n        </View>\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Hydrating Account State in SSR\nDESCRIPTION: Demonstrates how to hydrate the account state on the client side after SSR. Shows the implementation of the hydrate method and client-side mounting check.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/ssr.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hydrate } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst { onMount } = hydrate(config);\n\nif (typeof window !== \"undefined\") {\n  onMount();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationStruct Interface for Operation Construction\nDESCRIPTION: Interface for structuring a UserOperation with fields similar to UserOperationRequest but specifically used for building and constructing operation requests within the SDK.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationStruct]\n```\n\n----------------------------------------\n\nTITLE: Removing MFA Factors Implementation Example\nDESCRIPTION: Demonstrates how to initialize AlchemyWebSigner and remove multiple MFA factors using their IDs. Shows complete setup including client configuration and factor removal.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/removeMfa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.removeMfa({\n  multiFactorIds: [\"factor-id-1\", \"factor-id-2\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Alchemy Bundler with Third-Party Node RPC in TypeScript\nDESCRIPTION: This code snippet shows how to split node traffic from Alchemy's Bundler traffic using the alchemyTransport. It demonstrates setting up a transport with an Alchemy API key and a separate node RPC URL.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/bundlers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemy } from \"@account-kit/infra\";\n\nconst alchemyTransport = alchemy({\n  alchemyConnection: { apiKey: \"your-api-key\" },\n  nodeRpcUrl: \"YOUR_NODE_RPC_URL\",\n});\n// now use this transport in a client\n```\n\n----------------------------------------\n\nTITLE: Importing createConfig from Account Kit React\nDESCRIPTION: Shows how to import the createConfig method from the Account Kit React package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/functions/createConfig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Using getAuthDetails with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance and use the getAuthDetails method to retrieve user authentication information. Includes configuration for RPC URL and iframe container settings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getAuthDetails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\n// throws if not logged in\nconst user = await signer.getAuthDetails();\n```\n\n----------------------------------------\n\nTITLE: Using useSigner Hook with Type Definitions\nDESCRIPTION: Demonstrates how to use the useSigner hook with proper TypeScript type definitions, returning an AlchemyWebSigner or null.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSigner } from \"@account-kit/react\";\nimport type { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer: AlchemyWebSigner | null = useSigner();\n```\n\n----------------------------------------\n\nTITLE: Using addPasskey Method with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance and use the addPasskey method to add a passkey to a user's account. The example configures the signer with RPC URL and iframe container settings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/addPasskey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.addPasskey();\n```\n\n----------------------------------------\n\nTITLE: Using waitForUserOperationTransaction with Smart Account Client\nDESCRIPTION: Demonstrates how to use waitForUserOperationTransaction with a smart account client, including optional retry configuration parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/waitForUserOperationTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with waitForUserOperationTransaction\nconst client = createSmartAccountClient(...);\nconst result = await client.waitForUserOperationTransaction({\nhash: \"0x...\",\nretries: {...} // optional param to configure the retry amounts\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Signer from Config using getSigner in TypeScript\nDESCRIPTION: This snippet showcases the typical usage of the getSigner function in a TypeScript application, first by importing necessary modules (getSigner and a config object), and then calling getSigner with the specified config. Prerequisites include a valid AlchemyAccountsConfig object (config) representing client state, and @account-kit/core as a dependency. The code returns an AlchemySigner instance if present in the store or null otherwise, and must be executed in a client/browser context where the signer may be set.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getSigner } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst signer = getSigner(config);\n```\n\n----------------------------------------\n\nTITLE: Using WalletClientSigner to Sign Typed Data in TypeScript\nDESCRIPTION: This snippet demonstrates creating a Viem `WalletClient`, instantiating `WalletClientSigner` with it, and then calling the `signTypedData` method. It signs a simple message defined according to the EIP-712 standard. Requires `@aa-sdk/core` and `viem` packages, and expects a browser environment with `window.ethereum` available. The method takes a `TypedDataDefinition` object and returns a promise resolving to the signature as a hex string.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/WalletClientSigner/signTypedData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\nimport { createWalletClient, custom } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n});\n\nconst signer = new WalletClientSigner(client, \"wallet\");\nconsole.log(\n  await signer.signTypedData({\n    types: {\n      Message: [{ name: \"content\", type: \"string\" }],\n    },\n    primaryType: \"Message\",\n    message: { content: \"Hello\" },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authenticator App MFA in React with Account Kit\nDESCRIPTION: This code snippet shows how to set up an authenticator app for multi-factor authentication using the useMFA hook from Account Kit. It generates a QR code for the user to scan with their authenticator app.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/mfa/setup-mfa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { QRCodeSVG } from \"qrcode.react\";\nimport { useMFA } from \"@account-kit/react\";\n\nfunction AuthenticatorSetupComponent() {\n  const { addMFA } = useMFA();\n  const [qrCodeUrl, setQrCodeUrl] = useState(\"\");\n  const [factorId, setFactorId] = useState(\"\");\n\n  const handleSetupAuthenticator = () => {\n    // Use the mutate method from the mutation result\n    addMFA.mutate(\n      {\n        multiFactorType: \"totp\", // Technical name for authenticator apps\n      },\n      {\n        onSuccess: (result) => {\n          // Store the QR code URL and factor ID\n          setQrCodeUrl(result.multiFactorTotpUrl);\n          // Store the factor ID which will be needed for verification in the next step\n          // This ID uniquely identifies the MFA factor being configured\n          setFactorId(result.multiFactorId);\n        },\n        onError: (error) => {\n          console.error(\"Failed to set up authenticator app:\", error);\n        },\n      }\n    );\n  };\n\n  // You can also check loading state directly\n  const isLoading = addMFA.isPending;\n\n  return (\n    <div>\n      <button onClick={handleSetupAuthenticator} disabled={isLoading}>\n        {isLoading ? \"Setting up...\" : \"Set Up Authenticator App\"}\n      </button>\n\n      {qrCodeUrl && (\n        <div className=\"qr-container\">\n          <h3>Scan this QR code with your authenticator app</h3>\n          <QRCodeSVG value={qrCodeUrl} size={200} />\n          <p>\n            After scanning, enter the 6-digit code from your authenticator app\n            to complete setup.\n          </p>\n        </div>\n      )}\n\n      {/* Display errors if they occur */}\n      {addMFA.isError && (\n        <div className=\"error\">Error: {addMFA.error.message}</div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useExportAccount Hook in TypeScript\nDESCRIPTION: Demonstrates the complete usage of useExportAccount hook including destructuring the returned values and configuring the iframe container parameter. The hook provides export functionality, state management, and a component for rendering account recovery details.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useExportAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useExportAccount } from \"@account-kit/react\";\n\nconst {\n  exportAccount,\n  isExported,\n  isExporting,\n  error,\n  ExportAccountComponent,\n} = useExportAccount({\n  params: {\n    iframeContainerId: \"my-iframe-container\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Bundler Client with createBundlerClient in TypeScript\nDESCRIPTION: This example demonstrates how to use the createBundlerClient function to create a Bundler Client. It includes importing necessary dependencies, specifying the chain (sepolia), and providing an HTTP transport with an RPC URL.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/createBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBundlerClient } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst client = createBundlerClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Using submitOtpCode for Authentication\nDESCRIPTION: Demonstrates how to initialize the AlchemySignerWebClient and use the submitOtpCode method for OTP authentication. The example shows configuration with API key and iframe settings, followed by OTP submission with organization ID, OTP ID, and OTP code parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/submitOtpCode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.submitOtpCode({\n  orgId: \"user-org-id\",\n  otpId: \"opt-returned-from-initEmailAuth\",\n  otpCode: \"otp-code-from-email\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SmartAccountClient with Custom RPC Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a SmartAccountClient using a custom RPC provider URL. It uses the createSmartAccountClient function from @aa-sdk/core and sets up an HTTP transport with a specific URL.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/bundlers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst client = createSmartAccountClient({\n  transport: http(\"https://polygon-mumbai.g.alchemy.com/v2/demo\"),\n  chain: sepolia,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing SessionKeyPlugin on Modular Account\nDESCRIPTION: Demonstrates how to extend a SmartAccountClient with sessionKeyPluginActions and use the installSessionKeyPlugin method to add the SessionKeyPlugin to a Modular Account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/manage-plugins/install-plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\nimport { sessionKeyPluginActions } from \"@account-kit/smart-contracts\";\n\n// extend smart account client with sessionKeyPluginActions to call SessionKeyPlugin methods\nconst sessionKeyExtendedClient = modularAccountClient.extend(\n  sessionKeyPluginActions\n);\n\nconst { hash } = await sessionKeyExtendedClient.installSessionKeyPlugin({\n  // 1st arg is the initial set of session keys\n  // 2nd arg is the tags for the session keys\n  // 3rd arg is the initial set of permissions\n  args: [[], [], []],\n});\n\nawait client.waitForUserOperationTransaction({ hash });\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient from Account Kit Signer in TypeScript\nDESCRIPTION: This snippet shows how to import the BaseSignerClient class from the @account-kit/signer package, which is required to use the 'on' method for event listening.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/on.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Initiating Email OTP Authentication in React\nDESCRIPTION: Shows how to start the email OTP authentication process using the useAuthenticate hook. Handles both success and error cases for the authentication flow.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/mfa/email-otp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\nconst handleSendCode = (email: string) => {\n  authenticate(\n    {\n      type: \"email\",\n      emailMode: \"otp\",\n      email,\n    },\n    {\n      onSuccess: () => {\n        // This callback will only fire after both email OTP and MFA (if required) are completed\n      },\n      onError: (error) => {\n        // Handle error\n        console.error(error);\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultFeeEstimator with Smart Account Client\nDESCRIPTION: Demonstrates how to use defaultFeeEstimator with createSmartAccountClient and createBundlerClient. The fee estimator is configured as part of the smart account client initialization.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/defaultFeeEstimator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient, defaultFeeEstimator, createBundlerClient } from \"@aa-sdk/core\";\n\nconst bundlerClient = createBundlerClient(...);\n\n// NOTE: this is already provided by the smart account client\nconst client = createSmartAccountClient({\nfeeEstimator: defaultFeeEstimator(bundlerClient),\n...otherParams\n});\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Owners of a MultiOwnerLightAccount in TypeScript\nDESCRIPTION: Code snippet that demonstrates how to add and remove owners from a MultiOwnerLightAccount using the updateOwners method on the multiOwnerLightAccountClientActions extended smart account client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/light-account/multi-owner-light-account.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerLightAccountClient } from \"./client\";\n\nconst ownersToAdd = []; // the addresses of owners to be added\nconst ownersToRemove = []; // the addresses of owners to be removed\n\nconst opHash = await multiOwnerLightAccountClient.updateOwners({\n  ownersToAdd,\n  ownersToRemove,\n});\n\nconst txHash =\n  await multiOwnerLightAccountClient.waitForUserOperationTransaction({\n    hash: opHash,\n  });\n```\n\n----------------------------------------\n\nTITLE: Using addMfa Method with AlchemyWebSigner in TypeScript\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance and use the addMfa method to set up TOTP multi-factor authentication. The result contains a URL that can be displayed as a QR code for the user to scan.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/addMfa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.addMfa({ multiFactorType: \"totp\" });\n// Result contains multiFactorTotpUrl to display as QR code\n```\n\n----------------------------------------\n\nTITLE: Implementing Embedded Authentication in React\nDESCRIPTION: Implementation of embedded authentication using the AuthCard component for standalone authentication pages.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/ui-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { AuthCard } from \"@account-kit/react\";\n\nexport default function MyLoginPage() {\n  return (\n    <div className=\"flex flex-row p-4 bg-white border border-gray-200 rounded-lg\">\n      <AuthCard />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using AlchemyWebSigner to Create SolanaSigner in TypeScript\nDESCRIPTION: This example demonstrates how to create an instance of AlchemyWebSigner and use it to create a SolanaSigner. It includes configuration for the client connection and iframe.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/experimental_toSolanaSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst solanaSigner = signer.toSolanaSigner();\n```\n\n----------------------------------------\n\nTITLE: Configuring AlchemyAccountsProvider in React Native Applications\nDESCRIPTION: This code snippet demonstrates how to wrap your top-level component with the AlchemyAccountsProvider from the @account-kit/react-native package. The implementation is identical for both Expo (_layout.tsx) and Bare React Native (App.tsx) applications.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/signer/authenticating-users/setting-up-the-accounts-provider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// [!include ~/shared/react-native/account-provider-setup.tsx]\n```\n\n----------------------------------------\n\nTITLE: Migrating SmartAccountProvider to SmartAccountClient in v3\nDESCRIPTION: Shows how to migrate from SmartAccountProvider (v2) to SmartAccountClient (v3). This includes updating import statements and replacing the provider initialization with client creation using HTTP transport.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/migration-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SmartAccountProvider } from \"@aa-sdk/core\"; // [!code --]\nimport { getDefaultEntryPointAddress } from \"@aa-sdk/core\"; // [!code --]\nimport { http } from \"viem\"; // [!code ++]\nimport { sepolia } from \"@aa-sdk/core\";\n\nconst provider = new SmartAccountProvider({ // [!code --]\nconst client = createSmartAccountClient({ // [!code ++]\n  rpcProvider: \"RPC_URL\", // [!code --]\n  transport: http(\"RPC_URL\"), // [!code ++]\n  chain: sepolia,\n  entryPointAddress: getDefaultEntryPointAddress(sepolia), // [!code --]\n});\n```\n\n----------------------------------------\n\nTITLE: Watching Signer Status Updates Using Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a watcher for signer status changes using the watchSignerStatus function from @account-kit/core in TypeScript. The config object must be correctly initialized (using a method such as createConfig), and the returned watcher function is set to log any status changes to the console. The setup enables callback-driven reactions to status updates and supports unsubscribing from the watcher as needed.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchSignerStatus.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { watchSignerStatus } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchSignerStatus(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Gas Sponsorship\nDESCRIPTION: Example showing how to send a user operation with gas sponsorship using the Smart Account Client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/infra/sponsor-gas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./client\";\n\nconst { hash } = await client.sendUserOperation({\n  uo: {\n    target: \"0xTARGET_ADDRESS\",\n    data: \"0x\",\n    value: 0n,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing EthersProviderAdapter in TypeScript\nDESCRIPTION: This snippet shows how to import the `EthersProviderAdapter` class from the `@aa-sdk/ethers` package. This class is necessary to create an Ethers.js compatible provider using an AA-SDK account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EthersProviderAdapter } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Key Export Component with React\nDESCRIPTION: A complete React component for exporting private keys using the signer's exportWallet method. The component handles the export process, manages loading states with react-query, and displays the private key or seed phrase in an iframe.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/export-private-key.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { signer } from \"./signer\";\n\nconst TurnkeyExportWalletContainerId = \"turnkey-export-wallet-container-id\";\nconst TurnkeyExportWalletElementId = \"turnkey-export-wallet-element-id\";\n\n// This allows us to style the embedded iframe\nconst iframeCss = `\niframe {\n    box-sizing: border-box;\n    width: 100%;\n    height: 120px;\n    border-radius: 8px;\n    border-width: 1px;\n    border-style: solid;\n    border-color: rgba(216, 219, 227, 1);\n    padding: 20px;\n}\n`;\n\nexport const ExportPrivateKeyView = () => {\n  // we are using react-query to handle loading states more easily, but feel free to use w/e state management library you prefer\n  const {\n    mutate: exportWallet,\n    isLoading,\n    data,\n  } = useMutation({\n    mutationFn: () =>\n      signer.exportWallet({\n        iframeContainerId: TurnkeyExportWalletContainerId,\n        iframeElementId: TurnkeyExportWalletElementId,\n      }),\n  });\n\n  // Once the user clicks the button, a request will be sent to initialize private key export\n  // once the request is complete, the iframe will be rendered with either\n  // 1. the private key if the user is logged in with a passkey\n  // 2. the seed phrase if the user is logged in with email\n  return (\n    <div className=\"flex flex-col gap-2\">\n      {!data ? (\n        <button onClick={() => exportWallet()} disabled={isLoading}>\n          Export Wallet\n        </button>\n      ) : (\n        <strong>Seed Phrase</strong>\n      )}\n      <div\n        className=\"w-full\"\n        style={{ display: !data ? \"none\" : \"block\" }}\n        id={TurnkeyExportWalletContainerId}\n      >\n        <style>{iframeCss}</style>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Session Key Plugin Installation in TypeScript\nDESCRIPTION: Verifies if the Session Key Plugin is installed on the Modular Account using the account loupe decorator.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPlugin } from \"@account-kit/smart-contracts\";\n\n// 1. check if the plugin is installed\nconst isPluginInstalled = await modularAccountClient\n  .getInstalledPlugins({})\n  // This checks using the default address for the chain, but you can always pass in your own plugin address here as an override\n  .then((x) => x.includes(SessionKeyPlugin.meta.addresses[chain.id]));\n```\n\n----------------------------------------\n\nTITLE: Configuring Alchemy API Key in TypeScript\nDESCRIPTION: TypeScript code snippet for configuring the Alchemy API key in the project's config file. This sets up the transport layer for interacting with Alchemy services.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }), // TODO: add your Alchemy API key - https://dashboard.alchemy.com/accounts\n    chain: sepolia,\n    ssr: true, // more about ssr: https://accountkit.alchemy.com/react/ssr\n    storage: cookieStorage, // more about persisting state with cookies: https://accountkit.alchemy.com/react/ssr#persisting-the-account-state\n    enablePopupOauth: true, // must be set to \"true\" if you plan on using popup rather than redirect in the social login flow\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Initiating Email OTP Authentication in React\nDESCRIPTION: This code shows how to start the Email OTP authentication process using the useAuthenticate hook from Account Kit. It defines a handler function to send an authentication code to the user's email.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/mfa/email-otp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\nconst handleSendCode = (email: string) => {\n  authenticate(\n    {\n      type: \"email\",\n      emailMode: \"otp\",\n      email,\n    },\n    {\n      onSuccess: () => {\n        // This callback will only fire after both email OTP and MFA (if required) are completed\n      },\n      onError: (error) => {\n        // Handle error\n        console.error(error);\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Smart Contract Account with toSmartContractAccount in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a custom smart contract account implementation using the toSmartContractAccount function. It includes required and optional parameters for configuring the account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/smart-contracts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEntryPoint, toSmartContractAccount } from \"@aa-sdk/core\";\nimport { http, type SignableMessage, type Hash } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst myAccount = await toSmartContractAccount({\n  /// REQUIRED PARAMS ///\n  source: \"MyAccount\",\n  transport: http(\"RPC_URL\"),\n  chain: sepolia,\n  // The EntryPointDef that your account is compatible with\n  entryPoint: getEntryPoint(sepolia),\n  // This should return a concatenation of your `factoryAddress` and the `callData` for your factory's create account method\n  getAccountInitCode: async (): Promise<Hash> => \"0x{factoryAddress}{callData}\",\n  // an invalid signature that doesn't cause your account to revert during validation\n  getDummySignature: async (): Promise<Hash> => \"0x1234...\",\n  // given a UO in the form of {target, data, value} should output the calldata for calling your contract's execution method\n  encodeExecute: async (uo): Promise<Hash> => \"0x....\",\n  signMessage: async ({ message }): Promise<Hash> => \"0x...\",\n  signTypedData: async (typedData): Promise<Hash> => \"0x000\",\n\n  /// OPTIONAL PARAMS ///\n  // if you already know your account's address, pass that in here to avoid generating a new counterfactual\n  accountAddress: \"0x...\",\n  // if your account supports batching, this should take an array of UOs and return the calldata for calling your contract's batchExecute method\n  encodeBatchExecute: async (uos): Promise<Hash> => \"0x...\",\n  // if your contract expects a different signing scheme than the default signMessage scheme, you can override that here\n  signUserOperationHash: async (hash): Promise<Hash> => \"0x...\",\n  // allows you to define the calldata for upgrading your account\n  encodeUpgradeToAndCall: async (params): Promise<Hash> => \"0x...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Switching Between Chains in Account Kit\nDESCRIPTION: Shows how to implement chain switching functionality using the setChain function. Includes both the implementation and the required configuration setup.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/multi-chain-apps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setChain } from \"@account-kit/core\";\nimport { mainnet } from \"@account-kit/infra\";\nimport { config } from \"./config\";\n\nawait setChain(config, mainnet);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/core\";\nimport { sepolia, mainnet, alchemy } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }),\n  // this is the default chain\n  chain: sepolia,\n  chains: [\n    {\n      chain: mainnet,\n      // optional: sponsor gas for this chain\n      policyId: \"MAINNET_GAS_MANAGER_POLICY_ID\",\n    },\n    {\n      chain: sepolia,\n      // optional: sponsor gas for this chain\n      policyId: \"SEPOLIA_GAS_MANAGER_POLICY_ID\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Active User Session in TypeScript\nDESCRIPTION: This code snippet demonstrates how to check if a user has an active session using the AlchemyWebSigner. It attempts to get authentication details and returns null if there's no authenticated user.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/user-sessions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\n// NOTE: this method throws if there is no authenticated user\n// so we return null in the case of an error\nconst user = await signer.getAuthDetails().catch(() => null);\n```\n\n----------------------------------------\n\nTITLE: Using useAuthError Hook - TypeScript/React\nDESCRIPTION: Demonstrates how to use the useAuthError hook to handle authentication errors in a React component. The hook returns an error object that can be used for error handling and displaying error messages.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAuthError.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthError } from \"@account-kit/react\";\n\nconst error = useAuthError();\n\nif (error) {\n  console.error(\"Error occurred during auth step\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing createConfig from @account-kit/core - TypeScript\nDESCRIPTION: This snippet shows the import statement for bringing the createConfig function into a TypeScript project from the @account-kit/core package. It is a prerequisite for using the configuration generation utilities provided by the package. No parameters or dependencies are required other than TypeScript and the @account-kit/core npm package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/createConfig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createConfig } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Alchemy Transport for AA-Only Chains in TypeScript\nDESCRIPTION: Shows how to configure the `alchemy` transport for AA-only chains where Alchemy only handles Bundler and Paymaster RPCs. This requires explicitly providing the `alchemyConnection` details (like API key) and a separate `nodeRpcUrl` for standard node interactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { alchemy } from \"@account-kit/infra\";\n\nconst transport = alchemy({\n  alchemyConnection: {\n    apiKey: \"your-api-key\",\n  },\n  nodeRpcUrl: \"https://zora.rpc.url\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient from Account Kit\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package to use the experimental_createApiKey method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/experimental_createApiKey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Switching Between Chains in Account Kit\nDESCRIPTION: Shows how to change between configured chains at runtime using the setChain function. Includes example of importing configuration and switching to mainnet chain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/multi-chain-apps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setChain } from \"@account-kit/core\";\nimport { mainnet } from \"@account-kit/infra\";\nimport { config } from \"./config\";\n\nawait setChain(config, mainnet);\n```\n\n----------------------------------------\n\nTITLE: Using AlchemyWebSigner to Export Wallet\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance with configuration options and export a wallet. The example shows setting up RPC URL and iframe container configuration before calling the exportWallet method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/exportWallet.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\n// the params passed to this are different based on the specific signer\nconst result = signer.exportWallet();\n```\n\n----------------------------------------\n\nTITLE: Adding New Session Key\nDESCRIPTION: Shows how to add a new session key with initial permissions and a tag identifier.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\nimport { keccak256 } from \"viem\";\nimport { client } from \"./base-client\";\n\nconst result = await client.addSessionKey({\n  key: \"0xSessionKeyAddress\",\n  tag: keccak256(new TextEncoder().encode(\"session-key-tag\")),\n  permissions: new SessionKeyPermissionsBuilder().encode(),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Kit UI with Passkey Authentication\nDESCRIPTION: Configuration setup for Account Kit UI components with passkey authentication options. Demonstrates how to configure the UI with passkey and email authentication methods.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/passkey-signup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        // Include passkey in a section\n        { type: \"passkey\" },\n\n        // You can combine with other authentication methods\n        { type: \"email\" },\n      ],\n    ],\n    // Enable automatic passkey creation after signup\n    addPasskeyOnSignup: true,\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Creating New NextJS App with Account Kit Template\nDESCRIPTION: Commands to create a new NextJS application using the Alchemy Account Kit template. This sets up a basic project structure with necessary configurations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app account-kit-app -e https://github.com/avarobinson/account-kit-quickstart\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app account-kit-app -e https://github.com/avarobinson/account-kit-quickstart\n```\n\n----------------------------------------\n\nTITLE: Using installPlugin Function with Account Kit Client in TypeScript\nDESCRIPTION: This example demonstrates how to use the installPlugin function with a modular account Alchemy client. It shows the process of creating a client and installing a plugin with specific parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/installPlugin.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { installPlugin, createModularAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n\nconst client = createModularAccountAlchemyClient(...);\n\nconst hash = await installPlugin(client, {\npluginAddress: \"0x...\",\nmanifestHash: \"0x...\",\ndependencies: [], // this is defined by the plugin you're installing\n});\n```\n\n----------------------------------------\n\nTITLE: Using installPlugin to Add a Plugin to a Smart Account in TypeScript\nDESCRIPTION: Demonstrates how to use the installPlugin method to install a plugin on a smart account. The example shows creating a client and then calling installPlugin with the required parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/installPlugin.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { installPlugin, createModularAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n\nconst client = createModularAccountAlchemyClient(...);\n\nconst hash = await installPlugin(client, {\npluginAddress: \"0x...\",\nmanifestHash: \"0x...\",\ndependencies: [], // this is defined by the plugin you're installing\n});\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner Class - TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: LightAccount v1.1.0 Contract Addresses\nDESCRIPTION: Factory and implementation addresses for LightAccount v1.1.0 smart contracts deployed across multiple blockchain networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nFactory: 0x00004EC70002a32400f8ae005A26081065620D20\nImplementation: 0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/oauthWithPopup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionKeyPluginActions with ModularAccountAlchemyClient\nDESCRIPTION: Demonstrates how to create a client instance and extend it with sessionKeyPluginActions for managing session keys in smart contracts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/sessionKeyPluginActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountAlchemyClient, sessionKeyPluginActions } from \"@account-kit/smart-contracts\";\n\nconst client = createModularAccountAlchemyClient(...).extend(sessionKeyPluginActions);\n```\n\n----------------------------------------\n\nTITLE: Using toTraceHeader Method in TraceHeader Class in TypeScript\nDESCRIPTION: This example demonstrates how to create a TraceHeader instance and convert it to the format used in HTTP request headers. It shows creating a TraceHeader from existing headers or using a default, then converting it to the trace header format.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/TraceHeader/toTraceHeader.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst traceHeader =\n  TraceHeader.fromTraceHeader(headers) || TraceHeader.default();\nconst headers = traceHeader.toTraceHeader();\n```\n\n----------------------------------------\n\nTITLE: Defining SmartAccountAuthenticator and SmartAccountSigner Interfaces in TypeScript\nDESCRIPTION: This snippet defines the SmartAccountAuthenticator and SmartAccountSigner interfaces used in Account Kit. SmartAccountAuthenticator extends SmartAccountSigner and includes additional methods for authentication.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/signers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MessageSigningRequest = {\n  message: string;\n  type: \"message\";\n};\n\nexport type TypedDataSigningRequest = {\n  typedData: TypedData;\n  type: \"typed-data\";\n};\n\nexport type SigningRequest = MessageSigningRequest | TypedDataSigningRequest;\n\nexport interface SmartAccountAuthenticator {\n  getAuthDetails: () => Promise<AuthDetails>;\n  authenticate: (authPayload: string) => Promise<boolean>;\n}\n\nexport interface SmartAccountSigner extends SmartAccountAuthenticator {\n  signerType: string;\n  signMessage: (msg: Uint8Array | string) => Promise<string>;\n  signTypedData: (typedData: TypedData) => Promise<string>;\n  getAddress: () => Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using AuthCard Component in React Application\nDESCRIPTION: Demonstrates how to implement the AuthCard component in a React component, including how to use it with the AlchemyAccountContext and UI configuration\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/components/AuthCard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthCard, useAlchemyAccountContext } from \"@account-kit/react\";\n\nfunction ComponentWithAuthCard() {\n  // assumes you've passed in a UI config to the Account Provider\n  // you can also directly set the properties on the AuthCard component\n  const { uiConfig } = useAlchemyAccountContext();\n\n  return <AuthCard {...uiConfig!.auth} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using getAccountAddress with Entry Point\nDESCRIPTION: Demonstrates how to use getAccountAddress function with entry point and client configuration. The function retrieves or computes an account address using provided parameters including client, entry point, and account initialization code.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/getAccountAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEntryPoint, getAccountAddress } from \"@aa-sdk/core\";\n\nconst accountAddress = await getAccountAddress({\n  client,\n  entryPoint: getEntryPoint(chain),\n  getAccountInitCode: async () => \"0x{factoryAddress}{factoryCallData}\",\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from BaseSmartContractAccount to createLightAccount\nDESCRIPTION: This snippet shows the changes required to migrate from the class-based LightSmartContractAccount to the new async createLightAccount function. It demonstrates changes in imports, initialization, and parameter names.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/migration-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  LightSmartContractAccount, // [!code --]\n  createLightAccount, // [!code ++]\n  getDefaultLightAccountFactoryAddress, // [!code --]\n} from \"@account-kit/smart-contracts\";\nimport {\n  LocalAccountSigner,\n  type Hex,\n} from \"@aa-sdk/core\";\nimport { sepolia } from \"@aa-sdk/core\";\n\nconst chain = sepolia;\n\nconst account = new LightSmartContractAccount({ // [!code --]\nconst account = await createLightAccount({ // [!code ++]\n    rpcClient: client, // [!code --]\n    transport: http(\"RPC_URL\"), // [!code ++]\n    signer,\n    chain,\n    factoryAddress: getDefaultLightAccountFactoryAddress(chain), // [!code --]\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating a Light Account with Custom Configuration in TypeScript\nDESCRIPTION: Demonstrates how to use the createLightAccount function to create a light account with custom parameters including chain, transport, and signer. It utilizes various imports from different packages to set up the account configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createLightAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\";\n\nconst account = await createLightAccount({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing resolveProperties from AA SDK Core\nDESCRIPTION: Shows how to import the resolveProperties utility function from the @aa-sdk/core package. This function is used to resolve all properties of a Deferrable object type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/resolveProperties.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolveProperties } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Constructing Modular Account v2 Client in TypeScript\nDESCRIPTION: Creates a Modular Account v2 client using the AA SDK, specifying the transport, chain, and signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nconst modularAccountV2Client = await createModularAccountV2Client({\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  chain: sepolia,\n  signer: yourSigner,\n});\n```\n\n----------------------------------------\n\nTITLE: LightAccount transferOwnership Function Declaration in Solidity\nDESCRIPTION: This Solidity function signature shows the transferOwnership method exposed by the LightAccount contract. It can only be called by the current owner of the account (enforced by the onlyOwner modifier) and takes a new owner address as its parameter.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/light-account/transfer-ownership-light-account.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transferOwnership(address newOwner) public virtual onlyOwner\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Gas Policy in Account Kit\nDESCRIPTION: Sets up the Account Kit configuration with a global gas policy ID for sponsoring all UserOperations. Requires Alchemy API key and gas manager policy ID.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/using-smart-accounts/sponsor-gas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/react-native\";\nimport { sepolia } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  apiKey: \"ALCHEMY_API_KEY\",\n  chain: sepolia,\n  policyId: \"GAS_MANAGER_POLICY_ID\", \n});\n```\n\n----------------------------------------\n\nTITLE: Uninstalling SessionKeyPlugin with Account Kit in TypeScript\nDESCRIPTION: This snippet shows how to uninstall the SessionKeyPlugin from a Modular Account using the pluginManagerActions. It includes importing necessary dependencies, calling the uninstallPlugin method, and waiting for the transaction to complete. The code also demonstrates how to get the plugin address for the current chain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/manage-plugins/install-plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chain, modularAccountClient } from \"./client\";\nimport { SessionKeyPlugin } from \"@account-kit/smart-contracts\";\n\nconst { hash } = await modularAccountClient.uninstallPlugin({\n  pluginAddress: SessionKeyPlugin.meta.addresses[chain.id],\n});\n\nawait modularAccountClient.waitForUserOperationTransaction({ hash });\n```\n\n----------------------------------------\n\nTITLE: Handling Magic Link Redirect in React\nDESCRIPTION: Code to handle the redirect when a user clicks the magic link in their email. It extracts the authentication bundle from the URL and completes the authentication process using the useAuthenticate hook.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/email-magic-link.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// Handle the redirect when the component mounts\nuseEffect(() => {\n  const handleRedirect = () => {\n    const url = new URL(window.location.href);\n    const bundle = url.searchParams.get(\"bundle\");\n\n    if (bundle) {\n      authenticate(\n        {\n          type: \"email\",\n          bundle,\n        },\n        {\n          onSuccess: () => {\n            // Authentication successful!\n          },\n          onError: (error) => {\n            // Handle error\n          },\n        }\n      );\n    }\n  };\n\n  handleRedirect();\n}, [authenticate]);\n```\n\n----------------------------------------\n\nTITLE: Using exportWallet Method with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize the AlchemyWebSigner with configuration options and call the exportWallet method. The method returns different results based on the user's authentication method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/exportWallet.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\n// the params passed to this are different based on the specific signer\nconst result = signer.exportWallet();\n```\n\n----------------------------------------\n\nTITLE: Using fromTraceHeader Method to Parse HTTP Headers in TypeScript\nDESCRIPTION: This example demonstrates how to use the fromTraceHeader method to parse trace headers from HTTP request headers. It takes a Record<string,string> of headers as input and returns a TraceHeader object or undefined.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/TraceHeader/fromTraceHeader.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst traceHeader = TraceHeader.fromTraceHeader(headers);\n```\n\n----------------------------------------\n\nTITLE: Importing createAlchemySmartAccountClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `createAlchemySmartAccountClient` function from the `@account-kit/infra` package. This function is the primary entry point for creating an Alchemy smart account client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/createAlchemySmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAlchemySmartAccountClient } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Submitting Email OTP\nDESCRIPTION: Submit the email OTP code for authentication verification.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nsigner.authenticate({\n  type: \"otp\",\n  otpCode: \"EMAIL_OTP_CODE\",\n});\n```\n\n----------------------------------------\n\nTITLE: AA-Only Chain Alchemy Transport Configuration\nDESCRIPTION: Shows how to configure alchemy transport for AA-only chains by specifying both alchemyConnection and nodeRpcUrl parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemy } from \"@account-kit/infra\";\n\nconst transport = alchemy({\n  alchemyConnection: {\n    apiKey: \"your-api-key\",\n  },\n  nodeRpcUrl: \"https://zora.rpc.url\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authenticator App in React with Account Kit\nDESCRIPTION: This code snippet shows how to set up an authenticator app for MFA using the useMFA hook. It handles the generation of a QR code URL, displays it to the user, and stores the necessary factor ID for verification.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/mfa/setup-mfa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { QRCodeSVG } from \"qrcode.react\";\nimport { useMFA } from \"@account-kit/react\";\n\nfunction AuthenticatorSetupComponent() {\n  const { addMFA } = useMFA();\n  const [qrCodeUrl, setQrCodeUrl] = useState(\"\");\n  const [factorId, setFactorId] = useState(\"\");\n\n  const handleSetupAuthenticator = () => {\n    // Use the mutate method from the mutation result\n    addMFA.mutate(\n      {\n        multiFactorType: \"totp\", // Technical name for authenticator apps\n      },\n      {\n        onSuccess: (result) => {\n          // Store the QR code URL and factor ID\n          setQrCodeUrl(result.multiFactorTotpUrl);\n          // Store the factor ID which will be needed for verification in the next step\n          // This ID uniquely identifies the MFA factor being configured\n          setFactorId(result.multiFactorId);\n        },\n        onError: (error) => {\n          console.error(\"Failed to set up authenticator app:\", error);\n        },\n      }\n    );\n  };\n\n  // You can also check loading state directly\n  const isLoading = addMFA.isPending;\n\n  return (\n    <div>\n      <button onClick={handleSetupAuthenticator} disabled={isLoading}>\n        {isLoading ? \"Setting up...\" : \"Set Up Authenticator App\"}\n      </button>\n\n      {qrCodeUrl && (\n        <div className=\"qr-container\">\n          <h3>Scan this QR code with your authenticator app</h3>\n          <QRCodeSVG value={qrCodeUrl} size={200} />\n          <p>\n            After scanning, enter the 6-digit code from your authenticator app\n            to complete setup.\n          </p>\n        </div>\n      )}\n\n      {/* Display errors if they occur */}\n      {addMFA.isError && (\n        <div className=\"error\">Error: {addMFA.error.message}</div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Installed Plugins using TypeScript and Account Kit\nDESCRIPTION: TypeScript implementation demonstrating how to retrieve and inspect installed plugins using modularAccountClient. Shows how to get plugin addresses and read plugin metadata.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/manage-plugins/get-installed-plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\\nimport { IPluginAbi } from \"@account-kit/smart-contracts\";\\n\\n// returns addresses of all installed plugins\\nconst installedPlugins = await modularAccountClient.getInstalledPlugins({});\\n\\nif (installedPlugins.length === 0) {\\n  console.log(\"account has no plugins installed.\");\\n  return;\\n}\\n\\nconst pluginAddress = installedPlugins[0];\\n// read plugin metadata of a plugin\\nconst metadata = await modularAccountClient.readContract({\\n  address: pluginAddress,\\n  abi: IPluginAbi,\\n  functionName: \"pluginMetadata\",\\n});\\n\\nconsole.log(JSON.stringify(metadata, null, 2));\\n// {\\n//   name: 'MultiOwnerPlugin',\\n//   version: '1.0.0',\\n// }\n```\n\n----------------------------------------\n\nTITLE: Using useMFA Hook in TypeScript\nDESCRIPTION: Demonstrates how to use the useMFA hook to destructure its functions and state variables for managing multi-factor authentication. Includes addMFA, verifyMFA, removeMFA, getMFAFactors, and the isReady flag.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useMFA.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMFA } from \"@account-kit/react\";\n\nconst { addMFA, verifyMFA, removeMFA, getMFAFactors, isReady } = useMFA();\n```\n\n----------------------------------------\n\nTITLE: Using the useSigner Hook in React Components\nDESCRIPTION: This example demonstrates how to use the useSigner hook to access the Alchemy Web Signer in a React component. The returned signer can be used for EOA operations or basic signing functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSigner } from \"@account-kit/react\";\nimport type { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer: AlchemyWebSigner | null = useSigner();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Chains in Account Kit\nDESCRIPTION: Sets up the Account Kit configuration to support multiple chains (Sepolia and Mainnet). Defines a default chain and optionally includes policy IDs for gas sponsorship for each chain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/multi-chain-apps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, mainnet } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  apiKey: \"ALCHEMY_API_KEY\",\n  // this is the default chain\n  chain: sepolia,\n  chains: [\n    {\n      chain: mainnet, // optional: you can specify a policy ID for this chain, if you want to sponsor gas\n      policyId: \"MAINNET_GAS_MANAGER_POLICY_ID\",\n    },\n    {\n      chain: sepolia,\n      // optional: you can specify a policy ID for this chain, if you want to sponsor gas\n      policyId: \"SEPOLIA_GAS_MANAGER_POLICY_ID\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using getBundlerClient to Retrieve BundlerClient in TypeScript\nDESCRIPTION: This snippet shows how to use the `getBundlerClient` function. It assumes an existing `AlchemyAccountsConfig` object named `config` (imported from `./config`) and calls `getBundlerClient` with this config to retrieve the associated `BundlerClient`. The function requires the configuration object as its sole parameter.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// see `createConfig` for more information on how to create a config\nimport { config } from \"./config\";\n\nconst bundlerClient = getBundlerClient(config);\n```\n\n----------------------------------------\n\nTITLE: Initializing RNAlchemySigner with Configuration\nDESCRIPTION: Demonstrates how to create a signer instance with API key configuration and optional session settings. The example includes setting an API key and configuring session expiration time.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react-native-signer/functions/RNAlchemySigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RNAlchemySigner } from \"@account-kit/react-native-signer\";\n\nconst signer = RNAlchemySigner({\n  client: {\n    connection: {\n      apiKey: \"YOUR_API_KEY\",\n    },\n  },\n  // optional config to override default session manager configs\n  sessionConfig: {\n    expirationTimeMs: 1000 * 60 * 60, // 60 minutes\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Session Key Signer\nDESCRIPTION: Creates a new SessionKeySigner instance for client-side key management.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst sessionKeySigner = new SessionKeySigner();\n```\n\n----------------------------------------\n\nTITLE: Using mnemonicToAccountSigner in TypeScript\nDESCRIPTION: Demonstrates how to use the mnemonicToAccountSigner method to create a LocalAccountSigner from a generated mnemonic. It imports necessary functions and creates a signer instance.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/mnemonicToAccountSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generateMnemonic } from \"viem\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(generateMnemonic());\n```\n\n----------------------------------------\n\nTITLE: Using lookupUserWithPasskey Method\nDESCRIPTION: Demonstrates how to initialize the AlchemySignerWebClient with configuration options and use the lookupUserWithPasskey method to authenticate a user with a passkey.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/lookupUserWithPasskey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.lookupUserWithPasskey();\n```\n\n----------------------------------------\n\nTITLE: Extending Client with Alchemy Actions in TypeScript\nDESCRIPTION: Demonstrates how to create a public client and extend it with Alchemy Smart Account actions. Uses the viem library for client creation and applies the alchemyActions extension.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemyActions } from \"@account-kit/infra\";\nimport { createPublicClient } from \"viem\";\n\nconst client = createPublicClient(...);\nconst clientWithAlchemyActions = client.extend(alchemyActions);\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationRequest Interface in TypeScript\nDESCRIPTION: Defines the request format for eth_sendUserOperation JSON-RPC request, including sender, nonce, gas limits, fees, and other fields.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationRequest]\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Spend Limit with SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Demonstrates how to create a SessionKeyPermissionsBuilder instance and set a gas spend limit with a specified limit and refresh interval.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setGasSpendLimit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setGasSpendLimit({\n  spendLimit: 1000000000000000000n,\n  refreshInterval: 3600,\n});\n```\n\n----------------------------------------\n\nTITLE: Using getAddress Method - TypeScript\nDESCRIPTION: Complete example showing how to create a wallet client, initialize a WalletClientSigner, and retrieve an address. Uses viem for wallet client creation and connects to the Ethereum mainnet.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/WalletClientSigner/getAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\nimport { createWalletClient, custom } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n});\n\nconst signer = new WalletClientSigner(client, \"wallet\");\nconsole.log(await signer.getAddress());\n```\n\n----------------------------------------\n\nTITLE: Implementing MFA Verification with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance and use it to verify an MFA factor. Shows configuration of RPC URL and iframe container, followed by calling verifyMfa with required parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/verifyMfa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.verifyMfa({\n  multiFactorId: \"factor-id\",\n  multiFactorCode: \"123456\", // 6-digit code from authenticator app\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving MFA Factors with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to create an AlchemyWebSigner instance and use it to retrieve the configured MFA factors for the current user. The example configures the signer with a custom RPC URL and iframe container.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getMfaFactors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst { multiFactors } = await signer.getMfaFactors();\n```\n\n----------------------------------------\n\nTITLE: Managing Authentication Loading State in React\nDESCRIPTION: Example showing how to handle loading states during authentication with redirects using useAuthModal and useSignerStatus hooks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/ui-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthModal, useSignerStatus } from \"@account-kit/react\";\nimport { useEffect } from \"react\";\n\nconst { openAuthModal } = useAuthModal();\nconst { isAuthenticating } = useSignerStatus();\n\nuseEffect(() => {\n  if (isAuthenticating) {\n    openAuthModal();\n  }\n}, [openAuthModal, isAuthenticating]);\n```\n\n----------------------------------------\n\nTITLE: Installing Session Key Plugin and Setting Initial Permissions in TypeScript\nDESCRIPTION: Installs the Session Key Plugin if not already installed and sets up initial permissions for the session key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\n// 2. if the plugin is not installed, then install it and set up the session key\nif (!isPluginInstalled) {\n  // lets create an initial permission set for the session key giving it an eth spend limit\n  // if we don't set anything here, then the key will have 0 permissions\n  const initialPermissions =\n    new SessionKeyPermissionsBuilder().setNativeTokenSpendLimit({\n      spendLimit: 1000000n,\n    });\n\n  const { hash } = await extendedClient.installSessionKeyPlugin({\n    // 1st arg is the initial set of session keys\n    // 2nd arg is the tags for the session keys\n    // 3rd arg is the initial set of permissions\n    args: [\n      [await sessionKeySigner.getAddress()],\n      [zeroHash],\n      [initialPermissions.encode()],\n    ],\n  });\n\n  await extendedClient.waitForUserOperationTransaction({ hash });\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting TOTP Code for Multi-Factor Authentication in React\nDESCRIPTION: This code shows how to submit a TOTP code along with the multiFactorId to complete the magic link authentication process. It uses the authenticate function with the multiFactors array to verify the TOTP code before sending the magic link to the user's email.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/mfa/email-magic-link.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Continuing from the previous component...\n\nfunction MagicLinkWithMFA() {\n  const { authenticate } = useAuthenticate();\n\n  // Prompt the user to enter their TOTP code (from their authenticator app)\n  // Hardcoded for now, but in a real app you'd get this from the user\n  const totpCode = \"123456\";\n  const multiFactorId = \"123456\"; // This is the multiFactorId from the first step\n\n  // Step 2: Submit the TOTP code with multiFactorId to complete the flow\n  const handleMfaSubmission = (email: string) => {\n    authenticate(\n      {\n        type: \"email\",\n        emailMode: \"magicLink\",\n        email,\n        // The multiFactors array tells the authentication system which\n        // factor to verify and what code to use\n        multiFactors: [\n          {\n            multiFactorId,\n            multiFactorCode: totpCode,\n          },\n        ],\n      },\n      {\n        onSuccess: () => {\n          // This callback will only fire after the user has clicked the magic link and the email has been verified\n        },\n        onError: (error) => {\n          // Handle error\n        },\n      }\n    );\n  };\n\n  return <div>{/* Your UI components here */}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Policy ID in Account Kit\nDESCRIPTION: This snippet shows how to set up Account Kit configuration with a global Gas Manager policy ID. The policy ID enables all UserOperations sent through the useSendUserOperation hook to be sponsored by the specified policy.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/sponsor-gas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  apiKey: \"ALCHEMY_API_KEY\",\n  chain: sepolia,\n  policyId: \"GAS_MANAGER_POLICY_ID\", // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Logger.warn Method for Warnings in TypeScript\nDESCRIPTION: This example shows how to call the static `warn` method on the `Logger` class after importing it. The method takes a mandatory string message (`msg`) and optional additional arguments (`...args`). It logs the message as a warning if the logging conditions configured for the Logger are met.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/warn.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.warn(\"Careful...\");\n```\n\n----------------------------------------\n\nTITLE: Importing isAlchemyTransport Function in TypeScript\nDESCRIPTION: Imports the `isAlchemyTransport` function from the `@account-kit/infra` package. This function serves as a type guard to verify if a given transport object is specifically configured for use with Alchemy services. It requires the transport object and the associated Chain object as parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/isAlchemyTransport.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isAlchemyTransport } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Signing with AccountSigner\nDESCRIPTION: Demonstrates complete implementation of message signing using AccountSigner, including account creation, provider setup, and message signing. Uses LocalAccountSigner and EthersProviderAdapter with Sepolia testnet.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/signMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n\nconst message = await signer.signMessage(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Using getMAV2UpgradeToData to Upgrade to a Modular Account V2\nDESCRIPTION: Demonstrates how to use getMAV2UpgradeToData with a LightAccount client to retrieve upgrade data for transitioning to a Modular Account V2.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getMAV2UpgradeToData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createLightAccountClient,\n  getMAV2UpgradeToData,\n} from \"@account-kit/smart-contracts\";\n\nconst client = createLightAccountClient({});\nconst upgradeData = await getMAV2UpgradeToData(client, {});\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Account Signer in TypeScript\nDESCRIPTION: Creates a LocalAccountSigner instance from a private key to enable EIP-7702 authorization signing.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/using-7702.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n\nconst privateKey = \"0x...\"; // Private key\n\nconst signer = LocalAccountSigner.privateKeyToAccountSigner(privateKey);\n```\n\n----------------------------------------\n\nTITLE: Implementing Embedded Authentication with AuthCard in React\nDESCRIPTION: This snippet shows how to use the AuthCard component for embedded authentication rather than modal-based flows. It demonstrates placing the authentication card directly in a page layout for standalone login pages.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/ui-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { AuthCard } from \"@account-kit/react\";\n\nexport default function MyLoginPage() {\n  return (\n    <div className=\"flex flex-row p-4 bg-white border border-gray-200 rounded-lg\">\n      <AuthCard />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using WalletClientSigner to Sign a Message\nDESCRIPTION: This example demonstrates how to create a WalletClientSigner instance and use it to sign a message. It includes creating a wallet client with viem, initializing the signer, and calling the signMessage method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/WalletClientSigner/signMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\nimport { createWalletClient, custom } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n});\n\nconst signer = new WalletClientSigner(client, \"wallet\");\nconsole.log(await signer.signMessage(\"hello\"));\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationOverrides Type for Custom Gas Settings\nDESCRIPTION: Partial structure for overriding default values in a UserOperationStruct, allowing customization of gas limits, fees, and other parameters that can be specified through ClientMiddleware of the SmartAccountClient.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationOverrides]\n```\n\n----------------------------------------\n\nTITLE: Using useAuthError to handle authentication errors\nDESCRIPTION: Demonstrates how to implement the useAuthError hook to capture and handle authentication errors. The hook returns the current Error object if an error occurred during an authentication step.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAuthError.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthError } from \"@account-kit/react\";\n\nconst error = useAuthError();\n\nif (error) {\n  console.error(\"Error occurred during auth step\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Using convertCoinTypeToChain Function with Sepolia Chain\nDESCRIPTION: Demonstrates converting between chain ID, coin type, and chain using both convertChainIdToCoinType and convertCoinTypeToChain functions. Shows integration with viem/chains for the Sepolia testnet.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/convertCoinTypeToChain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convertChainIdToCoinType, convertCoinTypeToChain } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst coinType = convertChainIdToCoinType(sepolia.id);\nconst chain = convertCoinTypeToChain(coinType);\n```\n\n----------------------------------------\n\nTITLE: Importing Hydrate Component from Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Hydrate component from the @account-kit/react package in a TypeScript React project. Importing this component is required before using it within your React application's render tree. The component is intended to hydrate the client store with configuration and initial state based on the documented parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/functions/Hydrate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Hydrate } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in TypeScript\nDESCRIPTION: Demonstrates how to set the log level using the Logger class with the LogLevel enum to configure debug logging\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/setLogLevel.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger, LogLevel } from \"@aa-sdk/core\";\nLogger.setLogLevel(LogLevel.DEBUG);\n```\n\n----------------------------------------\n\nTITLE: Using watchSmartAccountClient with Callback\nDESCRIPTION: Demonstrates how to use watchSmartAccountClient with a LightAccount type configuration and console.log as the callback handler. Requires a pre-configured config object.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchSmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchSmartAccountClient({ type: \"LightAccount\" }, config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login with MFA in React\nDESCRIPTION: This code snippet demonstrates how to implement social login authentication using the @account-kit/react library. It shows a function to handle Google login using a popup flow. The code remains unchanged when MFA is enabled, as the MFA verification is handled automatically in the OAuth flow.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/mfa/social-login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Your social login implementation doesn't change\nconst { authenticate } = useAuthenticate();\n\n// For popup flow\nconst handleGoogleLogin = () => {\n  authenticate(\n    {\n      type: \"oauth\",\n      authProviderId: \"google\",\n      mode: \"popup\",\n    },\n    {\n      onSuccess: () => {\n        // Authentication successful!\n        // If MFA was required, it was handled automatically in the oauth flow\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Alchemy Signer Instance\nDESCRIPTION: References the signer configuration file that contains the base Alchemy Signer setup. This file contains the core signer implementation that's used for EOA functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/as-an-eoa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/shared/signer/signer.ts]\n```\n\n----------------------------------------\n\nTITLE: Using getAlchemyPaymasterAddress Function in TypeScript\nDESCRIPTION: Demonstrates how to use the getAlchemyPaymasterAddress function to retrieve the Alchemy paymaster address for the Sepolia network.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/getAlchemyPaymasterAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sepolia, getAlchemyPaymasterAddress } from \"@account-kit/infra\";\n\nconst paymasterAddress = getAlchemyPaymasterAddress(sepolia);\n```\n\n----------------------------------------\n\nTITLE: Using oauthWithPopup in AlchemySignerWebClient\nDESCRIPTION: This example demonstrates how to create an instance of AlchemySignerWebClient and use the oauthWithPopup method to authenticate a user with Google OAuth in a popup window.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/oauthWithPopup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst user = await client.oauthWithPopup({\n  type: \"oauth\",\n  authProviderId: \"google\",\n  mode: \"popup\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient from @account-kit/signer\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/targetPublicKey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Multisig Modular Account Example\nDESCRIPTION: Demonstrates how to create a multisig modular account with multiple owners and a specified threshold. The example shows configuration with Sepolia testnet, HTTP transport, and local account signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultisigModularAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigModularAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\"\n\nconst account = await createMultisigModularAccount({\nchain: sepolia,\ntransport: http(\"RPC_URL\"),\nsigner: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\nowners: [...], // other owners on the account\nthreshold: 2, // 2 of N signatures\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using BundlerClient in TypeScript\nDESCRIPTION: This code demonstrates how to create a Light Account, set up an EthersProviderAdapter, and then use the getBundlerClient method to create a BundlerClient. It includes importing necessary dependencies, creating an account, initializing a provider, and obtaining a bundler client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/getBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter({\n  account,\n  chain: sepolia,\n  rpcProvider: \"https://eth-sepolia.g.alchemy.com/v2/your-api-key\",\n});\n\nconst bundlerClient = provider.getBundlerClient();\n```\n\n----------------------------------------\n\nTITLE: Creating New NextJS App with Account Kit Template\nDESCRIPTION: Commands to create a new NextJS application using the Account Kit template via yarn or npm.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/quickstart.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create next-app account-kit-app -e https://github.com/avarobinson/account-kit-quickstart\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app account-kit-app -e https://github.com/avarobinson/account-kit-quickstart\n```\n\n----------------------------------------\n\nTITLE: Signing a Message using AccountSigner and EthersProviderAdapter in TypeScript\nDESCRIPTION: This code demonstrates initializing necessary classes from the aa-sdk ecosystem and using the AccountSigner to sign a message. It imports AccountSigner, EthersProviderAdapter, LocalAccountSigner, and utilities for chain and HTTP configuration. The sample illustrates creating a Light Account with a private key, initializing provider and signer, and signing a message using signMessage. Dependencies include @aa-sdk/ethers, @aa-sdk/core, @account-kit/infra, @account-kit/smart-contracts, and viem. Inputs include RPC endpoint, chain configuration and a message (string or Uint8Array); it returns a Promise resolving to the signed message string.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/signMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n\nconst message = await signer.signMessage(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Updating Session Key Permissions with Time Range in TypeScript\nDESCRIPTION: Shows how to update an existing session key's permissions, including setting a time range for validity.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\nimport { client } from \"./base-client\";\n\nconst result = await client.updateSessionKeyPermissions({\n  key: \"0xSessionKeyAddress\",\n  // add other permissions to the builder\n  permissions: new SessionKeyPermissionsBuilder()\n    .setTimeRange({\n      validFrom: Math.round(Date.now() / 1000),\n      // valid for 1 hour\n      validUntil: Math.round(Date.now() / 1000 + 60 * 60),\n    })\n    .encode(),\n});\n```\n\n----------------------------------------\n\nTITLE: Using useUiConfig Hook with Selector in React\nDESCRIPTION: Demonstrates how to use the useUiConfig hook with a selector function to extract specific UI configuration properties like illustrationStyle and auth\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useUiConfig.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUiConfig } from \"@account-kit/react\";\n\nconst { illustrationStyle, auth } = useUiConfig(\n  ({ illustrationStyle, auth }) => ({ illustrationStyle, auth })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Passkey Signup with AlchemyAccountsUIConfig in React\nDESCRIPTION: This snippet demonstrates how to configure Passkey Signup authentication in your Account Kit application using the UI configuration object. It includes setting up authentication sections and enabling automatic passkey creation after signup.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/passkey-signup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        // Include passkey in a section\n        { type: \"passkey\" },\n\n        // You can combine with other authentication methods\n        { type: \"email\" },\n      ],\n    ],\n    // Enable automatic passkey creation after signup\n    addPasskeyOnSignup: true,\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying TOTP MFA Setup in Alchemy Signer\nDESCRIPTION: Verifies a Time-based One-Time Password (TOTP) multi-factor authentication setup by validating the 6-digit code from the user's authenticator app. This step is necessary to complete the MFA setup process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nawait signer.verifyMfa({\n  multiFactorId, // from addMfa\n  multiFactorCode: \"123456\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using TraceHeader.fromTraceHeader Method\nDESCRIPTION: Demonstrates how to create a TraceHeader object from HTTP request headers. The method takes a Record<string,string> of headers and returns either a TraceHeader object or undefined if no trace header is found.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/TraceHeader/fromTraceHeader.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst traceHeader = TraceHeader.fromTraceHeader(headers);\n```\n\n----------------------------------------\n\nTITLE: Importing getSignerStatus from Account Kit in TypeScript\nDESCRIPTION: Demonstrates how to import the getSignerStatus function from the @account-kit/core package. This is a prerequisite step before invoking the function to retrieve signer status. It assumes that the @account-kit/core package is already installed in the project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getSignerStatus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getSignerStatus } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Checking if an Address is an Owner of a Modular Account in TypeScript\nDESCRIPTION: This code demonstrates how to check if a specific address is one of the current owners of a Modular Account. It uses the isOwnerOf method from the multiOwnerPluginActions extended SmartAccountClient.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/manage-ownership-mav1.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\n\nconst ownerToCheck = \"0x...\"; // the address of the account to check the ownership of\n\n// returns a boolean whether an address is an owner of account or not\nconst isOwner = await modularAccountClient.isOwnerOf({\n  address: ownerToCheck,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Authentication in React with Account Kit\nDESCRIPTION: Basic implementation of authentication modal using the useAuthModal hook to create a simple authentication button.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/ui-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthModal } from \"@account-kit/react\";\n\nexport default function MyPage() {\n  const { openAuthModal } = useAuthModal();\n\n  return <button onClick={openAuthModal}>Authenticate</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Session Key in TypeScript\nDESCRIPTION: Demonstrates how to create a new SessionKeySigner instance and generate a new private key using the generateNewKey method. The method returns the public address of the newly generated key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/generateNewKey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst signer = new SessionKeySigner();\nconst newSessionKey = signer.generateNewKey();\n```\n\n----------------------------------------\n\nTITLE: Using setNativeTokenSpendLimit in SessionKeyPermissionsBuilder\nDESCRIPTION: Demonstrates how to create a SessionKeyPermissionsBuilder instance and set the native token spend limit. The method takes an object with spendLimit and refreshInterval properties.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setNativeTokenSpendLimit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setNativeTokenSpendLimit({\n  spendLimit: 1000000000000000000n,\n  refreshInterval: 3600,\n});\n```\n\n----------------------------------------\n\nTITLE: ClientMiddleware Interface Definition\nDESCRIPTION: Interface for middleware operations in SmartAccountClient pipeline for user operation construction.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/middleware/types.ts:ClientMiddleware]\n```\n\n----------------------------------------\n\nTITLE: Using exportWallet Method with AlchemySignerWebClient\nDESCRIPTION: Demonstrates how to instantiate AlchemySignerWebClient with API key and iframe configuration, then call the exportWallet method to export a wallet.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/exportWallet.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.exportWallet({\n  iframeContainerId: \"export-iframe-container\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using WalletClientSigner to Sign Messages in TypeScript\nDESCRIPTION: Shows how to create a WalletClientSigner instance and use it to sign a message. This example uses viem to create a wallet client connected to the Ethereum mainnet.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/WalletClientSigner/signMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\nimport { createWalletClient, custom } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n});\n\nconst signer = new WalletClientSigner(client, \"wallet\");\nconsole.log(await signer.signMessage(\"hello\"));\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyActions for Alchemy Smart Account - TypeScript\nDESCRIPTION: This snippet shows how to import the alchemyActions module from the @account-kit/infra package in TypeScript. This import is necessary to access functions that enable Alchemy Smart Account capabilities within a client. No parameters are required, and this sets up the environment for integrating with supported clients.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { alchemyActions } from \"@account-kit/infra\";\n\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner Class in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package, which provides the toViemAccount method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/toViemAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: OTP Verification Modal Component in React Native\nDESCRIPTION: This modal component handles the OTP verification part of the authentication flow. It displays a form for the user to enter the OTP code received via email and verifies it using the authenticate function with type 'otp' from Account Kit.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/signer/authenticating-users/authenticating-with-otp.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// @noErrors\nimport React, { useCallback, useState } from \"react\";\nimport {\n  Modal,\n  Text,\n  TextInput,\n  Button,\n  SafeAreaView,\n  Alert,\n} from \"react-native\";\nimport { useAuthenticate } from \"@account-kit/react-native\";\n\nexport const OtpPopUp = ({\n  show,\n  completeAuth,\n  close,\n}: {\n  show: boolean;\n  completeAuth: () => void;\n  close: () => void;\n}) => {\n  const { authenticate } = useAuthenticate();\n  const [otpCode, setOtpCode] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n\n  // Authenticate a user using a bundle returned from a deep link\n  const handleUserOtp = useCallback(\n    (otpCode: string) => {\n      try {\n        setLoading(true);\n        authenticate({ otpCode, type: \"otp\" }); //<-- Pass the user's OTP code to the authenticate method using `otp` as the type value\n\n        completeAuth();\n      } catch (e) {\n        Alert.alert(\"Error verifying OTP Code. Check logs for more details.\");\n\n        console.log(\"Error verifying OTP CODE: \", e);\n      }\n    },\n    [authenticate]\n  );\n\n  return (\n    <Modal visible={show} style={{ paddingTop: 200 }}>\n      <SafeAreaView style={{ margin: 20 }}>\n        <Text style={{ fontSize: 16 }}>Enter OTP</Text>\n        <TextInput\n          style={{ fontSize: 20 }}\n          value={otpCode}\n          onChangeText={setOtpCode}\n          placeholder=\"Enter OTP\"\n        />\n        <Button\n          title={loading ? \"Loading\" : \"Submit OTP\"}\n          disabled={loading}\n          onPress={() => handleUserOtp(otpCode)}\n        />\n        <Button\n          title=\"Close\"\n          onPress={() => {\n            setLoading(false);\n            close();\n          }}\n        />\n      </SafeAreaView>\n    </Modal>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Client Gas Policy in Account Kit\nDESCRIPTION: Demonstrates how to set up a gas policy for a specific Smart Account Client instance using watchSmartAccountClient. This allows for more granular control over which UserOperations are sponsored.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/sponsor-gas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nlet clientState;\n\nconst clientSubscription = watchSmartAccountClient(\n  {\n    type: \"LightAccount\",\n    policyId: \"GAS_MANAGER_POLICY_ID\",\n  },\n  config\n)((clientState_) => {\n  clientState = clientState_;\n});\n\n// .. do stuff with the client state\n```\n\n----------------------------------------\n\nTITLE: Using disconnect Method with AlchemySignerWebClient in TypeScript\nDESCRIPTION: Demonstrates how to initialize an AlchemySignerWebClient with an API key and iframe configuration, then call the disconnect method to clear user data and reset the iframe stamper.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/disconnect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletClientSigner with viem Wallet Client - TypeScript\nDESCRIPTION: This snippet shows how to set up a WalletClientSigner instance using a wallet client from the viem library, targeting the Ethereum mainnet and using a custom transport (such as window.ethereum). Dependencies include @aa-sdk/core, viem, and a compatible wallet provider. The code requires a valid WalletClient and a signer type string, and it shows how to prepare these objects and instantiate the signer. The client parameter is expected to be a configured viem wallet client; signerType should be a valid string or an error will be thrown. The signer object enables account abstraction signing operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/WalletClientSigner/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\nimport { createWalletClient, custom } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n});\n\nconst signer = new WalletClientSigner(client, \"wallet\");\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to Authentication Header in Account Kit\nDESCRIPTION: This snippet demonstrates how to add a custom icon to the authentication modal while keeping the default 'Sign in' text. It uses the header property in the auth configuration to insert an image element.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/customization/theme.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// @jsx: react-jsx\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const confg = createConfig(\n  {\n    transport: alchemy({ apiKey: \"YOUR_KEY\" }),\n    chain: sepolia,\n  },\n  {\n    auth: {\n      header: <img src=\"img.src\" />, // [!code ++]\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Authenticator App Setup in React with Account Kit\nDESCRIPTION: This snippet illustrates the process of verifying the authenticator app setup by allowing the user to enter a 6-digit code. It uses the verifyMFA mutation from the useMFA hook to confirm the setup.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/mfa/setup-mfa.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { useMFA } from \"@account-kit/react\";\n\nfunction VerifyAuthenticatorComponent({\n  multiFactorId,\n}: {\n  multiFactorId: string;\n}) {\n  const { verifyMFA } = useMFA();\n  const [code, setCode] = useState(\"\");\n\n  const handleVerifyAuthenticator = () => {\n    verifyMFA.mutate(\n      {\n        multiFactorId,\n        multiFactorCode: code, // The TOTP code from the user's authenticator app\n      },\n      {\n        onSuccess: () => {\n          // Authenticator setup successful\n          console.log(\"MFA setup complete!\");\n        },\n        onError: (error) => {\n          // Handle error\n          console.error(\"Verification failed:\", error);\n        },\n      }\n    );\n  };\n\n  // For async/await pattern, you can use mutateAsync\n  const handleVerifyAsync = async () => {\n    try {\n      const result = await verifyMFA.mutateAsync({\n        multiFactorId,\n        multiFactorCode: code,\n      });\n      console.log(\"MFA setup complete!\", result);\n    } catch (error) {\n      console.error(\"Verification failed:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={code}\n        onChange={(e) => setCode(e.target.value)}\n        placeholder=\"Enter 6-digit code\"\n        maxLength={6}\n      />\n      <button\n        onClick={handleVerifyAuthenticator}\n        disabled={verifyMFA.isPending}\n      >\n        {verifyMFA.isPending ? \"Verifying...\" : \"Verify Code\"}\n      </button>\n\n      {verifyMFA.isError && (\n        <div className=\"error\">Invalid code. Please try again.</div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using getBundlerClient with Account Setup\nDESCRIPTION: Demonstrates complete setup of an account signer and retrieving the bundler client. Includes creating a light account, setting up the provider and signer, and getting the bundler client instance.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/getBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n\nconst bundler = signer.getBundlerClient();\n```\n\n----------------------------------------\n\nTITLE: Collecting Threshold Signatures for Multisig\nDESCRIPTION: Shows how to collect additional required signatures from multisig members using the signMultisigUserOperation method. Each member can sign the operation independently.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/multisig-plugin/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { signers, owners, threshold } from \"./client\";\n\nconst multisigAccountClient = await createMultisigAccountAlchemyClient({\n  chain,\n  signer: signers[1], // using the second signer\n  owners,\n  threshold,\n  apiKey: \"YOUR_API_KEY\",\n});\n\nconst { aggregatedSignature, signatureObj: secondSig } =\n  await multisigAccountClient.signMultisigUserOperation({\n    account: multisigAccountClient.account,\n    // output from step 1, and from this step if k-2 > 1\n    signatures: [previousAggregatedSignature],\n    userOperationRequest: request,\n  });\n```\n\n----------------------------------------\n\nTITLE: Migrating Middleware Configuration in AA-SDK v3.x.x\nDESCRIPTION: Example showing how to migrate from the with* middleware override functions in SmartAccountProvider to the new configuration approach in SmartAccountClient. Middlewares are now configured directly in the client creator.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/migration-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SmartAccountProvider } from \"@aa-sdk/core\"; // [!code --]\nimport { getDefaultEntryPointAddress } from \"@aa-sdk/core\"; // [!code --]\nimport { http } from \"viem\"; // [!code ++]\nimport { sepolia } from \"@aa-sdk/core\";\n\nconst provider = new SmartAccountProvider({ // [!code --]\nconst client = createSmartAccountClient({ // [!code ++]\n    rpcProvider: \"RPC_URL\", // [!code --]\n    transport: http(\"RPC_URL\"), // [!code ++]\n    chain: sepolia,\n    entryPointAddress: getDefaultEntryPointAddress(sepolia), // [!code --]\n}).withGasEstimator(async () => ({ // [!code --]\n    gasEstimator: async (struct) => ({ // [!code ++]\n        ...struct, // [!code ++]\n        callGasLimit: 0n,\n        preVerificationGas: 0n,\n        verificationGasLimit: 0n,\n    }), // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users with Email in TypeScript\nDESCRIPTION: This snippet shows how to authenticate users using email. It's a two-step process involving initiating the login flow and completing authentication with a bundle received via email.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/authenticate-users.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"./config\";\nimport { getSigner } from \"@account-kit/core\";\n\nconst signer = getSigner(config);\n\nif (!signer) {\n  // this can happen if your rendering this on the server\n  // the signer instance is only available on the client\n  throw new Error(\"Signer not found\");\n}\n\n// authenticate the user with email\nawait signer.authenticate({\n  type: \"email\",\n  email: \"user@email.com\",\n});\n\n// once the user has clicked on the email and been redirected back to your site\nconst bundle = new URLSearchParams(window.location.search).get(\"bundle\");\nif (!bundle) {\n  throw new Error(\"No bundle found in URL\");\n}\n\nawait signer.authenticate({ type: \"email\", bundle });\n```\n\n----------------------------------------\n\nTITLE: Configuring Split Transport with Viem Client\nDESCRIPTION: Demonstrates how to set up a split transport configuration with viem client, defining specific methods to route to a bundler RPC and a fallback RPC for other methods. Shows complete implementation including method definitions and client creation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/split.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from \"viem\";\nimport { split } from \"@aa-sdk/core\";\n\nconst bundlerMethods = [\n  \"eth_sendUserOperation\",\n  \"eth_estimateUserOperationGas\",\n  \"eth_getUserOperationReceipt\",\n  \"eth_getUserOperationByHash\",\n  \"eth_supportedEntryPoints\",\n];\n\nconst clientWithSplit = createPublicClient({\n  transport: split({\n    overrides: [\n      {\n        methods: bundlerMethods,\n        transport: http(BUNDLER_RPC_URL),\n      },\n    ],\n    fallback: http(OTHER_RPC_URL),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Modular Account V2 Client with Alchemy SDK\nDESCRIPTION: Demonstrates the full process of creating a Modular Account V2 client with the Alchemy SDK, including setting up a signer, chain, transport, and optional policy ID for gas management.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createModularAccountV2Client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { alchemy, sepolia } from \"@account-kit/infra\";\n\nconst MNEMONIC = \"...\";\nconst RPC_URL = \"...\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(MNEMONIC);\n\nconst chain = sepolia;\n\nconst transport = alchemy({ rpcUrl: RPC_URL });\n\nconst policyId = \"...\";\n\nconst modularAccountV2Client = await createModularAccountV2Client({\n  chain,\n  signer,\n  transport,\n  policyId, // NOTE: you may only pass in a gas policy ID if you provide an Alchemy transport!\n});\n```\n\n----------------------------------------\n\nTITLE: Using the useChain Hook in a React Component\nDESCRIPTION: Demonstrates how to implement the useChain hook in a React component to display the current chain ID and provide a button to change the chain to Sepolia. Shows proper handling of loading state during chain switching.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useChain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useChain } from \"@account-kit/react\";\n// Assuming the chain sepolia is defined in your initial createConfig call\nimport { sepolia } from \"@account-kit/infra\";\n\nfunction ComponentUsingChain() {\n  const { chain, setChain, isSettingChain } = useChain();\n\n  return (\n    <div>\n      <p>Current Chain: {chain.id}</p>\n      <button\n        onClick={() => setChain({ chain: sepolia })}\n        disabled={isSettingChain}\n      >\n        Set Chain\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Anonymous User with Passkey in TypeScript\nDESCRIPTION: This code snippet shows how to authenticate an anonymous user using a passkey. The 'createNew' flag is set to false to prevent creating a new account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/passkey-login.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst result = await signer.authenticate({\n  type: \"passkey\",\n  createNew: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Status in React with Account Kit\nDESCRIPTION: This React component snippet shows how to track the authentication status using the useSignerStatus hook from Account Kit. It provides a way to determine if the user is currently authenticated.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/email-otp.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n\n----------------------------------------\n\nTITLE: Using Logger.debug for Debug Messages in TypeScript\nDESCRIPTION: Demonstrates the usage of the static `Logger.debug` method. It takes a required string message (`msg`) and optional additional arguments (`...args`). The message and arguments are logged to the console only if the logger's current level allows for debug messages.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/debug.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.debug(\"Something is happening\");\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyActions in TypeScript\nDESCRIPTION: Shows how to import the alchemyActions method from the @account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemyActions } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Configuring AlchemyAccountsProvider in React Native\nDESCRIPTION: This code snippet demonstrates how to set up the AlchemyAccountsProvider component from the @account-kit/react-native package in a React Native application. It shows the configuration for both Expo (_layout.tsx) and Bare React Native (App.tsx) projects.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/signer/authenticating-users/setting-up-the-accounts-provider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsProvider } from \"@account-kit/react-native\";\nimport { Signer } from \"./path/to/your/signer\";\n\nfunction Root() {\n  return (\n    <AlchemyAccountsProvider\n      signer={Signer}\n      alchemyApiKey=\"YOUR_ALCHEMY_API_KEY\"\n      chainId={1}\n    >\n      {/* Your app components */}\n    </AlchemyAccountsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Kit to Add Passkeys on User Signup\nDESCRIPTION: This snippet demonstrates how to modify the Account Kit configuration to enable passkey creation during user signup. By setting the addPasskeyOnSignup flag to true, users will be prompted to create a passkey when they first create their account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/add-passkey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia } from \"@account-kit/infra\";\n\nexport const config = createConfig(\n  {\n    chain: sepolia,\n    apiKey: \"ALCHEMY_API_KEY\",\n  },\n  {\n    illustrationStyle: \"outline\",\n    auth: {\n      sections: [[{ type: \"email\" }], [{ type: \"passkey\" }]],\n      addPasskeyOnSignup: true, // [!code ++]\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Wallet Deployment Gas Costs\nDESCRIPTION: Comparison of gas costs for deploying different smart contract wallet implementations including Alchemy Modular Account, Biconomy Nexus, ZeroDev Kernel, Safe, Coinbase Smart Wallet, and Simple Account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/gas-benchmarks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                            |  Gas Cost |\n| :------------------------- | --------: |\n| Alchemy Modular Account v2 | `233,004` |\n| Biconomy Nexus             | `342,381` |\n| ZeroDev Kernel v3.1        | `338,419` |\n| Safe v1.4.1                | `435,486` |\n| Coinbase Smart Wallet      | `317,904` |\n| Simple Account             | `297,367` |\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Kit with Gas Policy ID for Global Sponsorship\nDESCRIPTION: This snippet shows how to create an Account Kit configuration with a gas policy ID for global transaction sponsorship. The gas policy ID is set during the config creation, enabling all UserOperations sent through the useSendUserOperation hook to be sponsored automatically.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/using-smart-accounts/sponsor-gas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { createConfig } from \"@account-kit/react-native\";\nimport { sepolia } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  apiKey: \"ALCHEMY_API_KEY\",\n  chain: sepolia,\n  policyId: \"GAS_MANAGER_POLICY_ID\", // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining BigNumberish Type in TypeScript\nDESCRIPTION: Defines the BigNumberish type, which can be a hexadecimal string prefixed with Hex, a bigint, or a number. It is used to represent values that can be converted to or operate as big integers.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/utils/schema.ts:BigNumberish]\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for AA SDK Logger in TypeScript\nDESCRIPTION: Demonstrates how to use the setLogLevel method to set the log level to DEBUG. It imports both Logger and LogLevel from the @aa-sdk/core module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/setLogLevel.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger, LogLevel } from \"@aa-sdk/core\";\nLogger.setLogLevel(LogLevel.DEBUG);\n```\n\n----------------------------------------\n\nTITLE: Importing useAddPasskey React Hook in TypeScript\nDESCRIPTION: This snippet shows how to import the useAddPasskey hook from the @account-kit/react package in a TypeScript-enabled React project. No additional dependencies are required beyond the mentioned package, and there are no configurable parameters at import. The output is the availability of the useAddPasskey hook for use within functional React components.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAddPasskey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAddPasskey } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Using Solana Sign Message Hook\nDESCRIPTION: Demonstrates how to use the useSolanaSignMessage hook to sign a message. Shows destructuring of hook return values including isPending status, mutate function, signature data, and reset function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSolanaSignMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  isPending: isSigningMessage,\n  mutate: signHello,\n  data: signature,\n  reset,\n} = useSolanaSignMessage({});\nmutate({ message: \"Hello\" });\n```\n\n----------------------------------------\n\nTITLE: Validating EntryPoint Version with isEntryPointVersion in TypeScript\nDESCRIPTION: This example shows how to use the isEntryPointVersion function to check if specific string values (e.g., '0.6.0' and '0.8.0') are recognized as valid keys in EntryPointRegistry. The function takes any value as an argument and returns a boolean indicating validity. No additional configuration is needed beyond importing the function; the output is a boolean true or false.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/isEntryPointVersion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isEntryPointVersion } from \"@aa-sdk/core\";\n\nconst valid = isEntryPointVersion(\"0.6.0\");\nconst invalid = isEntryPointVersion(\"0.8.0\");\n```\n\n----------------------------------------\n\nTITLE: Using buildUserOperationFromTx to Create and Send User Operations\nDESCRIPTION: Demonstrates the complete flow of creating a transaction request, building a user operation, signing it, and sending it to the bundler. Shows interaction with smart account client and handling of transaction parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/buildUserOperationFromTx.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RpcTransactionRequest } from \"viem\";\nimport { smartAccountClient } from \"./smartAccountClient\";\n// buildUserOperationFromTx converts a traditional Ethereum transaction and returns\n// the unsigned user operation struct after constructing the user operation struct\n// through the middleware pipeline\nconst tx: RpcTransactionRequest = {\nfrom, // ignored\nto,\ndata: encodeFunctionData({\nabi: ContractABI.abi,\nfunctionName: \"func\",\nargs: [arg1, arg2, ...],\n}),\n};\nconst uoStruct = await smartAccountClient.buildUserOperationFromTx(tx);\n\n// signUserOperation signs the above unsigned user operation struct built\n// using the account connected to the smart account client\nconst request = await smartAccountClient.signUserOperation({ uoStruct });\n\n// You can use the BundlerAction `sendRawUserOperation` (packages/core/src/actions/bundler/sendRawUserOperation.ts)\n// to send the signed user operation request to the bundler, requesting the bundler to send the signed uo to the\n// EntryPoint contract pointed at by the entryPoint address parameter\nconst entryPointAddress = client.account.getEntryPoint().address;\nconst uoHash = await smartAccountClient.sendRawUserOperation({ request, entryPoint: entryPointAddress });\n```\n\n----------------------------------------\n\nTITLE: Configuring EthersProviderAdapter with Light Account in TypeScript\nDESCRIPTION: Demonstrates how to set up and use the EthersProviderAdapter with a Light Account. It includes importing necessary dependencies, creating a Light Account, and initializing the provider.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter({\n  account,\n  chain: sepolia,\n  rpcProvider: \"https://eth-sepolia.g.alchemy.com/v2/your-api-key\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Upgraded Account Client\nDESCRIPTION: Demonstrates how to create a new smart account client for the upgraded Modular Account with multi-owner plugin integration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/upgrading-to-modular-account.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAlchemySmartAccountClient, alchemy } from \"@account-kit/infra\";\nimport { multiOwnerPluginActions } from \"@account-kit/smart-contracts\";\nimport { upgradedAccount } from \"./upgradedAccount\";\n\nconst upgradedAccountClient = await createAlchemySmartAccountClient({\n  transport: alchemy({ apiKey: \"YOUR_API_KEY\" }),\n  chain: lightAccountClient.chain,\n  account: upgradedAccount,\n}).extend(multiOwnerPluginActions);\n\nconst owners = await upgradedAccountClient.readOwners();\n```\n\n----------------------------------------\n\nTITLE: Using useAuthContext Hook in React Component\nDESCRIPTION: Demonstrates how to use the useAuthContext hook to access authentication step information within a React component\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAuthContext.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthContext } from \"@account-kit/react\";\n\nconst { authStep } = useAuthContext();\n```\n\n----------------------------------------\n\nTITLE: Rotating a Session Key in TypeScript\nDESCRIPTION: Demonstrates how to rotate a session key, replacing an old key with a new one while maintaining existing permissions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./base-client.js\";\n\nconst result = await client.rotateSessionKey({\n  oldKey: \"0xOldKey\",\n  newKey: \"0xNewKey\",\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Light Account Implementation in TypeScript\nDESCRIPTION: Retrieves the implementation address for a Light Account and determines the necessary upgrade steps based on the current state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"docs/shared/infra/client\";\nconst impl = await client.account.getImplementationAddress();\n\n// implementation slot exists and is a deployed modular account. this user has a modular account at the light account address. no need to upgrade.\nif (impl == \"ModularAccountImpl\") {\n  // done\n}\n\n// implementation slot exists and is a deployed light account. this user has a light account at the light account address. we need to initiate an upgrade for the user.\nelse if (impl == \"LightAccountImpl\") {\n  // go to step A\n}\n\n// implementation slot is empty\nelse if (impl == NullAddress) {\n  // account is not deployed and has assets at the counterfactual\n  const balance = await client.getBalance({ address: client.account.address });\n  if (balance) {\n    // go to step A\n  }\n  // account does not exist, new user!\n  else {\n    // go to step B\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Alchemy Account Config with createConfig - TypeScript\nDESCRIPTION: This snippet demonstrates usage of createConfig to instantiate an AlchemyAccountsConfig object by specifying chain configuration and transport options (including an API key). The example assumes dependencies on @account-kit/core, @account-kit/infra, and an appropriate alchemy transport method. Parameters include 'chain' (e.g., sepolia) and 'transport', with the function returning a configuration object. The input is an object with connection specifications, and the output enables account state management. Ensure all required npm packages are installed and available in your project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/createConfig.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createConfig } from \"@account-kit/core\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst config = createConfig({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using useChain Hook in React Component - TSX\nDESCRIPTION: Demonstrates practical usage of the useChain hook in a React component, including chain switching functionality and handling loading states. Shows how to access current chain information and implement chain switching with proper type safety.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useChain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useChain } from \"@account-kit/react\";\n// Assuming the chain sepolia is defined in your initial createConfig call\nimport { sepolia } from \"@account-kit/infra\";\n\nfunction ComponentUsingChain() {\n  const { chain, setChain, isSettingChain } = useChain();\n\n  return (\n    <div>\n      <p>Current Chain: {chain.id}</p>\n      <button\n        onClick={() => setChain({ chain: sepolia })}\n        disabled={isSettingChain}\n      >\n        Set Chain\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using watchSigner to Subscribe to Signer Store Changes in TypeScript\nDESCRIPTION: This snippet shows the typical implementation pattern for subscribing to signer changes using the watchSigner function. After importing the necessary configuration and the function itself, watchSigner is invoked with the provided config object (of type AlchemyAccountsConfig). An onChange callback, here implemented as console.log, is supplied to receive updates when the signer changes. The function returns an unsubscribe function to handle cleanup. Dependencies include @account-kit/core and a properly initialized config object.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { watchSigner } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchSigner(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationReceipt Interface in TypeScript\nDESCRIPTION: Defines the structure for the response from eth_getUserOperationReceipt RPC method, including details like sender, nonce, gas cost, and success status.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationReceipt]\n```\n\n----------------------------------------\n\nTITLE: Updating Session Key Permissions\nDESCRIPTION: Shows how to update permissions for an existing session key, including setting time-based restrictions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\nimport { client } from \"./base-client\";\n\nconst result = await client.updateSessionKeyPermissions({\n  key: \"0xSessionKeyAddress\",\n  permissions: new SessionKeyPermissionsBuilder()\n    .setTimeRange({\n      validFrom: Math.round(Date.now() / 1000),\n      validUntil: Math.round(Date.now() / 1000 + 60 * 60),\n    })\n    .encode(),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ERC-7677 Middleware in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the erc7677Middleware function from the @aa-sdk/core package using TypeScript import syntax. The erc7677Middleware enables middleware functionality for ERC-7677 compliant operations. No additional dependencies are needed except @aa-sdk/core. This is a prerequisite for further usage in smart account clients.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/erc7677Middleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { erc7677Middleware } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing pluginManagerActions in TypeScript\nDESCRIPTION: Shows how to import the pluginManagerActions method from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/pluginManagerActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginManagerActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Using useAlchemyAccountContext Hook in React Component\nDESCRIPTION: Demonstrates how to use the useAlchemyAccountContext hook to access the config and queryClient from the Alchemy account context within a React component.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAlchemyAccountContext.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAlchemyAccountContext } from \"@account-kit/react\";\n\nconst { config, queryClient } = useAlchemyAccountContext();\n```\n\n----------------------------------------\n\nTITLE: Initializing MultiOwner Light Account Client\nDESCRIPTION: Creates a Multi-Owner Light Account client using Alchemy provider. Similar to the standard Light Account but supports multiple owner addresses.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/light-account/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst lightAccountClient = await createMultiOwnerLightAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"your-api-key\" })\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Session Key\nDESCRIPTION: Demonstrates how to remove an existing session key from the account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./base-client\";\n\nconst result = await client.removeSessionKey({\n  key: \"0xSessionKeyAddress\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Alchemy Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and export the Alchemy Account Kit configuration, including authentication methods and API key setup. It uses the createConfig function to initialize the Alchemy provider with various options.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/quickstart.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, cookieStorage } from \"@account-kit/react\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { sepolia } from \"@account-kit/infra\";\n\nexport const config = createConfig(\n  {\n    // alchemy config\n    transport: alchemy({ apiKey: \"your_api_key\" }), // TODO: add your Alchemy API key - setup your app and embedded account config in the alchemy dashboard (https://dashboard.alchemy.com/accounts)\n    chain: sepolia, // TODO: specify your preferred chain here and update imports from @account-kit/infra\n    ssr: true, // Defers hydration of the account state to the client after the initial mount solving any inconsistencies between server and client state (read more here: https://accountkit.alchemy.com/react/ssr)\n    storage: cookieStorage, // persist the account state using cookies (read more here: https://accountkit.alchemy.com/react/ssr#persisting-the-account-state)\n    enablePopupOauth: true, // must be set to \"true\" if you plan on using popup rather than redirect in the social login flow\n    // optional config to override default session manager config\n    sessionConfig: {\n      expirationTimeMs: 1000 * 60 * 60, // 60 minutes (default is 15 min)\n    },\n  },\n  {\n    // authentication ui config - your customizations here\n    auth: {\n      sections: [\n        [{ type: \"email\" }],\n        [\n          { type: \"passkey\" },\n          { type: \"social\", authProviderId: \"google\", mode: \"popup\" },\n          { type: \"social\", authProviderId: \"facebook\", mode: \"popup\" },\n        ],\n        [\n          {\n            type: \"external_wallets\",\n            walletConnect: { projectId: \"your-project-id\" },\n          },\n        ],\n      ],\n      addPasskeyOnSignup: true,\n      showSignInText: true,\n    },\n  }\n);\n\nexport const queryClient = new QueryClient();\n```\n\n----------------------------------------\n\nTITLE: OTP Popup Component for React Native\nDESCRIPTION: This snippet shows the implementation of an OTP popup component in React Native. It handles the OTP verification process using the Account Kit SDK and includes UI elements for OTP input and submission.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/signer/authenticating-users/authenticating-with-otp.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback, useState } from \"react\";\nimport {\n  Modal,\n  Text,\n  TextInput,\n  Button,\n  SafeAreaView,\n  Alert,\n} from \"react-native\";\nimport { useAuthenticate } from \"@account-kit/react-native\";\n\nexport const OtpPopUp = ({\n  show,\n  completeAuth,\n  close,\n}: {\n  show: boolean;\n  completeAuth: () => void;\n  close: () => void;\n}) => {\n  const { authenticate } = useAuthenticate();\n  const [otpCode, setOtpCode] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n\n  // Authenticate a user using a bundle returned from a deep link\n  const handleUserOtp = useCallback(\n    (otpCode: string) => {\n      try {\n        setLoading(true);\n        authenticate({ otpCode, type: \"otp\" }); //<-- Pass the user's OTP code to the authenticate method using `otp` as the type value\n\n        completeAuth();\n      } catch (e) {\n        Alert.alert(\"Error verifying OTP Code. Check logs for more details.\");\n\n        console.log(\"Error verifying OTP CODE: \", e);\n      }\n    },\n    [authenticate]\n  );\n\n  return (\n    <Modal visible={show} style={{ paddingTop: 200 }}>\n      <SafeAreaView style={{ margin: 20 }}>\n        <Text style={{ fontSize: 16 }}>Enter OTP</Text>\n        <TextInput\n          style={{ fontSize: 20 }}\n          value={otpCode}\n          onChangeText={setOtpCode}\n          placeholder=\"Enter OTP\"\n        />\n        <Button\n          title={loading ? \"Loading\" : \"Submit OTP\"}\n          disabled={loading}\n          onPress={() => handleUserOtp(otpCode)}\n        />\n        <Button\n          title=\"Close\"\n          onPress={() => {\n            setLoading(false);\n            close();\n          }}\n        />\n      </SafeAreaView>\n    </Modal>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using buildUserOperationFromTxs with SmartAccountClient in TypeScript\nDESCRIPTION: Demonstrates how to use the buildUserOperationFromTxs function with a SmartAccountClient to create a UserOperation struct from multiple transactions, sign it, and send it to a bundler.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/buildUserOperationFromTxs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RpcTransactionRequest } from \"viem\";\nimport { smartAccountClient } from \"./smartAccountClient\";\n\nconst requests: RpcTransactionRequest[] = [\n{\nfrom, // ignored\nto,\ndata: encodeFunctionData({\n  abi: ContractABI.abi,\n  functionName: \"func\",\n  args: [arg1, arg2, ...],\n}),\n},\n{\nfrom, // ignored\nto,\ndata: encodeFunctionData({\n  abi: ContractABI.abi,\n  functionName: \"func\",\n  args: [arg1, arg2, ...],\n}),\n},\n];\nconst uoStruct = await smartAccountClient.buildUserOperationFromTxs({\nrequests,\n});\n\n// signUserOperation signs the above unsigned user operation struct built\n// using the account connected to the smart account client\nconst request = await smartAccountClient.signUserOperation({ uoStruct });\n\n// You can use the BundlerAction `sendRawUserOperation` (packages/core/src/actions/bundler/sendRawUserOperation.ts)\n// to send the signed user operation request to the bundler, requesting the bundler to send the signed uo to the\n// EntryPoint contract pointed at by the entryPoint address parameter\nconst entryPointAddress = client.account.getEntryPoint().address;\nconst uoHash = await smartAccountClient.sendRawUserOperation({\nrequest,\nentryPoint: entryPointAddress,\n});\n```\n\n----------------------------------------\n\nTITLE: User Authentication with Email\nDESCRIPTION: Demonstrates how to authenticate users using email, including initial authentication and handling redirect callbacks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/quickstart.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from \"./config\";\nimport { getSigner } from \"@account-kit/core\";\n\nconst signer = getSigner(config);\n\nif (!signer) {\n  // this can happen if your rendering this on the server\n  // the signer instance is only available on the client\n  throw new Error(\"Signer not found\");\n}\n\n// authenticate the user with email\nawait signer.authenticate({\n  type: \"email\",\n  email: \"user@email.com\",\n});\n\n// once the user has clicked on the email and been redirected back to your site\nconst bundle = new URLSearchParams(window.location.search).get(\"bundle\");\nif (!bundle) {\n  throw new Error(\"No bundle found in URL\");\n}\nawait signer.authenticate({ type: \"email\", bundle });\n```\n\n----------------------------------------\n\nTITLE: Importing useSigner Hook in TypeScript\nDESCRIPTION: Shows how to import the useSigner hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSigner } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login with MFA in React using Account Kit\nDESCRIPTION: This code snippet demonstrates how to implement social login authentication using the Account Kit React hook. It shows that no additional code is required to handle MFA, as it's automatically managed in the OAuth flow.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/mfa/social-login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Your social login implementation doesn't change\nconst { authenticate } = useAuthenticate();\n\n// For popup flow\nconst handleGoogleLogin = () => {\n  authenticate(\n    {\n      type: \"oauth\",\n      authProviderId: \"google\",\n      mode: \"popup\",\n    },\n    {\n      onSuccess: () => {\n        // Authentication successful!\n        // If MFA was required, it was handled automatically in the oauth flow\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyGasManagerMiddleware in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the alchemyGasManagerMiddleware from the @account-kit/infra package in a TypeScript project. It is a prerequisite for utilizing the middleware functionality elsewhere in the code. Requires the @account-kit/infra package to be installed.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyGasManagerMiddleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { alchemyGasManagerMiddleware } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Creating an RNAlchemySigner Instance\nDESCRIPTION: Demonstrates how to create a singleton instance of RNAlchemySigner with API key configuration and optional session settings. The example shows passing a client with connection details and customizing the session expiration time.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react-native-signer/functions/RNAlchemySigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RNAlchemySigner } from \"@account-kit/react-native-signer\";\n\nconst signer = RNAlchemySigner({\n  client: {\n    connection: {\n      apiKey: \"YOUR_API_KEY\",\n    },\n  },\n  // optional config to override default session manager configs\n  sessionConfig: {\n    expirationTimeMs: 1000 * 60 * 60, // 60 minutes\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Permissions in Plugin Install Data\nDESCRIPTION: This example shows how to include initial permissions for a session key when installing the Session Key Plugin. It uses the SessionKeyPermissionBuilder to generate the permissions data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionKeyPlugin = new SessionKeyPlugin()\nconst publicKey = \"0x...\"\nconst permissionsData = PermissionBuilder.create({}).getPermissionData()\n\nconst installData = sessionKeyPlugin.encodeInstallData({\n  plugin: sessionKeyPlugin.contractAddress,\n  config: {\n    keys: [{ publicKey, permissions: permissionsData }],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useBundlerClient Hook in TypeScript\nDESCRIPTION: Demonstrates how to use the useBundlerClient hook to get a bundler client instance based on the current Alchemy account configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useBundlerClient } from \"@account-kit/react\";\n\nconst bundlerClient = useBundlerClient();\n```\n\n----------------------------------------\n\nTITLE: Using getAddress with LocalAccountSigner in TypeScript\nDESCRIPTION: This example illustrates creating a `LocalAccountSigner` instance from a newly generated private key using `viem`'s `generatePrivateKey`. It then calls the asynchronous `getAddress` method on the signer instance to retrieve the associated account address. The method returns a Promise that resolves to the address as a hexadecimal string (`0x{string}`).\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/getAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\nconst address = await signer.getAddress();\n```\n\n----------------------------------------\n\nTITLE: Initiating Email OTP Authentication in Alchemy Signer\nDESCRIPTION: Initiates the Email One-Time Password (OTP) authentication flow by sending an OTP to the user's email. This is the first step in a multi-factor authentication process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nsigner.authenticate({\n  type: \"email\",\n  emailMode: \"otp\",\n  email: \"user@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: SmartAccountClient Type Definition\nDESCRIPTION: Custom viem client type for interacting with smart contract accounts, analogous to WalletClient for EOAs.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/client/smartAccountClient.ts:SmartAccountClient]\n```\n\n----------------------------------------\n\nTITLE: Getting All Current Owners of a Modular Account in TypeScript\nDESCRIPTION: This code shows how to fetch all current owners of a connected Modular Account using the readOwners method from the multiOwnerPluginActions extended SmartAccountClient.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/manage-ownership-mav1.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\n\n// owners is an array of the addresses of the account owners\nconst owners = await modularAccountClient.readOwners();\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Permissions for New Session Key in TypeScript\nDESCRIPTION: Demonstrates how to set initial permissions when adding a new session key using the PermissionsBuilder.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionKeyPlugin = new SessionKeyPlugin();\nconst addKeyData = sessionKeyPlugin.encodeAddSessionKeyData({\n  key: sessionKeyAddress,\n  permissions: new SessionKeyPermissionBuilder()\n    .setTimeRange({ validFrom: 0, validUntil: 1000 })\n    .build()\n});\n```\n\n----------------------------------------\n\nTITLE: Importing getDefaultMultiOwnerLightAccountFactoryAddress from @account-kit/smart-contracts\nDESCRIPTION: This code snippet shows how to import the getDefaultMultiOwnerLightAccountFactoryAddress utility method from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getDefaultMultiOwnerLightAccountFactoryAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultMultiOwnerLightAccountFactoryAddress } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Setting Required Paymaster Address Example\nDESCRIPTION: Demonstrates how to create a SessionKeyPermissionsBuilder instance and set a required paymaster address. The method returns the builder instance for method chaining.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setRequiredPaymaster.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setRequiredPaymaster(\"0x1234\");\n```\n\n----------------------------------------\n\nTITLE: EntryPointDef Interface Definition\nDESCRIPTION: Interface for EntryPoint functions handling user operation packing and hash generation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/entrypoint/types.ts:EntryPointDef]\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authentication with Google Using AlchemySignerWebClient\nDESCRIPTION: Example showing how to create an AlchemySignerWebClient instance and use the oauthWithRedirect method to authenticate with Google. This demonstrates configuring the client with API key and iframe settings, then initiating the OAuth flow with redirect mode.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/oauthWithRedirect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nawait client.oauthWithRedirect({\n  type: \"oauth\",\n  authProviderId: \"google\",\n  mode: \"redirect\",\n  redirectUrl: \"/\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating LocalAccountSigner Instance with Private Key in TypeScript\nDESCRIPTION: This example demonstrates how to create a LocalAccountSigner instance using a generated private key. It imports necessary functions and creates a signer using the mnemonicToAccountSigner method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/privateKeyToAccountSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\n```\n\n----------------------------------------\n\nTITLE: Using generateNewKey Method with SessionKeySigner\nDESCRIPTION: Demonstrates how to instantiate a SessionKeySigner and generate a new session key using the generateNewKey method. The method returns the public address of the newly generated key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/generateNewKey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst signer = new SessionKeySigner();\nconst newSessionKey = signer.generateNewKey();\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Status with useSignerStatus Hook\nDESCRIPTION: Example of using the useSignerStatus hook to determine if the user is authenticated. This can be used to conditionally render UI components based on the user's authentication state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/email-magic-link.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n\n----------------------------------------\n\nTITLE: Using createAccount Method with AlchemySignerWebClient in TypeScript\nDESCRIPTION: Demonstrates how to initialize an AlchemySignerWebClient instance and use the createAccount method to create a new account with email authentication.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/createAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.createAccount({\n  type: \"email\",\n  email: \"you@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining SmartAccountSigner Interface in TypeScript\nDESCRIPTION: Defines the SmartAccountSigner interface representing a signer for smart accounts. It provides methods to get the signer's address, sign messages, and sign typed data. Often referred to as the Owner of the account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/signer/types.ts:SmartAccountSigner]\n```\n\n----------------------------------------\n\nTITLE: Using watchConnection to Log Connection Changes in TypeScript\nDESCRIPTION: This snippet illustrates the usage of the `watchConnection` function. It requires an `AlchemyAccountsConfig` object (`config`) and returns a function that accepts an `onChange` callback (here, `console.log`). This callback is invoked whenever the connection changes, and the returned function can be called to unsubscribe from further updates.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchConnection.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { watchConnection } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchConnection(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Importing OauthCancelledError from Account Kit\nDESCRIPTION: Shows how to import the OauthCancelledError class from the Account Kit signer module. This error class extends BaseError and is used to handle OAuth flow cancellation scenarios.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/OauthCancelledError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OauthCancelledError } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing MultiOwnerLightAccountClientActions in TypeScript\nDESCRIPTION: Shows how to import the multiOwnerLightAccountClientActions method from the smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/multiOwnerLightAccountClientActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerLightAccountClientActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Adding ERC20 Token Spend Limit Example\nDESCRIPTION: Demonstrates how to create a new SessionKeyPermissionsBuilder instance and add an ERC20 token spend limit. The example shows setting a token address, spend limit amount, and refresh interval.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addErc20TokenSpendLimit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.addErc20TokenSpendLimit({\n  tokenAddress: \"0x1234\",\n  spendLimit: 1000000000000000000n,\n  refreshInterval: 3600,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Magic Link in UI Components with Account Kit\nDESCRIPTION: This snippet demonstrates how to configure Email Magic Link authentication in the application config using AlchemyAccountsUIConfig. It includes optional customizations for button labels and input placeholders.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/email-magic-link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        {\n          type: \"email\",\n          emailMode: \"magicLink\",\n\n          // Optional customizations:\n          buttonLabel: \"Continue with Email\",\n          placeholder: \"Enter your email address\",\n        },\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Light Account Implementation in TypeScript\nDESCRIPTION: Checks the implementation address of a Light Account to determine if it needs upgrading, is already upgraded, or is a new account. Different actions are taken based on the implementation status.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"docs/shared/infra/client\";\nconst impl = await client.account.getImplementationAddress();\n\n// implementation slot exists and is a deployed modular account. this user has a modular account at the light account address. no need to upgrade.\nif (impl == \"ModularAccountImpl\") {\n  // done\n}\n\n// implementation slot exists and is a deployed light account. this user has a light account at the light account address. we need to initiate an upgrade for the user.\nelse if (impl == \"LightAccountImpl\") {\n  // go to step A\n}\n\n// implementation slot is empty\nelse if (impl == NullAddress) {\n  // account is not deployed and has assets at the counterfactual\n  const balance = await client.getBalance({ address: client.account.address });\n  if (balance) {\n    // go to step A\n  }\n  // account does not exist, new user!\n  else {\n    // go to step B\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Passkey Authentication Type for Account Kit (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript type definition for specifying 'passkey' as an authentication method within the Account Kit configuration. This type is used within the `auth.sections` array of the `AlchemyAccountsUIConfig`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/passkey-login.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts twoslash\ntype PasskeyAuthType = {\n  type: \"passkey\";\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using getAccount to retrieve an account in TypeScript\nDESCRIPTION: Demonstrates how to use the getAccount function to retrieve an account of type 'LightAccount' using a predefined configuration. It shows the function call and its parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccount } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst { account, status } = getAccount(\n  {\n    type: \"LightAccount\",\n  },\n  config\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication Header Text in Account Kit\nDESCRIPTION: This snippet shows how to modify the authentication modal header text by configuring the auth options when calling createConfig. It demonstrates how to replace the default 'Sign in' text with custom text and hide the default header.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/customization/theme.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// @jsx: react-jsx\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const confg = createConfig(\n  {\n    transport: alchemy({ apiKey: \"YOUR_KEY\" }),\n    chain: sepolia,\n  },\n  {\n    auth: {\n      header: \"Sign in with your account\", // [!code ++]\n      hideSignInText: true, // [!code ++]\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing 7702 Gas Estimator with Smart Account Client\nDESCRIPTION: Demonstrates how to create a Smart Account Client using the default7702GasEstimator along with other configurations for a modular account. The function creates a 7702-compatible smart account client with custom gas estimation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/default7702GasEstimator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  default7702GasEstimator,\n  default7702UserOpSigner,\n  createSmartAccountClient,\n  type SmartAccountClient,\n} from \"@aa-sdk/core\";\nimport {\n  createModularAccountV2,\n  type CreateModularAccountV2ClientParams,\n} from \"@account-kit/smart-contracts\";\n\nasync function createSMA7702AccountClient(\n  config: CreateModularAccountV2ClientParams\n): Promise<SmartAccountClient> {\n  const sma7702Account = await createModularAccountV2({\n    ...config,\n    mode: \"7702\",\n  });\n\n  return createSmartAccountClient({\n    account: sma7702Account,\n    gasEstimator: default7702GasEstimator(config.gasEstimator),\n    signUserOperation: default7702UserOpSigner(config.signUserOperation),\n    ...config,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Magic Link Authentication with MFA\nDESCRIPTION: Handle magic link authentication with TOTP MFA, including error handling for MFA requirements.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MfaRequiredError } from \"@account-kit/signer\";\nimport { signer } from \"./signer\";\n\nconst promptUserForCode = async () => {\n  // Prompt user for TOTP code\n  // const totpCode = await promptUserForCode();\n\n  return \"123456\";\n};\n\ntry {\n  await signer.authenticate({\n    type: \"email\",\n    email: \"user@mail.com\",\n    emailMode: \"magicLink\",\n  });\n} catch (err) {\n  if (err instanceof MfaRequiredError) {\n    // Prompt user for TOTP code\n    const totpCode = await promptUserForCode();\n\n    const { multiFactorId } = err.multiFactors[0];\n    await signer.authenticate({\n      type: \"email\",\n      emailMode: \"magicLink\",\n      email: \"user@mail.com\",\n      multiFactors: [\n        {\n          multiFactorId,\n          multiFactorCode: totpCode,\n        },\n      ],\n    });\n  } else {\n    // handle other errors\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using convertChainIdToCoinType with Sepolia Chain in TypeScript\nDESCRIPTION: Demonstrates how to use the convertChainIdToCoinType function with the Sepolia testnet chain ID from the viem/chains package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/convertChainIdToCoinType.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convertChainIdToCoinType } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst coinType = convertChainIdToCoinType(sepolia.id);\n```\n\n----------------------------------------\n\nTITLE: Mapping Coin Types to Chain IDs with aa-sdk in TypeScript\nDESCRIPTION: This snippet illustrates the process of converting a chain ID to a coin type, and then back to a chain ID using the aa-sdk/core methods. It first imports both convertChainIdToCoinType and convertCoinTypeToChainId functions, along with a chain constant from viem/chains. The example demonstrates how to use these functions in combination to perform bidirectional mapping, accepting and returning numbers as parameters and results. Dependencies include the @aa-sdk/core package and viem/chains, and the functions are designed for compatibility with EVM chain identifiers.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/convertCoinTypeToChainId.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  convertChainIdToCoinType,\n  convertCoinTypeToChainId,\n} from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst coinType = convertChainIdToCoinType(sepolia.id);\nconst chainId = convertCoinTypeToChainId(coinType);\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages with Package Managers\nDESCRIPTION: Commands to install the required @account-kit packages using either yarn or npm package managers. Prerequisites include TypeScript 5 and viem 2.20.0.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/smart-contracts\nyarn add @account-kit/infra\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @account-kit/smart-contracts\nnpm install @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Using useUser Hook to Access User Information in React\nDESCRIPTION: Example of how to use the useUser hook to access the current user's information, including their address and account type. This hook is ideal for checking if a user is logged in regardless of the account type (EOA or SCA).\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/react-hooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useUser } from \"@account-kit/react\";\n\nfunction MyComponent() {\n  const user = useUser();\n\n  if (!user) {\n    return <div>Please log in</div>;\n  }\n\n  return (\n    <div>\n      <p>User address: {user.address}</p>\n      <p>Account type: {user.type}</p> {/* \"eoa\" or \"sca\" */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using toRecord to create a record of addresses by chain ID in TypeScript\nDESCRIPTION: Demonstrates how to use the toRecord function to create an object where chain IDs are keys and addresses are values. It imports necessary dependencies and uses the sepolia and mainnet chains as examples.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/toRecord.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toRecord } from \"@aa-sdk/core\";\nimport { sepolia, mainnet } from \"viem/chains\";\n\nconst addressesByChain = toRecord([sepolia, mainnet], \"id\", () => \"0x...\"); // { [sepolia.id]: \"0x...\", [mainnet.id]: \"0x...\" }\n```\n\n----------------------------------------\n\nTITLE: Using useAuthModal Hook in React Component\nDESCRIPTION: Demonstrates how to use the useAuthModal hook within a React component to create a login button that opens the Auth Modal.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAuthModal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthModal } from \"@account-kit/react\";\n\nconst ComponentWithAuthModal = () => {\n  const { openAuthModal } = useAuthModal();\n\n  return (\n    <div>\n      <button onClick={openAuthModal}>Login</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using getMfaStatus with AlchemyWebSigner\nDESCRIPTION: Demonstrates initializing an AlchemyWebSigner instance and checking the MFA status. The example also shows conditional handling based on the MFA status.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getMfaStatus.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst mfaStatus = signer.getMfaStatus();\nif (mfaStatus === AlchemyMfaStatus.REQUIRED) {\n  // Handle MFA requirement\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Smart Account Client with accountLoupeActions in TypeScript\nDESCRIPTION: Demonstrates how to create a smart account client and extend it with accountLoupeActions. This enables the client to perform account loupe operations like querying execution configurations and installed plugins.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/accountLoupeActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accountLoupeActions } from \"@account-kit/smart-contracts\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst client = createSmartAccountClient(...).extend(accountLoupeActions);\n```\n\n----------------------------------------\n\nTITLE: Using the useConnect Hook with Optional Callbacks\nDESCRIPTION: Demonstrates how to use the useConnect hook to connect to an EOA, with optional success and error callbacks. Returns connectors and connect function that can be used to initiate a connection.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useConnect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnect } from \"@account-kit/react\";\n\nconst { connectors, connect } = useConnect({\n  // these are optional\n  onSuccess: () => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Coin Type and Chain ID Conversion Functions in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the convertCoinTypeToChainId function from the @aa-sdk/core package. This import enables developers to access the conversion function used to map coin types to their corresponding chain IDs, following ENSIP specifications. No additional dependencies are required beyond the aa-sdk/core package, and the function expects a numeric coin type as input.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/convertCoinTypeToChainId.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { convertCoinTypeToChainId } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using defaultFeeEstimator with createSmartAccountClient (TypeScript)\nDESCRIPTION: This example demonstrates how to initialize a `SmartAccountClient` using `createSmartAccountClient` and configure it to use the `defaultFeeEstimator`. The `defaultFeeEstimator` function is called with a `BundlerClient` instance (created via `createBundlerClient`) and returns a middleware function (`ClientMiddlewareFn`). This middleware is assigned to the `feeEstimator` option, enabling the client to automatically estimate gas fees (max fee per gas and max priority fee per gas) for transactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/defaultFeeEstimator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSmartAccountClient, defaultFeeEstimator, createBundlerClient } from \"@aa-sdk/core\";\n\nconst bundlerClient = createBundlerClient(...);\n\n// NOTE: this is already provided by the smart account client\nconst client = createSmartAccountClient({\nfeeEstimator: defaultFeeEstimator(bundlerClient),\n...otherParams\n});\n```\n\n----------------------------------------\n\nTITLE: Using getAddress Method with SessionKeySigner in TypeScript\nDESCRIPTION: Demonstrates how to create a SessionKeySigner instance and use the getAddress method to retrieve the session key address asynchronously.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/getAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst signer = new SessionKeySigner();\nconst sessionKeyAddress = await signer.getAddress();\n```\n\n----------------------------------------\n\nTITLE: MultiOwnerLightAccount v2.0.0 Contract Addresses\nDESCRIPTION: Factory and implementation addresses for MultiOwnerLightAccount v2.0.0 smart contracts deployed across multiple blockchain networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nFactory: 0x000000000019d2Ee9F2729A65AfE20bb0020AefC\nImplementation: 0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D\n```\n\n----------------------------------------\n\nTITLE: Defining ClientMiddlewareFn Type in TypeScript\nDESCRIPTION: Defines the ClientMiddlewareFn type that represents a middleware function that processes a UserOperationStruct. Each middleware retrieves or computes data to populate the user operation before passing it to the next middleware in the pipeline.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/middleware/types.ts:ClientMiddlewareFn]\n```\n\n----------------------------------------\n\nTITLE: Using WalletClientSigner with Viem in TypeScript\nDESCRIPTION: This example demonstrates how to create a wallet client using Viem and initialize a WalletClientSigner. It includes importing necessary dependencies, creating a wallet client, and instantiating the signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/WalletClientSigner/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\nimport { createWalletClient, custom } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n});\n\nconst signer = new WalletClientSigner(client, \"wallet\");\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for MFA Verification in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package to access MFA verification functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/verifyMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing defaultLightAccountVersion from Smart Contracts Package\nDESCRIPTION: Shows how to import the defaultLightAccountVersion function from the @account-kit/smart-contracts package. This function is used to retrieve the default version for a specified light account type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/defaultLightAccountVersion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultLightAccountVersion } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Embedded Authentication with AuthCard Component in React\nDESCRIPTION: This snippet demonstrates how to embed an authentication card directly in a React page using the AuthCard component from Account Kit. The authentication UI is contained within a styled div element with flexbox layout and rounded borders.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/shared/embedded-auth-example.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { AuthCard } from \"@account-kit/react\";\n\nexport default function MyLoginPage() {\n  return (\n    <div className=\"flex flex-row p-4 bg-white border border-gray-200 rounded-lg\">\n      <AuthCard />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing @account-kit/react Package in Markdown\nDESCRIPTION: This code snippet demonstrates the package name for @account-kit/react, which is used for building Embedded Accounts in React applications. It provides hooks, components, and utilities for state management, user authentication, and smart account interactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# account-kit/react\n```\n\n----------------------------------------\n\nTITLE: Importing getChain from Account Kit - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the getChain method from the @account-kit/core package in TypeScript. The getChain function retrieves the currently active blockchain chain based on the provided AlchemyAccountsConfig object. It requires the '@account-kit/core' library as a dependency, and the primary input is a config object which encapsulates account settings. The return value is a Chain instance representing the current active chain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getChain } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Status with useSignerStatus Hook (React)\nDESCRIPTION: This snippet demonstrates using the `useSignerStatus` hook from `@account-kit/react` to check if a user is currently authenticated and connected. The `isConnected` boolean value returned by the hook can be used to conditionally render UI elements based on the user's authentication state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/passkey-login.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR for Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Server Side Rendering for Account Kit by setting 'ssr: true' and making the config a function for request-based isolation of the account state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/ssr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const config = () =>\n  createConfig({\n    // required\n    transport: alchemy({ rpcUrl: \"/api/rpc\" }),\n    chain: sepolia,\n    ssr: true, // [!code ++]\n  });\n```\n\n----------------------------------------\n\nTITLE: Customizing Border Radius in Account Kit\nDESCRIPTION: This snippet shows how to customize the border radius size for Account Kit components by setting the borderRadius field in the withAccountKitUi function. The example changes the border radius to 'md' (16px).\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/customization/theme.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAccountKitUi } from \"@account-kit/react/tailwind\";\n\nexport const tailwindConfig = withAccountKitUi(\n  {\n    content: [],\n    // your tailwind config\n  },\n  {\n    borderRadius: \"md\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyGasManagerMiddleware in TypeScript\nDESCRIPTION: Shows how to import the alchemyGasManagerMiddleware method from the @account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyGasManagerMiddleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemyGasManagerMiddleware } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing EthersProviderAdapter from @aa-sdk/ethers in TypeScript\nDESCRIPTION: This code snippet shows how to import the EthersProviderAdapter from the @aa-sdk/ethers package. The EthersProviderAdapter is used to connect to smart contract accounts and create account signers.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/connectToAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EthersProviderAdapter } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Registering Global Shims in React Native App Entry Point\nDESCRIPTION: React Native imports needed at the top of the main application file to ensure global shims are available for crypto libraries.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"node-libs-react-native/globals.js\";\nimport \"react-native-get-random-values\";\n\n// rest of App.tsx\n```\n\n----------------------------------------\n\nTITLE: Upgrading Light Account to Modular Account v2 in TypeScript\nDESCRIPTION: Prepares and executes the upgrade from a Light Account to a Modular Account v2, including creating a new client for the upgraded account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { createMAV2Account, ...upgradeToData } = await getMAV2UpgradeToData(\n  lightAccountclient,\n  { account: lightAccountClient.account }\n);\n\nawait lightAccountClient.upgradeAccount({\n  upgradeTo: upgradeToData,\n  waitForTx: true,\n});\n\nconst maV2Client = createSmartAccountClient({\n  client: createBundlerClient({\n    chain: yourchain,\n    transport: yourTransport,\n  }),\n  account: await createMAV2Account(),\n});\n```\n\n----------------------------------------\n\nTITLE: Using parseFactoryAddressFromAccountInitCode to Extract Factory Data in TypeScript\nDESCRIPTION: This code snippet shows the usage of the `parseFactoryAddressFromAccountInitCode` function. It takes a hexadecimal string representing the account initialization code (`initCode`) as input (e.g., \"0xAddressCalldata\"). The function returns a tuple containing the factory address (`Address`) and the factory calldata (`Hex`), which are then destructured into the `address` and `calldata` variables respectively. This is useful for separating the factory's deployment information from the initialization data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/parseFactoryAddressFromAccountInitCode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseFactoryAddressFromAccountInitCode } from \"@aa-sdk/core\";\n\nconst [address, calldata] =\n  parseFactoryAddressFromAccountInitCode(\"0xAddressCalldata\");\n```\n\n----------------------------------------\n\nTITLE: Using Logger.error Method to Log Error Messages in TypeScript\nDESCRIPTION: This example demonstrates how to use the Logger.error method to log an error message. The method logs the message to the console if the logging condition is met.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/error.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.error(\"An error occurred while processing the request\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Addition with the useAddPasskey Hook in React\nDESCRIPTION: This code shows how to implement a button that allows users to add a passkey to their account after they've already authenticated. It uses the useAddPasskey hook from Account Kit React which provides the addPasskey function and isAddingPasskey state to manage the UI during the passkey creation process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/add-passkey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAddPasskey } from \"@account-kit/react\";\n\nexport default function MyComponent() {\n  const { addPasskey, isAddingPasskey } = useAddPasskey();\n\n  return (\n    <button\n      disabled={isAddingPasskey}\n      onClick={() => {\n        addPasskey();\n      }}\n    >\n      Add Passkey\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using waitForUserOperationTransaction with SmartAccountClient in TypeScript\nDESCRIPTION: Demonstrates how to use the `waitForUserOperationTransaction` method, typically available on a `SmartAccountClient` instance created via `@aa-sdk/core`. It requires the transaction hash (`hash`) and optionally allows configuration of retry attempts (`retries`). The function polls for the transaction receipt and returns the transaction hash upon confirmation. Dependencies include `@aa-sdk/core` and a configured `SmartAccountClient`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/waitForUserOperationTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with waitForUserOperationTransaction\nconst client = createSmartAccountClient(...);\nconst result = await client.waitForUserOperationTransaction({\nhash: \"0x...\",\nretries: {...} // optional param to configure the retry amounts\n});\n```\n\n----------------------------------------\n\nTITLE: Using watchAccount for Account Monitoring\nDESCRIPTION: Demonstrates how to use watchAccount to monitor changes to a LightAccount type. Requires a pre-configured config object and outputs changes to console.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchAccount } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchAccount(\"LightAccount\", config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing SessionKeySigner in TypeScript\nDESCRIPTION: Demonstrates how to create a new instance of SessionKeySigner. The constructor can accept a SessionKeySignerConfig object to customize the signer's behavior, including setting the signerType, storageKey, and storageType.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst signer = new SessionKeySigner();\n```\n\n----------------------------------------\n\nTITLE: Importing accountLoupeActions from Smart Contracts Package in TypeScript\nDESCRIPTION: Shows how to import the accountLoupeActions utility from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/accountLoupeActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accountLoupeActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Implementing MFA Verification in React\nDESCRIPTION: Handles the second step of MFA verification using TOTP codes from authenticator apps. Uses useSigner hook to validate multi-factor authentication.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/mfa/email-otp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useSignerStatus,\n  useSigner,\n  useAuthenticate,\n} from \"@account-kit/react\";\nimport { AlchemySignerStatus } from \"@account-kit/signer\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction MfaVerification() {\n  const signer = useSigner();\n  const { status } = useSignerStatus();\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  // Called when user enters their TOTP code from authenticator app\n  const handleVerify = async (totpCode: string) => {\n    try {\n      setIsVerifying(true);\n      await signer?.validateMultiFactors({\n        multiFactorCode: totpCode,\n      });\n      // After successful MFA validation, the user will be authenticated\n      // and the onSuccess callback from the initial authenticate call will fire\n    } catch (error) {\n      console.error(\"MFA verification failed:\", error);\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  // Example of prompting user when MFA verification is needed\n  useEffect(() => {\n    if (status === AlchemySignerStatus.AWAITING_MFA_AUTH) {\n      // Show TOTP input UI to the user\n    }\n  }, [status]);\n\n  return (\n    // Your TOTP input UI\n    <div>{/* TOTP input component */}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Shim Dependencies\nDESCRIPTION: Commands to install necessary shim dependencies for using crypto libraries in React Native.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save node-libs-react-native crypto-browserify stream-browserify react-native-get-random-values\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add node-libs-react-native crypto-browserify stream-browserify react-native-get-random-values\n```\n\n----------------------------------------\n\nTITLE: Removing TOTP Factor\nDESCRIPTION: Remove a specified TOTP factor using its multiFactorId.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nawait signer.removeMfa({\n  multiFactorIds: [multiFactorId],\n});\n```\n\n----------------------------------------\n\nTITLE: Using getAddress with AccountSigner in aa-sdk/ethers (TypeScript)\nDESCRIPTION: Demonstrates creating a `LightAccount` using `@account-kit/smart-contracts`, adapting it with `EthersProviderAdapter` and `AccountSigner` from `@aa-sdk/ethers`, and then calling the asynchronous `getAddress` method to retrieve the associated smart account address. This example requires dependencies like `@aa-sdk/core`, `@account-kit/infra`, `@account-kit/smart-contracts`, and `viem`. The method returns a Promise resolving to the account's address string.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/getAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n\nconst address = await signer.getAddress();\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie-based State Hydration\nDESCRIPTION: Example of implementing state hydration using cookies in an SSR context. Shows how to extract initial state from cookies and pass it to the hydrate method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/ssr.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookieToInitialState, hydrate } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst initialState = cookieToInitialState(config, document.cookie);\nconst { onMount } = hydrate(config, initialState);\n\nif (typeof window !== \"undefined\") {\n  onMount();\n}\n```\n\n----------------------------------------\n\nTITLE: Using getAuthDetails Method with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance with client configuration and then call the getAuthDetails method to retrieve the current authenticated user. The method will throw an error if no user is logged in.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getAuthDetails.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\n// throws if not logged in\nconst user = await signer.getAuthDetails();\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Use Case Navigation Grid with SmallTileRow Components\nDESCRIPTION: JSX code that creates a grid of navigation tiles for advanced use cases. Each tile represents a different integration option such as React Native, other JS frameworks, infrastructure, smart contracts, and signer implementations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-8\">\n  <SmallTileRow\n    icon={<ReactNativeIcon height={20} width={20} />}\n    title=\"React Native\"\n    description=\"Mobile apps with React Native\"\n    href=\"/react-native/overview\"\n  />\n  <SmallTileRow\n    icon={<DotsIcon />}\n    title=\"Other JS Frameworks\"\n    description=\"Svelte, Vue, etc.\"\n    href=\"/core/overview\"\n  />\n  <SmallTileRow\n    icon={<InfraIcon />}\n    title=\"Infra\"\n    description=\"Integrate with Alchemy's infra\"\n    href=\"/infra/overview\"\n  />\n  <SmallTileRow\n    icon={<SmartContractIcon />}\n    title=\"Smart Contracts\"\n    description=\"Use Alchemy's Smart Contracts\"\n    href=\"/smart-contracts/overview\"\n  />\n  <SmallTileRow\n    icon={<SignerIcon />}\n    title=\"Signer\"\n    description=\"Use Alchemy's Signer\"\n    href=\"/signer/overview\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Packages for React Native\nDESCRIPTION: Commands for installing the Account Kit packages for React Native, including react-native, smart-contracts, and infra modules.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -s @account-kit/react-native @account-kit/smart-contracts @account-kit/infra\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/react-native @account-kit/smart-contracts @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Importing buildUserOperation Function in TypeScript\nDESCRIPTION: Shows how to import the buildUserOperation function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/buildUserOperation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildUserOperation } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing useSendUserOperation in TypeScript\nDESCRIPTION: Shows how to import the useSendUserOperation hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSendUserOperation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSendUserOperation } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Split RPC Setup for Bundler and Node in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a split RPC configuration using viem's createPublicClient. It defines separate URLs for bundler-specific methods and fallback RPC calls, allowing for flexible routing of different types of requests.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/bundlers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { split } from \"@aa-sdk/core\";\nimport { createPublicClient, http } from \"viem\";\n\nconst bundlerMethods = [\n  \"eth_sendUserOperation\",\n  \"eth_estimateUserOperationGas\",\n  \"eth_getUserOperationReceipt\",\n  \"eth_getUserOperationByHash\",\n  \"eth_supportedEntryPoints\",\n];\n\nconst clientWithSplit = createPublicClient({\n  transport: split({\n    overrides: [\n      {\n        methods: bundlerMethods,\n        transport: http(\"BUNDLER_RPC_URL\"),\n      },\n    ],\n    fallback: http(\"OTHER_RPC_URL\"),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component from Account Kit React\nDESCRIPTION: This code snippet shows how to import the Dialog component from the @account-kit/react package. The Dialog component is used to render a modal dialog in React applications.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/components/Dialog.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dialog } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Structure\nDESCRIPTION: Documentation structure explaining Account Kit integration options for non-React JavaScript frameworks, including using @account-kit/core or lower-level SDKs like infra, signer, and smart-contracts packages.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Other JS Frameworks\ndescription: How to use Account Kit with other JS Frameworks\n---\n\n# Other JS Frameworks\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner from aa-sdk/ethers in TypeScript\nDESCRIPTION: This snippet shows how to import the AccountSigner class from the @aa-sdk/ethers package, enabling its use in TypeScript projects. This is a prerequisite step for utilizing account abstraction features, such as message signing, in your application.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/signMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Creating an AccountSigner instance with EthersProviderAdapter (TypeScript)\nDESCRIPTION: This example demonstrates how to instantiate an `AccountSigner`. It first requires creating a smart contract account (e.g., `LightAccount`) using `createLightAccount` with a transport, chain, and owner signer. Then, an `EthersProviderAdapter` is initialized, and finally, the `AccountSigner` is constructed by passing the provider and the created account. This setup allows interacting with the blockchain via the smart contract account using ethers.js conventions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR in Account Kit Core\nDESCRIPTION: Example showing how to create a configuration for Account Kit with SSR enabled. Sets up the transport layer using Alchemy and configures the Sepolia chain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/ssr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }),\n  chain: sepolia,\n  ssr: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Sending OTP to User's Email in React Native\nDESCRIPTION: This component demonstrates how to send a one-time password to a user's email using the useAuthenticate hook from Account Kit. It includes a form for the user to enter their email address and handles sending the authentication request.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/signer/authenticating-users/authenticating-with-otp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react-native\";\nimport React, { useState } from \"react\";\nimport { Alert, View, Text, TextInput, Button, Pressable } from \"react-native\";\n\nfunction SignInWithOtp() {\n  const { authenticate } = useAuthenticate();\n  const [email, setEmail] = useState(\"\");\n\n  const handleUserSignInWithOtp = () => {\n    try {\n      authenticate({\n        email,\n        type: \"email\",\n      });\n\n      // OTP sent to the user's email. Prompt the user to enter the OTP into your app.\n    } catch (e) {\n      Alert.alert(\"Error sending OTP Code. Check logs for more details.\");\n\n      console.log(\"Error seding OTP CODE: \", e);\n    }\n  };\n\n  return (\n    <View>\n      <Text>Enter Your Email to Sign In</Text>\n      <View>\n        <TextInput\n          value={email}\n          onChangeText={(val) => setEmail(val.toLowerCase())}\n          placeholder=\"john@doe.com\"\n        />\n        <Pressable onPress={handleUserSignInWithOtp}>\n          {({ pressed }) => (\n            <View\n              style={[\n                {\n                  opacity: pressed ? 0.5 : 1,\n                  transform: [\n                    {\n                      scale: pressed ? 0.98 : 1,\n                    },\n                  ],\n                },\n              ]}\n            >\n              <Text>Sign In</Text>\n            </View>\n          )}\n        </Pressable>\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using addContractAddressAccessEntry Method\nDESCRIPTION: Demonstrates how to create a SessionKeyPermissionsBuilder instance and add a contract access entry. The method accepts parameters for contract address, list inclusion flag, and selector checking options.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addContractAddressAccessEntry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.addContractAddressAccessEntry({\n  contractAddress: \"0x1234\",\n  isOnList: true,\n  checkSelectors: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using getMSCAUpgradeToData function in TypeScript\nDESCRIPTION: This example demonstrates how to use the getMSCAUpgradeToData function with a smart account client. It creates a client using createLightAccountClient and then calls getMSCAUpgradeToData with the client and an empty object as arguments.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getMSCAUpgradeToData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountClient, getMSCAUpgradeToData } from \"@account-kit/smart-contracts\";\n\nconst client = createLightAccountClient(...);\nconst upgradeData = await getMSCAUpgradeToData(client, {});\n```\n\n----------------------------------------\n\nTITLE: Importing createAlchemyPublicRpcClient in TypeScript\nDESCRIPTION: Shows how to import the createAlchemyPublicRpcClient method from the @account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/createAlchemyPublicRpcClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAlchemyPublicRpcClient } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing TraceHeader from @aa-sdk/core in TypeScript\nDESCRIPTION: This snippet shows how to import the TraceHeader class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/TraceHeader/withEvent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TraceHeader } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Defining MultiOwnerPlugin Methods in Solidity\nDESCRIPTION: Solidity code snippet defining the core methods of the MultiOwnerPlugin for updating and retrieving account owners.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/manage-ownership-mav1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n/// @notice Update owners of the account. Owners can update owners.\n/// @param ownersToAdd The address array of owners to be added.\n/// @param ownersToRemove The address array of owners to be removed.\nfunction updateOwners(address[] memory ownersToAdd, address[] memory ownersToRemove) external;\n\n/// @notice Get the owners of `account`.\n/// @param account The account to get the owners of.\n/// @return The addresses of the owners of the account.\nfunction ownersOf(address account) external view returns (address[] memory);\n```\n\n----------------------------------------\n\nTITLE: Using setRequiredPaymaster Method in TypeScript\nDESCRIPTION: Demonstrates how to use the setRequiredPaymaster method to set a specific paymaster address. The method accepts an address string and returns the builder instance for method chaining.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setRequiredPaymaster.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setRequiredPaymaster(\"0x1234\");\n```\n\n----------------------------------------\n\nTITLE: Importing dropAndReplaceUserOperation with aa-sdk in TypeScript\nDESCRIPTION: Demonstrates how to import the dropAndReplaceUserOperation function from the @aa-sdk/core package. This method is necessary for clients intending to drop and replace user operations within the Alchemy platform's Account Abstraction SDK. Ensure the @aa-sdk/core package is installed as a dependency.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/dropAndReplaceUserOperation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dropAndReplaceUserOperation } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using watchSmartAccountClient to Monitor Changes in TypeScript\nDESCRIPTION: This example illustrates how to call the `watchSmartAccountClient` function. It requires parameters to identify the smart account client (e.g., `{ type: \"LightAccount\" }`) and a configuration object (`config`). A callback function (`console.log` in this case) is provided, which gets executed whenever the client changes. An external `config` object, presumably created using `createConfig`, is assumed to be imported.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchSmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchSmartAccountClient({ type: \"LightAccount\" }, config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Submitting TOTP Code and Completing Magic Link Authentication in React\nDESCRIPTION: This snippet demonstrates how to submit the TOTP code along with the multiFactorId to complete the authentication process. It uses the authenticate function to verify the TOTP code and finalize the magic link authentication.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/mfa/email-magic-link.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Continuing from the previous component...\n\nfunction MagicLinkWithMFA() {\n  const { authenticate } = useAuthenticate();\n\n  // Prompt the user to enter their TOTP code (from their authenticator app)\n  // Hardcoded for now, but in a real app you'd get this from the user\n  const totpCode = \"123456\";\n  const multiFactorId = \"123456\"; // This is the multiFactorId from the first step\n\n  // Step 2: Submit the TOTP code with multiFactorId to complete the flow\n  const handleMfaSubmission = (email: string) => {\n    authenticate(\n      {\n        type: \"email\",\n        emailMode: \"magicLink\",\n        email,\n        // The multiFactors array tells the authentication system which\n        // factor to verify and what code to use\n        multiFactors: [\n          {\n            multiFactorId,\n            multiFactorCode: totpCode,\n          },\n        ],\n      },\n      {\n        onSuccess: () => {\n          // This callback will only fire after the user has clicked the magic link and the email has been verified\n        },\n        onError: (error) => {\n          // Handle error\n        },\n      }\n    );\n  };\n\n  return <div>{/* Your UI components here */}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using withEvent method to create a new TraceHeader in TypeScript\nDESCRIPTION: This example demonstrates how to use the withEvent method to create a new TraceHeader with an added event. It first creates or retrieves an existing TraceHeader, then calls withEvent to add a new event.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/TraceHeader/withEvent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst traceHeader =\n  TraceHeader.fromTraceHeader(headers) || TraceHeader.default();\nconst newTraceHeader = traceHeader.withEvent(\"newEvent\");\n```\n\n----------------------------------------\n\nTITLE: Importing noopMiddleware from AA-SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the noopMiddleware function from the @aa-sdk/core module. The noopMiddleware is a function that acts as a no-operation middleware, passing through arguments without modification.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/noopMiddleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { noopMiddleware } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Defining User Type in TypeScript\nDESCRIPTION: Defines the User type for Embedded Account details via Alchemy Signer. It includes properties such as email, orgId, userId, address, and credentialId.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../account-kit/signer/src/client/types.ts:User]\n```\n\n----------------------------------------\n\nTITLE: Installing expo-build-properties\nDESCRIPTION: Command to install expo-build-properties for setting the iOS minimum deployment target.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-build-properties\n```\n\n----------------------------------------\n\nTITLE: Using signTypedData Method in TypeScript\nDESCRIPTION: Demonstrates how to use the signTypedData method of the LocalAccountSigner class. It includes generating a private key, creating a signer, and signing typed data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signTypedData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\nconst signature = await signer.signTypedData({\n  domain: {},\n  types: {},\n  primaryType: \"\",\n  message: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Using convertCoinTypeToChainId Function in TypeScript\nDESCRIPTION: Demonstrates the usage of convertCoinTypeToChainId function along with convertChainIdToCoinType. It uses the sepolia chain from viem/chains to convert between coin type and chain ID.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/convertCoinTypeToChainId.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  convertChainIdToCoinType,\n  convertCoinTypeToChainId,\n} from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst coinType = convertChainIdToCoinType(sepolia.id);\nconst chainId = convertCoinTypeToChainId(coinType);\n```\n\n----------------------------------------\n\nTITLE: Using isAlchemySmartAccountClient for Client Type Checking in TypeScript\nDESCRIPTION: This code example illustrates the usage of the `isAlchemySmartAccountClient` function. It takes a `client` object (of type `Client<TTransport, TChain, TAccount>`) as input and returns `true` if it's an Alchemy Smart Account Client, allowing for conditional logic based on the client type. This check ensures the client supports specific RPC methods expected by Alchemy's infrastructure.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/isAlchemySmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { isAlchemySmartAccountClient } from \"@account-kit/infra\";\n\nif (isAlchemySmartAccountClient(client)) {\n  // do things with the client as an Alchemy Smart Account Client\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy Signer Package with Yarn or NPM\nDESCRIPTION: Commands to install the @account-kit/signer package using either Yarn or NPM package managers. Requires Typescript version 5 or higher and viem pinned to version 2.20.0.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/quickstart.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/signer\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/signer\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Validation Module Reference\nDESCRIPTION: Reference to the WebAuthn validation module implementation file path for MAv2, which enables passkey and biometric authentication support.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/choosing-a-smart-account.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nsrc/modules/validation/WebAuthnValidationModule.sol\n```\n\n----------------------------------------\n\nTITLE: Importing useConnect from Alchemy Account Kit React\nDESCRIPTION: This snippet shows how to import the useConnect hook from the Alchemy Account Kit React package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useConnect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnect } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing useExportAccount Hook in TypeScript\nDESCRIPTION: Shows how to import the useExportAccount hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useExportAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useExportAccount } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Owner Light Account Client in TypeScript\nDESCRIPTION: Demonstrates how to create and configure a smart account client with multi-owner capabilities using the Account Kit infrastructure and smart contracts packages.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/multiOwnerLightAccountClientActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerLightAccountClientActions, createMultiOwnerLightAccount } from \"@account-kit/smart-contracts\";\nimport { createAlchemySmartAccountClient } from \"@account-kit/infra\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst smartAccountClient = createAlchemySmartAccountClient({\naccount: await createMultiOwnerLightAccount(...),\napiKey: \"your-api-key\",\nchain: sepolia,\n}).extend(multiOwnerLightAccountClientActions);\n```\n\n----------------------------------------\n\nTITLE: Importing getSmartAccountClient from Account Kit Core in TypeScript\nDESCRIPTION: Demonstrates how to import the getSmartAccountClient method from the @account-kit/core package in a TypeScript environment. This is needed as a prerequisite step in order to utilize smart account management features provided by Account Kit. No runtime inputs or outputs are shown in this import-only snippet.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getSmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getSmartAccountClient } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Defining Condition Types in TypeScript\nDESCRIPTION: Schema for conditions that can be applied to rules, including field comparisons, batch value limits, and gas limits. Supports various field sources for both EVM and Solana.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/policies/offchain-policy-configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype Condition =\n  | {\n      type: \"field\";\n      // This specifies where to evaluate the condition\n      // for EVM. `call` gives you the most flexibility\n      // on enforcement.\n      field_source:\n        | \"call\" // EVM only\n        | \"user_operation\" // EVM only\n        | \"eth_transaction\" // EVM only\n        | \"solana_transaction\" // Solana only\n        | \"solana_instruction\" // Solana only\n        | \"spl_transaction\"; // Solana only\n      field: string;\n      // should only be set when the field_source is `call`\n      // and field is `data`\n      abi?: JSON;\n      comparator: \"==\" | \"!=\" | \"<\" | \"<=\" | \">\" | \">=\" | \"in\";\n      // the value to compare the field against\n      value: string | number | string[];\n    }\n  | {\n      type: \"batch_value\";\n      max_batch_value: string;\n    }\n  | {\n      type: \"gas_limit\";\n      max_gas_limit: string;\n    };\n```\n\n----------------------------------------\n\nTITLE: Viewing Session Key Permissions\nDESCRIPTION: This snippet shows how to view all current permissions for a given session key using the view functions provided by the Session Key Plugin. It includes checks for access control, time range, and various spending limits.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionKeyPlugin = new SessionKeyPlugin()\nconst accountAddress = \"0x...\"\nconst sessionKeyAddress = \"0x...\"\n\n// Get access control type\nconst accessControlType = await sessionKeyPlugin.readFromPlugin(\n  \"getAccessControlType\",\n  [accountAddress, sessionKeyAddress]\n)\n\n// Get time range\nconst [validAfter, validUntil] = await sessionKeyPlugin.readFromPlugin(\n  \"getKeyTimeRange\",\n  [accountAddress, sessionKeyAddress]\n)\n\n// Get native token spend limit\nconst nativeTokenSpendLimit = await sessionKeyPlugin.readFromPlugin(\n  \"getNativeTokenSpendLimitInfo\",\n  [accountAddress, sessionKeyAddress]\n)\n\n// Get gas spend limit\nconst [gasSpendLimit, shouldReset] = await sessionKeyPlugin.readFromPlugin(\n  \"getGasSpendLimit\",\n  [accountAddress, sessionKeyAddress]\n)\n\n// Get ERC20 spend limit (for a specific token)\nconst tokenAddress = \"0x...\"\nconst erc20SpendLimit = await sessionKeyPlugin.readFromPlugin(\n  \"getERC20SpendLimitInfo\",\n  [accountAddress, sessionKeyAddress, tokenAddress]\n)\n\n// Get required paymaster\nconst requiredPaymaster = await sessionKeyPlugin.readFromPlugin(\n  \"getRequiredPaymaster\",\n  [accountAddress, sessionKeyAddress]\n)\n```\n\n----------------------------------------\n\nTITLE: Importing useSignMessage Hook in TypeScript\nDESCRIPTION: Shows how to import the useSignMessage hook from the Account Kit React package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSignMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignMessage } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Passkey Login with Pre-built UI Components in Account Kit\nDESCRIPTION: Configures the Account Kit UI for Passkey Login authentication. This snippet sets up UI configuration with passkey login option in a section, which can be combined with other authentication methods like email.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/passkey-login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        // Include passkey login in a section\n        { type: \"passkey\" },\n\n        // You can combine with other authentication methods\n        { type: \"email\" },\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Importing buildUserOperationFromTx from @aa-sdk/core in TypeScript\nDESCRIPTION: Shows how to import the buildUserOperationFromTx function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/buildUserOperationFromTx.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildUserOperationFromTx } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing useMFA Hook in TypeScript\nDESCRIPTION: Shows how to import the useMFA hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useMFA.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMFA } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing middlewareActions Function in aa-sdk Core (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import the `middlewareActions` function from the `@aa-sdk/core` package. This function accepts a `ClientMiddlewareConfig` during client initiation and returns middleware actions to extend the smart account client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/middlewareActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { middlewareActions } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Installing AA-SDK Core for 3rd-party Integration\nDESCRIPTION: Command line instructions for installing the aa-sdk/core package using either Yarn or NPM. This package is required for creating more configurable clients when using 3rd-party paymasters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/infra/sponsor-gas.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @aa-sdk/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -s @aa-sdk/core\n```\n\n----------------------------------------\n\nTITLE: Using isSigner to Check Type of Signer in aa-sdk TypeScript\nDESCRIPTION: Shows practical usage of the isSigner method, verifying if a LocalAccountSigner instance is a SmartAccountSigner. Depends on the @aa-sdk/core package and requires both isSigner and LocalAccountSigner to be available. The function accepts any object as input and returns a boolean; in this example, it logs 'true' if the object is recognized as a SmartAccountSigner.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/isSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { isSigner, LocalAccountSigner } from \"@aa-sdk/core\";\n\nconst signer = new LocalAccountSigner(...);\nconsole.log(isSigner(signer)); // true\n```\n\n----------------------------------------\n\nTITLE: Defining ClientMiddleware Interface in TypeScript\nDESCRIPTION: Defines the ClientMiddleware interface that represents operations in the SmartAccountClient pipeline for constructing user operations. Middleware populates the user operation with data like gas fees and paymaster data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/middleware/types.ts:ClientMiddleware]\n```\n\n----------------------------------------\n\nTITLE: Solidity Contract Reference - Light Account Implementation\nDESCRIPTION: Reference to the Light Account contract implementation address used for upgrades, demonstrating the contract's upgradeable nature using UUPSUpgradeable pattern.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/faqs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba\n```\n\n----------------------------------------\n\nTITLE: Using addPasskey method with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance and call the addPasskey method to add a passkey to the user's account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/addPasskey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.addPasskey();\n```\n\n----------------------------------------\n\nTITLE: Complete SSR Configuration with Cookie Storage\nDESCRIPTION: Provides the full configuration for Account Kit with SSR and cookie storage enabled. This setup allows for persistent state management in server-side rendered applications.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/ssr.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, cookieStorage } from \"@account-kit/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }),\n  chain: sepolia,\n  ssr: true,\n  storage: cookieStorage,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationResponse Interface for Operation Details\nDESCRIPTION: Interface defining the structure for responses from the eth_getUserOperationByHash RPC method, containing execution details of a UserOperation including block information and transaction hash.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationResponse]\n```\n\n----------------------------------------\n\nTITLE: Using createBundlerClientFromExisting in TypeScript\nDESCRIPTION: Demonstrates how to use the createBundlerClientFromExisting function to create a bundler client from an existing public client. It includes importing necessary functions and creating the clients.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/createBundlerClientFromExisting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient } from \"viem\";\nimport { createBundlerClientFromExisting } from \"@aa-sdk/core\";\n\nconst publicClient = createPublicClient(...);\nconst bundlerClient = createBundlerClientFromExisting(publicClient);\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Inspection Interface in Solidity\nDESCRIPTION: Solidity interface method from IAccountLoupe.sol that returns an array of addresses for all installed plugins in a Modular Account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/manage-plugins/get-installed-plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n/// @notice Get an array of all installed plugins.\\n/// @return The addresses of all installed plugins.\\nfunction getInstalledPlugins() external view returns (address[] memory);\n```\n\n----------------------------------------\n\nTITLE: Importing useUser Hook in TypeScript\nDESCRIPTION: Shows how to import the useUser hook from the Account Kit React package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useUser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUser } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Passing the Account to Client Methods\nDESCRIPTION: This code demonstrates how to use a smart account with a client by passing the account directly to client methods. It shows the createSmartAccountClientFromExisting helper and how to send user operations with an explicit account parameter.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/migration-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport {\n  createBundlerClient,\n  createSmartAccountClientFromExisting\n  LocalAccountSigner,\n  type Hex,\n} from \"@aa-sdk/core\";\nimport { sepolia } from \"@aa-sdk/core\";\nimport { custom, http } from \"viem\";\n\nconst chain = sepolia;\n\nconst client = createBundlerClient({\n  chain,\n  transport: http(\"JSON_RPC_URL\"),\n});\n\n// [!code focus:99]\n// createSmartAccountClientFromExisting is a helper method that allows you\n// to reuse a JSON RPC client to create a Smart Account client.\nconst smartAccountClient = createSmartAccountClientFromExisting({\n  client,\n});\n\nconst account = await createLightAccount({\n  signer,\n  chain,\n  transport: custom(client),\n});\n\nconst { hash } = await smartAccountClient.sendUserOperation({\n    uo: {\n        target: \"0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef\",\n        data: \"0x\",\n        value: 10n,\n    },\n    account, // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Using useClientActions with React and TypeScript\nDESCRIPTION: Demonstrates how to use the useClientActions hook in a React component. It shows setting up a smart account client, defining actions, and executing an action with specific parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useClientActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useSmartAccountClient } from \"@account-kit/react\";\nimport { sessionKeyPluginActions } from \"@account-kit/smart-contracts\";\nimport { useClientActions } from \"@account-kit/react\";\n\nconst Foo = () => {\n  const { client } = useSmartAccountClient({\n    type: \"MultiOwnerModularAccount\",\n  });\n  const { executeAction } = useClientActions({\n    client: client,\n    actions: sessionKeyPluginActions,\n  });\n\n  executeAction({\n    functionName: \"isAccountSessionKey\",\n    args: [{ key: \"0x0\" }],\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using isSmartAccountWithSigner in TypeScript\nDESCRIPTION: Demonstrates how to use the isSmartAccountWithSigner function to check if a SmartContractAccount has a signer. It first creates an account using toSmartContractAccount, then checks if it has a signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/isSmartAccountWithSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toSmartContractAccount } from \"@aa-sdk/core\";\n\nconst account = await toSmartContractAccount(...);\n\nconsole.log(isSmartAccountWithSigner(account)); // false: the base account does not have a publicly accessible signer\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for Organization Information in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the BaseSignerClient class from the @account-kit/signer package, which is needed to use the stampGetOrganization method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/stampGetOrganization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Using addMfa with AlchemyWebSigner in TypeScript\nDESCRIPTION: This example demonstrates how to create an instance of AlchemyWebSigner and use the addMfa method to set up a new MFA factor. It includes configuration for the signer client and shows how to call the addMfa method with the 'totp' multi-factor type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/addMfa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.addMfa({ multiFactorType: \"totp\" });\n// Result contains multiFactorTotpUrl to display as QR code\n```\n\n----------------------------------------\n\nTITLE: Using isSmartAccountWithSigner to Check Account Signer (TypeScript)\nDESCRIPTION: Demonstrates how to use the `isSmartAccountWithSigner` function. It imports `toSmartContractAccount` (presumably to create an account instance), then calls `isSmartAccountWithSigner` with the created account. The example logs the boolean result, noting that base accounts typically lack a publicly accessible signer, hence returning `false`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/isSmartAccountWithSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { toSmartContractAccount } from \"@aa-sdk/core\";\n\nconst account = await toSmartContractAccount(...);\n\nconsole.log(isSmartAccountWithSigner(account)); // false: the base account does not have a publicly accessible signer\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Authentication with useAuthModal Hook in React\nDESCRIPTION: Shows how to create a sign-in button that triggers an authentication modal using the useAuthModal hook from Account Kit React. The code creates a simple component with a button that opens the authentication modal when clicked.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/shared/modal-auth-example.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useAuthModal } from \"@account-kit/react\";\n\nexport default function MyPage() {\n  const { openAuthModal } = useAuthModal();\n\n  return <button onClick={openAuthModal}>Sign in</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient in TypeScript\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package to use the validateMultiFactors method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/validateMultiFactors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing useSignerStatus Hook in TypeScript\nDESCRIPTION: Shows how to import the useSignerStatus hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSignerStatus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Light Account with Account Kit Smart Contracts in TypeScript\nDESCRIPTION: Demonstrates how to use the createLightAccount function to create a light account. It includes importing necessary dependencies, setting up parameters, and calling the function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createLightAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http, generatePrivateKey } from \"viem\";\n\nconst account = await createLightAccount({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing useSignTypedData Hook in TypeScript\nDESCRIPTION: Shows how to import the useSignTypedData hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSignTypedData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignTypedData } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Using createMultiOwnerLightAccountAlchemyClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the createMultiOwnerLightAccountAlchemyClient function to create a multi-owner light account Alchemy client. It includes importing necessary dependencies, configuring the client with an API key, specifying the chain, and using a local account signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccountAlchemyClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\"\n\nconst lightAccountClient = await createMultiOwnerLightAccountAlchemyClient({\ntransport: alchemy({\napiKey: \"your-api-key\",\n}),\nchain: sepolia\nsigner: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())\n});\n```\n\n----------------------------------------\n\nTITLE: Importing cookieToInitialState from @account-kit/core in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `cookieToInitialState` function from the `@account-kit/core` package. This function is essential for converting a cookie string into an initial state object for Alchemy Accounts. Ensure the `@account-kit/core` package is installed in your project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/cookieToInitialState.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { cookieToInitialState } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Creating Expo Project with Account Kit Template\nDESCRIPTION: This command creates a new Expo project using the Account Kit quickstart template. It sets up a React Native (Expo) project with Account Kit pre-configured and ready to use.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app@latest --template https://github.com/alchemyplatform/account-kit-expo-quickstart\n```\n\n----------------------------------------\n\nTITLE: EmailAuthType TypeScript Definition for Email OTP Configuration\nDESCRIPTION: This TypeScript definition specifies the configuration options available for Email OTP authentication. It includes options to customize the button label, hide the continue button, and change the input placeholder text.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/email-otp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype EmailAuthType = {\n  type: \"email\";\n  emailMode: \"otp\";\n  // hides the continue button\n  hideButton?: boolean;\n  // changes the button label\n  buttonLabel?: string;\n  // changes the placeholder text in the input\n  placeholder?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing useSignMessage Hook in TypeScript\nDESCRIPTION: Shows how to import the useSignMessage hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSignMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignMessage } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Using defineAlchemyChain to Configure Sepolia Chain in TypeScript\nDESCRIPTION: This snippet illustrates the usage of `defineAlchemyChain`. It takes an existing chain configuration (here, `sepolia` from `viem/chains`) and an Alchemy RPC base URL (`rpcBaseUrl`) as input parameters. It returns a new `Chain` object that incorporates the specified Alchemy RPC URL into the chain's RPC endpoint list.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/defineAlchemyChain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineAlchemyChain } from \"@account-kit/infra\";\nimport { sepolia } from \"viem/chains\";\n\nconst chain = defineAlchemyChain({\n  chain: sepolia,\n  rpcBaseUrl: \"https://eth-sepolia.g.alchemy.com/v2\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Local Account Signer for EIP-7702 in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a LocalAccountSigner instance from a private key, which is required for upgrading EOAs to smart accounts using EIP-7702.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/using-7702.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n\nconst privateKey = \"0x...\"; // Private key\n\nconst signer = LocalAccountSigner.privateKeyToAccountSigner(privateKey);\n```\n\n----------------------------------------\n\nTITLE: Importing getEntryPoint from @aa-sdk/core in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `getEntryPoint` function from the `@aa-sdk/core` package. This function is necessary to retrieve the entry point definition for a given chain and optional version.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/getEntryPoint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { getEntryPoint } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Dependencies\nDESCRIPTION: Commands to install necessary packages for integrating Account Kit into an existing React project, including Tailwind for styling.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/infra @account-kit/react @tanstack/react-query\nyarn add -D tailwindcss @tailwindcss/postcss postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @account-kit/infra @account-kit/react @tanstack/react-query\nnpm install -D tailwindcss @tailwindcss/postcss postcss\n```\n\n----------------------------------------\n\nTITLE: Initializing SessionKeySigner for Client-Side Keys in TypeScript\nDESCRIPTION: Creates a new SessionKeySigner instance for managing client-side session keys.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst sessionKeySigner = new SessionKeySigner();\n```\n\n----------------------------------------\n\nTITLE: Importing watchSignerStatus from @account-kit/core in TypeScript\nDESCRIPTION: Shows how to import the watchSignerStatus function from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchSignerStatus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSignerStatus } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Modular Account V1 Plugin Addresses\nDESCRIPTION: Contract addresses for MultiOwnerPlugin and SessionKeyPlugin implementations for Modular Account V1 across multiple blockchain networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nMultiOwnerPlugin: 0xcE0000007B008F50d762D155002600004cD6c647\nSessionKeyPlugin: 0x0000003E0000a96de4058e1E02a62FaaeCf23d8d\n```\n\n----------------------------------------\n\nTITLE: Using useExportAccount Hook for Exporting Private Keys\nDESCRIPTION: Example showing how to use the useExportAccount hook to enable private key export in a React application. It includes setting up the iframe container for displaying the export details.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/export-private-key.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useExportAccount } from \"@account-kit/react\";\n\nconst {\n  exportAccount,\n  isExported,\n  isExporting,\n  error,\n  ExportAccountComponent,\n} = useExportAccount({\n  params: {\n    iframeContainerId: \"my-iframe-container\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using AlchemyWebSigner to Sign an Authorization in TypeScript\nDESCRIPTION: Demonstrates how to instantiate an AlchemyWebSigner and use it to sign an EIP-7702 Authorization. The example configures the signer with an RPC URL and iframe container, then signs an authorization for a specific contract.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signAuthorization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst tx = await signer.signAuthorization({\n  contractAddress: \"0x1234123412341234123412341234123412341234\",\n  chainId: 1,\n  nonce: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Status with useSignerStatus Hook in React\nDESCRIPTION: This code snippet shows how to track a user's authentication status using the useSignerStatus hook from Account Kit. The isConnected flag can be used to conditionally render UI elements based on authentication state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/social-login.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n\n----------------------------------------\n\nTITLE: Importing Light Account Client Actions in TypeScript\nDESCRIPTION: Shows how to import the lightAccountClientActions module from the smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/lightAccountClientActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lightAccountClientActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Customizing Illustration Style in Account Kit Config\nDESCRIPTION: Demonstrates how to customize the illustration style of icons used in Account Kit components. This is done by setting the illustrationStyle property in the uiConfig when calling createConfig.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/customization/theme.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"YOUR_KEY\" }),\n    chain: sepolia,\n  },\n  {\n    // ... other ui config options\n    illustrationStyle: \"outline\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Modular Account Implementation in TypeScript\nDESCRIPTION: Retrieves the implementation address for a Modular Account and checks if it's already a Modular Account implementation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"docs/shared/infra/client\";\nconst impl = await client.account.getImplementationAddress();\n\n// implementation slot exists and is a deployed modular account. this user has a modular account at the modular account counterfactual address. no work needs to be done.\nif (impl == \"ModularAccountImpl\") {\n  // done\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useDropAndReplaceUserOperation Hook in TypeScript\nDESCRIPTION: Shows how to import the useDropAndReplaceUserOperation hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useDropAndReplaceUserOperation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDropAndReplaceUserOperation } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Using getAddress Method with SessionKeySigner in TypeScript\nDESCRIPTION: Demonstrates how to create a SessionKeySigner instance and use its getAddress method to retrieve a session key address asynchronously.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/getAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst signer = new SessionKeySigner();\nconst sessionKeyAddress = await signer.getAddress();\n```\n\n----------------------------------------\n\nTITLE: Installing @aa-sdk/ethers Package\nDESCRIPTION: Commands for installing the @aa-sdk/ethers package using different package managers (yarn, npm, pnpm).\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/aa-sdk/ethers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @aa-sdk/ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -s @aa-sdk/ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @aa-sdk/ethers\n```\n\n----------------------------------------\n\nTITLE: Importing WalletClientSigner in TypeScript\nDESCRIPTION: This snippet shows how to import the WalletClientSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/WalletClientSigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Submitting Email OTP Code in Alchemy Signer\nDESCRIPTION: Submits the One-Time Password (OTP) code received via email to continue the authentication process. This is the second step when authenticating with Email OTP and MFA.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nsigner.authenticate({\n  type: \"otp\",\n  otpCode: \"EMAIL_OTP_CODE\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using signTypedData with AlchemyWebSigner in TypeScript\nDESCRIPTION: Demonstrates how to create an AlchemyWebSigner instance and use the signTypedData method. It includes setting up the signer with client configuration and calling the method with required parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signTypedData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst signature = await signer.signTypedData({\n  domain: {},\n  types: {},\n  primaryType: \"\",\n  message: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing defaultAccountState from Account Kit Core (TypeScript)\nDESCRIPTION: Imports the `defaultAccountState` function from the `@account-kit/core` package. This function is necessary to retrieve the default state object for a specified account type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/defaultAccountState.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { defaultAccountState } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing SmartContractAccount Interface in TypeScript\nDESCRIPTION: This snippet shows how to import the SmartContractAccount interface from Account Kit. It's used to define client-side representations of on-chain smart contract implementations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/concepts/smart-contract-account.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SmartContractAccount } from '@account-kit/core';\n```\n\n----------------------------------------\n\nTITLE: Handling Magic Link Authentication with MFA in Alchemy Signer\nDESCRIPTION: Implements the Email Magic Link authentication flow with TOTP MFA by catching MfaRequiredError and prompting for the TOTP code. This demonstrates how to handle the additional authentication factor in a magic link flow.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MfaRequiredError } from \"@account-kit/signer\";\nimport { signer } from \"./signer\";\n\nconst promptUserForCode = async () => {\n  // Prompt user for TOTP code\n  // const totpCode = await promptUserForCode();\n\n  return \"123456\";\n};\n\ntry {\n  await signer.authenticate({\n    type: \"email\",\n    email: \"user@mail.com\",\n    emailMode: \"magicLink\",\n  });\n} catch (err) {\n  if (err instanceof MfaRequiredError) {\n    // Prompt user for TOTP code\n    const totpCode = await promptUserForCode();\n\n    const { multiFactorId } = err.multiFactors[0];\n    await signer.authenticate({\n      type: \"email\",\n      emailMode: \"magicLink\",\n      email: \"user@mail.com\",\n      multiFactors: [\n        {\n          multiFactorId,\n          multiFactorCode: totpCode,\n        },\n      ],\n    });\n  } else {\n    // handle other errors\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLogout Hook - TypeScript\nDESCRIPTION: Demonstrates how to use the useLogout hook including optional success and error callbacks. Returns an object with logout function, loading state, and error handling.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useLogout.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogout } from \"@account-kit/react\";\n\nconst { logout, isLoggingOut, error } = useLogout({\n  // these are optional\n  onSuccess: () => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Smart Contracts\nDESCRIPTION: Commands to install the required Account Kit smart contracts package using npm or yarn. Prerequisites include TypeScript 5 and viem version 2.20.0.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/light-account/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @account-kit/smart-contracts\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add@account-kit/smart-contracts\n```\n\n----------------------------------------\n\nTITLE: Retrieving MFA Factors in Alchemy Signer\nDESCRIPTION: Gets a list of all existing multi-factor authentication factors for the current user. This can be used to display the user's MFA configuration or to manage their factors.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst { multiFactors } = await signer.getMfaFactors();\n```\n\n----------------------------------------\n\nTITLE: Retrieving MFA Factors\nDESCRIPTION: Get a list of existing MFA factors for the current user.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst { multiFactors } = await signer.getMfaFactors();\n```\n\n----------------------------------------\n\nTITLE: Importing getDefaultLightAccountFactoryAddress Function in TypeScript\nDESCRIPTION: This snippet shows how to import the getDefaultLightAccountFactoryAddress function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getDefaultLightAccountFactoryAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultLightAccountFactoryAddress } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing AA-SDK Core Package in JavaScript/TypeScript\nDESCRIPTION: This snippet demonstrates how to import the @aa-sdk/core package. It's a crucial step for developers who want to use the core functionality in their projects.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@aa-sdk/core\n```\n\n----------------------------------------\n\nTITLE: Creating a SolanaSigner from AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance and convert it to a SolanaSigner. The example configures the signer with RPC URL and iframe settings before converting it.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/experimental_toSolanaSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst solanaSigner = signer.toSolanaSigner();\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeySigner in TypeScript\nDESCRIPTION: Shows how to import the SessionKeySigner class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/getAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing sendTransaction from aa-sdk in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the sendTransaction function from the @aa-sdk/core package in TypeScript. No external dependencies are needed beyond the aa-sdk library. This import allows subsequent use of the sendTransaction utility for handling blockchain transactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/sendTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { sendTransaction } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using useExportAccount Hook with Parameters\nDESCRIPTION: Demonstrates how to use the useExportAccount hook with configuration parameters, including setting up an iframe container for displaying export account details.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useExportAccount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useExportAccount } from \"@account-kit/react\";\n\nconst {\n  exportAccount,\n  isExported,\n  isExporting,\n  error,\n  ExportAccountComponent,\n} = useExportAccount({\n  params: {\n    iframeContainerId: \"my-iframe-container\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Status with useSignerStatus Hook\nDESCRIPTION: This snippet shows how to track the user's authentication status in a React component using the useSignerStatus hook from Account Kit. The isConnected property can be used to conditionally render UI elements based on authentication state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/email-otp.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Owners of a MultiOwnerLightAccount in TypeScript\nDESCRIPTION: Code snippet that demonstrates how to retrieve all current owner addresses of a MultiOwnerLightAccount using the getOwnerAddresses method on a connected client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/light-account/multi-owner-light-account.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerLightAccountClient } from \"./client\";\n\nconst owners = await multiOwnerLightAccountClient.account.getOwnerAddresses();\n```\n\n----------------------------------------\n\nTITLE: Defining SmartAccountAuthenticator Interface in TypeScript\nDESCRIPTION: Defines the SmartAccountAuthenticator interface that extends SmartAccountSigner with authentication-related functions. It provides methods to authenticate signers and retrieve authentication details for smart contract accounts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/signer/types.ts:SmartAccountAuthenticator]\n```\n\n----------------------------------------\n\nTITLE: Using `getUser` to Retrieve User Details in @account-kit/core (TypeScript)\nDESCRIPTION: Illustrates how to call the `getUser` function with an `AlchemyAccountsConfig` object (`config`) to retrieve the currently logged-in user's details. The function returns a `GetUserResult` containing information about the user if an SCA with AlchemySigner or an EOA is connected.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getUser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { getUser } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst user = getUser(config);\n```\n\n----------------------------------------\n\nTITLE: Using useSignMessage Hook in TypeScript\nDESCRIPTION: Demonstrates how to use the useSignMessage hook to sign a message. It shows the hook's configuration, including optional callbacks for success and error handling, and how to await the signMessage function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSignMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignMessage, useSmartAccountClient } from \"@account-kit/react\";\nconst data = \"messageToSign\";\nconst { client } = useSmartAccountClient({});\n\nconst {\n  signMessage,\n  signMessageAsync,\n  signedMessage,\n  isSigningMessage,\n  error,\n} = useSignMessage({\n  client,\n  // these are optional\n  onSuccess: (result) => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n\nconst result = await signMessage({ message: data });\n```\n\n----------------------------------------\n\nTITLE: ClientMiddlewareConfig Interface\nDESCRIPTION: Configuration type for setting up middleware in SmartAccountClient during instantiation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/client/types.ts:ClientMiddlewareConfig]\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the Account Kit signer module to access the signRawMessage functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/signRawMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Using useSignTypedData Hook with TypeScript\nDESCRIPTION: Demonstrates how to use the useSignTypedData hook to sign typed data in EIP-712 format. The example shows creating typed data, obtaining a smart account client, and using the hook with success and error callbacks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSignTypedData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignTypedData, useSmartAccountClient } from \"@account-kit/react\";\nconst typedData = {\n  types: {\n    Message: [{ name: \"content\", type: \"string\" }],\n  },\n  primaryType: \"Message\",\n  message: { content: \"Hello\" },\n};\nconst { client } = useSmartAccountClient({});\nconst {\n  signTypedData,\n  signTypedDataAsync,\n  signedTypedData,\n  isSigningTypedData,\n  error,\n} = useSignTypedData({\n  client,\n  // these are optional\n  onSuccess: (result) => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n\nconst result = await signTypedData({ typedData });\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest Expo Version\nDESCRIPTION: Commands to upgrade an existing Expo project to the latest version, which is required for React Native 0.76+ support for TextEncoder.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn expo install expo@latest\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Using setChain to Switch Active Network in Account Kit Core (TypeScript)\nDESCRIPTION: Example demonstrating how to use the imported `setChain` function asynchronously. It requires the application's `AlchemyAccountsConfig` object (`config`) and the target `Chain` object (`sepolia` imported from `@account-kit/infra`). The function updates the core store to reflect the new active chain, which must have been included in the initial `createConfig` setup.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/setChain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { setChain } from \"@account-kit/core\";\nimport { config } from \"./config\";\nimport { sepolia } from \"@account-kit/infra\";\n\nawait setChain(config, sepolia);\n```\n\n----------------------------------------\n\nTITLE: Importing watchSignerStatus from Account Kit Core in TypeScript\nDESCRIPTION: This snippet shows how to import the watchSignerStatus method from the @account-kit/core npm package, making it available for use in a TypeScript codebase. It assumes that @account-kit/core is installed as a project dependency. Importing this method is necessary prior to any watcher setup or usage.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchSignerStatus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { watchSignerStatus } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing getDefaultUserOperationFeeOptions - Account Kit Infra (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the getDefaultUserOperationFeeOptions method from the @account-kit/infra package using a standard TypeScript import statement. The import is required as a dependency for retrieving default user operation fee options for blockchain interactions. Ensure the @account-kit/infra package is installed in the project before importing.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/getDefaultUserOperationFeeOptions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getDefaultUserOperationFeeOptions } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Validating TOTP Code\nDESCRIPTION: Validate the TOTP code from authenticator app after email OTP verification.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst user = await signer?.validateMultiFactors({\n  multiFactorCode: totpCode,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing WalletClientSigner in TypeScript\nDESCRIPTION: This snippet shows how to import the WalletClientSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/WalletClientSigner/signTypedData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Modular Account Client with Third-Party Infrastructure\nDESCRIPTION: Code example showing how to create a Modular Account client using third-party infrastructure instead of Alchemy. This approach uses the createMultiOwnerModularAccountClient function with a custom RPC URL on the Sepolia network.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccountClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst accountClient = await createMultiOwnerModularAccountClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing convertWalletToAccountSigner from AA-SDK\nDESCRIPTION: Shows how to import the convertWalletToAccountSigner function from the @aa-sdk/ethers package. This utility function converts a standard ethers.js Wallet into a SmartAccountSigner that can be used for signing user operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/functions/convertWalletToAccountSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convertWalletToAccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Updating Fee Options with Multiplier in TypeScript\nDESCRIPTION: This example demonstrates the transition from using Percent to Multiplier for fee options. It shows how to specify maxFeePerGas and maxPriorityFeePerGas using the new Multiplier type, which represents direct multiplication of the estimated value.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/migration-guide.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncreateModularAccountAlchemyClient({\n    ...\n    opts: {\n      ...\n      // The maxFeePerGas and maxPriorityFeePerGas estimated values will now be multipled by 1.5\n      feeOptions: {\n        // This was previously { percent: 50n }\n        maxFeePerGas: { multiplier: 1.5 },\n        // This was previously { percent: 25n }\n        maxPriorityFeePerGas: { multiplier: 1.25 },\n      },\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing createDefaultAccountState from Account Kit Core - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the 'createDefaultAccountState' function from the '@account-kit/core' package. It is a necessary prerequisite for using the function within a TypeScript application that manages account states for blockchain chains. Users should ensure the '@account-kit/core' dependency is installed before importing.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/createDefaultAccountState.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDefaultAccountState } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Installing Session Key Plugin\nDESCRIPTION: Installs the Session Key Plugin and sets up initial permissions for a session key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nif (!isPluginInstalled) {\n  const initialPermissions =\n    new SessionKeyPermissionsBuilder().setNativeTokenSpendLimit({\n      spendLimit: 1000000n,\n    });\n\n  const { hash } = await extendedClient.installSessionKeyPlugin({\n    args: [\n      [await sessionKeySigner.getAddress()],\n      [zeroHash],\n      [initialPermissions.encode()],\n    ],\n  });\n\n  await extendedClient.waitForUserOperationTransaction({ hash });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useSmartAccountClient from Account Kit React\nDESCRIPTION: Shows how to import the useSmartAccountClient hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSmartAccountClient } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Using multisigPluginActions with createModularAccountAlchemyClient in TypeScript\nDESCRIPTION: Demonstrates how to use the multisigPluginActions method with a client created by createModularAccountAlchemyClient. This extends the client with multisig plugin functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/multisigPluginActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountAlchemyClient, multisigPluginActions } from \"@account-kit/smart-contracts\";\n\nconst client = createModularAccountAlchemyClient(...).extend(multisigPluginActions);\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Packages\nDESCRIPTION: Command to install Account Kit related packages\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-expo-example/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/react-native-signer @account-kit/signer @account-kit/smart-contracts @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Importing useConnection Hook in TypeScript\nDESCRIPTION: Shows how to import the useConnection hook from the @account-kit/react package. This hook returns the current connection including chain, policy, and transport information.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useConnection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnection } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner Module\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the account-kit signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/preparePopupOauth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Defining BundlerActions Type in TypeScript\nDESCRIPTION: Defines the BundlerActions type which maps to public Bundler RPC methods from EIP-4337 and EIP-6900 standards. These actions are used with a BundlerClient and provide functionality like retrieving user operation details or estimating gas.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/client/decorators/bundlerClient.ts:BundlerActions]\n```\n\n----------------------------------------\n\nTITLE: Feature Addition for OpenTelemetry Tracing\nDESCRIPTION: Documents addition of tracing functionality for imply and OpenTelemetry implementations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/infra/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- tracing added for imply and open telemetry ([#1424](https://github.com/alchemyplatform/aa-sdk/issues/1424)) ([1caf63b](https://github.com/alchemyplatform/aa-sdk/commit/1caf63bbe4150b7eb66ee7aef7ccf2e228336ba6))\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Email\nDESCRIPTION: Example showing how to authenticate a user using email authentication method with the Alchemy Signer. This is one of several supported authentication methods.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/quickstart.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst result = await signer.authenticate({\n  type: \"email\",\n  email: \"example@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeySigner from @account-kit/smart-contracts\nDESCRIPTION: Shows how to import the SessionKeySigner class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/signTypedData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing getChain from Account Kit Core\nDESCRIPTION: Shows how to import the getChain method from the @account-kit/core package. This method returns the currently active chain when provided with an AlchemyAccountsConfig object.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getChain } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Removing TOTP Multi-Factor Authentication in Alchemy Signer\nDESCRIPTION: Removes a previously set up TOTP multi-factor authentication factor by specifying its multiFactorId. This allows users to disable MFA when they no longer need the additional security.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nawait signer.removeMfa({\n  multiFactorIds: [multiFactorId],\n});\n```\n\n----------------------------------------\n\nTITLE: BundlerClient Type Definition\nDESCRIPTION: Custom viem client type extending PublicClient with bundler-specific actions for EIP-4337 and EIP-6900 functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/client/bundlerClient.ts:BundlerClient]\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Interface Reference - LightAccount\nDESCRIPTION: Reference to the Light Account contract's UUPSUpgradeable implementation and initialization interface.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/faqs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nUUPSUpgradeable\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for Multi-Factor Authentication in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package to access the validateMultiFactors method. This class provides functionality for validating multiple MFA factors.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/validateMultiFactors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing AA-SDK Ethers Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @aa-sdk/ethers package in a markdown file. It includes a title, description, and a note about the package's compatibility with ethers versions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: aa-sdk/ethers reference\ndescription: The landing page for all of the reference documentation for @aa-sdk/ethers\n---\n\n# aa-sdk/core\n\nThe `@aa-sdk/ethers` contains adapters for the `@aa-sdk/core` interfaces so that you can use these interfaces with existing ethers.js libraries.\n\n:::note\nThis package still uses ethers v5 and has not been updated to v6 support.\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing createSmartAccountClientFromExisting from @aa-sdk/core in TypeScript\nDESCRIPTION: This snippet shows how to import the `createSmartAccountClientFromExisting` function specifically from the `@aa-sdk/core` package. This function is essential for creating a smart account client instance based on an existing BundlerClient.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/createSmartAccountClientFromExisting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClientFromExisting } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyUserOperationSimulator in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `alchemyUserOperationSimulator` function from the `@account-kit/infra` library. This function is used as middleware for simulating user operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyUserOperationSimulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { alchemyUserOperationSimulator } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Fixing Infinite Loop in Reconnect Method\nDESCRIPTION: Resolves an issue where the reconnect method was causing an infinite loop in the core functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nthe reconnect method was causing an infinite loop\n```\n\n----------------------------------------\n\nTITLE: Importing generatePrivateKeySigner from AA SDK Core\nDESCRIPTION: Shows how to import the LocalAccountSigner from the @aa-sdk/core package. This is necessary to use the generatePrivateKeySigner method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/generatePrivateKeySigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner from @aa-sdk/ethers (TypeScript)\nDESCRIPTION: Imports the `AccountSigner` class from the `@aa-sdk/ethers` package. This class is necessary to interact with smart accounts using an Ethers.js-compatible interface provided by the aa-sdk.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/getAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Removing a Session Key in TypeScript\nDESCRIPTION: Demonstrates how to remove an existing session key using the removeSessionKey function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./base-client\";\n\nconst result = await client.removeSessionKey({\n  key: \"0xSessionKeyAddress\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing reconnect from Account Kit Core in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the 'reconnect' function from the '@account-kit/core' package in TypeScript. This function is necessary for accessing account restoration functionality and presumes that the '@account-kit/core' dependency is installed. The import must be properly set up before invoking 'reconnect' in subsequent logic.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/reconnect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { reconnect } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient in TypeScript\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Using disconnect() Method\nDESCRIPTION: Demonstrates how to initialize the AlchemySignerWebClient with configuration options and call the disconnect method to clear user state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/disconnect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Updating signTypedData Signature in TypeScript\nDESCRIPTION: This snippet shows the change in the signTypedData method signature for SmartAccountSigner. It now matches the signature found on SmartContractAccount and viem's Account, using a more flexible TypedDataDefinition parameter.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/migration-guide.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n(params: SignTypedDataParams) => Promise<Hex>; // [!code --]\n\n<\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string = string\n>(\n  params: TypedDataDefinition<TTypedData, TPrimaryType>\n) => Promise<Hex>;\n```\n\n----------------------------------------\n\nTITLE: Creating New Expo Project\nDESCRIPTION: Command to create a new Expo project using yarn with a TypeScript template\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-expo-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create expo-app --template\n```\n\n----------------------------------------\n\nTITLE: Importing toSmartContractAccount in TypeScript\nDESCRIPTION: Shows how to import the toSmartContractAccount method from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/toSmartContractAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toSmartContractAccount } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Installing Shim Dependencies for React Native Crypto Support\nDESCRIPTION: Commands to install necessary shim dependencies for crypto functionality in React Native using npm or yarn.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save node-libs-react-native crypto-browserify stream-browserify react-native-get-random-values\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add node-libs-react-native crypto-browserify stream-browserify react-native-get-random-values\n```\n\n----------------------------------------\n\nTITLE: Importing isSmartAccountWithSigner in TypeScript\nDESCRIPTION: Shows how to import the isSmartAccountWithSigner function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/isSmartAccountWithSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isSmartAccountWithSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Adding 'use client' Directive to React Hooks\nDESCRIPTION: Adds the 'use client' directive to multiple React hooks that were missing it, ensuring proper client-side rendering.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd use client to a bunch of hooks that was misisng it\n```\n\n----------------------------------------\n\nTITLE: Using Multiplier instead of Percent for Fee Options\nDESCRIPTION: This example demonstrates the transition from the Percent API to the Multiplier API when configuring fee options. It shows how to specify fee multipliers for gas fee estimations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/migration-guide.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncreateModularAccountAlchemyClient({\n    ...\n    opts: {\n      ...\n      // The maxFeePerGas and maxPriorityFeePerGas estimated values will now be multipled by 1.5\n      feeOptions: {\n        // This was previously { percent: 50n }\n        maxFeePerGas: { multiplier: 1.5 },\n        // This was previously { percent: 25n }\n        maxPriorityFeePerGas: { multiplier: 1.25 },\n      },\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for MFA Validation in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package to access the validateMultiFactors method. This client is used for validating multiple MFA factors.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/validateMultiFactors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing reconnect Function from Account Kit Core\nDESCRIPTION: This snippet shows how to import the reconnect function from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/reconnect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reconnect } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Using getUser Function with Configuration in TypeScript\nDESCRIPTION: Demonstrates how to use the getUser function with a configuration object to retrieve user information.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getUser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUser } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst user = getUser(config);\n```\n\n----------------------------------------\n\nTITLE: Using SessionKeySigner to Sign Typed Data\nDESCRIPTION: Demonstrates how to create a SessionKeySigner instance and use it to sign typed data with a simple Message type containing a content field.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/signTypedData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n\nconst signer = new SessionKeySigner();\nconsole.log(\n  await signer.signTypedData({\n    types: {\n      Message: [{ name: \"content\", type: \"string\" }],\n    },\n    primaryType: \"Message\",\n    message: { content: \"Hello\" },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login Authentication in Alchemy Signer\nDESCRIPTION: Initiates OAuth-based social login authentication that automatically handles MFA if enabled. When MFA is configured, the TOTP verification happens automatically during the OAuth callback flow.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nawait signer.authenticate({\n  type: \"oauth\",\n  authProviderId: \"google\", // Choose between the auth providers you selected to support from your auth policy\n  mode: \"redirect\", // Alternatively, you can choose \"popup\" mode\n  redirectUrl: \"/\", // After logging in, redirect to the index page\n});\n```\n\n----------------------------------------\n\nTITLE: Importing AccountNotFoundError in TypeScript\nDESCRIPTION: This code snippet shows how to import the AccountNotFoundError class from the @aa-sdk/core package. This class is used to create error messages when an account cannot be found for executing a specific action.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/AccountNotFoundError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountNotFoundError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Status\nDESCRIPTION: Example of using the useSignerStatus hook to track user authentication state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/passkey-signup.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the Alchemy Account Kit signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/exportWallet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Using defaultAccountState to get default LightAccount state in TypeScript\nDESCRIPTION: Demonstrates how to use the defaultAccountState method to retrieve the default state for a LightAccount type. The method is generic and can be used with different account types.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/defaultAccountState.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultAccountState } from \"@account-kit/core\";\n\nconst defaultLightAccountState = defaultAccountState<\"LightAccount\">();\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Build Properties Package\nDESCRIPTION: Command to install the expo-build-properties package which allows setting the iOS minimum deployment target.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-build-properties\n```\n\n----------------------------------------\n\nTITLE: Importing IncompatibleClientError in TypeScript\nDESCRIPTION: Shows how to import the IncompatibleClientError class from the @aa-sdk/core package. This error is thrown when a method is called with an incompatible client type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/IncompatibleClientError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IncompatibleClientError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Installed Plugins and Metadata with TypeScript and Account Kit\nDESCRIPTION: This TypeScript code demonstrates how to use the modularAccountClient to get installed plugins of a Modular Account and retrieve metadata for a specific plugin. It uses the getInstalledPlugins method and reads contract data using the IPluginAbi.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/manage-plugins/get-installed-plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\nimport { IPluginAbi } from \"@account-kit/smart-contracts\";\n\n// returns addresses of all installed plugins\nconst installedPlugins = await modularAccountClient.getInstalledPlugins({});\n\nif (installedPlugins.length === 0) {\n  console.log(\"account has no plugins installed.\");\n  return;\n}\n\nconst pluginAddress = installedPlugins[0];\n// read plugin metadata of a plugin\nconst metadata = await modularAccountClient.readContract({\n  address: pluginAddress,\n  abi: IPluginAbi,\n  functionName: \"pluginMetadata\",\n});\n\nconsole.log(JSON.stringify(metadata, null, 2));\n// {\n//   name: 'MultiOwnerPlugin',\n//   version: '1.0.0',\n// }\n```\n\n----------------------------------------\n\nTITLE: Using Logger.info() method in TypeScript\nDESCRIPTION: Demonstrates how to use the info method of the Logger class to log an informational message.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/info.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.info(\"Something is happening\");\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyFeeEstimator from @account-kit/infra in TypeScript\nDESCRIPTION: This snippet shows the standard TypeScript import statement required to bring the `alchemyFeeEstimator` function into the current scope from the `@account-kit/infra` package. This is the first step before using the function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyFeeEstimator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { alchemyFeeEstimator } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing installPlugin Function in TypeScript\nDESCRIPTION: This snippet shows how to import the installPlugin function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/installPlugin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { installPlugin } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner in TypeScript\nDESCRIPTION: Shows how to import the LocalAccountSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using getUser Method with AlchemyWebSigner\nDESCRIPTION: Example of creating an AlchemyWebSigner instance and using it to look up a user's organization ID by email. The code shows configuring the signer with RPC URL and iframe container settings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getUser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.getUser(\"foo@mail.com\");\n```\n\n----------------------------------------\n\nTITLE: Importing cookieStorage from Account Kit Core\nDESCRIPTION: Shows how to import the cookieStorage function from the @account-kit/core package. This function creates a browser storage object that uses cookies for data persistence.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/cookieStorage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookieStorage } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchBundlerClient from Account Kit Core (TypeScript)\nDESCRIPTION: This snippet demonstrates the ES module import statement required to bring the `watchBundlerClient` function into scope from the `@account-kit/core` package. This is necessary before the function can be used.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { watchBundlerClient } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for MFA Setup\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package to enable MFA functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/addMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Crypto Shims in React Native\nDESCRIPTION: Configuration for the Metro bundler to include necessary shims for crypto libraries and enable package exports for Account Kit packages.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require(\"expo/metro-config\");\nconst path = require(\"path\");\nconst projectRoot = __dirname;\n\n// Add aliases for file-system import based modules\nconst ALIASES = {\n  \"@noble/hashes/crypto\": path.resolve(\n    projectRoot, // <-- Adjust this as fits your project setup\n    \"node_modules/@noble/hashes/crypto.js\"\n  ),\n};\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n// [!code focus:9]\n// The following code ensures we have the necessary\n// shims for crypto built into our project\nconfig.resolver.extraNodeModules = {\n  ...config.resolver.extraNodeModules,\n  ...require(\"node-libs-react-native\"),\n  crypto: require.resolve(\"crypto-browserify\"),\n  stream: require.resolve(\"stream-browserify\"),\n};\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (ALIASES[moduleName]) {\n    return {\n      filePath: ALIASES[moduleName],\n      type: \"sourceFile\",\n    };\n  }\n  return context.resolveRequest(context, moduleName, platform);\n};\n\n// The `account-kit/react-native` and it's supoorting packages leverages package.json `exports` which is not (yet) suported by default in Metro.\n// we can enable this support using:\nconfig.resolver.unstable_enablePackageExports = true;\nconfig.resolver.unstable_conditionNames = [\n  \"browser\",\n  \"require\",\n  \"react-native\",\n];\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for Account Kit UI\nDESCRIPTION: TypeScript configuration for customizing Tailwind CSS to work with Account Kit UI components, including options for theming and styling overrides.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAccountKitUi } from \"@account-kit/react/tailwind\";\n\nexport default withAccountKitUi(\n  {\n    // 1. (required) your existing tailwind config\n    // If you are using tailwind v4, this will likely be empty.\n    // If you're still using tailwind v3, this will contain things like content, theme, plugins, etc. - https://v3.tailwindcss.com/docs/installation/using-postcss\n  },\n  {\n    // 2. (optional) overwrite AccountKit theme options\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using the useAuthContext Hook in a React Component\nDESCRIPTION: Shows how to use the useAuthContext hook within a React component to access the current authentication step.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAuthContext.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthContext } from \"@account-kit/react\";\n\nconst { authStep } = useAuthContext();\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for AA SDK Project\nDESCRIPTION: Command to install project dependencies in the root /aa-sdk/ directory using Yarn package manager.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Importing formatSignatures from Account Kit\nDESCRIPTION: Shows how to import the formatSignatures function from the smart-contracts module of the account-kit package. This function is used to format signature collections into an aggregated format.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/formatSignatures.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatSignatures } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Address Mapping - ModularAccount v2.0.0\nDESCRIPTION: Contract addresses for ModularAccount implementation and factory across different chains. Implements modular account functionality with consistent addresses across networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nFactory: 0x00000000000017c61b5bEe81050EC8eFc9c6fecd\nImplementation: 0x00000000000002377B26b1EdA7b0BC371C60DD4f\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to Authentication Modal in Account Kit\nDESCRIPTION: This example demonstrates how to add an icon above the default 'Sign in' text in the authentication modal by setting the header property to a React component containing an image element.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/customization/authentication-modal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// @jsx: react-jsx\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const confg = createConfig(\n  {\n    transport: alchemy({ apiKey: \"YOUR_API_KEY\" }),\n    chain: sepolia,\n  },\n  {\n    auth: {\n      header: <img src=\"img.src\" />, // [!code ++]\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for OAuth Configuration in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package. This is required to use the initOauth method for fetching OAuth configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/initOauth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Using watchChain with Configuration\nDESCRIPTION: Demonstrates how to use the watchChain method with a configuration object to subscribe to chain changes. The method accepts a config parameter and returns a function that takes an onChange callback.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchChain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchChain } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchChain(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Importing SignTransactionNotSupportedError in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the SignTransactionNotSupportedError class from the @aa-sdk/core package. This error is used to indicate that signing a transaction is not supported by smart contracts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/SignTransactionNotSupportedError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SignTransactionNotSupportedError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing GetCounterFactualAddressError in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the GetCounterFactualAddressError class from the @aa-sdk/core package. This class is used to create error objects for failures in fetching counter-factual addresses.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/GetCounterFactualAddressError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetCounterFactualAddressError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using privateKeyToAccountSigner in TypeScript\nDESCRIPTION: Demonstrates how to use the privateKeyToAccountSigner method to create a LocalAccountSigner instance with a generated private key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/privateKeyToAccountSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages with Yarn and NPM\nDESCRIPTION: Commands for installing the necessary Account Kit packages using either Yarn or NPM package managers. Two packages are required: @account-kit/smart-contracts and @account-kit/infra.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/smart-contracts\nyarn add @account-kit/infra\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @account-kit/smart-contracts\nnpm install @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Importing useExportAccount Hook from Account Kit React\nDESCRIPTION: Shows how to import the useExportAccount hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useExportAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useExportAccount } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing asyncPipe Function in TypeScript\nDESCRIPTION: This snippet shows how to import the asyncPipe function from the @aa-sdk/core module. The asyncPipe function is used to pipe a series of async functions together.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/asyncPipe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { asyncPipe } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing convertSignerStatusToState Function in TypeScript\nDESCRIPTION: Shows how to import the convertSignerStatusToState utility function from the @account-kit/core package. This function takes an AlchemySigner status and optional error info to produce a more readable SignerStatus object.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/convertSignerStatusToState.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convertSignerStatusToState } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy Signer Package\nDESCRIPTION: Commands to install the @account-kit/signer package using either yarn or npm package managers. Requires TypeScript 5 and viem version 2.20.0 as prerequisites.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/quickstart.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/signer\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/signer\n```\n\n----------------------------------------\n\nTITLE: Customizing Tailwind Configuration\nDESCRIPTION: TypeScript configuration for customizing Tailwind CSS with Account Kit UI components.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/quickstart.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAccountKitUi } from \"@account-kit/react/tailwind\";\n\nexport default withAccountKitUi(\n  {\n    // 1. (required) your existing tailwind config\n    // If you are using tailwind v4, this will likely be empty.\n    // If you're still using tailwind v3, this will contain things like content, theme, plugins, etc.\n  },\n  {\n    // 2. (optional) overwrite AccountKit theme options\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing getAccount from Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the getAccount function from the @account-kit/core package into a TypeScript module. The import statement is essential before utilizing any functions provided by the library. No additional dependencies are needed beyond TypeScript and the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getAccount } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Defining Email OTP Authentication Type in TypeScript\nDESCRIPTION: This TypeScript type definition outlines the structure for Email OTP authentication configuration. It includes options for customizing the button label, placeholder text, and hiding the continue button.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/email-otp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype EmailAuthType = {\n  type: \"email\";\n  emailMode: \"otp\";\n  // hides the continue button\n  hideButton?: boolean;\n  // changes the button label\n  buttonLabel?: string;\n  // changes the placeholder text in the input\n  placeholder?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Logger from AA-SDK Core in TypeScript\nDESCRIPTION: Shows how to import the Logger class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/error.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner with aa-sdk and Ethers in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the AccountSigner class from the @aa-sdk/ethers library in a TypeScript environment. The import is necessary to use functionalities like sending transactions through account abstraction methods. The code expects TypeScript module resolution and assumes @aa-sdk/ethers is installed as a dependency.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/sendTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing hydrate function from @account-kit/core in TypeScript\nDESCRIPTION: Shows how to import the hydrate function from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/hydrate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hydrate } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing wrapSignatureWith6492 in aa-sdk (TypeScript)\nDESCRIPTION: Demonstrates how to import the wrapSignatureWith6492 function from the @aa-sdk/core package in a TypeScript project. This step is required for accessing the signature wrapping functionality and ensures that the subsequent code can reference the method. No input or output is directly involved at this stage.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/wrapSignatureWith6492.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { wrapSignatureWith6492 } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing convertWalletToAccountSigner from aa-sdk/ethers - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the convertWalletToAccountSigner utility from the @aa-sdk/ethers package for use in a TypeScript project. It is required as a prerequisite to convert a Wallet into a SmartAccountSigner to enable signature and transaction features for smart accounts. The import is compatible with ES module syntax and expects @aa-sdk/ethers as an installed dependency.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/functions/convertWalletToAccountSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { convertWalletToAccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Account Packages with npm\nDESCRIPTION: Commands to install @account-kit/smart-contracts and @account-kit/infra packages using npm package manager.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @account-kit/smart-contracts\nnpm install @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS\nDESCRIPTION: JavaScript configuration for PostCSS to enable Tailwind CSS processing.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/quickstart.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  plugins: {\n    \"@tailwindcss/postcss\": {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Signer Package\nDESCRIPTION: Command to install the React Native Signer package from npm. This is the initial step for integrating the Alchemy Signer implementation into a React Native project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/rn-signer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @account-kit/react-native-signer\n```\n\n----------------------------------------\n\nTITLE: Referencing WebAuthn Validation Module in Solidity\nDESCRIPTION: This code snippet shows the import statement for the WebAuthnValidationModule, which can be used to support passkeys or biometrics in a Modular Account V2 implementation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/choosing-a-smart-account.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@alchemyplatform/modular-account/src/modules/validation/WebAuthnValidationModule.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing getDefaultLightAccountFactoryAddress from Account Kit Smart Contracts\nDESCRIPTION: This code snippet shows how to import the getDefaultLightAccountFactoryAddress utility method from the @account-kit/smart-contracts package. This method returns the default light account factory address for a given Chain object and light account version.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getDefaultLightAccountFactoryAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultLightAccountFactoryAddress } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Using signTypedData with LocalAccountSigner in TypeScript\nDESCRIPTION: Demonstrates how to create a LocalAccountSigner instance from a mnemonic, and use it to sign typed data. It imports necessary functions, generates a private key, creates a signer, and signs the data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signTypedData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\nconst signature = await signer.signTypedData({\n  domain: {},\n  types: {},\n  primaryType: \"\",\n  message: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Default Light Account Version Function in TypeScript\nDESCRIPTION: Shows how to import the defaultLightAccountVersion function from the @account-kit/smart-contracts package. This function returns the default version for a specified light account type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/defaultLightAccountVersion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultLightAccountVersion } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Storage for Account Kit in TypeScript\nDESCRIPTION: This code snippet shows how to implement cookie storage in the Account Kit configuration to persist the account state between server and client, ensuring consistent rendering.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/ssr.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createConfig,\n  cookieStorage, // [!code ++]\n} from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { QueryClient } from \"@tanstack/react-query\";\n\nexport const queryClient = new QueryClient();\n\n// [!code focus:99]\nexport const config = () =>\n  createConfig({\n    // required\n    transport: alchemy({ rpcUrl: \"/api/rpc\" }),\n    chain: sepolia,\n    ssr: true, // [!code ++]\n    storage: cookieStorage, // [!code ++]\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: This snippet shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/experimental_toSolanaSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing createMultisigAccountAlchemyClient in TypeScript\nDESCRIPTION: Shows how to import the createMultisigAccountAlchemyClient method from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultisigAccountAlchemyClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Using useExportAccount Hook\nDESCRIPTION: Shows how to implement the useExportAccount hook with basic configuration for iframe container.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/export-private-key.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useExportAccount } from \"@account-kit/react\";\n\nconst {\n  exportAccount,\n  isExported,\n  isExporting,\n  error,\n  ExportAccountComponent,\n} = useExportAccount({\n  params: {\n    iframeContainerId: \"my-iframe-container\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Email Authentication\nDESCRIPTION: Demonstrates how to create an AlchemySignerWebClient instance and initialize email authentication. Shows configuration of API key and iframe container, followed by email authentication initialization.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/initEmailAuth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.initEmailAuth({ email: \"you@mail.com\" });\n```\n\n----------------------------------------\n\nTITLE: Using buildSessionKeysToRemoveStruct Function\nDESCRIPTION: Demonstrates how to use the buildSessionKeysToRemoveStruct function to prepare session keys for removal. The function takes a client instance and an object containing an array of keys to remove, returning a promise with session key and predecessor pairs.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/buildSessionKeysToRemoveStruct.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildSessionKeysToRemoveStruct } from \"@account-kit/smart-contracts\";\n\nconst client = createSmartAccountClient(...);\n\nconst keysToRemove = await buildSessionKeysToRemoveStruct(client, {\nkeys: [\"0x...\", \"0x...\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Using AlchemyWebSigner for Message Signing - TypeScript\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance with configuration options and use it to sign a message. The signer is configured with an RPC URL and iframe container settings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signMessage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst signature = await signer.signMessage(\"Hello, world!\");\n```\n\n----------------------------------------\n\nTITLE: Importing sendUserOperation with AA SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the sendUserOperation function from the @aa-sdk/core package. Ensure @aa-sdk/core is installed as a project dependency before importing. This import is a prerequisite for utilizing account abstraction features in subsequent code.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/sendUserOperation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { sendUserOperation } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing WalletClientSigner in TypeScript\nDESCRIPTION: Demonstrates how to import the WalletClientSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/WalletClientSigner/signMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Email Magic Link Configuration Options Type Definition\nDESCRIPTION: Type definition for Email Magic Link authentication configuration options. It defines the available properties for customizing the authentication experience including hiding the continue button, changing button labels, and input placeholders.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/email-magic-link.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype EmailAuthType = {\n  type: \"email\";\n  emailMode: \"magicLink\";\n  // hides the continue button\n  hideButton?: boolean;\n  // changes the button label\n  buttonLabel?: string;\n  // changes the placeholder text in the input\n  placeholder?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using createAlchemyPublicRpcClient in TypeScript\nDESCRIPTION: Demonstrates how to use the createAlchemyPublicRpcClient method to create an Alchemy public RPC client with a specified API key and chain (Sepolia in this example).\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/createAlchemyPublicRpcClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAlchemyPublicRpcClient, alchemy } from \"@account-kit/infra\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst client = createAlchemyPublicRpcClient({\n  transport: alchemy({\n    apiKey: \"ALCHEMY_API_KEY\",\n  }),\n  chain: sepolia,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing FailedToGetStorageSlotError in TypeScript\nDESCRIPTION: This snippet shows how to import the FailedToGetStorageSlotError class from the @aa-sdk/core package. This class is used to create custom error messages when failing to access or retrieve a specific storage slot.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/FailedToGetStorageSlotError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FailedToGetStorageSlotError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing isSmartAccountWithSigner from aa-sdk/core (TypeScript)\nDESCRIPTION: Imports the `isSmartAccountWithSigner` utility function from the `@aa-sdk/core` package. This function is necessary to check if a `SmartContractAccount` object has an associated signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/isSmartAccountWithSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { isSmartAccountWithSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Integrating with ERC-7677 Compliant Paymasters\nDESCRIPTION: This snippet shows how to create a smart account client that integrates with ERC-7677 compliant paymasters. It sets up a split transport to route traffic between the paymaster and bundler, and uses the erc7677Middleware for seamless integration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/infra/sponsor-gas.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createSmartAccountClient,\n  erc7677Middleware,\n  split,\n} from \"@aa-sdk/core\";\nimport {\n  sepolia,\n  alchemyFeeEstimator,\n  createAlchemyPublicRpcClient,\n  alchemy,\n} from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\n// You can replace this with any signer you'd like\n// We're using a LocalAccountSigner to generate a local key to sign with\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { http, custom } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\n// 1. create an alchemy rpc client\nconst alchemyTransport = alchemy({\n  apiKey: \"API_KEY\",\n});\n\nconst alchemyRpcClient = createAlchemyPublicRpcClient({\n  chain: sepolia,\n  transport: alchemyTransport,\n});\n\n// 2. create a split transport to route traffic between the paymaster and the bundler\nconst transport = split({\n  overrides: [\n    {\n      methods: [\"pm_getPaymasterStubData\", \"pm_getPaymasterData\"],\n      transport: http(\"PAYMASTER_URL\"),\n    },\n  ],\n  fallback: alchemyTransport,\n});\n\n// 3. create smart account client\nexport const client = createSmartAccountClient({\n  transport,\n  chain: sepolia,\n  account: await createLightAccount({\n    chain: sepolia,\n    transport: alchemyTransport,\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  }),\n  // this is required to get correct fee estimates when using our Bundler RPC\n  feeEstimator: alchemyFeeEstimator(alchemyRpcClient),\n  ...erc7677Middleware(),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing WalletClientSigner - TypeScript\nDESCRIPTION: Import statement for the WalletClientSigner class from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/WalletClientSigner/getAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner in TypeScript\nDESCRIPTION: Shows how to import the LocalAccountSigner from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signTypedData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing Logger from AA-SDK Core\nDESCRIPTION: Shows how to import the Logger class from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/verbose.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing isEntryPointVersion in TypeScript\nDESCRIPTION: Shows how to import the isEntryPointVersion function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/isEntryPointVersion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isEntryPointVersion } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using lookupUserWithPasskey Method in TypeScript\nDESCRIPTION: This example demonstrates how to create an instance of AlchemySignerWebClient and use the lookupUserWithPasskey method. It includes setting up the client with an API key and iframe configuration, then calling the method to authenticate a user.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/lookupUserWithPasskey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.lookupUserWithPasskey();\n```\n\n----------------------------------------\n\nTITLE: Importing createConfig in TypeScript\nDESCRIPTION: Shows how to import the createConfig method from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/createConfig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing DefaultFactoryNotDefinedError from AA SDK Core in TypeScript\nDESCRIPTION: This code snippet shows how to import the DefaultFactoryNotDefinedError class from the @aa-sdk/core module. This class is used to create error messages when no default factory is found for specific account parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/DefaultFactoryNotDefinedError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultFactoryNotDefinedError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Upgrading Expo Dependencies\nDESCRIPTION: Command to upgrade all dependencies to match the new Expo SDK version.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Logging Bug Fix - CORS and Process Check\nDESCRIPTION: Fixed CORS issues with static resources and added process definition check for better React Native compatibility.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/logging/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **logging:** no cors on the static resource ([#1060])\n- **logging:** check process is defined ([#1124])\n```\n\n----------------------------------------\n\nTITLE: Importing cookieStorage from Account Kit Core (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the cookieStorage method from the @account-kit/core package in a TypeScript environment. The import is required to access the cookie-based Storage function. Ensure that the @account-kit/core dependency is installed in your project to use this functionality. This import does not require any parameters and is a prerequisite for subsequent usage.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/cookieStorage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { cookieStorage } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Wrapping Signature Using wrapSignatureWith6492 (TypeScript)\nDESCRIPTION: Shows how to use the wrapSignatureWith6492 function to encapsulate a signature with EIP-6492-compliant metadata. Requires dependencies: the @aa-sdk/core package installed. Expects an object containing factoryAddress, factoryCalldata, and signature (all Hex strings) as parameters. Returns a Hash string representing the wrapped signature. All parameters must be valid hexadecimal values, and proper error handling for incorrect input is recommended.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/wrapSignatureWith6492.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { wrapSignatureWith6492 } from \"@aa-sdk/core\";\n\nconst signature = wrapSignatureWith6492({\n  factoryAddress: \"0x...\",\n  factoryCalldata: \"0x...\",\n  signature: \"0x...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Moving PluginGen from AA SDK to Account Kit\nDESCRIPTION: Relocates the PluginGen functionality from aa-sdk to account-kit due to dependencies on smart contracts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nmove plugingen from aa-sdk to account-kit since it depends on smart-contracts\n```\n\n----------------------------------------\n\nTITLE: Adding Icon to Authentication Header in Account Kit Config\nDESCRIPTION: Demonstrates how to add an icon to the authentication modal header while keeping the default 'Sign in' text. This is done by setting the header option to a JSX element in the auth config.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/customization/theme.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const confg = createConfig(\n  {\n    transport: alchemy({ apiKey: \"YOUR_KEY\" }),\n    chain: sepolia,\n  },\n  {\n    auth: {\n      header: <img src=\"img.src\" />, // [!code ++]\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing createMultiOwnerLightAccount Function in TypeScript\nDESCRIPTION: Shows how to import the createMultiOwnerLightAccount function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccount } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing isEntryPointVersion from aa-sdk in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the isEntryPointVersion function from the @aa-sdk/core package using ES module syntax. The function is required to validate if a given value is a valid EntryPointRegistry key. Ensure that @aa-sdk/core is installed as a dependency in your project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/isEntryPointVersion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isEntryPointVersion } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Modular Account V1 Addresses in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the factory and implementation addresses for Modular Account V1 across various blockchain networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Chain            | Factory Address                              | Account Implementation                       |\n| ---------------- | -------------------------------------------- | -------------------------------------------- |\n| Eth Mainnet      | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Eth Sepolia      | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Polygon Mainnet  | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Polygon Mumbai   | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Polygon Amoy     | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Optimism         | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Optimism Sepolia | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Arbitrum         | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Arbitrum Sepolia | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Base             | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Base Sepolia     | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Zora Mainnet     | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Zora Sepolia     | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Fraxtal Mainnet  | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n| Fraxtal Sepolia  | `0x000000e92D78D90000007F0082006FDA09BD5f11` | `0x0046000000000151008789797b54fdb500E2a61e` |\n```\n\n----------------------------------------\n\nTITLE: Importing isSmartAccountClient Method in TypeScript\nDESCRIPTION: Shows how to import the isSmartAccountClient method from the @aa-sdk/core package. This method takes a viem client as input and returns a boolean indicating if it's a SmartAccountClient.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/isSmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isSmartAccountClient } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient from @account-kit/signer\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/submitOtpCode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addErc20TokenSpendLimit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Storage for Account State Persistence in TypeScript\nDESCRIPTION: This code snippet shows how to implement cookie storage for persisting account state between server and client. It includes setting up the config with SSR and cookie storage options.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/ssr.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createConfig,\n  cookieStorage, // [!code ++]\n} from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { QueryClient } from \"@tanstack/react-query\";\n\nexport const queryClient = new QueryClient();\n\n// [!code focus:99]\nexport const config = () =>\n  createConfig({\n    // required\n    transport: alchemy({ rpcUrl: \"/api/rpc\" }),\n    chain: sepolia,\n    ssr: true, // [!code ++]\n    storage: cookieStorage, // [!code ++]\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing watchSmartAccountClient from @account-kit/core in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `watchSmartAccountClient` function specifically from the `@account-kit/core` package. This import is the first step required to utilize the function's capabilities within a TypeScript project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchSmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidSignerTypeError from AA SDK Core\nDESCRIPTION: Shows how to import the InvalidSignerTypeError class from the @aa-sdk/core package. This error class extends BaseError and is used for handling invalid signer type scenarios in SmartAccountSigner.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/InvalidSignerTypeError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidSignerTypeError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Defining EntryPointDef Interface in TypeScript\nDESCRIPTION: Defines the EntryPointDef interface that specifies functions for packing user operations into optimized data structures and generating operation hashes compatible with the specified Chain and EntryPointVersion.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/entrypoint/types.ts:EntryPointDef]\n```\n\n----------------------------------------\n\nTITLE: Importing SmartAccountWithSignerRequiredError from AA-SDK\nDESCRIPTION: Shows how to import the SmartAccountWithSignerRequiredError class from the @aa-sdk/core package. This error class is used to handle cases where a smart account operation requires a signer but none was provided.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/SmartAccountWithSignerRequiredError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SmartAccountWithSignerRequiredError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner from @aa-sdk/ethers (TypeScript)\nDESCRIPTION: Imports the `AccountSigner` class from the `@aa-sdk/ethers` package. This class is fundamental for interacting with account abstraction features provided by the SDK, although the specific `signTransaction` method documented here is not meant for direct use.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/signTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n```\n\n----------------------------------------\n\nTITLE: Importing formatSignatures from Account Kit\nDESCRIPTION: Shows how to import the formatSignatures function from the Account Kit smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/formatSignatures.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatSignatures } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing WalletClientSigner and Dependencies in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the WalletClientSigner class from the @aa-sdk/core package using modern TypeScript/ESM syntax. This is a prerequisite step for using wallet-related functionality in an Ethereum development context. No parameters or outputs are involved in this import-only snippet.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/WalletClientSigner/getAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing UpgradeToAndCallNotSupportedError in TypeScript\nDESCRIPTION: This snippet shows how to import the UpgradeToAndCallNotSupportedError class from the @aa-sdk/core module. This class is used to create error messages when the UpgradeToAndCall operation is not supported by a specific account type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/UpgradeToAndCallNotSupportedError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UpgradeToAndCallNotSupportedError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing RNAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the RNAlchemySigner module from the react-native-signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react-native-signer/functions/RNAlchemySigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RNAlchemySigner } from \"@account-kit/react-native-signer\";\n```\n\n----------------------------------------\n\nTITLE: Using isSigner Function with LocalAccountSigner\nDESCRIPTION: Demonstrates how to use the isSigner function to validate a LocalAccountSigner instance. The function returns a boolean indicating whether the provided object implements the SmartAccountSigner interface.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/isSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isSigner, LocalAccountSigner } from \"@aa-sdk/core\";\n\nconst signer = new LocalAccountSigner(...);\nconsole.log(isSigner(signer)); // true\n```\n\n----------------------------------------\n\nTITLE: Importing useLogout Hook from Account Kit React\nDESCRIPTION: Shows how to import the useLogout hook from the Account Kit React package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useLogout.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogout } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Package Import References\nDESCRIPTION: References to the main packages used for implementing Alchemy Signer functionality - @account-kit/react for React integration, @account-kit/core for core functionality, and @account-kit/signer for direct signer access.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@account-kit/react\n@account-kit/core\n@account-kit/signer\n```\n\n----------------------------------------\n\nTITLE: Package Migration Path\nDESCRIPTION: Details the migration path for aa-alchemy package to account-kit and accounts package changes\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/core/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@alchemy/aa-alchemy package in favor of @account-kit/*\n@alchemy/aa-accounts was deleted in favor of @account-kit/accounts\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner from @aa-sdk/ethers in TypeScript\nDESCRIPTION: This snippet shows how to import the AccountSigner class from the @aa-sdk/ethers package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/connect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Address Mapping - SemiModularAccountStorageOnly v2.0.0\nDESCRIPTION: Contract address for SemiModularAccountStorageOnly implementation across different chains. Focused on storage functionality with consistent implementation address.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nImplementation: 0x0000000000006E2f9d80CaEc0Da6500f005EB25A\n```\n\n----------------------------------------\n\nTITLE: Importing watchBundlerClient in TypeScript\nDESCRIPTION: Shows how to import the watchBundlerClient method from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBundlerClient } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeySigner in TypeScript\nDESCRIPTION: Shows how to import the SessionKeySigner class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/getAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Using getEntryPoint to Retrieve Entry Point Definitions in TypeScript\nDESCRIPTION: This example illustrates the usage of the `getEntryPoint` function. It retrieves the entry point definition for the Sepolia chain, first using the default version and then explicitly requesting version \"0.7.0\". Requires the `sepolia` chain object from `viem/chains`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/getEntryPoint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { getEntryPoint } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst entryPoint060 = getEntryPoint(sepolia);\nconst entryPoint070 = getEntryPoint(sepolia, { version: \"0.7.0\" });\n```\n\n----------------------------------------\n\nTITLE: Displaying MultiOwnerLightAccount v2.0.0 Addresses in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the factory and implementation addresses for MultiOwnerLightAccount v2.0.0 across various blockchain networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Chain            | Factory Address                              | Account Implementation                       |\n| ---------------- | -------------------------------------------- | -------------------------------------------- |\n| Eth Mainnet      | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Eth Sepolia      | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Polygon Mainnet  | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Polygon Mumbai   | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Polygon Amoy     | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Optimism         | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Optimism Sepolia | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Arbitrum         | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Arbitrum Sepolia | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Base             | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Base Sepolia     | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Zora Mainnet     | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Zora Sepolia     | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Fraxtal Mainnet  | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n| Fraxtal Sepolia  | `0x000000000019d2Ee9F2729A65AfE20bb0020AefC` | `0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D` |\n```\n\n----------------------------------------\n\nTITLE: Using useUser Hook in TypeScript\nDESCRIPTION: Demonstrates how to use the useUser hook to retrieve user information. It includes type definitions for the User and UseUserResult types.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useUser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUser } from \"@account-kit/react\";\nimport type { User } from \"@account-kit/signer\";\ntype UseUserResult = (User & { type: \"eoa\" | \"sca\" }) | null;\n\nconst user = useUser();\n```\n\n----------------------------------------\n\nTITLE: Importing useBundlerClient in TypeScript\nDESCRIPTION: Shows how to import the useBundlerClient hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useBundlerClient } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing AuthCard Component in TypeScript\nDESCRIPTION: Shows how to import the AuthCard component from the @account-kit/react package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/components/AuthCard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthCard } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Implementing SmartAccountAuthenticator and SmartAccountSigner Interfaces in TypeScript\nDESCRIPTION: This snippet defines the SmartAccountAuthenticator and SmartAccountSigner interfaces. SmartAccountAuthenticator extends SmartAccountSigner and includes additional methods for authentication and connection management.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/signers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SmartAccountAuthenticator extends SmartAccountSigner {\n  authenticate: () => Promise<string>;\n  connect: () => Promise<SmartAccountAuthenticator>;\n  disconnect: () => Promise<void>;\n}\n\nexport interface SmartAccountSigner {\n  signerType: string;\n  getAddress: () => Promise<string>;\n  signMessage: (msg: string | Uint8Array) => Promise<string>;\n  signTypedData: (\n    domain: TypedDataDomain,\n    types: Record<string, Array<TypedDataField>>,\n    message: Record<string, any>\n  ) => Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ERC20 Token Spend Limit with SessionKeyPermissionsBuilder\nDESCRIPTION: Demonstrates how to create a SessionKeyPermissionsBuilder instance and add an ERC20 token spend limit to it. The example shows setting a token address, spend limit amount, and refresh interval in seconds.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addErc20TokenSpendLimit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.addErc20TokenSpendLimit({\n  tokenAddress: \"0x1234\",\n  spendLimit: 1000000000000000000n,\n  refreshInterval: 3600,\n});\n```\n\n----------------------------------------\n\nTITLE: Using watchUser to Observe User Changes (TypeScript)\nDESCRIPTION: This snippet shows how to set up the watchUser method with a configuration object to monitor and respond to user changes in the client store. It first imports the required functions and configuration, then invokes watchUser with the configuration and supplies a callback (here, console.log) to handle user changes. Key dependencies: @account-kit/core, a valid config object. The callback receives the updated user object, and the function returns an unsubscribe function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchUser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchUser } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchUser(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Importing createSmartAccountClient from @aa-sdk/core\nDESCRIPTION: Shows how to import the createSmartAccountClient function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/createSmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient from Account Kit Signer\nDESCRIPTION: This code snippet demonstrates how to import the BaseSignerClient class from the @account-kit/signer package, which provides the request method functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/request.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing Light Account Client Actions in TypeScript\nDESCRIPTION: Shows how to import the lightAccountClientActions module from the smart-contracts package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/lightAccountClientActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lightAccountClientActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Using useSignerStatus Hook in TypeScript\nDESCRIPTION: Demonstrates how to use the useSignerStatus hook to get the current signer status.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSignerStatus.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\nconst signerStatus = useSignerStatus();\n```\n\n----------------------------------------\n\nTITLE: Importing TraceHeader from AA SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the TraceHeader class from the @aa-sdk/core package. The TraceHeader class is used for managing trace-related information in the AA SDK.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/TraceHeader/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TraceHeader } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing createLightAccountClient in TypeScript\nDESCRIPTION: Shows how to import the createLightAccountClient function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createLightAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Using useBundlerClient Hook in TypeScript\nDESCRIPTION: Demonstrates how to initialize and use the useBundlerClient hook to obtain a bundler client instance. The hook returns a BundlerClient object based on the current Alchemy account configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useBundlerClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useBundlerClient } from \"@account-kit/react\";\n\nconst bundlerClient = useBundlerClient();\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeySigner from Account Kit Smart Contracts\nDESCRIPTION: Shows how to import the SessionKeySigner class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/signTypedData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing convertCoinTypeToChainId Function in TypeScript\nDESCRIPTION: Shows how to import the convertCoinTypeToChainId function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/convertCoinTypeToChainId.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convertCoinTypeToChainId } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchUser from Account Kit Core\nDESCRIPTION: Shows how to import the watchUser method from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchUser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchUser } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient in TypeScript\nDESCRIPTION: Shows how to import the AlchemySignerWebClient from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/createAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication with Bundle - TypeScript\nDESCRIPTION: Demonstrates complete implementation of authentication using a credential bundle. Shows client initialization with API key and iframe configuration, followed by authentication completion using organization ID and bundle from email.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/completeAuthWithBundle.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst account = await client.completeAuthWithBundle({\n  orgId: \"user-org-id\",\n  bundle: \"bundle-from-email\",\n  connectedEventName: \"connectedEmail\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using isAlchemySmartAccountClient for Client Validation\nDESCRIPTION: Demonstrates how to use the isAlchemySmartAccountClient function to check if a client instance is an Alchemy Smart Account Client. The function returns a boolean indicating whether the client supports the required RPC methods.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/isAlchemySmartAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isAlchemySmartAccountClient } from \"@account-kit/infra\";\n\nif (isAlchemySmartAccountClient(client)) {\n  // do things with the client as an Alchemy Smart Account Client\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GetSignerType in TypeScript\nDESCRIPTION: Shows how to import the getSignerType function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getSignerType.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSignerType } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing getConnection from Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the getConnection function from the @account-kit/core package in TypeScript. This import is necessary before you can utilize the method to retrieve connection instances. The snippet does not execute any logic but ensures the required function is available in the module scope.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getConnection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getConnection } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemyAccountProvider - React TypeScript\nDESCRIPTION: This snippet demonstrates how to import the AlchemyAccountProvider component from the @account-kit/react package. This provider acts as a top-level context provider for Alchemy accounts functionality in a React application. No additional dependencies other than @account-kit/react are needed for this import statement.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/components/AlchemyAccountProvider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyAccountProvider } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing getBundlerClient in TypeScript\nDESCRIPTION: Shows how to import the getBundlerClient method from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBundlerClient } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Layout with SSR in Next.js App Directory\nDESCRIPTION: This snippet demonstrates how to implement the root layout component in Next.js App Directory with SSR support. It includes reading cookie state and passing initial state to providers.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/ssr.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { cookieToInitialState } from \"@account-kit/core\";\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport { headers } from \"next/headers\";\nimport { config } from \"./config\";\nimport \"./globals.css\";\nimport { Providers } from \"./providers\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Embedded Accounts Getting Started\",\n  description: \"Embedded Accounts Quickstart Guide\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  // This will allow us to persist state across page boundaries\n  const initialState = cookieToInitialState(\n    // the config here is just used to compute the initial state\n    config(),\n    headers().get(\"cookie\") ?? undefined\n  );\n\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <Providers initialState={initialState}>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing buildUserOperationFromTx in TypeScript\nDESCRIPTION: Shows how to import the buildUserOperationFromTx function from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/buildUserOperationFromTx.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildUserOperationFromTx } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing getSigner Function from Account Kit Core in TypeScript\nDESCRIPTION: This snippet shows how to import the getSigner function from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSigner } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing isSigner Function in TypeScript\nDESCRIPTION: Shows how to import the isSigner function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/isSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Installing AA-SDK Core Dependencies\nDESCRIPTION: Commands for installing the required AA-SDK core package using npm or yarn package managers.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/infra/sponsor-gas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @aa-sdk/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -s @aa-sdk/core\n```\n\n----------------------------------------\n\nTITLE: Importing getMAInitializationData Function in TypeScript\nDESCRIPTION: Shows how to import the getMAInitializationData function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getMAInitializationData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMAInitializationData } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Using defaultAccountState to Get Default LightAccount State (TypeScript)\nDESCRIPTION: Demonstrates how to use the imported `defaultAccountState` function to obtain the default state for a `LightAccount`. The type parameter `<\"LightAccount\">` specifies the desired account type, and the function returns the corresponding default state object. This requires the `@account-kit/core` package to be installed.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/defaultAccountState.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { defaultAccountState } from \"@account-kit/core\";\n\nconst defaultLightAccountState = defaultAccountState<\"LightAccount\">();\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeySigner in TypeScript\nDESCRIPTION: Shows how to import the SessionKeySigner class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing createDefaultAccountState from Account Kit Core\nDESCRIPTION: Shows how to import the createDefaultAccountState method from the @account-kit/core package. This method is used to create default account states for specified blockchain chains.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/createDefaultAccountState.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDefaultAccountState } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing Middleware Actions in TypeScript\nDESCRIPTION: Shows how to import the middlewareActions function from the AA-SDK core package. This function is used to configure client middleware and return middleware action objects.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/middlewareActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { middlewareActions } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing RNSignerClient for MFA Management in TypeScript\nDESCRIPTION: Shows how to import the RNSignerClient class from the React Native Signer package, which is required to use the removeMfa method for disabling MFA factors.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react-native-signer/classes/RNSignerClient/removeMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RNSignerClient } from \"@account-kit/react-native-signer\";\n```\n\n----------------------------------------\n\nTITLE: Starting Anvil Local Node\nDESCRIPTION: Command to start Anvil local Ethereum node\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/contracts/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ anvil\n```\n\n----------------------------------------\n\nTITLE: Importing isAlchemySmartAccountClient in TypeScript\nDESCRIPTION: Shows how to import the isAlchemySmartAccountClient function from the @account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/isAlchemySmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isAlchemySmartAccountClient } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing SignAuthorization Dependencies\nDESCRIPTION: Shows how to import the LocalAccountSigner from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signAuthorization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Verifying TOTP Setup\nDESCRIPTION: Verify the TOTP setup by validating a 6-digit code from the user's authenticator app.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nawait signer.verifyMfa({\n  multiFactorId, // from addMfa\n  multiFactorCode: \"123456\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient\nDESCRIPTION: Shows how to import the AlchemySignerWebClient from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/initEmailAuth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing resolveProperties from AA SDK Core in TypeScript\nDESCRIPTION: Demonstrates how to import the resolveProperties function from the @aa-sdk/core package using ES module syntax. No additional dependencies are needed other than the AA SDK itself. This setup allows direct access to the resolveProperties utility for further use in the codebase.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/resolveProperties.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { resolveProperties } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing WalletClientSigner from aa-sdk/core in TypeScript\nDESCRIPTION: This snippet shows how to import the `WalletClientSigner` class from the `@aa-sdk/core` package. This class is essential for interacting with wallet functionalities like signing typed data within the aa-sdk ecosystem.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/WalletClientSigner/signTypedData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package, which contains the getAddress method used to retrieve the current user's address.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: LightAccount v2.0.0 Contract Addresses\nDESCRIPTION: Factory and implementation addresses for LightAccount v2.0.0 smart contracts deployed across multiple blockchain networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nFactory: 0x0000000000400CdFef5E2714E63d8040b700BC24\nImplementation: 0x8E8e658E22B12ada97B402fF0b044D6A325013C7\n```\n\n----------------------------------------\n\nTITLE: Importing wrapSignatureWith6492 from @aa-sdk/core in TypeScript\nDESCRIPTION: Shows how to import the wrapSignatureWith6492 function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/wrapSignatureWith6492.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { wrapSignatureWith6492 } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing createModularAccountV2Client in TypeScript\nDESCRIPTION: Shows how to import the createModularAccountV2Client function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createModularAccountV2Client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing useAuthenticate Hook in TypeScript\nDESCRIPTION: Shows how to import the useAuthenticate hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAuthenticate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Using Logger.debug method in TypeScript\nDESCRIPTION: This example demonstrates how to use the debug method of the Logger class to log a debug message.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/debug.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.debug(\"Something is happening\");\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient from Account Kit Signer\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package to access the getMfaFactors method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/getMfaFactors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder from Account Kit Smart Contracts\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addContractAddressAccessEntry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Packages with Yarn\nDESCRIPTION: Commands to install required Account Kit packages using Yarn package manager. This includes smart contracts and infrastructure packages.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/smart-contracts\nyarn add @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `LocalAccountSigner` class from the `@aa-sdk/core` library in a TypeScript project. This import is required to utilize the local account signing capabilities of the AA-SDK.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/getAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing RNSignerClient for MFA Setup in React Native\nDESCRIPTION: Demonstrates how to import the RNSignerClient class from the Account Kit React Native Signer package to enable MFA functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react-native-signer/classes/RNSignerClient/addMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RNSignerClient } from \"@account-kit/react-native-signer\";\n```\n\n----------------------------------------\n\nTITLE: Using parseFactoryAddressFromAccountInitCode in TypeScript\nDESCRIPTION: Demonstrates how to use the parseFactoryAddressFromAccountInitCode function to extract the factory address and calldata from an initialization code string.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/parseFactoryAddressFromAccountInitCode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseFactoryAddressFromAccountInitCode } from \"@aa-sdk/core\";\n\nconst [address, calldata] =\n  parseFactoryAddressFromAccountInitCode(\"0xAddressCalldata\");\n```\n\n----------------------------------------\n\nTITLE: Using watchSignerStatus to monitor signer status changes in TypeScript\nDESCRIPTION: Demonstrates how to use the watchSignerStatus function with a configuration object and a callback function to log status changes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchSignerStatus.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSignerStatus } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchSignerStatus(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Using useUiConfig Hook with Selector in React\nDESCRIPTION: Demonstrates how to use the useUiConfig hook with a selector function to extract specific UI configuration properties (illustrationStyle and auth) from the state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useUiConfig.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUiConfig } from \"@account-kit/react\";\n\nconst { illustrationStyle, auth } = useUiConfig(\n  ({ illustrationStyle, auth }) => ({ illustrationStyle, auth })\n);\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/authenticate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing convertCoinTypeToChain Function in TypeScript\nDESCRIPTION: Example showing how to import the convertCoinTypeToChain function from the AA SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/convertCoinTypeToChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convertCoinTypeToChain } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing Split Transport in TypeScript\nDESCRIPTION: Shows how to import the split transport method from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/split.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { split } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-7677 Middleware in Smart Account Client\nDESCRIPTION: Demonstrates how to create a smart account client with ERC-7677 middleware integration. The example shows configuration with HTTP transport on the Sepolia network.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/erc7677Middleware.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient, erc7677Middleware } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst client = createSmartAccountClient({\n  transport: http(\"rpc-url\"),\n  chain: sepolia,\n  // this assumes that your RPC provider supports the ERC-7677 methods AND takes no context\n  ...erc7677Middleware(),\n});\n```\n\n----------------------------------------\n\nTITLE: Using disconnect with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to instantiate an AlchemyWebSigner with client configuration and call the disconnect method to log out a user.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/disconnect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nawait signer.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidRpcUrlError from AA SDK Core in TypeScript\nDESCRIPTION: This code snippet shows how to import the InvalidRpcUrlError class from the @aa-sdk/core package. The InvalidRpcUrlError is used to create an instance of an error with a message indicating an invalid RPC URL.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/InvalidRpcUrlError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidRpcUrlError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using getAddress with LocalAccountSigner in TypeScript\nDESCRIPTION: Demonstrates how to create a signer from a mnemonic and get its address. Uses the LocalAccountSigner class along with viem's generatePrivateKey function to generate an address in hexadecimal format.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/getAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem\";\n\nconst signer = LocalAccountSigner.mnemonicToAccountSigner(generatePrivateKey());\nconst address = await signer.getAddress();\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit Signer Package\nDESCRIPTION: Demonstrates how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/experimental_toSolanaSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing buildUserOperationFromTxs from AA-SDK Core in TypeScript\nDESCRIPTION: Shows how to import the buildUserOperationFromTxs function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/buildUserOperationFromTxs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildUserOperationFromTxs } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Version Number Declaration in Markdown\nDESCRIPTION: Markdown declaration of the alpha version number with comparison to previous version\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n# [4.0.0-alpha.0](https://github.com/alchemyplatform/aa-sdk/compare/v3.18.2...v4.0.0-alpha.0) (2024-06-19)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Auth0 Social Provider Configuration in Account Kit\nDESCRIPTION: Type definition for configuring Auth0 custom social providers in Account Kit. Specifies all available options including authProviderId, auth0Connection, display customization, and authentication mode settings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/social-providers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype SocialAuthType = {\n  type: \"social\";\n  // For Auth0 custom providers\n  authProviderId: \"auth0\";\n  // Auth0-specific connection string (e.g., \"github\", \"twitter\")\n  auth0Connection?: string;\n  // Display name for the provider button\n  displayName?: string;\n  // URL for the provider's logo\n  logoUrl: string;\n  // URL for the provider's logo in dark mode (optional, `logoUrl` is used for both light & dark mode if not provided)\n  logoUrlDark?: string;\n  // Authentication mode (popup or redirect)\n  mode: \"popup\" | \"redirect\";\n  // Optional: Specifies the requested OAuth scope\n  scope?: string;\n  // Optional: Specifies additional claims to be included in the authentication token\n  claims?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing convertChainIdToCoinType with AA SDK in TypeScript\nDESCRIPTION: Demonstrates how to import the convertChainIdToCoinType method from the @aa-sdk/core package in a TypeScript environment. No dependencies are required beyond standard TypeScript and the AA SDK. This import is a prerequisite for using the conversion utility in your codebase.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/convertChainIdToCoinType.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { convertChainIdToCoinType } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing sendUserOperation in TypeScript\nDESCRIPTION: This snippet shows how to import the sendUserOperation function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/sendUserOperation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendUserOperation } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountRequiresOwnerError in TypeScript\nDESCRIPTION: Shows how to import the AccountRequiresOwnerError class from the @aa-sdk/core package. This error is thrown when an account of a specified type requires an owner to execute operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/AccountRequiresOwnerError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountRequiresOwnerError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: This snippet shows how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addContractFunctionAccessEntry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing isAlchemyTransport in TypeScript\nDESCRIPTION: Shows how to import the isAlchemyTransport type guard function from the @account-kit/infra package. This function accepts Transport and Chain parameters and returns a boolean indicating if the transport is an Alchemy transport.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/isAlchemyTransport.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isAlchemyTransport } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing useSigner Hook from Account Kit React\nDESCRIPTION: This snippet shows how to import the useSigner hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSigner } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Using Logger Warn Method in TypeScript\nDESCRIPTION: Demonstrates how to use the warn method to log warning messages. The method accepts a primary message string and optional additional arguments.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/warn.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.warn(\"Careful...\");\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the Account Kit smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setNativeTokenSpendLimit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing getSigner from Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the getSigner function from the @account-kit/core package using ES module syntax in TypeScript. No additional dependencies are required beyond @account-kit/core itself. The import brings getSigner into scope for further usage in retrieving signer instances from client configurations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getSigner } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing bundlerActions from AA-SDK Core in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the bundlerActions method from the @aa-sdk/core package. The bundlerActions method is used to add Bundler specific actions to a viem client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/bundlerActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundlerActions } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing RNSignerClient for MFA Factor Management\nDESCRIPTION: Shows how to import the RNSignerClient class from the @account-kit/react-native-signer package to access MFA functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react-native-signer/classes/RNSignerClient/getMfaFactors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RNSignerClient } from \"@account-kit/react-native-signer\";\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Core and Infra Packages\nDESCRIPTION: Install the required packages for using Account Kit Core, including the infra package for Chain definitions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/quickstart.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/core @account-kit/infra\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -s @account-kit/core @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Using setTimeRange method with SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Demonstrates how to create a SessionKeyPermissionsBuilder instance and set a time range for session key permissions. The example sets a validity period of 15 minutes from the current time.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setTimeRange.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setTimeRange({\n  validFrom: Date.now(),\n  validUntil: Date.now() + 15 * 60 * 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Running React Native Application on iOS\nDESCRIPTION: Commands to install pods, build, and run the React Native application on iOS using npm or Yarn.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-bare-example/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# install pods (if necessary)\ncd ios\npod install\n\n# Go back to the project root\ncd ../\n\n# Build & Run Project\n\n# using npm\nnpm run ios\n\n# OR using Yarn\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Signup with Email\nDESCRIPTION: Custom implementation of passkey signup with email verification, including email validation and error handling.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/passkey-signup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user submits their email and wants to create a passkey\nconst handlePasskeySignup = (email: string) => {\n  // Important: Validate the email before proceeding\n  if (!isValidEmail(email)) {\n    // Handle validation error\n    return;\n  }\n\n  authenticate(\n    {\n      type: \"passkey\",\n      email,\n    },\n    {\n      onSuccess: () => {\n        // Success - passkey created and user authenticated\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n\n// Simple email validation function\nconst isValidEmail = (email: string) => {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing createLightAccount Function in TypeScript\nDESCRIPTION: Shows how to import the createLightAccount function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createLightAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setTimeRange.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing useConnection Hook from Account Kit React Package\nDESCRIPTION: Demonstrates how to import the useConnection hook from the @account-kit/react package. This hook returns the current connection including chain, policy, and transport information.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useConnection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnection } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner Module\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the account-kit signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/verifyMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for MFA Verification in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the account-kit signer package, which provides MFA verification functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/verifyMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient in TypeScript\nDESCRIPTION: This code snippet shows how to import the BaseSignerClient class from the @account-kit/signer package. This is the first step in using the Alchemy Signer client in your TypeScript project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing getMAInitializationData\nDESCRIPTION: Shows how to import the getMAInitializationData function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getMAInitializationData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMAInitializationData } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing splitAggregatedSignature Function in TypeScript\nDESCRIPTION: Shows how to import the splitAggregatedSignature function from the account-kit smart contracts package. This function is used to split aggregated signatures for smart contract accounts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/splitAggregatedSignature.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { splitAggregatedSignature } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient from Account Kit Signer in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package, which contains the addPasskey method for creating WebAuthn authenticators.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/addPasskey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing waitForUserOperationTransaction in TypeScript\nDESCRIPTION: Shows how to import the `waitForUserOperationTransaction` function from the `@aa-sdk/core` package. This function is essential for monitoring the status of user operations until they are confirmed on the blockchain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/waitForUserOperationTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { waitForUserOperationTransaction } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing dropAndReplaceUserOperation in TypeScript\nDESCRIPTION: Shows how to import the dropAndReplaceUserOperation method from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/dropAndReplaceUserOperation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dropAndReplaceUserOperation } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild for Native Modules\nDESCRIPTION: Commands to run Expo prebuild for Android and iOS platforms to generate native modules required by Account Kit.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild --platform android\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild --platform ios\n```\n\n----------------------------------------\n\nTITLE: Importing createAlchemyPublicRpcClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the necessary `createAlchemyPublicRpcClient` function from the `@account-kit/infra` library.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/createAlchemyPublicRpcClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { createAlchemyPublicRpcClient } from \"@account-kit/infra\";\n```\n```\n\n----------------------------------------\n\nTITLE: Importing createConfig in React Native\nDESCRIPTION: Shows how to import the createConfig method from the @account-kit/react-native package. This method is used to create an AlchemyAccountsConfig object with core settings and signer configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react-native/functions/createConfig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/react-native\";\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationEstimateGasResponse Interface in TypeScript\nDESCRIPTION: Defines the structure for the response from eth_estimateUserOperationGas RPC method, providing estimated gas usage details for a UserOperation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationEstimateGasResponse]\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package. This client is used to generate stamped whoami requests for user authentication.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/stampWhoami.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing getMSCAUpgradeToData function in TypeScript\nDESCRIPTION: This snippet shows how to import the getMSCAUpgradeToData function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getMSCAUpgradeToData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMSCAUpgradeToData } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidEntryPointError from AA SDK Core\nDESCRIPTION: Example of how to import the InvalidEntryPointError class from the @aa-sdk/core package. This error is used when an invalid entry point version is encountered for a specific blockchain chain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/InvalidEntryPointError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidEntryPointError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing defaultFeeEstimator from @aa-sdk/core (TypeScript)\nDESCRIPTION: This snippet shows how to import the `defaultFeeEstimator` function from the `@aa-sdk/core` library using an ES module import statement. This function is required to utilize the default fee estimation logic provided by the SDK when configuring a smart account client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/defaultFeeEstimator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { defaultFeeEstimator } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing default7702UserOpSigner from @aa-sdk/core\nDESCRIPTION: Imports the `default7702UserOpSigner` function from the `@aa-sdk/core` package. This function is necessary to utilize the default signing middleware for EIP-7702 compatible smart accounts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/default7702UserOpSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { default7702UserOpSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the Account Kit smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addErc20TokenSpendLimit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing pick from aa-sdk/core in TypeScript\nDESCRIPTION: Demonstrates how to import the pick function from the @aa-sdk/core package into a TypeScript file using ES module syntax. No external dependencies are required beyond @aa-sdk/core. This is a prerequisite for using pick-related functionality anywhere in the codebase.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/pick.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { pick } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Defining BigNumberish Type for Numeric Values\nDESCRIPTION: Type definition for values that can be represented as big integers, accepting hex strings, bigint, or numbers.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/utils/schema.ts:BigNumberish]\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR for Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up SSR configuration for Account Kit. It includes enabling SSR and setting up transport and chain options.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/ssr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const config = () =>\n  createConfig({\n    // required\n    transport: alchemy({ rpcUrl: \"/api/rpc\" }),\n    chain: sepolia,\n    ssr: true, // [!code ++]\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring AA-only Chain Client with Alchemy Transport\nDESCRIPTION: Example showing how to create a Light Account Alchemy client for AA-only chains using split transport configuration between Alchemy's Bundler/Paymaster RPC and a custom Node RPC provider.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/chains.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zora, alchemy } from \"@account-kit/infra\";\nimport { createLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n\nconst smartAccountClient = createLightAccountAlchemyClient({\n  transport: alchemy({\n    alchemyConnection: {\n      apiKey: \"ALCHEMY_API_KEY\",\n    },\n    nodeRpcUrl: \"ZORA_NODE_RPC_URL\",\n  }),\n  chain: zora,\n  signer: LocalAccountSigner.generatePrivateKeySigner(),\n});\n```\n\n----------------------------------------\n\nTITLE: Using watchSigner in TypeScript\nDESCRIPTION: Demonstrates how to use the watchSigner method with a configuration object to subscribe to signer changes. The method takes a config parameter and returns a function that accepts an onChange callback.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSigner } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchSigner(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Importing buildSessionKeysToRemoveStruct in TypeScript\nDESCRIPTION: Shows how to import the buildSessionKeysToRemoveStruct function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/buildSessionKeysToRemoveStruct.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildSessionKeysToRemoveStruct } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing Default 7702 Gas Estimator in TypeScript\nDESCRIPTION: Shows how to import the default7702GasEstimator from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/default7702GasEstimator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { default7702GasEstimator } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient in TypeScript\nDESCRIPTION: This snippet shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/lookupUserWithPasskey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Owners of MultiOwnerLightAccount in TypeScript\nDESCRIPTION: This snippet demonstrates how to get all current owners of a MultiOwnerLightAccount using the getOwnerAddresses method on the account object accessed from a connected client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/light-account/multi-owner-light-account.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerLightAccountClient } from \"./client\";\n\nconst owners = await multiOwnerLightAccountClient.account.getOwnerAddresses();\n```\n\n----------------------------------------\n\nTITLE: Importing setChain Method in TypeScript\nDESCRIPTION: This snippet shows how to import the setChain method from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/setChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setChain } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing createSmartAccountClientFromExisting in TypeScript\nDESCRIPTION: Shows how to import the createSmartAccountClientFromExisting function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/createSmartAccountClientFromExisting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClientFromExisting } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: SmartContractAccount Interface Definition\nDESCRIPTION: Core interface defining functionality for managing and interacting with smart contract accounts on blockchain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/account/smartContractAccount.ts:SmartContractAccount]\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the Account Kit signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/addPasskey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing getUser Function from Account Kit Core in TypeScript\nDESCRIPTION: Shows how to import the getUser function from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getUser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUser } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidModularAccountV2Mode Error from AA SDK Core\nDESCRIPTION: Shows how to import the InvalidModularAccountV2Mode error class from the AA SDK core package. This error is thrown when an invalid modular account v2 mode is provided in the application.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/InvalidModularAccountV2Mode/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidModularAccountV2Mode } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient from Account Kit Signer\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package, which contains the removeMfa method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/removeMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Technical Documentation - Multisig Plugin\nDESCRIPTION: Documentation explaining key technical aspects of the Multisig Plugin including signature storage mechanism, gas estimation considerations, and variable gas feature implementation. Details how the plugin handles threshold signatures and adapts to changing network conditions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/multisig-plugin/details.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Multisig Plugin Technical Details\n\n## Storing Signatures\n\nIn the usage guide, for a threshold of `k` signatures, we obtain the first signature with `proposeUserOperation` and the next `k-2` signatures with `signMultisigUserOperation`. In practice, since signers would likely use different clients and sign at different times, the client or dapp will need to store the first `k-1` signatures. This would be loaded and combined with the final signature to be used with `sendUserOperation`.\n\n## Gas Estimation\n\nGas estimations must be performed for user operations before the first signature is obtained. This is done in aa-sdk with built in gas and fee estimation middlewares.\n\nWe perform gas estimation assuming that the `k` signatures to be obtained are EOAs, and not other smart accounts. In the case that smart accounts own a modular account, the validation step could require more gas. If used with default gas estimation, it would cause the user operation to fail with an insufficient gas error.\n\nIn these cases, clients are expected to implement their own gas estimations for the signature validation step, and use gas overrides when first calling `proposeUserOperation`.\n\n## Variable Gas Feature\n\nFor normal User Operations, gas prices and values have to be decided before the first signer's signature (and the paymaster's signature, if used). However, since it might take time to gather the `k` signatures, it is likely that when the `k`th signature is collected, the network gas values would have changed significantly. In this case, the account would be overpaying on gas, or the User Operation would be underpriced, and the `k` signatures have to be collected again on a new User Operation.\n\nThis multisig plugin includes a variable gas feature to address this problem. The fee values selected and signed over by the first `k-1` signers are treated as a \"maximum fee\" and the `k`th signer is able to choose final fee values to use based on the current network conditions. With this feature, there is no longer a risk of overpaying, or having to re-collect the `k` signatures.\n\nHowever, note that the use of this feature would likely not work with regular paymaster services, including Alchemy's Gas Manager product.\n```\n\n----------------------------------------\n\nTITLE: Creating a Default TraceHeader in TypeScript\nDESCRIPTION: This code demonstrates how to create a default trace header. It first attempts to create a TraceHeader from existing headers, and if that fails, it creates a default one.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/TraceHeader/default.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst traceHeader =\n  TraceHeader.fromTraceHeader(headers) || TraceHeader.default();\n```\n\n----------------------------------------\n\nTITLE: Importing ChainNotFoundError from AA SDK Core\nDESCRIPTION: Shows how to import the ChainNotFoundError class from the @aa-sdk/core package. This error class is used when no chain is supplied to the client and extends the BaseError class.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/ChainNotFoundError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChainNotFoundError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for ESM Modules\nDESCRIPTION: TypeScript configuration needed to support ESM modules like the Account Kit React Native package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"module\": \"NodeNext\",\n\"moduleResolution\": \"nodenext\",\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setTimeRange.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing parseCookie Function from Account Kit Core\nDESCRIPTION: Shows how to import the parseCookie helper function from the @account-kit/core package. This function can be used to parse cookie strings and extract specific values by key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/parseCookie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseCookie } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing EntityIdOverrideError from AA SDK Core\nDESCRIPTION: Demonstrates how to import the EntityIdOverrideError class from the @aa-sdk/core package. This error is initialized with a default message indicating that the nonce key is invalid.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/EntityIdOverrideError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntityIdOverrideError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Registering Global Shims in React Native index.js\nDESCRIPTION: Code snippet for the index.js file that imports necessary global shims for crypto support in React Native, ensuring libraries that depend on globals like 'crypto' have access to them.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"node-libs-react-native/globals.js\";\nimport \"react-native-get-random-values\";\n\n// rest of index.js\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner for Authorization Signing in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner from the @account-kit/signer package, which provides the signAuthorization method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signAuthorization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing getLightAccountVersionForAccount in TypeScript\nDESCRIPTION: This snippet shows how to import the getLightAccountVersionForAccount function from the @account-kit/smart-contracts package. This function is used to retrieve the light account version configuration for a specific account and chain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getLightAccountVersionForAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLightAccountVersionForAccount } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchSigner from Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the watchSigner function from the @account-kit/core package using TypeScript's ES module syntax. The import statement assumes @account-kit/core is installed as a dependency in the consuming project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { watchSigner } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing the split Function from @aa-sdk/core (TypeScript)\nDESCRIPTION: Shows how to import the `split` function from the `@aa-sdk/core` library. This function is necessary for creating a split transport.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/split.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { split } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing parseFactoryAddressFromAccountInitCode Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `parseFactoryAddressFromAccountInitCode` function from the `@aa-sdk/core` package. This import is necessary to use the function for parsing factory details from initialization code within a TypeScript project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/parseFactoryAddressFromAccountInitCode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseFactoryAddressFromAccountInitCode } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner from AA SDK Core in TypeScript\nDESCRIPTION: Shows how to import the LocalAccountSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signAuthorization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchSigner in TypeScript\nDESCRIPTION: Shows how to import the watchSigner method from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSigner } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Using withEvent Method of TraceHeader Class in TypeScript\nDESCRIPTION: Demonstrates how to use the withEvent method to create a new trace header with a new event. It first creates or retrieves a TraceHeader instance, then calls withEvent to add a new event.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/TraceHeader/withEvent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst traceHeader =\n  TraceHeader.fromTraceHeader(headers) || TraceHeader.default();\nconst newTraceHeader = traceHeader.withEvent(\"newEvent\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Kit to Enable Passkey on Signup in TypeScript\nDESCRIPTION: This snippet shows how to configure Account Kit to prompt users to create a passkey during the signup process by setting the addPasskeyOnSignup flag to true in the configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/add-passkey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia } from \"@account-kit/infra\";\n\nexport const config = createConfig(\n  {\n    chain: sepolia,\n    apiKey: \"ALCHEMY_API_KEY\",\n  },\n  {\n    illustrationStyle: \"outline\",\n    auth: {\n      sections: [[{ type: \"email\" }], [{ type: \"passkey\" }]],\n      addPasskeyOnSignup: true, // [!code ++]\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing defaultAccountState from @account-kit/core in TypeScript\nDESCRIPTION: Shows how to import the defaultAccountState method from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/defaultAccountState.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultAccountState } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient Class in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package to use the getPasskeyStatus method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/getPasskeyStatus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing createMultiOwnerLightAccountClient in TypeScript\nDESCRIPTION: Shows how to import the createMultiOwnerLightAccountClient function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccountClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing pick from @aa-sdk/core\nDESCRIPTION: Shows how to import the pick utility function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/pick.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pick } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing EntryPointNotFoundError from AA-SDK Core\nDESCRIPTION: Shows how to import the EntryPointNotFoundError class from the @aa-sdk/core package. This error class is used when no default entry point can be found for a specified chain and entry point version.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/EntryPointNotFoundError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntryPointNotFoundError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/disconnect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing useAuthenticate from Account Kit React Package\nDESCRIPTION: Shows how to import the useAuthenticate hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAuthenticate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner in TypeScript\nDESCRIPTION: Shows how to import the LocalAccountSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/privateKeyToAccountSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient Class from Account-Kit Signer\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package to access the getUser method. The method returns either a User object or null if no user is set.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/getUser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidUserOperationError from AA SDK Core in TypeScript\nDESCRIPTION: This code snippet shows how to import the InvalidUserOperationError class from the @aa-sdk/core package. This class is used to create error instances for invalid user operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/InvalidUserOperationError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidUserOperationError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing TraceHeader Class in TypeScript\nDESCRIPTION: Shows how to import the TraceHeader class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/TraceHeader/default.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TraceHeader } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler for Crypto Libraries in React Native\nDESCRIPTION: Configuration for the Metro bundler to properly resolve crypto-related dependencies in React Native. Sets up aliases, extra node modules, and resolver configurations to support crypto libraries.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig, mergeConfig } = require(\"@react-native/metro-config\");\nconst path = require(\"path\");\nconst projectRoot = __dirname;\nconst config = getDefaultConfig(projectRoot);\n\n// Add aliases for file-system import based modules\nconst ALIASES = {\n  \"@noble/hashes/crypto\": path.resolve(\n    projectRoot, // <-- Adjust this as fits your project setup\n    \"node_modules/@noble/hashes/crypto.js\"\n  ),\n};\n\nconfig.resolver.extraNodeModules = {\n  ...config.resolver.extraNodeModules,\n  ...require(\"node-libs-react-native\"),\n  crypto: require.resolve(\"crypto-browserify\"),\n  stream: require.resolve(\"stream-browserify\"),\n};\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (ALIASES[moduleName]) {\n    return {\n      filePath: ALIASES[moduleName],\n      type: \"sourceFile\",\n    };\n  }\n  return context.resolveRequest(context, moduleName, platform);\n};\n\n// Important to allow importing package exports\nconfig.resolver.unstable_enablePackageExports = true;\n\nconfig.resolver.unstable_conditionNames = [\n  \"browser\",\n  \"require\",\n  \"react-native\",\n];\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Importing createMultiOwnerModularAccount Function in TypeScript\nDESCRIPTION: Shows how to import the createMultiOwnerModularAccount function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerModularAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccount } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Server for React Native Project\nDESCRIPTION: Commands to start the Metro JavaScript bundler for a React Native project using npm or Yarn.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-bare-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm start\n\n# OR using Yarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Importing WaitForUserOperationError in TypeScript\nDESCRIPTION: Shows how to import the WaitForUserOperationError class from the @aa-sdk/core package. This class is used for handling errors related to waiting for user operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/WaitForUserOperationError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WaitForUserOperationError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing pluginManagerActions from Account Kit Smart Contracts\nDESCRIPTION: Shows how to import the pluginManagerActions function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/pluginManagerActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginManagerActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing Logger from @aa-sdk/core in TypeScript\nDESCRIPTION: Shows how to import the Logger module from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/setLogFilter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package. This import is required to access the getConfig method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getConfig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Package Import Reference in Markdown\nDESCRIPTION: Reference to the recommended packages @account-kit/react and @account-kit/core for easier integration with Account Kit smart contracts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::tip\nFor the easiest integration, we recommend using [`@account-kit/react`](/react/overview) or [`@account-kit/core`](/core/overview) which support all of the contracts in this package by default.\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing isSigner from aa-sdk/core in TypeScript\nDESCRIPTION: Demonstrates how to import the isSigner method from the @aa-sdk/core package. This import enables access to the utility function for checking if an object is a SmartAccountSigner. Requires the @aa-sdk/core package as a dependency.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/isSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { isSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient for MFA Setup in TypeScript\nDESCRIPTION: Demonstrates how to import the AlchemySignerWebClient class from the @account-kit/signer package for MFA setup purposes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/addMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing the parseCookie Function in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import the `parseCookie` function from the `@account-kit/core` package. This function is a helper used to extract a specific value from a cookie string based on its key. It requires the `@account-kit/core` package as a dependency.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/parseCookie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseCookie } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing EthersProviderAdapter from @aa-sdk/ethers in TypeScript\nDESCRIPTION: This code snippet shows how to import the EthersProviderAdapter from the @aa-sdk/ethers package. This import is necessary to use the fromEthersProvider method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/fromEthersProvider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EthersProviderAdapter } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Using pick to extract object properties\nDESCRIPTION: Demonstrates how to use the pick function to create a new object containing only specified key-value pairs from an existing object. In this example, it extracts only the 'foo' property from an object with 'foo' and 'bar' properties.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/pick.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pick } from \"@aa-sdk/core\";\n\nconst picked = pick(\n  {\n    foo: \"foo\",\n    bar: \"bar\",\n  },\n  [\"foo\"]\n); // { foo: \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Importing SolanaSigner in TypeScript\nDESCRIPTION: This snippet shows how to import the SolanaSigner from the @account-kit/signer package. The SolanaSigner is likely used in conjunction with the addSponsorship method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/SolanaSigner/addSponsorship.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SolanaSigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signTypedData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeySigner in TypeScript\nDESCRIPTION: Shows how to import the SessionKeySigner class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Using getMSCAUpgradeToData in TypeScript\nDESCRIPTION: Demonstrates how to use getMSCAUpgradeToData with a light account client to generate upgrade data for Multi-Signature Contract Account conversion.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getMSCAUpgradeToData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountClient, getMSCAUpgradeToData } from \"@account-kit/smart-contracts\";\n\nconst client = createLightAccountClient(...);\nconst upgradeData = await getMSCAUpgradeToData(client, {});\n```\n\n----------------------------------------\n\nTITLE: Importing buildSessionKeysToRemoveStruct in TypeScript\nDESCRIPTION: Shows how to import the buildSessionKeysToRemoveStruct function from the Account Kit smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/buildSessionKeysToRemoveStruct.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildSessionKeysToRemoveStruct } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing getBundlerClient Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `getBundlerClient` function from the `@account-kit/core` package in a TypeScript project. This import is necessary to use the function for retrieving the BundlerClient.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { getBundlerClient } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop and Replace for User Operations in React Native\nDESCRIPTION: This code snippet demonstrates how to use the useDropAndReplaceUserOperation() hook to drop and replace a user operation with higher fees. It utilizes the @account-kit/react-native library and React Native components to create a button that sends a user operation and then replaces it.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/using-smart-accounts/retry-user-operations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, Pressable, Text } from \"react-native\";\nimport {\n  useDropAndReplaceUserOperation,\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react-native\";\n\nexport function ComponentWithDropAndReplaceUO() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperationAsync, isSendingUserOperation } =\n    useSendUserOperation({\n      client,\n    });\n\n  const { dropAndReplaceUserOperation, isDroppingAndReplacingUserOperation } =\n    useDropAndReplaceUserOperation({\n      client,\n      onSuccess: ({ hash, request }) => {\n        // [optional] Do something with the hash and request\n      },\n      onError: (error) => {\n        // [optional] Do something with the error\n      },\n      // [optional] ...additional mutationArgs\n    });\n\n  return (\n    <View>\n      <Pressable\n        onPress={async () => {\n          const { request } = await sendUserOperationAsync({\n            uo: {\n              target: \"0xTARGET_ADDRESS\",\n              data: \"0x\",\n              value: 0n,\n            },\n          });\n\n          dropAndReplaceUserOperation({\n            uoToDrop: request,\n          });\n        }}\n        disabled={isSendingUserOperation || isDroppingAndReplacingUserOperation}\n      >\n        <View>\n          <Text>\n            {isSendingUserOperation\n              ? \"Sending...\"\n              : isDroppingAndReplacingUserOperation\n              ? \"Replacing...\"\n              : \"Send then Replace UO\"}\n          </Text>\n        </View>\n      </Pressable>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing getDefaultMultisigModularAccountFactoryAddress from @account-kit/smart-contracts\nDESCRIPTION: Shows how to import the getDefaultMultisigModularAccountFactoryAddress utility method from the @account-kit/smart-contracts package. This method returns the default address for the multisig modular account factory for a specific blockchain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getDefaultMultisigModularAccountFactoryAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultMultisigModularAccountFactoryAddress } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient from @account-kit/signer in TypeScript\nDESCRIPTION: This code snippet shows how to import the BaseSignerClient class from the @account-kit/signer package. This import is necessary to use the lookupUserByEmail method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/lookupUserByEmail.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/lookupUserWithPasskey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient from Account Kit Signer\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package to access the stampGetOrganization method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/stampGetOrganization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidNonceKeyError in TypeScript\nDESCRIPTION: This code snippet shows how to import the InvalidNonceKeyError class from the @aa-sdk/core package. The InvalidNonceKeyError is used to create error instances for invalid nonce keys.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/InvalidNonceKeyError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidNonceKeyError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Setting up Global CSS\nDESCRIPTION: CSS configuration to import Tailwind CSS and custom configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/quickstart.mdx#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@config '../../tailwind.config.ts';\n```\n\n----------------------------------------\n\nTITLE: Using Account Kit Quickstart Template\nDESCRIPTION: Command to create a new Expo project using the Account Kit quickstart template.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app@latest --template https://github.com/alchemyplatform/account-kit-expo-quickstart\n```\n\n----------------------------------------\n\nTITLE: Running React Native App on Android\nDESCRIPTION: Commands to start the React Native application on Android using either npm or Yarn.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/rn-signer/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run android\n\n# OR using Yarn\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Importing ERC-7677 Middleware in TypeScript\nDESCRIPTION: Shows how to import the erc7677Middleware from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/erc7677Middleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { erc7677Middleware } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Session Key Plugin Permission View Functions in Solidity\nDESCRIPTION: Defines the view functions provided by the Session Key Plugin for reading permission information, including access control, time range, and various spend limits.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nenum ContractAccessControlType {\n    ALLOWLIST, // Allowlist is default\n    DENYLIST,\n    ALLOW_ALL_ACCESS // Disables contract access control, any address and selector are allowed.\n}\n\n// Struct returned by view functions to provide information about a session key's spend limit.\n// Used for native token, ERC-20, and gas spend limits.\nstruct SpendLimitInfo {\n    bool hasLimit;\n    uint256 limit;\n    uint256 limitUsed;\n    uint48 refreshInterval;\n    uint48 lastUsedTime;\n}\n\n/// @notice Get the access control type for a session key on an account.\n/// @param account The account to check.\n/// @param sessionKey The session key to check.\n/// @return The access control type for the session key on the account.\nfunction getAccessControlType(address account, address sessionKey)\n    external\n    view\n    returns (ContractAccessControlType);\n\n/// @notice Get an access control entry for a session key on an account.\n/// @param account The account to check.\n/// @param sessionKey The session key to check.\n/// @param targetAddress The target address to check.\n/// @return isOnList Whether the target address is on the list (either allowlist or blocklist depending on the\n/// access control type).\n/// @return checkSelectors Whether the target address should be checked for selectors during permissions\n/// enforcement.\nfunction getAccessControlEntry(address account, address sessionKey, address targetAddress)\n    external\n    view\n    returns (bool isOnList, bool checkSelectors);\n\n/// @notice Get whether a selector is on the access control list for a session key on an account.\n/// @param account The account to check.\n/// @param sessionKey The session key to check.\n/// @param targetAddress The target address to check.\n/// @param selector The selector to check.\n/// @return isOnList Whether the selector is on the list (either allowlist or blocklist depending on the\n/// access control type).\nfunction isSelectorOnAccessControlList(\n    address account,\n    address sessionKey,\n    address targetAddress,\n    bytes4 selector\n) external view returns (bool isOnList);\n\n/// @notice Get the active time range for a session key on an account.\n/// @param account The account to check.\n/// @param sessionKey The session key to check.\n/// @return validAfter The time after which the session key is valid.\n/// @return validUntil The time until which the session key is valid.\nfunction getKeyTimeRange(address account, address sessionKey)\n    external\n    view\n    returns (uint48 validAfter, uint48 validUntil);\n\n/// @notice Get the native token spend limit for a session key on an account.\n/// @param account The account to check.\n/// @param sessionKey The session key to check.\n/// @return A struct with fields describing the state of native token spending limits on this session key.\nfunction getNativeTokenSpendLimitInfo(address account, address sessionKey)\n    external\n    view\n    returns (SpendLimitInfo memory);\n\n/// @notice Get the gas spend limit for a session key on an account.\n/// Note that this spend limit is measured in wei, not units of gas.\n/// @param account The account to check.\n/// @param sessionKey The session key to check.\n/// @return info A struct with fields describing the state of gas spending limits on this session key.\n/// @return shouldReset Whether this session key must be reset by calling `resetSessionKeyGasLimitTimestamp`\n/// before it can be used.\nfunction getGasSpendLimit(address account, address sessionKey)\n    external\n    view\n    returns (SpendLimitInfo memory info, bool shouldReset);\n\n/// @notice Get the ERC20 spend limit for a session key on an account.\n/// @param account The account to check.\n/// @param sessionKey The session key to check.\n/// @param token The token to check.\n/// @return A struct with fields describing the state of ERC20 spending limits on this session key.\nfunction getERC20SpendLimitInfo(address account, address sessionKey, address token)\n    external\n    view\n    returns (SpendLimitInfo memory);\n\n/// @notice Get the required paymaster address for a session key on an account, if any.\n/// @param account The account to check.\n/// @param sessionKey The session key to check.\n/// @return The required paymaster address for this session key on this account, or the zero address if the\n/// rule is disabled.\nfunction getRequiredPaymaster(address account, address sessionKey) external view returns (address);\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner from AA SDK Core\nDESCRIPTION: This snippet shows how to import the LocalAccountSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing TraceHeader from @aa-sdk/core in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import the `TraceHeader` class from the `@aa-sdk/core` library. This import is a prerequisite for using the `TraceHeader` class, particularly for instantiating it with trace identifiers and state information as described in the documentation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/TraceHeader/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { TraceHeader } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient Class from Account Kit\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package for OAuth initialization.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/initOauth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing parseFactoryAddressFromAccountInitCode in TypeScript\nDESCRIPTION: Shows how to import the parseFactoryAddressFromAccountInitCode function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/parseFactoryAddressFromAccountInitCode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseFactoryAddressFromAccountInitCode } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing createConfig from Account Kit React Native\nDESCRIPTION: Shows how to import the createConfig function from the @account-kit/react-native package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react-native/functions/createConfig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/react-native\";\n```\n\n----------------------------------------\n\nTITLE: Updated signTypedData Method Signature\nDESCRIPTION: This snippet shows the signature change for the signTypedData method on SmartAccountSigner, which now matches the signature found on SmartContractAccount and viem's Account interface.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/migration-guide.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n(params: SignTypedDataParams) => Promise<Hex>; // [!code --]\n\n<\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string = string\n>(\n  params: TypedDataDefinition<TTypedData, TPrimaryType>\n) => Promise<Hex>;\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner from AA-SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the LocalAccountSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/mnemonicToAccountSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Changelog Update Entry\nDESCRIPTION: A markdown changelog entry documenting version changes and features added to the AA-SDK project. Includes information about new components, UI improvements, and breaking changes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **aa-sdk/core:** add default arguments for erc7677 middleware ([#839](https://github.com/alchemyplatform/aa-sdk/issues/839)) ([848f316](https://github.com/alchemyplatform/aa-sdk/commit/848f3168d8b679215b841a45ff49735cd8ac37a7))\n- **aa-sdk/core:** add erc7677 middleware ([#823](https://github.com/alchemyplatform/aa-sdk/issues/823)) ([4a30808](https://github.com/alchemyplatform/aa-sdk/commit/4a30808fb6df51a59be861dab523dbd45badf26a))\n[...additional entries...]\n\n### BREAKING CHANGES\n\n- moves the chain definitions out of aa-sdk core and into account-kit/infra\n- @alchemy/plugingen has been moved to @account-kit/plugingen\n- @alchemy/aa-_ packages have been renamed to @aa-sdk/_\n- this removes the @alchemy/aa-alchemy package in favor of @account-kit/*\n- @alchemy/aa-accounts was deleted in favor of @account-kit/accounts\n```\n\n----------------------------------------\n\nTITLE: Importing checkGasSponsorshipEligibility in TypeScript\nDESCRIPTION: This snippet shows how to import the checkGasSponsorshipEligibility function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/checkGasSponsorshipEligibility.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { checkGasSponsorshipEligibility } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidNonceKeyError in TypeScript\nDESCRIPTION: This code snippet shows how to import the InvalidNonceKeyError class from the @aa-sdk/core package. This class is used to create error messages for invalid nonce keys in the AA SDK.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/InvalidNonceKeyError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidNonceKeyError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing useAlchemyAccountContext Hook in TypeScript\nDESCRIPTION: Shows how to import the useAlchemyAccountContext hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAlchemyAccountContext.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAlchemyAccountContext } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient from @account-kit/signer\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/targetPublicKey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Alchemy Account Kit\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package. This class contains the getConfig method which returns signer configuration data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getConfig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing getDefaultMultisigModularAccountFactoryAddress in TypeScript\nDESCRIPTION: This snippet shows how to import the getDefaultMultisigModularAccountFactoryAddress function from the @account-kit/smart-contracts package. The function takes a Chain object as input and returns an Address.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getDefaultMultisigModularAccountFactoryAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultMultisigModularAccountFactoryAddress } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient for MFA Verification in TypeScript\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package to use the verifyMfa method for multi-factor authentication verification.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/verifyMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Updating Expo Installation\nDESCRIPTION: Command to update Expo to the latest version with fixes\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-expo-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn expo install expo@latest --fix\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeySigner in TypeScript\nDESCRIPTION: Shows how to import the SessionKeySigner class from the account-kit smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/signMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing multisigPluginActions in TypeScript\nDESCRIPTION: Shows how to import the multisigPluginActions method from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/multisigPluginActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multisigPluginActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Installing Supporting Dependencies for Signer Package\nDESCRIPTION: Commands to install additional dependencies required for the Signer package to work correctly in React Native.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-mmkv zustand abitype react-native-inappbrowser-reborn\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-mmkv zustand abitype react-native-inappbrowser-reborn\n```\n\n----------------------------------------\n\nTITLE: Installing Crypto Libraries\nDESCRIPTION: Command to install necessary crypto-related dependencies for React Native\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-expo-example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn expo install node-libs-react-native crypto-browserify stream-browserify react-native-get-random-values\n```\n\n----------------------------------------\n\nTITLE: Importing IncompatibleClientError from AA SDK Core\nDESCRIPTION: Shows how to import the IncompatibleClientError class from the @aa-sdk/core package. This error class is used when a client type doesn't match the expected type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/IncompatibleClientError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IncompatibleClientError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing toRecord from @aa-sdk/core in TypeScript\nDESCRIPTION: Shows how to import the toRecord function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/toRecord.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toRecord } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner from @aa-sdk/ethers in TypeScript\nDESCRIPTION: This snippet shows how to import the `AccountSigner` class from the `@aa-sdk/ethers` package. This class is essential for integrating Alchemy's AA-SDK functionalities with Ethers.js-based applications.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/getBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing TraceHeader from AA SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the TraceHeader class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/TraceHeader/toTraceHeader.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TraceHeader } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient - TypeScript\nDESCRIPTION: Shows how to import the AlchemySignerWebClient from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/completeAuthWithBundle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing UpgradesNotSupportedError in TypeScript\nDESCRIPTION: This snippet shows how to import the UpgradesNotSupportedError class from the @aa-sdk/core package. The class is used to create errors when upgrades are not supported for a specific account type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/UpgradesNotSupportedError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UpgradesNotSupportedError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing createMultiOwnerLightAccountAlchemyClient in TypeScript\nDESCRIPTION: This snippet shows how to import the createMultiOwnerLightAccountAlchemyClient function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccountAlchemyClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing checkGasSponsorshipEligibility from AA-SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the checkGasSponsorshipEligibility function from the @aa-sdk/core module. Importing this method is a prerequisite for performing gas sponsorship eligibility checks in smart account workflows. No configuration is required beyond having the @aa-sdk/core as a project dependency.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/checkGasSponsorshipEligibility.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { checkGasSponsorshipEligibility } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing IncorrectAccountType Class from AA-SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the IncorrectAccountType class from the @aa-sdk/core module. This class is used to create error objects for account type mismatches.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/IncorrectAccountType/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IncorrectAccountType } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Splitting AA-Alchemy into Account Kit Packages\nDESCRIPTION: Refactors the aa-alchemy package by splitting it into separate account-kit packages for better modularity.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nsplit aa-alchemy into account-kit packages\n```\n\n----------------------------------------\n\nTITLE: Using watchUser with Configuration\nDESCRIPTION: Demonstrates how to use the watchUser method with a configuration object to monitor user changes. The method takes a config parameter and returns a function that accepts a callback for handling user updates.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchUser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchUser } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchUser(config)(console.log);\n```\n\n----------------------------------------\n\nTITLE: Defining Condition Structure in TypeScript for Smart Wallet Policy Rules\nDESCRIPTION: This snippet defines the structure of conditions within policy rules. It includes different types of conditions such as field comparisons, batch value limits, and gas limits, with their respective parameters and comparators.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/policies/offchain-policy-configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype Condition =\n  | {\n      type: \"field\";\n      // This specifies where to evaluate the condition\n      // for EVM. `call` gives you the most flexibility\n      // on enforcement.\n      field_source:\n        | \"call\" // EVM only\n        | \"user_operation\" // EVM only\n        | \"eth_transaction\" // EVM only\n        | \"solana_transaction\" // Solana only\n        | \"solana_instruction\" // Solana only\n        | \"spl_transaction\"; // Solana only\n      field: string;\n      // should only be set when the field_source is `call`\n      // and field is `data`\n      abi?: JSON;\n      comparator: \"==\" | \"!=\" | \"<\" | \"<=\" | \">\" | \">=\" | \"in\";\n      // the value to compare the field against\n      value: string | number | string[];\n    }\n  | {\n      type: \"batch_value\";\n      max_batch_value: string;\n    }\n  | {\n      type: \"gas_limit\";\n      max_gas_limit: string;\n    };\n```\n\n----------------------------------------\n\nTITLE: Using validateMultiFactors Method\nDESCRIPTION: Demonstrates how to initialize AlchemyWebSigner and validate MFA factors with a 6-digit code. Shows complete setup including client configuration and MFA validation process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/validateMultiFactors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\n// After MFA is required and user provides code\nconst user = await signer.validateMultiFactors({\n  multiFactorCode: \"123456\", // 6-digit code from authenticator app\n  multiFactorId: \"factor-id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemyWebSigner in TypeScript\nDESCRIPTION: Shows how to import the AlchemyWebSigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemyWebSigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing Alchemy Signer Base Class\nDESCRIPTION: Import statement for the BaseAlchemySigner class from the account-kit signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/disconnect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing defaultUserOpSigner in TypeScript\nDESCRIPTION: This snippet shows how to import the defaultUserOpSigner function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/defaultUserOpSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultUserOpSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationRequest Interface for RPC Requests\nDESCRIPTION: Interface for the request format required when submitting a UserOperation via eth_sendUserOperation RPC method, including all necessary fields like sender, nonce, gas limits, and fees.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationRequest]\n```\n\n----------------------------------------\n\nTITLE: Importing buildUserOperation in TypeScript\nDESCRIPTION: Shows how to import the buildUserOperation function from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/buildUserOperation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildUserOperation } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for MFA Management in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the Account Kit signer package, which provides MFA management functionality including factor removal.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/removeMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Uninstalling SessionKeyPlugin from Modular Account\nDESCRIPTION: Shows how to use the pluginManagerActions to uninstall a plugin, specifically the SessionKeyPlugin, from a Modular Account. Includes a warning about potential account bricking.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/manage-plugins/install-plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chain, modularAccountClient } from \"./client\";\nimport { SessionKeyPlugin } from \"@account-kit/smart-contracts\";\n\nconst { hash } = await modularAccountClient.uninstallPlugin({\n  pluginAddress: SessionKeyPlugin.meta.addresses[chain.id],\n});\n\nawait modularAccountClient.waitForUserOperationTransaction({ hash });\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient for MFA Factor Retrieval in TypeScript\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package, which is needed to access the getMfaFactors method for retrieving MFA factors.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/getMfaFactors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Sending Email OTP\nDESCRIPTION: Initiate email OTP authentication by sending a one-time password to user's email.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nsigner.authenticate({\n  type: \"email\",\n  emailMode: \"otp\",\n  email: \"user@mail.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SmartAccountClient with Custom RPC Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a SmartAccountClient using a custom RPC provider URL. It uses the createSmartAccountClient function from @aa-sdk/core and sets up an HTTP transport with a specific URL.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/third-party/bundlers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst client = createSmartAccountClient({\n  transport: http(\"https://polygon-mumbai.g.alchemy.com/v2/demo\"),\n  chain: sepolia,\n});\n```\n\n----------------------------------------\n\nTITLE: Using multiOwnerLightAccountClientActions with Alchemy Smart Account Client\nDESCRIPTION: This example demonstrates how to use the multiOwnerLightAccountClientActions function to extend an Alchemy smart account client. It includes importing necessary functions, creating a smart account client, and extending it with multi-owner light account actions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/multiOwnerLightAccountClientActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerLightAccountClientActions, createMultiOwnerLightAccount } from \"@account-kit/smart-contracts\";\nimport { createAlchemySmartAccountClient } from \"@account-kit/infra\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst smartAccountClient = createAlchemySmartAccountClient({\naccount: await createMultiOwnerLightAccount(...),\napiKey: \"your-api-key\",\nchain: sepolia,\n}).extend(multiOwnerLightAccountClientActions);\n```\n\n----------------------------------------\n\nTITLE: Installing Crypto Shims for React Native\nDESCRIPTION: Commands to install necessary shim dependencies for using crypto libraries in React Native, including node-libs-react-native and crypto-browserify.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save node-libs-react-native crypto-browserify stream-browserify react-native-get-random-values\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add node-libs-react-native crypto-browserify stream-browserify react-native-get-random-values\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPluginActions in TypeScript\nDESCRIPTION: Shows how to import the sessionKeyPluginActions method from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/sessionKeyPluginActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sessionKeyPluginActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyEnhancedApiActions in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `alchemyEnhancedApiActions` function from the `@account-kit/infra` package. This import is necessary to use the function for decorating Alchemy Smart Account Clients.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemyEnhancedApiActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { alchemyEnhancedApiActions } from \"@account-kit/infra\";\n```\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addContractAddressAccessEntry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner in TypeScript\nDESCRIPTION: Shows how to import the LocalAccountSigner from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/mnemonicToAccountSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient in TypeScript\nDESCRIPTION: This code snippet shows how to import the BaseSignerClient class from the @account-kit/signer package. This import is necessary to use the addMfa method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/addMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing useAccount Hook in TypeScript\nDESCRIPTION: This snippet shows how to import the useAccount hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccount } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing useUser Hook in TypeScript\nDESCRIPTION: Shows how to import the useUser hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useUser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUser } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Defining ToSmartContractAccountParams Type in TypeScript\nDESCRIPTION: Defines the parameters for SmartContractAccount instantiation, including Transport, Chain, EntryPointDef, and other base functionalities.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/account/smartContractAccount.ts:ToSmartContractAccountParams]\n```\n\n----------------------------------------\n\nTITLE: Importing AccountRequiresOwnerError from AA SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the AccountRequiresOwnerError class from the @aa-sdk/core module. This class is used to create errors indicating that an account requires an owner for execution.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/AccountRequiresOwnerError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountRequiresOwnerError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeySigner\nDESCRIPTION: Shows how to import the SessionKeySigner class from the @account-kit/smart-contracts package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/signMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing multisigPluginActions in TypeScript\nDESCRIPTION: This snippet shows how to import the multisigPluginActions function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/multisigPluginActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multisigPluginActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing createLightAccountAlchemyClient in TypeScript\nDESCRIPTION: This snippet shows how to import the createLightAccountAlchemyClient function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createLightAccountAlchemyClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing WalletClientSigner from @aa-sdk/core\nDESCRIPTION: This snippet shows how to import the WalletClientSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/WalletClientSigner/signMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Account Packages with Yarn\nDESCRIPTION: Commands to install @account-kit/smart-contracts and @account-kit/infra packages using Yarn package manager.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/smart-contracts\nyarn add @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient in TypeScript\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/submitOtpCode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing SolanaSigner for Transaction Signing in TypeScript\nDESCRIPTION: Imports the SolanaSigner class from the @account-kit/signer package, which provides functionality for adding signatures to Solana transactions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/SolanaSigner/addSignature.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SolanaSigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Import statement for the BaseAlchemySigner class from the Account Kit signer package. This is required before using the on method for event subscription.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/on.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Installing Supporting Dependencies for Account Kit Signer\nDESCRIPTION: Commands for installing additional dependencies required for the Account Kit Signer package to work correctly in React Native, including react-native-mmkv, zustand, abitype, and react-native-inappbrowser-reborn.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-mmkv zustand abitype react-native-inappbrowser-reborn\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-mmkv zustand abitype react-native-inappbrowser-reborn\n```\n\n----------------------------------------\n\nTITLE: Middleware Execution Order List\nDESCRIPTION: Ordered list of middleware components that run during Smart Account Client operations, including dummy paymaster data generation, fee estimation, gas estimation, custom middleware, paymaster data handling, and user operation simulation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/concepts/middleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n1. dummyPaymasterAndData - Generates a dummy paymaster and data for gas estimation if using a paymaster (default: noop)\n2. feeEstimator - Estimates the fees for a user operation\n3. gasEstimator - Estimates the gas limits for a user operation\n4. customMiddleware - Allows you define custom middleware to run before requesting sponsorship\n5. paymasterAndData - Requests a gas sponsorship from a paymaster\n6. userOperationSimulator - Simulates a user operation to check if it will be successful\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the Account Kit signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/removeMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the Account Kit signer module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/authenticate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing MultiOwner Plugin Actions in TypeScript\nDESCRIPTION: Shows how to import the multiOwnerPluginActions module from the Account Kit smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/multiOwnerPluginActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerPluginActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing TransactionMissingToParamError in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the TransactionMissingToParamError class from the @aa-sdk/core module. This class is used to handle errors related to missing 'to' addresses in transaction requests.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/TransactionMissingToParamError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TransactionMissingToParamError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing createMultiOwnerLightAccountClient in TypeScript\nDESCRIPTION: Shows how to import the createMultiOwnerLightAccountClient function from the smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccountClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing useAddPasskey Hook in TypeScript\nDESCRIPTION: Shows how to import the useAddPasskey hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAddPasskey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAddPasskey } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing useMFA Hook in TypeScript\nDESCRIPTION: Shows how to import the useMFA hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useMFA.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMFA } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: This snippet shows how to import the BaseAlchemySigner class from the @account-kit/signer package. This is typically the first step in using the BaseAlchemySigner in your TypeScript project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing NoAlchemyAccountContextError in TypeScript\nDESCRIPTION: This snippet shows how to import the NoAlchemyAccountContextError class from the @account-kit/react package. The error is used to indicate that a specific hook must be used within an AlchemyAccountProvider.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/classes/NoAlchemyAccountContextError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NoAlchemyAccountContextError } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing createSmartAccountClient from @aa-sdk/core in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `createSmartAccountClient` function from the `@aa-sdk/core` package in a TypeScript project. This function is the entry point for creating a smart account client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/createSmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Adding TOTP MFA Factor\nDESCRIPTION: Initialize a new TOTP multi-factor authentication for a logged-in user. Returns factor details including ID and setup information for display to user.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/authentication/mfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signer } from \"./signer\";\n\nconst { multiFactors } = await signer.addMFA({\n  multiFactorType: \"totp\",\n});\n\n// Display the QR code or secret to the user\nconst totpUrl = result?.multiFactors[0].multiFactorTotpUrl;\nconst multiFactorId = result?.multiFactors[0].multiFactorId;\n```\n\n----------------------------------------\n\nTITLE: Importing IncorrectAccountType from AA-SDK Core\nDESCRIPTION: Shows how to import the IncorrectAccountType error class from the @aa-sdk/core package. This class is used to create error objects when there is a mismatch between expected and actual account types.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/IncorrectAccountType/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IncorrectAccountType } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Imports the BaseAlchemySigner class from the @account-kit/signer package, which provides the signMessage method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit Signer\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/preparePopupOauth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Passkey Login in Account Kit UI Components (React)\nDESCRIPTION: This snippet demonstrates how to configure Alchemy's Account Kit pre-built UI components to include Passkey Login as an authentication method. It defines an `AlchemyAccountsUIConfig` object specifying 'passkey' (and optionally 'email') in the auth sections and integrates this UI configuration with the main `createConfig` function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/passkey-login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        // Include passkey login in a section\n        { type: \"passkey\" },\n\n        // You can combine with other authentication methods\n        { type: \"email\" },\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n  },\n  uiConfig\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Importing useClientActions in TypeScript\nDESCRIPTION: Shows how to import the useClientActions hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useClientActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useClientActions } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing RNAlchemySigner in React Native\nDESCRIPTION: Shows how to import the RNAlchemySigner factory function from the @account-kit/react-native-signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react-native-signer/functions/RNAlchemySigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RNAlchemySigner } from \"@account-kit/react-native-signer\";\n```\n\n----------------------------------------\n\nTITLE: Light Account Client Setup\nDESCRIPTION: Shows the initialization of a Light Account client with Alchemy provider and necessary configurations including chain selection and signer setup.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/upgrading-to-modular-account.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nexport const lightAccountClient = await createLightAccountAlchemyClient({\n  transport: alchemy({ apiKey: \"YOUR_API_KEY\" }),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Packages for React Native Project\nDESCRIPTION: Commands to install project dependencies and build packages from the root of the monorepo.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-bare-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Dependencies\nyarn install\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Build packages\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: This snippet shows how to import the BaseAlchemySigner class from the @account-kit/signer package. This is a prerequisite for using the addMfa method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/addMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Account Kit Overview Image in Markdown/JSX\nDESCRIPTION: JSX code to render an overview image for the Account Kit documentation. This image provides a visual representation of the Account UI overview.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<img\n  src=\"/images/account-kit-doc-overview.png\"\n  alt=\"alchemy account ui overview\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Building React Native Project\nDESCRIPTION: Command to build and run the React Native project on Android.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native run-android\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationCallData Interface for Smart Account Transactions\nDESCRIPTION: Type definition representing a user's intent or desired transaction outcome, including target address, transaction calldata, and ETH value. Used as input for the sendUserOperation method on SmartAccountClient.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationCallData]\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setNativeTokenSpendLimit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Running React Native Application on Android\nDESCRIPTION: Commands to start the React Native application on Android using npm or Yarn.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-bare-example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run android\n\n# OR using Yarn\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/toViemAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner in TypeScript\nDESCRIPTION: Shows how to import the AccountSigner class from the @aa-sdk/ethers package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/getBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/exportWallet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Transfer Gas Costs Comparison\nDESCRIPTION: Comparison of gas costs for ERC-20 token transfers using different smart contract wallet implementations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/gas-benchmarks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|                            |  Gas Cost |\n| :------------------------- | --------: |\n| Alchemy Modular Account v2 | `182,665` |\n| Biconomy Nexus             | `188,136` |\n| ZeroDev Kernel v3.1        | `214,817` |\n| Safe v1.4.1                | `200,732` |\n| Coinbase Smart Wallet      | `181,014` |\n| Simple Account             | `175,283` |\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the account-kit signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/removeMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getMfaFactors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for Passkey Status in TypeScript\nDESCRIPTION: This snippet shows how to import the BaseSignerClient class from the @account-kit/signer package. This class contains the getPasskeyStatus method used to retrieve the passkey status for an authenticated user.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/getPasskeyStatus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing getEntryPoint in TypeScript\nDESCRIPTION: Shows how to import the getEntryPoint method from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/getEntryPoint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEntryPoint } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidDeferredActionNonce in TypeScript\nDESCRIPTION: This code snippet shows how to import the InvalidDeferredActionNonce class from the @aa-sdk/core package. The class is used to create error instances for invalid deferred action nonces.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/InvalidDeferredActionNonce/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidDeferredActionNonce } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing convertEthersSignerToAccountSigner from AA SDK\nDESCRIPTION: Shows how to import the converter function from the @aa-sdk/ethers package. This function converts a standard ethers.js Signer into a SmartAccountSigner that can be used for signing and sending user operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/functions/convertEthersSignerToAccountSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convertEthersSignerToAccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Using WalletClientSigner to Asynchronously Retrieve Address in TypeScript\nDESCRIPTION: This code demonstrates initializing a wallet client using createWalletClient from the viem library, customizing the transport via the custom provider (window.ethereum) and mainnet chain. It instantiates WalletClientSigner with the created client and a 'wallet' identifier, then uses the getAddress() method to asynchronously retrieve the first address processed by getAddress. Requires @aa-sdk/core and viem packages. Inputs include the Ethereum provider and chain information; output is a Promise resolving to the wallet address string. Constraints: must be executed in an environment with a valid Ethereum provider (e.g., MetaMask).\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/WalletClientSigner/getAddress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\nimport { createWalletClient, custom } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n});\n\nconst signer = new WalletClientSigner(client, \"wallet\");\nconsole.log(await signer.getAddress());\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient in TypeScript\nDESCRIPTION: Imports the BaseSignerClient class from the @account-kit/signer package, which provides the 'on' method for event handling.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/on.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing useWaitForUserOperationTransaction Hook in TypeScript\nDESCRIPTION: Shows how to import the useWaitForUserOperationTransaction hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useWaitForUserOperationTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForUserOperationTransaction } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing toRecord from aa-sdk/core in TypeScript\nDESCRIPTION: Demonstrates how to import the toRecord function from the @aa-sdk/core package for use in TypeScript modules. This is required before utilizing the function to convert arrays to record objects. No specific configuration is needed beyond having the dependency installed.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/toRecord.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { toRecord } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing useAuthModal Hook in TypeScript\nDESCRIPTION: Shows how to import the useAuthModal hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAuthModal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthModal } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setRequiredPaymaster.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: ERC7677 Middleware Implementation\nDESCRIPTION: Addition of ERC7677 middleware functionality with default arguments support.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/aa-sdk/core/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **aa-sdk/core:** add erc7677 middleware ([#823](https://github.com/alchemyplatform/aa-sdk/issues/823)) ([4a30808](https://github.com/alchemyplatform/aa-sdk/commit/4a30808fb6df51a59be861dab523dbd45badf26a))\n- **aa-sdk/core:** add default arguments for erc7677 middleware ([#839](https://github.com/alchemyplatform/aa-sdk/issues/839)) ([848f316](https://github.com/alchemyplatform/aa-sdk/commit/848f3168d8b679215b841a45ff49735cd8ac37a7))\n```\n\n----------------------------------------\n\nTITLE: Importing Logger from @aa-sdk/core in TypeScript\nDESCRIPTION: This snippet shows how to import the Logger class from the @aa-sdk/core module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/debug.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing EthersProviderAdapter in TypeScript\nDESCRIPTION: This snippet shows how to import the EthersProviderAdapter from the @aa-sdk/ethers package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/getBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EthersProviderAdapter } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Updating Package Path in Prettier Config\nDESCRIPTION: Updates the package path in the Prettier configuration to use the correct, updated path.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nuse updated package path in prettier config\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Gas Overrides\nDESCRIPTION: Shows how to send a user operation with explicit gas overrides when not using the variable gas feature, requiring userOpSignatureType to be set to UPPERLIMIT.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/multisig-plugin/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multisigAccountClient } from \"./client\";\n\nconst result = await multisigAccountClient.sendUserOperation({\n  uo: request.callData,\n  overrides: {\n    callGasLimit: request.callGasLimit,\n    verificationGasLimit: request.verificationGasLimit,\n    preVerificationGas: request.preVerificationGas,\n    maxFeePerGas: request.maxFeePerGas,\n    maxPriorityFeePerGas: request.maxPriorityFeePerGas,\n  },\n  context: {\n    aggregatedSignature,\n    signatures: [firstSig, secondSig],\n    userOpSignatureType: \"UPPERLIMIT\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for React Native Project\nDESCRIPTION: Example of environment variables to be added to the .env file, including API key and Paymaster Policy ID.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-bare-example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAPI_KEY=\"<Your Alchemy API Key>\"\nPAYMASTER_POLICY_ID=\"<Your Paymaster Policy ID (If applicable)>\"\n```\n\n----------------------------------------\n\nTITLE: Importing multiOwnerLightAccountClientActions in TypeScript\nDESCRIPTION: This snippet shows how to import the multiOwnerLightAccountClientActions function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/multiOwnerLightAccountClientActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerLightAccountClientActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemyWebSigner in TypeScript\nDESCRIPTION: Shows how to import the AlchemyWebSigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemyWebSigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner Class\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/validateMultiFactors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing EntryPointNotFoundError in TypeScript\nDESCRIPTION: This snippet shows how to import the EntryPointNotFoundError class from the @aa-sdk/core package. The EntryPointNotFoundError is used to handle cases where no default entry point exists for a specified chain and entry point version.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/EntryPointNotFoundError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntryPointNotFoundError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidRpcUrlError from AA SDK Core\nDESCRIPTION: Shows how to import the InvalidRpcUrlError class from the @aa-sdk/core package. This error class is used to handle cases where an invalid RPC URL is provided.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/InvalidRpcUrlError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidRpcUrlError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entry detailing version changes, features, bug fixes and breaking changes for the AA-SDK project. Includes commit hashes and issue references.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- add ability to customize border radius in ui demo ([#785](https://github.com/alchemyplatform/aa-sdk/issues/785)) ([2ce7d2d](https://github.com/alchemyplatform/aa-sdk/commit/2ce7d2d2d0534f50d6a94eb4d210c4ef49e50642))\n- add border radius to account kit theme config ([#781](https://github.com/alchemyplatform/aa-sdk/issues/781)) ([dcd2ac1](https://github.com/alchemyplatform/aa-sdk/commit/dcd2ac194a9bcb4e0de1d7edfcc8b298d3d19cb0))\n...\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit Signer\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package, which contains the addPasskey method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/addPasskey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner Class in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/addMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Google Auth Integration Feature\nDESCRIPTION: Addition of Google authentication components and demo support, extending previous work and addressing multiple related issues.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/aa-sdk/core/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- add google auth components and demo support (extension of linnas pr) ([#1032](https://github.com/alchemyplatform/aa-sdk/issues/1032)) ([cb91914](https://github.com/alchemyplatform/aa-sdk/commit/cb91914c8da0a7c3e7519bf98bc55d2848062e9f)), closes [#1024](https://github.com/alchemyplatform/aa-sdk/issues/1024) [#1035](https://github.com/alchemyplatform/aa-sdk/issues/1035) [#1036](https://github.com/alchemyplatform/aa-sdk/issues/1036))\n```\n\n----------------------------------------\n\nTITLE: Creating Expo App from Account Kit Quickstart Template\nDESCRIPTION: Command to create a new Expo application using the Account Kit quickstart template for faster setup.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app@latest --template https://github.com/alchemyplatform/account-kit-expo-quickstart\n```\n\n----------------------------------------\n\nTITLE: Importing getDefaultMultiOwnerModularAccountFactoryAddress from Account Kit\nDESCRIPTION: Shows how to import the getDefaultMultiOwnerModularAccountFactoryAddress utility function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getDefaultMultiOwnerModularAccountFactoryAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultMultiOwnerModularAccountFactoryAddress } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild\nDESCRIPTION: Commands to run Expo prebuild for Android and iOS platforms to ensure native modules are properly built and added to the project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild --platform android\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild --platform ios\n```\n\n----------------------------------------\n\nTITLE: Package Import Reference in Markdown\nDESCRIPTION: Shows the core package name and its relationship to other Account Kit packages including infra, signer, and smart-contracts modules.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@account-kit/core\n```\n\n----------------------------------------\n\nTITLE: Importing convertCoinTypeToChain from AA SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the 'convertCoinTypeToChain' function from the '@aa-sdk/core' library in a TypeScript environment. The import is necessary to enable conversion from a coin type number to a blockchain chain object, and there are no other dependencies required for this import. The output is the ready-to-use function within your TypeScript module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/convertCoinTypeToChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { convertCoinTypeToChain } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using reconnect Function with Account Kit Configuration\nDESCRIPTION: This example demonstrates how to use the reconnect function with a configuration object. It imports both the reconnect function and a config object, then calls reconnect with the config as an argument.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/reconnect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reconnect } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nawait reconnect(config);\n```\n\n----------------------------------------\n\nTITLE: Importing createModularAccountV2Client from the Alchemy SDK\nDESCRIPTION: Shows how to import the createModularAccountV2Client method from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createModularAccountV2Client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing sendTransactions from AA-SDK in TypeScript\nDESCRIPTION: This snippet demonstrates the standard import statement for bringing the sendTransactions function from the @aa-sdk/core package into a TypeScript file. The import is necessary to access related transaction functions and utilities provided by the SDK. No additional parameters are required during import; ensure that @aa-sdk/core is present in package dependencies.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/sendTransactions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { sendTransactions } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Gas Overrides\nDESCRIPTION: Shows how to send a user operation with explicit gas parameters. Demonstrates setting gas overrides and using UPPERLIMIT signature type instead of the default variable gas feature.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/multisig-plugin/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await multisigAccountClient.sendUserOperation({\n  uo: request.callData,\n  overrides: {\n    callGasLimit: request.callGasLimit,\n    verificationGasLimit: request.verificationGasLimit,\n    preVerificationGas: request.preVerificationGas,\n    maxFeePerGas: request.maxFeePerGas,\n    maxPriorityFeePerGas: request.maxPriorityFeePerGas,\n  },\n  context: {\n    aggregatedSignature,\n    signatures: [firstSig, secondSig],\n    userOpSignatureType: \"UPPERLIMIT\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing allEqual Method from AA SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the allEqual method from the @aa-sdk/core module. The allEqual method is a utility function used to check if all passed values are strictly equal.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/allEqual.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allEqual } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing combineSignatures Function in TypeScript\nDESCRIPTION: Shows how to import the combineSignatures function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/combineSignatures.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { combineSignatures } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Formatting Foundry Code\nDESCRIPTION: Command to format code using forge fmt\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/contracts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ forge fmt\n```\n\n----------------------------------------\n\nTITLE: Defining SmartAccountClientAction Type in TypeScript\nDESCRIPTION: Defines the SmartAccountClientAction type, representing viem Actions that handle smart contract account-related operations. These actions include constructing and sending user operations, signing messages, and upgrading accounts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/client/smartAccountClient.ts:SmartAccountClientActions]\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Dependencies\nDESCRIPTION: Commands to install required Account Kit packages and development dependencies.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/quickstart.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/infra @account-kit/react @tanstack/react-query\nyarn add -D tailwindcss @tailwindcss/postcss postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @account-kit/infra @account-kit/react @tanstack/react-query\nnpm install -D tailwindcss @tailwindcss/postcss postcss\n```\n\n----------------------------------------\n\nTITLE: Installing Allowlist and ERC20 Token Limit Module in TypeScript\nDESCRIPTION: This code snippet shows how to install an allowlist and ERC20 token limit module for a modular account. It sets up a session key with specific allowlist permissions and a 100 token spend limit for a given address.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/session-keys/adding-session-keys.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport {\n  HookType,\n  installValidationActions,\n  getDefaultSingleSignerValidationModuleAddress,\n  SingleSignerValidationModule,\n  getDefaultAllowlistModuleAddress,\n  AllowlistModule,\n} from \"@account-kit/smart-contracts/experimental\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { parseEther } from \"viem\";\nimport { type SmartAccountSigner } from \"@aa-sdk/core\";\n\nconst client = (\n  await createModularAccountV2Client({\n    chain: sepolia,\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n  })\n).extend(installValidationActions);\n\nlet sessionKeyEntityId = 1;\nconst ecdsaValidationModuleAddress =\n  getDefaultSingleSignerValidationModuleAddress(client.chain);\nconst sessionKeySigner: SmartAccountSigner =\n  LocalAccountSigner.mnemonicToAccountSigner(\"SESSION_KEY_MNEMONIC\");\n\nconst hookEntityId = 0; // Make sure that the account does not have a hook with this entity id on the module yet\nconst allowlistInstallData = AllowlistModule.encodeOnInstallData({\n  entityId: hookEntityId,\n  inputs: [\n    {\n      target: \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\",\n      hasSelectorAllowlist: false, // whether to limit the callable functions on call targets\n      hasERC20SpendLimit: false, // If \"target\" is an ERC20 token with a spend limit\n      erc20SpendLimit: parseEther(\"100\"), // The spend limit to set, if relevant\n      selectors: [], // The function selectors to allow, if relevant\n    },\n  ],\n});\n\n// Adding a session key that has a 100 ERC token spend limit\nawait client.installValidation({\n  validationConfig: {\n    moduleAddress: ecdsaValidationModuleAddress,\n    entityId: sessionKeyEntityId,\n    isGlobal: true,\n    isSignatureValidation: true,\n    isUserOpValidation: true,\n  },\n  selectors: [],\n  installData: SingleSignerValidationModule.encodeOnInstallData({\n    entityId: sessionKeyEntityId,\n    signer: await sessionKeySigner.getAddress(), // Address of the session key\n  }),\n  hooks: [\n    {\n      hookConfig: {\n        address: getDefaultAllowlistModuleAddress(client.chain),\n        entityId: hookEntityId,\n        hookType: HookType.VALIDATION, // fixed value\n        hasPreHooks: true, // fixed value\n        hasPostHooks: false, // fixed value\n      },\n      initData: allowlistInstallData,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing accountLoupeActions in TypeScript\nDESCRIPTION: This snippet shows how to import the accountLoupeActions function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/accountLoupeActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accountLoupeActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing multisigSignatureMiddleware in TypeScript\nDESCRIPTION: This snippet shows how to import the multisigSignatureMiddleware function from the @account-kit/smart-contracts package. This middleware is used for handling signature aggregation in Multisig Account Clients.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/multisigSignatureMiddleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multisigSignatureMiddleware } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from the Account Kit Signer Module\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package. This is the base class that provides authentication functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getAuthDetails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Defining BatchUserOperationCallData Type in TypeScript\nDESCRIPTION: Defines the BatchUserOperationCallData type, which represents a sequence of UserOperations to be executed in batch by calling the executeBatch function on the SmartContractAccount contract.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:BatchUserOperationCallData]\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidEntityIdError from AA SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the InvalidEntityIdError class from the @aa-sdk/core module. This class is used to create error instances for invalid entity IDs.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/InvalidEntityIdError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidEntityIdError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner in TypeScript\nDESCRIPTION: Shows how to import the AccountSigner class from the aa-sdk/ethers package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package for event subscription functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/on.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Packages\nDESCRIPTION: Commands to install core Account Kit packages using npm or yarn.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -s @account-kit/react-native @account-kit/smart-contracts @account-kit/infra\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/react-native @account-kit/smart-contracts @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for ESM Support\nDESCRIPTION: TypeScript configuration options needed for ESM module support in tsconfig.json.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"module\": \"NodeNext\",\n\"moduleResolution\": \"nodenext\"\n```\n\n----------------------------------------\n\nTITLE: Importing createMultisigModularAccountClient in TypeScript\nDESCRIPTION: Shows how to import the createMultisigModularAccountClient function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultisigModularAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigModularAccountClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Defining Social Authentication Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the structure for configuring social authentication providers. It specifies the available options for provider IDs, authentication modes, and optional parameters like scope and claims.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/social-login.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype SocialAuthType = {\n  type: \"social\";\n  // For standard providers (google, facebook, apple)\n  authProviderId: \"google\" | \"facebook\" | \"apple\";\n  // Authentication mode (popup or redirect)\n  mode: \"popup\" | \"redirect\";\n  // Optional: Specifies the requested OAuth scope\n  scope?: string;\n  // Optional: Specifies additional claims to be included in the authentication token\n  claims?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: AA-SDK Changelog Entries\nDESCRIPTION: Detailed changelog entries following Conventional Commits format, documenting version changes, bug fixes, features, and improvements across multiple releases.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n# [4.28.0](https://github.com/alchemyplatform/aa-sdk/compare/v4.27.0...v4.28.0) (2025-04-22)\n\n### Features\n\n- add mfa methods to rn-signer ([#1542](https://github.com/alchemyplatform/aa-sdk/issues/1542)) ([c41ba79](https://github.com/alchemyplatform/aa-sdk/commit/c41ba792f78fc71395df0c16bbb8184e51272981))\n\n# [4.27.0](https://github.com/alchemyplatform/aa-sdk/compare/v4.26.0...v4.27.0) (2025-04-18)\n\n### Features\n\n- create common base error for permission builder errors ([#1546](https://github.com/alchemyplatform/aa-sdk/issues/1546)) ([15fdae8](https://github.com/alchemyplatform/aa-sdk/commit/15fdae888f0618d040dd64c1347931bd73000115))\n- solana hooks ([#1543](https://github.com/alchemyplatform/aa-sdk/issues/1543)) ([0157185](https://github.com/alchemyplatform/aa-sdk/commit/015718534c77813e36a20323b22a83b4fbd1b260))\n```\n\n----------------------------------------\n\nTITLE: Upgrading Expo to Latest Version\nDESCRIPTION: Commands to upgrade an Expo project to the latest version using npx or yarn.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn expo install expo@latest\n```\n\n----------------------------------------\n\nTITLE: Git Commit Hash Reference\nDESCRIPTION: This snippet shows a Git commit hash reference used in the changelog to link to specific changes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n[768505e](https://github.com/alchemyplatform/aa-sdk/commit/768505ef8122991067afbaa1a8977dd900bcea92)\n```\n\n----------------------------------------\n\nTITLE: Importing WaitForUserOperationError from aa-sdk (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the WaitForUserOperationError class from the @aa-sdk/core module in a TypeScript project. The class is used for specialized error handling during user operation requests and is built upon the BaseError class. Ensure @aa-sdk/core is installed as a dependency in your project before importing.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/WaitForUserOperationError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { WaitForUserOperationError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient in TypeScript\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/createAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient from Account Kit\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package for making requests to signer routes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/request.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Permissions in Plugin Install Data for TypeScript\nDESCRIPTION: Shows how to set initial permissions for a session key when installing the Session Key Plugin using the PermissionsBuilder.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionKeyPlugin = new SessionKeyPlugin();\nconst pluginInstallData = sessionKeyPlugin.encodeInstallData({\n  keys: [\n    {\n      key: sessionKeyAddress,\n      permissions: new SessionKeyPermissionBuilder()\n        .setTimeRange({ validFrom: 0, validUntil: 1000 })\n        .build()\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing createModularAccountAlchemyClient in TypeScript\nDESCRIPTION: Shows how to import the createModularAccountAlchemyClient method from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createModularAccountAlchemyClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Installing @aa-sdk/core Package with Package Managers\nDESCRIPTION: Installation commands for adding the @aa-sdk/core package to your project using different package managers (yarn, npm, or pnpm).\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/aa-sdk/core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @aa-sdk/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -s @aa-sdk/core\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @aa-sdk/core\n```\n\n----------------------------------------\n\nTITLE: Displaying Modular Account V1 Plugin Addresses in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the addresses for MultiOwnerPlugin and SessionKeyPlugin across various blockchain networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Chain            | MultiOwnerPlugin                             | SessionKeyPlugin                             |\n| ---------------- | -------------------------------------------- | -------------------------------------------- |\n| Eth Mainnet      | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Eth Sepolia      | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Polygon Mainnet  | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Polygon Amoy     | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Optimism         | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Optimism Sepolia | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Arbitrum         | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Arbitrum Sepolia | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Base             | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Base Sepolia     | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Zora Mainnet     | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Zora Sepolia     | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Fraxtal Mainnet  | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n| Fraxtal Sepolia  | `0xcE0000007B008F50d762D155002600004cD6c647` | `0x0000003E0000a96de4058e1E02a62FaaeCf23d8d` |\n```\n\n----------------------------------------\n\nTITLE: Issue and Pull Request References\nDESCRIPTION: References to GitHub issues, pull requests and commit hashes in the changelog entries.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/smart-contracts/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- create common base error for permission builder errors ([#1546](https://github.com/alchemyplatform/aa-sdk/issues/1546)) ([15fdae8](https://github.com/alchemyplatform/aa-sdk/commit/15fdae888f0618d040dd64c1347931bd73000115))\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Import statement for the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getUser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Demonstrates how to import the SessionKeyPermissionsBuilder class from the Account Kit smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setContractAccessControlType.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidDeferredActionNonce in TypeScript\nDESCRIPTION: This snippet shows how to import the InvalidDeferredActionNonce class from the @aa-sdk/core package. This class is used to create error instances for invalid deferred action nonces.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/InvalidDeferredActionNonce/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidDeferredActionNonce } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Defining ToSmartContractAccountParams Type for Account Instantiation\nDESCRIPTION: Type definition for parameters used when instantiating a SmartContractAccount via the toSmartContractAccount function, allowing configuration of Transport, Chain, EntryPointDef, and other smart account functionalities.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/account/smartContractAccount.ts:ToSmartContractAccountParams]\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient from Account Kit Signer\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/initEmailAuth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Defining Multiplier Type in TypeScript\nDESCRIPTION: Defines the Multiplier type which contains a required multiplier field. The multiplier is a number value with a maximum precision of 4 decimal places used for scaling operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/utils/schema.ts:Multiplier]\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for React Native Crypto Support\nDESCRIPTION: Metro configuration setup to enable crypto module aliases and package exports in React Native.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig, mergeConfig } = require(\"@react-native/metro-config\");\nconst path = require(\"path\");\nconst projectRoot = __dirname;\nconst config = getDefaultConfig(projectRoot);\n\nconst ALIASES = {\n  \"@noble/hashes/crypto\": path.resolve(\n    projectRoot,\n    \"node_modules/@noble/hashes/crypto.js\"\n  ),\n};\n\nconfig.resolver.extraNodeModules = {\n  ...config.resolver.extraNodeModules,\n  ...require(\"node-libs-react-native\"),\n  crypto: require.resolve(\"crypto-browserify\"),\n  stream: require.resolve(\"stream-browserify\"),\n};\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (ALIASES[moduleName]) {\n    return {\n      filePath: ALIASES[moduleName],\n      type: \"sourceFile\",\n    };\n  }\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nconfig.resolver.unstable_enablePackageExports = true;\n\nconfig.resolver.unstable_conditionNames = [\n  \"browser\",\n  \"require\",\n  \"react-native\",\n];\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Commands to start the NextJS development server using yarn or npm.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/quickstart.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/encode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Checking Ownership of Modular Account in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to check if an address is an owner of a Modular Account using the SmartAccountClient extended with multiOwnerPluginActions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/manage-ownership-mav1.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\n\nconst ownerToCheck = \"0x...\"; // the address of the account to check the ownership of\n\n// returns a boolean whether an address is an owner of account or not\nconst isOwner = await modularAccountClient.isOwnerOf({\n  address: ownerToCheck,\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing Light Account Client in TypeScript\nDESCRIPTION: Creates a Light Account client using the AA SDK, specifying the transport, chain, and signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountClient } from \"@account-kit/smart-contracts\";\nconst lightAccountClient = await createLightAccountClient({\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n    signer: yourSigner\n\n```\n\n----------------------------------------\n\nTITLE: Converting Chains Array to Record with toRecord in TypeScript\nDESCRIPTION: Shows an example of using the toRecord function to transform an array of chain objects (such as sepolia and mainnet) into a record, mapping each chain's id to a placeholder address string. Requires importing chains from \"viem/chains\" and the toRecord utility. Parameters include the array of chains, the key selector ('id'), and a function mapping each chain to the string \"0x...\". The output is a Record keyed by chain id with corresponding address values.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/toRecord.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { toRecord } from \"@aa-sdk/core\";\nimport { sepolia, mainnet } from \"viem/chains\";\n\nconst addressesByChain = toRecord([sepolia, mainnet], \"id\", () => \"0x...\"); // { [sepolia.id]: \"0x...\", [mainnet.id]: \"0x...\" }\n```\n\n----------------------------------------\n\nTITLE: Using getMfaFactors with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance and call the getMfaFactors method to retrieve the list of MFA factors configured for the current user.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getMfaFactors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst { multiFactors } = await signer.getMfaFactors();\n```\n\n----------------------------------------\n\nTITLE: Package Renaming Pattern\nDESCRIPTION: Shows the pattern for package renaming from @alchemy/aa-* to @aa-sdk/* namespace\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/core/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@alchemy/aa-* packages have been renamed to @aa-sdk/*\n```\n\n----------------------------------------\n\nTITLE: Installing Shim Dependencies for React Native Crypto Support\nDESCRIPTION: Commands for installing necessary shim dependencies to enable crypto libraries in React Native, including node-libs-react-native, crypto-browserify, stream-browserify, and react-native-get-random-values.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save node-libs-react-native crypto-browserify stream-browserify react-native-get-random-values\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add node-libs-react-native crypto-browserify stream-browserify react-native-get-random-values\n```\n\n----------------------------------------\n\nTITLE: Initializing an AlchemySignerWebClient instance in TypeScript\nDESCRIPTION: Example code showing how to create a new AlchemySignerWebClient instance with connection and iframeConfig parameters. This configures the client with an API key and specifies the iframe container for the signer UI.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Dependencies with Package Managers\nDESCRIPTION: Commands for installing required Account Kit packages using yarn or npm. Requires TypeScript 5 and viem version 2.20.0 as prerequisites.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/infra/quickstart.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/infra @account-kit/smart-contracts\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -s @account-kit/infra @account-kit/smart-contracts\n```\n\n----------------------------------------\n\nTITLE: Running the Application\nDESCRIPTION: Commands to prebuild and run the application on iOS or Android\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-expo-example/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild --clean\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn run ios\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn run android\n```\n\n----------------------------------------\n\nTITLE: Restoring Previous Accounts Using reconnect in TypeScript\nDESCRIPTION: This snippet shows a typical usage of the 'reconnect' function to restore connected account instances and the signer. It first imports the required 'reconnect' function from '@account-kit/core' and a 'config' object, then awaits the 'reconnect' function with this configuration. Dependencies include '@account-kit/core' and a configuration matching the 'AlchemyAccountsConfig' interface. The main parameter, 'config', provides the client store needed for session restoration, and the function resolves after restoring state, with any errors on failure.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/reconnect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { reconnect } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nawait reconnect(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect Flow Authentication in React with Account Kit\nDESCRIPTION: This code demonstrates how to handle authentication redirects when using the redirect flow in Account Kit. It uses the useSignerStatus hook to track the authentication state and display appropriate UI during the authentication process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/social-login.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from \"react\";\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isAuthenticating } = useSignerStatus();\n\n// Show loading state during authentication\nuseEffect(() => {\n  if (isAuthenticating) {\n    // Show loading UI while authentication completes\n  }\n}, [isAuthenticating]);\n```\n\n----------------------------------------\n\nTITLE: Importing RNSignerClient for MFA Verification in TypeScript\nDESCRIPTION: Shows how to import the RNSignerClient class from the @account-kit/react-native-signer package to use MFA verification functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react-native-signer/classes/RNSignerClient/verifyMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RNSignerClient } from \"@account-kit/react-native-signer\";\n```\n\n----------------------------------------\n\nTITLE: Creating Gas Snapshots\nDESCRIPTION: Command to generate gas snapshots using forge snapshot\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/contracts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ forge snapshot\n```\n\n----------------------------------------\n\nTITLE: BundlerActions Interface Definition\nDESCRIPTION: Interface defining actions for interacting with EIP-4337 and EIP-6900 bundler RPC methods.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/client/decorators/bundlerClient.ts:BundlerActions]\n```\n\n----------------------------------------\n\nTITLE: Installing Supporting Dependencies\nDESCRIPTION: Commands to install additional required dependencies for the Signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-mmkv zustand abitype react-native-inappbrowser-reborn\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-mmkv zustand abitype react-native-inappbrowser-reborn\n```\n\n----------------------------------------\n\nTITLE: Importing deepHexlify Function from AA SDK Core in TypeScript\nDESCRIPTION: This code snippet shows how to import the deepHexlify function from the @aa-sdk/core module. The function recursively converts all values in an object to hex strings.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/deepHexlify.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deepHexlify } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: SmartAccountAuthenticator Interface\nDESCRIPTION: Interface extending SmartAccountSigner with authentication-related functions for smart contract accounts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/signer/types.ts:SmartAccountAuthenticator]\n```\n\n----------------------------------------\n\nTITLE: Importing EthersProviderAdapter in TypeScript\nDESCRIPTION: Imports the `EthersProviderAdapter` class from the `@aa-sdk/ethers` package. This class is required to utilize its methods, including `connectToAccount`, for interacting with smart contract accounts via an Ethers provider.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/connectToAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EthersProviderAdapter } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Upgrading Expo Dependencies\nDESCRIPTION: Command to upgrade all dependencies to match the new Expo SDK version after upgrading.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient in TypeScript\nDESCRIPTION: Import statement for the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for Message Signing in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package, which provides functionality for signing raw messages.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/signRawMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey-Only Login in Account Kit\nDESCRIPTION: Demonstrates how to authenticate a user with just their passkey without requiring an email. This approach sets createNew to false to prevent creating a new passkey during the authentication process.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/passkey-login.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthenticate } from \"@account-kit/react\";\n\n// Inside your component\nconst { authenticate } = useAuthenticate();\n\n// When the user wants to log in with just their passkey\nconst handlePasskeyOnlyLogin = () => {\n  authenticate(\n    {\n      type: \"passkey\",\n      createNew: false, // Important: set to false to prevent creating a new passkey\n    },\n    {\n      onSuccess: () => {\n        // Success - user authenticated with passkey\n      },\n      onError: (error) => {\n        // Handle error\n      },\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing SmartAccountWithSignerRequiredError in TypeScript\nDESCRIPTION: This snippet shows how to import the SmartAccountWithSignerRequiredError class from the @aa-sdk/core module. This error class is used to indicate that a smart account requires a signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/SmartAccountWithSignerRequiredError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SmartAccountWithSignerRequiredError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect for Social Login Authentication Flow\nDESCRIPTION: This code shows how to handle the redirect when using the redirect flow for social login authentication. It uses the useSignerStatus hook to detect when authentication is in progress and can be used to show a loading state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/social-login.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from \"react\";\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isAuthenticating } = useSignerStatus();\n\n// Show loading state during authentication\nuseEffect(() => {\n  if (isAuthenticating) {\n    // Show loading UI while authentication completes\n  }\n}, [isAuthenticating]);\n```\n\n----------------------------------------\n\nTITLE: Logging Feature Update - Client Logger Implementation\nDESCRIPTION: Added client logger implementation and profiling metrics capabilities to enhance logging functionality, including logger schemas across infrastructure, react, and core components.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/logging/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- add logger schemas to infra, react, core ([65fac7d])\n- add signer profiling metrics ([b7b0aa3])\n- add the client logger implementation ([4577bbf])\n```\n\n----------------------------------------\n\nTITLE: Using generatePrivateKeySigner to Create a LocalAccountSigner\nDESCRIPTION: Demonstrates how to use the generatePrivateKeySigner method to create a new LocalAccountSigner instance with a generated private key. This signer can be used for operations requiring a PrivateKeyAccount.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/generatePrivateKeySigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n\nconst signer = LocalAccountSigner.generatePrivateKeySigner();\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Router\nDESCRIPTION: Command to install Expo Router package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-expo-example/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn expo install expo-router\n```\n\n----------------------------------------\n\nTITLE: Defining BigNumberishRange Type in TypeScript\nDESCRIPTION: Defines the BigNumberishRange type, which contains optional min and max fields, each accepting a BigNumberish value. This type is used to specify a numerical range with both minimum and maximum bounds.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/utils/schema.ts:BigNumberishRange]\n```\n\n----------------------------------------\n\nTITLE: Importing TraceHeader Class from AA-SDK\nDESCRIPTION: Shows how to import the TraceHeader class from the AA-SDK core package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/TraceHeader/toTraceHeader.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TraceHeader } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Minimum Deployment Target\nDESCRIPTION: JSON configuration for app.json to set the iOS minimum deployment target to 17.0 using the expo-build-properties plugin.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n// app.json\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"ios\": {\n            \"deploymentTarget\": \"17.0\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Smart Contracts Package\nDESCRIPTION: This snippet shows how to install the @account-kit/smart-contracts package using npm or yarn. It requires a minimum TypeScript version of 5 and pinning viem to version 2.20.0.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/light-account/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @account-kit/smart-contracts\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add@account-kit/smart-contracts\n```\n\n----------------------------------------\n\nTITLE: Importing DefaultFeeEstimator in TypeScript\nDESCRIPTION: Shows how to import the defaultFeeEstimator function from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/defaultFeeEstimator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultFeeEstimator } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Single User Operation in React Native with Account Kit\nDESCRIPTION: Example component showing how to send a single user operation using the useSendUserOperation hook. Includes error handling, success callbacks, and transaction status monitoring.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/using-smart-accounts/send-user-operations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState, useEffect } from \"react\";\nimport { Alert, View, Button } from \"react-native\";\nimport { User } from \"@account-kit/signer\";\nimport {\n  createModularAccountV2Client,\n  ModularAccountV2,\n} from \"@account-kit/smart-contracts\";\nimport {\n  useSendUserOperation,\n  useSmartAccountClient,\n} from \"@account-kit/react-native\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { SmartAccountClient } from \"@aa-sdk/core\";\n\nexport default function MyOpSenderComponent() {\n  const { client } = useSmartAccountClient({});\n\n  const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({\n    client,\n    waitForTxn: true,\n    onSuccess: ({ hash, request }) => {\n      // [optional] Do something with the hash and request\n    },\n    onError: (error) => {\n      // [optional] Do something with the error\n    },\n  });\n\n  const handleSendUserOperation = () => {\n    sendUserOperation({\n      uo: {\n        target: \"0xTARGET_ADDRESS\",\n        data: \"0x\",\n        value: 0n,\n      },\n    });\n  };\n\n  return (\n    <View>\n      <Button\n        onPress={handleSendUserOperation}\n        disabled={isSendingUserOperation}\n        title={isSendingUserOperation ? \"Sending...\" : \"Send UO\"}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping and Replacing a User Operation with aa-sdk Client in TypeScript\nDESCRIPTION: Illustrates end-to-end usage of dropAndReplaceUserOperation with a smart account client. The snippet imports and initializes a smart account client, sends a user operation, and then drops & replaces it by calling dropAndReplaceUserOperation. Prerequisites include having the @aa-sdk/core package available and a properly initialized smart account client. Parameters include the operation to drop (uoToDrop) and account (if not already attached). It returns a promise containing the result of the replacement operation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/dropAndReplaceUserOperation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\ncreateSmartAccountClient,\n} from \"@aa-sdk/core\";\n\n// smart account client is already extended with dropAndReplaceUserOperation\nconst client = createSmartAccountClient(...);\nconst { request } = await client.sendUserOperation(...);\nconst result = await client.dropAndReplaceUserOperation({\nuoToDrop: request,\naccount, // only required if the client above is not connected to an account\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Chain Definitions out of AA SDK Core\nDESCRIPTION: Refactors the project by moving chain definitions out of the aa-sdk core, potentially to improve maintainability or reduce coupling.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nmove chain definitions out of aa-sdk core\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Status with useSignerStatus Hook\nDESCRIPTION: This snippet demonstrates how to track user authentication status using the useSignerStatus hook from Account Kit. The isConnected property can be used to conditionally render UI based on the user's authentication state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/passkey-signup.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Structure in TypeScript for Smart Wallet Configuration\nDESCRIPTION: This snippet defines the structure of an offchain policy for smart wallets. It includes fields for version, name, VM kind, target account, and rules.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/policies/offchain-policy-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype Policy = {\n  version: \"1.0\";\n  // Allows you to assign a human readable name\n  // for your policy\n  name: string;\n  vm_kind: \"EVM\" | \"SVM\";\n  // This is the account that this policy targets\n  account: string;\n  // This is the list of rules that will be enforced\n  // when the policy is evaluated\n  // The supported rules differ based on the network\n  rules: Rule[];\n};\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Shows the standardized format used for documenting version changes and fixes in the repository changelog.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- changing protected by to powered by alchemy footer ([#1164](https://github.com/alchemyplatform/aa-sdk/issues/1164)) ([7c08a66](https://github.com/alchemyplatform/aa-sdk/commit/7c08a66b718aefce80629824d58893898c757b41))\n- oauth working, email still broken ([#1170](https://github.com/alchemyplatform/aa-sdk/issues/1170)) ([196905d](https://github.com/alchemyplatform/aa-sdk/commit/196905d4abbfd07ccb83e38484bab6eb0ea0d502))\n```\n\n----------------------------------------\n\nTITLE: Importing cookieToInitialState from @account-kit/core in TypeScript\nDESCRIPTION: This snippet shows how to import the cookieToInitialState function from the @account-kit/core package. This function is used to convert a cookie into an initial state object for Alchemy Accounts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/cookieToInitialState.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookieToInitialState } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 4.28.0\nDESCRIPTION: Documents version 4.28.0 release with only version bump.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/infra/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [4.28.0](https://github.com/alchemyplatform/aa-sdk/compare/v4.27.0...v4.28.0) (2025-04-22)\n\n**Note:** Version bump only for package @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes in Markdown\nDESCRIPTION: This Markdown snippet shows the structure and format used for documenting release notes in the AA SDK project. It includes sections for bug fixes, features, and version changes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **alchemy-signer:** undo a whoami change ([#495](https://github.com/alchemyplatform/aa-sdk/issues/495)) ([c88a965](https://github.com/alchemyplatform/aa-sdk/commit/c88a965e4a21816450b5baaa5820fa2389ed9199))\n\n### Features\n\n- export plugin install and uninstall param type from aa accounts package ([#494](https://github.com/alchemyplatform/aa-sdk/issues/494)) ([749180f](https://github.com/alchemyplatform/aa-sdk/commit/749180f176e7bcb85bbe49b098e04424c07791a9))\n- sign user op and send raw user op methods added to smart account client ([#486](https://github.com/alchemyplatform/aa-sdk/issues/486)) ([6518d12](https://github.com/alchemyplatform/aa-sdk/commit/6518d12190e9d48263e4776f288245b5a9940b36))\n\n# [3.3.0](https://github.com/alchemyplatform/aa-sdk/compare/v3.2.1...v3.3.0) (2024-02-29)\n\n### Features\n\n- **alchemy-signer:** migrate the alchemy signer to use bundle from QP ([#492](https://github.com/alchemyplatform/aa-sdk/issues/492)) ([cd6f491](https://github.com/alchemyplatform/aa-sdk/commit/cd6f491ffb66de3924024420e76e5350f831497c))\n- export Plugin type from aa accounts package ([#493](https://github.com/alchemyplatform/aa-sdk/issues/493)) ([03543fb](https://github.com/alchemyplatform/aa-sdk/commit/03543fb3a5886110b3bad4d792efd5c01045d0a6))\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyFeeEstimator in TypeScript\nDESCRIPTION: Shows how to import the alchemyFeeEstimator function from the account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyFeeEstimator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemyFeeEstimator } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Creating Expo Project with Account Kit Template\nDESCRIPTION: This command creates a new Expo project with Account Kit pre-configured using a quickstart template. It provides a ready-to-use setup for developers to start working with Account Kit in a React Native environment.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app@latest --template https://github.com/alchemyplatform/account-kit-expo-quickstart\n```\n\n----------------------------------------\n\nTITLE: Feature Addition - Signer API Key Creation\nDESCRIPTION: Added experimental support for signer API key creation in version 4.19.0.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/plugingen/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- allow signer api key creation (experimental) ([#1485](https://github.com/alchemyplatform/aa-sdk/issues/1485)) ([424b27e](https://github.com/alchemyplatform/aa-sdk/commit/424b27e133b5c5c7a9ac08d20e18ce35e705e546))\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Changes in Markdown\nDESCRIPTION: This snippet shows the structure of a changelog entry, including version number, date, and categorized changes with links to issues and commits.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.8.2-alpha.1](https://github.com/alchemyplatform/aa-sdk/compare/v3.8.1...v3.8.2-alpha.1) (2024-04-18)\n\n### Bug Fixes\n\n- fix audit link ([#588](https://github.com/alchemyplatform/aa-sdk/issues/588)) ([b61e9d8](https://github.com/alchemyplatform/aa-sdk/commit/b61e9d835ea38b3a73c0b0804007c7d5bca0f86a))\n\n### Features\n\n- add useAddPasskey hook ([#565](https://github.com/alchemyplatform/aa-sdk/issues/565)) ([27b3bde](https://github.com/alchemyplatform/aa-sdk/commit/27b3bde8b9593055f213f15fbefe07e3a010bd60))\n- **entrypoint-0.7:** base - all changes in regards to the EntryPoint v6 & v7 support ([#514](https://github.com/alchemyplatform/aa-sdk/issues/514)) ([6cc692e](https://github.com/alchemyplatform/aa-sdk/commit/6cc692edf2ac20adf310b7a0efd99879b6e6f485)), closes [#549](https://github.com/alchemyplatform/aa-sdk/issues/549)\n- light account v2 entrypoint v7 and multi owner update ([#548](https://github.com/alchemyplatform/aa-sdk/issues/548)) ([5f2f5c9](https://github.com/alchemyplatform/aa-sdk/commit/5f2f5c963ecdeb8c7efadb6eda2f2e9e6187f636))\n- paymaster middleware update per entrypoint v7 user operation ([#580](https://github.com/alchemyplatform/aa-sdk/issues/580)) ([399479a](https://github.com/alchemyplatform/aa-sdk/commit/399479a38d6eaf0ab6d4d46b38f9d0f5a773cbed))\n```\n\n----------------------------------------\n\nTITLE: Importing useChain Hook in TypeScript\nDESCRIPTION: Shows how to import the useChain hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useChain } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Sonic Export Removal\nDESCRIPTION: Documents removal of sonic export due to incompatibility with AA infrastructure.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/infra/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- remove the sonic export as it is not supported with aa infra yet ([#1523](https://github.com/alchemyplatform/aa-sdk/issues/1523)) ([22e6943](https://github.com/alchemyplatform/aa-sdk/commit/22e69431a8861a58b65ef3864dfa580b5c618605))\n```\n\n----------------------------------------\n\nTITLE: Verifying Smart Contracts\nDESCRIPTION: Commands to manually verify deployed smart contracts including ERC20 tokens with constructor arguments\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/contracts/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nFOUNDRY_PROFILE=optimized-build forge verify-contract 0xB0AEC4c25E8332256A91bBaf169E3C32dfC3C33C Swap --rpc-url <your_rpc_url> --watch\n\nFOUNDRY_PROFILE=optimized-build forge verify-contract 0xCFf7C6dA719408113DFcb5e36182c6d5aa491443 ERC20Mintable --rpc-url <your_rpc_url> --watch --constructor-args $(cast abi-encode \"constructor(string,string)\" \"DemoUSDC\" \"USDC\")\n\nFOUNDRY_PROFILE=optimized-build forge verify-contract 0x0766798566D1f6e2f0b126f7783aaB2CBb81c66f ERC20Mintable --rpc-url <your_rpc_url> --watch --constructor-args $(cast abi-encode \"constructor(string,string)\" \"DemoWETH\" \"WETH\")\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Environment variables setup for API key and paymaster policy ID\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-expo-example/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_PUBLIC_API_KEY=\"<Your alchemy public api key>\"\nPAYMASTER_POLICY_ID=\"<Your paymaster policy ID if available>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Contract Deployment\nDESCRIPTION: Sets required environment variables for RPC endpoint and private key needed for contract deployment and interaction.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/contracts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport RPC_URL=<Your RPC endpoint>\nexport PRIVATE_KEY=<Your wallets private key>\n```\n\n----------------------------------------\n\nTITLE: Importing useBundlerClient in TypeScript\nDESCRIPTION: Shows how to import the useBundlerClient hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useBundlerClient } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Status with useSignerStatus Hook\nDESCRIPTION: A minimal example showing how to track user authentication status using the useSignerStatus hook from Account Kit. This hook provides the isConnected state which can be used for conditional UI rendering.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/social-providers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n\n----------------------------------------\n\nTITLE: Using useUser Hook with Type Definitions\nDESCRIPTION: Demonstrates the usage of useUser hook with TypeScript type definitions for the User result, including both EOA and smart contract account types.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useUser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUser } from \"@account-kit/react\";\nimport type { User } from \"@account-kit/signer\";\ntype UseUserResult = (User & { type: \"eoa\" | \"sca\" }) | null;\n\nconst user = useUser();\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Import statement for BaseAlchemySigner from the Account Kit signer package, which is required to use the verifyMfa method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/verifyMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing Multi-Owner Light Account Client in TypeScript\nDESCRIPTION: Shows how to import the createMultiOwnerLightAccountAlchemyClient function from the smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccountAlchemyClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing isAlchemySmartAccountClient Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `isAlchemySmartAccountClient` utility function from the `@account-kit/infra` library using an ES module import statement. This function is used to verify if a given client object conforms to the Alchemy Smart Account Client interface.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/isAlchemySmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { isAlchemySmartAccountClient } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing useLogout Hook - TypeScript\nDESCRIPTION: Shows how to import the useLogout hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useLogout.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogout } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Fee Options Using getDefaultUserOperationFeeOptions - Account Kit Infra (TypeScript)\nDESCRIPTION: This snippet shows the complete usage of getDefaultUserOperationFeeOptions by importing the function and a specific chain object (arbitrum) from @account-kit/infra, then calling the function with that chain. The key parameters include the chain object, which specifies the blockchain to query. The output is an object containing user operation fee options relevant to the specified chain. Dependencies include the @account-kit/infra package, and the function expects a valid Chain type as input.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/getDefaultUserOperationFeeOptions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getDefaultUserOperationFeeOptions } from \"@account-kit/infra\";\nimport { arbitrum } from \"@account-kit/infra\";\n\nconst feeOpts = getDefaultUserOperationFeeOptions(arbitrum);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Expo Project\nDESCRIPTION: Command to create a new Expo project using the latest version of create-expo-app.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app@latest\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPluginActions in TypeScript\nDESCRIPTION: Shows how to import the sessionKeyPluginActions module from the Account Kit smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/sessionKeyPluginActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sessionKeyPluginActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Types in TypeScript\nDESCRIPTION: Schema for different types of rules including method-based, recipient-based, and contract-based rules. Each rule type specifies allowed or denied actions with associated conditions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/policies/offchain-policy-configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype Rule =\n  | {\n      name: string;\n      type: \"methods\";\n      action: \"ALLOW\" | \"DENY\";\n      method:\n        | \"eth_signTransaction\" // EVM only\n        | \"sign_operation\" // EVM only\n        | \"wallet_prepareCalls\" // EVM only https://github.com/ethereum/ERCs/pull/758\n        | \"wallet_sendPreparedCalls\" // EVM only https://github.com/ethereum/ERCs/pull/758\n        | \"signAndSendTransaction\" // SVM only\n        | \"sendTransaction\"; // SVM only\n      conditions: Condition[];\n    }\n  | {\n      type: \"recipients\";\n      action: \"ALLOW\" | \"DENY\";\n      address: string[];\n    }\n  | {\n      type: \"contracts\";\n      action: \"ALLOW\" | \"DENY\";\n      address: string[];\n    };\n```\n\n----------------------------------------\n\nTITLE: Sending User Operation with Modular Account V2 in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to send a User Operation using a Modular Account V2 client. It includes creating the client, defining the operation parameters, and sending the operation. The code also logs the operation hash and account address.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/modular-account-v2/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { parseEther } from \"viem\";\n\nconst accountClient = await createModularAccountV2Client({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst operation = await accountClient.sendUserOperation({\n  // simple UO sending no data or value to vitalik's address\n  uo: {\n    target: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\", // The address to call in the UO\n    data: \"0x\", // The calldata to send in the UO\n    value: parseEther(\"0\"), // The value to send in the UO\n  },\n});\n\nconsole.log(\n  \"User operation sent! \\nUO hash: \",\n  operation.hash,\n  \"\\nModular Account v2 Address: \",\n  operation.request.sender\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Export Private Key Implementation\nDESCRIPTION: Full React component implementation for exporting private keys, including iframe styling and state management using react-query.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/export-private-key.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { signer } from \"./signer\";\n\nconst TurnkeyExportWalletContainerId = \"turnkey-export-wallet-container-id\";\nconst TurnkeyExportWalletElementId = \"turnkey-export-wallet-element-id\";\n\nconst iframeCss = `\niframe {\n    box-sizing: border-box;\n    width: 100%;\n    height: 120px;\n    border-radius: 8px;\n    border-width: 1px;\n    border-style: solid;\n    border-color: rgba(216, 219, 227, 1);\n    padding: 20px;\n}\n`;\n\nexport const ExportPrivateKeyView = () => {\n  const {\n    mutate: exportWallet,\n    isLoading,\n    data,\n  } = useMutation({\n    mutationFn: () =>\n      signer.exportWallet({\n        iframeContainerId: TurnkeyExportWalletContainerId,\n        iframeElementId: TurnkeyExportWalletElementId,\n      }),\n  });\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      {!data ? (\n        <button onClick={() => exportWallet()} disabled={isLoading}>\n          Export Wallet\n        </button>\n      ) : (\n        <strong>Seed Phrase</strong>\n      )}\n      <div\n        className=\"w-full\"\n        style={{ display: !data ? \"none\" : \"block\" }}\n        id={TurnkeyExportWalletContainerId}\n      >\n        <style>{iframeCss}</style>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering React Navigation Tiles with TileButton Component\nDESCRIPTION: JSX code that creates navigation tiles for React-related resources. These tiles contain icons, titles, descriptions, and links to quickstart guide and demo.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-row gap-4\">\n  <TileButton\n    icon={<ClockForwardIcon />}\n    title=\"Quickstart\"\n    description=\"Start building in minutes with UI components and powerful React hooks.\"\n    href=\"/react/quickstart\"\n  />\n  <TileButton\n    icon={<PointerIcon />}\n    title=\"Try the Demo\"\n    description=\"Customize React components, export your config, and start building.\"\n    href=\"https://demo.alchemy.com/\"\n    target=\"_blank\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying LightAccount v2.0.0 Addresses in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the factory and implementation addresses for LightAccount v2.0.0 across various blockchain networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Chain            | Factory Address                              | Account Implementation                       |\n| ---------------- | -------------------------------------------- | -------------------------------------------- |\n| Eth Mainnet      | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Eth Sepolia      | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Polygon Mainnet  | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Polygon Amoy     | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Optimism         | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Optimism Sepolia | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Arbitrum         | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Arbitrum Sepolia | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Base             | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Base Sepolia     | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Zora Mainnet     | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Zora Sepolia     | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Fraxtal Mainnet  | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n| Fraxtal Sepolia  | `0x0000000000400CdFef5E2714E63d8040b700BC24` | `0x8E8e658E22B12ada97B402fF0b044D6A325013C7` |\n```\n\n----------------------------------------\n\nTITLE: Importing SolanaSigner for Message Signing in TypeScript\nDESCRIPTION: This snippet shows how to import the SolanaSigner class from the @account-kit/signer package. The SolanaSigner is used to sign messages in Solana-based applications.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/SolanaSigner/signMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SolanaSigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Remappings for Foundry Dependencies in Solidity\nDESCRIPTION: This snippet defines remapping rules for Foundry, specifying the locations of external libraries and contracts used in the project. It includes mappings for ds-test, forge-std, and OpenZeppelin contracts, ensuring proper resolution of dependencies during compilation and testing.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/contracts/remappings.txt#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nds-test/=lib/forge-std/lib/ds-test/src/\nforge-std/=lib/forge-std/src/\n@openzeppelin/contracts=lib/openzeppelin-contracts/contracts/\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler\nDESCRIPTION: JavaScript configuration for Metro bundler to include crypto library shims\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-expo-example/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require(\"expo/metro-config\");\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\nconfig.resolver.extraNodeModules = {\n\t...config.resolver.extraNodeModules,\n\t...require(\"node-libs-react-native\"),\n\tcrypto: require.resolve(\"crypto-browserify\"),\n\tstream: require.resolve(\"stream-browserify\"),\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Importing OauthCancelledError from @account-kit/signer in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the OauthCancelledError class from the @account-kit/signer package. This class is used to create an error object when the OAuth flow is cancelled.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/OauthCancelledError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OauthCancelledError } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server for UI Demo\nDESCRIPTION: Command to start the Next.js development server for the UI demo in the /aa-sdk/examples/ui-demo directory using Yarn package manager.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidSignerTypeError from AA-SDK Core\nDESCRIPTION: Shows how to import the InvalidSignerTypeError class from the @aa-sdk/core package. This error class extends BaseError and is used when an invalid signer type is provided to SmartAccountSigner.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/InvalidSignerTypeError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidSignerTypeError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Submitting Email OTP Code in React\nDESCRIPTION: This component demonstrates how to verify the email OTP code once the user receives it. It monitors the signer status to detect when a code needs to be submitted and provides a handler function to verify the OTP.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/mfa/email-otp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus, useAuthenticate } from \"@account-kit/react\";\nimport { AlchemySignerStatus } from \"@account-kit/signer\";\nimport React, { useEffect } from \"react\";\n\nfunction EmailOtpVerification() {\n  const { status } = useSignerStatus();\n  const { authenticate, isPending } = useAuthenticate({\n    onError: (error) => {\n      // Handle OTP verification errors\n      console.error(\"OTP verification failed:\", error);\n    },\n  });\n\n  // Called when user enters their OTP code from email\n  const handleVerify = (emailOtp: string) => {\n    authenticate({\n      type: \"otp\",\n      otpCode: emailOtp,\n    });\n  };\n\n  // Example of prompting user when OTP verification is needed\n  useEffect(() => {\n    if (status === AlchemySignerStatus.AWAITING_EMAIL_AUTH) {\n      // Show OTP input UI to the user\n    }\n  }, [status]);\n\n  return (\n    // Your OTP input UI\n    <div>{/* OTP input component */}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing defineAlchemyChain from @account-kit/infra in TypeScript\nDESCRIPTION: This snippet shows how to import the defineAlchemyChain function from the @account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/defineAlchemyChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAlchemyChain } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Schema in TypeScript\nDESCRIPTION: Core schema definition for an offchain policy configuration. Includes version, name, VM type, target account, and rules array.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/policies/offchain-policy-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype Policy = {\n  version: \"1.0\";\n  // Allows you to assign a human readable name\n  // for your policy\n  name: string;\n  vm_kind: \"EVM\" | \"SVM\";\n  // This is the account that this policy targets\n  account: string;\n  // This is the list of rules that will be enforced\n  // when the policy is evaluated\n  // The supported rules differ based on the network\n  rules: Rule[];\n};\n```\n\n----------------------------------------\n\nTITLE: Using combineSignatures to combine signatures with gas fee limits\nDESCRIPTION: Demonstrates how to use the combineSignatures function to combine signatures with upper limit values for pre-verification gas, max fee per gas, and max priority fee per gas.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/combineSignatures.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { combineSignatures } from \"@account-kit/smart-contracts\";\n\nconst combinedSignature = combineSignatures({\n// this is the upper limit pre-verification gas\nupperLimitPvg: \"0x01\",\nupperLimitMaxFeePerGas: \"0x02\",\nupperLimitMaxPriorityFeePerGas: \"0x03\",\nsignatures: [{\nsignerType: \"EOA\",\nuserOpSigType: \"UPPERLIMIT\",\nsigner: `0x...`,\nsignature: `0x...`,\n}]\nusingMaxValues: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing defaultPaymasterAndData from AA SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the defaultPaymasterAndData function from the @aa-sdk/core package. This function is used to set the paymasterAndData field in a UserOperationStruct.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/defaultPaymasterAndData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultPaymasterAndData } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing ClientOnlyPropertyError from Account Kit Core in TypeScript\nDESCRIPTION: Demonstrates the ES module import statement required to access the ClientOnlyPropertyError class from the @account-kit/core package. Requires the @account-kit/core package as a dependency. No parameters are involved, and the code enables use of the ClientOnlyPropertyError in subsequent code. There are no limitations, but the @account-kit/core module must be installed in the project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/classes/ClientOnlyPropertyError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientOnlyPropertyError } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Running React Native App on iOS\nDESCRIPTION: Commands to start the React Native application on iOS using either npm or Yarn.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/rn-signer/example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run ios\n\n# OR using Yarn\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Importing UpgradeToAndCallNotSupportedError in TypeScript\nDESCRIPTION: This snippet shows how to import the UpgradeToAndCallNotSupportedError class from the @aa-sdk/core package. This class is used to create error messages for unsupported UpgradeToAndCall operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/UpgradeToAndCallNotSupportedError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UpgradeToAndCallNotSupportedError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using wrapSignatureWith6492 to wrap a signature in TypeScript\nDESCRIPTION: Demonstrates how to use the wrapSignatureWith6492 function to wrap a signature with additional data following the EIP-6492 standard. It requires providing the factory address, factory calldata, and the original signature.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/wrapSignatureWith6492.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { wrapSignatureWith6492 } from \"@aa-sdk/core\";\n\nconst signature = wrapSignatureWith6492({\n  factoryAddress: \"0x...\",\n  factoryCalldata: \"0x...\",\n  signature: \"0x...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using targetPublicKey method with AlchemySignerWebClient\nDESCRIPTION: Demonstrates how to create an AlchemySignerWebClient instance with proper configuration and call the targetPublicKey method to get the iframe stamper's public key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/targetPublicKey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst publicKey = await client.targetPublicKey();\n```\n\n----------------------------------------\n\nTITLE: Using filterUndefined to Clean Object Properties\nDESCRIPTION: Demonstrates how to use filterUndefined to remove undefined and null values from an object. The example shows filtering an object with mixed property values, returning only defined non-null properties.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/filterUndefined.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { filterUndefined } from \"@aa-sdk/core\";\n\nconst result = filterUndefined({\n  foo: undefined,\n  bar: null,\n  baz: \"baz\",\n}); // { baz: \"baz\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Infrastructure Libraries with Package Managers\nDESCRIPTION: Installation commands for the @account-kit/infra and @account-kit/smart-contracts packages using yarn or npm. Requires TypeScript 5+ and viem pinned to version 2.20.0.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/infra/quickstart.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/infra @account-kit/smart-contracts\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -s @account-kit/infra @account-kit/smart-contracts\n```\n\n----------------------------------------\n\nTITLE: Implementing 7702 Smart Account Client Creation\nDESCRIPTION: Demonstrates how to create a smart account client using the default7702UserOpSigner middleware along with other configuration options. This example shows the complete setup for a modular account with EIP-7702 support.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/default7702UserOpSigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  default7702GasEstimator,\n  default7702UserOpSigner,\n  createSmartAccountClient,\n  type SmartAccountClient,\n} from \"@aa-sdk/core\";\nimport {\n  createModularAccountV2,\n  type CreateModularAccountV2ClientParams,\n} from \"@account-kit/smart-contracts\";\n\nasync function createSMA7702AccountClient(\n  config: CreateModularAccountV2ClientParams\n): Promise<SmartAccountClient> {\n  const sma7702Account = await createModularAccountV2({\n    ...config,\n    mode: \"7702\",\n  });\n\n  return createSmartAccountClient({\n    account: sma7702Account,\n    gasEstimator: default7702GasEstimator(config.gasEstimator),\n    signUserOperation: default7702UserOpSigner(config.signUserOperation),\n    ...config,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using convertChainIdToCoinType to Map Chain ID to Coin Type (TypeScript)\nDESCRIPTION: Provides an example of importing both the convertChainIdToCoinType function and a specific chain configuration (sepolia) from the Viem chains package. Illustrates how to convert the chain ID (sepolia.id) to its corresponding coin type using the function. Dependencies include @aa-sdk/core and viem/chains packages; inputs are a chain ID number, and the output is a number representing the derived coin type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/convertChainIdToCoinType.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { convertChainIdToCoinType } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst coinType = convertChainIdToCoinType(sepolia.id);\n```\n\n----------------------------------------\n\nTITLE: Importing useExportAccount Hook from Account Kit\nDESCRIPTION: Simple import statement for the useExportAccount hook from the Account Kit React package. This hook is used to enable private key export functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/export-private-key.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useExportAccount } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Version Header and Release Notes\nDESCRIPTION: Markdown formatted version headers and changelog entries documenting changes across multiple alpha releases.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n# [4.0.0-alpha.8](https://github.com/alchemyplatform/aa-sdk/compare/v4.0.0-alpha.7...v4.0.0-alpha.8) (2024-07-22)\n\n### Bug Fixes\n\n- fix demo header links and update guide\n- fixing nav links\n- **react:** fix sign in header hiding itself\n\n# [4.0.0-alpha.7](https://github.com/alchemyplatform/aa-sdk/compare/v4.0.0-alpha.6...v4.0.0-alpha.7) (2024-07-19)\n\n### Bug Fixes\n\n- **core:** initial state parsing and disconnect logic\n- exporting queryClient and typing uiConfig in example\n- **ui-demo:** add passkey toggle wasn't working\n\n### Features\n\n- **erc7677:** create a new middle ware for erc7677 to replace gasManager middleWare\n```\n\n----------------------------------------\n\nTITLE: Importing combineSignatures from @account-kit/smart-contracts\nDESCRIPTION: Shows how to import the combineSignatures function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/combineSignatures.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { combineSignatures } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing EthersProviderAdapter in @aa-sdk/ethers (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import the `EthersProviderAdapter` class from the `@aa-sdk/ethers` library. This import is a prerequisite for utilizing the class and its static methods, such as `fromEthersProvider`, within your application. It assumes the `@aa-sdk/ethers` package is installed as a project dependency.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/fromEthersProvider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { EthersProviderAdapter } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependency Remappings for Solidity Forge Project\nDESCRIPTION: This snippet defines remappings for external libraries used in a Forge project. It specifies the paths for OpenZeppelin contracts and Forge Standard Library, allowing the compiler to resolve these dependencies correctly.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/contracts/DAAppNFT/remappings.txt#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nopenzeppelin-contracts/=lib/openzeppelin-contracts/\nforge-std/=lib/forge-std/src/\n```\n\n----------------------------------------\n\nTITLE: Importing ChainNotFoundError in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the ChainNotFoundError class from the @aa-sdk/core package. The ChainNotFoundError is used to handle cases where no chain was supplied to the client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/ChainNotFoundError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChainNotFoundError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Light Account Implementation Address Example\nDESCRIPTION: Example implementation address for Light Account v1.1.0 smart contract deployment reference.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/faqs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba\n```\n\n----------------------------------------\n\nTITLE: Building and Running the React Native Project\nDESCRIPTION: Command to build and run the React Native project on an Android device or emulator after setting up Account Kit and all the necessary dependencies.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-native run-android\n```\n\n----------------------------------------\n\nTITLE: Importing FailedToFindTransactionError from aa-sdk core\nDESCRIPTION: Shows how to import the FailedToFindTransactionError class from the @aa-sdk/core package. This error class is used to handle cases where a transaction cannot be found for a given user operation hash.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/FailedToFindTransactionError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FailedToFindTransactionError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-chain Support in Account Kit\nDESCRIPTION: Demonstrates how to set up Account Kit configuration for multiple chains including Sepolia and Mainnet. Shows how to specify default chain, transport layers, and optional gas sponsorship policies for each chain.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/multi-chain-apps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@account-kit/core\";\nimport { sepolia, mainnet, alchemy } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  // use this transport for all chains\n  transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }),\n  // this is the default chain\n  chain: sepolia,\n  chains: [\n    {\n      chain: mainnet,\n      // optional: sponsor gas for this chain\n      policyId: \"MAINNET_GAS_MANAGER_POLICY_ID\",\n    },\n    {\n      chain: sepolia,\n      // optional: override the default transport for this chain\n      transport: alchemy({ apiKey: \"OTHER_API_KEY\" }),\n      // optional: sponsor gas for this chain\n      policyId: \"SEPOLIA_GAS_MANAGER_POLICY_ID\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing defaultGasEstimator from AA SDK Core in TypeScript\nDESCRIPTION: This code snippet shows how to import the defaultGasEstimator function from the @aa-sdk/core package. This function is used as the default gas estimator middleware for SmartAccountClient.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/defaultGasEstimator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultGasEstimator } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Multiplier Type Definition\nDESCRIPTION: Type definition for numeric multiplier with precision up to 4 decimal places.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/utils/schema.ts:Multiplier]\n```\n\n----------------------------------------\n\nTITLE: Importing createLightAccount from Account Kit Smart Contracts in TypeScript\nDESCRIPTION: Shows how to import the createLightAccount function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createLightAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing WalletClientSigner from aa-sdk - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the WalletClientSigner class from the @aa-sdk/core package for use in TypeScript projects. No additional dependencies are needed other than @aa-sdk/core itself. The import is kept minimal, preparing for subsequent instantiation and usage in account abstraction workflows.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/WalletClientSigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { WalletClientSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for ESM Modules\nDESCRIPTION: JSON configuration to add to tsconfig.json to support ESM modules in the React Native project, specifically for the @account-kit/react-native package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-rn-bare.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"module\": \"NodeNext\",\n\"moduleResolution\": \"nodenext\",\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status with useUser Hook in React\nDESCRIPTION: This snippet shows how to use the useUser hook to retrieve current user information from either an External Owned Account (EOA) or from a Smart Contract Account (SCA). It's the recommended way to check if a user is logged in regardless of account type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/react-hooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useUser } from \"@account-kit/react\";\n\nfunction MyComponent() {\n  const user = useUser();\n\n  if (!user) {\n    return <div>Please log in</div>;\n  }\n\n  return (\n    <div>\n      <p>User address: {user.address}</p>\n      <p>Account type: {user.type}</p> {/* \"eoa\" or \"sca\" */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Version Headers in Markdown\nDESCRIPTION: Markdown version headers showing release versions and dates for the AA-SDK changelog\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# [4.13.0](https://github.com/alchemyplatform/aa-sdk/compare/v4.12.0...v4.13.0) (2025-02-11)\n\n# [4.12.0](https://github.com/alchemyplatform/aa-sdk/compare/v4.11.0...v4.12.0) (2025-02-04)\n\n# [4.11.0](https://github.com/alchemyplatform/aa-sdk/compare/v4.10.0...v4.11.0) (2025-01-29)\n\n# [4.10.0](https://github.com/alchemyplatform/aa-sdk/compare/v4.9.0...v4.10.0) (2025-01-28)\n\n# [4.9.0](https://github.com/alchemyplatform/aa-sdk/compare/v4.8.0...v4.9.0) (2025-01-13)\n\n# [4.8.0](https://github.com/alchemyplatform/aa-sdk/compare/v4.7.0...v4.8.0) (2025-01-08)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Storage for State Persistence\nDESCRIPTION: Shows how to configure cookie storage in Account Kit for persisting state between server and client. Includes SSR configuration with cookie storage implementation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/ssr.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createConfig,\n  cookieStorage,\n} from \"@account-kit/core\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const config = createConfig({\n  transport: alchemy({ apiKey: \"ALCHEMY_API_KEY\" }),\n  chain: sepolia,\n  ssr: true,\n  storage: cookieStorage,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner and Related Modules - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the AccountSigner class from @aa-sdk/ethers. AccountSigner is used to handle account signing functions within the SDK. Importing ensures that the class can be instantiated and its methods, such as connect, are available for use. No external dependencies are required other than the @aa-sdk/ethers package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/connect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing noopMiddleware from @aa-sdk/core (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `noopMiddleware` function from the `@aa-sdk/core` library. This function acts as a pass-through middleware, accepting `UserOperationStruct` arguments and returning them unmodified. It requires the `@aa-sdk/core` package as a dependency.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/noopMiddleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n```ts\nimport { noopMiddleware } from \"@aa-sdk/core\";\n```\n```\n\n----------------------------------------\n\nTITLE: Importing createAccount from Account Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the createAccount function from the @account-kit/core package using TypeScript import syntax. It is required to utilize any account creation features from the SDK. No configuration or parameters are shown in this snippet; it only covers the import process. The dependency here is @account-kit/core, which must be installed in the project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/createAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createAccount } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing buildUserOperationFromTxs in TypeScript\nDESCRIPTION: Shows how to import the buildUserOperationFromTxs function from the AA-SDK core package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/buildUserOperationFromTxs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildUserOperationFromTxs } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchSmartAccountClient in TypeScript\nDESCRIPTION: Shows how to import the watchSmartAccountClient function from the @account-kit/core package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchSmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSmartAccountClient } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Switching Between Chains Using the useChain Hook\nDESCRIPTION: Demonstrates how to implement chain switching functionality in a React component using the useChain hook from Account Kit. This component displays the current chain and provides buttons to switch between Mainnet and Sepolia networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/multi-chain-apps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useChain } from \"@account-kit/react\";\nimport { mainnet, sepolia } from \"@account-kit/infra\";\n\nexport default function MyComponent() {\n  const { chain, setChain } = useChain();\n\n  return (\n    <div>\n      <p>Current chain: {chain.name}</p>\n      <button onClick={() => setChain({ chain: mainnet })}>\n        Switch to Mainnet\n      </button>\n      <button onClick={() => setChain({ chain: sepolia })}>\n        Switch to Sepolia\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Operation Gas Sponsorship with React Native\nDESCRIPTION: React Native component demonstrating how to implement gas sponsorship for specific UserOperations using the Smart Account Client and hooks from Account Kit.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/using-smart-accounts/sponsor-gas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, Pressable, Text } from \"react-native\";\nimport {\n  useSmartAccountClient,\n  useSendUserOperation,\n} from \"@account-kit/react-native\";\n\nexport default function MyComponent() {\n  const { client } = useSmartAccountClient({\n    policyId: \"GAS_MANAGER_POLICY_ID\",\n  });\n  const { sendUserOperation } = useSendUserOperation({ client });\n\n  return (\n    <View>\n      <Pressable\n        onPress={() =>\n          sendUserOperation({\n            uo: {\n              target: \"0xTARGET_ADDRESS\",\n              data: \"0x\",\n              value: 0n,\n            },\n          })\n        }\n      >\n        <View>\n          <Text>Send Sponsored User Operation</Text>\n        </View>\n      </Pressable>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing isSmartAccountClient from AA SDK Core (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the isSmartAccountClient method from the @aa-sdk/core package using TypeScript ES module import syntax. This import enables type assertions for distinguishing SmartAccountClient instances. Requires the @aa-sdk/core package to be installed in the project. No parameters are required for the import itself; subsequent method usage expects a compatible client object as input.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/isSmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { isSmartAccountClient } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authentication UI in Account Kit\nDESCRIPTION: Example configuration for customizing authentication UI with multiple sections including email, passkey, social logins, and external wallet support.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/ui-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  illustrationStyle: \"outline\",\n  auth: {\n    sections: [\n      [{ type: \"email\" }],\n      [\n        { type: \"passkey\" },\n        { type: \"social\", authProviderId: \"google\", mode: \"popup\" },\n        { type: \"social\", authProviderId: \"facebook\", mode: \"popup\" },\n      ],\n      [\n        {\n          type: \"external_wallets\",\n          walletConnect: { projectId: \"your-project-id\" },\n        },\n      ],\n    ],\n    addPasskeyOnSignup: false,\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Email OTP Authentication in UI Components with Account Kit\nDESCRIPTION: This snippet demonstrates how to configure Email OTP authentication in your React application using Account Kit's pre-built UI components. It shows how to create a configuration object with custom options for the email authentication flow.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/email-otp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nconst uiConfig: AlchemyAccountsUIConfig = {\n  auth: {\n    sections: [\n      [\n        {\n          type: \"email\",\n          emailMode: \"otp\",\n\n          // Optional customizations:\n          buttonLabel: \"Continue with Email\",\n          placeholder: \"Enter your email address\",\n        },\n      ],\n    ],\n  },\n};\n\nexport const config = createConfig(\n  {\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n  },\n  uiConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Light Account Alchemy Client for AA-only Chains in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Light Account Alchemy Client for AA-only chains using the createLightAccountAlchemyClient function. It configures the transport to use both Alchemy's Bundler and Paymaster RPC and a separate Node RPC provider.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/third-party/chains.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zora, alchemy } from \"@account-kit/infra\";\nimport { createLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n\nconst smartAccountClient = createLightAccountAlchemyClient({\n  transport: alchemy({\n    alchemyConnection: {\n      apiKey: \"ALCHEMY_API_KEY\",\n    },\n    nodeRpcUrl: \"ZORA_NODE_RPC_URL\",\n  }),\n  chain: zora,\n  signer: LocalAccountSigner.generatePrivateKeySigner(),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AccountSigner with Smart Contract Account\nDESCRIPTION: Demonstrates complete setup of AccountSigner including creating a light account, setting up the provider, and initializing the signer. Uses multiple dependencies including LocalAccountSigner, chain configuration, and HTTP transport.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/constructor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner, EthersProviderAdapter } from \"@aa-sdk/ethers\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"@account-kit/infra\";\nimport { createLightAccount } from \"@account-kit/smart-contracts\";\nimport { http } from \"viem\";\n\nconst account = await createLightAccount({\n  transport: http(\"https://rpc.testnet.aepps.com\"),\n  chain: sepolia,\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n\nconst provider = new EthersProviderAdapter();\nconst signer = new AccountSigner(provider, account);\n```\n\n----------------------------------------\n\nTITLE: Importing defaultPaymasterAndData Middleware - AA SDK - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the defaultPaymasterAndData middleware function from the @aa-sdk/core package using ECMAScript module syntax. It is required as a prerequisite before integrating or invoking the middleware in account abstraction flows. Ensure that @aa-sdk/core is listed as a dependency in your project, and TypeScript is properly configured to recognize ES module imports.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/defaultPaymasterAndData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defaultPaymasterAndData } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for User Authentication\nDESCRIPTION: Shows how to import the BaseSignerClient class from the Account Kit signer module, which is required for user authentication operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/whoami.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing useUiConfig Hook in TypeScript\nDESCRIPTION: Shows how to import the useUiConfig hook from the @account-kit/react package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useUiConfig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUiConfig } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the account-kit signer module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/validateMultiFactors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Managing Loading State for Authentication Modal in React\nDESCRIPTION: This code shows how to manage loading states during authentication with redirects in a modal. It uses useSignerStatus and useAuthModal hooks to track authentication status and automatically open the modal when authentication is in progress.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/ui-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthModal, useSignerStatus } from \"@account-kit/react\";\nimport { useEffect } from \"react\";\n\nconst { openAuthModal } = useAuthModal();\nconst { isAuthenticating } = useSignerStatus();\n\nuseEffect(() => {\n  if (isAuthenticating) {\n    openAuthModal();\n  }\n}, [openAuthModal, isAuthenticating]);\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for MFA Factor Retrieval in TypeScript\nDESCRIPTION: This snippet shows how to import the BaseSignerClient from the @account-kit/signer package, which provides the getMfaFactors method for retrieving MFA factors configured for the current user.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/getMfaFactors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing Logger Class from @aa-sdk/core in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `Logger` class from the `@aa-sdk/core` package using ES module syntax. This import is required to access the static methods of the Logger class, such as `warn`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/warn.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing BatchExecutionNotSupportedError from AA SDK Core\nDESCRIPTION: Shows how to import the BatchExecutionNotSupportedError class from the @aa-sdk/core package. This error is used when a specific account type doesn't support batch execution operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/BatchExecutionNotSupportedError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BatchExecutionNotSupportedError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing useAuthContext Hook in TypeScript\nDESCRIPTION: Shows how to import the useAuthContext hook from the @account-kit/react package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAuthContext.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthContext } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Setting Log Filter Pattern using Logger.setLogFilter in TypeScript\nDESCRIPTION: This example demonstrates how to use the setLogFilter method of the Logger class. It sets the log filter pattern to \"error\", which will filter log messages to only show error-level logs.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/setLogFilter.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.setLogFilter(\"error\");\n```\n\n----------------------------------------\n\nTITLE: Converting Chain ID to Coin Type and Mapping to Chain with AA SDK in TypeScript\nDESCRIPTION: This example showcases how to combine the 'convertChainIdToCoinType' and 'convertCoinTypeToChain' functions from '@aa-sdk/core' with a chain object (such as 'sepolia' from 'viem/chains') to convert a chain ID to its corresponding coin type, then map that coin type to a blockchain chain instance. Prerequisites include the '@aa-sdk/core' and 'viem/chains' packages. The main parameters are a valid chain object and its 'id' property; the output is a Chain object matching the coin type. This pattern is useful for interoperable blockchain applications that require precise chain mapping based on numeric identifiers.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/convertCoinTypeToChain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { convertChainIdToCoinType, convertCoinTypeToChain } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst coinType = convertChainIdToCoinType(sepolia.id);\nconst chain = convertCoinTypeToChain(coinType);\n```\n\n----------------------------------------\n\nTITLE: Changing the Sign-in Header Text in Account Kit React\nDESCRIPTION: This example demonstrates how to customize the authentication modal by hiding the default 'Sign in' text and replacing it with a custom header text. The configuration uses the auth.header and auth.hideSignInText options when creating a config with the createConfig function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/customization/authentication-modal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @jsx: react-jsx\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const confg = createConfig(\n  {\n    transport: alchemy({ apiKey: \"YOUR_API_KEY\" }),\n    chain: sepolia,\n  },\n  {\n    auth: {\n      header: \"Sign in with your account\", // [!code ++]\n      hideSignInText: true, // [!code ++]\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Logger.info Method in TypeScript\nDESCRIPTION: Demonstrates how to use the info method of the Logger class to log an informational message. The method logs the message if the logging level is set to INFO.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/info.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.info(\"Something is happening\");\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationCallData Type in TypeScript\nDESCRIPTION: Defines the UserOperationCallData type representing user's intent. It includes target address, transaction calldata, and value to send.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationCallData]\n```\n\n----------------------------------------\n\nTITLE: Importing getAlchemyPaymasterAddress from Account Kit Infra (TypeScript)\nDESCRIPTION: Demonstrates how to import the getAlchemyPaymasterAddress method from the @account-kit/infra NPM package into a TypeScript file. This import enables access to a utility for retrieving Alchemy paymaster addresses for supported blockchain chains. Requires installation of @account-kit/infra as a project dependency.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/getAlchemyPaymasterAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getAlchemyPaymasterAddress } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Using AlchemyWebSigner to Sign Typed Data\nDESCRIPTION: Demonstrates how to instantiate an AlchemyWebSigner and use it to sign typed data. Shows configuration of RPC URL and iframe container settings, followed by calling the signTypedData method with required parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signTypedData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst signature = await signer.signTypedData({\n  domain: {},\n  types: {},\n  primaryType: \"\",\n  message: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Colors in Account Kit Theme\nDESCRIPTION: Demonstrates how to override default colors in the Account Kit Theme using the withAccountKitUi function in the tailwind.config.js file. This example shows how to change the 'active' color for both light and dark modes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/customization/theme.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAccountKitUi, createColorSet } from \"@account-kit/react/tailwind\";\n\nexport const tailwindConfig = withAccountKitUi(\n  {\n    content: [],\n    // your tailwind config\n  },\n  {\n    colors: {\n      active: createColorSet(\"#94A3B8\", \"#94A3B8\"),\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the Account Kit signer package, which provides access to the getUser method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/getUser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Packages\nDESCRIPTION: Commands to install the necessary Account Kit packages for React Native to enable account abstraction functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -s @account-kit/react-native @account-kit/smart-contracts @account-kit/infra\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/react-native @account-kit/smart-contracts @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Importing useAuthError Hook - TypeScript\nDESCRIPTION: Shows how to import the useAuthError hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useAuthError.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthError } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing AuthCard from Account Kit React (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import the AuthCard component from the @account-kit/react package. It prepares the component for use in any TypeScript or React file. No additional dependencies are required beyond having @account-kit/react installed and TypeScript configured.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/components/AuthCard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AuthCard } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Using validateMultiFactors with AlchemyWebSigner\nDESCRIPTION: Demonstrates how to initialize an AlchemyWebSigner instance and use the validateMultiFactors method to validate MFA codes. Shows complete setup including client configuration and MFA validation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/validateMultiFactors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\n// After MFA is required and user provides code\nconst user = await signer.validateMultiFactors({\n  multiFactorCode: \"123456\", // 6-digit code from authenticator app\n  multiFactorId: \"factor-id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using AlchemyWebSigner to Look Up User Organization ID\nDESCRIPTION: Demonstrates how to initialize AlchemyWebSigner with configuration options and use it to look up a user's organization ID by email. The signer is configured with an RPC URL and iframe container ID.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getUser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyWebSigner } from \"@account-kit/signer\";\n\nconst signer = new AlchemyWebSigner({\n  client: {\n    connection: {\n      rpcUrl: \"/api/rpc\",\n    },\n    iframeConfig: {\n      iframeContainerId: \"alchemy-signer-iframe-container\",\n    },\n  },\n});\n\nconst result = await signer.getUser(\"foo@mail.com\");\n```\n\n----------------------------------------\n\nTITLE: Importing `getUser` from @account-kit/core (TypeScript)\nDESCRIPTION: Demonstrates how to import the `getUser` function from the `@account-kit/core` library. This is the necessary first step before using the function to retrieve user details.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/getUser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { getUser } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contracts\nDESCRIPTION: Command to deploy smart contracts using forge script with optimization profile and verification\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/contracts/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ FOUNDRY_PROFILE=optimized-build forge script script/DeploySwapVenue.s.sol -vv --verify --rpc-url <your_rpc_url> <wallet_option>\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient from Account Kit\nDESCRIPTION: Shows how to import the BaseSignerClient class from the @account-kit/signer package for use in TypeScript applications.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing Smart Contract Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @account-kit/smart-contracts package in a markdown document. It's used to introduce the package and its purpose within the documentation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# account-kit/smart-contracts\n\nThe `@account-kit/smart-contracts` package contains all of the definitions for our smart contracts.\nThis package is designed for developers who want to use our smart contracts, but may want to use their own Signer or Infrastructre for sending user operations.\n\nFor a fully integrated stack, consider using the `@account-kit/core` or `@account-kit/react` packages.\n```\n\n----------------------------------------\n\nTITLE: Using dropAndReplaceUserOperation with Smart Account Client\nDESCRIPTION: Demonstrates how to use dropAndReplaceUserOperation with a smart account client to replace an existing user operation. Shows client creation, sending initial operation, and dropping/replacing it.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/dropAndReplaceUserOperation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\ncreateSmartAccountClient,\n} from \"@aa-sdk/core\";\n\n// smart account client is already extended with dropAndReplaceUserOperation\nconst client = createSmartAccountClient(...);\nconst { request } = await client.sendUserOperation(...);\nconst result = await client.dropAndReplaceUserOperation({\nuoToDrop: request,\naccount, // only required if the client above is not connected to an account\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Spend Limit with SessionKeyPermissionsBuilder\nDESCRIPTION: This example shows how to create a new SessionKeyPermissionsBuilder instance and set gas spending limits. The method configures both a maximum spend limit and a refresh interval for the gas limit.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setGasSpendLimit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setGasSpendLimit({\n  spendLimit: 1000000000000000000n,\n  refreshInterval: 3600,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Access Control Type with SessionKeyPermissionsBuilder\nDESCRIPTION: Demonstrates how to create a new SessionKeyPermissionsBuilder instance and set the contract access control type to ALLOWLIST. This configures the permission model for contracts that can be accessed with this session key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setContractAccessControlType.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setContractAccessControlType(SessionKeyAccessListType.ALLOWLIST);\n```\n\n----------------------------------------\n\nTITLE: Setting Native Token Spend Limit\nDESCRIPTION: Demonstrates how to create a SessionKeyPermissionsBuilder instance and set native token spend limits with a specific amount and refresh interval. The spendLimit is set in wei (1 ETH = 1000000000000000000 wei) and refreshInterval in seconds.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setNativeTokenSpendLimit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setNativeTokenSpendLimit({\n  spendLimit: 1000000000000000000n,\n  refreshInterval: 3600,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing bundlerActions from AA-SDK Core in TypeScript\nDESCRIPTION: This code snippet shows how to import the bundlerActions method from the @aa-sdk/core package. The bundlerActions method is a viem client decorator that provides Bundler specific actions for handling user operations and interacting with entry points.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/bundlerActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundlerActions } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Tracking Authentication Status with Account Kit React Hooks\nDESCRIPTION: Example of how to track the user's authentication status using the useSignerStatus hook from Account Kit. This hook provides a simple way to determine if a user is currently authenticated.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/login-methods/social-providers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n\n// Inside your component\nconst { isConnected } = useSignerStatus();\n\n// You can use isConnected to conditionally render UI\n```\n\n----------------------------------------\n\nTITLE: Using setTimeRange Method to Define Time Restrictions\nDESCRIPTION: Demonstrates how to create a SessionKeyPermissionsBuilder instance and set time range restrictions for session keys. The example creates a 15-minute validity window from the current time.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setTimeRange.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setTimeRange({\n  validFrom: Date.now(),\n  validUntil: Date.now() + 15 * 60 * 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Using SignAuthorization with Private Key\nDESCRIPTION: Demonstrates how to create a signer from a private key and use it to sign an authorization. Shows the complete flow from generating a private key to obtaining a signed authorization.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signAuthorization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst signer = LocalAccountSigner.privateKeyToAccountSigner(\n  generatePrivateKey()\n);\nconst signedAuthorization = await signer.signAuthorization({\n  contractAddress: \"0x1234123412341234123412341234123412341234\",\n  chainId: 1,\n  nonce: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing TraceHeader from AA SDK Core in TypeScript\nDESCRIPTION: Shows how to import the TraceHeader class from the AA SDK core module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/TraceHeader/withEvent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TraceHeader } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Server for React Native\nDESCRIPTION: Commands to start the Metro JavaScript bundler for a React Native project using either npm or Yarn.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/rn-signer/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm start\n\n# OR using Yarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Account Kit Documentation\nDESCRIPTION: JSX import statements for various UI components used in the Account Kit documentation page. These components include TileButton, SmallTileRow, and various icon components that are used to create the navigation elements.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TileButton, SmallTileRow } from \"../components/TileButton\";\nimport { ClockForwardIcon } from \"../components/icons/ClockForwardIcon\";\nimport { PointerIcon } from \"../components/icons/PointerIcon\";\nimport { DotsIcon } from \"../components/icons/DotsIcon\";\nimport { InfraIcon } from \"../components/icons/InfraIcon\";\nimport { SmartContractIcon } from \"../components/icons/SmartContractIcon\";\nimport { SignerIcon } from \"../components/icons/SignerIcon\";\nimport { ReactNativeIcon } from \"../components/icons/ReactNativeIcon\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchChain in TypeScript\nDESCRIPTION: Shows how to import the watchChain method from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchChain } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Upgrading Light Account to Modular Account\nDESCRIPTION: Demonstrates the process of upgrading a Light Account to a Modular Account using getMSCAUpgradeToData utility. The code shows how to generate upgrade data and execute the upgrade transaction.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/upgrading-to-modular-account.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lightAccountClient } from \"./lightAccountClient\";\nimport { getMSCAUpgradeToData } from \"@account-kit/smart-contracts\";\n\nconst { createMAAccount, ...upgradeToData } = await getMSCAUpgradeToData(\n  lightAccountClient,\n  { account: lightAccountClient.account }\n);\n\nconst hash = await lightAccountClient.upgradeAccount({\n  upgradeTo: upgradeToData,\n  waitForTx: true,\n});\n\nconst upgradedAccount = await createMAAccount();\n```\n\n----------------------------------------\n\nTITLE: Creating Alchemy Signer Instance in TypeScript\nDESCRIPTION: Code to create an instance of the Alchemy Signer using the createSigner function from @account-kit/signer. It configures the signer with an API key and specifies the chain (in this case, Sepolia).\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/quickstart.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSigner } from \"@account-kit/signer\";\nimport { sepolia } from \"@account-kit/infra\";\n\nexport const signer = createSigner({\n  apiKey: \"YOUR_API_KEY\",\n  chain: sepolia,\n});\n```\n\n----------------------------------------\n\nTITLE: Using the useLogout Hook with Callback Functions\nDESCRIPTION: Demonstrates how to use the useLogout hook with optional onSuccess and onError callbacks. Returns logout function, loading state, and error state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useLogout.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogout } from \"@account-kit/react\";\n\nconst { logout, isLoggingOut, error } = useLogout({\n  // these are optional\n  onSuccess: () => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n```\n\n----------------------------------------\n\nTITLE: Using accountLoupeActions with Smart Account Client in TypeScript\nDESCRIPTION: This example demonstrates how to use the accountLoupeActions function to extend a smart account client with account loupe actions. It imports necessary functions and creates a client with extended functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/accountLoupeActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accountLoupeActions } from \"@account-kit/smart-contracts\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst client = createSmartAccountClient(...).extend(accountLoupeActions);\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationReceipt Interface for Operation Results\nDESCRIPTION: Interface defining the structure for responses from the eth_getUserOperationReceipt RPC method, containing details about a completed UserOperation including sender, nonce, gas costs, and execution status.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationReceipt]\n```\n\n----------------------------------------\n\nTITLE: Using getSignerStatus with Configuration\nDESCRIPTION: Demonstrates how to use the getSignerStatus method with a configuration object to retrieve the current signer status. The config parameter must be of type AlchemyAccountsConfig and contains the client store.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getSignerStatus.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSignerStatus } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst signerStatus = getSignerStatus(config);\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyGasAndPaymasterAndDataMiddleware in TypeScript\nDESCRIPTION: Shows how to import the alchemyGasAndPaymasterAndDataMiddleware function from the @account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyGasAndPaymasterAndDataMiddleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemyGasAndPaymasterAndDataMiddleware } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchAccount from Account Kit Core in TypeScript\nDESCRIPTION: Demonstrates how to import the watchAccount function from the @account-kit/core package. This is the prerequisite step required to access and use the watchAccount functionality elsewhere in the codebase. No parameters or input/output considerations apply at this stage; ensure the dependency @account-kit/core is installed beforehand.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { watchAccount } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchChain from @account-kit/core in TypeScript\nDESCRIPTION: This snippet shows how to import the `watchChain` function from the `@account-kit/core` package. This function is essential for setting up a listener for blockchain chain changes within the client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { watchChain } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing lookupUserByEmail from BaseSignerClient in TypeScript\nDESCRIPTION: This snippet shows how to import the BaseSignerClient, which contains the lookupUserByEmail method. The method is used to look up user information based on an email address and returns a Promise with the lookup result.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/lookupUserByEmail.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing hydrate Function from @account-kit/core in TypeScript\nDESCRIPTION: This snippet shows how to import the `hydrate` function specifically from the `@account-kit/core` package. This function is essential for initializing the client state within the Account Kit SDK.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/hydrate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { hydrate } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Using targetPublicKey method with AlchemySignerWebClient\nDESCRIPTION: Demonstrates how to create an AlchemySignerWebClient instance and call the targetPublicKey method to initialize the iframe stamper and retrieve its public key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/targetPublicKey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n\nconst client = new AlchemySignerWebClient({\n  connection: {\n    apiKey: \"your-api-key\",\n  },\n  iframeConfig: {\n    iframeContainerId: \"signer-iframe-container\",\n  },\n});\n\nconst publicKey = await client.targetPublicKey();\n```\n\n----------------------------------------\n\nTITLE: Using getConnection Function - TypeScript\nDESCRIPTION: Demonstrates how to use the getConnection function by passing a configuration object to get a connection for the active chain. The function expects an AlchemyAccountsConfig parameter and returns a Connection object.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getConnection.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnection } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst connection = getConnection(config);\n```\n\n----------------------------------------\n\nTITLE: Using the encode method to generate hexadecimal permission strings\nDESCRIPTION: Demonstrates creating a SessionKeyPermissionsBuilder instance, setting a required paymaster, and using the encode method to generate an array of hexadecimal strings representing permissions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/encode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst builder = new SessionKeyPermissionsBuilder();\nbuilder.setRequiredPaymaster(\"0x1234\");\nconst encoded = builder.encode();\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication Modal Header Text in Account Kit\nDESCRIPTION: This snippet shows how to override the default 'Sign in' header text in the authentication modal by setting custom text and hiding the default text using the auth configuration options.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/customization/authentication-modal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @jsx: react-jsx\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const confg = createConfig(\n  {\n    transport: alchemy({ apiKey: \"YOUR_API_KEY\" }),\n    chain: sepolia,\n  },\n  {\n    auth: {\n      header: \"Sign in with your account\", // [!code ++]\n      hideSignInText: true, // [!code ++]\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying PR Title Format Using Commitlint\nDESCRIPTION: This command helps contributors check if their PR title follows the required format before submission. It uses yarn commitlint to validate the PR title against the project's commit message conventions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"[YOUR_PR_TITLE_HERE] | yarn commitlint\n```\n\n----------------------------------------\n\nTITLE: Uniswap V3 Swap Gas Costs Comparison\nDESCRIPTION: Gas costs comparison for Uniswap V3 swap operations across different smart contract wallet implementations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/gas-benchmarks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|                            |  Gas Cost |\n| :------------------------- | --------: |\n| Alchemy Modular Account v2 | `201,790` |\n| Biconomy Nexus             | `207,286` |\n| ZeroDev Kernel v3.1        | `234,378` |\n| Safe v1.4.1                | `220,464` |\n| Coinbase Smart Wallet      | `200,573` |\n| Simple Account             | `194,829` |\n```\n\n----------------------------------------\n\nTITLE: Using getEntryPoint with Chain Parameters\nDESCRIPTION: Demonstrates how to use getEntryPoint method with different versions and chain parameters. Shows both default version usage and explicit version specification.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/getEntryPoint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEntryPoint } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst entryPoint060 = getEntryPoint(sepolia);\nconst entryPoint070 = getEntryPoint(sepolia, { version: \"0.7.0\" });\n```\n\n----------------------------------------\n\nTITLE: Version Headers and Links in Changelog\nDESCRIPTION: Markdown formatting for version headers, links to commit comparisons, and issue references in the changelog.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/smart-contracts/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [4.28.0](https://github.com/alchemyplatform/aa-sdk/compare/v4.27.0...v4.28.0) (2025-04-22)\n\n**Note:** Version bump only for package @account-kit/smart-contracts\n\n# [4.27.0](https://github.com/alchemyplatform/aa-sdk/compare/v4.26.0...v4.27.0) (2025-04-18)\n```\n\n----------------------------------------\n\nTITLE: Updating Session Key Permissions in TypeScript\nDESCRIPTION: Shows how to update an existing session key's permissions, specifically updating the time range while leaving other permissions unchanged.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/supported-permissions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionKeyPlugin = new SessionKeyPlugin();\nconst updateKeyData = sessionKeyPlugin.encodeUpdateKeyPermissionsData({\n  key: sessionKeyAddress,\n  permissions: new SessionKeyPermissionBuilder()\n    .setTimeRange({ validFrom: 0, validUntil: 2000 })\n    .build()\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing Light Account Client in TypeScript\nDESCRIPTION: Creates a Light Account client using the Alchemy AA-SDK. It sets up the client with an Alchemy transport, Sepolia network, and a user-provided signer.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/modular-account-v2/upgrading-to-MAv2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountClient } from \"@account-kit/smart-contracts\";\nconst lightAccountClient = await createLightAccountClient({\n    transport: alchemy({ apiKey: \"your-api-key\" }),\n    chain: sepolia,\n    signer: yourSigner\n\n```\n\n----------------------------------------\n\nTITLE: Importing sendTransactions from AA SDK Core in TypeScript\nDESCRIPTION: Shows how to import the sendTransactions function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/sendTransactions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransactions } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing SmartAccountSigner Type Reference\nDESCRIPTION: Reference to the SmartAccountSigner type that is implemented by the Alchemy Signer. The signer provides authentication functionality through Alchemy's Signer Infrastructure.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSmartAccountSigner\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient in TypeScript\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/disconnect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Using useConnect Hook in TypeScript\nDESCRIPTION: This example demonstrates how to use the useConnect hook to connect an EOA. It includes optional onSuccess and onError callbacks for handling connection results.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useConnect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnect } from \"@account-kit/react\";\n\nconst { connectors, connect } = useConnect({\n  // these are optional\n  onSuccess: () => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidUserOperationError from AA SDK Core\nDESCRIPTION: Shows how to import the InvalidUserOperationError class from the @aa-sdk/core package. This error class is used to handle invalid user operations and extends the BaseError class.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/InvalidUserOperationError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidUserOperationError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using hydrate function with initial state in TypeScript\nDESCRIPTION: Demonstrates how to use the hydrate function with an initial state derived from a cookie. It also shows the usage of the onMount function returned by hydrate.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/hydrate.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hydrate, cookieToInitialState } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst initialState = cookieToInitialState(document.cookie);\nconst { onMount } = hydrate(config, initialState);\n// call onMount once your component has mounted\n```\n\n----------------------------------------\n\nTITLE: Importing FailedToGetStorageSlotError in TypeScript\nDESCRIPTION: This snippet shows how to import the FailedToGetStorageSlotError class from the @aa-sdk/core package. This class is used to create custom error messages for storage slot access failures.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/FailedToGetStorageSlotError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FailedToGetStorageSlotError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using getMAInitializationData Function with SmartAccountClient in TypeScript\nDESCRIPTION: Demonstrates how to use the getMAInitializationData function with a SmartAccountClient. It includes creating a client and calling the function with necessary parameters.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getMAInitializationData.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMAInitializationData } from \"@account-kit/smart-contracts\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst client = createSmartAccountClient(...);\nconst initializationData = await getMAInitializationData({\nclient,\nsignerAddress: \"0x...\", // or array of signers\n});\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidEntryPointError from AA-SDK Core\nDESCRIPTION: Shows how to import the InvalidEntryPointError class from the @aa-sdk/core package. This error class is used to handle invalid entry point version scenarios in blockchain operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/InvalidEntryPointError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidEntryPointError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing asyncPipe Function from AA SDK Core in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the asyncPipe function from the @aa-sdk/core module. The asyncPipe function is a utility that enables chaining multiple asynchronous functions together.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/asyncPipe.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { asyncPipe } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for ESM Modules\nDESCRIPTION: JSON configuration to add to tsconfig.json for supporting ESM modules in the project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"module\": \"NodeNext\",\n\"moduleResolution\": \"nodenext\",\n```\n\n----------------------------------------\n\nTITLE: Customizing Border Radius in Account Kit Theme\nDESCRIPTION: Shows how to customize the border radius size in the Account Kit Theme using the withAccountKitUi function. This example sets the border radius to 'md' (16px).\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/customization/theme.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withAccountKitUi } from \"@account-kit/react/tailwind\";\n\nexport const tailwindConfig = withAccountKitUi(\n  {\n    content: [],\n    // your tailwind config\n  },\n  {\n    borderRadius: \"md\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating Middleware Configuration in v3\nDESCRIPTION: Demonstrates how to migrate from using 'with*' middleware functions to the new configuration approach in v3. This example specifically shows updating the gas estimator middleware from the old method to the new inline configuration style.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/migration-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SmartAccountProvider } from \"@aa-sdk/core\"; // [!code --]\nimport { getDefaultEntryPointAddress } from \"@aa-sdk/core\"; // [!code --]\nimport { http } from \"viem\"; // [!code ++]\nimport { sepolia } from \"@aa-sdk/core\";\n\nconst provider = new SmartAccountProvider({ // [!code --]\nconst client = createSmartAccountClient({ // [!code ++]\n    rpcProvider: \"RPC_URL\", // [!code --]\n    transport: http(\"RPC_URL\"), // [!code ++]\n    chain: sepolia,\n    entryPointAddress: getDefaultEntryPointAddress(sepolia), // [!code --]\n}).withGasEstimator(async () => ({ // [!code --]\n    gasEstimator: async (struct) => ({ // [!code ++]\n        ...struct, // [!code ++]\n        callGasLimit: 0n,\n        preVerificationGas: 0n,\n        verificationGasLimit: 0n,\n    }), // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit Core Dependencies\nDESCRIPTION: Commands to install the required Account Kit packages using yarn or npm package managers.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/core/quickstart.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/core @account-kit/infra\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -s @account-kit/core @account-kit/infra\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication Header Text in Account Kit Config\nDESCRIPTION: Shows how to customize the authentication modal header text by overriding the header and hideSignInText options in the auth config when calling createConfig.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/react/customization/theme.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createConfig } from \"@account-kit/react\";\nimport { sepolia, alchemy } from \"@account-kit/infra\";\n\nexport const confg = createConfig(\n  {\n    transport: alchemy({ apiKey: \"YOUR_KEY\" }),\n    chain: sepolia,\n  },\n  {\n    auth: {\n      header: \"Sign in with your account\", // [!code ++]\n      hideSignInText: true, // [!code ++]\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Session Key Permissions\nDESCRIPTION: Demonstrates how to construct and update permissions for a session key using the PermissionsBuilder.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n\nconst initialPermissions =\n  new SessionKeyPermissionsBuilder().setNativeTokenSpendLimit({\n    spendLimit: 1000000n,\n  });\n\nconst result = await extendedClient.updateKeyPermissions({\n  args: [sessionKeyAddress, initialPermissions.encode()],\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a Private Key Signer\nDESCRIPTION: Demonstrates how to generate a new private key signer using the LocalAccountSigner class. This creates a new LocalAccountSigner instance initialized with a generated private key account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/generatePrivateKeySigner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n\nconst signer = LocalAccountSigner.generatePrivateKeySigner();\n```\n\n----------------------------------------\n\nTITLE: Running NextJS Development Server\nDESCRIPTION: Commands to start the NextJS development server, allowing you to view and interact with your new authentication flow.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing useSolanaTransaction Hook in TypeScript\nDESCRIPTION: This snippet shows how to import the useSolanaTransaction hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSolanaTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSolanaTransaction } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing createModularAccountV2 Module\nDESCRIPTION: Shows how to import the createModularAccountV2 function from the smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createModularAccountV2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2 } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient for API Key Creation in TypeScript\nDESCRIPTION: This snippet shows how to import the BaseSignerClient class from the @account-kit/signer package. This class provides the experimental_createApiKey method for generating API keys.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/experimental_createApiKey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing useExportAccount Hook\nDESCRIPTION: Demonstrates how to import the useExportAccount hook from the Account Kit React package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/export-private-key.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useExportAccount } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidModularAccountV2Mode in TypeScript\nDESCRIPTION: This snippet shows how to import the InvalidModularAccountV2Mode class from the @aa-sdk/core module. This class is used to create error instances for invalid modular account v2 modes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/InvalidModularAccountV2Mode/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidModularAccountV2Mode } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using Logger.verbose Method in TypeScript\nDESCRIPTION: Demonstrates how to use the verbose method of the Logger class to log a message. The method logs a message with additional arguments if the logging level permits it.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/verbose.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.verbose(\"Something is happening\");\n```\n\n----------------------------------------\n\nTITLE: Importing createBundlerClientFromExisting in TypeScript\nDESCRIPTION: Imports the `createBundlerClientFromExisting` function from the `@aa-sdk/core` library. This function is necessary to create a bundler client instance by extending an existing public client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/createBundlerClientFromExisting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { createBundlerClientFromExisting } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using setLogFilter method in TypeScript\nDESCRIPTION: Demonstrates how to use the setLogFilter method to set the log filter pattern to 'error'. This affects which log messages will be displayed or processed by the Logger.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/setLogFilter.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.setLogFilter(\"error\");\n```\n\n----------------------------------------\n\nTITLE: Using Alchemy Signer with Account Kit React\nDESCRIPTION: This snippet demonstrates the import statements for using the Alchemy Signer with Account Kit in React applications. It shows the packages required for integration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AccountKit } from \"@account-kit/react\";\nimport { AlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Minimum Deployment Target\nDESCRIPTION: JSON configuration to add to app.json for setting the iOS minimum deployment target to 17.0.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-build-properties\",\n        {\n          \"ios\": {\n            \"deploymentTarget\": \"17.0\"\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TraceHeader Default Method in TypeScript\nDESCRIPTION: Demonstrates how to use the default method of TraceHeader class. It creates a trace header from existing headers or generates a default one if no headers are provided.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/TraceHeader/default.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst traceHeader =\n  TraceHeader.fromTraceHeader(headers) || TraceHeader.default();\n```\n\n----------------------------------------\n\nTITLE: Using pluginManagerActions with Smart Account Client\nDESCRIPTION: Demonstrates how to use the pluginManagerActions function to extend a smart account client with plugin management capabilities.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/pluginManagerActions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginManagerActions } from \"@account-kit/smart-contracts\";\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\nconst client = createSmartAccountClient(...).extend(pluginManagerActions);\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient for MFA Management\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package to handle MFA factor removal operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/removeMfa.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Using toSmartContractAccount for Custom Accounts\nDESCRIPTION: This snippet shows the type definition for toSmartContractAccount, which allows using custom smart contract accounts with SmartAccountClient in version 3.x.x without extending BaseSmartContractAccount.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/migration-guide.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype toSmartContractAccount = <\n  Name extends string = string,\n  TTransport extends Transport = Transport\n>({\n  transport,\n  chain,\n  source,\n  entryPointAddress,\n  accountAddress,\n  getAccountInitCode,\n  signMessage,\n  signTypedData,\n  encodeBatchExecute,\n  encodeExecute,\n  getDummySignature,\n  signUserOperationHash,\n  encodeUpgradeToAndCall,\n}: ToSmartContractAccountParams<Name, TTransport>) => Promise<\n  SmartContractAccount<Name>\n>;\n```\n\n----------------------------------------\n\nTITLE: Using Logger.error Method in TypeScript\nDESCRIPTION: Demonstrates how to use the Logger.error method to log an error message. This method logs an error message to the console if the logging condition is met.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/error.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.error(\"An error occurred while processing the request\");\n```\n\n----------------------------------------\n\nTITLE: Executing Contract Transaction with Cast\nDESCRIPTION: Example of sending a transaction to execute a function on the deployed contract using Cast tool.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/contracts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncast send --rpc-url=$RPC_URL <contractAddress>  \"exampleMintFunction(address)\" <address arg> --private-key=$PRIVATE_KEY\n```\n\n----------------------------------------\n\nTITLE: Modular Account V1 Contract Addresses\nDESCRIPTION: Factory and implementation addresses for Modular Account V1 smart contracts deployed across multiple blockchain networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nFactory: 0x000000e92D78D90000007F0082006FDA09BD5f11\nImplementation: 0x0046000000000151008789797b54fdb500E2a61e\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient in TypeScript\nDESCRIPTION: Shows how to import the BaseSignerClient class from the Account Kit signer module to access the whoami functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseSignerClient/whoami.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Rotating Session Key\nDESCRIPTION: Demonstrates how to rotate an existing session key to a new key while preserving permissions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"./base-client.js\";\n\nconst result = await client.rotateSessionKey({\n  oldKey: \"0xOldKey\",\n  newKey: \"0xNewKey\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Logger Class from @aa-sdk/core in TypeScript\nDESCRIPTION: This snippet shows how to import the Logger class from the @aa-sdk/core package. This import is necessary to use the setLogFilter method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/setLogFilter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing EntityIdOverrideError from AA SDK Core\nDESCRIPTION: Shows how to import the EntityIdOverrideError class from the @aa-sdk/core package for handling invalid nonce key errors.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/EntityIdOverrideError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntityIdOverrideError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeySigner in TypeScript\nDESCRIPTION: Shows how to import the SessionKeySigner class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/generateNewKey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySigner Base Class\nDESCRIPTION: Shows how to import the base AlchemySigner class from the account-kit signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getMfaStatus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing createBundlerClientFromExisting in TypeScript\nDESCRIPTION: Shows how to import the createBundlerClientFromExisting function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/createBundlerClientFromExisting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBundlerClientFromExisting } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: BigNumberishRange Interface Definition\nDESCRIPTION: Interface for specifying numeric ranges with optional minimum and maximum bounds using BigNumberish values.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/utils/schema.ts:BigNumberishRange]\n```\n\n----------------------------------------\n\nTITLE: Importing Modular Account Alchemy Client\nDESCRIPTION: Shows how to import the createModularAccountAlchemyClient function from the smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createModularAccountAlchemyClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing splitAggregatedSignature from Account Kit\nDESCRIPTION: Shows how to import the splitAggregatedSignature function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/splitAggregatedSignature.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { splitAggregatedSignature } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getMfaStatus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Custom Accounts: toSmartContractAccount Type Definition\nDESCRIPTION: This code snippet defines the type signature for the toSmartContractAccount function, which is used to create custom smart contract accounts in version 3.x.x. It specifies the required parameters and return type for creating a SmartContractAccount.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/migration-guide.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype toSmartContractAccount = <\n  Name extends string = string,\n  TTransport extends Transport = Transport\n>({\n  transport,\n  chain,\n  source,\n  entryPointAddress,\n  accountAddress,\n  getAccountInitCode,\n  signMessage,\n  signTypedData,\n  encodeBatchExecute,\n  encodeExecute,\n  getDummySignature,\n  signUserOperationHash,\n  encodeUpgradeToAndCall,\n}: ToSmartContractAccountParams<Name, TTransport>) => Promise<\n  SmartContractAccount<Name>\n>;\n```\n\n----------------------------------------\n\nTITLE: Importing createBundlerClient from @aa-sdk/core in TypeScript\nDESCRIPTION: This snippet shows how to import the createBundlerClient function from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/createBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBundlerClient } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Passkey Authentication Type Definition in Account Kit\nDESCRIPTION: Defines the TypeScript type for passkey authentication configuration. This type is used when configuring the UI components for passkey login.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/passkey-login.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype PasskeyAuthType = {\n  type: \"passkey\";\n};\n```\n\n----------------------------------------\n\nTITLE: Extending ModularAccountClient with Session Key Actions in TypeScript\nDESCRIPTION: Extends the modularAccountClient with session key plugin actions for enhanced functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/session-keys/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { modularAccountClient } from \"./client\";\nimport { sessionKeyPluginActions } from \"@account-kit/smart-contracts\";\n\nconst extendedClient = modularAccountClient.extend(sessionKeyPluginActions);\n```\n\n----------------------------------------\n\nTITLE: Building AA SDK Libraries\nDESCRIPTION: Command to build the AA SDK libraries in the root /aa-sdk/ directory using Yarn package manager.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Importing default7702UserOpSigner in TypeScript\nDESCRIPTION: Shows how to import the default7702UserOpSigner function from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/default7702UserOpSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { default7702UserOpSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing convertEthersSignerToAccountSigner from AA SDK in TypeScript\nDESCRIPTION: This snippet shows how to import the convertEthersSignerToAccountSigner function from the @aa-sdk/ethers package. The import allows developers to access a utility function that adapts an ethers.js Signer to a SmartAccountSigner for account abstraction workflows. The only dependency is the @aa-sdk/ethers library, and no parameters are required for the import itself. Typical input is none; output is access to the named function.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/functions/convertEthersSignerToAccountSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { convertEthersSignerToAccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getMfaFactors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing convertChainIdToCoinType from AA-SDK Core in TypeScript\nDESCRIPTION: Shows how to import the convertChainIdToCoinType function from the @aa-sdk/core module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/convertChainIdToCoinType.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convertChainIdToCoinType } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/exportWallet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing createMultisigModularAccountClient in TypeScript\nDESCRIPTION: Shows how to import the createMultisigModularAccountClient function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultisigModularAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigModularAccountClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing filterUndefined from AA-SDK Core\nDESCRIPTION: Shows how to import the filterUndefined utility function from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/filterUndefined.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { filterUndefined } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Enabling New Architecture\nDESCRIPTION: JSON configuration to enable new Expo architecture\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-expo-example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"newArchEnabled\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing createModularAccountV2 Function\nDESCRIPTION: Shows how to import the createModularAccountV2 function from the account-kit smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createModularAccountV2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModularAccountV2 } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing useSignerStatus from Account Kit React\nDESCRIPTION: Shows how to import the useSignerStatus hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSignerStatus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignerStatus } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing TraceHeader from AA SDK Core\nDESCRIPTION: Shows how to import the TraceHeader class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/TraceHeader/fromTraceHeader.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TraceHeader } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner in TypeScript\nDESCRIPTION: Shows how to import the AccountSigner class from the AA-SDK ethers package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/signMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing Logger Class from AA SDK Core in TypeScript\nDESCRIPTION: Shows how to import the Logger class from the @aa-sdk/core module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/setLogLevel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: PasskeyAuthType Definition for Configuration\nDESCRIPTION: Type definition for Passkey authentication configuration in Account Kit. This shows the structure of the passkey authentication type object used in the configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/passkey-signup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype PasskeyAuthType = {\n  type: \"passkey\";\n};\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setContractAccessControlType.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner in TypeScript\nDESCRIPTION: Shows how to import the LocalAccountSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/getAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing createLightAccountClient from @account-kit/smart-contracts\nDESCRIPTION: Shows how to import the createLightAccountClient function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createLightAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLightAccountClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing EthersProviderAdapter in TypeScript\nDESCRIPTION: Shows how to import the EthersProviderAdapter class from the @aa-sdk/ethers package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EthersProviderAdapter } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchAccount from AccountKit Core\nDESCRIPTION: Shows how to import the watchAccount method from the AccountKit core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/watchAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchAccount } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Running Foundry Tests\nDESCRIPTION: Command to run tests using forge test\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/contracts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ forge test\n```\n\n----------------------------------------\n\nTITLE: Importing createAccount Method - TypeScript\nDESCRIPTION: Shows how to import the createAccount method from the AccountKit core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/createAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAccount } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner in TypeScript\nDESCRIPTION: Shows how to import the LocalAccountSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing getDefaultMultiOwnerLightAccountFactoryAddress in TypeScript\nDESCRIPTION: Shows how to import the getDefaultMultiOwnerLightAccountFactoryAddress function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getDefaultMultiOwnerLightAccountFactoryAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultMultiOwnerLightAccountFactoryAddress } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing getAccountAddress from AA-SDK Core\nDESCRIPTION: Shows how to import the getAccountAddress function from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/getAccountAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccountAddress } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Using useAddPasskey Hook for Passkey Management in React (TypeScript)\nDESCRIPTION: This snippet demonstrates the usage of the useAddPasskey hook, including object destructuring to access addPasskey, isAddingPasskey, and error. Optional parameters allow specification of onSuccess and onError handlers, facilitating custom logic on mutation result or error. The hook expects an optional configuration object and returns a handler function, a mutation status boolean, and error details if encountered.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAddPasskey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAddPasskey } from \"@account-kit/react\";\n\nconst { addPasskey, isAddingPasskey, error } = useAddPasskey({\n  // these are optional\n  onSuccess: () => {\n    // do something on success\n  },\n  onError: (error) => console.error(error),\n});\n```\n\n----------------------------------------\n\nTITLE: Using createMultiOwnerModularAccountClient to Create a Smart Account Client\nDESCRIPTION: Demonstrates how to use the createMultiOwnerModularAccountClient function to initialize a smart account client with a local signer on the Sepolia network. The example includes importing required dependencies and configuring the client with an RPC URL and generated private key.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerModularAccountClient.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccountClient } from \"@account-kit/smart-contracts\";\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\nimport { http } from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\n\nconst accountClient = await createMultiOwnerModularAccountClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing createMultisigModularAccount Function\nDESCRIPTION: Shows how to import the createMultisigModularAccount function from the smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/createMultisigModularAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigModularAccount } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationStruct Interface in TypeScript\nDESCRIPTION: Defines the structure for a UserOperation, used for building requests with fields similar to UserOperationRequest.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationStruct]\n```\n\n----------------------------------------\n\nTITLE: Importing Global Shims\nDESCRIPTION: TypeScript code to import necessary global shims in the root layout file\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-expo-example/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"node-libs-react-native/globals.js\";\nimport \"react-native-get-random-values\";\n\n// rest of _layout.tsx\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner Module\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing SignTransactionNotSupportedError in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `SignTransactionNotSupportedError` class from the `@aa-sdk/core` package. This error should be handled when interacting with smart contract accounts, as they typically do not support direct transaction signing. The error class inherits properties and methods from `BaseError`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/SignTransactionNotSupportedError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { SignTransactionNotSupportedError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing multisigSignatureMiddleware from Account Kit Smart Contracts\nDESCRIPTION: Shows how to import the multisigSignatureMiddleware function from the @account-kit/smart-contracts package. This middleware is essential for handling signature aggregation in multisig account operations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/multisigSignatureMiddleware.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multisigSignatureMiddleware } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountNotFoundError from AA SDK Core\nDESCRIPTION: Demonstrates how to import the AccountNotFoundError class from the @aa-sdk/core package for handling account not found scenarios in TypeScript applications.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/AccountNotFoundError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountNotFoundError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner in TypeScript\nDESCRIPTION: Shows how to import the LocalAccountSigner class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signTypedData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Addition with Account Kit Core\nDESCRIPTION: Shows how to add a passkey to an authenticated user's account using the Account Kit signer. The code demonstrates monitoring signer connection status and adding a passkey when the user is connected.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/core/add-passkey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchSignerStatus, getSigner } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst signerSubscription = watchSignerStatus(config)(async (status) => {\n  if (status.isConnected) {\n    const signer = getSigner(config);\n\n    await signer.addPasskey();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in Global Stylesheet\nDESCRIPTION: CSS import statement to include Tailwind styles in the global stylesheet of the project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Importing MultiOwner Plugin Actions in TypeScript\nDESCRIPTION: Shows how to import the multiOwnerPluginActions from the smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/multiOwnerPluginActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multiOwnerPluginActions } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Building Foundry Projects\nDESCRIPTION: Command to build Foundry projects using forge build\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/contracts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ forge build\n```\n\n----------------------------------------\n\nTITLE: Importing useConnect Hook from AccountKit React\nDESCRIPTION: Shows how to import the useConnect hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useConnect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnect } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind\nDESCRIPTION: JavaScript configuration for PostCSS to enable Tailwind CSS in the project. This is necessary for styling Account Kit components.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  plugins: {\n    \"@tailwindcss/postcss\": {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing BatchExecutionNotSupportedError from AA-SDK Core\nDESCRIPTION: Shows how to import the BatchExecutionNotSupportedError class from the AA-SDK core module. This error class is used to handle cases where batch execution operations are attempted on account types that don't support this functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/BatchExecutionNotSupportedError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BatchExecutionNotSupportedError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing waitForUserOperationTransaction in TypeScript\nDESCRIPTION: Shows how to import the waitForUserOperationTransaction function from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/waitForUserOperationTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForUserOperationTransaction } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Defining User Type for Embedded Accounts with Alchemy Signer\nDESCRIPTION: Type definition for a user's Embedded Account via an Alchemy Signer, containing user identification information such as email, organization ID, user ID, EOA signer address, and credential ID.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/types.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../account-kit/signer/src/client/types.ts:User]\n```\n\n----------------------------------------\n\nTITLE: Changelog Bug Fix for BigInt Multiplication\nDESCRIPTION: Fix for an issue where BigInt multiplication operations were sometimes generating floating point numbers instead of integers.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/aa-sdk/core/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- bigint multiply was sometimes generating floats ([#1135](https://github.com/alchemyplatform/aa-sdk/issues/1135)) ([217443f](https://github.com/alchemyplatform/aa-sdk/commit/217443f33a46e99e1712dcf368a582d4dc3ac2ef))\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner in TypeScript\nDESCRIPTION: Shows how to import the LocalAccountSigner class from the AA-SDK core package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/generatePrivateKeySigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Updating Global CSS for Tailwind Configuration\nDESCRIPTION: CSS update to include the custom Tailwind configuration in the global stylesheet, ensuring Account Kit UI styles are applied correctly.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/quickstart.mdx#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@config '../../tailwind.config.ts';\n```\n\n----------------------------------------\n\nTITLE: Defining ClientMiddlewareConfig Type in TypeScript\nDESCRIPTION: Defines the ClientMiddlewareConfig type used to configure ClientMiddleware of the SmartAccountClient during instantiation. This object allows selective configuration of middleware components.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/client/types.ts:ClientMiddlewareConfig]\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Documentation in Markdown\nDESCRIPTION: Details major package renames and migrations from @alchemy namespace to @aa-sdk and @account-kit namespaces.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/smart-contracts/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### BREAKING CHANGES\n\n- moves the chain definitions out of aa-sdk core and into account-kit/infra\n- @alchemy/plugingen has been moved to @account-kit/plugingen\n- @alchemy/aa-_ packages have been renamed to @aa-sdk/_\n- this removes the @alchemy/aa-alchemy package in favor of @account-kit/*\n- @alchemy/aa-accounts was deleted in favor of @account-kit/accounts\n```\n\n----------------------------------------\n\nTITLE: Importing simulateUserOperationChanges in TypeScript\nDESCRIPTION: Shows how to import the simulateUserOperationChanges function from the account-kit infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/simulateUserOperationChanges.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateUserOperationChanges } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Shim Modules\nDESCRIPTION: JavaScript configuration for metro.config.js to include necessary shims for crypto libraries and enable package exports support.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require(\"expo/metro-config\");\nconst path = require(\"path\");\nconst projectRoot = __dirname;\n\n// Add aliases for file-system import based modules\nconst ALIASES = {\n  \"@noble/hashes/crypto\": path.resolve(\n    projectRoot, // <-- Adjust this as fits your project setup\n    \"node_modules/@noble/hashes/crypto.js\"\n  ),\n};\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n// [!code focus:9]\n// The following code ensures we have the necessary\n// shims for crypto built into our project\nconfig.resolver.extraNodeModules = {\n  ...config.resolver.extraNodeModules,\n  ...require(\"node-libs-react-native\"),\n  crypto: require.resolve(\"crypto-browserify\"),\n  stream: require.resolve(\"stream-browserify\"),\n};\n\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (ALIASES[moduleName]) {\n    return {\n      filePath: ALIASES[moduleName],\n      type: \"sourceFile\",\n    };\n  }\n  return context.resolveRequest(context, moduleName, platform);\n};\n\n// The `account-kit/react-native` and it's supoorting packages leverages package.json `exports` which is not (yet) suported by default in Metro.\n// we can enable this support using:\nconfig.resolver.unstable_enablePackageExports = true;\nconfig.resolver.unstable_conditionNames = [\n  \"browser\",\n  \"require\",\n  \"react-native\",\n];\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Adding Missing React Dependency\nDESCRIPTION: Adds the missing react-remove-scroll dependency to the project.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd missing react-remove-scroll dep\n```\n\n----------------------------------------\n\nTITLE: Declaring LightAccount Ownership Transfer Function in Solidity\nDESCRIPTION: Definition of the transferOwnership function in the LightAccount smart contract that allows the current owner to transfer ownership to a new address.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/light-account/transfer-ownership-light-account.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transferOwnership(address newOwner) public virtual onlyOwner\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyUserOperationSimulator in TypeScript\nDESCRIPTION: Shows how to import the alchemyUserOperationSimulator function from the @account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyUserOperationSimulator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemyUserOperationSimulator } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing the Dialog Component in TypeScript (React)\nDESCRIPTION: Imports the `Dialog` component from the `@account-kit/react` library. This component is used to render a modal dialog. It accepts `DialogProps` as properties and returns a `JSX.Element` or `null`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/components/Dialog.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Dialog } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Defining UserOperationResponse Interface in TypeScript\nDESCRIPTION: Defines the structure for the response from eth_getUserOperationByHash RPC method, detailing the result of executing a UserOperation.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/resources/types.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/../aa-sdk/core/src/types.ts:UserOperationResponse]\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the Account Kit signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/disconnect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Reading Contract State with Cast Call\nDESCRIPTION: Example of reading contract state using Cast call command, demonstrating how to query contract data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/contracts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncast call --rpc-url=$RPC_URL --private-key=$PRIVATE_KEY <contractAddress> \"ownerOf(uint256)\" <owner arg>\n```\n\n----------------------------------------\n\nTITLE: Importing BaseSignerClient in TypeScript\nDESCRIPTION: This code snippet shows how to import the BaseSignerClient class from the @account-kit/signer package. This import is necessary to use the addPasskey method.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/BaseSignerClient/addPasskey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSignerClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing the Alchemy Function in TypeScript\nDESCRIPTION: Imports the necessary `alchemy` function from the `@account-kit/infra` library to be used for creating an Alchemy transport.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/alchemy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { alchemy } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing EthersProviderAdapter in TypeScript\nDESCRIPTION: This snippet shows how to import the necessary `EthersProviderAdapter` class from the `@aa-sdk/ethers` package. This class is required to interact with the SDK using ethers.js.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/EthersProviderAdapter/getBundlerClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { EthersProviderAdapter } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/oauthWithRedirect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing useSignTypedData from Account Kit\nDESCRIPTION: Shows how to import the useSignTypedData hook from the Account Kit React package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSignTypedData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignTypedData } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing createMultisigAccountAlchemyClient in TypeScript\nDESCRIPTION: Shows how to import the createMultisigAccountAlchemyClient function from the smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultisigAccountAlchemyClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultisigAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Ethereum Contract Addresses\nDESCRIPTION: Collection of Ethereum contract addresses for testing purposes, including a mock swap venue with salt 0, associated token contracts (DemoUSDC and DemoWETH), and an AccountKit Demo NFT contract address.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/contracts/Deployments.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSalt: 0\n\nSwap: 0xB0AEC4c25E8332256A91bBaf169E3C32dfC3C33C\nDemoUSDC: 0xCFf7C6dA719408113DFcb5e36182c6d5aa491443\nDemoWETH: 0x0766798566D1f6e2f0b126f7783aaB2CBb81c66f\n\n0x7E06a337929B1Cb92363e15414e37959a36E5338\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder from Account Kit\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the smart-contracts module of Account Kit.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/encode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setGasSpendLimit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner in TypeScript\nDESCRIPTION: Shows how to import the LocalAccountSigner class from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/LocalAccountSigner/signMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing useSendUserOperation Hook in TypeScript\nDESCRIPTION: How to import the useSendUserOperation hook from the Account Kit React package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useSendUserOperation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSendUserOperation } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Defining getInstalledPlugins Function in Solidity for ERC-6900\nDESCRIPTION: This Solidity code snippet defines the getInstalledPlugins function from the IAccountLoupe interface in ERC-6900. It returns an array of addresses representing all installed plugins on a Modular Account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/other-accounts/modular-account/manage-plugins/get-installed-plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n/// @notice Get an array of all installed plugins.\n/// @return The addresses of all installed plugins.\nfunction getInstalledPlugins() external view returns (address[] memory);\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/addContractFunctionAccessEntry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: MultiOwnerPlugin Core Functions in Solidity\nDESCRIPTION: These are the core Solidity functions exposed by the MultiOwnerPlugin that allow account owners to update and read the current owners of a Modular Account. The updateOwners function allows adding and removing owners, while ownersOf returns all current owners of an account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/smart-contracts/other-accounts/modular-account/manage-ownership-mav1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n/// @notice Update owners of the account. Owners can update owners.\n/// @param ownersToAdd The address array of owners to be added.\n/// @param ownersToRemove The address array of owners to be removed.\nfunction updateOwners(address[] memory ownersToAdd, address[] memory ownersToRemove) external;\n\n/// @notice Get the owners of `account`.\n/// @param account The account to get the owners of.\n/// @return The addresses of the owners of the account.\nfunction ownersOf(address account) external view returns (address[] memory);\n```\n\n----------------------------------------\n\nTITLE: Importing createConfig from @account-kit/react (TypeScript)\nDESCRIPTION: Imports the `createConfig` function from the `@account-kit/react` package. This function is specifically adapted for React environments and wraps the core `createConfig` to include UI configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/functions/createConfig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { createConfig } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Using Logger Verbose Method\nDESCRIPTION: Demonstrates how to use the verbose method to log messages with the Logger class. The method accepts a message string and optional additional arguments.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/verbose.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.verbose(\"Something is happening\");\n```\n\n----------------------------------------\n\nTITLE: Importing getDefaultUserOperationFeeOptions in TypeScript\nDESCRIPTION: Shows how to import the getDefaultUserOperationFeeOptions function from the @account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/getDefaultUserOperationFeeOptions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultUserOperationFeeOptions } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing setChain Function from Account Kit Core (TypeScript)\nDESCRIPTION: Demonstrates the ES module import statement required to use the `setChain` function from the `@account-kit/core` library. This function is used to switch the active blockchain network within the application's configuration.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/setChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { setChain } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing convertSignerStatusToState Function in TypeScript\nDESCRIPTION: This snippet shows how to import the `convertSignerStatusToState` function from the `@account-kit/core` package. This function is used to translate the internal `AlchemySignerStatus` enum into a more easily understandable `SignerStatus` object, which includes boolean flags indicating the state.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/convertSignerStatusToState.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { convertSignerStatusToState } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Using pick to Select Object Keys in TypeScript\nDESCRIPTION: Shows the usage of the pick function to create a new object containing only specified key-value pairs from a source object. Requires importing pick from @aa-sdk/core. The example picks the 'foo' key from an object with 'foo' and 'bar', returning an object with only the 'foo' property. The input is a generic object and an array of string keys; the output is a shallow copy with only picked properties. Limitations: Does not perform deep pick; keys not present in the source object are omitted from the result.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/pick.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { pick } from \"@aa-sdk/core\";\n\nconst picked = pick(\n  {\n    foo: \"foo\",\n    bar: \"bar\",\n  },\n  [\"foo\"]\n); // { foo: \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Importing Smart Contract Implementations in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import specific smart contract account implementations (Light Account and Modular Account) from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/concepts/smart-contract-account.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LightAccount, ModularAccount } from '@account-kit/smart-contracts';\n```\n\n----------------------------------------\n\nTITLE: Importing useAccount Hook - React TypeScript\nDESCRIPTION: Demonstrates how to import the useAccount hook from the @account-kit/react package for integration in a React TypeScript application. This import is necessary to access account subscription and state functionalities provided by the account-kit. No external dependencies are required beyond having @account-kit/react installed.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccount } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing allEqual Function from AA SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the allEqual function from the @aa-sdk/core package. The function is used to check if all passed values are strictly equal.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/allEqual.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allEqual } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing toSmartContractAccount from @aa-sdk/core\nDESCRIPTION: This snippet shows how to import the `toSmartContractAccount` function from the `@aa-sdk/core` library. This function is the main entry point for creating a smart contract account instance.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/toSmartContractAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toSmartContractAccount } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing getSignerType from @account-kit/smart-contracts\nDESCRIPTION: Shows how to import the getSignerType function from the smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/functions/getSignerType.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSignerType } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemyAccountProvider in TypeScript\nDESCRIPTION: Shows how to import the AlchemyAccountProvider component from the account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/components/AlchemyAccountProvider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemyAccountProvider } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing LocalAccountSigner from AA-SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the LocalAccountSigner class from the @aa-sdk/core module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/privateKeyToAccountSigner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing sendTransaction in TypeScript\nDESCRIPTION: Shows how to import the sendTransaction method from the AA-SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/sendTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing deepHexlify Function from aa-sdk Core (TypeScript)\nDESCRIPTION: Demonstrates how to import the deepHexlify utility from the @aa-sdk/core module using TypeScript ES6 import syntax. Required dependency is the @aa-sdk/core package installed in the project. This snippet is essential as a prerequisite for invoking the deepHexlify function elsewhere in the consuming codebase.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/deepHexlify.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { deepHexlify } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing Logger Module in TypeScript\nDESCRIPTION: Shows how to import the Logger class from the AA-SDK core package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/setLogLevel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing Logger Class from @aa-sdk/core in TypeScript\nDESCRIPTION: This snippet shows how to import the Logger class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/error.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing Logger Class in TypeScript\nDESCRIPTION: Shows how to import the Logger class from the AA SDK core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/Logger/warn.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing Logger Class from AA SDK Core in TypeScript\nDESCRIPTION: Shows how to import the Logger class from the @aa-sdk/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/Logger/verbose.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing getMAV2UpgradeToData Function in TypeScript\nDESCRIPTION: Shows how to import the getMAV2UpgradeToData function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getMAV2UpgradeToData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMAV2UpgradeToData } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing useSmartAccountClient Hook in TypeScript\nDESCRIPTION: Shows how to import the useSmartAccountClient hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSmartAccountClient } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing TraceHeader from AA SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the TraceHeader class from the @aa-sdk/core module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/TraceHeader/fromTraceHeader.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TraceHeader } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing default7702GasEstimator from @aa-sdk/core (TypeScript)\nDESCRIPTION: Shows how to import the `default7702GasEstimator` function from the `@aa-sdk/core` package. This function is used as middleware for estimating gas for user operations involving EIP-7702 delegated accounts.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/default7702GasEstimator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { default7702GasEstimator } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing alchemyEnhancedApiActions in TypeScript\nDESCRIPTION: Shows how to import the alchemyEnhancedApiActions method from the account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/alchemyEnhancedApiActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemyEnhancedApiActions } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the Account Kit signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getUser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the account-kit signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/getAuthDetails.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner from Account Kit\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signTypedData.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing createMultiOwnerModularAccountClient in TypeScript\nDESCRIPTION: Shows how to import the createMultiOwnerModularAccountClient function from the @account-kit/smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerModularAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerModularAccountClient } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner in TypeScript\nDESCRIPTION: Demonstrates how to import the BaseAlchemySigner class from the @account-kit/signer package for use in TypeScript applications.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner from @aa-sdk/ethers (TypeScript)\nDESCRIPTION: This snippet shows how to import the `AccountSigner` class from the `@aa-sdk/ethers` package. This import is necessary before the class can be used to create an instance.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/ethers/classes/AccountSigner/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing smartAccountClientActions from AA SDK Core in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the smartAccountClientActions function from the @aa-sdk/core package. This function is used to add smart account capabilities to a client.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/functions/smartAccountClientActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { smartAccountClientActions } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing smartAccountClientActions from @aa-sdk/core in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the `smartAccountClientActions` function from the `@aa-sdk/core` package in a TypeScript project. This function is used to extend a client object with smart account-specific actions, enabling functionalities like building user operations and sending transactions via the smart account.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/smartAccountClientActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { smartAccountClientActions } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner in TypeScript\nDESCRIPTION: Shows how to import the AccountSigner class from the AA-SDK ethers package. This is required before attempting to use the signTransaction functionality.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/signTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient from Account Kit Signer\nDESCRIPTION: Shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/exportWallet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeySigner from Account Kit Smart Contracts\nDESCRIPTION: Shows how to import the SessionKeySigner class from the Account Kit smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/classes/SessionKeySigner/generateNewKey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeySigner } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing useClientActions Hook in TypeScript\nDESCRIPTION: Import statement for the useClientActions hook from the Account Kit React package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useClientActions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useClientActions } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchConnection from @account-kit/core in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `watchConnection` function from the `@account-kit/core` library. This function is essential for setting up a listener for connection state changes.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchConnection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { watchConnection } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing SessionKeyPermissionsBuilder in TypeScript\nDESCRIPTION: Shows how to import the SessionKeyPermissionsBuilder class from the smart contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/smart-contracts/classes/SessionKeyPermissionsBuilder/setRequiredPaymaster.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionKeyPermissionsBuilder } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing useAuthError from Account Kit React\nDESCRIPTION: Shows how to import the useAuthError hook from the Account Kit React package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAuthError.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthError } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing useDropAndReplaceUserOperation Hook in TypeScript\nDESCRIPTION: Shows how to import the useDropAndReplaceUserOperation hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useDropAndReplaceUserOperation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDropAndReplaceUserOperation } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing Hydrate Component in TypeScript\nDESCRIPTION: Shows how to import the Hydrate component from the @account-kit/react package. This component is used for hydrating the client store with initial state data.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/functions/Hydrate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hydrate } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing the useAuthContext Hook in TypeScript\nDESCRIPTION: Demonstrates how to import the useAuthContext hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAuthContext.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthContext } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing defineAlchemyChain Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `defineAlchemyChain` function from the `@account-kit/infra` package. This function is essential for integrating Alchemy-specific RPC configurations into standard chain definitions.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/infra/functions/defineAlchemyChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineAlchemyChain } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing getConnection Function - TypeScript\nDESCRIPTION: Shows how to import the getConnection function from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getConnection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnection } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing createMultiOwnerLightAccount Function - TypeScript\nDESCRIPTION: Shows how to import the createMultiOwnerLightAccount function from the account-kit smart-contracts package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/createMultiOwnerLightAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMultiOwnerLightAccount } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Importing watchUser from Account Kit (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the watchUser function from the @account-kit/core package using TypeScript. No additional dependencies are required beyond the library itself. This import is a prerequisite for using the watchUser function within your application.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/core/functions/watchUser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchUser } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing getSmartAccountClient in TypeScript\nDESCRIPTION: Shows how to import the getSmartAccountClient function from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getSmartAccountClient.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSmartAccountClient } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing getAlchemyPaymasterAddress Function in TypeScript\nDESCRIPTION: Shows how to import the getAlchemyPaymasterAddress function from the @account-kit/infra package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/infra/functions/getAlchemyPaymasterAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAlchemyPaymasterAddress } from \"@account-kit/infra\";\n```\n\n----------------------------------------\n\nTITLE: Importing Solana Sign Message Hook\nDESCRIPTION: Shows how to import the useSolanaSignMessage hook from the Account Kit React library.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useSolanaSignMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSolanaSignMessage } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing getDefaultMultiOwnerModularAccountFactoryAddress Function in TypeScript\nDESCRIPTION: Shows how to import the getDefaultMultiOwnerModularAccountFactoryAddress function from the @account-kit/smart-contracts package. This function accepts a Chain parameter and returns an Address type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/smart-contracts/functions/getDefaultMultiOwnerModularAccountFactoryAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDefaultMultiOwnerModularAccountFactoryAddress } from \"@account-kit/smart-contracts\";\n```\n\n----------------------------------------\n\nTITLE: Light Account Upgradeable Contract Reference\nDESCRIPTION: Reference to Light Account's UUPSUpgradeable implementation path in the source code.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/resources/faqs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nsrc/LightAccount.sol#L50\n```\n\n----------------------------------------\n\nTITLE: Importing AlchemySignerWebClient in TypeScript\nDESCRIPTION: This snippet shows how to import the AlchemySignerWebClient class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/signer/classes/AlchemySignerWebClient/oauthWithPopup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AlchemySignerWebClient } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Importing useChain Hook - TypeScript\nDESCRIPTION: Shows how to import the useChain hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useChain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useChain } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing useWaitForUserOperationTransaction Hook in TypeScript\nDESCRIPTION: Shows how to import the useWaitForUserOperationTransaction hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useWaitForUserOperationTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForUserOperationTransaction } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing getAccountAddress from @aa-sdk/core in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `getAccountAddress` function specifically from the `@aa-sdk/core` library in a TypeScript project. This import makes the function available for use in the code.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/getAccountAddress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { getAccountAddress } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing AccountSigner in TypeScript\nDESCRIPTION: Shows how to import the AccountSigner class from the @aa-sdk/ethers package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/ethers/classes/AccountSigner/sendTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccountSigner } from \"@aa-sdk/ethers\";\n```\n\n----------------------------------------\n\nTITLE: Importing getAccount from @account-kit/core in TypeScript\nDESCRIPTION: Shows how to import the getAccount function from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccount } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing getSignerStatus from AccountKit Core\nDESCRIPTION: Shows how to import the getSignerStatus method from the @account-kit/core package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/functions/getSignerStatus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSignerStatus } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing useAuthModal from Account Kit React\nDESCRIPTION: Shows how to import the useAuthModal hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAuthModal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthModal } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing FailedToFindTransactionError in TypeScript\nDESCRIPTION: Shows how to import the FailedToFindTransactionError class from the @aa-sdk/core package. This error class is used to handle cases where a transaction cannot be found for a specific user operation hash.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/FailedToFindTransactionError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FailedToFindTransactionError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing useUiConfig Hook in TypeScript\nDESCRIPTION: Shows how to import the useUiConfig hook from the @account-kit/react package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/react/hooks/useUiConfig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUiConfig } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing filterUndefined from @aa-sdk/core in TypeScript\nDESCRIPTION: Demonstrates how to import the filterUndefined utility function from the @aa-sdk/core package. This import is required to use filterUndefined for object property sanitization in a TypeScript project. No additional dependencies are needed aside from having @aa-sdk/core installed.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/functions/filterUndefined.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { filterUndefined } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing TransactionMissingToParamError in TypeScript\nDESCRIPTION: Shows how to import the TransactionMissingToParamError class from the @aa-sdk/core package. This error is thrown when a transaction is missing the 'to' address in the request and extends the BaseError class.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/TransactionMissingToParamError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TransactionMissingToParamError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: HTML IFrame Element Reference\nDESCRIPTION: Reference to the required iframe HTML element that must be present in the application for the Alchemy Signer to function properly.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/signer/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\niframe\n```\n\n----------------------------------------\n\nTITLE: Social Authentication Provider Type Definition in TypeScript\nDESCRIPTION: This snippet shows the TypeScript type definition for social authentication providers. It defines the structure for configuring providers like Google, Facebook, and Apple with options for authentication mode, scope, and claims.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/login-methods/social-login.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype SocialAuthType = {\n  type: \"social\";\n  // For standard providers (google, facebook, apple)\n  authProviderId: \"google\" | \"facebook\" | \"apple\";\n  // Authentication mode (popup or redirect)\n  mode: \"popup\" | \"redirect\";\n  // Optional: Specifies the requested OAuth scope\n  scope?: string;\n  // Optional: Specifies additional claims to be included in the authentication token\n  claims?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing DefaultFactoryNotDefinedError in TypeScript\nDESCRIPTION: This code snippet shows how to import the DefaultFactoryNotDefinedError class from the @aa-sdk/core package. This error is used when no default factory is found for a given account type, chain, and entry point version.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/DefaultFactoryNotDefinedError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultFactoryNotDefinedError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing ClientOnlyPropertyError in TypeScript\nDESCRIPTION: This code snippet shows how to import the ClientOnlyPropertyError class from the @account-kit/core package. This class is used to create errors for properties that are only available on the client side.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/account-kit/core/classes/ClientOnlyPropertyError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientOnlyPropertyError } from \"@account-kit/core\";\n```\n\n----------------------------------------\n\nTITLE: React JSX Component Implementation\nDESCRIPTION: React JSX code showing the main overview page structure with image and navigation buttons using custom components.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<img\n  src=\"/images/account-kit-doc-overview.png\"\n  alt=\"alchemy account ui overview\"\n/>\n\n<div className=\"flex flex-row gap-4 mt-8\">\n  <TileButton\n    icon={<ClockForwardIcon />}\n    title=\"Quickstart\"\n    description=\"Start building in minutes with UI components and powerful React hooks.\"\n    href=\"/react/quickstart\"\n  />\n  <TileButton\n    icon={<PointerIcon />}\n    title=\"Demo\"\n    description=\"Customize React components, export your config, and start building.\"\n    href=\"https://demo.alchemy.com/\"\n    target=\"_blank\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing NoAlchemyAccountContextError in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the `NoAlchemyAccountContextError` class from the `@account-kit/react` package. This error class is used to signal that a specific React hook must be used within the context of an `AlchemyAccountProvider`.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/classes/NoAlchemyAccountContextError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { NoAlchemyAccountContextError } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing InvalidEntityIdError from AA SDK\nDESCRIPTION: Shows how to import the InvalidEntityIdError class from the @aa-sdk/core package. This error class extends BaseError and is used when an entity ID exceeds allowed size limits.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/InvalidEntityIdError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvalidEntityIdError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing GetCounterFactualAddressError in TypeScript\nDESCRIPTION: This snippet shows how to import the GetCounterFactualAddressError class from the @aa-sdk/core package. This class is used to create error objects when there's a failure in fetching a counter-factual address.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/GetCounterFactualAddressError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetCounterFactualAddressError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing useAlchemyAccountContext Hook in TypeScript\nDESCRIPTION: Imports the `useAlchemyAccountContext` hook from the `@account-kit/react` library. This hook is intended for internal use within the package to access the Alchemy account context.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAlchemyAccountContext.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { useAlchemyAccountContext } from \"@account-kit/react\";\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAlchemySigner - TypeScript\nDESCRIPTION: Shows how to import the BaseAlchemySigner class from the @account-kit/signer package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/signer/classes/BaseAlchemySigner/signAuthorization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseAlchemySigner } from \"@account-kit/signer\";\n```\n\n----------------------------------------\n\nTITLE: Using useAlchemyAccountContext Hook in React (TSX)\nDESCRIPTION: Demonstrates how to use the `useAlchemyAccountContext` hook within a React component (TSX) to destructure and access the `config` and `queryClient` properties from the Alchemy account context. This hook is primarily for internal package consumption.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/account-kit/react/hooks/useAlchemyAccountContext.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAlchemyAccountContext } from \"@account-kit/react\";\n\nconst { config, queryClient } = useAlchemyAccountContext();\n```\n\n----------------------------------------\n\nTITLE: Importing TraceHeader from AA-SDK Core in TypeScript\nDESCRIPTION: This snippet shows how to import the TraceHeader class from the @aa-sdk/core module.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/reference/aa-sdk/core/classes/TraceHeader/default.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TraceHeader } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Help Documentation\nDESCRIPTION: Commands to access help documentation for Forge, Anvil and Cast tools\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/contracts/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ forge --help\n$ anvil --help\n$ cast --help\n```\n\n----------------------------------------\n\nTITLE: Installing Account Kit and Dependencies\nDESCRIPTION: Commands to install Account Kit and its supporting dependencies using npm or yarn.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/site/pages/react-native/getting-started/getting-started-expo.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -s @account-kit/react-native @account-kit/smart-contracts @account-kit/infra\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @account-kit/react-native @account-kit/smart-contracts @account-kit/infra\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-mmkv zustand abitype react-native-inappbrowser-reborn\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-mmkv zustand abitype react-native-inappbrowser-reborn\n```\n\n----------------------------------------\n\nTITLE: Installing Express\nDESCRIPTION: Command to install Express package\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/react-native-expo-example/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn add express\n```\n\n----------------------------------------\n\nTITLE: Using Cast Tool\nDESCRIPTION: Basic command structure for using Cast CLI tool\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/examples/ui-demo/contracts/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ cast <subcommand>\n```\n\n----------------------------------------\n\nTITLE: Feature Addition - EIP-7702 Support\nDESCRIPTION: Added support for EIP-7702 in aa-sdk/core and sma7702 support in account-kit/smart-contracts in version 4.13.0.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/plugingen/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- eip-7702 support in aa-sdk/core, and sma7702 support in account-kit/smart-contracts ([#1287](https://github.com/alchemyplatform/aa-sdk/issues/1287)) ([8d5501f](https://github.com/alchemyplatform/aa-sdk/commit/8d5501f05e898f2711ef382524813a40f0edc999))\n```\n\n----------------------------------------\n\nTITLE: Importing UpgradesNotSupportedError from AA SDK Core in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the UpgradesNotSupportedError class from the @aa-sdk/core module. This error is used to indicate that upgrades are not supported for a specific account type.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/reference/aa-sdk/core/classes/UpgradesNotSupportedError/constructor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UpgradesNotSupportedError } from \"@aa-sdk/core\";\n```\n\n----------------------------------------\n\nTITLE: Native Transfer Gas Costs Comparison\nDESCRIPTION: Gas costs comparison for native token transfers across different smart contract wallet implementations.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/gas-benchmarks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                            |  Gas Cost |\n| :------------------------- | --------: |\n| Alchemy Modular Account v2 | `158,725` |\n| Biconomy Nexus             | `164,351` |\n| ZeroDev Kernel v3.1        | `190,912` |\n| Safe v1.4.1                | `176,479` |\n| Coinbase Smart Wallet      | `156,812` |\n| Simple Account             | `151,045` |\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Address Mapping - SemiModularAccount7702 v2.0.0\nDESCRIPTION: Contract address for SemiModularAccount7702 implementation across different chains. Consistent implementation address used across all supported networks.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/smart-contracts/deployed-addresses.mdx#2025-04-22_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nImplementation: 0x69007702764179f14F51cdce752f4f775d74E139\n```\n\n----------------------------------------\n\nTITLE: Generating SDK References with Fern in Shell\nDESCRIPTION: This command runs the Fern generator to automatically create SDK references from relevant projects within the monorepo using the docs-gen package.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn fern-gen\n```\n\n----------------------------------------\n\nTITLE: Signer Implementation Reference\nDESCRIPTION: Reference to the signer implementation file that contains core signer configuration and setup.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/docs/pages/signer/user-sessions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// [!include ~/shared/signer/signer.ts]\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version in package.json\nDESCRIPTION: This code snippet shows a change made to the package.json file to update the versions of Alchemy packages in the ui-demo-app.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"package.json\": \"fix the package json to include latest ak pkgs\"\n```\n\n----------------------------------------\n\nTITLE: Refactoring AA SDK Package Prefixes\nDESCRIPTION: Changes the prefix for aa-sdk packages as part of a code refactoring effort.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nchange the prefix for aa-sdk packages\n```\n\n----------------------------------------\n\nTITLE: Logging in for Alchemy team members using Turbo\nDESCRIPTION: This command allows Alchemy team members to log in and benefit from remote caching in builds. It uses the Turbo CLI with SSO team authentication.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx turbo login --sso-team=alchemy-dot-com\n```\n\n----------------------------------------\n\nTITLE: Git Commit Hash References\nDESCRIPTION: Collection of Git commit hashes and pull request references documenting changes to the codebase\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- 09d92176dfa480ef9b9d9e76299a244c48e8bc6f\n- 9be583400cdcdd766048b30788185dc56a895ee2\n- 10d5a9526423382b3c520fe2533b4416f5867b11\n- d3e80ad7ad8f3469a40bc741595719c57374e8b9\n- 0d094e870c1a0ceb5f8d1c862f4109e32de46097\n```\n\n----------------------------------------\n\nTITLE: Package Identifier in Markdown\nDESCRIPTION: Package name identifier for the Account Kit logging module, written in markdown format.\nSOURCE: https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/logging/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@account-kit/logging`\n```"
  }
]