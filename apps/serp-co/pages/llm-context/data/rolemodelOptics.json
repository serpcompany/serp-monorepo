[
  {
    "owner": "rolemodel",
    "repo": "optics",
    "content": "TITLE: Implementing Dialog Interactions using JavaScript\nDESCRIPTION: This JavaScript code handles basic dialog interaction events such as opening and closing modals. It includes handling clicks inside or outside the dialog and ensures proper animation when closing the dialog. It uses event listeners to manage button clicks and closing animations.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Modal/Modal.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst dialog = document.getElementById('my-dialog')\nconst showButton = document.getElementById('show-dialog')\nconst closeButton = document.getElementById('dialog-close')\nconst cancelButton = document.getElementById('dialog-cancel')\n\n// This handles the escape key as well as other events\n// This is a bit of a gotcha to get the dialog to close and animate correctly\n// Normally you would just call dialog.close() but this will not fade the backdrop correctly.\ndialog.addEventListener('cancel', (event) => {\n  event.preventDefault()\n\n  dialog.classList.add('modal--closing') // run animation here\n\n  dialog.addEventListener(\n    'animationend',\n    () => {\n      dialog.classList.remove('modal--closing')\n      dialog.close() // then run the default close method\n    },\n    { once: true }\n  ) // add this to prevent bugs when reopening the modal\n})\n\n// This handles clicking outside the dialog\ndialog.addEventListener('click', (event) => {\n  //This prevents issues with forms\n  if (event.target.tagName !== 'DIALOG') {\n    return\n  }\n\n  const rect = event.target.getBoundingClientRect()\n\n  const clickedInDialog =\n    rect.top <= event.clientY &&\n    event.clientY <= rect.top + rect.height &&\n    rect.left <= event.clientX &&\n    event.clientX <= rect.left + rect.width\n\n  console.log(clickedInDialog)\n\n  if (clickedInDialog === false) {\n    event.target.dispatchEvent(new Event('cancel'))\n  }\n})\n\nshowButton.addEventListener('click', () => {\n  dialog.showModal()\n})\n\ncloseButton.addEventListener('click', () => {\n  dialog.dispatchEvent(new Event('cancel'))\n})\n\ncancelButton.addEventListener('click', () => {\n  dialog.dispatchEvent(new Event('cancel'))\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme\nDESCRIPTION: Demonstrates how to create a custom theme by overriding default tokens including colors, fonts, and color scales with support for both light and dark modes.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Themes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Coming+Soon&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Grandstander:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\n\n:root {\n  /* Colors */\n  --op-color-primary-h: my-new-value;\n  --op-color-primary-s: my-new-value;\n  --op-color-primary-l: my-new-value;\n\n  /* Color Scale */\n  --op-color-primary-plus-two: light-dark(\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 64%),\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 32%)\n  );\n\n  /* Fonts */\n  --op-font-family: 'Coming Soon', sans-serif;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root:not([data-theme-mode='light']) {\n    --op-font-family: 'Grandstander', sans-serif;\n  }\n}\n\n:root[data-theme-mode='dark'] {\n  --op-font-family: 'Grandstander', sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Size Variables\nDESCRIPTION: Example of customizing button sizes by overriding the default height, font, and padding variables\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Button/Button.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.btn {\n  --_op-btn-height-small: var(--op-space-2x-large);\n  --_op-btn-height-medium: var(--op-space-3x-large);\n  --_op-btn-height-large: var(--op-space-4x-large);\n\n  --_op-btn-font-small: var(--op-font-4x-large);\n  --_op-btn-font-medium: var(--op-font-5x-large);\n  --_op-btn-font-large: var(--op-font-6x-large);\n\n  --_op-btn-padding-small: var(--op-space-large);\n  --_op-btn-padding-medium: var(--op-space-x-large);\n  --_op-btn-padding-large: var(--op-space-2x-large);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Button Component with BEM Methodology in CSS\nDESCRIPTION: This example demonstrates how to structure a button component using BEM methodology. It shows the base button class, hover states, modifiers for large and disabled buttons, and a primary button variant. The code illustrates proper nesting and naming conventions for CSS components.\nSOURCE: https://github.com/rolemodel/optics/blob/main/NEW_COMPONENT.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Define the main component */\n.btn {\n  /* Base styles for the button */\n\n  /* Hover state */\n  &:hover {\n    /*\n      Styles for the hovered button modifier\n      ...\n    */\n  }\n\n  /* Modifier: Large button */\n  &.btn--large {\n    /* Styles for the large button modifier */\n  }\n\n  /* Modifier: Disabled button */\n  &.btn--disabled,\n  &:disabled {\n    /* Styles for the disabled button modifier */\n  }\n}\n\n/* Variant: Primary button */\n.btn.btn--primary {\n  /*\n    Specific styles for the primary button variant\n    ...\n  */\n}\n```\n\n----------------------------------------\n\nTITLE: Accordion API CSS Variables\nDESCRIPTION: Shows the CSS variables that can be customized to modify the accordion's appearance.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Accordion/Accordion.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--_op-accordion-summary-min-height\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Layout Structure in HTML\nDESCRIPTION: The basic layout structure for applications using the design system. It includes placeholders for alert messages, confirmations, modals, panels, and optional header and footer components.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Recipes/Layout/Layout.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <title>Sample Layout</title>\n    <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" />\n  </head>\n  <body class=\"app-body\">\n    <!-- Alert Flash message here -->\n    <!-- Confirm here -->\n    <!-- Modal here -->\n    <!-- Panel here -->\n    <!--\n      If your app has a top header, use\n      <div class='app__header'></div>\n    -->\n    <div class=\"app__content\"></div>\n    <!--\n      If your app has a bottom footer, use\n      <div class='app__footer'></div>\n    -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing Optics with Custom Theme\nDESCRIPTION: Shows how to import the Optics design system along with custom theme files that override existing tokens.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Themes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics';\n\n@import 'stylesheets/theme/my_app_theme';\n```\n\n----------------------------------------\n\nTITLE: Rendering Flex Classes using Canvas - HTML\nDESCRIPTION: Demonstrates how to create a Canvas component that displays flex utility classes, which can be utilized to quickly lay out a page using the flexbox model. Includes various settings for flex directives, wrapping, and alignment.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div\n  dangerouslySetInnerHTML={{\n    __html: createSourceCodeLink({ link: 'core/utilities.css' }).outerHTML,\n  }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Importing Selective CSS Components\nDESCRIPTION: This snippet shows how to import only specific parts of the Optics design system, such as third-party vendors, fonts, tokens, base styles, utilities, and specific components like buttons and cards. This allows for a smaller CSS footprint by only including what is needed.  It relies on the `@import` directive within a CSS file.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/SelectiveImports.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n\"/* Third party Vendors */\\n@import 'modern-css-reset/dist/reset';\\n\\n/* Fonts */\\n@import 'core/fonts';\\n\\n/* Tokens */\\n@import 'core/tokens';\\n\\n/* Base styles and utilities */\\n@import 'core/base';\\n@import 'core/layout';\\n@import 'core/utilities';\\n\\n/* Just the button and card Components */\\n@import 'components/button';\\n@import 'components/card';\"\n```\n\n----------------------------------------\n\nTITLE: Alert Component HTML Structure\nDESCRIPTION: Basic HTML structure for creating an alert component with icon, title, and dismissible functionality.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Alert/Alert.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class='alert alert--danger'>\n  <span class='alert__icon material-symbols-outlined'>error</div>\n  <div class='alert__messages'>\n    <div class='alert__title'>Error</div>\n    <div class='alert__description'>Your message</div>\n    <div class='alert__description'>Another message if you need</div>\n  </div>\n  <span class='alert__icon material-symbols-outlined'>close</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating New Tab Variations\nDESCRIPTION: This CSS snippet demonstrates how to create a new variation of the Tab component by defining a modifier class using the BEM methodology. It defines a new class `.tab--{name}` that sets the background color and text color using CSS variables. This approach allows developers to extend the Tab component with custom styles while adhering to the BEM naming conventions.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tab/Tab.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.tab--{name} {\n  background-color: var(--op-color-primary-plus-two);\n  color: var(--op-color-primary-on-plus-two);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Alpha Color Tokens with HSL in CSS\nDESCRIPTION: Creates custom CSS variables for color tokens with alpha transparency using HSL color format. The example shows primary color variations with 40% alpha that match the luminosity of existing tokens.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Color/ColorWithAlpha.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/*\n  Note the 40% luminoisty matches the --op-color-primary-base luminosity\n  Note the 100% luminoisty matches the --op-color-primary-on-base luminosity\n  Note the 88% luminoisty matches the --op-color-primary-on-base-alt luminosity\n*/\n\n--op-color-primary-base-alpha-40: hsl(var(--op-color-primary-h) var(--op-color-primary-s) 40% / 40%);\n--op-color-primary-on-base-alpha-40: hsl(var(--op-color-primary-h) var(--op-color-primary-s) 100% / 40%);\n--op-color-primary-on-base-alt-alpha-40: hsl(var(--op-color-primary-h) var(--op-color-primary-s) 88% / 40%);\n```\n\n----------------------------------------\n\nTITLE: Importing Optics CSS in Projects\nDESCRIPTION: CSS import statements showing different ways to import Optics styles in a project, including using webpack, direct imports, or minified CSS.\nSOURCE: https://github.com/rolemodel/optics/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics'; /* Using webpack to compile */\n/* Or */\n@import '@rolemodel/optics/dist/css/optics'; /* Using a different compiler or no compiler */\n/* Or */\n@import '@rolemodel/optics/dist/css/optics.min.css'; /* If you want a single file with all the styles in it. */\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Color Scale in CSS\nDESCRIPTION: This CSS snippet defines a custom color scale using CSS variables within the `:root` selector. It includes base color definitions, a semantic scale, and variations for different shades and tones (plus/minus), supporting light and dark modes using the `light-dark()` function. The `{name}` placeholder should be replaced with the actual name of the custom color.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Color/ColorScale.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n\n:root {\n  /* {name}-color */\n\n  --op-color-{name}-h: new-value-h;\n  --op-color-{name}-s: new-value-s;\n  --op-color-{name}-l: new-value-l;\n\n  /* {name}-semantic-scale */\n\n  --op-color-{name}-original: hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) var(--op-color-{name}-l));\n\n  /* Main Scale */\n  --op-color-{name}-plus-max: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 100%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 10%)\n  );\n  --op-color-{name}-plus-eight: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 98%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 18%)\n  );\n  --op-color-{name}-plus-seven: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 96%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 16%)\n  );\n  --op-color-{name}-plus-six: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 94%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 14%)\n  );\n  --op-color-{name}-plus-five: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 90%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 10%)\n  );\n  --op-color-{name}-plus-four: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 84%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 14%)\n  );\n  --op-color-{name}-plus-three: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 70%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 10%)\n  );\n  --op-color-{name}-plus-two: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 64%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 14%)\n  );\n  --op-color-{name}-plus-one: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 45%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 15%)\n  );\n  --op-color-{name}-base: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 40%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 10%)\n  );\n  --op-color-{name}-minus-one: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 36%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 16%)\n  );\n  --op-color-{name}-minus-two: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 32%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 12%)\n  );\n  --op-color-{name}-minus-three: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 28%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 8%)\n  );\n  --op-color-{name}-minus-four: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 24%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 4%)\n  );\n  --op-color-{name}-minus-five: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 20%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 5%)\n  );\n  --op-color-{name}-minus-six: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 16%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 6%)\n  );\n  --op-color-{name}-minus-seven: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 8%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 88%)\n  );\n  --op-color-{name}-minus-eight: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 4%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 84%)\n  );\n  --op-color-{name}-minus-max: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 0%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 80%)\n  );\n\n  /* On Scale */\n  --op-color-{name}-on-plus-max: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 0%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 100%)\n  );\n  --op-color-{name}-on-plus-max-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 20%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 80%)\n  );\n  --op-color-{name}-on-plus-eight: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 4%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 40%)\n  );\n  --op-color-{name}-on-plus-eight-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 24%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 84%)\n  );\n  --op-color-{name}-on-plus-seven: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 8%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 88%)\n  );\n  --op-color-{name}-on-plus-seven-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 28%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 88%)\n  );\n  --op-color-{name}-on-plus-six: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 16%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 76%)\n  );\n  --op-color-{name}-on-plus-six-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 26%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 96%)\n  );\n  --op-color-{name}-on-plus-five: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 20%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 60%)\n  );\n  --op-color-{name}-on-plus-five-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 40%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 90%)\n  );\n  --op-color-{name}-on-plus-four: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 24%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 94%)\n  );\n  --op-color-{name}-on-plus-four-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 4%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 74%)\n  );\n  --op-color-{name}-on-plus-three: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 20%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 70%)\n  );\n  --op-color-{name}-on-plus-three-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 10%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 90%)\n  );\n  --op-color-{name}-on-plus-two: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 16%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 46%)\n  );\n  --op-color-{name}-on-plus-two-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 6%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 76%)\n  );\n  --op-color-{name}-on-plus-one: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 100%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 0%)\n  );\n  --op-color-{name}-on-plus-one-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 95%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 5%)\n  );\n  --op-color-{name}-on-base: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 100%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 10%)\n  );\n  --op-color-{name}-on-base-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 88%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 8%)\n  );\n  --op-color-{name}-on-minus-one: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 94%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 4%)\n  );\n  --op-color-{name}-on-minus-one-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 82%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 2%)\n  );\n  --op-color-{name}-on-minus-two: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 90%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 10%)\n  );\n  --op-color-{name}-on-minus-two-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 78%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 8%)\n  );\n  --op-color-{name}-on-minus-three: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 86%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 6%)\n  );\n  --op-color-{name}-on-minus-three-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 74%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 4%)\n  );\n  --op-color-{name}-on-minus-four: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 84%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 4%)\n  );\n  --op-color-{name}-on-minus-four-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 72%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 2%)\n  );\n  --op-color-{name}-on-minus-five: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 88%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 8%)\n  );\n  --op-color-{name}-on-minus-five-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 78%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 8%)\n  );\n  --op-color-{name}-on-minus-six: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 94%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 4%)\n  );\n  --op-color-{name}-on-minus-six-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 82%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 2%)\n  );\n  --op-color-{name}-on-minus-seven: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 96%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 6%)\n  );\n  --op-color-{name}-on-minus-seven-alt: light-dark(\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 84%),\n    hsl(var(--op-color-{name}-h) var(--op-color-{name}-s) 4%)\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Optics CSS in a Project\nDESCRIPTION: These CSS import statements show different ways to include the Optics styles in a project. They cover scenarios for different build setups, including webpack compilation and using pre-compiled CSS.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Introduction.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics'; /* Using webpack to compile */\n/* Or */\n@import '@rolemodel/optics/dist/css/optics'; /* Using a different compiler or no compiler */\n/* Or */\n@import '@rolemodel/optics/dist/css/optics.min.css'; /* If you want a single file with all the styles in it. */\n```\n\n----------------------------------------\n\nTITLE: CSS Customization of Tag Styles\nDESCRIPTION: This CSS code block demonstrates how to customize the base styles of the Tag component. It overrides the default background color by targeting the `.tag` class. This allows for a global change to the Tag's appearance, affecting all instances of the component.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tag/Tag.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.tag {\n  background-color: var(--op-color-alerts-danger-base);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Theme with Manual Mode Control\nDESCRIPTION: Shows how to set both a dynamic theme and manually control its mode using data attributes on the HTML element.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Themes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html data-theme=\"example\" data-theme-mode=\"light\">\n  ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Theme\nDESCRIPTION: Demonstrates how to create a dynamic theme that activates only when a specific data-theme attribute is set, with support for both light and dark modes.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Themes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Coming+Soon&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Grandstander:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\n\n:root[data-theme='example'] {\n  /* Colors */\n  --op-color-primary-h: my-new-value;\n  --op-color-primary-s: my-new-value;\n  --op-color-primary-l: my-new-value;\n\n  /* Color Scale */\n  --op-color-primary-plus-two: light-dark(\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 64%),\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 32%)\n  );\n\n  /* Fonts */\n  --op-font-family: 'Coming Soon', sans-serif;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root[data-theme='example']:not([data-theme-mode='light']) {\n    /* Fonts */\n    --op-font-family: 'Grandstander', sans-serif;\n  }\n}\n\n:root[data-theme='example'][data-theme-mode='dark'] {\n  /* Fonts */\n  --op-font-family: 'Grandstander', sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Styles\nDESCRIPTION: Examples of how to customize sidebar styles using CSS variables and selectors.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Sidebar/Sidebar.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.sidebar {\n  --_op-sidebar-rail-width: 10rem;\n  --_op-sidebar-compact-width: 20rem;\n  --_op-sidebar-drawer-width: 30rem;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.sidebar {\n  .sidebar__content {\n    align-items: flex-end;\n  }\n}\n\n.sidebar {\n  .sidebar__content {\n    > * {\n      font-weight: var(--op-font-weight-black);\n    }\n  }\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n/* This will only affect the primary sidebar, but not default */\n.sidebar--primary {\n  --_op-sidebar-background-color: purple;\n  --_op-sidebar-text-color: purple;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Files in Optics Application Structure\nDESCRIPTION: A template showing the recommended order of CSS imports for an Optics application. It starts with the Optics framework itself, followed by vendor libraries, fonts, theme configurations, core styles, vendor overrides, component customizations, and general styles.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/FileOrganization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Optics */\n@import '@rolemodel/optics';\n\n/* Vendors */\n@import 'something-from-node-modules/something';\n\n/* Font Customization */\n@import 'core/fonts/text_fonts';\n@import 'core/fonts/icon_fonts';\n\n/* Theme Customization */\n@import 'core/theme/{name}-theme-core';\n@import 'core/theme/{name}-theme-light';\n@import 'core/theme/{name}-theme-dark';\n\n/* Core Customization */\n@import 'core/base';\n@import 'core/layout';\n@import 'core/utilities';\n\n/* Vendor Customization */\n@import 'vendors/{vendor-name}-overrides';\n\n/* Optics Component Customization */\n@import 'components/optics-overrides/{component-name}';\n\n/* Component */\n@import 'components/{component-name}';\n\n/* General Styles */\n@import 'general/{general-name}';\n```\n\n----------------------------------------\n\nTITLE: Implementing Sidebar Layout in HTML\nDESCRIPTION: Layout structure for applications that include a sidebar. Shows how to organize elements when using the sidebar component with main content, and optional header and footer components.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Recipes/Layout/Layout.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <title>Sample Layout</title>\n    <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" />\n  </head>\n  <body class=\"app-with-sidebar\">\n    <!-- Alert Flash message here -->\n    <!-- Confirm here -->\n    <!-- Modal here -->\n    <!-- Panel here -->\n    <div class=\"sidebar sidebar--{rail or drawer}\">...</div>\n    <div class=\"app-body\">\n      <!--\n        If your app has a top header, use\n        <div class='app__header'></div>\n      -->\n      <div class=\"app__content\"></div>\n      <!--\n        If your app has a bottom footer, use\n        <div class='app__footer'></div>\n      -->\n    </div>\n    <!-- You could put the sidebar or some other drawer here as well -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing the Entire Optics Design System CSS\nDESCRIPTION: This snippet demonstrates how to import the entire Optics design system CSS.  It shows two equivalent ways to achieve this using the `@import` directive within a CSS file.  This includes all tokens, base styles, utilities, and components.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/SelectiveImports.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n\"@import '@rolemodel/optics';\\n/* or */\\n@import '@rolemodel/optics/dist/css/optics';\"\n```\n\n----------------------------------------\n\nTITLE: CSS Cascade with Gap Utility\nDESCRIPTION: This CSS snippet demonstrates how to use the `--op-gap` custom property to inherit the gap value from a parent container.  It provides a fallback using `--op-space-sm` if the `--op-gap` variable is not defined in the parent.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Gap/Gap.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n\n.special-item {\n  display: flex;\n  gap: var(--op-gap, var(--op-space-sm)); /* Include a fallback in case the wrapping gap is missing. */\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Shadow Tokens with CSS Box Shadow\nDESCRIPTION: Example of how to apply shadow tokens as CSS box shadows to create elevation effects. Shows two variations using different sized shadows.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Shadow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbox-shadow: var(--op-shadow-x-small);\n/* or */\nbox-shadow: var(--op-shadow-x-large);\n```\n\n----------------------------------------\n\nTITLE: Form Control Variants - CSS\nDESCRIPTION: This snippet demonstrates how to define CSS classes for different form control variants like labels, inputs, and text areas within a BEM methodology structure, facilitating customizable and consistent styling.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Form/Form.mdx#2025-04-21_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.form-label { /* Provides basic input label styles. */ }\n.form-control { /* Provides basic input styles. */ }\ntextarea.form-control { /* Provides basic text area styles. */ }\nselect.form-control { /* Provides basic select element styles. */ }\n```\n\n----------------------------------------\n\nTITLE: Using Default Icon (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use a default Material Symbols icon. It utilizes a `<span>` element with the classes `.icon` and `.material-symbols-outlined`, along with the desired icon name as the inner text.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"icon material-symbols-outlined\">settings</span>\n```\n\n----------------------------------------\n\nTITLE: Creating New Button Variations\nDESCRIPTION: Template for creating new button variations with support for active, hover, focus, and borderless states\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Button/Button.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.btn--{name} {\n  background-color:\n  box-shadow:\n  color:\n\n  /* Active State */\n  &.btn--active {\n    background-color:\n    box-shadow:\n    color:\n  }\n\n  /* Hover State */\n  &:hover {\n    background-color:\n    box-shadow:\n    color:\n  }\n\n  /* Focus State */\n  &:focus,\n  &:focus-within,\n  &:focus-visible {\n    box-shadow:\n  }\n\n  /* Borderless State */\n  &.btn--no-border {\n    background-color:\n    box-shadow:\n    color:\n\n    /* Borderless + Active State. */\n    &.btn--active {\n      background-color:\n      box-shadow:\n      color:\n    }\n\n    /* Borderless + Hover State */\n    &:hover {\n      background-color:\n      box-shadow:\n      color:\n    }\n\n    /* Borderless + Focus State */\n    &:focus,\n    &:focus-within,\n    &:focus-visible {\n      background-color:\n      box-shadow:\n      color:\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Selective CSS Components (Alternative)\nDESCRIPTION: This snippet shows an alternative way to import selected CSS components and resources from the Optics design system.  It imports third-party vendors, text fonts, tokens, base styles, utilities, and imports all components.  It uses `@import` and assumes a specific directory structure.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/SelectiveImports.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n\"/* Third party Vendors */\\n@import 'modern-css-reset/dist/reset';\\n\\n/* No Material Icons */\\n@import 'core/fonts/text_fonts';\\n\\n/* Tokens */\\n@import 'core/tokens';\\n\\n/* Base styles and utilities */\\n@import 'core/base';\\n@import 'core/layout';\\n@import 'core/utilities';\\n\\n/* Components */\\n@import 'components';\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Specific Spinner Variants\nDESCRIPTION: Demonstrates how to override specific spinner variant behavior by targeting its modifier class and changing CSS variables.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Spinner/Spinner.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.spinner--modifier {\n  --_op-spinner-track-color: var(--op-color-primary-minus-three);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New SidePanel Variations in CSS\nDESCRIPTION: This template demonstrates how to create customized variations of the SidePanel component by defining new CSS classes. It highlights how to use modifiers with double hyphens for assigning unique properties, such as width and padding, using scoped variables.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/SidePanel/SidePanel.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.sidepanel--{name} {\n  --_op-side-panel-width: calc(108 * var(--op-size-unit)); /* 432px */\n  --_op-side-panel-header-padding: var(--op-space-large);\n  --_op-side-panel-body-padding: var(--op-space-large);\n  --_op-side-panel-footer-padding: var(--op-space-large);\n  --_op-side-panel-section-padding: var(--op-space-small);\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Modal Customization\nDESCRIPTION: This CSS snippet lists customizable variables for modals in RoleModel Optics. These variables control aspects like backdrop opacity and modal dimensions, which can be modified to fit project-specific needs.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Modal/Modal.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* modal-wrapper */\n--_op-modal-backdrop-active-opacity\n\n/* modal */\n--_op-modal-width\n--_op-modal-max-height\n\n/* dialog.modal::backdrop */\n--op-color-black\n--_op-modal-backdrop-active-opacity\n```\n\n----------------------------------------\n\nTITLE: Creating Fullscreen Spinner Layout in HTML\nDESCRIPTION: Implementation of a fullscreen loading spinner layout. Uses flexbox utility classes to center the spinner in the viewport.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Recipes/Layout/Layout.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <title>Sample Layout</title>\n    <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" />\n  </head>\n  <body class=\"app-body items-center justify-center\">\n    <div class=\"spinner spinner--large\">\n      <span class=\"sr-only\">Loading</span>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Controlling Dark Mode with HTML Attribute\nDESCRIPTION: Sets a data attribute on the root HTML element to manually control theme mode (light or dark) regardless of system preference.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Themes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html data-theme-mode=\"light\">\n  ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Customizing Core Spinner Styles\nDESCRIPTION: Shows how to customize the core styles of all spinner components by overriding the .spinner selector class.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Spinner/Spinner.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.spinner {\n}\n```\n\n----------------------------------------\n\nTITLE: Button API Variables and States\nDESCRIPTION: CSS variables for button sizing and states including height, font, padding configurations and different button states\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Button/Button.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Variable API */\n--_op-btn-height-small\n--_op-btn-height-medium\n--_op-btn-height-large\n\n--_op-btn-font-small\n--_op-btn-font-medium\n--_op-btn-font-large\n\n--_op-btn-padding-small\n--_op-btn-padding-medium\n--_op-btn-padding-large\n\n/* Different states */\n.btn {} /* Default behavior */\n.btn:not(:disabled, .btn--disabled):hover {} /* Hover behavior  */\n.btn.btn--no-border {} /* No Border Modifier  */\n.btn.btn--no-border:not(:disabled, .btn--disabled):hover {} /* Hovered No Border Modifier  */\n.btn.btn--active {} /* Active Modifier  */\n.btn.btn--active:not(:disabled, .btn--disabled):hover {} /* Hovered No Border Modifier  */\n```\n\n----------------------------------------\n\nTITLE: Creating New Icon Variations (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to create new icon variations by defining a modifier class (e.g., `.icon--{name}`).  It uses the BEM methodology and sets custom properties within the modifier to adjust the icon's appearance, such as font size.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  &.icon--{name} {\n    --_op-icon-font-size-small: var(--op-font-small);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Control Class Structure - CSS\nDESCRIPTION: This CSS snippet outlines how to define the styles for form controls using BEM methodology, including selectors that handle different types of input fields (like text and checkboxes).\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Form/Form.mdx#2025-04-21_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.form-control {\n}\n.form-control:not([type='radio'], [type='checkbox']) {\n}\n.form-control:is([type='radio'], [type='checkbox']) {\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Domain Registrar Sidebar with CSS\nDESCRIPTION: CSS code for customizing the sidebar appearance for a domain registrar application. It modifies width, spacing, button styles, and borders to create a specific look and feel with flat button designs and special hover/active states.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Recipes/CustomSidebar/CustomSidebar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Domains Sidebar Example */\n.sidebar {\n  &.sidebar--domains {\n    --_op-sidebar-drawer-width: 28rem;\n    --_op-sidebar-content-spacing: 0;\n    --_op-sidebar-content-item-spacing: 0;\n\n    box-shadow: none;\n\n    .btn {\n      border-radius: 0;\n\n      &.btn--no-border {\n        box-shadow: none;\n\n        &.btn--active {\n          background-color: var(--op-color-primary-plus-five);\n          color: var(--op-color-primary-on-plus-five);\n        }\n\n        &:hover:not(.btn--active) {\n          background-color: var(--op-color-neutral-plus-six);\n          box-shadow: none;\n          color: var(--op-color-neutral-on-plus-six);\n        }\n      }\n\n      &.btn--pill-right {\n        border-radius: 0 var(--op-radius-pill) var(--op-radius-pill) 0;\n      }\n    }\n\n    .sidebar__footer {\n      display: flex;\n      align-items: center;\n      gap: var(--op-space-small);\n      padding-inline-start: var(--op-space-large);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Color Scales in CSS\nDESCRIPTION: This snippet illustrates how to customize and override color scales in the Optics CSS framework. This is done by setting CSS variables that define HSL values for primary colors and their light-dark scales. This allows for adjusting colors to fit design requirements and maintain contrast. The code snippet shows how to set these overrides within the `:root` selector.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/ScaleOverriding.mdx#2025-04-21_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --op-color-primary-h: 164;\n  --op-color-primary-s: 100%;\n  --op-color-primary-l: 50%;\n\n  /* Main Scale */\n  --op-color-primary-plus-two: light-dark(\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 64%),\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 32%)\n  );\n  --op-color-primary-plus-one: light-dark(\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 45%),\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 35%)\n  );\n\n  /* On Scale */\n  --op-color-primary-on-plus-two: light-dark(\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 16%),\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 80%)\n  );\n  --op-color-primary-on-plus-two-alt: light-dark(\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 6%),\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 92%)\n  );\n  --op-color-primary-on-plus-one: light-dark(\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 100%),\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 80%)\n  );\n  --op-color-primary-on-plus-one-alt: light-dark(\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 95%),\n    hsl(var(--op-color-primary-h) var(--op-color-primary-s) 98%)\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Color Scale Variables with Light/Dark Mode Support in CSS\nDESCRIPTION: Demonstrates the CSS variable structure for color scales including the main color, on-color (for contrast text), and alt-color variations. Uses HSL color space and light-dark() function for theme support.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Color/ColorScale.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--op-color-primary-plus-four: light-dark(\n  hsl(var(--op-color-primary-h) var(--op-color-primary-s) 84%),\n  hsl(var(--op-color-primary-h) var(--op-color-primary-s) 24%)\n);\n--op-color-primary-on-plus-four: light-dark(\n  hsl(var(--op-color-primary-h) var(--op-color-primary-s) 24%),\n  hsl(var(--op-color-primary-h) var(--op-color-primary-s) 84%)\n);\n--op-color-primary-on-plus-four-alt: light-dark(\n  hsl(var(--op-color-primary-h) var(--op-color-primary-s) 4%),\n  hsl(var(--op-color-primary-h) var(--op-color-primary-s) 44%)\n);\n```\n\n----------------------------------------\n\nTITLE: CSS Size Token Usage Example\nDESCRIPTION: Demonstrates how to apply size tokens using calc() for dynamic height and width calculations\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Sizing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nheight: calc(11 * var(--op-size-unit)); /* 44px */\nwidth: calc(54 * var(--op-size-unit)); /* 216px */\n```\n\n----------------------------------------\n\nTITLE: Navbar CSS API Variables\nDESCRIPTION: This snippet outlines the CSS variables that can be used to customize the appearance of the Navbar component. These variables control properties such as background color, text color, border color, brand height, and spacing. By modifying these variables, you can easily tailor the navbar to fit your application's design.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Navbar/Navbar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Public API */\n/* Normal */\n--_op-navbar-background-color\n--_op-navbar-text-color\n--_op-navbar-border-color\n\n/* Height */\n--_op-navbar-brand-height\n\n/* Spacing */\n--_op-navbar-horizontal-spacing\n--_op-navbar-content-spacing\n--_op-navbar-content-item-spacing\n```\n\n----------------------------------------\n\nTITLE: Styling 16Six Performance Management Sidebar with CSS\nDESCRIPTION: CSS code for customizing the sidebar for a performance management software (16Six). It defines a dark purple color scheme with specific brand positioning, icon rotations, and hover/active states to create a distinctive look.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Recipes/CustomSidebar/CustomSidebar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* 16Six Sidebar Example */\n\n.icon--rotated-135 {\n  rotate: 135deg;\n}\n\n.icon--rotated-90 {\n  rotate: 90deg;\n}\n\n.sidebar {\n  .sidebar__brand {\n    justify-content: center;\n\n    .sidebar__brand-label {\n      display: none;\n    }\n  }\n\n  &.sidebar--16six {\n    --_op-sidebar-background-color: hsl(256deg 66% 15%);\n    --_op-sidebar-text-color: hsl(26deg 100% 95%);\n    --_op-sidebar-border-color: hsl(26deg 100% 95%);\n    --_op-sidebar-rail-width: 6.4rem;\n    --_op-sidebar-drawer-width: 22.4rem;\n    --_op-sidebar-drawer-brand-width: calc(var(--op-space-3x-large) + (2 * var(--op-space-medium)));\n    --_op-sidebar-brand-spacing: var(--op-space-medium) var(--op-space-x-small);\n    --_op-sidebar-content-item-spacing: var(--op-space-x-small);\n    --_op-sidebar-spacing: 0 0 var(--op-space-x-small);\n\n    .sidebar__brand {\n      display: flex;\n      margin: 0;\n      color: inherit;\n      gap: var(--op-space-medium);\n      text-decoration: none;\n\n      svg {\n        width: var(--op-space-3x-large);\n        height: var(--op-space-3x-large);\n      }\n\n      .sidebar__brand-label {\n        display: flex;\n        flex-direction: column;\n        font-size: var(--op-font-small);\n      }\n    }\n\n    .btn {\n      &.btn--no-border {\n        background-color: transparent;\n        box-shadow: none;\n        color: var(--_op-sidebar-text-color);\n\n        &.btn--active,\n        &:hover {\n          background-color: hsl(256deg 23% 32%);\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: New Alert Variation Template\nDESCRIPTION: Template for creating new alert variations with support for regular, muted, and filled states.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Alert/Alert.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.alert--{name} {\n  background-color:\n  box-shadow:\n  color:\n\n  .alert__title {\n    color:\n  }\n\n  &.alert--muted {\n    background-color:\n    box-shadow:\n    color:\n\n    .alert__title {\n      color:\n    }\n  }\n\n  &.alert--filled {\n    background-color:\n    box-shadow:\n    color:\n\n    .alert__title {\n      color:\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Border Radius\nDESCRIPTION: Example of overriding default button styles by modifying the border radius\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Button/Button.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.btn {\n  border-radius: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Switch Variations\nDESCRIPTION: Template for creating custom Switch variations by defining new BEM modifier classes with unique names.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Switch/Switch.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.switch--{name} {\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Dialog for Modal\nDESCRIPTION: This HTML snippet demonstrates how to utilize the native dialog element with RoleModel styling. By applying the 'modal' class, it leverages the modal styles and omits the need for wrapper classes. The dialog element is structured with header, body, and footer sections.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Modal/Modal.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<dialog id=\"my-dialog\" class=\"modal\">\n  <div class=\"modal__header\">\n    <span>Favorite animal:</span>\n    <button id=\"dialog-close\" class=\"btn btn--icon btn--pill\">\n      <span class=\"material-symbols-outlined icon--x-large\">close</span>\n    </button>\n  </div>\n  <div class=\"modal__body\">\n    <p>Red panda</p>\n  </div>\n  <div class=\"modal__footer\">\n    <button id=\"dialog-cancel\" class=\"btn\">Cancel</button>\n    <button id=\"dialog-confirm\" class=\"btn btn--primary\">Submit</button>\n  </div>\n</dialog>\n```\n\n----------------------------------------\n\nTITLE: CSS Template for New Tag Variations\nDESCRIPTION: This CSS code block provides a template for creating new Tag variations within the design system.  It utilizes the BEM methodology with a modifier class `.tag--{name}`. This template encourages consistent styling and naming conventions for new Tag variations.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tag/Tag.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.tag--{name} {\n  background-color:\n  color:\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Font Libraries in CSS\nDESCRIPTION: Code example showing how to import Optics and various icon font libraries including Material Symbols Outlined, Phosphor, Tabler, Feather, and Lucide. Each import statement can be used independently to add specific icon libraries to your application.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Addons.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics';\n\n/* Full Material Symbols Outlined Package */\n@import '@rolemodel/optics/dist/css/addons/fonts/material_symbols_outlined_variable';\n\n/* Phosphor Icons */\n@import '@rolemodel/optics/dist/css/addons/fonts/phosphor_icons';\n\n/* Tabler Icons */\n@import '@rolemodel/optics/dist/css/addons/fonts/tabler';\n\n/* Feather Icons */\n@import '@rolemodel/optics/dist/css/addons/fonts/feather';\n\n/* Lucide Icons (a fork of feather with more icons) */\n@import '@rolemodel/optics/dist/css/addons/fonts/lucide';\n```\n\n----------------------------------------\n\nTITLE: CSS Breakpoint Usage Example\nDESCRIPTION: Demonstrates how to use breakpoint tokens in CSS for responsive design. It shows how to define breakpoints as CSS variables within the `:root` selector, how to use them in media queries with pixel values and comments for clarity, and how to apply them to element styles.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Breakpoint.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.small-area {\n  max-width: var(--op-breakpoint-small);\n}\n\n:root {\n  /*\n  Breakpoints\n  These breakpoint values will be used as a guide for media queries.\n  Annotate the uses with a comment above referring to the variable being referenced.\n\n  --op-breakpoint-medium: 1024px;\n  ...\n  */\n}\n\n/* --op-breakpoint-medium */\n@media (width > 1024px) {\n  background-color: var(--op-color-primary-base);\n  color: var(--op-color-primary-on-base);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Navbar Styles\nDESCRIPTION: This snippet demonstrates how to customize the default styles of the Navbar component by overriding CSS variables. By targeting the `.navbar` class, you can modify properties like background color and text color. This allows for easy customization of the navbar's appearance to match your application's theme.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Navbar/Navbar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.navbar {\n  --_op-navbar-background-color: pink;\n  --_op-navbar-text-color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Creating New Text Pair Variations\nDESCRIPTION: This CSS snippet provides a template for creating new variations of the Text Pair component using BEM modifiers. It demonstrates how to define a new modifier class using the double hyphen notation and apply custom styles.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/TextPair/TextPair.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.text-pair--{name} {\n  gap:\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Input Height Token Usage\nDESCRIPTION: This CSS snippet demonstrates how to use the input height tokens defined in the Optics design system. It shows examples of applying the tokens to the height, max-height, and min-height properties of elements, utilizing different token sizes (large, small, medium).\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Input/InputHeight.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n```css\nheight: var(--op-input-height-large);\n/* or */\nmax-height: var(--op-input-height-small);\n/* or */\nmin-height: var(--op-input-height-medium);\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Modal Styles in CSS\nDESCRIPTION: This CSS example shows how to customize the base modal styles using the BEM methodology. By altering the '.modal-wrapper' and '.modal' selectors, you can adjust properties like z-index and background color.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Modal/Modal.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.modal-wrapper {\n  z-index: 200;\n}\n\n.modal {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Colors\nDESCRIPTION: Example of overriding default button colors by modifying background, text, and shadow colors\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Button/Button.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* This will only affect the default button, but not primary, secondary, etc. */\n.btn {\n  background-color: red;\n  color: white;\n  box-shadow: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Accordion Variations with CSS\nDESCRIPTION: Demonstrates the pattern for creating new accordion variations using BEM methodology with modifier classes.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Accordion/Accordion.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.accordion--{name} {\n  --_op-accordion-summary-min-height: var(--op-font-small);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navbar Layout in HTML\nDESCRIPTION: Layout structure for applications that include a navbar in the header. Shows how to organize the navbar component within the app's header, content area, and footer.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Recipes/Layout/Layout.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <title>Sample Layout</title>\n    <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" />\n  </head>\n  <body class=\"app-body\">\n    <!-- Alert Flash message here -->\n    <!-- Confirm here -->\n    <!-- Modal here -->\n    <!-- Panel here -->\n    <div class=\"app__header\">\n      <div class=\"navbar\">...</div>\n    </div>\n    <div class=\"app__content\"></div>\n    <div class=\"app__footer\"></div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar HTML Structure\nDESCRIPTION: Basic HTML structure for implementing a sidebar drawer component.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Sidebar/Sidebar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"sidebar sidebar--drawer\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Sticky Table Header or Footer using HTML\nDESCRIPTION: This HTML snippet illustrates how to create a table with a sticky header or footer using appropriate classes and a container div. A fixed height for the container is necessary for complete functionality.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Table/Table.mdx#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"table-container\">\n  <!-- Container div with class also needs to set the desired height. 20vh in these examples -->\n  <table class=\"table\">\n    <!-- Actual table element ... -->\n  </table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Card Base Styles\nDESCRIPTION: Example of overriding the base card styles using CSS\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Card/Card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.card {\n  font-size: var(--op-font-2x-large);\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Usage Examples\nDESCRIPTION: Demonstrates how to apply spacing tokens in CSS for margin, padding, and gap properties. It provides examples of using different spacing token sizes.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Spacing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n```css\nmargin-left: var(--op-space-small);\n/* Or */\npadding-top: var(--op-space-medium);\n/* Or */\ngap: var(--op-space-large);\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Styles Variability - CSS\nDESCRIPTION: This CSS snippet describes how to use CSS variables to customize the styles for form controls, providing a mechanism to tailor the appearance of controls based on user requirements.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Form/Form.mdx#2025-04-21_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n/* .form-control */\n--_op-form-control-height-small\n--_op-form-control-height-medium\n--_op-form-control-height-large\n--_op-form-control-font-small\n--_op-form-control-font-medium\n--_op-form-control-font-large\n\n/* .form-control:not([type='radio'], [type='checkbox']) */\n--_op-form-control-opacity-disabled\n\n/* .form-control:is([type='radio'], [type='checkbox']) */\n--_op-form-control-height-small\n--_op-form-control-height-medium\n--_op-form-control-height-large\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Colors with BEM Modifiers\nDESCRIPTION: This snippet shows how to customize specific table variations using BEM modifiers. It modifies the primary table's header color properties but does not affect other variations.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Table/Table.mdx#2025-04-21_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.table--primary {\n  thead {\n    background-color: purple;\n    color: white;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Card Variation\nDESCRIPTION: Template and example for creating a custom card variation using BEM methodology\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Card/Card.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.card--{name} {\n  background-color:\n  color:\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.card--purple {\n  border-radius: var(--op-radius-large);\n  font-size: var(--op-font-2x-large);\n\n  .card__header {\n    background-color: purple;\n    color: white;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Color Tokens in CSS\nDESCRIPTION: Examples of applying color tokens for background and text colors, demonstrating usage of background-color and color variables. Shows how to use both background/foreground pairs and direct color values.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Color/BasicColor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background-color: var(--op-color-background);\n  color: var(--op-color-on-background);\n}\n/* or */\ncolor: var(--op-color-white);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tooltip Variations\nDESCRIPTION: CSS template for creating new tooltip variations using custom data attributes.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tooltip/Tooltip.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n[data-special-tooltip-text] {\n  /* Add your custom styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: Tooltip CSS Variables\nDESCRIPTION: List of customizable CSS variables available for styling tooltips.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tooltip/Tooltip.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--_op-tooltip-max-width\n--_op-tooltip-padding\n--_op-tooltip-background-color\n--_op-tooltip-text-color\n--_op-tooltip-arrow-size\n--_op-tooltip-tooltip-offset\n--_op-tooltip-tooltip-radius\n--_op-tooltip-tooltip-font-size\n```\n\n----------------------------------------\n\nTITLE: Customizing Alert Styles\nDESCRIPTION: Examples of how to customize alert styles using CSS overrides for both general and specific alert types.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Alert/Alert.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.alert {\n  border-radius: var(--op-radius-large);\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n/* This will only affect the warning alert, but not danger, info, or notice. */\n.alert--warning {\n  background-color: red;\n  color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Spinner Variations\nDESCRIPTION: Template for creating new spinner variations by defining a modifier class with customized CSS variables for colors and other properties.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Spinner/Spinner.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.spinner--{name} {\n  --_op-spinner-indicator-color: red;\n  --_op-spinner-track-color: purple;\n}\n```\n\n----------------------------------------\n\nTITLE: Sidebar API Variables\nDESCRIPTION: CSS variables that control the sidebar's appearance and behavior.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Sidebar/Sidebar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Public API */\n/* Normal */\n--_op-sidebar-background-color\n--_op-sidebar-text-color\n--_op-sidebar-border-color\n\n/* Width */\n--_op-sidebar-rail-width\n--_op-sidebar-compact-width\n--_op-sidebar-drawer-width\n--_op-sidebar-rail-brand-width\n--_op-sidebar-compact-brand-width\n--_op-sidebar-drawer-brand-width\n\n/* Spacing */\n--_op-sidebar-spacing\n--_op-sidebar-brand-spacing\n--_op-sidebar-content-spacing\n--_op-sidebar-content-item-spacing\n\n/* Animation */\n--_op-sidebar-transition\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Styles (CSS)\nDESCRIPTION: This CSS snippet shows how to override the default icon styles by targeting the `.icon` selector. It enables modification of all icon behavior by setting custom properties.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n}\n```\n\n----------------------------------------\n\nTITLE: Using Border Color Tokens in CSS\nDESCRIPTION: Examples of how to apply border color tokens in CSS, demonstrating usage with both border-color property and box-shadow property.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Color/BorderColor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-color: var(--op-color-border);\n/* or */\nbox-shadow: var(--op-border-top) var(--op-color-border);\n```\n\n----------------------------------------\n\nTITLE: Creating Exclusive Accordions with HTML\nDESCRIPTION: Demonstrates how to create exclusive accordions where only one can be open at a time by using the name attribute on details elements.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Accordion/Accordion.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<details class=\"accordion\" name=\"accordion-group\">...</details>\n<details class=\"accordion\" name=\"accordion-group\">...</details>\n<details class=\"accordion\" name=\"accordion-group\">...</details>\n```\n\n----------------------------------------\n\nTITLE: Applying Default Font Family Token\nDESCRIPTION: Basic CSS implementation of font family token for setting global font\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Typography/FontFamily.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nhtml {\n  font-family: var(--op-font-family);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Accordion Styles with CSS\nDESCRIPTION: Shows how to customize the base accordion styles by overriding the .accordion selector.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Accordion/Accordion.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.accordion {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Modal Variations Using CSS\nDESCRIPTION: This CSS template guides you on creating new modal variations by using modifiers according to the BEM methodology. It details the structure for adding custom names and styles for modals and their components.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Modal/Modal.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.modal-wrapper--{name} {\n  .modal-wrapper__backdrop {\n  }\n\n  &.modal-wrapper--active {\n    .modal-wrapper__backdrop {\n    }\n  }\n}\n\n.modal--{name} {\n  .modal__header,\n  .modal__body,\n  .modal__footer {\n    padding:\n  }\n\n  .modal__header {\n    font-size:\n    font-weight:\n  }\n\n  .modal__body {\n    box-shadow:\n  }\n\n  .modal__footer {\n    display:\n    justify-content:\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Component CSS Variables\nDESCRIPTION: Lists the CSS variables that can be customized to modify the Switch component's appearance, including height, width, and opacity values.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Switch/Switch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--_op-switch-height-small\n--_op-switch-height-large\n--_op-switch-width-small\n--_op-switch-width-large\n--_op-switch-opacity-disabled\n--_op-switch-switch-padding\n```\n\n----------------------------------------\n\nTITLE: Creating New Avatar Variations in CSS\nDESCRIPTION: Template for creating new variations of the Avatar component using BEM methodology, demonstrating how to modify the border radius.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Avatar/Avatar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.avatar--{name} {\n  --_op-avatar-border-radius: var(--op-radius-2x-large);\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Specific Navbar Styles\nDESCRIPTION: This snippet shows how to modify specific styles of the Navbar component using modifier classes. By targeting classes like `.navbar--modifier`, you can override specific properties such as brand height and spacing. This allows for fine-grained control over the appearance of different navbar variations.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Navbar/Navbar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.navbar--modifier {\n  --_op-navbar-brand-height: 5.4rem;\n  --_op-navbar-horizontal-spacing: var(--op-space-small);\n  --_op-navbar-content-item-spacing: var(--op-space-x-small);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Styles\nDESCRIPTION: This CSS snippet demonstrates how to customize the styles of the Tab component by overriding CSS variables. It modifies the font size and padding for the small Tab variation by setting the corresponding CSS variables using the `--_op-tab-font-small` and `--_op-tab-padding-small` variables. This example shows how to adjust the appearance of the Tab to fit specific design requirements.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tab/Tab.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.tab {\n  --_op-tab-font-small: var(--op-font-2x-small);\n  --_op-tab-padding-small: var(--op-space-3x-small) var(--op-space-small);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding SidePanel Styles in CSS\nDESCRIPTION: This snippet introduces how to override default SidePanel styles using the BEM methodology. It provides examples of modifying the background color and text color by targeting the .side-panel block class, allowing for global style changes.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/SidePanel/SidePanel.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.side-panel {\n  background-color: var(--op-color-primary-plus-six);\n  color: var(--op-color-primary-on-plus-six);\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Customizing Text Pair Styles\nDESCRIPTION: This CSS snippet shows how to customize the Text Pair component styles by overriding the `.text-pair` selector.  It provides an example of setting the `gap` property using a CSS variable.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/TextPair/TextPair.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.text-pair {\n  gap: var(--op-space-x-large);\n}\n```\n\n----------------------------------------\n\nTITLE: Avatar CSS Variables\nDESCRIPTION: List of CSS variables that can be customized for the Avatar component, including border styles, sizes, and opacity for disabled state.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Avatar/Avatar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--_op-avatar-border-radius\n--_op-avatar-inner-border-color\n--_op-avatar-outer-border-color\n--_op-avatar-inner-border-width\n--_op-avatar-outer-border-width\n--_op-avatar-disabled-opacity\n--_op-avatar-size-small\n--_op-avatar-size-medium\n--_op-avatar-size-large\n```\n\n----------------------------------------\n\nTITLE: Customizing Badge Base Styles in CSS\nDESCRIPTION: Example of customizing the base badge styles by overriding the main .badge selector\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Badge/Badge.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.badge {\n  font-size: var(--op-font-2x-large);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Breadcrumbs Size Variants\nDESCRIPTION: Shows how to change the font sizes used by the small and large variants of the Breadcrumbs component by overriding the CSS variables.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Breadcrumbs/Breadcrumbs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.breadcrumbs {\n  --_op-breadcrumbs-font-size-small: var(--op-font-4x-large);\n  --_op-breadcrumbs-font-size-large: var(--op-font-6x-large);\n}\n```\n\n----------------------------------------\n\nTITLE: Purple Alert Variation Example\nDESCRIPTION: Example implementation of a custom purple alert variation with muted and filled states.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Alert/Alert.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.alert--purple {\n  background-color: verylightpurple;\n  box-shadow: var(--op-border-all) purple;\n  color: purple;\n\n  .alert__title {\n    color: darkpurple;\n  }\n\n  &.alert--muted {\n    background-color: lightpurple;\n    box-shadow: none;\n    color: white;\n\n    .alert__title {\n      color: purple;\n    }\n  }\n\n  &.alert--filled {\n    background-color: purple;\n    box-shadow: none;\n    color: white;\n\n    .alert__title {\n      color: darkpurple;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lucide Icons (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use Lucide Icons with the `<i>` tag and the `.li` prefix, along with a specific icon name. It displays a banana icon.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"icon li li-banana\"></i>\n```\n\n----------------------------------------\n\nTITLE: Creating Alpha Colors with color-mix() Function in CSS\nDESCRIPTION: Demonstrates using the color-mix() function to dynamically create colors with transparency. This approach calculates component-specific colors by mixing base colors with a variable opacity level derived from a system token.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Color/ColorWithAlpha.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n%my-component-global {\n  --_op-my-component-opacity-disabled: calc(var(--op-opacity-disabled) * 100%); /* converts 0.4 to 40% */\n\n  --op-my-component-background-color: color-mix(\n    in srgv,\n    var(--op-color-primary-base) var(--_op-thing-opacity-disabled),\n    var(--op-color-primary-plus-max)\n  );\n  --op-my-component-color: color-mix(\n    in srgv,\n    var(--op-color-primary-on-base) var(--_op-thing-opacity-disabled),\n    var(--op-color-primary-plus-max)\n  );\n  --op-my-component-color-alt: color-mix(\n    in srgv,\n    var(--op-color-primary-on-base-alt) var(--_op-thing-opacity-disabled),\n    var(--op-color-primary-plus-max)\n  );\n\n  background-color: var(--op-my-component-background-color);\n  color: var(--op-my-component-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Density with CSS Variables\nDESCRIPTION: This snippet demonstrates the use of CSS variables to customize the padding for different table densities: default, comfortable, and compact. The variables are scoped to the table element.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Table/Table.mdx#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.table {\n  --_op-table-cell-padding-default: var(--op-space-x-small) var(--op-space-2x-small);\n  --_op-table-cell-padding-comfortable: var(--op-space-large) var(--op-space-medium);\n  --_op-table-cell-padding-compact: var(--op-space-2x-small) var(--op-space-3x-small);\n}\n```\n\n----------------------------------------\n\nTITLE: Spinner CSS Variables for Customization\nDESCRIPTION: Lists all available CSS variables that can be customized for the Spinner component, including colors, track widths, diameters, and animation properties.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Spinner/Spinner.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n  --_op-spinner-indicator-color\n  --_op-spinner-track-color\n  --_op-spinner-track-width-x-small\n  --_op-spinner-track-width-small\n  --_op-spinner-track-width-medium\n  --_op-spinner-track-width-large\n  --_op-spinner-diameter-x-small\n  --_op-spinner-diameter-small\n  --_op-spinner-diameter-medium\n  --_op-spinner-diameter-large\n  --_op-spinner-animation-duration\n  --_op-spinner-animation-timing-function\n```\n\n----------------------------------------\n\nTITLE: Integrating Tom Select with Optics in CSS\nDESCRIPTION: Code snippet demonstrating how to import the Tom Select library styles and apply Optics Design System tokens to it. This integration provides a customized appearance for the Tom Select component that matches the Optics design system.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Addons.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics';\n@import 'tom-select/dist/css/tom-select';\n\n@import '@rolemodel/optics/dist/css/addons/tom-select';\n```\n\n----------------------------------------\n\nTITLE: Creating New Breadcrumbs Variations\nDESCRIPTION: Provides a template for creating new Breadcrumbs variations by defining a new modifier class with custom styles such as background color and text color.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Breadcrumbs/Breadcrumbs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.breadcrumbs--{name} {\n  background-color:\n  color:\n}\n```\n\n----------------------------------------\n\nTITLE: Canvas for Flex Grow One - HTML\nDESCRIPTION: Demonstrates the `.flex-grow-1` class applied to an item, allowing that item to expand and occupy available space within a flex container.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.FlexGrowOne} />\n```\n\n----------------------------------------\n\nTITLE: Disabled Button with Tooltip Implementation\nDESCRIPTION: HTML example showing how to implement a tooltip on a disabled button using a wrapper span element.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tooltip/Tooltip.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span data-tooltip-text=\"This is a tooltip\">\n  <button class=\"btn\" disabled>Disabled Button</button>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Creating New Badge Variation Template\nDESCRIPTION: Template for creating a new badge variation using BEM modifier syntax\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Badge/Badge.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.badge--{name} {\n  background-color:\n  color:\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.badge--purple {\n  background-color: purple;\n  color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Customization of Danger Tag Styles\nDESCRIPTION: This CSS code block demonstrates how to customize the styles of the Danger Tag variant. It overrides the default background color for the `.tag--danger` class. This allows for specific styling of the Danger Tag, differentiating it from other Tag variations.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tag/Tag.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.tag--danger {\n  background-color: var(--op-color-alerts-danger-base);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Aligned Header with CSS for Vertical Centering\nDESCRIPTION: CSS implementation for the Aligned Header component that calculates the height of suffix elements based on font size and line height to achieve vertical centering within wrapped text. The component uses CSS variables for line height and font size that can be overridden as needed.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Recipes/AlignedHeader/AlignedHeader.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Badge Example */\n.aligned-header {\n  /* Public API (allowed to be overridden) */\n  --_op-line-height: var(--op-line-height-base);\n  --_op-font-size: var(--op-font-4x-large);\n\n  font-size: var(--_op-font-size);\n  font-weight: var(--op-font-weight-semi-bold);\n  line-height: var(--_op-line-height);\n\n  .aligned-header__centered-suffix {\n    display: inline-flex;\n    height: calc(var(--_op-line-height) * var(--_op-font-size));\n    align-items: center;\n    vertical-align: top;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Divider Modifier Styles\nDESCRIPTION: Template for customizing specific divider modifier styles using BEM methodology.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Divider/Divider.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.divider--modifier {\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch Base Style\nDESCRIPTION: Demonstrates how to override the core styles of the Switch component by modifying the main block class according to BEM methodology.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Switch/Switch.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.switch {\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Font Implementation\nDESCRIPTION: Method for replacing default font with a custom font using CSS import and root variable\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Typography/FontFamily.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import 'https://fonts.googleapis.com/css2?family=Tilt+Neon:XROT,YROT@-45..45,-45..45&display=swap';\n\n:root {\n  --op-font-family: 'Tilt Neon', sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Pagination Variations\nDESCRIPTION: Template for creating custom pagination variations using BEM modifier methodology. Replace {name} with the variation identifier.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Pagination/Pagination.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.pagination--{name} {\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch Modifier Style\nDESCRIPTION: Shows how to override the behavior of a specific Switch variant by targeting its modifier class in the BEM structure.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Switch/Switch.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.switch--modifier {\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SidePanel Styles with CSS Variables\nDESCRIPTION: This snippet lists CSS variables used within the SidePanel component, allowing for customization of its widths and paddings. These variables provide scoped styles that can be adjusted to meet specific design requirements within a project.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/SidePanel/SidePanel.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--_op-side-panel-width\n--_op-side-panel-header-padding\n--_op-side-panel-body-padding\n--_op-side-panel-footer-padding\n--_op-side-panel-section-padding\n```\n\n----------------------------------------\n\nTITLE: Creating New Divider Variations\nDESCRIPTION: Template for creating custom divider variations following the BEM naming convention.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Divider/Divider.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.divider--{name} {\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Styles in CSS\nDESCRIPTION: Example of how to customize the core styles of the Avatar component by overriding the .avatar selector.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Avatar/Avatar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.avatar {\n}\n```\n\n----------------------------------------\n\nTITLE: Canvas for Align Self Stretch - HTML\nDESCRIPTION: Renders the `.self-stretch` class, which stretches a specific item within the flex container to fill the cross axis, allowing for individual item control.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.AlignSelfStretch} />\n```\n\n----------------------------------------\n\nTITLE: Creating New Navbar Variations\nDESCRIPTION: This snippet provides a template for creating new variations of the Navbar component. By defining a new class following the `.navbar--{name}` pattern, you can create custom styles for specific use cases. This allows for the creation of unique navbar designs tailored to your application's needs.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Navbar/Navbar.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.navbar--{name} {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Theme with HTML Attribute\nDESCRIPTION: Shows how to apply a specific theme by setting a data-theme attribute on the root HTML element.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Themes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html data-theme=\"example\">\n  ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Customizing Breadcrumbs Core Styles\nDESCRIPTION: Demonstrates how to override the core styles of the Breadcrumbs component by targeting the main .breadcrumbs class and modifying properties like alignment.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Breadcrumbs/Breadcrumbs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.breadcrumbs {\n  align-items: start;\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Sidebar Implementation\nDESCRIPTION: JavaScript code for making the sidebar responsive, automatically switching between drawer, compact, and rail styles based on screen width.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Sidebar/Sidebar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sidebarStyleOptions = {\n  drawer: 'sidebar--drawer',\n  compact: 'sidebar--compact',\n  rail: 'sidebar--rail',\n}\n\nconst getSidebarStyle = (width) => {\n  let newStyle = sidebarStyleOptions['drawer']\n\n  if (window.innerWidth <= 1024) {\n    newStyle = sidebarStyleOptions['compact']\n  }\n\n  if (window.innerWidth <= 768) {\n    newStyle = sidebarStyleOptions['rail']\n  }\n\n  return newStyle\n}\n\nconst applySidebarStyle = (newStyle) => {\n  const sidebar = document.getElementById('sidebar')\n  sidebar.classList.remove(sidebarStyleOptions['drawer'])\n  sidebar.classList.remove(sidebarStyleOptions['compact'])\n  sidebar.classList.remove(sidebarStyleOptions['rail'])\n  sidebar.classList.add(newStyle)\n}\n\n// Initial Page Load\napplySidebarStyle(getSidebarStyle(window.innerWidth))\n\n// Window Resize\nwindow.addEventListener('resize', (event) => {\n  applySidebarStyle(getSidebarStyle(window.innerWidth))\n})\n```\n\n----------------------------------------\n\nTITLE: Canvas for Align Items Start - HTML\nDESCRIPTION: Showcases the `.items-start` class which aligns flex items at the start of the cross axis, serving as an example of vertical alignment.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<Canvas withToolbar>\n  <Canvas of={FlexStories.AlignStart} />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Customizing Table with BEM\nDESCRIPTION: This CSS snippet shows how to customize table styles using BEM methodology by overriding the main block class `.table`. It demonstrates changing the font size through a CSS variable.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Table/Table.mdx#2025-04-21_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.table {\n  font-size: var(--op-font-2x-large);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tabler Icons (CSS)\nDESCRIPTION: This CSS snippet imports the base Optics styles and the Tabler Icons addon font.  These icons are meant to be used as an additional icon library.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics';\n@import '@rolemodel/optics/dist/css/addons/fonts/tabler_icons';\n```\n\n----------------------------------------\n\nTITLE: Canvas for Flex Property - HTML\nDESCRIPTION: Renders the basic flex property which sets the display type to flex, allowing the parent container to utilize the flexbox model and manage its child components accordingly.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.With} />\n```\n\n----------------------------------------\n\nTITLE: Insetting Box Shadows with CSS Variables\nDESCRIPTION: This snippet shows how to use the 'inset' prefix for insetting borders using CSS box shadows. Insetting changes the apparent direction of the border, with limitations on x and y borders. The input includes CSS variables, and the output visually adjusts border positions.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Border/BorderStroke.mdx#2025-04-21_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nbox-shadow: inset var(--op-border-all) var(--op-color-border);\n```\n\nLANGUAGE: CSS\nCODE:\n```\nbox-shadow: inset var(--op-border-left) var(--op-color-primary-base);\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Base Styles\nDESCRIPTION: CSS selector for customizing the base tooltip styles using the data-tooltip-text attribute.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tooltip/Tooltip.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n[data-tooltip-text] {\n}\n```\n\n----------------------------------------\n\nTITLE: Customizable CSS Variables for Button Group - CSS\nDESCRIPTION: This snippet defines CSS variables that can be customized for the button group component. These variables control z-index properties for hover, active, and focus states, allowing for flexible styling.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/ButtonGroup/ButtonGroup.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n{/* prettier-ignore-start */}\n--op-btn-group-hover-z-index\n--op-btn-group-active-z-index\n--op-btn-group-focus-z-index\n{/* prettier-ignore-end */}\n```\n\n----------------------------------------\n\nTITLE: Extra Small Container Size Specification\nDESCRIPTION: This snippet defines the extra small variant of the container, reducing its size further to accommodate very small screens using predefined breakpoint settings.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Container/Container.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`.container--xs` Change the container size to `--op-breakpoint-x-small`\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Divider Styles\nDESCRIPTION: Template for customizing the base divider styles using BEM methodology.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Divider/Divider.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.divider {\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Z-Index Token Usage Example\nDESCRIPTION: Demonstrates how to apply a z-index design token to control the stacking order of an element using CSS custom properties (variables)\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/ZIndex.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nz-index: var(--op-z-index-header);\n```\n\n----------------------------------------\n\nTITLE: Divider Component CSS Variables\nDESCRIPTION: List of customizable CSS variables that control the divider's appearance, including height and padding options for different sizes.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Divider/Divider.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--_op-divider-vertical-min-height\n--_op-divider-height-small\n--_op-divider-height-medium\n--_op-divider-height-large\n--_op-divider-padding-small\n--_op-divider-padding-medium\n--_op-divider-padding-large\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Stylesheets in CSS\nDESCRIPTION: This CSS code demonstrates how to import the necessary stylesheets for modals from RoleModel Optics. The imports specify dependencies for core fonts, tokens, base styles, and the modal component itself.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Modal/Modal.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/modal';\n```\n\n----------------------------------------\n\nTITLE: Customizing Specific Badge Variation Styles\nDESCRIPTION: Example of overriding styles for a specific badge variation using BEM modifier\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Badge/Badge.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.badge--primary {\n  background-color: red;\n  color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Pagination Styles\nDESCRIPTION: Template for customizing the base pagination styles using BEM methodology. Override the pagination block class to modify core styles.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Pagination/Pagination.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.pagination {\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component Dependencies\nDESCRIPTION: Required CSS imports for using the Button component including core dependencies and the component itself\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Button/Button.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n@import '@rolemodel/optics/dist/css/components/icon';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/button';\n```\n\n----------------------------------------\n\nTITLE: Using Filled Tabler Icons (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use the filled variant of Tabler Icons. It uses the `<i>` tag and replaces `ti-{name}` with `.ti-{name}-filled` to create the filled effect.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"icon ti ti-settings-filled\"></i>\n```\n\n----------------------------------------\n\nTITLE: Using Tabler Icons (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use Tabler Icons with the `<i>` tag and the `.ti` prefix, along with a specific icon name.  It displays a settings icon.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"icon ti ti-settings\"></i>\n```\n\n----------------------------------------\n\nTITLE: Using Phosphor Icons (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use Phosphor Icons with the `<i>` tag and the `.ph` prefix, along with a specific icon name.  It displays a smiley icon.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"icon ph ph-smiley\"></i>\n```\n\n----------------------------------------\n\nTITLE: Applying Border Width Tokens in CSS\nDESCRIPTION: Example of how to use border width tokens in CSS for both border-width and box-shadow properties. These tokens provide consistent border width values throughout the design system.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Border/BorderWidth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-width: 0 0 0 var(--op-border-width);\n/* or */\nbox-shadow: 0 0 0 var(--op-border-width);\n```\n\n----------------------------------------\n\nTITLE: Overriding Unit Scales in CSS\nDESCRIPTION: This snippet demonstrates how to override the default unit scales for font sizes and spacing values in the Optics CSS framework. The CSS variables `--op-space-scale-unit`, `--op-font-scale-unit`, and `--op-size-unit` can be set in the `:root` to globally adjust the scaling factors. The default unit is `1rem` equivalent to `10px`.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/ScaleOverriding.mdx#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --op-space-scale-unit: 0.5rem;\n}\n\n```\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --op-font-scale-unit: 0.5rem;\n}\n\n```\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --op-size-unit: 0.2rem;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Confirm Dialog Style Customization\nDESCRIPTION: Example of customizing core confirm dialog styles by overriding base classes.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/ConfirmDialog/ConfirmDialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.confirm-dialog-wrapper {\n  z-index: 200;\n}\n\n.confirm-dialog {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Canvas for Justify Content Around - HTML\nDESCRIPTION: Demonstrates the use of `.justify-around` which distributes items evenly with space around each item along the flex axis.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.JustifyAround} />\n```\n\n----------------------------------------\n\nTITLE: Canvas for Justify Content Center - HTML\nDESCRIPTION: Illustrates the effect of the `.justify-center` class, which centers flex items along the main axis of the flex container.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.JustifyCenter} />\n```\n\n----------------------------------------\n\nTITLE: HTML Example of Gap Utility\nDESCRIPTION: This HTML snippet shows how to apply the `gap-sm` utility class to a flex container.  The special item demonstrates usage of CSS cascade from parent gap.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Gap/Gap.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"flex gap-sm\">\n  <div>1</div>\n  <div>2</div>\n  <div class=\"special-item\">\n    <div>a</div>\n    <div>b</div>\n    <div>c</div>\n  </div>\n  <div>4</div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Applying Border Radius Using CSS Variables\nDESCRIPTION: The snippet demonstrates how to apply a border radius to elements using CSS custom properties. Ensure that the corresponding CSS is imported or defined within the scope of the application. The `--op-radius-small` is a CSS variable representing a predefined border radius size. This snippet expects a valid border radius token to be available in the context.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Border/BorderRadius.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-radius: var(--op-radius-small);\n```\n\n----------------------------------------\n\nTITLE: Creating New Table Style Variations\nDESCRIPTION: This snippet outlines a template for creating new table variations using BEM modifiers. The example defines a new 'purple' variation with specific header background and text colors.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Table/Table.mdx#2025-04-21_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n.table--{name} {\n  thead {\n    background-color:\n    color:\n  }\n}\n\n.table--purple {\n  thead {\n    background-color: purple;\n    color: white;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Material Symbols Icon Font (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to import Google's Material Symbols Outlined icon font with options for fill and emphasis.  It provides three import variations, allowing developers to selectively include features based on their application's needs.  The `display=block` parameter ensures proper font loading behavior.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* No fill, weight, or emphasis options, just allows for size modifiers */\n@import 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined&display=block';\n\n/* Only fill option */\n@import 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:FILL@0..1&display=block';\n\n/* Only emphasis option */\n@import 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,GRAD@20..48,-50..200&display=block';\n```\n\n----------------------------------------\n\nTITLE: Badge CSS Dependencies Import\nDESCRIPTION: CSS imports required for the Badge component, including core tokens, fonts, and component-specific styles\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Badge/Badge.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n@import '@rolemodel/optics/dist/css/components/icon';\n@import '@rolemodel/optics/dist/css/components/badge';\n```\n\n----------------------------------------\n\nTITLE: Importing Rails Panel Styles in CSS\nDESCRIPTION: Code example showing how to import the styles for Rails Panel, which is designed to work with the RoleModel Rails Panel implementation. This addon provides styling for modal-like panel components.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Addons.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics';\n\n@import '@rolemodel/optics/dist/css/addons/panel';\n```\n\n----------------------------------------\n\nTITLE: Canvas for Align Items End - HTML\nDESCRIPTION: Illustrates the use of the `.items-end` class which aligns flex items at the end of the cross axis, showcasing a different aspect of alignment.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.AlignEnd} />\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Component Dependencies\nDESCRIPTION: CSS imports required for using the Alert component, including core dependencies and the component itself.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Alert/Alert.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n@import '@rolemodel/optics/dist/css/components/icon';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/alert';\n```\n\n----------------------------------------\n\nTITLE: Design Token Naming Structure\nDESCRIPTION: Defines the standardized naming convention for design tokens in the Optics project, using a hierarchical approach with prefix, category, sub-category, and variant components\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Tokens.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--prefix-category-sub-category-variant-qualifier-variant: value\n```\n\n----------------------------------------\n\nTITLE: Controlling Theme Mode at Component Level\nDESCRIPTION: Uses CSS color-scheme property to control theme mode within an individual component rather than at the application level.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Themes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.my-component {\n  color-scheme: only light;\n  /*\n    Options:\n    color-scheme: light dark;\n    color-scheme: only light;\n    color-scheme: only dark;\n  */\n\n  background-color: var(--op-color-primary-plus-one);\n  color: var(--op-color-primary-on-plus-one);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Font Size Tokens in CSS\nDESCRIPTION: This snippet demonstrates how to apply font size tokens using CSS variables. The CSS variable '--op-font-large' is used to set the font size, which is part of design tokens defined elsewhere in the Storybook project. There are no explicit dependencies other than having these tokens established and available in the project.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Typography/FontSize.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nfont-size: var(--op-font-large);\n```\n\n----------------------------------------\n\nTITLE: Creating New Sidebar Variations\nDESCRIPTION: Template for creating new sidebar variations using BEM methodology.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Sidebar/Sidebar.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.sidebar--{name} {\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Dependencies for Navbar Component\nDESCRIPTION: This snippet shows the CSS dependencies required for the Navbar component to function correctly. It imports fonts, tokens, base styles, icon styles, button styles, and the navbar component itself. These imports must be included in your project to use the Navbar component.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Navbar/Navbar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n@import '@rolemodel/optics/dist/css/components/icon';\n@import '@rolemodel/optics/dist/css/components/button';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/navbar';\n```\n\n----------------------------------------\n\nTITLE: Customizing Line Height Tokens for Custom Fonts in CSS\nDESCRIPTION: This snippet illustrates customizing line height tokens for better alignment when dealing with custom fonts. It shows adjusting the looser line height by defining a new value for the CSS variable in the root. Prerequisites include a CSS-in-JS setup or global CSS file where these variables are managed.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Typography/LineHeight.mdx#2025-04-21_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --op-line-height-looser: 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Font Weight Token in CSS\nDESCRIPTION: Demonstrates how to use a font weight design token to set text boldness using CSS variable syntax\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Typography/FontWeight.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nfont-weight: var(--op-font-weight-bold);\n```\n\n----------------------------------------\n\nTITLE: Canvas for Align Self Start - HTML\nDESCRIPTION: Demonstrates the `.self-start` class which aligns a specific item at the start of the cross axis, offering more control over individual item positioning.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.AlignSelfStart} />\n```\n\n----------------------------------------\n\nTITLE: Medium Padding Specification\nDESCRIPTION: This snippet specifies the medium padding variant for the container, utilizing the medium space token from the CSS variables to ensure a balanced layout around the content.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Container/Container.mdx#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`.container--md-padding` Change the padding of the container to use the `--op-space-medium` token\n```\n\n----------------------------------------\n\nTITLE: Canvas for Flex Wrap - HTML\nDESCRIPTION: Renders the `.flex-wrap` class that enables wrapping of flex items when the flex container is full, demonstrating how overflow is managed in the layout.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.FlexWrap} />\n```\n\n----------------------------------------\n\nTITLE: Importing CSS for Table Components\nDESCRIPTION: This snippet shows CSS import statements necessary for table styling. Key dependencies include fonts, tokens, and base styles, along with the table component-specific styles.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Table/Table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/table';\n```\n\n----------------------------------------\n\nTITLE: CSS Imports for Button Group Component - CSS\nDESCRIPTION: This snippet includes CSS import statements for the dependencies required by the Button Group component. It allows the component to utilize core styles and other related components.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/ButtonGroup/ButtonGroup.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n@import '@rolemodel/optics/dist/css/components/icon';\n@import '@rolemodel/optics/dist/css/components/button';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/button_group';\n```\n\n----------------------------------------\n\nTITLE: Public Component Token API\nDESCRIPTION: Shows the naming convention for user-configurable component tokens with a single underscore prefix\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Tokens.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--_prefix-component-name-sub-name-variant-qualifier-variant: value\n```\n\n----------------------------------------\n\nTITLE: Roboto Flex Variable Font Configuration\nDESCRIPTION: Comprehensive example of configuring a complex variable font with multiple axes\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Typography/FontFamily.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.roboto-flex-{uniquifier} {\n  font-family: 'Roboto Flex', sans-serif;\n  font-optical-sizing: auto;\n  font-weight: {weight};\n  font-style: normal;\n  font-variation-settings:\n    'slnt' {slant},\n    'wdth' {width},\n    'GRAD' {grade},\n    'XOPQ' {thick stroke},\n    'XTRA' {counter width},\n    'YOPQ' {thin stroke},\n    'YTAS' {ascender height},\n    'YTDE' {descender depth},\n    'YTFI' {figure height},\n    'YTLC' {lowercase height},\n    'YTUC' {uppercase height};\n}\n```\n\n----------------------------------------\n\nTITLE: Component Modifier CSS Customization\nDESCRIPTION: Demonstrates how to override or create new variations of a component using BEM modifier syntax\nSOURCE: https://github.com/rolemodel/optics/blob/main/tools/templates/component/??name??(pascalCase).mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.??name??(lowerCase)--modifier {\n}\n\n.??name??(lowerCase)--{name} {\n  @extend %??name??(lowerCase)-global;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Item Width Utilities in Canvases\nDESCRIPTION: This section contains multiple Canvas components for each item width utility class, showcasing how each class can visually affect an element's width. Each canvas reference corresponds to specific item width story entries.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/ItemWidth/ItemWidth.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Canvas of={ItemWidthStories.Half} />\n<Canvas of={ItemWidthStories.Full} />\n<Canvas of={ItemWidthStories.OneFifth} />\n<Canvas of={ItemWidthStories.TwoFifths} />\n<Canvas of={ItemWidthStories.ThreeFifths} />\n<Canvas of={ItemWidthStories.FourFifths} />\n<Canvas of={ItemWidthStories.OneQuarter} />\n<Canvas of={ItemWidthStories.ThreeQuarters} />\n<Canvas of={ItemWidthStories.OneThird} />\n<Canvas of={ItemWidthStories.TwoThirds} />\n```\n\n----------------------------------------\n\nTITLE: CSS Dependencies and Component Import\nDESCRIPTION: This snippet demonstrates how to import the necessary CSS files for the Tab component, including core dependencies like fonts, tokens, and base styles, as well as the Tab component's specific CSS file. These imports are required for the Tab component to render correctly with its intended styling.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tab/Tab.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/tab';\n```\n\n----------------------------------------\n\nTITLE: Applying Line Height Tokens in CSS\nDESCRIPTION: This snippet demonstrates how to apply line height tokens using CSS variables to set the line-height property. It requires a CSS environment that supports custom properties and Storybook setup with design tokens.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Typography/LineHeight.mdx#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nline-height: var(--op-line-height-dense);\n```\n\n----------------------------------------\n\nTITLE: Variable Font Configuration with Multiple Axes\nDESCRIPTION: Advanced CSS configuration for variable fonts with weight, width, style, and variation settings\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Typography/FontFamily.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.my-selector {\n  font-family: var(--op-font-family);\n  font-optical-sizing: {auto|none};\n  font-weight: {100 to 900};\n  font-style: {normal|italic};\n  font-variation-settings:\n    \"wdth\" {62.5 to 100};\n  font-stretch: {62.5% to 100%};\n}\n```\n\n----------------------------------------\n\nTITLE: Small Padding Specification\nDESCRIPTION: This snippet defines the padding for the small variant of the container, setting it to utilize the small space token provided in the CSS custom properties, allowing for tighter spacing.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Container/Container.mdx#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`.container--sm-padding` Change the padding of the container to use the `--op-space-small` token\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Dependencies - CSS\nDESCRIPTION: This CSS snippet imports necessary styles for form components from external libraries/modules to ensure that all foundational styles are available for the form.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Form/Form.mdx#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/form';\n```\n\n----------------------------------------\n\nTITLE: Using Tabler Icons with Size Modifier (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use Tabler Icons with a size modifier (`.icon--x-large`). It uses the `<i>` tag and the `.ti` prefix, along with a specific icon name and the size modifier.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"icon ti ti-settings icon--x-large\"></i>\n```\n\n----------------------------------------\n\nTITLE: Default Container Specifications\nDESCRIPTION: This snippet defines the default styling for the container class, setting its dimensions based on defined breakpoints and padding tokens using CSS custom properties.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Container/Container.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`.container` Create a container area set to be the size of `--op-breakpoint-medium` with a padding of `--op-space-large`\n```\n\n----------------------------------------\n\nTITLE: Applying Encoded Image Tokens in CSS - CSS\nDESCRIPTION: This CSS code defines how to use the encoded image tokens as a background image on elements. It specifies the positioning and repetition parameters necessary to correctly display the dropdown arrow.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/EncodedImage.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nbackground: var(--op-encoded-images-dropdown-arrow) center right no-repeat;\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Metadata and Design Token Components\nDESCRIPTION: Imports necessary dependencies for creating a Storybook documentation block for z-index design tokens, including metadata and design token visualization components\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/ZIndex.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/blocks'\nimport { DesignTokenDocBlock } from 'storybook-design-token'\nimport { createSourceCodeLink } from '../helpers/sourceCodeLink.js'\n```\n\n----------------------------------------\n\nTITLE: Rendering Container with Source Code Link\nDESCRIPTION: This snippet uses React to render a `div` element that injects HTML containing a link to the source code of utility styles. The `dangerouslySetInnerHTML` attribute is used to render the created HTML string safely.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Container/Container.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  dangerouslySetInnerHTML={{\n    __html: createSourceCodeLink({ link: 'core/utilities.css' }).outerHTML,\n  }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Importing Feather Icons (CSS)\nDESCRIPTION: This CSS snippet imports the base Optics styles and the Feather Icons addon font for use as an additional icon library.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics';\n@import '@rolemodel/optics/dist/css/addons/fonts/feather_icons';\n```\n\n----------------------------------------\n\nTITLE: Using Feather Icons with Size Modifier (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use Feather Icons with a size modifier (`.icon--x-large`). It uses the `<i>` tag and the `.fi` prefix, along with a specific icon name and the size modifier.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"icon fi fi-feather icon--x-large\"></i>\n```\n\n----------------------------------------\n\nTITLE: Small Container Size Specification\nDESCRIPTION: This snippet outlines the small-sized variant of the container. It adjusts the size of the container to utilize the small breakpoint defined in the CSS custom properties.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Container/Container.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`.container--sm` Change the container size to `--op-breakpoint-small`\n```\n\n----------------------------------------\n\nTITLE: Using Lucide Icons with Size Modifier (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use Lucide Icons with a size modifier (`.icon--x-large`). It uses the `<i>` tag and the `.li` prefix, along with a specific icon name and the size modifier.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"icon li li-banana icon--x-large\"></i>\n```\n\n----------------------------------------\n\nTITLE: Render Center Alignment Story with Canvas\nDESCRIPTION: Renders the 'Center' story from TextAlignmentStories using the Storybook Canvas component. This displays the visual representation of the center-aligned text.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/TextAlignment/TextAlignment.mdx#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Canvas of={TextAlignmentStories.Center} />\n```\n\n----------------------------------------\n\nTITLE: Applying Opacity Styles in CSS\nDESCRIPTION: This snippet demonstrates how to apply opacity tokens in CSS using custom properties. The tokens provide pre-defined opacity values that can be used to adjust the transparency of elements, such as applying a faded or disabled effect. The snippet shows how to use the '--op-opacity-disabled' and '--op-opacity-full' variables to modify an element's opacity.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Opacity.mdx#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nopacity: var(--op-opacity-disabled);\\n/* or */\\nopacity: var(--op-opacity-full);\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Dependencies in CSS\nDESCRIPTION: This snippet shows the required CSS imports for using the Avatar component, including core styles and the component-specific styles.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Avatar/Avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/avatar';\n```\n\n----------------------------------------\n\nTITLE: Canvas for Flex Direction Column - HTML\nDESCRIPTION: Shows the use of `.flex-col` which defines the flex axis as a column, which affects item distribution and alignment across the flex container.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.FlexCol} />\n```\n\n----------------------------------------\n\nTITLE: Component-Specific Token Naming Structure\nDESCRIPTION: Describes a specialized token naming pattern for component-specific tokens, where the component name replaces the standard category structure\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Tokens.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--prefix-component-name-sub-name-variant-qualifier-variant: value\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs CSS Variables\nDESCRIPTION: Lists the CSS variables that can be customized for the Breadcrumbs component, specifically the font size variables for small and large variants.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Breadcrumbs/Breadcrumbs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--_op-breadcrumbs-font-size-small:\n--_op-breadcrumbs-font-size-large:\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Container Stories\nDESCRIPTION: This snippet imports essential components from Storybook and the container stories for use in creating the interactive demos. It establishes the foundational elements needed to visualize the container styling options.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Container/Container.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story, Canvas, Controls } from '@storybook/blocks'\nimport * as ContainerStories from './Container.stories'\nimport { createSourceCodeLink } from '../../helpers/sourceCodeLink.js'\n```\n\n----------------------------------------\n\nTITLE: Importing Core and Component Styles in CSS\nDESCRIPTION: This snippet demonstrates the required CSS imports for the SidePanel component's core and component-specific styles. Dependencies include core font, token, and base styles. The imports ensure that the SidePanel component has access to the necessary styling resources for proper rendering.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/SidePanel/SidePanel.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n@import '@rolemodel/optics/dist/css/components/side_panel';\n```\n\n----------------------------------------\n\nTITLE: Installing Optics via NPM\nDESCRIPTION: This command installs the Optics package using NPM (Node Package Manager). It adds the package to the project's dependencies.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Introduction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @rolemodel/optics\n```\n\n----------------------------------------\n\nTITLE: Canvas for Align Items Baseline - HTML\nDESCRIPTION: Demonstrates the `.items-baseline` class to align flex items along the baseline of the cross axis, allowing for consistent text alignment.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.AlignBaseline} />\n```\n\n----------------------------------------\n\nTITLE: Canvas for Align Items Center - HTML\nDESCRIPTION: Renders the `.items-center` class which centers flex items along the cross axis, demonstrating how to manage alignment of items.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.AlignCenter} />\n```\n\n----------------------------------------\n\nTITLE: Base Component CSS Customization\nDESCRIPTION: Shows how to customize the base component styles using CSS selectors following BEM methodology\nSOURCE: https://github.com/rolemodel/optics/blob/main/tools/templates/component/??name??(pascalCase).mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.??name??(lowerCase) {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Source Code Link for Documentation in JSX\nDESCRIPTION: JSX code that renders a source code link to the base tokens CSS file, using the dangerouslySetInnerHTML attribute to inject HTML created by a helper function.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Shadow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  dangerouslySetInnerHTML={{\n    __html: createSourceCodeLink({ link: 'core/tokens/base_tokens.css' }).outerHTML,\n  }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Importing Spinner Component and Dependencies with CSS\nDESCRIPTION: Shows the required CSS imports for using the Spinner component, including its dependencies on core fonts, tokens, and base styles.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Spinner/Spinner.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/spinner';\n```\n\n----------------------------------------\n\nTITLE: Adding Token Documentation with Design Token Presenter\nDESCRIPTION: CSS comment format for documenting design tokens in Storybook with category and presenter information.\nSOURCE: https://github.com/rolemodel/optics/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/**\n* @tokens Basic Colors\n* @presenter Color\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing Optics via Yarn\nDESCRIPTION: Command to install the Optics design system using Yarn package manager.\nSOURCE: https://github.com/rolemodel/optics/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @rolemodel/optics\n```\n\n----------------------------------------\n\nTITLE: Applying Box Shadows with CSS Variables\nDESCRIPTION: This snippet demonstrates how to apply border tokens as CSS box shadows. Dependencies include CSS variable definitions for borders and colors. Typically, it accepts CSS variables as inputs and outputs visual border styles. Notably, it does not affect element sizing.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Border/BorderStroke.mdx#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nbox-shadow: var(--op-border-all) var(--op-color-border);\n```\n\nLANGUAGE: CSS\nCODE:\n```\nbox-shadow: var(--op-border-left) var(--op-color-primary-base);\n```\n\n----------------------------------------\n\nTITLE: Importing Lucide Icons (CSS)\nDESCRIPTION: This CSS snippet imports the base Optics styles and the Lucide Icons addon font for use as an additional icon library.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics';\n@import '@rolemodel/optics/dist/css/addons/fonts/lucide_icons';\n```\n\n----------------------------------------\n\nTITLE: React Component Setup for Color Documentation\nDESCRIPTION: React/JSX code showing the structure of the color documentation page, including meta information and source code link generation.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Color/BasicColor.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/blocks'\nimport { createSourceCodeLink } from '../../helpers/sourceCodeLink.js'\nimport { DesignTokenDocBlock } from 'storybook-design-token'\n\n<Meta title=\"Tokens/Color/Basic Color\" />\n\n<div\n  dangerouslySetInnerHTML={{\n    __html: createSourceCodeLink({ link: 'core/tokens/base_tokens.css' }).outerHTML,\n  }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: CSS Imports for Tag Component\nDESCRIPTION: This CSS code block shows the necessary imports for the Tag component to function correctly. It depends on core fonts, tokens, base styles, and icon styles, in addition to the Tag component's specific styles. These imports ensure the Tag component is properly styled and integrated into the overall design system.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tag/Tag.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n@import '@rolemodel/optics/dist/css/components/icon';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/tag';\n```\n\n----------------------------------------\n\nTITLE: Applying Input Focus Token in CSS\nDESCRIPTION: This CSS snippet demonstrates how to use an Input Focus token to apply a box shadow to an element.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Input/InputFocus.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nbox-shadow: var(--op-input-focus-primary);\n```\n\n----------------------------------------\n\nTITLE: Installing Optics via Yarn\nDESCRIPTION: This command installs the Optics package using Yarn package manager. It adds the package to the project's dependencies.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Introduction.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @rolemodel/optics\n```\n\n----------------------------------------\n\nTITLE: Canvas for Justify Content End - HTML\nDESCRIPTION: Renders the `.justify-end` class, which aligns flex items to the end of the flex axis, demonstrating another aspect of flexbox alignment control.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.JustifyEnd} />\n```\n\n----------------------------------------\n\nTITLE: Design Token Doc Block\nDESCRIPTION: Uses the DesignTokenDocBlock component to display available breakpoint tokens.  It configures the component to show tokens from the \"Breakpoints\" category as cards.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Breakpoint.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<DesignTokenDocBlock categoryName=\"Breakpoints\" viewType=\"card\" />\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: This snippet imports the Meta component from '@storybook/blocks' and configures the Storybook documentation to display the title as \"Tokens/Input/Input Height\". It sets the title for the Storybook page, categorizing it within the Tokens section.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Input/InputHeight.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/blocks'\nimport { DesignTokenDocBlock } from 'storybook-design-token'\n\n<Meta title=\"Tokens/Input/Input Height\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Stories and Components - JavaScript\nDESCRIPTION: This snippet imports necessary components and stories for creating form-related UI components in a React application.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Form/Form.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Canvas, Controls } from '@storybook/blocks'\nimport * as ErrorSummaryStories from './ErrorSummary.stories'\nimport * as FormGroupStories from './FormGroup.stories'\nimport * as InputStories from './Input.stories'\nimport * as LabelStories from './Label.stories'\nimport * as SelectStories from './Select.stories'\nimport * as TextareaStories from './Textarea.stories'\nimport { createSourceCodeLink } from '../../helpers/sourceCodeLink.js'\nimport { createAlert } from '../Alert/Alert.js'\n```\n\n----------------------------------------\n\nTITLE: Private Component Token API\nDESCRIPTION: Demonstrates the naming convention for internal, non-user-configurable component tokens with a double underscore prefix\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Tokens.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--__prefix-component-name-sub-name-variant-qualifier-variant: value\n```\n\n----------------------------------------\n\nTITLE: Generating Additional Component Stories\nDESCRIPTION: Command to generate new component stories for Storybook documentation.\nSOURCE: https://github.com/rolemodel/optics/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run generate\n```\n\n----------------------------------------\n\nTITLE: CSS Dependencies and Component Import\nDESCRIPTION: This CSS snippet demonstrates how to import the necessary dependencies (fonts, tokens, base styles) and the Text Pair component's CSS into your project. It specifies the exact file paths for each import.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/TextPair/TextPair.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/text_pair';\n```\n\n----------------------------------------\n\nTITLE: Creating Form HTML Structure - HTML\nDESCRIPTION: This snippet creates a div that uses 'dangerouslySetInnerHTML' to render a link to the CSS file for form components dynamically, ensuring that the correct CSS link is included in the rendered HTML.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Form/Form.mdx#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  dangerouslySetInnerHTML={{\n    __html: createSourceCodeLink({ link: 'components/form.css' }).outerHTML,\n  }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Helpers - JavaScript\nDESCRIPTION: This snippet imports required components and helpers from Storybook and local files to set up the Button Group stories. It establishes the environment to present and interact with the Button Group component in Storybook.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/ButtonGroup/ButtonGroup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story, Canvas, Controls } from '@storybook/blocks'\nimport * as ButtonGroupStories from './ButtonGroup.stories'\nimport { createSourceCodeLink } from '../../helpers/sourceCodeLink.js'\n\n<Meta of={ButtonGroupStories} />\n```\n\n----------------------------------------\n\nTITLE: Canvas for Flex Direction Row - HTML\nDESCRIPTION: Demonstrates the use of `.flex-row` which sets the flex axis to row, illustrating the default direction of a flex container and serving as a guide for overriding settings.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.FlexRow} />\n```\n\n----------------------------------------\n\nTITLE: Using Feather Icons (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use Feather Icons with the `<i>` tag and the `.fi` prefix, along with a specific icon name. It displays a feather icon.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"icon fi fi-feather\"></i>\n```\n\n----------------------------------------\n\nTITLE: Rendering Design Token Documentation Block - JSX\nDESCRIPTION: This snippet integrates a DesignTokenDocBlock into the Storybook, providing a categorized visual display of available encoded image tokens. It helps users easily identify and use the design tokens.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/EncodedImage.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DesignTokenDocBlock categoryName=\"Encoded Images\" viewType=\"card\" />\n```\n\n----------------------------------------\n\nTITLE: Import Text Alignment stories\nDESCRIPTION: Imports all stories related to text alignment from the './TextAlignment.stories' file. This allows the document to showcase different text alignment options defined in the stories.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/TextAlignment/TextAlignment.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as TextAlignmentStories from './TextAlignment.stories'\n```\n\n----------------------------------------\n\nTITLE: Creating Source Code Link (JavaScript)\nDESCRIPTION: This JavaScript snippet imports the `createSourceCodeLink` function from a relative path, and the createAlert function from another relative path.  It is likely used to dynamically generate links to source code files within the documentation and alert messages.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story, Canvas, Controls } from '@storybook/blocks'\nimport * as IconStories from './Icon.stories'\nimport { createSourceCodeLink } from '../../helpers/sourceCodeLink.js'\n\nimport { createAlert } from '../Alert/Alert.js'\n```\n\n----------------------------------------\n\nTITLE: Canvas for Justify Content Start - HTML\nDESCRIPTION: Uses the `.justify-start` class to justify the contents at the start of the flex axis, showcasing the default behavior of flexbox alignment.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.JustifyStart} />\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumbs Component with Dependencies\nDESCRIPTION: Shows the CSS import statements needed to use the Breadcrumbs component, including its dependencies (fonts, tokens, and base styles).\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Breadcrumbs/Breadcrumbs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/breadcrumbs';\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component Dependencies in CSS\nDESCRIPTION: Shows the required CSS imports to use the Switch component as a standalone module, including its core dependencies.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Switch/Switch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/switch';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Blocks and Flex Stories - JavaScript\nDESCRIPTION: Imports the necessary blocks and stories from Storybook to facilitate the rendering of flex utilities in the UI. This sets up the framework for defining and rendering user interface components.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story, Canvas, Controls } from '@storybook/blocks'\nimport * as FlexStories from './Flex.stories'\nimport { createSourceCodeLink } from '../../helpers/sourceCodeLink.js'\n\n<Meta of={FlexStories} />\n```\n\n----------------------------------------\n\nTITLE: Canvas for Align Items Stretch - HTML\nDESCRIPTION: Utilizes the `.items-stretch` class which stretches flex items to fill the container's cross axis, showcasing default alignment behavior.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.AlignStretch} />\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Component Dependencies\nDESCRIPTION: CSS import statements showing required dependencies for using the pagination component, including core styles, buttons, and forms.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Pagination/Pagination.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n@import '@rolemodel/optics/dist/css/core/button';\n@import '@rolemodel/optics/dist/css/core/form';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/pagination';\n```\n\n----------------------------------------\n\nTITLE: Importing Confirm Dialog Dependencies in CSS\nDESCRIPTION: Required CSS imports for using the confirm dialog component, including core dependencies like fonts, tokens, and base styles.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/ConfirmDialog/ConfirmDialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/confirm-dialog';\n```\n\n----------------------------------------\n\nTITLE: Create Source Code Link\nDESCRIPTION: Creates a link to the source code of the core/utilities.css file using the createSourceCodeLink helper function.  The link is embedded within a div using dangerouslySetInnerHTML to render the HTML.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/TextAlignment/TextAlignment.mdx#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  dangerouslySetInnerHTML={{__html: createSourceCodeLink({ link: 'core/utilities.css' }).outerHTML,}}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Utilities in JavaScript\nDESCRIPTION: This snippet imports necessary components and utilities from Storybook and local files to set up the stories for the margin utility classes. Dependencies include storybook components (Meta, Story, Canvas, Controls) and a helper function for source code linking.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Margin/Margin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Canvas, Controls } from '@storybook/blocks';\nimport * as MarginStories from './Margin.stories';\nimport { createSourceCodeLink } from '../../helpers/sourceCodeLink.js';\n```\n\n----------------------------------------\n\nTITLE: Canvas for Align Self End - HTML\nDESCRIPTION: Renders the `.self-end` class which places a specific flex item at the end of the cross axis, allowing for specific item alignment customization.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.AlignSelfEnd} />\n```\n\n----------------------------------------\n\nTITLE: Importing Card Dependencies in CSS\nDESCRIPTION: Required CSS imports for the Card component, including core font, token, and base styles\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Card/Card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n@import '@rolemodel/optics/dist/css/components/card';\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component Dependencies\nDESCRIPTION: Required CSS imports for using the Divider component, including core dependencies like fonts, tokens, and base styles.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Divider/Divider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/divider';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook components and stories\nDESCRIPTION: This snippet imports necessary components from the '@storybook/blocks' library for creating documentation and stories. It also imports stories related to visibility from a local file and a helper function for generating source code links.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Visibility/Visibility.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Story, Canvas, Controls } from '@storybook/blocks'\nimport * as VisibilityStories from './Visibility.stories'\nimport { createSourceCodeLink } from '../../helpers/sourceCodeLink.js'\n```\n\n----------------------------------------\n\nTITLE: Canvas for Flex No Wrap - HTML\nDESCRIPTION: Illustrates the use of the `.flex-no-wrap` class that precludes wrapping of flex items within the container, emphasizing control over item sizing.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.FlexNoWrap} />\n```\n\n----------------------------------------\n\nTITLE: Selective Imports CSS Dependencies\nDESCRIPTION: This CSS snippet shows the required dependencies for the Icon component, specifically fonts, tokens, and base styles. It then shows the component's import.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts'; /* (specifically core/fonts/icon_fonts) */\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/icon';\n```\n\n----------------------------------------\n\nTITLE: Importing Google Fonts CDN for Noto Sans\nDESCRIPTION: CSS import statement for loading Noto Sans variable font with multiple axes of variation\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Typography/FontFamily.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import 'https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wdth,wght@0,62.5..100,100..900;1,62.5..100,100..900&family=Noto+Serif:ital,wdth,wght@0,62.5..100,100..900;1,62.5..100,100..900&display=swap';\n```\n\n----------------------------------------\n\nTITLE: Storybook Documentation Page Configuration\nDESCRIPTION: Sets up a Storybook documentation page with a dynamic title using a placeholder name in PascalCase\nSOURCE: https://github.com/rolemodel/optics/blob/main/tools/templates/overview/??name??(pascalCase).mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Overview/??name??(pascalCase)\" />\n```\n\n----------------------------------------\n\nTITLE: Setting up Meta for Storybook\nDESCRIPTION: This snippet sets up the Meta component from Storybook to associate the documentation with the visibility stories.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Visibility/Visibility.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Meta of={VisibilityStories} />\n```\n\n----------------------------------------\n\nTITLE: Render Left Alignment Story with Canvas\nDESCRIPTION: Renders the 'Left' story from TextAlignmentStories using the Storybook Canvas component. This displays the visual representation of the left-aligned text.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/TextAlignment/TextAlignment.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Canvas of={TextAlignmentStories.Left} />\n```\n\n----------------------------------------\n\nTITLE: Dangerously Setting Inner HTML to Display Link - JSX\nDESCRIPTION: This snippet demonstrates how to create a div element that uses dangerouslySetInnerHTML to insert a source code link into the component. It highlights the usage of createSourceCodeLink to generate the required HTML.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/ButtonGroup/ButtonGroup.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<div\n  dangerouslySetInnerHTML={{\n    __html: createSourceCodeLink({ link: 'components/button_group.css' }).outerHTML,\n  }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Sidebar Dependencies Import\nDESCRIPTION: CSS import statements showing required dependencies for the sidebar component.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Sidebar/Sidebar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n@import '@rolemodel/optics/dist/css/components/icon';\n@import '@rolemodel/optics/dist/css/components/button';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/sidebar';\n```\n\n----------------------------------------\n\nTITLE: Create source code link\nDESCRIPTION: Creates a link to the source code of the base tokens CSS file. This allows users to easily navigate to the source code for further inspection.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Spacing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSourceCodeLink } from '../helpers/sourceCodeLink.js'\n\n<div\n  dangerouslySetInnerHTML={{\n    __html: createSourceCodeLink({ link: 'core/tokens/base_tokens.css' }).outerHTML,\n  }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Importing Necessary Components and Modules - JavaScript\nDESCRIPTION: This snippet imports required components and modules including Storybook blocks, select stories, and a design token document block necessary for displaying visual designs in Storybook.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/EncodedImage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/blocks'\\nimport * as SelectStories from '../Components/Form/Select.stories'\\nimport { DesignTokenDocBlock } from 'storybook-design-token'\\nimport { createSourceCodeLink } from '../helpers/sourceCodeLink.js'\n```\n\n----------------------------------------\n\nTITLE: Displaying Hidden Story with Controls\nDESCRIPTION: This snippet renders the Hidden story and its controls using Storybook's Canvas and Controls components, allowing interactive exploration of the component's properties.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Visibility/Visibility.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={VisibilityStories.Hidden} />\n<Controls of={VisibilityStories.Hidden} />\n```\n\n----------------------------------------\n\nTITLE: Render Justify Alignment Story with Canvas\nDESCRIPTION: Renders the 'Justify' story from TextAlignmentStories using the Storybook Canvas component. This displays the visual representation of the justified text.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/TextAlignment/TextAlignment.mdx#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Canvas of={TextAlignmentStories.Justify} />\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Component Dependencies\nDESCRIPTION: CSS import statements showing the required dependencies and the tooltip component import.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Tooltip/Tooltip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/tooltip';\n```\n\n----------------------------------------\n\nTITLE: Source Code Link Creation with JavaScript\nDESCRIPTION: Utility function for generating source code links in documentation using Storybook metadata and helpers\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Sizing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateSourceCodeLink({ link: 'core/tokens/base_tokens.css' }).outerHTML\n```\n\n----------------------------------------\n\nTITLE: Render Left Alignment Story with Canvas\nDESCRIPTION: Renders the 'Left' story from TextAlignmentStories using the Storybook Canvas component. This displays the visual representation of the left-aligned text.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/TextAlignment/TextAlignment.mdx#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Canvas of={TextAlignmentStories.Left} />\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Source Code Links\nDESCRIPTION: Generates a source code link using the createSourceCodeLink function, embedding HTML directly into the component. This allows viewers to access the source code for the related CSS utility directly in Storybook.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/ItemWidth/ItemWidth.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div\n  dangerouslySetInnerHTML={{\n    __html: createSourceCodeLink({ link: 'core/utilities.css' }).outerHTML,\n  }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript - Creating Alert Component\nDESCRIPTION: This JavaScript code demonstrates how to create an alert component using the `createAlert` function. It uses `dangerouslySetInnerHTML` to insert the HTML of the created alert, setting title and description.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/TextPair/TextPair.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<div\n  dangerouslySetInnerHTML={{ title: 'Important!', description: 'These patterns represent how to customize the style of the Text Pair for your project.', outerHTML: createAlert({}).outerHTML, }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Importing Phosphor Icons (CSS)\nDESCRIPTION: This CSS snippet imports the base Optics styles and the Phosphor Icons addon font. The Phosphor Icons are imported for use as an additional icon library.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics';\n@import '@rolemodel/optics/dist/css/addons/fonts/phosphor_icons';\n```\n\n----------------------------------------\n\nTITLE: Displaying Visible Story\nDESCRIPTION: This snippet renders the Visible story using Storybook's Canvas component, demonstrating a basic visible text element.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Visibility/Visibility.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={VisibilityStories.Visible} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Design Token Documentation Block for Input Focus\nDESCRIPTION: This JSX code renders a DesignTokenDocBlock component to display available Input Focus tokens and their definitions in a card view.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Input/InputFocus.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DesignTokenDocBlock categoryName=\"Input Focus\" viewType=\"card\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Meta for Item Width Stories\nDESCRIPTION: This snippet renders the Meta component to introduce the collection of item width stories. It serves as the header for the Storybook display, linking to the imported ItemWidthStories.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/ItemWidth/ItemWidth.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={ItemWidthStories} />\n```\n\n----------------------------------------\n\nTITLE: Installing Optics via NPM\nDESCRIPTION: Command to install the Optics design system using NPM package manager.\nSOURCE: https://github.com/rolemodel/optics/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @rolemodel/optics\n```\n\n----------------------------------------\n\nTITLE: Displaying Hidden Story\nDESCRIPTION: This snippet renders the Hidden story again, using Storybook's Canvas component, showcasing the effect of the '.sr-only' class.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Visibility/Visibility.mdx#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={VisibilityStories.Hidden} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Metadata for Storybook - JSX\nDESCRIPTION: This code snippet sets the title metadata for the Storybook entries, specifically for the Encoded Image category. It uses the Meta component to ensure proper organization and accessibility.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/EncodedImage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Tokens/Encoded Image\" />\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: Configures the Storybook Meta component to define the title of the documentation page. This determines how the documentation is categorized and displayed within the Storybook interface.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Breakpoint.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Meta title=\"Tokens/Breakpoint\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding a Custom Source Code Link in React\nDESCRIPTION: Illustrates embedding a custom source code link using dangerouslySetInnerHTML to inject HTML content. It uses a helper function to generate the HTML string. Be cautious with using dangerouslySetInnerHTML to avoid cross-site scripting vulnerabilities.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Margin/Margin.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div\ndangerouslySetInnerHTML={{\n  __html: createSourceCodeLink({ link: 'core/utilities.css' }).outerHTML,\n}}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Using Duotone Phosphor Icons (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to use the duotone variation of Phosphor Icons. It uses the `<i>` tag and replaces `.ph` with `.ph-duotone` for the duotone effect.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Icon/Icon.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"icon ph-duotone ph-smiley\"></i>\n```\n\n----------------------------------------\n\nTITLE: Creating a source code link\nDESCRIPTION: This snippet creates a source code link using the createSourceCodeLink helper function and injects it into the document using dangerouslySetInnerHTML. It links to the core/utilities.css file.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Visibility/Visibility.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div\n  dangerouslySetInnerHTML={{\n    __html: createSourceCodeLink({ link: 'core/utilities.css' }).outerHTML,\n  }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Embedding Encoded Image as SVG - JSX\nDESCRIPTION: This snippet renders an SVG encoded image directly into the markup using 'dangerouslySetInnerHTML'. It fetches the HTML from a helper function that creates a source code link, enhancing element visuals in Storybook.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/EncodedImage.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div\\n  dangerouslySetInnerHTML={{\\n    __html: createSourceCodeLink({ link: 'core/tokens/base_tokens.css' }).outerHTML,\\n  }}\\n></div>\n```\n\n----------------------------------------\n\nTITLE: Render Left Alignment Controls\nDESCRIPTION: Renders the controls for the 'Left' story using the Storybook Controls component.  This provides an interface for manipulating the properties of the rendered story.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/TextAlignment/TextAlignment.mdx#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Controls of={TextAlignmentStories.Left} />\n```\n\n----------------------------------------\n\nTITLE: Creating New Confirm Dialog Variations Template\nDESCRIPTION: Template for creating new confirm dialog variations using BEM methodology with modifiers.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/ConfirmDialog/ConfirmDialog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.confirm-dialog-wrapper--{name} {\n  .confirm-dialog-wrapper__backdrop {\n  }\n\n  &.confirm-dialog-wrapper--active {\n    .confirm-dialog-wrapper__backdrop {\n    }\n  }\n}\n\n.confirm-dialog--{name} {\n  .confirm-dialog__header,\n  .confirm-dialog__body,\n  .confirm-dialog__footer {\n    padding:\n  }\n\n  .confirm-dialog__header {\n    font-size:\n    font-weight:\n  }\n\n  .confirm-dialog__body {\n    box-shadow:\n  }\n\n  .confirm-dialog__footer {\n    display:\n    justify-content:\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for Input Focus Token Documentation\nDESCRIPTION: This code snippet imports necessary components from Storybook and a custom design token documentation block for displaying token information.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Input/InputFocus.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/blocks'\nimport { DesignTokenDocBlock } from 'storybook-design-token'\n```\n\n----------------------------------------\n\nTITLE: Meta definition for Storybook\nDESCRIPTION: Defines the title for the Storybook documentation page. This specifies the location of the page within the Storybook structure.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Spacing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/blocks'\n\n<Meta title=\"Tokens/Spacing\" />\n```\n\n----------------------------------------\n\nTITLE: Meta definition for TextAlignmentStories\nDESCRIPTION: Defines the Meta component for the TextAlignmentStories. This tells Storybook which stories to associate with the documentation page, grouping related stories together.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/TextAlignment/TextAlignment.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={TextAlignmentStories} />\n```\n\n----------------------------------------\n\nTITLE: Canvas for Align Self Center - HTML\nDESCRIPTION: Illustrates the use of the `.self-center` class to center a specific flex item within its parent along the cross axis, showcasing individual item alignment.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.AlignSelfCenter} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Meta Component with Storybook\nDESCRIPTION: This snippet demonstrates how to render the Meta component from Storybook, passing in MarginStories. The Meta component sets up Storybook's metadata for the Margin utility classes.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Margin/Margin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={MarginStories} />\n```\n\n----------------------------------------\n\nTITLE: Design Token Doc Block\nDESCRIPTION: Embeds a DesignTokenDocBlock component to display available spacing tokens and their definitions. This component allows users to view the tokens in a card view and specifies the 'Space Scale' category.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Spacing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<DesignTokenDocBlock categoryName=\"Space Scale\" viewType=\"card\" />\n```\n\n----------------------------------------\n\nTITLE: Import Source Code Link helper\nDESCRIPTION: Imports a helper function 'createSourceCodeLink' from '../../helpers/sourceCodeLink.js'. This function is used to generate a link to the source code of a specific file.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/TextAlignment/TextAlignment.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createSourceCodeLink } from '../../helpers/sourceCodeLink.js'\n```\n\n----------------------------------------\n\nTITLE: Storybook Playground Setup\nDESCRIPTION: This section creates a playground in Storybook to display the default container layout. It uses the `Canvas` component to showcase a specific story from the imported container stories collection.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Container/Container.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={ContainerStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Metadata Component\nDESCRIPTION: Imports the Meta component from Storybook's documentation addon to configure documentation page metadata\nSOURCE: https://github.com/rolemodel/optics/blob/main/tools/templates/overview/??name??(pascalCase).mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs'\n```\n\n----------------------------------------\n\nTITLE: Canvas for Align Self Baseline - HTML\nDESCRIPTION: Demonstrates the `.self-baseline` class to align a flex item at the baseline of its container, allowing for precise text alignment control.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.AlignSelfBaseline} />\n```\n\n----------------------------------------\n\nTITLE: Importing Meta from Storybook in JavaScript\nDESCRIPTION: This snippet imports the Meta component from Storybook to configure the title for the story. It is essential for establishing the context in the Storybook UI for the component being developed.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/BaseReset.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/blocks'\n\n<Meta title=\"Overview/Base Reset\" />\n```\n\n----------------------------------------\n\nTITLE: Selective CSS Imports for Component\nDESCRIPTION: Demonstrates the required CSS imports for a component, including core dependencies and specific component styles\nSOURCE: https://github.com/rolemodel/optics/blob/main/tools/templates/component/??name??(pascalCase).mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/??name??(lowerCase)';\n```\n\n----------------------------------------\n\nTITLE: Canvas for Justify Content Between - HTML\nDESCRIPTION: Shows how the `.justify-between` class distributes flex items evenly along the main axis with space in between, effectively managing layout spacing.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.JustifyBetween} />\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Utility Functions\nDESCRIPTION: Imports essential components from Storybook for creating stories, including Meta, Story, Canvas, and Controls, alongside the utility functions from local files and helpers. This is necessary for setting up the interactive development environment for utility classes.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/ItemWidth/ItemWidth.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Canvas, Controls } from '@storybook/blocks'\nimport * as ItemWidthStories from './ItemWidth.stories'\nimport { createSourceCodeLink } from '../../helpers/sourceCodeLink.js'\n```\n\n----------------------------------------\n\nTITLE: JavaScript - Creating Source Code Link\nDESCRIPTION: This JavaScript code demonstrates how to create a source code link using the `createSourceCodeLink` function. It leverages the `dangerouslySetInnerHTML` property to inject the generated HTML link into the DOM.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/TextPair/TextPair.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<div\n  dangerouslySetInnerHTML={{ __html: createSourceCodeLink({ link: 'components/text_pair.css' }).outerHTML, }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Canvas for Align Self Auto - HTML\nDESCRIPTION: Shows the use of the `.self-auto` class, which allows a specific flex item to inherit alignment from its parent container, serving as a demonstration of self-alignment.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/Flex/Flex.mdx#2025-04-21_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<Canvas of={FlexStories.AlignSelfAuto} />\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Blocks\nDESCRIPTION: Imports Storybook metadata and design token documentation block for rendering typography token documentation\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Typography/FontWeight.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/blocks'\nimport { DesignTokenDocBlock } from 'storybook-design-token'\n```\n\n----------------------------------------\n\nTITLE: Customizing Confirm Dialog CSS Variables\nDESCRIPTION: CSS variable available for customizing the confirm dialog component.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/ConfirmDialog/ConfirmDialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--_op-confirm-dialog-width\n```\n\n----------------------------------------\n\nTITLE: Importing Metadata in JavaScript\nDESCRIPTION: This snippet imports metadata from the package.json file and the Storybook blocks library. It's used to display version information and set up the Storybook documentation.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Overview/Introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/blocks'\nimport packageData from '../../../package.json'\n```\n\n----------------------------------------\n\nTITLE: Multiple Font Token Configuration\nDESCRIPTION: Setting up multiple font tokens for different use cases within an application\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Typography/FontFamily.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import 'https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz,slnt,wdth,wght,GRAD,XOPQ,XTRA,YOPQ,YTAS,YTDE,YTFI,YTLC,YTUC@8..144,-10..0,25..151,100..1000,-200..150,27..175,323..603,25..135,649..854,-305..-98,560..788,416..570,528..760&family=Tilt+Neon:XROT,YROT@-45..45,-45..45&display=swap';\n\n:root {\n  --op-font-family: 'Tilt Neon', sans-serif;\n  --op-font-family-alt: 'Roboto Flex', serif;\n  --ya-font-family-body: 'Roboto Flex', serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Import Statements\nDESCRIPTION: Imports necessary modules from '@storybook/blocks', a helper function 'createSourceCodeLink', and a 'DesignTokenDocBlock' component. These imports enable the creation of a documentation page with interactive elements and source code links within the Storybook environment.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Breakpoint.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/blocks'\nimport { createSourceCodeLink } from '../helpers/sourceCodeLink.js'\nimport { DesignTokenDocBlock } from 'storybook-design-token'\n```\n\n----------------------------------------\n\nTITLE: Create Source Code Link\nDESCRIPTION: Creates a link to the source code of the base tokens CSS file.  The dangerouslySetInnerHTML is used to render the HTML returned by the createSourceCodeLink function which is used to create an anchor tag.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Breakpoint.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<div\n  dangerouslySetInnerHTML={{ __html: createSourceCodeLink({ link: 'core/tokens/base_tokens.css' }).outerHTML, }}\n></div>\n```\n\n----------------------------------------\n\nTITLE: Import Storybook components\nDESCRIPTION: Imports necessary components from the '@storybook/blocks' package. These components are used for creating the Storybook documentation, including Meta, Story, Canvas, and Controls.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/TextAlignment/TextAlignment.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Story, Canvas, Controls } from '@storybook/blocks'\n```\n\n----------------------------------------\n\nTITLE: Render Right Alignment Story with Canvas\nDESCRIPTION: Renders the 'Right' story from TextAlignmentStories using the Storybook Canvas component. This displays the visual representation of the right-aligned text.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Utilities/TextAlignment/TextAlignment.mdx#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Canvas of={TextAlignmentStories.Right} />\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Component and Dependencies with CSS\nDESCRIPTION: Shows the CSS import statements needed to use the Accordion component and its dependencies in a project.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Components/Accordion/Accordion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Depends on */\n@import '@rolemodel/optics/dist/css/core/fonts';\n@import '@rolemodel/optics/dist/css/core/tokens';\n@import '@rolemodel/optics/dist/css/core/base';\n@import '@rolemodel/optics/dist/css/components/icon';\n\n/* Component */\n@import '@rolemodel/optics/dist/css/components/accordion';\n```\n\n----------------------------------------\n\nTITLE: Component Imports in JSX\nDESCRIPTION: Imports required components from Storybook blocks and local files for documentation rendering.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Animation/Animation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Canvas, Controls } from '@storybook/blocks'\nimport * as AnimationStories from './Animation.stories'\nimport { createSourceCodeLink } from '../../helpers/sourceCodeLink.js'\nimport { DesignTokenDocBlock } from 'storybook-design-token'\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Information for Input Focus Tokens\nDESCRIPTION: This code sets the title for the Storybook documentation page for Input Focus tokens.\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Input/InputFocus.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Tokens/Input/Input Focus\" />\n```\n\n----------------------------------------\n\nTITLE: Using Animation Tokens in CSS\nDESCRIPTION: Demonstrates how to apply animation and transition tokens using CSS custom properties (variables).\nSOURCE: https://github.com/rolemodel/optics/blob/main/src/stories/Tokens/Animation/Animation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntransition: var(--op-transition-input);\n/* or */\nanimation: var(--op-animation-flash);\n```"
  }
]