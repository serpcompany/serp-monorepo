[
  {
    "owner": "nestjs",
    "repo": "docs.nestjs.com",
    "content": "TITLE: Installing NestJS CLI and Creating a New Project\nDESCRIPTION: Commands to install the NestJS CLI globally and create a new project. The CLI will generate the project structure with necessary boilerplate files.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/first-steps.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -g @nestjs/cli\n$ nest new project-name\n```\n\n----------------------------------------\n\nTITLE: Importing Feature Module in Root Module\nDESCRIPTION: Shows how to import a feature module into the root AppModule of a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CatsModule } from './cats/cats.module';\n\n@Module({\n  imports: [CatsModule],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic NestJS Controller with TypeScript\nDESCRIPTION: Demonstrates how to create a basic controller using the @Controller decorator with a route prefix. Shows implementation of a GET endpoint that returns all cats.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@nestjs/common';\n\n@Controller('cats')\nexport class CatsController {\n  @Get()\n  findAll(): string {\n    return 'This action returns all cats';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Route Decorator in NestJS\nDESCRIPTION: Shows how to create a custom decorator using SetMetadata to mark routes as public when using global authentication. This decorator allows certain endpoints to bypass authentication checks.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SetMetadata } from '@nestjs/common';\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger CLI Plugin with Options in nest-cli.json\nDESCRIPTION: Advanced configuration for the Swagger CLI plugin with custom options. This allows fine-tuning of the plugin's behavior.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"collection\": \"@nestjs/schematics\",\n  \"sourceRoot\": \"src\",\n  \"compilerOptions\": {\n    \"plugins\": [\n      {\n        \"name\": \"@nestjs/swagger\",\n        \"options\": {\n          \"classValidatorShim\": false,\n          \"introspectComments\": true,\n          \"skipAutoHttpCode\": true\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Authentication Service in NestJS\nDESCRIPTION: AuthService implementation with user validation and JWT token generation functionality. Includes methods for user validation and login token creation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService\n  ) {}\n\n  async validateUser(username: string, pass: string): Promise<any> {\n    const user = await this.usersService.findOne(username);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(user: any) {\n    const payload = { username: user.username, sub: user.userId };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS with Nest CLI\nDESCRIPTION: Commands to install the Nest CLI globally and scaffold a new NestJS project. This is the recommended approach for first-time users to create a conventional project structure.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -g @nestjs/cli\n$ nest new project-name\n```\n\n----------------------------------------\n\nTITLE: Protected Routes Controller Implementation\nDESCRIPTION: Authentication controller implementing protected and public routes using JWT guard.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Request,\n  UseGuards\n} from '@nestjs/common';\nimport { AuthGuard } from './auth.guard';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: Record<string, any>) {\n    return this.authService.signIn(signInDto.username, signInDto.password);\n  }\n\n  @UseGuards(AuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Environment Validation Function with class-validator in NestJS\nDESCRIPTION: Implements a custom validation function using class-transformer and class-validator to validate environment variables. Includes an Environment enum and validation constraints for NODE_ENV and PORT.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { plainToInstance } from 'class-transformer';\nimport { IsEnum, IsNumber, Max, Min, validateSync } from 'class-validator';\n\nenum Environment {\n  Development = \"development\",\n  Production = \"production\",\n  Test = \"test\",\n  Provision = \"provision\",\n}\n\nclass EnvironmentVariables {\n  @IsEnum(Environment)\n  NODE_ENV: Environment;\n\n  @IsNumber()\n  @Min(0)\n  @Max(65535)\n  PORT: number;\n}\n\nexport function validate(config: Record<string, unknown>) {\n  const validatedConfig = plainToInstance(\n    EnvironmentVariables,\n    config,\n    { enableImplicitConversion: true },\n  );\n  const errors = validateSync(validatedConfig, { skipMissingProperties: false });\n\n  if (errors.length > 0) {\n    throw new Error(errors.toString());\n  }\n  return validatedConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Provider Service in TypeScript (NestJS)\nDESCRIPTION: This snippet demonstrates how to create a basic provider service using the @Injectable() decorator in NestJS. It defines a CatsService class with a private array of cats and a method to retrieve all cats.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  findAll(): Cat[] {\n    return this.cats;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CatsController with Dependency Injection in NestJS\nDESCRIPTION: Illustrates how to use the CatsService in a CatsController. The service is injected through the constructor, demonstrating dependency injection in action.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/components.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Post, Body } from '@nestjs/common';\nimport { CreateCatDto } from './dto/create-cat.dto';\nimport { CatsService } from './cats.service';\nimport { Cat } from './interfaces/cat.interface';\n\n@Controller('cats')\nexport class CatsController {\n  constructor(private catsService: CatsService) {}\n\n  @Post()\n  async create(@Body() createCatDto: CreateCatDto) {\n    this.catsService.create(createCatDto);\n  }\n\n  @Get()\n  async findAll(): Promise<Cat[]> {\n    return this.catsService.findAll();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Resource Controller in NestJS\nDESCRIPTION: Provides a complete example of a NestJS controller with methods for creating, reading, updating, and deleting resources, demonstrating the use of various decorators and DTOs.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Query, Post, Body, Put, Param, Delete } from '@nestjs/common';\nimport { CreateCatDto, UpdateCatDto, ListAllEntities } from './dto';\n\n@Controller('cats')\nexport class CatsController {\n  @Post()\n  create(@Body() createCatDto: CreateCatDto) {\n    return 'This action adds a new cat';\n  }\n\n  @Get()\n  findAll(@Query() query: ListAllEntities) {\n    return `This action returns all cats (limit: ${query.limit} items)`;\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return `This action returns a #${id} cat`;\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() updateCatDto: UpdateCatDto) {\n    return `This action updates a #${id} cat`;\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return `This action removes a #${id} cat`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ValidationPipe Globally\nDESCRIPTION: This code snippet demonstrates how to register the `ValidationPipe` globally in a NestJS application. This ensures that all endpoints are protected by the validation rules defined in DTOs or validation classes. It sets up the NestJS application and applies the ValidationPipe.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe());\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Catch-All Exception Filter in NestJS\nDESCRIPTION: Shows implementation of a platform-agnostic exception filter that catches all unhandled exceptions using HttpAdapterHost to deliver responses, regardless of the exception type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\n\n@Catch()\nexport class CatchEverythingFilter implements ExceptionFilter {\n  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n\n  catch(exception: unknown, host: ArgumentsHost): void {\n    // In certain situations `httpAdapter` might not be available in the\n    // constructor method, thus we should resolve it here.\n    const { httpAdapter } = this.httpAdapterHost;\n\n    const ctx = host.switchToHttp();\n\n    const httpStatus =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const responseBody = {\n      statusCode: httpStatus,\n      timestamp: new Date().toISOString(),\n      path: httpAdapter.getRequestUrl(ctx.getRequest()),\n    };\n\n    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RolesGuard in NestJS\nDESCRIPTION: Implementation of a guard that checks if the current user has the required roles to access a route. Uses Reflector to access route metadata and implements CanActivate interface.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Roles } from './roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.get(Roles, context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    return matchRoles(roles, user.roles);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: REST API Controller Implementation\nDESCRIPTION: Example of an auto-generated REST API controller with CRUD endpoints including create, read, update and delete operations\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/crud-generator.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DTO in NestJS Controller POST Method\nDESCRIPTION: Demonstrates how to use the CreateCatDto in a NestJS controller's POST method, utilizing the @Body() decorator to access the request payload.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\nasync create(@Body() createCatDto: CreateCatDto) {\n  return 'This action adds a new cat';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules with class-validator\nDESCRIPTION: This code snippet defines a `CreateUserDto` class with validation rules using decorators from the `class-validator` package. These decorators specify the validation rules for the `email` and `password` properties. Any request to an endpoint using this DTO will be validated against these rules.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  password: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger CLI Plugin in nest-cli.json\nDESCRIPTION: JSON configuration to enable the Swagger CLI plugin in the NestJS project. This is added to the nest-cli.json file.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"collection\": \"@nestjs/schematics\",\n  \"sourceRoot\": \"src\",\n  \"compilerOptions\": {\n    \"plugins\": [\"@nestjs/swagger\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS Config Package\nDESCRIPTION: Installation command for adding @nestjs/config package to a NestJS project using npm.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @nestjs/config\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Guard Implementation\nDESCRIPTION: Implementation of AuthGuard that validates JWT tokens in incoming requests and extracts user payload.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { Request } from 'express';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private jwtService: JwtService) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        {\n          secret: jwtConstants.secret\n        }\n      );\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Modules in NestJS\nDESCRIPTION: Shows how to re-export an imported module, making it available to other modules that import this one.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [CommonModule],\n  exports: [CommonModule],\n})\nexport class CoreModule {}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Providers with useValue in NestJS\nDESCRIPTION: This example demonstrates how to use custom providers with the useValue syntax in NestJS. It shows how to inject a mock CatsService for testing purposes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CatsService } from './cats.service';\n\nconst mockCatsService = {\n  /* mock implementation\n  ...\n  */\n};\n\n@Module({\n  imports: [CatsModule],\n  providers: [\n    {\n      provide: CatsService,\n      useValue: mockCatsService,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Environment Variables\nDESCRIPTION: Shows how to use TypeScript generics for type-safe environment variable access\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EnvironmentVariables {\n  PORT: number;\n  TIMEOUT: string;\n}\n\n// somewhere in the code\nconstructor(private configService: ConfigService<EnvironmentVariables>) {\n  const port = this.configService.get('PORT', { infer: true });\n\n  // TypeScript Error: this is invalid as the URL property is not defined in EnvironmentVariables\n  const url = this.configService.get('URL', { infer: true });\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Model into Service and Implementing CRUD Operations - TypeScript\nDESCRIPTION: Injects the Cat Mongoose model into a service using the @InjectModel decorator. Demonstrates basic create and findAll methods for creating and retrieving Cat documents. Requires @nestjs/mongoose and a registered Cat model; inputs are DTO objects and outputs are Mongoose documents.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Cat } from './schemas/cat.schema';\nimport { CreateCatDto } from './dto/create-cat.dto';\n\n@Injectable()\nexport class CatsService {\n  constructor(@InjectModel(Cat.name) private catModel: Model<Cat>) {}\n\n  async create(createCatDto: CreateCatDto): Promise<Cat> {\n    const createdCat = new this.catModel(createCatDto);\n    return createdCat.save();\n  }\n\n  async findAll(): Promise<Cat[]> {\n    return this.catModel.find().exec();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Service Implementation\nDESCRIPTION: Implementation of AuthService class that handles user authentication and JWT token generation using @nestjs/jwt.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService\n  ) {}\n\n  async signIn(\n    username: string,\n    pass: string,\n  ): Promise<{ access_token: string }> {\n    const user = await this.usersService.findOne(username);\n    if (user?.password !== pass) {\n      throw new UnauthorizedException();\n    }\n    const payload = { sub: user.userId, username: user.username };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Strategy for Passport Authentication in NestJS\nDESCRIPTION: This code defines a LocalStrategy class that extends PassportStrategy to implement local authentication. It uses the AuthService to validate user credentials and throws an UnauthorizedException if the user is not found.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise<any> {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Auth Module Configuration\nDESCRIPTION: NestJS module configuration for JWT authentication including global JWT module registration with expiration settings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from './auth.controller';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequelize Transactions in NestJS Service\nDESCRIPTION: Shows how to inject the Sequelize instance into a service and use it to create a managed transaction. This pattern ensures database operations are performed atomically and can be rolled back if an error occurs.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class UsersService {\n  constructor(private sequelize: Sequelize) {}\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nasync createMany() {\n  try {\n    await this.sequelize.transaction(async t => {\n      const transactionHost = { transaction: t };\n\n      await this.userModel.create(\n          { firstName: 'Abraham', lastName: 'Lincoln' },\n          transactionHost,\n      );\n      await this.userModel.create(\n          { firstName: 'John', lastName: 'Boothe' },\n          transactionHost,\n      );\n    });\n  } catch (err) {\n    // Transaction has been rolled back\n    // err is whatever rejected the promise chain returned to the transaction callback\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Injection in NestJS\nDESCRIPTION: This snippet demonstrates dependency injection in NestJS, showing how to inject the UsersService from the imported UsersModule into the AuthService. The constructor injection pattern is used to make the UsersService available within the AuthService.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n  /*\n    Implementation that makes use of this.usersService\n  */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity for TypeORM in NestJS\nDESCRIPTION: TypeScript code defining a User entity with TypeORM decorators for use in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ default: true })\n  isActive: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Mongoose Database Connections in NestJS\nDESCRIPTION: Shows how to configure multiple database connections in the root application module using MongooseModule.forRoot. Each connection is given a unique name, which is mandatory when using multiple connections.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot('mongodb://localhost/test', {\n      connectionName: 'cats',\n    }),\n    MongooseModule.forRoot('mongodb://localhost/users', {\n      connectionName: 'users',\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining a Required-Fields DTO for Create Operations in NestJS (TypeScript)\nDESCRIPTION: This code defines a DTO (Data Transfer Object) class with required fields for use in create operations. Each property (name, age, breed) is mandatory, and strict typing assists in validation and input enforcement by pipes like ValidationPipe. No additional dependencies beyond basic TypeScript/NestJS class conventions are required.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CreateCatDto {\n  name: string;\n  age: number;\n  breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto Mocking in NestJS Unit Tests using TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up auto mocking in a NestJS unit test. It uses the `useMocker()` method to create a mock factory for dependencies, including a specific mock for CatsService and a generic mock for other dependencies using jest-mock.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nimport { ModuleMocker, MockFunctionMetadata } from 'jest-mock';\n\nconst moduleMocker = new ModuleMocker(global);\n\ndescribe('CatsController', () => {\n  let controller: CatsController;\n\n  beforeEach(async () => {\n    const moduleRef = await Test.createTestingModule({\n      controllers: [CatsController],\n    })\n      .useMocker((token) => {\n        const results = ['test1', 'test2'];\n        if (token === CatsService) {\n          return { findAll: jest.fn().mockResolvedValue(results) };\n        }\n        if (typeof token === 'function') {\n          const mockMetadata = moduleMocker.getMetadata(\n            token,\n          ) as MockFunctionMetadata<any, any>;\n          const Mock = moduleMocker.generateFromMetadata(mockMetadata);\n          return new Mock();\n        }\n      })\n      .compile();\n\n    controller = moduleRef.get(CatsController);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a RolesGuard (JavaScript)\nDESCRIPTION: This code implements a `RolesGuard`. It retrieves the required roles from the route's metadata using the `Reflector` class and checks if the user's roles include any of the required roles. It assumes that `request.user` contains the user's role information.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Dependencies } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\n@Dependencies(Reflector)\nexport class RolesGuard {\n  constructor(reflector) {\n    this.reflector = reflector;\n  }\n\n  canActivate(context) {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles.includes(role));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cat Interface in NestJS\nDESCRIPTION: Shows the structure of the Cat interface used in the CatsService. This interface defines the properties of a cat object.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/components.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Cat {\n  name: string;\n  age: number;\n  breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Parameterized User Decorator in NestJS\nDESCRIPTION: Demonstrates how to create a more flexible User decorator that can extract specific properties from the user object by passing a parameter.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const User = createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user = request.user;\n\n    return data ? user?.[data] : user;\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Public Decorator in NestJS\nDESCRIPTION: This code creates a custom decorator named 'Public' using SetMetadata. It's used to mark routes as public, allowing them to bypass authentication.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SetMetadata } from '@nestjs/common';\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Adapter in NestJS Application\nDESCRIPTION: This code snippet shows how to set up and use the RedisIoAdapter in a NestJS application's main file.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\nconst redisIoAdapter = new RedisIoAdapter(app);\nawait redisIoAdapter.connectToRedis();\n\napp.useWebSocketAdapter(redisIoAdapter);\n```\n\n----------------------------------------\n\nTITLE: Implementing PoliciesGuard for Policy Enforcement - NestJS - TypeScript\nDESCRIPTION: Defines a guard, PoliciesGuard, that retrieves policy handlers from route metadata, creates a user ability with CaslAbilityFactory, and checks all policies before route activation. Relies on Reflector and CaslAbilityFactory as dependencies, expecting the request object to hold the user. The guard supports both function and object handlers, calling every handler with the active user's ability and granting access only if all checks return true.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const policyHandlers =\n      this.reflector.get<PolicyHandler[]>(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.caslAbilityFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: E2E Testing with Fastify Adapter in NestJS\nDESCRIPTION: Shows the configuration and implementation of e2e tests when using Fastify as the HTTP adapter. Demonstrates Fastify's built-in testing capabilities.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet app: NestFastifyApplication;\n\nbeforeAll(async () => {\n  app = moduleRef.createNestApplication<NestFastifyApplication>(\n    new FastifyAdapter(),\n  );\n\n  await app.init();\n  await app.getHttpAdapter().getInstance().ready();\n});\n\nit(`/GET cats`, () => {\n  return app\n    .inject({\n      method: 'GET',\n      url: '/cats',\n    })\n    .then((result) => {\n      expect(result.statusCode).toEqual(200);\n      expect(result.payload).toEqual(/* expectedPayload */);\n    });\n});\n\nafterAll(async () => {\n  await app.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Author Object Type with Code First Approach in TypeScript\nDESCRIPTION: Implementation of the Author model using TypeScript classes with @ObjectType and @Field decorators from @nestjs/graphql. This demonstrates how to create GraphQL object types using the code first approach.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Post } from './post';\n\n@ObjectType()\nexport class Author {\n  @Field(type => Int)\n  id: number;\n\n  @Field({ nullable: true })\n  firstName?: string;\n\n  @Field({ nullable: true })\n  lastName?: string;\n\n  @Field(type => [Post])\n  posts: Post[];\n}\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Application in Production with NODE_ENV\nDESCRIPTION: Command to run a NestJS application in production, setting the NODE_ENV environment variable to 'production' for optimal performance and behavior.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ NODE_ENV=production node dist/main.js\n```\n\n----------------------------------------\n\nTITLE: Installing ServeStaticModule Package in NestJS\nDESCRIPTION: Command to install the @nestjs/serve-static package using npm package manager.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/serve-static.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/serve-static\n```\n\n----------------------------------------\n\nTITLE: Controller Method Using ClassSerializerInterceptor\nDESCRIPTION: Shows how to use the ClassSerializerInterceptor in a controller method to automatically apply serialization rules when returning a UserEntity instance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/serialization.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@UseInterceptors(ClassSerializerInterceptor)\n@Get()\nfindOne(): UserEntity {\n  return new UserEntity({\n    id: 1,\n    firstName: 'John',\n    lastName: 'Doe',\n    password: 'password',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Providers in a NestJS Module\nDESCRIPTION: This snippet illustrates how to register providers and controllers in a NestJS module using the @Module decorator. It sets up the AppModule with CatsController and CatsService.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats/cats.controller';\nimport { CatsService } from './cats/cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating an Optional-Fields DTO with PartialType Utility in NestJS (TypeScript)\nDESCRIPTION: This demonstrates extending a base DTO class using the PartialType utility from @nestjs/mapped-types, automatically making all properties in the input class optional in the derived type. Ideal for update operations, this approach eliminates manual repetition and keeps DTOs DRY. Ensure @nestjs/mapped-types is installed and imported.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UpdateCatDto extends PartialType(CreateCatDto) {}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Models with @ApiProperty and Using @ApiCreatedResponse with type in NestJS\nDESCRIPTION: This snippet defines a data transfer object (DTO) class for a 'Cat' with properties annotated by @ApiProperty for Swagger, and shows how to specify this model as the response type in @ApiCreatedResponse. This enhances API documentation by showing the structure of responses.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Cat {\n  @ApiProperty()\n  id: number;\n\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty()\n  age: number;\n\n  @ApiProperty()\n  breed: string;\n}\n\n@ApiTags('cats')\n@Controller('cats')\nexport class CatsController {\n  @Post()\n  @ApiCreatedResponse({\n    description: 'The record has been successfully created.',\n    type: Cat,\n  })\n  async create(@Body() createCatDto: CreateCatDto): Promise<Cat> {\n    return this.catsService.create(createCatDto);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis-based Socket.IO Adapter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a RedisIoAdapter class that extends the IoAdapter to enable Redis-based Socket.IO functionality in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IoAdapter } from '@nestjs/platform-socket.io';\nimport { ServerOptions } from 'socket.io';\nimport { createAdapter } from '@socket.io/redis-adapter';\nimport { createClient } from 'redis';\n\nexport class RedisIoAdapter extends IoAdapter {\n  private adapterConstructor: ReturnType<typeof createAdapter>;\n\n  async connectToRedis(): Promise<void> {\n    const pubClient = createClient({ url: `redis://localhost:6379` });\n    const subClient = pubClient.duplicate();\n\n    await Promise.all([pubClient.connect(), subClient.connect()]);\n\n    this.adapterConstructor = createAdapter(pubClient, subClient);\n  }\n\n  createIOServer(port: number, options?: ServerOptions): any {\n    const server = super.createIOServer(port, options);\n    server.adapter(this.adapterConstructor);\n    return server;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REQUEST Scope for a Controller in NestJS\nDESCRIPTION: Shows how to set the scope of a controller to REQUEST using the ControllerOptions object. A request-scoped controller will create a new instance for each incoming request.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller({\n  path: 'cats',\n  scope: Scope.REQUEST,\n})\nexport class CatsController {}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Custom Decorator for Reusable Paginated Responses in NestJS\nDESCRIPTION: This snippet shows building a custom decorator 'ApiPaginatedResponse' that combines @ApiExtraModels and @ApiOkResponse with a schema referencing the paginated DTO and a specific model, making it easier to reuse in controllers with proper schema and type info, including customizable response titles.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ApiPaginatedResponse = <TModel extends Type<any>>(model: TModel) => {\n  return applyDecorators(\n    ApiExtraModels(PaginatedDto, model),\n    ApiOkResponse({\n      schema: {\n        allOf: [\n          { $ref: getSchemaPath(PaginatedDto) },\n          {\n            properties: {\n              results: {\n                type: 'array',\n                items: { $ref: getSchemaPath(model) },\n              },\n            },\n          },\n        ],\n        title: `PaginatedResponseOf${model.name}`\n      },\n    })\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Global ValidationPipe Transformation in NestJS (TypeScript)\nDESCRIPTION: This code enables automatic global transformation of incoming payloads to DTO instances using ValidationPipe at the application level. By passing the transform:true option to app.useGlobalPipes, all incoming request bodies and parameters will be type-cast according to DTO definitions. Requires configuration in the main application bootstrap file and installation of @nestjs/common.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napp.useGlobalPipes(\n  new ValidationPipe({\n    transform: true,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Decrypting Text using AES-256-CTR in Node.js\nDESCRIPTION: This snippet shows how to decrypt text that was encrypted using the AES-256-CTR algorithm. It uses the same key and initialization vector used for encryption.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/encryption-hashing.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDecipheriv } from 'crypto';\n\nconst decipher = createDecipheriv('aes-256-ctr', key, iv);\nconst decryptedText = Buffer.concat([\n  decipher.update(encryptedText),\n  decipher.final(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Model Relations with Sequelize Decorators\nDESCRIPTION: Using the @HasMany decorator to establish a one-to-many relationship between User and Photo models in Sequelize.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Column, Model, Table, HasMany } from 'sequelize-typescript';\nimport { Photo } from '../photos/photo.model';\n\n@Table\nexport class User extends Model {\n  @Column\n  firstName: string;\n\n  @Column\n  lastName: string;\n\n  @Column({ defaultValue: true })\n  isActive: boolean;\n\n  @HasMany(() => Photo)\n  photos: Photo[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Module in NestJS\nDESCRIPTION: Demonstrates how to create a feature module (CatsModule) that groups related components like controllers and services. Shows the basic structure of a NestJS module using the @Module decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n```\n\n----------------------------------------\n\nTITLE: Hashing a Password with bcrypt in NestJS\nDESCRIPTION: This snippet demonstrates how to hash a password using the bcrypt package in a NestJS application. It uses the hash function with a specified number of salt rounds.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/encryption-hashing.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as bcrypt from 'bcrypt';\n\nconst saltOrRounds = 10;\nconst password = 'random_password';\nconst hash = await bcrypt.hash(password, saltOrRounds);\n```\n\n----------------------------------------\n\nTITLE: Using ParseFilePipeBuilder for File Validation in NestJS\nDESCRIPTION: Demonstrates the use of ParseFilePipeBuilder to compose and construct file validators in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@UploadedFile(\n  new ParseFilePipeBuilder()\n    .addFileTypeValidator({\n      fileType: 'jpeg',\n    })\n    .addMaxSizeValidator({\n      maxSize: 1000\n    })\n    .build({\n      errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY\n    }),\n)\nfile: Express.Multer.File,\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Guards in NestJS\nDESCRIPTION: Demonstration of registering global guards at application bootstrap and through module providers for dependency injection support.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\napp.useGlobalGuards(new RolesGuard());\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Exporting Providers from Shared Module\nDESCRIPTION: Demonstrates how to make a module shareable by exporting its providers, allowing other modules to access the same instance of services.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n  exports: [CatsService]\n})\nexport class CatsModule {}\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Caching for Controller in NestJS\nDESCRIPTION: Shows how to use the CacheInterceptor to enable auto-caching for a controller's responses.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller()\n@UseInterceptors(CacheInterceptor)\nexport class AppController {\n  @Get()\n  findAll(): string[] {\n    return [];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Authentication with subscriptions-transport-ws in NestJS\nDESCRIPTION: Demonstrates how to implement authentication for WebSocket connections using the onConnect callback with the subscriptions-transport-ws package.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  subscriptions: {\n    'subscriptions-transport-ws': {\n      onConnect: (connectionParams) => {\n        const authToken = connectionParams.authToken;\n        if (!isValid(authToken)) {\n          throw new Error('Token is not valid');\n        }\n        // extract user information from token\n        const user = parseToken(authToken);\n        // return user info to add them to the context later\n        return { user };\n      },\n    }\n  },\n  context: ({ connection }) => {\n    // connection.context will be equal to what was returned by the \"onConnect\" callback\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Injecting DataSource for TypeORM Transactions in NestJS Service\nDESCRIPTION: Shows how to inject the TypeORM DataSource into a NestJS service for transaction management. This is the first step in setting up transaction handling using QueryRunner.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class UsersService {\n  constructor(private dataSource: DataSource) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relationship in TypeORM Entity for NestJS\nDESCRIPTION: Illustrates how to create a User entity with a one-to-many relationship to Photo entities using TypeORM decorators. The entity includes primary key generation, basic columns with defaults, and the relationship definition.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { Photo } from '../photos/photo.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @OneToMany(type => Photo, photo => photo.user)\n  photos: Photo[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules for Route Parameters\nDESCRIPTION: This code snippet defines a `FindOneParams` class with a validation rule using the `@IsNumberString` decorator from the `class-validator` package. This ensures that the `id` parameter in the route is a number.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IsNumberString } from 'class-validator';\n\nexport class FindOneParams {\n  @IsNumberString()\n  id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Swagger in NestJS Application\nDESCRIPTION: TypeScript code to initialize Swagger in a NestJS application. It sets up the Swagger document builder, creates the document, and sets up the Swagger UI endpoint.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  const config = new DocumentBuilder()\n    .setTitle('Cats example')\n    .setDescription('The cats API description')\n    .setVersion('1.0')\n    .addTag('cats')\n    .build();\n  const documentFactory = () => SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, documentFactory);\n\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Configuring MulterModule Asynchronously with Factory Function in NestJS\nDESCRIPTION: This snippet illustrates how to use registerAsync() with a factory function to set MulterModule options asynchronously. It shows both a simple example and one that injects dependencies.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nMulterModule.registerAsync({\n  useFactory: () => ({\n    dest: './upload',\n  }),\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nMulterModule.registerAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    dest: configService.get<string>('MULTER_DEST'),\n  }),\n  inject: [ConfigService],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating JwtAuthGuard for Route Protection in NestJS\nDESCRIPTION: Implements a simple JwtAuthGuard class that extends the built-in AuthGuard from @nestjs/passport, specifying 'jwt' as the strategy to use for protecting routes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n```\n\n----------------------------------------\n\nTITLE: Async Configuration of HTTP Module\nDESCRIPTION: Examples of different approaches to configure HTTP module asynchronously using factory functions and dependency injection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nHttpModule.registerAsync({\n  useFactory: () => ({\n    timeout: 5000,\n    maxRedirects: 5,\n  }),\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nHttpModule.registerAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    timeout: configService.get('HTTP_TIMEOUT'),\n    maxRedirects: configService.get('HTTP_MAX_REDIRECTS'),\n  }),\n  inject: [ConfigService],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a NestJS Standalone Application\nDESCRIPTION: Demonstrates how to initialize a NestJS standalone application using NestFactory.createApplicationContext(). This creates a wrapper around the NestJS IoC container without any network listeners.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/application-context.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  const app = await NestFactory.createApplicationContext(AppModule);\n  // your application logic here ...\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Using Guards and Pipes with GraphQL Queries in NestJS\nDESCRIPTION: Demonstrates how to apply authentication guards and parameter validation pipes to a GraphQL query handler. The example shows applying AuthGuard for authorization and ParseIntPipe for parameter validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Query('author')\n@UseGuards(AuthGuard)\nasync getAuthor(@Args('id', ParseIntPipe) id: number) {\n  return this.authorsService.findOneById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating NestJS Components\nDESCRIPTION: Command syntax for generating new components using schematics. Supports creating various components like controllers, services, modules etc. with customizable options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/usages.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nest generate <schematic> <name> [options]\n$ nest g <schematic> <name> [options]\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Job to a Bull Queue\nDESCRIPTION: Demonstrates how to add a job to a Bull queue by calling the queue's add() method and passing a serializable JavaScript object that represents the job data.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.audioQueue.add({\n  foo: 'bar',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Module in NestJS\nDESCRIPTION: Integration of SentryModule into the main application module configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from \"@nestjs/common\";\nimport { SentryModule } from \"@sentry/nestjs/setup\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\n\n@Module({\n  imports: [\n    SentryModule.forRoot(),\n    // ...other modules\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Routes with JWT Authentication in NestJS\nDESCRIPTION: Sets up controller routes including a login endpoint protected by LocalAuthGuard and a profile endpoint protected by JwtAuthGuard. The login route returns a JWT token while the profile route returns the authenticated user information.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Request, Post, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller, Dependencies, Bind, Get, Request, Post, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Dependencies(AuthService)\n@Controller()\nexport class AppController {\n  constructor(authService) {\n    this.authService = authService;\n  }\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  @Bind(Request())\n  async login(req) {\n    return this.authService.login(req.user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  @Bind(Request())\n  getProfile(req) {\n    return req.user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeORM Transactions with QueryRunner in NestJS\nDESCRIPTION: Demonstrates how to implement database transactions using TypeORM's QueryRunner in a NestJS service. This approach provides full control over transaction lifecycle with explicit commit and rollback handling.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nasync createMany(users: User[]) {\n  const queryRunner = this.dataSource.createQueryRunner();\n\n  await queryRunner.connect();\n  await queryRunner.startTransaction();\n  try {\n    await queryRunner.manager.save(users[0]);\n    await queryRunner.manager.save(users[1]);\n\n    await queryRunner.commitTransaction();\n  } catch (err) {\n    // since we have errors lets rollback the changes we made\n    await queryRunner.rollbackTransaction();\n  } finally {\n    // you need to release a queryRunner which was manually instantiated\n    await queryRunner.release();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards in NestJS Route Paths\nDESCRIPTION: Shows how to implement wildcard routes in NestJS controllers. The example demonstrates using an asterisk to match any combination of characters at the end of a path.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('abcd/*')\nfindAll() {\n  return 'This route uses a wildcard';\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Providers in Test Environment\nDESCRIPTION: Demonstrates how to override providers when creating a TestingModule for testing purposes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst moduleRef = await Test.createTestingModule({\n  imports: [AppModule],\n})\n  .overrideProvider(JwtAuthGuard)\n  .useClass(MockAuthGuard)\n  .compile();\n```\n\n----------------------------------------\n\nTITLE: Configuring CacheModule with Extra Providers in NestJS\nDESCRIPTION: This snippet shows how to pass additional providers when configuring the CacheModule asynchronously. It demonstrates adding extra providers that will be merged with the module providers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nCacheModule.registerAsync({\n  imports: [ConfigModule],\n  useClass: ConfigService,\n  extraProviders: [MyAdditionalProvider],\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Route for All HTTP Methods from Global Prefix\nDESCRIPTION: Demonstrates how to exclude a route from the global prefix for all HTTP methods using a simple string-based configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/global-prefix.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.setGlobalPrefix('v1', { exclude: ['cats'] });\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Handler\nDESCRIPTION: Command handler implementation that processes the command and updates the application state while returning the specified result type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@CommandHandler(KillDragonCommand)\nexport class KillDragonHandler implements ICommandHandler<KillDragonCommand> {\n  constructor(private repository: HeroesRepository) {}\n\n  async execute(command: KillDragonCommand) {\n    const { heroId, dragonId } = command;\n    const hero = this.repository.findOneById(+heroId);\n\n    hero.killEnemy(dragonId);\n    await this.repository.persist(hero);\n\n    return {\n      actionId: crypto.randomUUID(),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple File Uploads with @ApiProperty in NestJS\nDESCRIPTION: This snippet defines a DTO for multiple files upload, with @ApiProperty indicating an array of binary files. Use in conjunction with file upload endpoints to handle multiple files.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass FilesUploadDto {\n  @ApiProperty({ type: 'array', items: { type: 'string', format: 'binary' } })\n  files: any[];\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking MikroORM repositories using getRepositoryToken() in NestJS testing in TypeScript\nDESCRIPTION: Shows how to configure testing modules by providing mocks for repositories using the getRepositoryToken() helper to generate injection tokens corresponding to entities or custom repositories. This allows services consuming repositories to receive mocked implementations during tests.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  providers: [\n    PhotoService,\n    {\n      // or when you have a custom repository: `provide: PhotoRepository`\n      provide: getRepositoryToken(Photo),\n      useValue: mockedRepository,\n    },\n  ],\n})\nexport class PhotoModule {}\n```\n\n----------------------------------------\n\nTITLE: JSON Log Output Format Example\nDESCRIPTION: Shows the structure of JSON formatted logs when JSON logging is enabled.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"log\",\n  \"pid\": 19096,\n  \"timestamp\": 1607370779834,\n  \"message\": \"Starting Nest application...\",\n  \"context\": \"NestFactory\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cron Job with @Cron Decorator in NestJS\nDESCRIPTION: Shows how to create a cron job using the @Cron decorator in NestJS, specifying a cron pattern and a name for the job.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Cron('* * 8 * * *', {\n  name: 'notifications',\n})\ntriggerNotifications() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Entity Model\nDESCRIPTION: Definition of a Sequelize model using TypeScript decorators to represent a database table.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Column, Model } from 'sequelize-typescript';\n\n@Table\nexport class Cat extends Model {\n  @Column\n  name: string;\n\n  @Column\n  age: number;\n\n  @Column\n  breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Async Configuration with Factory Function - TypeScript\nDESCRIPTION: Demonstrates asynchronous configuration of the ThrottlerModule using a factory function. It imports the ConfigModule, injects the ConfigService, and uses it to retrieve TTL and limit values from the configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => [\n        {\n          ttl: config.get('THROTTLE_TTL'),\n          limit: config.get('THROTTLE_LIMIT'),\n        },\n      ],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM in NestJS AppModule\nDESCRIPTION: TypeScript code to import and configure TypeORM in the root AppModule of a NestJS application. It sets up the database connection and other TypeORM options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      entities: [],\n      synchronize: true,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI Options in NestJS TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure Swagger UI options in a NestJS application. It shows an example of disabling the Swagger UI while still allowing access to JSON API definitions using the SwaggerCustomOptions interface.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst options: SwaggerCustomOptions = {\n    ui: false, // Swagger UI is disabled\n    raw: ['json'], // JSON API definition is still accessible (YAML is disabled)\n};\nSwaggerModule.setup('api', app, options);\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Base Resolver in NestJS GraphQL\nDESCRIPTION: This snippet shows how to create a generic base resolver class using TypeScript generics and the @Resolver decorator with the isAbstract option.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction BaseResolver<T extends Type<unknown>>(classRef: T): any {\n  @Resolver({ isAbstract: true })\n  abstract class BaseResolverHost {\n    @Query(() => [classRef], { name: `findAll${classRef.name}` })\n    async findAll(): Promise<T[]> {\n      return [];\n    }\n  }\n  return BaseResolverHost;\n}\n```\n\n----------------------------------------\n\nTITLE: Async Configuration with useClass - TypeScript\nDESCRIPTION: Illustrates asynchronous configuration of the ThrottlerModule using the `useClass` syntax.  `ThrottlerConfigService` must implement the `ThrottlerOptionsFactory` interface.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      useClass: ThrottlerConfigService,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Playground Settings\nDESCRIPTION: Example of configuring GraphQL module with specific playground and debug settings using Apollo driver.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloDriverConfig>({\n      driver: ApolloDriver,\n      playground: false,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Transfer Object (DTO) in TypeScript\nDESCRIPTION: Creates a CreateCatDto class with three properties: name, age, and breed. This DTO is used to define the structure of data sent in POST requests.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CreateCatDto {\n  name: string;\n  age: number;\n  breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multipart Data without File Upload in NestJS\nDESCRIPTION: This snippet demonstrates how to use the NoFilesInterceptor to accept multipart/form-data without allowing file uploads. It sets multipart data as attributes on the request body and throws a BadRequestException for any file uploads.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('upload')\n@UseInterceptors(NoFilesInterceptor())\nhandleMultiPartData(@Body() body) {\n  console.log(body)\n}\n```\n\n----------------------------------------\n\nTITLE: Service-Level Logger Implementation\nDESCRIPTION: Demonstrates how to implement logging within a service class using the Logger from @nestjs/common with context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger, Injectable } from '@nestjs/common';\n\n@Injectable()\nclass MyService {\n  private readonly logger = new Logger(MyService.name);\n\n  doSomething() {\n    this.logger.log('Doing something...');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying TCP Driver in NestJS\nDESCRIPTION: Shows how to access the underlying TCP driver instance using the unwrap() method for advanced use cases.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst netServer = this.client.unwrap<Server>();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst netServer = server.unwrap<Server>();\n```\n\n----------------------------------------\n\nTITLE: Installing class-validator and class-transformer\nDESCRIPTION: This command installs the `class-validator` and `class-transformer` packages, which are required for using the `ValidationPipe` in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save class-validator class-transformer\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Roles Decorator in NestJS\nDESCRIPTION: Creates a custom Roles decorator using Reflector.createDecorator to attach role metadata to route handlers. The decorator accepts an array of role strings as input.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Reflector } from '@nestjs/core';\n\nexport const Roles = Reflector.createDecorator<string[]>();\n```\n\n----------------------------------------\n\nTITLE: Basic ConfigModule Integration\nDESCRIPTION: Basic setup of ConfigModule in the root AppModule to enable configuration management.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule.forRoot()],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Pipe in NestJS Microservice\nDESCRIPTION: Demonstrates how to bind a validation pipe to a microservice message pattern handler. Uses ValidationPipe with custom exception factory to throw RpcException for validation errors. The method accumulates an array of numbers, with proper error handling for invalid inputs.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/pipes.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new RpcException(errors) }))\n@MessagePattern({ cmd: 'sum' })\naccumulate(data: number[]): number {\n  return (data || []).reduce((a, b) => a + b);\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new RpcException(errors) }))\n@MessagePattern({ cmd: 'sum' })\naccumulate(data) {\n  return (data || []).reduce((a, b) => a + b);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Validating Array Query Parameters with ParseArrayPipe (TypeScript)\nDESCRIPTION: This controller method uses ParseArrayPipe to extract and validate comma-separated values from a query parameter (ids), converting each entry to a number. The separator option specifies comma-delimitation, and items:Number enforces a numeric array. Ensure ParseArrayPipe is imported from @nestjs/common. Useful for REST endpoints that accept array filters.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nfindByIds(\n  @Query('ids', new ParseArrayPipe({ items: Number, separator: ',' }))\n  ids: number[],\n) {\n  return 'This action returns users by ids';\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced NestJS Testing with Test Class\nDESCRIPTION: Example of using the @nestjs/testing package's Test class for more robust testing. It demonstrates creating a test module, compiling it, and retrieving instances for testing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Test } from '@nestjs/testing';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\ndescribe('CatsController', () => {\n  let catsController: CatsController;\n  let catsService: CatsService;\n\n  beforeEach(async () => {\n    const moduleRef = await Test.createTestingModule({\n        controllers: [CatsController],\n        providers: [CatsService],\n      }).compile();\n\n    catsService = moduleRef.get(CatsService);\n    catsController = moduleRef.get(CatsController);\n  });\n\n  describe('findAll', () => {\n    it('should return an array of cats', async () => {\n      const result = ['test'];\n      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);\n\n      expect(await catsController.findAll()).toBe(result);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Factory Providers with useFactory in NestJS\nDESCRIPTION: This example shows how to use the useFactory syntax to create providers dynamically. It includes an optional provider injection and demonstrates how to correlate the inject list with factory function arguments.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst connectionProvider = {\n  provide: 'CONNECTION',\n  useFactory: (optionsProvider: MyOptionsProvider, optionalProvider?: string) => {\n    const options = optionsProvider.get();\n    return new DatabaseConnection(options);\n  },\n  inject: [MyOptionsProvider, { token: 'SomeOptionalProvider', optional: true }],\n};\n\n@Module({\n  providers: [\n    connectionProvider,\n    MyOptionsProvider,\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring MongooseModule in AppModule - NestJS TypeScript\nDESCRIPTION: Imports MongooseModule into the root application module and configures the connection URI for MongoDB. Requires @nestjs/mongoose and MongoDB to be set up and running. The 'forRoot' method accepts the MongoDB connection string and optional configuration; outputs an initialized Mongoose connection for use in the app.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [MongooseModule.forRoot('mongodb://localhost/nest')],\n})\nexport class AppModule {}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing configuration values using ConfigService in NestJS\nDESCRIPTION: This snippet demonstrates how to use the ConfigService instance to retrieve configuration values by calling the get method with a configuration key.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst port = configService.get('PORT');\n```\n\n----------------------------------------\n\nTITLE: Creating a Nest.js Library with CLI\nDESCRIPTION: Command to generate a new library in a Nest.js monorepo using the CLI. This creates the library structure in the libs folder.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/libraries.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nest g library my-library\n```\n\n----------------------------------------\n\nTITLE: Implementing Service with Repository Injection\nDESCRIPTION: Service implementation showing repository injection and data access methods.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Inject } from '@nestjs/common';\nimport { CreateCatDto } from './dto/create-cat.dto';\nimport { Cat } from './cat.entity';\n\n@Injectable()\nexport class CatsService {\n  constructor(\n    @Inject('CATS_REPOSITORY')\n    private catsRepository: typeof Cat\n  ) {}\n\n  async findAll(): Promise<Cat[]> {\n    return this.catsRepository.findAll<Cat>();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Jobs to Queue\nDESCRIPTION: Example of adding a job to the queue with custom payload data\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.audioQueue.add('transcode', {\n  foo: 'bar',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Standard NestJS Package Scripts\nDESCRIPTION: Provides example script definitions for a project's `package.json` file. These scripts ('build', 'start', 'start:dev', 'start:debug') utilize the locally installed NestJS CLI commands (`nest build`, `nest start`) to standardize build and execution workflows, including features like hot-reloading (`--watch`) and debugging (`--debug`).\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/scripts.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"build\": \"nest build\",\n\"start\": \"nest start\",\n\"start:dev\": \"nest start --watch\",\n\"start:debug\": \"nest start --debug --watch\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull Module with Simple Factory Function in TypeScript\nDESCRIPTION: Uses the forRootAsync method with a factory function to asynchronously configure the Bull module with Redis connection details.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.forRootAsync({\n  useFactory: () => ({\n    redis: {\n      host: 'localhost',\n      port: 6379,\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Getter Functions for Config Service in NestJS (TypeScript)\nDESCRIPTION: Implements a custom service that wraps ConfigService with typed getter methods for retrieving configuration values in a more intuitive way.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class ApiConfigService {\n  constructor(private configService: ConfigService) {}\n\n  get isAuthEnabled(): boolean {\n    return this.configService.get('AUTH_ENABLED') === 'true';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Events in a Mutation Resolver in NestJS\nDESCRIPTION: Demonstrates how to publish events using PubSub within a mutation resolver to trigger subscriptions.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Mutation(() => Comment)\nasync addComment(\n  @Args('postId', { type: () => Int }) postId: number,\n  @Args('comment', { type: () => Comment }) comment: CommentInput,\n  @Context('pubsub') pubSub: PubSub,\n) {\n  const newComment = this.commentsService.addComment({ id: postId, comment });\n  await pubSub.publish({\n    topic: 'commentAdded',\n    payload: {\n      commentAdded: newComment\n    }\n  });\n  return newComment;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in File Validators with ParseFilePipe in NestJS\nDESCRIPTION: Example of using built-in MaxFileSizeValidator and FileTypeValidator with ParseFilePipe in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@UploadedFile(\n  new ParseFilePipe({\n    validators: [\n      new MaxFileSizeValidator({ maxSize: 1000 }),\n      new FileTypeValidator({ fileType: 'image/jpeg' }),\n    ],\n  }),\n)\nfile: Express.Multer.File,\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Module with Options\nDESCRIPTION: Example of configuring the HTTP module with custom options like timeout and maxRedirects.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    HttpModule.register({\n      timeout: 5000,\n      maxRedirects: 5,\n    }),\n  ],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n```\n\n----------------------------------------\n\nTITLE: Referencing an Array of Mongoose Subdocuments in Parent Schema\nDESCRIPTION: Illustrates how to define a parent schema (`Person`) that embeds an array of another schema (`Name`) as a property using the `@Prop` decorator with array syntax. Includes type overrides for correct TypeScript typing of the array.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n@@filename(name.schema)\n@Schema()\nexport class Person {\n  @Prop([NameSchema])\n  name: Name[];\n}\n\nexport const PersonSchema = SchemaFactory.createForClass(Person);\n\nexport type PersonDocumentOverride = {\n  name: Types.DocumentArray<Name>;\n};\n\nexport type PersonDocument = HydratedDocument<Person, PersonDocumentOverride>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Database Connection in NestJS with TypeORM\nDESCRIPTION: This snippet shows how to set up an asynchronous database connection using TypeORM in NestJS. It demonstrates the use of a factory function to provide database configuration options dynamically.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nTypeOrmModule.forRootAsync({\n  imports: [ConfigModule],\n  useFactory: (configService: ConfigService) => ({\n    type: 'mysql',\n    host: configService.get('HOST'),\n    port: +configService.get('PORT'),\n    username: configService.get('USERNAME'),\n    password: configService.get('PASSWORD'),\n    database: configService.get('DATABASE'),\n    entities: [],\n    synchronize: true,\n  }),\n  inject: [ConfigService],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic ConfigModule in NestJS\nDESCRIPTION: Implementation of a ConfigModule as a dynamic module with a static register method. This pattern allows the module to be imported with configuration options. The register method returns a DynamicModule object.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamicModule, Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({})\nexport class ConfigModule {\n  static register(): DynamicModule {\n    return {\n      module: ConfigModule,\n      providers: [ConfigService],\n      exports: [ConfigService],\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Sub-domain Routing with Host Parameters in NestJS\nDESCRIPTION: Shows how to capture dynamic values from the host using tokens and the @HostParam decorator. The example demonstrates extracting the account name from a sub-domain.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller({ host: ':account.example.com' })\nexport class AccountController {\n  @Get()\n  getInfo(@HostParam('account') account: string) {\n    return account;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ConfigService instance in NestJS main.ts\nDESCRIPTION: This snippet shows how to get an instance of the ConfigService in the main.ts file of a NestJS application using the app.get() method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst configService = app.get(ConfigService);\n```\n\n----------------------------------------\n\nTITLE: Registering gRPC Client using ClientsModule in NestJS\nDESCRIPTION: Demonstrates how to register a gRPC client package using ClientsModule.register() method with transport and proto file configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimports: [\n  ClientsModule.register([\n    {\n      name: 'HERO_PACKAGE',\n      transport: Transport.GRPC,\n      options: {\n        package: 'hero',\n        protoPath: join(__dirname, 'hero/hero.proto'),\n      },\n    },\n  ]),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a @Roles() Decorator (JavaScript)\nDESCRIPTION: This code defines a custom `@Roles()` decorator using `SetMetadata` from `@nestjs/common`. This decorator allows specifying which roles are required to access a particular route. The `ROLES_KEY` constant is used to store the metadata. This is the javascript version.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SetMetadata } from '@nestjs/common';\n\nexport const ROLES_KEY = 'roles';\nexport const Roles = (...roles) => SetMetadata(ROLES_KEY, roles);\n```\n\n----------------------------------------\n\nTITLE: Injecting ModuleRef for Request-Scoped Providers in Authentication Strategy\nDESCRIPTION: Shows how to inject the ModuleRef in a strategy's constructor to access request-scoped providers. This setup enables strategies to use request-scoped dependencies like authentication services.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private moduleRef: ModuleRef) {\n  super({\n    passReqToCallback: true,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription Handler in NestJS (Code-First Approach)\nDESCRIPTION: Demonstrates how to create a subscription handler using the @Subscription() decorator and PubSub class. This example shows a basic subscription for adding comments.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst pubSub = new PubSub();\n\n@Resolver(() => Author)\nexport class AuthorResolver {\n  // ...\n  @Subscription(() => Comment)\n  commentAdded() {\n    return pubSub.asyncIterableIterator('commentAdded');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Resolver in NestJS\nDESCRIPTION: This snippet shows how to create a resolver class in NestJS for handling GraphQL queries. It includes methods for resolving the 'author' query and the 'posts' field of the Author type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver('Author')\nexport class AuthorsResolver {\n  constructor(\n    private authorsService: AuthorsService,\n    private postsService: PostsService,\n  ) {}\n\n  @Query()\n  async author(@Args('id') id: number) {\n    return this.authorsService.findOneById(id);\n  }\n\n  @ResolveField()\n  async posts(@Parent() author) {\n    const { id } = author;\n    return this.postsService.findAll({ authorId: id });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Kafka Instance Status Updates in NestJS\nDESCRIPTION: This code demonstrates how to subscribe to the 'status' stream of a Kafka client to receive real-time updates on the connection and state of the underlying driver instance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nthis.client.status.subscribe((status: KafkaStatus) => {\n  console.log(status);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bull Queue Consumer in NestJS\nDESCRIPTION: Shows how to create a consumer class using the @Processor decorator, which associates the class with a specific named queue.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor } from '@nestjs/bull';\n\n@Processor('audio')\nexport class AudioConsumer {}\n```\n\n----------------------------------------\n\nTITLE: Starting a Database Session in NestJS with Mongoose\nDESCRIPTION: Demonstrates how to start a Mongoose database session within a NestJS service using the injected Connection object. This method is recommended for managing transactions and ensures proper integration with NestJS's dependency injection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectConnection } from '@nestjs/mongoose';\nimport { Connection } from 'mongoose';\n\n@Injectable()\nexport class CatsService {\n  constructor(@InjectConnection() private readonly connection: Connection) {}\n\n  async startTransaction() {\n    const session = await this.connection.startSession();\n    session.startTransaction();\n    // Your transaction logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding an Interval in NestJS\nDESCRIPTION: Shows how to dynamically create and add a new interval using the SchedulerRegistry's addInterval method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\naddInterval(name: string, milliseconds: number) {\n  const callback = () => {\n    this.logger.warn(`Interval ${name} executing at time (${milliseconds})!`);\n  };\n\n  const interval = setInterval(callback, milliseconds);\n  this.schedulerRegistry.addInterval(name, interval);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting EntityManager and MikroORM instances in a NestJS service using TypeScript\nDESCRIPTION: Example of how to inject MikroORM instance and the EntityManager from the respective driver package (here for SQLite) into a NestJS service for performing database operations. This example assumes the MikroOrmModule is properly configured to provide these instances.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Import everything from your driver package or `@mikro-orm/knex`\nimport { EntityManager, MikroORM } from '@mikro-orm/sqlite';\n\n@Injectable()\nexport class MyService {\n  constructor(\n    private readonly orm: MikroORM,\n    private readonly em: EntityManager,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Command Handler with Event Publishing in NestJS CQRS\nDESCRIPTION: Example of a Command Handler that uses EventPublisher to merge event publishing capabilities into a model instance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@CommandHandler(KillDragonCommand)\nexport class KillDragonHandler implements ICommandHandler<KillDragonCommand> {\n  constructor(\n    private repository: HeroesRepository,\n    private publisher: EventPublisher,\n  ) {}\n\n  async execute(command: KillDragonCommand) {\n    const { heroId, dragonId } = command;\n    const hero = this.publisher.mergeObjectContext(\n      await this.repository.findOneById(+heroId),\n    );\n    hero.killEnemy(dragonId);\n    hero.commit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Subscriptions in NestJS GraphQL\nDESCRIPTION: Demonstrates how to filter subscription events using the filter property. This example filters comments based on their title.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Subscription(() => Comment, {\n  filter: (payload, variables) =>\n    payload.commentAdded.title === variables.title,\n})\ncommentAdded(@Args('title') title: string) {\n  return pubSub.asyncIterableIterator('commentAdded');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pipe Execution Order in NestJS\nDESCRIPTION: This example shows how pipes are executed in a sequence from global to controller to route level. It demonstrates that GeneralValidationPipe runs first for all parameters, followed by RouteSpecificPipe, with parameters processed from last to first.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/request-lifecycle.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@UsePipes(GeneralValidationPipe)\n@Controller('cats')\nexport class CatsController {\n  constructor(private catsService: CatsService) {}\n\n  @UsePipes(RouteSpecificPipe)\n  @Patch(':id')\n  updateCat(\n    @Body() body: UpdateCatDTO,\n    @Param() params: UpdateCatParams,\n    @Query() query: UpdateCatQuery,\n  ) {\n    return this.catsService.updateCat(body, params, query);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Post Object Type with Code First Approach in TypeScript\nDESCRIPTION: Implementation of the Post model using TypeScript classes with @ObjectType and @Field decorators. This demonstrates how to define fields with different types and nullability options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Field, Int, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class Post {\n  @Field(type => Int)\n  id: number;\n\n  @Field()\n  title: string;\n\n  @Field(type => Int, { nullable: true })\n  votes?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Text using AES-256-CTR in Node.js\nDESCRIPTION: This snippet demonstrates how to encrypt text using the AES-256-CTR algorithm with Node.js crypto module. It includes generating a key from a password, creating an initialization vector, and encrypting the text.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/encryption-hashing.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCipheriv, randomBytes, scrypt } from 'crypto';\nimport { promisify } from 'util';\n\nconst iv = randomBytes(16);\nconst password = 'Password used to generate key';\n\n// The key length is dependent on the algorithm.\n// In this case for aes256, it is 32 bytes.\nconst key = (await promisify(scrypt)(password, 'salt', 32)) as Buffer;\nconst cipher = createCipheriv('aes-256-ctr', key, iv);\n\nconst textToEncrypt = 'Nest';\nconst encryptedText = Buffer.concat([\n  cipher.update(textToEncrypt),\n  cipher.final(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Kafka Exception Filter in NestJS\nDESCRIPTION: This code snippet defines a custom Exception Filter for Kafka events to manage retry logic. It allows retrying problematic events up to a configurable number of times before skipping them.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Catch, ArgumentsHost, Logger } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\nimport { KafkaContext } from '../ctx-host';\n\n@Catch()\nexport class KafkaMaxRetryExceptionFilter extends BaseExceptionFilter {\n  private readonly logger = new Logger(KafkaMaxRetryExceptionFilter.name);\n\n  constructor(\n    private readonly maxRetries: number,\n    // Optional custom function executed when max retries are exceeded\n    private readonly skipHandler?: (message: any) => Promise<void>,\n  ) {\n    super();\n  }\n\n  async catch(exception: unknown, host: ArgumentsHost) {\n    const kafkaContext = host.switchToRpc().getContext<KafkaContext>();\n    const message = kafkaContext.getMessage();\n    const currentRetryCount = this.getRetryCountFromContext(kafkaContext);\n\n    if (currentRetryCount >= this.maxRetries) {\n      this.logger.warn(\n        `Max retries (${\n          this.maxRetries\n        }) exceeded for message: ${JSON.stringify(message)}`,\n      );\n\n      if (this.skipHandler) {\n        try {\n          await this.skipHandler(message);\n        } catch (err) {\n          this.logger.error('Error in skipHandler:', err);\n        }\n      }\n\n      try {\n        await this.commitOffset(kafkaContext);\n      } catch (commitError) {\n        this.logger.error('Failed to commit offset:', commitError);\n      }\n      return; // Stop propagating the exception\n    }\n\n    // If retry count is below the maximum, proceed with the default Exception Filter logic\n    super.catch(exception, host);\n  }\n\n  private getRetryCountFromContext(context: KafkaContext): number {\n    const headers = context.getMessage().headers || {};\n    const retryHeader = headers['retryCount'] || headers['retry-count'];\n    return retryHeader ? Number(retryHeader) : 0;\n  }\n\n  private async commitOffset(context: KafkaContext): Promise<void> {\n    const consumer = context.getConsumer && context.getConsumer();\n    if (!consumer) {\n      throw new Error('Consumer instance is not available from KafkaContext.');\n    }\n\n    const topic = context.getTopic && context.getTopic();\n    const partition = context.getPartition && context.getPartition();\n    const message = context.getMessage();\n    const offset = message.offset;\n\n    if (!topic || partition === undefined || offset === undefined) {\n      throw new Error(\n        'Incomplete Kafka message context for committing offset.',\n      );\n    }\n\n    await consumer.commitOffsets([\n      {\n        topic,\n        partition,\n        // When committing an offset, commit the next number (i.e., current offset + 1)\n        offset: (Number(offset) + 1).toString(),\n      },\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Mutation (Schema-First Approach)\nDESCRIPTION: Creating an upvotePost mutation using the schema-first approach in NestJS. The resolver method takes a postId argument and calls a service method to handle the business logic of upvoting a post.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Mutation()\nasync upvotePost(@Args('postId') postId: number) {\n  return this.postsService.upvoteById({ id: postId });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Event Handler with Interceptor in TypeScript\nDESCRIPTION: Example of using an interceptor with a WebSocket subscription handler. Shows both TypeScript and JavaScript syntax options for handling WebSocket events with transformation interceptors.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/interceptors.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@UseInterceptors(new TransformInterceptor())\n@SubscribeMessage('events')\nhandleEvent(client: Client, data: unknown): WsResponse<unknown> {\n  const event = 'events';\n  return { event, data };\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@UseInterceptors(new TransformInterceptor())\n@SubscribeMessage('events')\nhandleEvent(client, data) {\n  const event = 'events';\n  return { event, data };\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting the REQUEST Object in a Service in NestJS\nDESCRIPTION: Demonstrates how to access the original request object in a request-scoped provider by injecting the REQUEST token. This is useful for HTTP server-based applications using Express.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Scope, Inject } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class CatsService {\n  constructor(@Inject(REQUEST) private request: Request) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Module Loading for GET Requests with NestJS LazyModuleLoader\nDESCRIPTION: Example of lazy loading a CacheModule only for GET requests to optimize serverless function performance. This approach prevents the Redis connection from slowing down the bootstrap time for non-GET requests that don't require caching.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (request.method === RequestMethod[RequestMethod.GET]) {\n  const { CacheModule } = await import('./cache.module');\n  const moduleRef = await this.lazyModuleLoader.load(() => CacheModule);\n\n  const { CacheService } = await import('./cache.service');\n  const cacheService = moduleRef.get(CacheService);\n\n  return cacheService.get(ENDPOINT_KEY);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Loadable Module\nDESCRIPTION: Example of a module definition that can be loaded lazily using LazyModuleLoader.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lazy-loading-modules.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  providers: [LazyService],\n  exports: [LazyService],\n})\nexport class LazyModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing DTO with Class Validator Decorators\nDESCRIPTION: CreateCatDto class definition using class-validator decorators for property validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IsString, IsInt } from 'class-validator';\n\nexport class CreateCatDto {\n  @IsString()\n  name: string;\n\n  @IsInt()\n  age: number;\n\n  @IsString()\n  breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Separate Process Processor for Bull Queue in NestJS\nDESCRIPTION: Example of a standalone processor function that runs in a separate process. This processor doesn't have access to NestJS dependency injection and must contain all dependencies it needs.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Job, DoneCallback } from 'bull';\n\nexport default function (job: Job, cb: DoneCallback) {\n  console.log(`[${process.pid}] ${JSON.stringify(job.data)}`);\n  cb(null, 'It works');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Handler in NestJS CQRS\nDESCRIPTION: Example of creating a Query Handler for the GetHeroQuery. It implements the IQueryHandler interface and uses the @QueryHandler decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@QueryHandler(GetHeroQuery)\nexport class GetHeroHandler implements IQueryHandler<GetHeroQuery> {\n  constructor(private repository: HeroesRepository) {}\n\n  async execute(query: GetHeroQuery) {\n    return this.repository.findOneById(query.hero);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Guard in NestJS\nDESCRIPTION: Basic template for a role-based guard implementation that can be extended to check user roles for access control. Currently returns true for all requests but can be modified for actual role validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongooseModule Async with Factory (Simple)\nDESCRIPTION: Demonstrates basic asynchronous configuration of the MongooseModule using a factory function that returns connection options. This is suitable when options are not static but don't require external dependencies.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nMongooseModule.forRootAsync({\n  useFactory: () => ({\n    uri: 'mongodb://localhost/nest',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a CurrentUser Parameter Decorator for GraphQL in NestJS\nDESCRIPTION: Shows how to create a custom parameter decorator to extract the current authenticated user from the GraphQL context. This decorator simplifies access to the authenticated user in resolvers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\nexport const CurrentUser = createParamDecorator(\n  (data: unknown, context: ExecutionContext) => {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req.user;\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Injecting ConfigService Constructor\nDESCRIPTION: Demonstrates constructor injection of ConfigService in a class\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private configService: ConfigService) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Processing Logic in NestJS BullMQ\nDESCRIPTION: Implementation of a consumer with job processing logic including progress tracking.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { Job } from 'bullmq';\n\n@Processor('audio')\nexport class AudioConsumer extends WorkerHost {\n  async process(job: Job<any, any, string>): Promise<any> {\n    let progress = 0;\n    for (let i = 0; i < 100; i++) {\n      await doSomething(job.data);\n      progress += 1;\n      await job.updateProgress(progress);\n    }\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Testing CatsApiService with NestJS TestingModule\nDESCRIPTION: TypeScript code for integration testing CatsApiService using NestJS TestingModule and nock for HTTP request mocking, verifying correct module configuration and API interaction.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Test } from '@nestjs/testing';\nimport * as nock from 'nock';\n\ndescribe('Cats Api Service Integration Test', () => {\n  let catsApiService: CatsApiService;\n\n  beforeAll(async () => {\n    const moduleRef = await Test.createTestingModule({\n      imports: [CatsModule],\n    }).compile();\n\n    catsApiService = moduleRef.get(CatsApiService);\n  });\n\n  afterEach(() => {\n    nock.cleanAll();\n  });\n\n  it('should fetch cat by id using real HttpClient', async () => {\n    const catFixture: Cat = { id: 1, name: 'Catty' };\n\n    nock('https://api.cats.com')\n      .get('/cats/1')\n      .reply(200, catFixture);\n\n    const cat = await catsApiService.getCatById(1);\n    expect(cat).toEqual<Cat>(catFixture);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Extending ThrottlerGuard for WebSocket Rate Limiting - TypeScript\nDESCRIPTION: Extends the ThrottlerGuard to support WebSocket requests by overriding handleRequest. It retrieves the client IP address from the raw socket connection, applies rate limiting using storageService, and throws exceptions when limits are exceeded. This approach is necessary since WebSocket contexts differ from HTTP and require manual extraction of IPs and request keys.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class WsThrottlerGuard extends ThrottlerGuard {\n  async handleRequest(requestProps: ThrottlerRequest): Promise<boolean> {\n    const {\n      context,\n      limit,\n      ttl,\n      throttler,\n      blockDuration,\n      getTracker,\n      generateKey,\n    } = requestProps;\n\n    const client = context.switchToWs().getClient();\n    const tracker = client._socket.remoteAddress;\n    const key = generateKey(context, tracker, throttler.name);\n    const { totalHits, timeToExpire, isBlocked, timeToBlockExpire } =\n      await this.storageService.increment(\n        key,\n        ttl,\n        limit,\n        blockDuration,\n        throttler.name,\n      );\n\n    const getThrottlerSuffix = (name: string) =>\n      name === 'default' ? '' : `-${name}`;\n\n    // Throw an error when the user reached their limit.\n    if (isBlocked) {\n      await this.throwThrottlingException(context, {\n        limit,\n        ttl,\n        key,\n        tracker,\n        totalHits,\n        timeToExpire,\n        isBlocked,\n        timeToBlockExpire,\n      });\n    }\n\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HTTP Service Implementation with Error Handling\nDESCRIPTION: Full example of implementing HTTP service with RxJS operators for handling responses and errors.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { catchError, firstValueFrom } from 'rxjs';\n\n@Injectable()\nexport class CatsService {\n  private readonly logger = new Logger(CatsService.name);\n  constructor(private readonly httpService: HttpService) {}\n\n  async findAll(): Promise<Cat[]> {\n    const { data } = await firstValueFrom(\n      this.httpService.get<Cat[]>('http://localhost:3000/cats').pipe(\n        catchError((error: AxiosError) => {\n          this.logger.error(error.response.data);\n          throw 'An error happened!';\n        }),\n      ),\n    );\n    return data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Query Parameters in NestJS Controller\nDESCRIPTION: Shows how to use the @Query() decorator to extract and use query parameters in a GET request handler.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nasync findAll(@Query('age') age: number, @Query('breed') breed: string) {\n  return `This action returns all cats filtered by age: ${age} and breed: ${breed}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Global Route Prefix in NestJS\nDESCRIPTION: Demonstrates how to set a basic global prefix 'v1' for all HTTP routes in a NestJS application using setGlobalPrefix() method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/global-prefix.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\napp.setGlobalPrefix('v1');\n```\n\n----------------------------------------\n\nTITLE: Using Composite Auth Decorator in NestJS Controllers\nDESCRIPTION: Demonstrates how to use a composite decorator that combines multiple authentication-related decorators into a single declaration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('users')\n@Auth('admin')\nfindAllUsers() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interceptor with MessagePattern in NestJS Microservices (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use an interceptor with a microservice message pattern in NestJS. It shows the implementation of an 'accumulate' method that sums an array of numbers, decorated with both UseInterceptors and MessagePattern. The TransformInterceptor is manually instantiated and applied at the method level.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/interceptors.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@UseInterceptors(new TransformInterceptor())\n@MessagePattern({ cmd: 'sum' })\naccumulate(data: number[]): number {\n  return (data || []).reduce((a, b) => a + b);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ Root Module\nDESCRIPTION: Setup of BullModule in the root AppModule with Redis connection configuration\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { BullModule } from '@nestjs/bullmq';\n\n@Module({\n  imports: [\n    BullModule.forRoot({\n      connection: {\n        host: 'localhost',\n        port: 6379,\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring CaslModule in NestJS (TypeScript)\nDESCRIPTION: Defines the `CaslModule` using the `@Module` decorator from `@nestjs/common`. It registers `CaslAbilityFactory` in the `providers` array, making it available for injection within this module, and includes it in the `exports` array to allow other modules that import `CaslModule` to inject `CaslAbilityFactory`. This makes the factory reusable across the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './casl-ability.factory';\n\n@Module({\n  providers: [CaslAbilityFactory],\n  exports: [CaslAbilityFactory],\n})\nexport class CaslModule {}\n```\n\n----------------------------------------\n\nTITLE: Overriding Modules in NestJS Testing\nDESCRIPTION: Demonstrates how to override modules during testing using the overrideModule method with TestingModule.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst moduleRef = await Test.createTestingModule({\n  imports: [AppModule],\n})\n  .overrideModule(CatsModule)\n  .useModule(AlternateCatsModule)\n  .compile();\n```\n\n----------------------------------------\n\nTITLE: Applying Controller-Scoped Exception Filter in NestJS\nDESCRIPTION: Demonstrates how to apply an exception filter to all route handlers within a controller. This applies the HttpExceptionFilter to every method in the CatsController.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller()\n@UseFilters(new HttpExceptionFilter())\nexport class CatsController {}\n```\n\n----------------------------------------\n\nTITLE: Using OmitType in GraphQL Schema\nDESCRIPTION: Example of using OmitType utility to create a new type by excluding specific properties from an existing type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@InputType()\nexport class UpdateUserInput extends OmitType(CreateUserInput, [\n  'email',\n] as const) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Versioned Middleware in NestJS\nDESCRIPTION: This snippet demonstrates how to apply middleware to a specific version of a route in NestJS. It uses the MiddlewareConsumer to configure the LoggerMiddleware for version '2' of the '/cats' endpoint.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';\nimport { LoggerMiddleware } from './common/middleware/logger.middleware';\nimport { CatsModule } from './cats/cats.module';\nimport { CatsController } from './cats/cats.controller';\n\n@Module({\n  imports: [CatsModule],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes({ path: 'cats', method: RequestMethod.GET, version: '2' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Argument Class in NestJS\nDESCRIPTION: This snippet shows how to create a dedicated arguments class for a GraphQL query using @ArgsType() decorator. It demonstrates field definitions and validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MinLength } from 'class-validator';\nimport { Field, ArgsType } from '@nestjs/graphql';\n\n@ArgsType()\nclass GetAuthorArgs {\n  @Field({ nullable: true })\n  firstName?: string;\n\n  @Field({ defaultValue: '' })\n  @MinLength(3)\n  lastName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering RabbitMQ Client Module\nDESCRIPTION: Configuration for registering RabbitMQ client using ClientsModule with connection and queue settings\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ClientsModule.register([\n      {\n        name: 'MATH_SERVICE',\n        transport: Transport.RMQ,\n        options: {\n          urls: ['amqp://localhost:5672'],\n          queue: 'cats_queue',\n          queueOptions: {\n            durable: false\n          },\n        },\n      },\n    ]),\n  ]\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthModule with Passport in NestJS\nDESCRIPTION: This snippet shows how to configure the AuthModule to use Passport features. It imports the necessary modules and providers, including the LocalStrategy.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\n\n@Module({\n  imports: [UsersModule, PassportModule],\n  providers: [AuthService, LocalStrategy],\n})\nexport class AuthModule {}\n```\n\n----------------------------------------\n\nTITLE: Multiple Resolver Schema Generation\nDESCRIPTION: Shows how to generate a schema with multiple resolver classes. Accepts an array of resolver references to create a more complex schema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/schema-generator.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = await gqlSchemaFactory.create([\n  RecipesResolver,\n  AuthorsResolver,\n  PostsResolvers,\n]);\n```\n\n----------------------------------------\n\nTITLE: Configurable Module Definition using ConfigurableModuleBuilder\nDESCRIPTION: Implementation of module configuration using ConfigurableModuleBuilder for automated async support.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigurableModuleBuilder } from '@nestjs/common';\nimport { ConfigModuleOptions } from './interfaces/config-module-options.interface';\n\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =\n  new ConfigurableModuleBuilder<ConfigModuleOptions>().build();\n```\n\n----------------------------------------\n\nTITLE: Configuring ClientsModule Registration in NestJS\nDESCRIPTION: Shows how to register microservice clients using ClientsModule with static configuration for TCP transport.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ClientsModule.register([\n      { name: 'MATH_SERVICE', transport: Transport.TCP },\n    ]),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Binding Method-Scoped Exception Filter Using Instance in NestJS\nDESCRIPTION: Demonstrates how to apply an exception filter to a specific route handler method by creating a new filter instance. This example shows applying HttpExceptionFilter to the create() method in CatsController.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@UseFilters(new HttpExceptionFilter())\nasync create(@Body() createCatDto: CreateCatDto) {\n  throw new ForbiddenException();\n}\n```\n\n----------------------------------------\n\nTITLE: Processing RabbitMQ Message Headers\nDESCRIPTION: Example of accessing and processing RabbitMQ message headers on the server side\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('replace-emoji')\nreplaceEmoji(@Payload() data: string, @Ctx() context: RmqContext): string {\n  const { properties: { headers } } = context.getMessage();\n  return headers['x-version'] === '1.0.0' ? '🐱' : '🐈';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous Provider with useFactory in NestJS\nDESCRIPTION: Demonstrates how to create an asynchronous provider using useFactory syntax that returns a Promise. This pattern is useful for establishing database connections or other async initialization tasks before the application starts.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/async-components.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  provide: 'ASYNC_CONNECTION',\n  useFactory: async () => {\n    const connection = await createConnection(options);\n    return connection;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Authentication Guard for GraphQL in NestJS\nDESCRIPTION: Shows how to create a GraphQL-compatible local authentication guard that merges GraphQL arguments with the request body. This ensures Passport can access the credentials from GraphQL mutations for validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class GqlLocalAuthGuard extends AuthGuard('local') {\n  getRequest(context: ExecutionContext) {\n    const gqlExecutionContext = GqlExecutionContext.create(context);\n    const gqlContext = gqlExecutionContext.getContext();\n    const gqlArgs = gqlExecutionContext.getArgs();\n\n    gqlContext.req.body = { ...gqlContext.req.body, ...gqlArgs };\n    return gqlContext.req;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying HTTP Library Instance in NestJS\nDESCRIPTION: Demonstrates how to access the underlying HTTP library instance (e.g., Express) using the getInstance() method of the HttpAdapter.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/http-adapter.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst instance = httpAdapter.getInstance();\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Route in NestJS\nDESCRIPTION: This code snippet demonstrates how to implement a logout route in NestJS. It uses the LocalAuthGuard and calls req.logout() to clear the user's session.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@UseGuards(LocalAuthGuard)\n@Post('auth/logout')\nasync logout(@Request() req) {\n  return req.logout();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller and Handler Information\nDESCRIPTION: Demonstrates how to use ExecutionContext to obtain the current handler name and controller class name during request processing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst methodKey = ctx.getHandler().name; // \"create\"\nconst className = ctx.getClass().name; // \"CatsController\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Users Service in NestJS\nDESCRIPTION: Implementation of UsersService with in-memory user storage and user lookup functionality. Includes type definition and mock user data.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\n\n// This should be a real class/interface representing a user entity\nexport type User = any;\n\n@Injectable()\nexport class UsersService {\n  private readonly users = [\n    {\n      userId: 1,\n      username: 'john',\n      password: 'changeme',\n    },\n    {\n      userId: 2,\n      username: 'maria',\n      password: 'guess',\n    },\n  ];\n\n  async findOne(username: string): Promise<User | undefined> {\n    return this.users.find(user => user.username === username);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dynamic Database Module in AppModule\nDESCRIPTION: Demonstrates how to import and configure a dynamic database module in the application's root module with specific entities.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { DatabaseModule } from './database/database.module';\nimport { User } from './users/entities/user.entity';\n\n@Module({\n  imports: [DatabaseModule.forRoot([User])],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Object Schemas Using raw() - TypeScript\nDESCRIPTION: Uses the @Prop decorator and the raw() function from @nestjs/mongoose to define inline nested objects for properties without separate class definitions, such as contact information or personal details. Useful for representing flexible structures; input: object properties; output: nested object schema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Prop(raw({\n  firstName: { type: String },\n  lastName: { type: String }\n}))\ndetails: Record<string, any>;\n\n```\n\n----------------------------------------\n\nTITLE: Extending ThrottlerGuard for GraphQL Rate Limiting - TypeScript\nDESCRIPTION: Shows how to extend ThrottlerGuard for use with GraphQL by overriding getRequestResponse to extract req and res from the GraphQL execution context. This adaptation allows the ThrottlerGuard to correctly access the HTTP request and response objects within GraphQL resolvers for rate limiting enforcement.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class GqlThrottlerGuard extends ThrottlerGuard {\n  getRequestResponse(context: ExecutionContext) {\n    const gqlCtx = GqlExecutionContext.create(context);\n    const ctx = gqlCtx.getContext();\n    return { req: ctx.req, res: ctx.res };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending AuthGuard with Custom JWT Authentication in NestJS\nDESCRIPTION: Demonstrates how to extend the built-in AuthGuard class to customize authentication logic and error handling for JWT authentication. This implementation adds hooks for custom authentication logic and proper error handling.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  canActivate(context: ExecutionContext) {\n    // Add your custom authentication logic here\n    // for example, call super.logIn(request) to establish a session.\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info) {\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Asynchronous Message Handler in NestJS\nDESCRIPTION: Demonstrates an asynchronous message handler using async/await syntax in a NestJS microservice controller.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern({ cmd: 'sum' })\nasync accumulate(data: number[]): Promise<number> {\n  return (data || []).reduce((a, b) => a + b);\n}\n```\n\n----------------------------------------\n\nTITLE: Using OmitType for Excluding Properties in TypeScript\nDESCRIPTION: Shows how to use OmitType to create a new DTO that excludes specific properties from the original DTO.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/mapped-types.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UpdateCatDto extends OmitType(CreateCatDto, ['name'] as const) {}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Loader\nDESCRIPTION: Implementation of a configuration loader that reads and parses YAML configuration files with validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readFileSync } from 'fs';\nimport * as yaml from 'js-yaml';\nimport { join } from 'path';\n\nconst YAML_CONFIG_FILENAME = 'config.yaml';\n\nexport default () => {\n  const config = yaml.load(\n    readFileSync(join(__dirname, YAML_CONFIG_FILENAME), 'utf8'),\n  ) as Record<string, any>;\n\n  if (config.http.port < 1024 || config.http.port > 49151) {\n    throw new Error('HTTP port must be between 1024 and 49151');\n  }\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Using @CreateRequestContext decorator for request-scoped methods in NestJS queues with MikroORM in TypeScript\nDESCRIPTION: Shows how to decorate service methods with @CreateRequestContext to create a new MikroORM request context for async operations that happen outside HTTP request lifecycle, such as in queue handlers or scheduled jobs. The MikroORM instance is injected and used internally by the decorator to initialize the request context automatically.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class MyService {\n  constructor(private readonly orm: MikroORM) {}\n\n  @CreateRequestContext()\n  async doSomething() {\n    // this will be executed in a separate context\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Nest.js Library\nDESCRIPTION: Command to build a library in a Nest.js monorepo using the CLI. This compiles the library code according to its tsconfig.lib.json configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/libraries.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nest build my-library\n```\n\n----------------------------------------\n\nTITLE: Registering Global Sentry Exception Filter\nDESCRIPTION: Configuration for adding SentryGlobalFilter as a global exception handler in the application module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from \"@nestjs/common\";\nimport { APP_FILTER } from \"@nestjs/core\";\nimport { SentryGlobalFilter } from \"@sentry/nestjs/setup\";\n\n@Module({\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: SentryGlobalFilter,\n    },\n    // ..other providers\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring WsAdapter in NestJS Application\nDESCRIPTION: This code snippet demonstrates how to set up and use the WsAdapter in a NestJS application's main file.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\napp.useWebSocketAdapter(new WsAdapter(app));\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Service in NestJS\nDESCRIPTION: Example of implementing HttpService in a service class to make HTTP requests, showing both TypeScript and JavaScript syntax.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService {\n  constructor(private readonly httpService: HttpService) {}\n\n  findAll(): Observable<AxiosResponse<Cat[]>> {\n    return this.httpService.get('http://localhost:3000/cats');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeORM Health Check in NestJS\nDESCRIPTION: Shows how to implement database health checks using TypeOrmHealthIndicator. The controller performs a simple ping check to verify database connectivity.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.db.pingCheck('database'),\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom GraphQL Driver in NestJS Module Configuration\nDESCRIPTION: Shows how to register a custom GraphQL driver with the GraphQL module. This example configures the module to use the ExpressGraphQLDriver for handling GraphQL requests.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot({\n  driver: ExpressGraphQLDriver,\n});\n```\n\n----------------------------------------\n\nTITLE: Using ParseFilePipe for File Validation in NestJS\nDESCRIPTION: Demonstrates the use of ParseFilePipe for file validation in NestJS, allowing for multiple validators to be applied.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('file')\nuploadFileAndPassValidation(\n  @Body() body: SampleDto,\n  @UploadedFile(\n    new ParseFilePipe({\n      validators: [\n        // ... Set of file validator instances here\n      ]\n    })\n  )\n  file: Express.Multer.File,\n) {\n  return {\n    body,\n    file: file.buffer.toString(),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Exception Filter with Dependency Injection in NestJS\nDESCRIPTION: Demonstrates how to register a global-scoped filter with dependency injection support by using the APP_FILTER token in a module's providers array.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { APP_FILTER } from '@nestjs/core';\n\n@Module({\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: HttpExceptionFilter,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller with Template Rendering\nDESCRIPTION: Controller implementation using @Render decorator for static template rendering\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Get, Controller, Render } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get()\n  @Render('index')\n  root() {\n    return { message: 'Hello world!' };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Class with Options\nDESCRIPTION: Complete implementation of a command class using @Command and @Option decorators with various parameter parsing options\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/nest-commander.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Command, CommandRunner, Option } from 'nest-commander';\nimport { LogService } from './log.service';\n\ninterface BasicCommandOptions {\n  string?: string;\n  boolean?: boolean;\n  number?: number;\n}\n\n@Command({ name: 'basic', description: 'A parameter parse' })\nexport class BasicCommand extends CommandRunner {\n  constructor(private readonly logService: LogService) {\n    super()\n  }\n\n  async run(\n    passedParam: string[],\n    options?: BasicCommandOptions,\n  ): Promise<void> {\n    if (options?.boolean !== undefined && options?.boolean !== null) {\n      this.runWithBoolean(passedParam, options.boolean);\n    } else if (options?.number) {\n      this.runWithNumber(passedParam, options.number);\n    } else if (options?.string) {\n      this.runWithString(passedParam, options.string);\n    } else {\n      this.runWithNone(passedParam);\n    }\n  }\n\n  @Option({\n    flags: '-n, --number [number]',\n    description: 'A basic number parser',\n  })\n  parseNumber(val: string): number {\n    return Number(val);\n  }\n\n  @Option({\n    flags: '-s, --string [string]',\n    description: 'A string return',\n  })\n  parseString(val: string): string {\n    return val;\n  }\n\n  @Option({\n    flags: '-b, --boolean [boolean]',\n    description: 'A boolean parser',\n  })\n  parseBoolean(val: string): boolean {\n    return JSON.parse(val);\n  }\n\n  runWithString(param: string[], option: string): void {\n    this.logService.log({ param, string: option });\n  }\n\n  runWithNumber(param: string[], option: number): void {\n    this.logService.log({ param, number: option });\n  }\n\n  runWithBoolean(param: string[], option: boolean): void {\n    this.logService.log({ param, boolean: option });\n  }\n\n  runWithNone(param: string[]): void {\n    this.logService.log({ param });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection in NestJS Controllers\nDESCRIPTION: Demonstrates how to redirect responses to specific URLs using the @Redirect decorator. The example shows redirecting to the NestJS website with a 301 status code.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\n@Redirect('https://nestjs.com', 301)\n```\n\n----------------------------------------\n\nTITLE: Excluding Routes from Middleware\nDESCRIPTION: Shows how to exclude specific routes from middleware application using the exclude() method with various path patterns.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconsumer\n  .apply(LoggerMiddleware)\n  .exclude(\n    { path: 'cats', method: RequestMethod.GET },\n    { path: 'cats', method: RequestMethod.POST },\n    'cats/{*splat}',\n  )\n  .forRoutes(CatsController);\n```\n\n----------------------------------------\n\nTITLE: Manual Offset Committing in NestJS Kafka Event Handler\nDESCRIPTION: This code shows how to manually commit offsets in a NestJS Kafka event handler. It uses the KafkaContext to access the consumer and commit the offset after processing the message.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@EventPattern('user.created')\nasync handleUserCreated(@Payload() data: IncomingMessage, @Ctx() context: KafkaContext) {\n  // business logic\n\n  const { offset } = context.getMessage();\n  const partition = context.getPartition();\n  const topic = context.getTopic();\n  const consumer = context.getConsumer();\n  await consumer.commitOffsets([{ topic, partition, offset }])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeouts in NestJS Microservices\nDESCRIPTION: Demonstrates how to implement timeout handling using RxJS timeout operator to prevent indefinite waiting in microservice calls.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nthis.client\n  .send<TResult, TInput>(pattern, data)\n  .pipe(timeout(5000));\n```\n\n----------------------------------------\n\nTITLE: Excluding Properties with Class-Transformer in TypeScript\nDESCRIPTION: Demonstrates how to create a UserEntity class with a password property that will be excluded from serialization using the @Exclude decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/serialization.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Exclude } from 'class-transformer';\n\nexport class UserEntity {\n  id: number;\n  firstName: string;\n  lastName: string;\n\n  @Exclude()\n  password: string;\n\n  constructor(partial: Partial<UserEntity>) {\n    Object.assign(this, partial);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS HTTP Module Dependencies\nDESCRIPTION: Command to install the required NestJS HTTP module and Axios packages using npm.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @nestjs/axios axios\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Module Number Scalar Mode\nDESCRIPTION: Configuration for setting the number scalar mode to integer in GraphQL module options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot({\n  buildSchemaOptions: {\n    numberScalarMode: 'integer',\n  }\n}),\n```\n\n----------------------------------------\n\nTITLE: Populating References in Repository Pattern - TypeScript\nDESCRIPTION: Shows how to use the populate method on a Mongoose model to fetch owner references alongside cats in a service/repository function. Assumes Cat and Owner schemas are defined. Input: none; Output: resolved documents with populated owner field.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Owner } from './schemas/owner.schema';\n\n// e.g. inside a service or repository\nasync findAllPopulated() {\n  return this.catModel.find().populate<{ owner: Owner }>(\"owner\");\n}\n\n```\n\n----------------------------------------\n\nTITLE: Message Acknowledgement Implementation\nDESCRIPTION: Implementation of manual message acknowledgement using RabbitMQ channel reference\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('notifications')\ngetNotifications(@Payload() data: number[], @Ctx() context: RmqContext) {\n  const channel = context.getChannelRef();\n  const originalMsg = context.getMessage();\n\n  channel.ack(originalMsg);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthModule with JWT in NestJS\nDESCRIPTION: Sets up the AuthModule with necessary imports and providers including the JWT strategy, LocalStrategy, and AuthService. The module registers JWT with configuration options like secret key and token expiration time.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Feature Module with Sequelize Models\nDESCRIPTION: Configuring a feature module (UsersModule) to use specific Sequelize models with the forFeature() method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { User } from './user.model';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([User])],\n  providers: [UsersService],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing Class Validator Packages\nDESCRIPTION: Command to install class-validator and class-transformer libraries for decorator-based validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save class-validator class-transformer\n```\n\n----------------------------------------\n\nTITLE: Basic Kafka Message Handler Implementation\nDESCRIPTION: Demonstrates handling Kafka messages using the @MessagePattern decorator with payload serialization. Returns items after processing a dragon kill event.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller()\nexport class HeroesController {\n  @MessagePattern('hero.kill.dragon')\n  killDragon(@Payload() message: KillDragonMessage): any {\n    const dragonId = message.dragonId;\n    const items = [\n      { id: 1, name: 'Mythical Sword' },\n      { id: 2, name: 'Key to Dungeon' },\n    ];\n    return items;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Module in NestJS\nDESCRIPTION: This snippet shows how to create a consuming module (AuthModule) that imports another module (UsersModule) to gain access to its exported providers. The AuthModule also provides and exports its own service.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n```\n\n----------------------------------------\n\nTITLE: Partial Configuration Registration\nDESCRIPTION: Example of using partial registration for feature-specific configurations\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [ConfigModule.forFeature(databaseConfig)],\n})\nexport class DatabaseModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling Options\nDESCRIPTION: Application creation configuration with abort on error disabled for debugging purposes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule, {\n  snapshot: true,\n  abortOnError: false, // <--- THIS\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Command Class Structure\nDESCRIPTION: Implementation of a command class that extends the base Command class with type specification for command execution result.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class KillDragonCommand extends Command<{\n  actionId: string\n}> {\n  constructor(\n    public readonly heroId: string,\n    public readonly dragonId: string,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Transport in NestJS Microservice\nDESCRIPTION: Set up the Kafka transport mechanism in a NestJS microservice using the createMicroservice method. This configuration specifies the transport type and broker locations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {\n  transport: Transport.KAFKA,\n  options: {\n    client: {\n      brokers: ['localhost:9092'],\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in NestJS\nDESCRIPTION: Demonstrates how to inject and use EventEmitter2 to dispatch events in a NestJS service or controller.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private eventEmitter: EventEmitter2) {}\n\n// ...\n\nthis.eventEmitter.emit(\n  'order.created',\n  new OrderCreatedEvent({\n    orderId: 1,\n    payload: {},\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Using CronExpression Enum in NestJS\nDESCRIPTION: Implementation of a cron job using predefined CronExpression enum for common scheduling patterns.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\n\n@Injectable()\nexport class TasksService {\n  private readonly logger = new Logger(TasksService.name);\n\n  @Cron(CronExpression.EVERY_30_SECONDS)\n  handleCron() {\n    this.logger.debug('Called every 30 seconds');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Controller\nDESCRIPTION: Implementation of the HealthController with HTTP health check functionality\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@nestjs/common';\nimport { HealthCheckService, HttpHealthIndicator, HealthCheck } from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.http.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Sentry Error Reporting\nDESCRIPTION: Example endpoint implementation to test Sentry error reporting functionality.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(\"debug-sentry\")\ngetError() {\n  throw new Error(\"My first Sentry error!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Controller Route Handler with DTO\nDESCRIPTION: Example of a POST route handler using CreateCatDto for request body validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\nasync create(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Fastify Compression Middleware\nDESCRIPTION: Basic implementation of compression middleware in a Fastify-based NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/compression.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport compression from '@fastify/compress';\n// somewhere in your initialization file\nawait app.register(compression);\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Transformation Interceptor in NestJS\nDESCRIPTION: This interceptor modifies each response by wrapping it in a 'data' property. It demonstrates how to use RxJS operators to transform the response stream.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response<T> {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor<T> implements NestInterceptor<T, Response<T>> {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<Response<T>> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class TransformInterceptor {\n  intercept(context, next) {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the @RequirePermissions() Decorator (JavaScript)\nDESCRIPTION: This code demonstrates how to use a theoretical `@RequirePermissions()` decorator (similar to `@Roles()`) to protect a route handler based on permissions.  Only users with the `Permission.CREATE_CAT` permission will be able to access the endpoint.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@RequirePermissions(Permission.CREATE_CAT)\n@Bind(Body())\ncreate(createCatDto) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Delayed Job to a Bull Queue\nDESCRIPTION: Demonstrates adding a job with a delay option, which postpones job processing for the specified number of milliseconds.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.audioQueue.add(\n  {\n    foo: 'bar',\n  },\n  { delay: 3000 }, // 3 seconds delayed\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring NestJS Application to Use Custom Logger\nDESCRIPTION: Shows how to configure a NestJS application to use a custom logger during bootstrap by retrieving the logger instance from the dependency injection container.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule, {\n  bufferLogs: true,\n});\napp.useLogger(app.get(MyLogger));\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Using File Size Validation Pipe with FileInterceptor in NestJS\nDESCRIPTION: Example of applying a custom file size validation pipe to a file upload endpoint in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('file')\n@UseInterceptors(FileInterceptor('file'))\nuploadFileAndValidate(@UploadedFile(\n  new FileSizeValidationPipe(),\n  // other pipes can be added here\n) file: Express.Multer.File, ) {\n  return file;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom DataSource Factory in NestJS with TypeORM\nDESCRIPTION: This snippet shows how to set up a custom DataSource factory for TypeORM in NestJS. It allows for more control over the DataSource creation process, including the ability to perform additional setup or modifications.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nTypeOrmModule.forRootAsync({\n  imports: [ConfigModule],\n  inject: [ConfigService],\n  useFactory: (configService: ConfigService) => ({\n    type: 'mysql',\n    host: configService.get('HOST'),\n    port: +configService.get('PORT'),\n    username: configService.get('USERNAME'),\n    password: configService.get('PASSWORD'),\n    database: configService.get('DATABASE'),\n    entities: [],\n    synchronize: true,\n  }),\n  dataSourceFactory: async (options) => {\n    const dataSource = await new DataSource(options).initialize();\n    return dataSource;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Event Bus Subscription Implementation\nDESCRIPTION: Example of subscribing to all events in the EventBus for logging or persistence purposes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nprivate destroy$ = new Subject<void>();\n\nconstructor(private eventBus: EventBus) {\n  this.eventBus\n    .pipe(takeUntil(this.destroy$))\n    .subscribe((event) => {\n      // Save events to database\n    });\n}\n\nonModuleDestroy() {\n  this.destroy$.next();\n  this.destroy$.complete();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Interceptors in NestJS\nDESCRIPTION: This code demonstrates how to register a global interceptor that will be applied to all route handlers across the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\napp.useGlobalInterceptors(new LoggingInterceptor());\n```\n\n----------------------------------------\n\nTITLE: Terminating a NestJS Standalone Application\nDESCRIPTION: Shows how to properly terminate a NestJS standalone application by calling app.close() at the end of the bootstrap function, which will trigger lifecycle hooks and allow the Node process to exit.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/application-context.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  const app = await NestFactory.createApplicationContext(AppModule);\n  // application logic...\n  await app.close();\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Module Configuration with Options Provider\nDESCRIPTION: Implementation of ConfigModule with dynamic registration and options injection setup.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamicModule, Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({})\nexport class ConfigModule {\n  static register(options: Record<string, any>): DynamicModule {\n    return {\n      module: ConfigModule,\n      providers: [\n        {\n          provide: 'CONFIG_OPTIONS',\n          useValue: options,\n        },\n        ConfigService,\n      ],\n      exports: [ConfigService],\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify Platform for NestJS\nDESCRIPTION: Command to install the Fastify platform package for NestJS integration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @nestjs/platform-fastify\n```\n\n----------------------------------------\n\nTITLE: Example: Checking Conditional Permissions (Update Own Article) in TypeScript\nDESCRIPTION: Demonstrates checking condition-based permissions defined in `CaslAbilityFactory`. It creates a user and an article, ensuring the article's `authorId` matches the user's `id`. The check `ability.can(Action.Update, article)` returns `true`. When the `authorId` is changed to mismatch, the same check correctly returns `false`, verifying the condition (`{ authorId: user.id }`) is enforced.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User();\nuser.id = 1;\n\nconst article = new Article();\narticle.authorId = user.id;\n\nconst ability = this.caslAbilityFactory.createForUser(user);\nability.can(Action.Update, article); // true\n\narticle.authorId = 2;\nability.can(Action.Update, article); // false\n```\n\n----------------------------------------\n\nTITLE: Implementing E2E Tests with Supertest in NestJS\nDESCRIPTION: Demonstrates how to set up and execute end-to-end tests using Supertest to simulate HTTP requests. Shows module configuration, service mocking, and HTTP endpoint testing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as request from 'supertest';\nimport { Test } from '@nestjs/testing';\nimport { CatsModule } from '../../src/cats/cats.module';\nimport { CatsService } from '../../src/cats/cats.service';\nimport { INestApplication } from '@nestjs/common';\n\ndescribe('Cats', () => {\n  let app: INestApplication;\n  let catsService = { findAll: () => ['test'] };\n\n  beforeAll(async () => {\n    const moduleRef = await Test.createTestingModule({\n      imports: [CatsModule],\n    })\n      .overrideProvider(CatsService)\n      .useValue(catsService)\n      .compile();\n\n    app = moduleRef.createNestApplication();\n    await app.init();\n  });\n\n  it(`/GET cats`, () => {\n    return request(app.getHttpServer())\n      .get('/cats')\n      .expect(200)\n      .expect({\n        data: catsService.findAll(),\n      });\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Memory Health Check Implementation\nDESCRIPTION: Demonstrates memory usage monitoring using MemoryHealthIndicator to check heap and RSS memory usage.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private memory: MemoryHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull Module with Dependency Injection in TypeScript\nDESCRIPTION: Demonstrates using forRootAsync with ConfigModule dependency injection to dynamically retrieve Redis connection details from configuration service.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.forRootAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    redis: {\n      host: configService.get('QUEUE_HOST'),\n      port: configService.get('QUEUE_PORT'),\n    },\n  }),\n  inject: [ConfigService],\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Class Validator Pipe to Controller Parameter\nDESCRIPTION: Example of binding the ValidationPipe to a specific parameter in a controller method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\nasync create(\n  @Body(new ValidationPipe()) createCatDto: CreateCatDto,\n) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB and Mongoose Dependencies - Bash\nDESCRIPTION: Installs the necessary NPM packages for MongoDB integration within a NestJS project, namely @nestjs/mongoose and mongoose. Requires Node.js and NPM to be installed. No special input or output; this sets up project dependencies.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @nestjs/mongoose mongoose\n\n```\n\n----------------------------------------\n\nTITLE: Multiple Database Health Checks in NestJS\nDESCRIPTION: Implementation of health checks for multiple database connections using connection injection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n    @InjectConnection('albumsConnection')\n    private albumsConnection: Connection,\n    @InjectConnection()\n    private defaultConnection: Connection,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.db.pingCheck('albums-database', { connection: this.albumsConnection }),\n      () => this.db.pingCheck('database', { connection: this.defaultConnection }),\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Console Logger Implementation\nDESCRIPTION: Example of extending the built-in ConsoleLogger to customize specific logging behavior.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConsoleLogger } from '@nestjs/common';\n\nexport class MyLogger extends ConsoleLogger {\n  error(message: any, stack?: string, context?: string) {\n    // add your tailored logic here\n    super.error(...arguments);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Code-First User Entity Definition\nDESCRIPTION: TypeScript class definition for User entity with Federation decorators\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Directive, Field, ID, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\n@Directive('@key(fields: \"id\")')\nexport class User {\n  @Field(() => ID)\n  id: number;\n\n  @Field()\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Redirection in NestJS Controllers\nDESCRIPTION: Shows how to dynamically determine redirect URL based on query parameters. The example demonstrates conditional redirection to different documentation versions.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('docs')\n@Redirect('https://docs.nestjs.com', 302)\ngetDocs(@Query('version') version) {\n  if (version && version === '5') {\n    return { url: 'https://docs.nestjs.com/v5/' };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Job Handler in a Bull Queue Consumer\nDESCRIPTION: Demonstrates creating a job handler method with the @Process decorator that processes jobs and updates progress. The method receives a job object and can return values that will be stored with the job.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, Process } from '@nestjs/bull';\nimport { Job } from 'bull';\n\n@Processor('audio')\nexport class AudioConsumer {\n  @Process()\n  async transcode(job: Job<unknown>) {\n    let progress = 0;\n    for (let i = 0; i < 100; i++) {\n      await doSomething(job.data);\n      progress += 1;\n      await job.progress(progress);\n    }\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Expandable Variables in NestJS ConfigModule\nDESCRIPTION: Shows how to enable environment variable expansion in the NestJS ConfigModule by setting the expandVariables option to true.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      // ...\n      expandVariables: true,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Integration Test for IoC Container Registration in NestJS\nDESCRIPTION: This code demonstrates how to create an integration test to verify that the IoC container is properly configured in a NestJS application. It uses the TestingModule to load the actual module configuration and checks if providers are registered correctly.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { CatsModule } from './cats.module';\nimport { CatsService } from './cats.service';\n\ndescribe('Cats Module Integration Test', () => {\n  let moduleRef: TestingModule;\n\n  beforeAll(async () => {\n    moduleRef = await Test.createTestingModule({\n      imports: [CatsModule],\n    }).compile();\n  });\n\n  it('should resolve exported providers from the ioc container', () => {\n    const catsService = moduleRef.get(CatsService);\n    expect(catsService).toBeDefined();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthService in TypeScript\nDESCRIPTION: AuthService implementation with a method to validate user credentials. It uses UsersService to retrieve user information and performs password verification.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n\n  async validateUser(username: string, pass: string): Promise<any> {\n    const user = await this.usersService.findOne(username);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Event in NestJS CQRS\nDESCRIPTION: Example of creating an Event class for when a hero kills a dragon. It includes properties for heroId and dragonId.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HeroKilledDragonEvent {\n  constructor(\n    public readonly heroId: string,\n    public readonly dragonId: string,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding a Cron Job in NestJS\nDESCRIPTION: Shows how to dynamically create and add a new cron job using the SchedulerRegistry's addCronJob method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\naddCronJob(name: string, seconds: string) {\n  const job = new CronJob(`${seconds} * * * * *`, () => {\n    this.logger.warn(`time (${seconds}) for job ${name} to run!`);\n  });\n\n  this.schedulerRegistry.addCronJob(name, job);\n  job.start();\n\n  this.logger.warn(\n    `job ${name} added for each minute at ${seconds} seconds!`,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Record Builder Usage\nDESCRIPTION: Example of using RmqRecordBuilder to configure message options like headers and priority\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = ':cat:';\nconst record = new RmqRecordBuilder(message)\n  .setOptions({\n    headers: {\n      ['x-version']: '1.0.0',\n    },\n    priority: 3,\n  })\n  .build();\n\nthis.client.send('replace-emoji', record).subscribe(...);\n```\n\n----------------------------------------\n\nTITLE: Configuring Publish Options for GitHub Integration\nDESCRIPTION: Configuration of publishOptions object for GitHub-specific environment variables and integration settings in the NestJS application bootstrap file.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/ci-cd.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst publishOptions = {\n  apiKey: process.env.DEVTOOLS_API_KEY,\n  repository: process.env.REPOSITORY_NAME,\n  owner: process.env.GITHUB_REPOSITORY_OWNER,\n  sha: process.env.COMMIT_SHA,\n  target: process.env.TARGET_SHA,\n  trigger: process.env.GITHUB_BASE_REF ? 'pull' : 'push',\n  branch: process.env.BRANCH_NAME,\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Exceptions by Type in NestJS CQRS\nDESCRIPTION: Example of filtering specific exception types using the ofType operator with UnhandledExceptionBus.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nthis.unhandledExceptionsBus\n  .pipe(\n    takeUntil(this.destroy$),\n    UnhandledExceptionBus.ofType(TransactionNotAllowedException),\n  )\n  .subscribe((exceptionInfo) => {\n    // Handle exception here\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Package in NestJS\nDESCRIPTION: Command to install the @nestjs/jwt package for JWT manipulation in NestJS applications.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/jwt\n```\n\n----------------------------------------\n\nTITLE: Combining OmitType and PartialType for Advanced DTO Transformation (TypeScript)\nDESCRIPTION: This example shows composability of NestJS mapped types: by wrapping OmitType with PartialType, a class is derived that omits the specified property but sets all remaining properties as optional. This helps minimize boilerplate for PATCH endpoints. Requires @nestjs/mapped-types for both utilities.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UpdateCatDto extends PartialType(\n  OmitType(CreateCatDto, ['name'] as const),\n) {}\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Names in NestJS GraphQL\nDESCRIPTION: This example demonstrates how to customize query names and resolve field names in a NestJS GraphQL resolver. It shows how to decouple method names from GraphQL query names.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => Author)\nexport class AuthorsResolver {\n  constructor(\n    private authorsService: AuthorsService,\n    private postsService: PostsService,\n  ) {}\n\n  @Query(() => Author, { name: 'author' })\n  async getAuthor(@Args('id', { type: () => Int }) id: number) {\n    return this.authorsService.findOneById(id);\n  }\n\n  @ResolveField('posts', () => [Post])\n  async getPosts(@Parent() author: Author) {\n    const { id } = author;\n    return this.postsService.findAll({ authorId: id });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Responses in Swagger Documentation\nDESCRIPTION: Shows how to define global responses for all routes using DocumentBuilder, useful for consistent error handling.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/other-features.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = new DocumentBuilder()\n  .addGlobalResponse({\n    status: 500,\n    description: 'Internal server error',\n  })\n  // other configurations\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service with Sequelize Model Injection\nDESCRIPTION: Creating a UsersService that injects the User model using @InjectModel decorator to perform database operations. Includes both TypeScript and JavaScript syntax.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { User } from './user.model';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User)\n    private userModel: typeof User,\n  ) {}\n\n  async findAll(): Promise<User[]> {\n    return this.userModel.findAll();\n  }\n\n  findOne(id: string): Promise<User> {\n    return this.userModel.findOne({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async remove(id: string): Promise<void> {\n    const user = await this.findOne(id);\n    await user.destroy();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Generated Types with Validation Decorators\nDESCRIPTION: This snippet demonstrates how to extend auto-generated GraphQL types with validation decorators from class-validator. This approach allows for combining schema-first development with declarative validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MinLength, MaxLength } from 'class-validator';\nimport { Post } from '../../graphql.ts';\n\nexport class CreatePostInput extends Post {\n  @MinLength(3)\n  @MaxLength(50)\n  title: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AggregateByTenantContextIdStrategy in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a custom ContextIdStrategy for aggregating requests by tenant in a multi-tenant application. It manages a map of tenant IDs to context IDs and determines whether to use a tenant-specific or request-specific context ID based on the durability of the component tree.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HostComponentInfo,\n  ContextId,\n  ContextIdFactory,\n  ContextIdStrategy,\n} from '@nestjs/core';\nimport { Request } from 'express';\n\nconst tenants = new Map<string, ContextId>();\n\nexport class AggregateByTenantContextIdStrategy implements ContextIdStrategy {\n  attach(contextId: ContextId, request: Request) {\n    const tenantId = request.headers['x-tenant-id'] as string;\n    let tenantSubTreeId: ContextId;\n\n    if (tenants.has(tenantId)) {\n      tenantSubTreeId = tenants.get(tenantId);\n    } else {\n      tenantSubTreeId = ContextIdFactory.create();\n      tenants.set(tenantId, tenantSubTreeId);\n    }\n\n    // If tree is not durable, return the original \"contextId\" object\n    return (info: HostComponentInfo) =>\n      info.isTreeDurable ? tenantSubTreeId : contextId;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Files with Different Field Names in NestJS\nDESCRIPTION: Demonstrates the use of FileFieldsInterceptor to handle multiple file uploads with different field names in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('upload')\n@UseInterceptors(FileFieldsInterceptor([\n  { name: 'avatar', maxCount: 1 },\n  { name: 'background', maxCount: 1 },\n]))\nuploadFile(@UploadedFiles() files: { avatar?: Express.Multer.File[], background?: Express.Multer.File[] }) {\n  console.log(files);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Handler in NestJS CQRS\nDESCRIPTION: Example of creating an Event Handler for the HeroKilledDragonEvent. It implements the IEventHandler interface and uses the @EventsHandler decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@EventsHandler(HeroKilledDragonEvent)\nexport class HeroKilledDragonHandler implements IEventHandler<HeroKilledDragonEvent> {\n  constructor(private repository: HeroesRepository) {}\n\n  handle(event: HeroKilledDragonEvent) {\n    // Business logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TRANSIENT Scope for a Custom Provider in NestJS\nDESCRIPTION: Shows how to specify TRANSIENT scope using the long-hand form for a custom provider registration. TRANSIENT providers are not shared across consumers, with each consumer receiving a new instance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  provide: 'CACHE_MANAGER',\n  useClass: CacheManager,\n  scope: Scope.TRANSIENT,\n}\n```\n\n----------------------------------------\n\nTITLE: Using CheckPolicies Decorator with Class-Based Policy Handler - NestJS - TypeScript\nDESCRIPTION: Shows how to apply the PoliciesGuard and CheckPolicies decorator to a route handler, providing a new instance of a class-based policy handler. This approach places authorization logic in a reusable class, instantiated directly in the decorator. Contains the same requirements as the function-based handler regarding context and entity setup.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Get()\n@UseGuards(PoliciesGuard)\n@CheckPolicies(new ReadArticlePolicyHandler())\nfindAll() {\n  return this.articlesService.findAll();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Response Decorators like @ApiResponse and @ApiCreatedResponse in NestJS\nDESCRIPTION: This snippet illustrates how to define custom HTTP responses for endpoints using decorators like @ApiResponse, and shorthand variants such as @ApiCreatedResponse and @ApiForbiddenResponse. These decorators help generate accurate Swagger documentation reflecting possible API responses.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Post()\n@ApiResponse({ status: 201, description: 'The record has been successfully created.'})\n@ApiResponse({ status: 403, description: 'Forbidden.'})\nasync create(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sub-domain Routing in NestJS\nDESCRIPTION: Demonstrates how to create controllers that respond to specific sub-domains using the host option in the @Controller decorator. The example shows a controller for an admin sub-domain.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller({ host: 'admin.example.com' })\nexport class AdminController {\n  @Get()\n  index(): string {\n    return 'Admin page';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @nestjs/swagger Package\nDESCRIPTION: Command to install the @nestjs/swagger package using npm, which is required for generating OpenAPI specifications in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/swagger\n```\n\n----------------------------------------\n\nTITLE: Creating UsersModule with TypeORM in NestJS\nDESCRIPTION: TypeScript code for the UsersModule, importing TypeOrmModule and configuring it with the User entity.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User } from './user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom LocalAuthGuard in NestJS\nDESCRIPTION: This snippet shows how to create a custom LocalAuthGuard by extending the AuthGuard class. This approach helps avoid using magic strings in the codebase.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n```\n\n----------------------------------------\n\nTITLE: Initializing ThrottlerModule with Global Configuration - TypeScript\nDESCRIPTION: Sets up the ThrottlerModule within a NestJS AppModule using the forRoot method with a global throttler configuration. The 'ttl' (time to live) defines the duration in milliseconds for which request counts are tracked, and 'limit' sets the maximum number of requests allowed within that duration. This basic configuration applies rate limiting to all guarded routes throughout the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n     ThrottlerModule.forRoot({\n      throttlers: [\n        {\n          ttl: 60000,\n          limit: 10,\n        },\n      ],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Using PartialType for Optional Fields in GraphQL\nDESCRIPTION: Example of using PartialType utility to create an UpdateUserInput type where all fields from CreateUserInput become optional.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@InputType()\nexport class UpdateUserInput extends PartialType(CreateUserInput) {}\n```\n\n----------------------------------------\n\nTITLE: Custom ParseIntPipe Implementation in NestJS\nDESCRIPTION: Example of a custom transformation pipe that converts string input to integer values with validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform<string, number> {\n  transform(value: string, metadata: ArgumentMetadata): number {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expandable Environment Variables in NestJS\nDESCRIPTION: Example of nested environment variables where one variable references another using the ${VAR} syntax in a .env file.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\nAPP_URL=mywebsite.com\nSUPPORT_EMAIL=support@${APP_URL}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Methods for Fastify in NestJS 11\nDESCRIPTION: Demonstrates how to configure CORS methods for Fastify in NestJS 11, explicitly defining allowed HTTP methods including non-safelisted ones.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst methods = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE']; // OR comma-delimited string 'GET,POST,PUT,PATH,DELETE'\n\nconst app = await NestFactory.create<NestFastifyApplication>(\n  AppModule,\n  new FastifyAdapter(),\n  { cors: { methods } },\n);\n\n// OR alternatively, you can use the `enableCors` method\nconst app = await NestFactory.create<NestFastifyApplication>(\n  AppModule,\n  new FastifyAdapter(),\n);\napp.enableCors({ methods });\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Types using SDL\nDESCRIPTION: This snippet demonstrates how to define GraphQL schema types using Schema Definition Language (SDL). It includes type definitions for Author, Post, and a Query type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String!\n  votes: Int\n}\n\ntype Query {\n  author(id: Int!): Author\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Controllers with DiscoveryService\nDESCRIPTION: Demonstrates how to fetch all registered controllers in a NestJS application using the DiscoveryService. This is useful for dynamic controller processing like analytics tracking.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/discovery-service.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst controllers = this.discoveryService.getControllers();\nconsole.log(controllers);\n```\n\n----------------------------------------\n\nTITLE: Storing Raw ObjectId Field for Conditional Population - TypeScript\nDESCRIPTION: Configures the 'owner' property to store only the ObjectId reference, without always being populated, by setting its type to mongoose.Types.ObjectId. Enables selective population for related documents. Depends on mongoose, allows distinguishing between populated and raw references.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Prop({ type: { type: mongoose.Schema.Types.ObjectId, ref: 'Owner' } })\n// This ensures the field is not confused with a populated reference\nowner: mongoose.Types.ObjectId;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MongooseModule Async with Class\nDESCRIPTION: Illustrates asynchronous configuration of the MongooseModule by providing a class reference. The module will instantiate this class and call a specific method (defined by an interface) to get the connection options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nMongooseModule.forRootAsync({\n  useClass: MongooseConfigService,\n});\n```\n\n----------------------------------------\n\nTITLE: Registering CacheModule with Multiple Stores in NestJS\nDESCRIPTION: This code snippet demonstrates how to register the CacheModule with multiple cache stores, including an in-memory store (CacheableMemory) and a Redis store. It uses the registerAsync method and a factory function to configure the stores.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { AppController } from './app.controller';\nimport { createKeyv } from '@keyv/redis';\nimport { Keyv } from 'keyv';\nimport { CacheableMemory } from 'cacheable';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      useFactory: async () => {\n        return {\n          stores: [\n            new Keyv({\n              store: new CacheableMemory({ ttl: 60000, lruSize: 5000 }),\n            }),\n            createKeyv('redis://localhost:6379'),\n          ],\n        };\n      },\n    }),\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication in NestJS\nDESCRIPTION: Shows how to implement basic authentication using @ApiBasicAuth decorator and configure it in DocumentBuilder.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/security.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiBasicAuth()\n@Controller('cats')\nexport class CatsController {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = new DocumentBuilder().addBasicAuth();\n```\n\n----------------------------------------\n\nTITLE: Multiple Response Handler Implementation\nDESCRIPTION: Implementation of a WebSocket handler that returns multiple responses using WsResponse interface.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/gateways.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@SubscribeMessage('events')\nhandleEvent(@MessageBody() data: unknown): WsResponse<unknown> {\n  const event = 'events';\n  return { event, data };\n}\n```\n\n----------------------------------------\n\nTITLE: Handling RabbitMQ Client Error Events in NestJS\nDESCRIPTION: Shows how to listen for error events emitted by the RabbitMQ client instance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nthis.client.on('error', (err) => {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Middleware with Request Method Filtering\nDESCRIPTION: Shows how to restrict middleware to specific HTTP methods using RequestMethod enum with detailed route configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module, NestModule, RequestMethod, MiddlewareConsumer } from '@nestjs/common';\nimport { LoggerMiddleware } from './common/middleware/logger.middleware';\nimport { CatsModule } from './cats/cats.module';\n\n@Module({\n  imports: [CatsModule],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes({ path: 'cats', method: RequestMethod.GET });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Request-Scoped Command Handler Configuration\nDESCRIPTION: Configuration of a request-scoped command handler using the CommandHandler decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@CommandHandler(KillDragonCommand, {\n  scope: Scope.REQUEST,\n})\nexport class KillDragonHandler {\n  // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Parser Size Limit in Fastify\nDESCRIPTION: Setting a custom size limit for the JSON body parser in NestJS Fastify application\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/raw-body.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst bodyLimit = 10_485_760; // 10MiB\napp.useBodyParser('application/json', { bodyLimit });\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Kafka Response Topic in NestJS\nDESCRIPTION: Subscribe to a Kafka response topic using the subscribeToResponseOf method in a NestJS controller's onModuleInit lifecycle hook. This is required for implementing the request-response message pattern.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonModuleInit() {\n  this.client.subscribeToResponseOf('hero.kill.dragon');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arguments by Index in NestJS\nDESCRIPTION: Shows how to retrieve specific arguments by their index position using the getArgByIndex() method of ArgumentsHost.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst request = host.getArgByIndex(0);\nconst response = host.getArgByIndex(1);\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in NestJS Response with Express\nDESCRIPTION: This code demonstrates how to attach a cookie to an outgoing response in a NestJS route handler using Express.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nfindAll(@Res({ passthrough: true }) response: Response) {\n  response.cookie('key', 'value')\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Routing Keys in NestJS RabbitMQ\nDESCRIPTION: Shows how to send messages with specific routing keys using the ClientProxy instance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nthis.client.send('cats.meow', { message: 'Meow!' }).subscribe((response) => {\n  console.log(response);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Simultaneous Servers in NestJS\nDESCRIPTION: Configures a NestJS application to listen on multiple ports simultaneously (HTTP and HTTPS). Creates an Express server instance and adapts NestJS to use it, then creates both HTTP and HTTPS servers using native Node.js modules.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/multiple-servers.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst httpsOptions = {\n  key: fs.readFileSync('./secrets/private-key.pem'),\n  cert: fs.readFileSync('./secrets/public-certificate.pem'),\n};\n\nconst server = express();\nconst app = await NestFactory.create(AppModule, new ExpressAdapter(server));\nawait app.init();\n\nconst httpServer = http.createServer(server).listen(3000);\nconst httpsServer = https.createServer(httpsOptions, server).listen(443);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Connections in NestJS Module\nDESCRIPTION: This snippet demonstrates how to set up multiple database connections in a NestJS module using TypeORM. It shows the configuration for two separate databases, one for users and another for albums.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultOptions = {\n  type: 'postgres',\n  port: 5432,\n  username: 'user',\n  password: 'password',\n  database: 'db',\n  synchronize: true,\n};\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      ...defaultOptions,\n      host: 'user_db_host',\n      entities: [User],\n    }),\n    TypeOrmModule.forRoot({\n      ...defaultOptions,\n      name: 'albumsConnection',\n      host: 'album_db_host',\n      entities: [Album],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw Body Access in NestJS Fastify Application\nDESCRIPTION: Setting up a NestJS Fastify application with raw body access enabled through FastifyAdapter configuration\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/raw-body.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport { AppModule } from './app.module';\n\n// in the \"bootstrap\" function\nconst app = await NestFactory.create<NestFastifyApplication>(\n  AppModule,\n  new FastifyAdapter(),\n  {\n    rawBody: true,\n  },\n);\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthGuard with Public Route Check in NestJS\nDESCRIPTION: This code implements an AuthGuard that checks for the 'isPublic' metadata to allow public routes. It also handles JWT verification for protected routes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      // 💡 See this condition\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      // 💡 We're assigning the payload to the request object here\n      // so that we can access it in our route handlers\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Definition Generation Script in NestJS\nDESCRIPTION: This bash command demonstrates how to run the TypeScript definition generation script using ts-node.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ts-node generate-typings\n```\n\n----------------------------------------\n\nTITLE: Adding HMR Script to package.json without CLI\nDESCRIPTION: Script to be added to the package.json file for easily running the NestJS application with Hot Module Replacement enabled when not using the Nest CLI.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"start:dev\": \"webpack --config webpack.config.js --watch\"\n```\n\n----------------------------------------\n\nTITLE: Automatic Plain Object Transformation\nDESCRIPTION: Shows how to automatically transform plain objects into class instances using @SerializeOptions with type specification.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/serialization.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@UseInterceptors(ClassSerializerInterceptor)\n@SerializeOptions({ type: UserEntity })\n@Get()\nfindOne(@Query() { id }: { id: number }): UserEntity {\n  if (id === 1) {\n    return {\n      id: 1,\n      firstName: 'John',\n      lastName: 'Doe',\n      password: 'password',\n    };\n  }\n\n  return {\n    id: 2,\n    firstName: 'Kamil',\n    lastName: 'Mysliwiec',\n    password: 'password2',\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UsersService with TypeORM Repository in NestJS\nDESCRIPTION: TypeScript code for the UsersService, demonstrating injection and usage of TypeORM repository for database operations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository<User>,\n  ) {}\n\n  findAll(): Promise<User[]> {\n    return this.usersRepository.find();\n  }\n\n  findOne(id: number): Promise<User | null> {\n    return this.usersRepository.findOneBy({ id });\n  }\n\n  async remove(id: number): Promise<void> {\n    await this.usersRepository.delete(id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CacheModule with Factory Function in NestJS\nDESCRIPTION: This snippet shows how to use a factory function to asynchronously configure the CacheModule. It demonstrates setting a simple TTL (Time To Live) option.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nCacheModule.registerAsync({\n  useFactory: () => ({\n    ttl: 5,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a Bulk-Create Controller Method with a DTO Array (TypeScript)\nDESCRIPTION: This snippet defines a controller endpoint that accepts an array of DTOs as the request body for bulk operations. Without extra configuration, ValidationPipe may not validate arrays of objects inside DTOs due to lack of metadata for generics, highlighting the need for alternative array validation approaches.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\ncreateBulk(@Body() createUserDtos: CreateUserDto[]) {\n  return 'This action adds new users';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Route with Passport Guard in NestJS\nDESCRIPTION: This code demonstrates how to implement a login route using the AuthGuard provided by @nestjs/passport. It applies the guard to the route and returns the authenticated user.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Request, Post, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller()\nexport class AppController {\n  @UseGuards(AuthGuard('local'))\n  @Post('auth/login')\n  async login(@Request() req) {\n    return req.user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NestJS Monorepo Structure\nDESCRIPTION: Example configuration of a nest-cli.json file for a monorepo project structure. Demonstrates the setup of multiple applications with their respective compiler options and project metadata.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"collection\": \"@nestjs/schematics\",\n  \"sourceRoot\": \"apps/my-project/src\",\n  \"monorepo\": true,\n  \"root\": \"apps/my-project\",\n  \"compilerOptions\": {\n    \"webpack\": true,\n    \"tsConfigPath\": \"apps/my-project/tsconfig.app.json\"\n  },\n  \"projects\": {\n    \"my-project\": {\n      \"type\": \"application\",\n      \"root\": \"apps/my-project\",\n      \"entryFile\": \"main\",\n      \"sourceRoot\": \"apps/my-project/src\",\n      \"compilerOptions\": {\n        \"tsConfigPath\": \"apps/my-project/tsconfig.app.json\"\n      }\n    },\n    \"my-app\": {\n      \"type\": \"application\",\n      \"root\": \"apps/my-app\",\n      \"entryFile\": \"main\",\n      \"sourceRoot\": \"apps/my-app/src\",\n      \"compilerOptions\": {\n        \"tsConfigPath\": \"apps/my-app/tsconfig.app.json\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DTO Class with Swagger Property Decorators\nDESCRIPTION: Definition of a DTO class with @ApiProperty decorators to specify Swagger documentation for each property.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateCatDto {\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty()\n  age: number;\n\n  @ApiProperty()\n  breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CatsService with Mongoose Model in NestJS\nDESCRIPTION: Creates a CatsService that uses the injected Mongoose model to perform CRUD operations on the Cat collection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from 'mongoose';\nimport { Injectable, Inject } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\nimport { CreateCatDto } from './dto/create-cat.dto';\n\n@Injectable()\nexport class CatsService {\n  constructor(\n    @Inject('CAT_MODEL')\n    private catModel: Model<Cat>,\n  ) {}\n\n  async create(createCatDto: CreateCatDto): Promise<Cat> {\n    const createdCat = new this.catModel(createCatDto);\n    return createdCat.save();\n  }\n\n  async findAll(): Promise<Cat[]> {\n    return this.catModel.find().exec();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL-Compatible Auth Guard in NestJS\nDESCRIPTION: Demonstrates how to extend the AuthGuard class for use with GraphQL by overriding the getRequest method. This implementation extracts the request object from the GraphQL context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Cache in NestJS\nDESCRIPTION: Shows how to add items to the cache using the set method, with an optional TTL parameter.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.cacheManager.set('key', 'value');\n\n// With TTL\nawait this.cacheManager.set('key', 'value', 1000);\n\n// Disable expiration\nawait this.cacheManager.set('key', 'value', 0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Hierarchical Module Structure with RouterModule in NestJS\nDESCRIPTION: This example demonstrates how to create a hierarchical module structure using RouterModule. It shows how to register an AdminModule as a parent module with DashboardModule and MetricsModule as children, each with their own path prefixes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/router-module.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    AdminModule,\n    DashboardModule,\n    MetricsModule,\n    RouterModule.register([\n      {\n        path: 'admin',\n        module: AdminModule,\n        children: [\n          {\n            path: 'dashboard',\n            module: DashboardModule,\n          },\n          {\n            path: 'metrics',\n            module: MetricsModule,\n          },\n        ],\n      },\n    ])\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Adapter to Trust Proxy for Rate Limiting - TypeScript\nDESCRIPTION: Sets the 'trust proxy' option on the Express HTTP adapter instance in a NestJS bootstrap function to properly trust incoming proxy headers such as 'X-Forwarded-For'. This is critical to correctly identify client IP addresses when the server runs behind reverse proxies, enabling accurate throttling by IP.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { NestExpressApplication } from '@nestjs/platform-express';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestExpressApplication>(AppModule);\n  app.set('trust proxy', 'loopback'); // Trust requests from the loopback address\n  await app.listen(3000);\n}\n\nbootstrap();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { NestExpressApplication } from '@nestjs/platform-express';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.set('trust proxy', 'loopback'); // Trust requests from the loopback address\n  await app.listen(3000);\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Starting a NestJS Application with CLI\nDESCRIPTION: Command for compiling and running a NestJS application or default project in a workspace with optional project name and various configuration options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/usages.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ nest start <name> [options]\n```\n\n----------------------------------------\n\nTITLE: Registering Kafka Client with ClientsModule in NestJS\nDESCRIPTION: Use the ClientsModule to register a Kafka client in a NestJS module. This setup includes client configuration, consumer group settings, and transport options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ClientsModule.register([\n      {\n        name: 'HERO_SERVICE',\n        transport: Transport.KAFKA,\n        options: {\n          client: {\n            clientId: 'hero',\n            brokers: ['localhost:9092'],\n          },\n          consumer: {\n            groupId: 'hero-consumer'\n          }\n        }\n      },\n    ]),\n  ]\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Global Throttling Settings with @Throttle Decorator - TypeScript\nDESCRIPTION: Shows how to use the @Throttle decorator to override the default global throttling configuration for specific routes or controllers. The decorator receives an object keyed by throttler name, associating it with a limit and ttl configuration for rate limiting. If no named policies exist, the 'default' key must be used. Useful for customizing request limits and durations on selected endpoints.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Override default configuration for Rate limiting and duration.\n@Throttle({ default: { limit: 3, ttl: 60000 } })\n@Get()\nfindAll() {\n  return \"List users works with custom rate limiting.\";\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Global Guards in NestJS Testing\nDESCRIPTION: Shows how to properly register and override globally registered guards in testing environments using useExisting.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nproviders: [\n  {\n    provide: APP_GUARD,\n    useExisting: JwtAuthGuard,\n  },\n  JwtAuthGuard,\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Photo Repository Provider\nDESCRIPTION: Implements the repository pattern for Photo entity using TypeORM's repository.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-typeorm.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from 'typeorm';\nimport { Photo } from './photo.entity';\n\nexport const photoProviders = [\n  {\n    provide: 'PHOTO_REPOSITORY',\n    useFactory: (dataSource: DataSource) => dataSource.getRepository(Photo),\n    inject: ['DATA_SOURCE'],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify Secure Session in NestJS\nDESCRIPTION: Example of registering the fastify-secure-session plugin in a NestJS application using Fastify adapter. It sets up session configuration options including secret and salt.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport secureSession from '@fastify/secure-session';\n\n// somewhere in your initialization file\nconst app = await NestFactory.create<NestFastifyApplication>(\n  AppModule,\n  new FastifyAdapter(),\n);\nawait app.register(secureSession, {\n  secret: 'averylogphrasebiggerthanthirtytwochars',\n  salt: 'mq9hDxBVDbspDR6n',\n});\n```\n\n----------------------------------------\n\nTITLE: REPL Controller Interaction Example\nDESCRIPTION: Example of how to interact with controllers and execute async methods using REPL.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/repl.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> appController = get(AppController)\nAppController { appService: AppService {} }\n> await appController.getHello()\n'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Using Direct Axios Instance\nDESCRIPTION: Example of accessing and using the underlying Axios instance directly through HttpService.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService {\n  constructor(private readonly httpService: HttpService) {}\n\n  findAll(): Promise<AxiosResponse<Cat[]>> {\n    return this.httpService.axiosRef.get('http://localhost:3000/cats');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Module Declaration Example in NestJS\nDESCRIPTION: Example of a static module declaration using the @Module decorator, demonstrating the standard structure of imports, controllers, providers, and exports.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [DogsModule],\n  controllers: [CatsController],\n  providers: [CatsService],\n  exports: [CatsService]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Sequelize Model with Decorators\nDESCRIPTION: Creating a User model class using Sequelize-TypeScript decorators to define table structure and column properties.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Column, Model, Table } from 'sequelize-typescript';\n\n@Table\nexport class User extends Model {\n  @Column\n  firstName: string;\n\n  @Column\n  lastName: string;\n\n  @Column({ defaultValue: true })\n  isActive: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Versions for a Controller in NestJS\nDESCRIPTION: This snippet illustrates how to configure multiple versions for a controller in NestJS. It sets up the controller to handle both version 1 and 2 of the API.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller({\n  version: ['1', '2'],\n})\nexport class CatsController {\n  @Get('cats')\n  findAll(): string {\n    return 'This action returns all cats for version 1 or 2';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mongoose Schema for Cat Model\nDESCRIPTION: Creates a Mongoose schema for the Cat model, defining its structure and data types.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as mongoose from 'mongoose';\n\nexport const CatSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  breed: String,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating message context menu commands with Necord\nDESCRIPTION: Shows how to implement a message context menu command to copy a message's content using Necord decorators.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Context, MessageCommand, MessageCommandContext, TargetMessage } from 'necord';\nimport { Message } from 'discord.js';\n\n@Injectable()\nexport class AppCommands {\n  @MessageCommand({ name: 'Copy Message' })\n  public async copyMessage(\n    @Context() [interaction]: MessageCommandContext,\n    @TargetMessage() message: Message,\n  ) {\n    return interaction.reply({ content: message.content });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom FileValidator in NestJS\nDESCRIPTION: Abstract class definition for creating custom file validators in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class FileValidator<TValidationOptions = Record<string, any>> {\n  constructor(protected readonly validationOptions: TValidationOptions) {}\n\n  /**\n   * Indicates if this file should be considered valid, according to the options passed in the constructor.\n   * @param file the file from the request object\n   */\n  abstract isValid(file?: any): boolean | Promise<boolean>;\n\n  /**\n   * Builds an error message in case the validation fails.\n   * @param file the file from the request object\n   */\n  abstract buildErrorMessage(file: any): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Request-Scoped Bull Queue Consumer\nDESCRIPTION: Demonstrates how to create a request-scoped consumer where a new instance is created for each job and garbage-collected afterward, using the scope option in the @Processor decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n@Processor({\n  name: 'audio',\n  scope: Scope.REQUEST,\n})\n```\n\n----------------------------------------\n\nTITLE: Schema-First User Type Definition\nDESCRIPTION: GraphQL schema definition for User type with Federation key directive\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype User @key(fields: \"id\") {\n  id: ID!\n  name: String!\n}\n\nextend type Query {\n  getUser(id: ID!): User\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the RolesGuard\nDESCRIPTION: This code demonstrates how to register the `RolesGuard` as a global guard using `APP_GUARD`. This ensures that the guard is applied to all routes in the application. The guard can also be registered at the controller level for more granular control.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nproviders: [\n  {\n    provide: APP_GUARD,\n    useClass: RolesGuard,\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Publishing Events in NestJS Microservices\nDESCRIPTION: Shows how to publish events using ClientProxy's emit method for event-driven communication.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nasync publish() {\n  this.client.emit<number>('user_created', new UserCreatedEvent());\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Functional Middleware in NestJS AppModule\nDESCRIPTION: This code snippet shows how to apply the functional logger middleware to specific routes in the AppModule of a NestJS application. It uses the consumer.apply() method to bind the middleware to routes handled by CatsController.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconsumer\n  .apply(logger)\n  .forRoutes(CatsController);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Security Mechanism in NestJS\nDESCRIPTION: Demonstrates how to use @ApiSecurity decorator to define custom security mechanisms for a controller and configure it using DocumentBuilder.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/security.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiSecurity('basic')\n@Controller('cats')\nexport class CatsController {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = new DocumentBuilder().addSecurity('basic', {\n  type: 'http',\n  scheme: 'basic',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Class-Based Policy Handler - NestJS - TypeScript\nDESCRIPTION: Provides a class, ReadArticlePolicyHandler, which implements IPolicyHandler and performs a CASL can check for 'Read' access on Article entities. Designed to be passed as an instance to CheckPolicies. The handle() method is called by the PoliciesGuard for evaluation, encapsulating policy logic for better reusability and testing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ReadArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(Action.Read, Article);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Heartbeat Implementation\nDESCRIPTION: Shows how to implement heartbeat functionality for long-running message processing to prevent session timeouts.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('hero.kill.dragon')\nasync killDragon(@Payload() message: KillDragonMessage, @Ctx() context: KafkaContext) {\n  const heartbeat = context.getHeartbeat();\n\n  // Do some slow processing\n  await doWorkPart1();\n\n  // Send heartbeat to not exceed the sessionTimeout\n  await heartbeat();\n\n  // Do some slow processing again\n  await doWorkPart2();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Multer Options in NestJS MulterModule\nDESCRIPTION: This code shows how to set default Multer options using the static register() method when importing the MulterModule. It demonstrates setting the destination folder for file uploads.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nMulterModule.register({\n  dest: './upload',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Module in NestJS\nDESCRIPTION: Basic module configuration showing how to import HttpModule into a NestJS module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [HttpModule],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring CacheModule with Existing Provider in NestJS\nDESCRIPTION: This example demonstrates how to use an existing configuration provider from another module to configure the CacheModule. It uses the useExisting syntax to reuse an already-created ConfigService.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nCacheModule.registerAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Cookie Parser Middleware in NestJS with Express\nDESCRIPTION: This code demonstrates how to apply the cookie-parser middleware globally in a NestJS application using Express.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cookieParser from 'cookie-parser';\n// somewhere in your initialization file\napp.use(cookieParser());\n```\n\n----------------------------------------\n\nTITLE: Enabling Shutdown Hooks in NestJS Application\nDESCRIPTION: Shows how to enable application shutdown hooks for handling termination signals and graceful shutdown.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lifecycle-events.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  // Starts listening for shutdown hooks\n  app.enableShutdownHooks();\n\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Authentication in NestJS\nDESCRIPTION: Shows how to implement OAuth2 authentication with scope definition using @ApiOAuth2 decorator and configure it in DocumentBuilder.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/security.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiOAuth2(['pets:write'])\n@Controller('cats')\nexport class CatsController {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = new DocumentBuilder().addOAuth2();\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Exception Filters in NestJS\nDESCRIPTION: Shows how to implement an exception filter for GraphQL applications by transforming ArgumentsHost to GqlArgumentsHost. This filter handles HttpExceptions in the GraphQL context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Catch(HttpException)\nexport class HttpExceptionFilter implements GqlExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const gqlHost = GqlArgumentsHost.create(host);\n    return exception;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Global Authentication Guard in NestJS\nDESCRIPTION: Demonstrates how to register a JwtAuthGuard as a global guard using the APP_GUARD provider token. This setup enables automatic authentication for all endpoints without requiring @UseGuards() decorators on each controller.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nproviders: [\n  {\n    provide: APP_GUARD,\n    useClass: JwtAuthGuard,\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Registering Models in the AppModule\nDESCRIPTION: Updating the AppModule to register the User model with Sequelize by adding it to the models array in the configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { User } from './users/user.model';\n\n@Module({\n  imports: [\n    SequelizeModule.forRoot({\n      dialect: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      models: [User],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Route Detection in JwtAuthGuard with Reflector\nDESCRIPTION: Shows how to modify the JwtAuthGuard to detect and allow public routes marked with the @Public() decorator. Uses the Reflector utility to check for metadata on handlers and classes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Gateway in NestJS Module\nDESCRIPTION: Example of registering a WebSocket gateway in a NestJS module configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/gateways.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { EventsGateway } from './events.gateway';\n\n@Module({\n  providers: [EventsGateway]\n})\nexport class EventsModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Union Type Resolver in Schema-First Approach\nDESCRIPTION: Creates a resolver class with a __resolveType method to determine which concrete type a union value should resolve to based on its properties.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver('ResultUnion')\nexport class ResultUnionResolver {\n  @ResolveField()\n  __resolveType(value) {\n    if (value.name) {\n      return 'Author';\n    }\n    if (value.title) {\n      return 'Book';\n    }\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CacheModule with Custom Class in NestJS\nDESCRIPTION: This snippet demonstrates how to use a custom class to provide configuration for the CacheModule. It uses the useClass method to specify a CacheConfigService that implements the CacheOptionsFactory interface.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nCacheModule.registerAsync({\n  useClass: CacheConfigService,\n});\n```\n\n----------------------------------------\n\nTITLE: Async ClientsModule Configuration with Config Service\nDESCRIPTION: Demonstrates asynchronous configuration of ClientsModule using ConfigService for dynamic settings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ClientsModule.registerAsync([\n      {\n        imports: [ConfigModule],\n        name: 'MATH_SERVICE',\n        useFactory: async (configService: ConfigService) => ({\n          transport: Transport.TCP,\n          options: {\n            url: configService.get('URL'),\n          },\n        }),\n        inject: [ConfigService],\n      },\n    ]),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Job Processing in NestJS BullMQ\nDESCRIPTION: Example of handling different job types using a switch case pattern in the process method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { Job } from 'bullmq';\n\n@Processor('audio')\nexport class AudioConsumer extends WorkerHost {\n  async process(job: Job<any, any, string>): Promise<any> {\n    switch (job.name) {\n      case 'transcode': {\n        let progress = 0;\n        for (i = 0; i < 100; i++) {\n          await doSomething(job.data);\n          progress += 1;\n          await job.progress(progress);\n        }\n        return {};\n      }\n      case 'concatenate': {\n        await doSomeLogic2();\n        break;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fastify Controller with Template Rendering\nDESCRIPTION: Controller implementations for Fastify using both @Render decorator and direct response injection\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Get, Controller, Render, Res } from '@nestjs/common';\nimport { FastifyReply } from 'fastify';\n\n@Controller()\nexport class AppController {\n  @Get()\n  @Render('index.hbs')\n  root() {\n    return { message: 'Hello world!' };\n  }\n\n  @Get()\n  root(@Res() res: FastifyReply) {\n    return res.view('index.hbs', { title: 'Hello world!' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Request-Scoped Query Handler Implementation\nDESCRIPTION: Implementation of a request-scoped query handler with injected request context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n@QueryHandler(GetHeroQuery, {\n  scope: Scope.REQUEST,\n})\nexport class GetHeroHandler {\n  constructor(\n    @Inject(REQUEST) private request: MyRequest, // Inject the request context\n  ) {}\n\n  // Handler implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Module with RouterModule in NestJS\nDESCRIPTION: This snippet shows how to use RouterModule.register() to add a prefix to all routes in a specific module. It demonstrates registering the DashboardModule with a '/dashboard' prefix.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/router-module.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    DashboardModule,\n    RouterModule.register([\n      {\n        path: 'dashboard',\n        module: DashboardModule,\n      },\n    ]),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating MQTT Microservice\nDESCRIPTION: Configuration for creating a NestJS microservice using MQTT transport with basic connection options\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/mqtt.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {\n  transport: Transport.MQTT,\n  options: {\n    url: 'mqtt://localhost:1883',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom GraphQL Directive in Code-First Approach\nDESCRIPTION: This example demonstrates how to apply the @upper directive to a field in a code-first approach using the @Directive() decorator from @nestjs/graphql.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/directives.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Directive('@upper')\n@Field()\ntitle: string;\n```\n\n----------------------------------------\n\nTITLE: Specifying Cache TTL for WebSocket Subscribers in NestJS\nDESCRIPTION: Shows how to specify a cache TTL for WebSocket subscribers using the CacheTTL decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@CacheTTL(10)\n@UseInterceptors(CacheInterceptor)\n@SubscribeMessage('events')\nhandleEvent(client: Client, data: string[]): Observable<string[]> {\n  return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js internationalization support\nDESCRIPTION: Command to verify if the Node.js binary has internationalization (ICU) support, which is required by the Nest CLI.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnode -p process.versions.icu\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Files with FilesInterceptor in NestJS\nDESCRIPTION: Example of using FilesInterceptor to handle multiple file uploads in a single field in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('upload')\n@UseInterceptors(FilesInterceptor('files'))\nuploadFile(@UploadedFiles() files: Array<Express.Multer.File>) {\n  console.log(files);\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example\nDESCRIPTION: Sample YAML configuration file structure for application settings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  host: 'localhost'\n  port: 8080\n\ndb:\n  postgres:\n    url: 'localhost'\n    port: 5432\n    database: 'yaml-db'\n\n  sqlite:\n    database: 'sqlite.db'\n```\n\n----------------------------------------\n\nTITLE: Installing HMR Dependencies without CLI\nDESCRIPTION: Command to install the required packages for implementing Hot Module Replacement in a NestJS application without using the Nest CLI.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save-dev webpack webpack-cli webpack-node-externals ts-loader run-script-webpack-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Decorator with @SetMetadata in NestJS\nDESCRIPTION: Demonstrates how to create a custom decorator using the @SetMetadata decorator from NestJS. This approach allows for more control over metadata key and value.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SetMetadata } from '@nestjs/common';\n\nexport const Roles = (...roles: string[]) => SetMetadata('roles', roles);\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Cache Module in NestJS\nDESCRIPTION: Demonstrates how to import and configure the CacheModule in a NestJS application for in-memory caching.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { AppController } from './app.controller';\n\n@Module({\n  imports: [CacheModule.register()],\n  controllers: [AppController],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection Middleware with Express in NestJS\nDESCRIPTION: TypeScript code snippet demonstrating how to set up and use the csrf-csrf middleware for CSRF protection in a NestJS application using Express. It imports necessary functions and applies the protection middleware globally.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/csrf.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { doubleCsrf } from 'csrf-csrf';\n// ...\n// somewhere in your initialization file\nconst {\n  invalidCsrfTokenError, // This is provided purely for convenience if you plan on creating your own middleware.\n  generateToken, // Use this in your routes to generate and provide a CSRF hash, along with a token cookie and token.\n  validateRequest, // Also a convenience if you plan on making your own middleware.\n  doubleCsrfProtection, // This is the default CSRF protection middleware.\n} = doubleCsrf(doubleCsrfOptions);\napp.use(doubleCsrfProtection);\n```\n\n----------------------------------------\n\nTITLE: Installing Express Session Package\nDESCRIPTION: Command to install the express-session package and its TypeScript types for use with NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i express-session\n$ npm i -D @types/express-session\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validation Function in NestJS ConfigModule\nDESCRIPTION: Shows how to apply a custom validation function to the ConfigModule to validate environment variables during application bootstrap.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { validate } from './env.validation';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validate,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Sandbox in NestJS GraphQL\nDESCRIPTION: This code shows how to configure the GraphQLModule to use Apollo Sandbox instead of graphql-playground as the GraphQL IDE for local development.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloServerPluginLandingPageLocalDefault } from '@apollo/server/plugin/landingPage/default';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloDriverConfig>({\n      driver: ApolloDriver,\n      playground: false,\n      plugins: [ApolloServerPluginLandingPageLocalDefault()],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating Durable Provider using Injectable Decorator in TypeScript\nDESCRIPTION: This code snippet shows how to create a durable provider using the @Injectable decorator. The provider is set to request scope and marked as durable.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.REQUEST, durable: true })\nexport class CatsService {}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Module Initialization in NestJS\nDESCRIPTION: Demonstrates how to implement asynchronous module initialization using async/await pattern with lifecycle hooks.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lifecycle-events.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync onModuleInit(): Promise<void> {\n  await this.fetch();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NATS Microservice\nDESCRIPTION: Configuration for creating a NestJS microservice using NATS transport with basic server connection settings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {\n  transport: Transport.NATS,\n  options: {\n    servers: ['nats://localhost:4222'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Cache Manager in NestJS\nDESCRIPTION: Shows how to inject the cache manager instance into a class using the CACHE_MANAGER token.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Module with HTTP\nDESCRIPTION: Complete HealthModule configuration including HTTP module and controller\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HttpModule } from '@nestjs/axios';\nimport { HealthController } from './health.controller';\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n```\n\n----------------------------------------\n\nTITLE: Module with Dependency Injection\nDESCRIPTION: Demonstrates how to inject providers into a module class for configuration purposes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {\n  constructor(private catsService: CatsService) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Schedule Module in NestJS\nDESCRIPTION: Configuration to activate job scheduling by importing ScheduleModule into the root AppModule.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { ScheduleModule } from '@nestjs/schedule';\n\n@Module({\n  imports: [\n    ScheduleModule.forRoot()\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Library-Specific Response Handling in NestJS\nDESCRIPTION: Demonstrates how to use library-specific response objects in NestJS controllers using the @Res() decorator, with examples for both standard and passthrough modes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Post, Res, HttpStatus } from '@nestjs/common';\nimport { Response } from 'express';\n\n@Controller('cats')\nexport class CatsController {\n  @Post()\n  create(@Res() res: Response) {\n    res.status(HttpStatus.CREATED).send();\n  }\n\n  @Get()\n  findAll(@Res() res: Response) {\n     res.status(HttpStatus.OK).json([]);\n  }\n}\n\n@Get()\nfindAll(@Res({ passthrough: true }) res: Response) {\n  res.status(HttpStatus.OK);\n  return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Interceptors with Dependency Injection in NestJS\nDESCRIPTION: This snippet shows how to set up a global interceptor within a module to enable dependency injection for the interceptor.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\n\n@Module({\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LoggingInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Setting Field-Level Complexity in GraphQL Schema\nDESCRIPTION: Example of setting complexity for a field using the @Field decorator\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/complexity.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Field({ complexity: 3 })\ntitle: string;\n```\n\n----------------------------------------\n\nTITLE: Using Default Configuration Values\nDESCRIPTION: Demonstrates setting default values when accessing configuration properties\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// use \"localhost\" when \"database.host\" is not defined\nconst dbHost = this.configService.get<string>('database.host', 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Using PickType in GraphQL Schema\nDESCRIPTION: Example of using PickType utility to create a new type by selecting specific properties from an existing type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@InputType()\nexport class UpdateEmailInput extends PickType(CreateUserInput, [\n  'email',\n] as const) {}\n```\n\n----------------------------------------\n\nTITLE: Disabling Detailed Error Messages in ValidationPipe\nDESCRIPTION: This code snippet shows how to disable detailed error messages in the `ValidationPipe` by passing an options object with `disableErrorMessages` set to `true`. This can be useful in production environments where detailed error messages are not desired.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napp.useGlobalPipes(\n  new ValidationPipe({\n    disableErrorMessages: true,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating .dockerignore File for NestJS Project\nDESCRIPTION: This .dockerignore file specifies which files and directories should be ignored when building the Docker image. It helps keep the image lightweight by excluding unnecessary files.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules\ndist\n*.log\n*.md\n.git\n```\n\n----------------------------------------\n\nTITLE: Defining Model Reference (Population) in Mongoose Schema - TypeScript\nDESCRIPTION: Configures an 'owner' property as a reference to another collection, enabling Mongoose population. Uses mongoose.Schema.Types.ObjectId and the 'ref' option for linking to the Owner model. Depends on mongoose and correct definition of the Owner schema; allows efficient cross-collection queries.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as mongoose from 'mongoose';\nimport { Owner } from '../owners/schemas/owner.schema';\n\n// inside the class definition\n@Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Owner' })\nowner: Owner;\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Getter Functions for Config Service in NestJS (JavaScript)\nDESCRIPTION: JavaScript version of implementing a custom service with getter methods for configuration values using NestJS's dependency injection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n@Dependencies(ConfigService)\n@Injectable()\nexport class ApiConfigService {\n  constructor(configService) {\n    this.configService = configService;\n  }\n\n  get isAuthEnabled() {\n    return this.configService.get('AUTH_ENABLED') === 'true';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting NestJS Application with SWC Builder\nDESCRIPTION: Command to start a NestJS application using the SWC builder for faster compilation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nest start -b swc\n# OR nest start --builder swc\n```\n\n----------------------------------------\n\nTITLE: Registering Field Middleware and Extensions in NestJS GraphQL\nDESCRIPTION: Example showing how to combine the @Field decorator with middleware and @Extensions decorator to implement field-level access control for a password field.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/extensions.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Field({ middleware: [checkRoleMiddleware] })\n@Extensions({ role: Role.ADMIN })\npassword: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring MulterModule Asynchronously with Class in NestJS\nDESCRIPTION: This code demonstrates how to use registerAsync() with a class to configure MulterModule. It includes an example of a class implementing the MulterOptionsFactory interface to provide Multer options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nMulterModule.registerAsync({\n  useClass: MulterConfigService,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass MulterConfigService implements MulterOptionsFactory {\n  createMulterOptions(): MulterModuleOptions {\n    return {\n      dest: './upload',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQLModule with Schema-First Approach in NestJS\nDESCRIPTION: This snippet demonstrates how to set up the GraphQLModule using the schema-first approach, specifying the location of GraphQL SDL schema definition files.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  typePaths: ['./**/*.graphql'],\n}),\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Redis Driver in NestJS Microservice\nDESCRIPTION: Demonstrates how to access the underlying Redis driver instances for both publishing and subscribing, enabling advanced use cases or driver-specific operations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst [pub, sub] =\n  this.client.unwrap<[import('ioredis').Redis, import('ioredis').Redis]>();\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding a Timeout in NestJS\nDESCRIPTION: Shows how to dynamically create and add a new timeout using the SchedulerRegistry's addTimeout method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\naddTimeout(name: string, milliseconds: number) {\n  const callback = () => {\n    this.logger.warn(`Timeout ${name} executing after (${milliseconds})!`);\n  };\n\n  const timeout = setTimeout(callback, milliseconds);\n  this.schedulerRegistry.addTimeout(name, timeout);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Arrays in Controller Methods with ParseArrayPipe (TypeScript)\nDESCRIPTION: This snippet applies ParseArrayPipe to validate arrays of objects in the request body, ensuring each item conforms to the specified DTO class type. The pipe is constructed with items:CreateUserDto, and is useful for accepting bulk data in POST endpoints while maintaining strong type safety. Requires @nestjs/common's ParseArrayPipe.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\ncreateBulk(\n  @Body(new ParseArrayPipe({ items: CreateUserDto }))\n  createUserDtos: CreateUserDto[],\n) {\n  return 'This action adds new users';\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling URI Versioning in NestJS\nDESCRIPTION: This snippet demonstrates how to enable URI versioning in a NestJS application. It uses the VersioningType.URI option to configure versioning in the main application file.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\n// or \"app.enableVersioning()\"\napp.enableVersioning({\n  type: VersioningType.URI,\n});\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing User Service with Prisma\nDESCRIPTION: User service implementation with CRUD operations using Prisma Client\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { User, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prisma: PrismaService) {}\n\n  async user(\n    userWhereUniqueInput: Prisma.UserWhereUniqueInput,\n  ): Promise<User | null> {\n    return this.prisma.user.findUnique({\n      where: userWhereUniqueInput,\n    });\n  }\n\n  async users(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise<User[]> {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createUser(data: Prisma.UserCreateInput): Promise<User> {\n    return this.prisma.user.create({\n      data,\n    });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise<User> {\n    const { where, data } = params;\n    return this.prisma.user.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise<User> {\n    return this.prisma.user.delete({\n      where,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Mongoose Model in the Module with forFeature - NestJS TypeScript\nDESCRIPTION: Registers the Cat schema with the MongooseModule within a domain-specific module. The MongooseModule.forFeature method makes the Cat model available for dependency injection in providers. Requires @nestjs/mongoose and a defined CatSchema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\nimport { Cat, CatSchema } from './schemas/cat.schema';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: Cat.name, schema: CatSchema }])],\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Redis Client Status Updates in NestJS\nDESCRIPTION: Example of how to subscribe to status updates from the Redis client, providing real-time information about the connection and driver state.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis.client.status.subscribe((status: RedisStatus) => {\n  console.log(status);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Dependencies in NestJS\nDESCRIPTION: Installation of required packages for JWT implementation including @nestjs/jwt for JWT manipulation and passport-jwt for JWT strategy.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/jwt passport-jwt\n$ npm install --save-dev @types/passport-jwt\n```\n\n----------------------------------------\n\nTITLE: Configuring CatsModule with Mongoose Integration\nDESCRIPTION: Sets up the CatsModule by importing the DatabaseModule and including the necessary controllers, services, and providers for Mongoose integration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\nimport { catsProviders } from './cats.providers';\nimport { DatabaseModule } from '../database/database.module';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [CatsController],\n  providers: [\n    CatsService,\n    ...catsProviders,\n  ],\n})\nexport class CatsModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Logging Interceptor in NestJS\nDESCRIPTION: This snippet demonstrates how to create a LoggingInterceptor class that logs the execution time of route handlers. It uses RxJS operators to manipulate the response stream.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    console.log('Before...');\n\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(\n        tap(() => console.log(`After... ${Date.now() - now}ms`)),\n      );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Script for On-Demand TypeScript Definition Generation in NestJS\nDESCRIPTION: This script uses the GraphQLDefinitionsFactory to generate TypeScript definitions from GraphQL SDL files on demand.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLDefinitionsFactory } from '@nestjs/graphql';\nimport { join } from 'path';\n\nconst definitionsFactory = new GraphQLDefinitionsFactory();\ndefinitionsFactory.generate({\n  typePaths: ['./src/**/*.graphql'],\n  path: join(process.cwd(), 'src/graphql.ts'),\n  outputAs: 'class',\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Commit in NestJS Kafka Microservice Configuration\nDESCRIPTION: This snippet demonstrates how to disable auto-committing of messages in the NestJS Kafka microservice configuration by setting 'autoCommit: false' in the 'run' options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {\n  transport: Transport.KAFKA,\n  options: {\n    client: {\n      brokers: ['localhost:9092'],\n    },\n    run: {\n      autoCommit: false\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple DTOs with IntersectionType Utility in NestJS (TypeScript)\nDESCRIPTION: This code combines properties from two DTO classes into a new class using IntersectionType from @nestjs/mapped-types, creating a compound DTO for scenarios requiring merged data contracts. Both class references are passed to IntersectionType. Ensure correct imports and type compatibility when using this utility.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CreateCatDto {\n  name: string;\n  breed: string;\n}\n\nexport class AdditionalCatInfo {\n  color: string;\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UpdateCatDto extends IntersectionType(\n  CreateCatDto,\n  AdditionalCatInfo,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Transporter in NestJS Microservice\nDESCRIPTION: Example of how to set up the Redis transporter in a NestJS microservice using the createMicroservice method. It specifies the transport type and connection options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {\n  transport: Transport.REDIS,\n  options: {\n    host: 'localhost',\n    port: 6379,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Unit Testing NestJS Controller and Service\nDESCRIPTION: Example of a unit test for CatsController and CatsService using Jest. It demonstrates manual instantiation of classes and mocking of service methods.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\ndescribe('CatsController', () => {\n  let catsController: CatsController;\n  let catsService: CatsService;\n\n  beforeEach(() => {\n    catsService = new CatsService();\n    catsController = new CatsController(catsService);\n  });\n\n  describe('findAll', () => {\n    it('should return an array of cats', async () => {\n      const result = ['test'];\n      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);\n\n      expect(await catsController.findAll()).toBe(result);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Middleware in NestJS\nDESCRIPTION: This snippet shows how to apply middleware globally to all routes in a NestJS application. It uses the app.use() method on the NestFactory-created application instance to bind the logger middleware to all routes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\napp.use(logger);\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Using CurrentUser Decorator in GraphQL Resolver\nDESCRIPTION: Demonstrates how to use the CurrentUser decorator in a GraphQL resolver to access the authenticated user. This example shows a whoAmI query that returns the current user's data.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n@Query(() => User)\n@UseGuards(GqlAuthGuard)\nwhoAmI(@CurrentUser() user: User) {\n  return this.usersService.findById(user.id);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Service Implementation\nDESCRIPTION: Complete implementation of a custom logger service implementing the LoggerService interface.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoggerService, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class MyLogger implements LoggerService {\n  /**\n   * Write a 'log' level log.\n   */\n  log(message: any, ...optionalParams: any[]) {}\n\n  /**\n   * Write a 'fatal' level log.\n   */\n  fatal(message: any, ...optionalParams: any[]) {}\n\n  /**\n   * Write an 'error' level log.\n   */\n  error(message: any, ...optionalParams: any[]) {}\n\n  /**\n   * Write a 'warn' level log.\n   */\n  warn(message: any, ...optionalParams: any[]) {}\n\n  /**\n   * Write a 'debug' level log.\n   */\n  debug?(message: any, ...optionalParams: any[]) {}\n\n  /**\n   * Write a 'verbose' level log.\n   */\n  verbose?(message: any, ...optionalParams: any[]) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Middleware in NestJS\nDESCRIPTION: This example demonstrates how to apply multiple middleware functions sequentially in a NestJS application. It uses the consumer.apply() method with a comma-separated list of middleware functions, including cors, helmet, and a custom logger.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconsumer.apply(cors(), helmet(), logger).forRoutes(CatsController);\n```\n\n----------------------------------------\n\nTITLE: Initializing LazyModuleLoader in Service Class\nDESCRIPTION: Shows how to inject and initialize the LazyModuleLoader in a service class using dependency injection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lazy-loading-modules.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService {\n  constructor(private lazyModuleLoader: LazyModuleLoader) {}\n}\n```\n\n----------------------------------------\n\nTITLE: ConfigService with Injected Options\nDESCRIPTION: Final implementation of ConfigService using dependency injection for options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as dotenv from 'dotenv';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { Injectable, Inject } from '@nestjs/common';\nimport { EnvConfig } from './interfaces';\n\n@Injectable()\nexport class ConfigService {\n  private readonly envConfig: EnvConfig;\n\n  constructor(@Inject('CONFIG_OPTIONS') private options: Record<string, any>) {\n    const filePath = `${process.env.NODE_ENV || 'development'}.env`;\n    const envFile = path.resolve(__dirname, '../../', options.folder, filePath);\n    this.envConfig = dotenv.parse(fs.readFileSync(envFile));\n  }\n\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Definition for Schema-First Enum\nDESCRIPTION: Shows the TypeScript enum that would be generated from a schema-first GraphQL enum definition.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AllowedColor {\n  RED\n  GREEN\n  BLUE\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple References in Mongoose Schema - TypeScript\nDESCRIPTION: Establishes an 'owners' property as an array of references to the Owner collection. Wraps the type option in an array for Mongoose schema configuration. Useful for one-to-many relationships. Dependencies: mongoose, Owner schema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Prop({ type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Owner' }] })\nowners: Owner[];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring NATS Client Module\nDESCRIPTION: Setting up NATS client using ClientsModule with server configuration and service name.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ClientsModule.register([\n      {\n        name: 'MATH_SERVICE',\n        transport: Transport.NATS,\n        options: {\n          servers: ['nats://localhost:4222'],\n        }\n      },\n    ]),\n  ]\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Controller-based Middleware Configuration\nDESCRIPTION: Demonstrates applying middleware to specific controller classes instead of route paths. Shows integration with CatsController.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';\nimport { LoggerMiddleware } from './common/middleware/logger.middleware';\nimport { CatsModule } from './cats/cats.module';\nimport { CatsController } from './cats/cats.controller';\n\n@Module({\n  imports: [CatsModule],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes(CatsController);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Input Type for GraphQL Mutations in NestJS\nDESCRIPTION: Defining an input type class using @InputType() decorator to pass complex objects as arguments to GraphQL mutations. This example creates an UpvotePostInput class with a postId field.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InputType, Field } from '@nestjs/graphql';\n\n@InputType()\nexport class UpvotePostInput {\n  @Field()\n  postId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Exception Filter in NestJS\nDESCRIPTION: Illustrates how to apply a WebSocket exception filter to a specific message handler using the @UseFilters decorator in a NestJS gateway.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/exception-filters.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@UseFilters(new WsExceptionFilter())\n@SubscribeMessage('events')\nonEvent(client, data: any): WsResponse<any> {\n  const event = 'events';\n  return { event, data };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify to Listen on All Interfaces\nDESCRIPTION: Example showing how to configure Fastify to accept connections from any host by binding to 0.0.0.0.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    new FastifyAdapter(),\n  );\n  await app.listen(3000, '0.0.0.0');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Middleware in NestJS TypeScript\nDESCRIPTION: This snippet demonstrates how to create a simple functional middleware for logging requests in NestJS. It defines a logger function that takes Express Request, Response, and NextFunction as parameters.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Request, Response, NextFunction } from 'express';\n\nexport function logger(req: Request, res: Response, next: NextFunction) {\n  console.log(`Request...`);\n  next();\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function logger(req, res, next) {\n  console.log(`Request...`);\n  next();\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Cron Jobs in NestJS Service\nDESCRIPTION: Example of creating a cron job using @Cron decorator that executes at second 45 of every minute.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\n\n@Injectable()\nexport class TasksService {\n  private readonly logger = new Logger(TasksService.name);\n\n  @Cron('45 * * * * *')\n  handleCron() {\n    this.logger.debug('Called when the current second is 45');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Factory Method Name\nDESCRIPTION: Shows how to customize the factory method name using setFactoryMethodName()\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =\n  new ConfigurableModuleBuilder<ConfigModuleOptions>().setFactoryMethodName('createConfigOptions').build();\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Microservice\nDESCRIPTION: Demonstrates how to send messages to a microservice using ClientProxy's send method with pattern and payload.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\naccumulate(): Observable<number> {\n  const pattern = { cmd: 'sum' };\n  const payload = [1, 2, 3];\n  return this.client.send<number>(pattern, payload);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helmet with Apollo Server Fastify in NestJS\nDESCRIPTION: TypeScript code showing how to configure Helmet with specific Content Security Policy (CSP) settings to work with Apollo Server Fastify in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/helmet.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait app.register(fastifyHelmet, {\n   contentSecurityPolicy: {\n     directives: {\n       defaultSrc: [`'self'`, 'unpkg.com'],\n       styleSrc: [\n         `'self'`,\n         `'unsafe-inline'`,\n         'cdn.jsdelivr.net',\n         'fonts.googleapis.com',\n         'unpkg.com',\n       ],\n       fontSrc: [`'self'`, 'fonts.gstatic.com', 'data:'],\n       imgSrc: [`'self'`, 'data:', 'cdn.jsdelivr.net'],\n       scriptSrc: [\n         `'self'`,\n         `https: 'unsafe-inline'`,\n         `cdn.jsdelivr.net`,\n         `'unsafe-eval'`,\n       ],\n     },\n   },\n });\n\n// If you are not going to use CSP at all, you can use this:\nawait app.register(fastifyHelmet, {\n  contentSecurityPolicy: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Response Headers in NestJS\nDESCRIPTION: Shows how to set custom HTTP response headers using the @Header decorator. The example demonstrates setting a Cache-Control header for a POST endpoint.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@Header('Cache-Control', 'no-store')\ncreate() {\n  return 'This action adds a new cat';\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Sequelize Configuration in NestJS\nDESCRIPTION: Shows how to use forRootAsync to configure Sequelize asynchronously in NestJS. This method allows for dynamic configuration based on environment variables or other asynchronous sources.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nSequelizeModule.forRootAsync({\n  imports: [ConfigModule],\n  useFactory: (configService: ConfigService) => ({\n    dialect: 'mysql',\n    host: configService.get('HOST'),\n    port: +configService.get('PORT'),\n    username: configService.get('USERNAME'),\n    password: configService.get('PASSWORD'),\n    database: configService.get('DATABASE'),\n    models: [],\n  }),\n  inject: [ConfigService],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Null-to-Empty-String Transformation Interceptor in NestJS\nDESCRIPTION: This interceptor transforms null values to empty strings in the response. It demonstrates how to create a reusable solution for data transformation across an entire application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    return next\n      .handle()\n      .pipe(map(value => value === null ? '' : value ));\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ExcludeNullInterceptor {\n  intercept(context, next) {\n    return next\n      .handle()\n      .pipe(map(value => value === null ? '' : value ));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Strategy in NestJS with Passport\nDESCRIPTION: Creates a JWT strategy class that extends PassportStrategy to handle JWT token validation. The strategy extracts JWT from the Authorization header, verifies its validity, and returns user information from the payload.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MongooseOptionsFactory for Async Configuration\nDESCRIPTION: Defines a class that implements the `MongooseOptionsFactory` interface, required when using the `useClass` option for asynchronous module configuration. The `createMongooseOptions` method must return the Mongoose connection options object.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class MongooseConfigService implements MongooseOptionsFactory {\n  createMongooseOptions(): MongooseModuleOptions {\n    return {\n      uri: 'mongodb://localhost/nest',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Context\nDESCRIPTION: Example of handling RabbitMQ messages with context and payload decorators\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('notifications')\ngetNotifications(@Payload() data: number[], @Ctx() context: RmqContext) {\n  console.log(`Pattern: ${context.getPattern()}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking ContextIdFactory for Request-Scoped Testing in NestJS\nDESCRIPTION: This snippet shows how to create a context identifier and mock the ContextIdFactory to use this ID for all incoming requests during testing. This allows access to a consistent DI container sub-tree for request-scoped providers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst contextId = ContextIdFactory.create();\njest\n  .spyOn(ContextIdFactory, 'getByRequest')\n  .mockImplementation(() => contextId);\n```\n\n----------------------------------------\n\nTITLE: Bearer Authentication in NestJS\nDESCRIPTION: Demonstrates implementation of bearer token authentication using @ApiBearerAuth decorator and its DocumentBuilder configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/security.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiBearerAuth()\n@Controller('cats')\nexport class CatsController {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = new DocumentBuilder().addBearerAuth();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Cache Interceptor in NestJS\nDESCRIPTION: This interceptor demonstrates how to implement a simple caching mechanism. It overrides the response stream to return cached data when available, preventing the execution of the route handler.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable, of } from 'rxjs';\n\n@Injectable()\nexport class CacheInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const isCached = true;\n    if (isCached) {\n      return of([]);\n    }\n    return next.handle();\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { of } from 'rxjs';\n\n@Injectable()\nexport class CacheInterceptor {\n  intercept(context, next) {\n    const isCached = true;\n    if (isCached) {\n      return of([]);\n    }\n    return next.handle();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Data Models\nDESCRIPTION: Schema definition for User and Post models with relationships.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nmodel User {\n  id    Int     @default(autoincrement()) @id\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int      @default(autoincrement()) @id\n  title     String\n  content   String?\n  published Boolean? @default(false)\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query in NestJS\nDESCRIPTION: This snippet demonstrates how to define a GraphQL query using the @Query() decorator in a NestJS resolver class. It shows how to specify the return type and handle arguments.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Query(() => Author)\nasync author(@Args('id', { type: () => Int }) id: number) {\n  return this.authorsService.findOneById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Array Type Properties in Mongoose Schema - TypeScript\nDESCRIPTION: Specifies that the 'tags' property is an array of strings within the schema using NestJS's @Prop decorator. Requires @nestjs/mongoose and TypeScript reflection for type metadata. Useful for representing collections of items in a document field.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Prop([String])\ntags: string[];\n\n```\n\n----------------------------------------\n\nTITLE: Implementing UsersService in TypeScript\nDESCRIPTION: Definition of UsersService class with a hard-coded list of users and a method to find a user by username. This service encapsulates user operations for the authentication process.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\n\n// This should be a real class/interface representing a user entity\nexport type User = any;\n\n@Injectable()\nexport class UsersService {\n  private readonly users = [\n    {\n      userId: 1,\n      username: 'john',\n      password: 'changeme',\n    },\n    {\n      userId: 2,\n      username: 'maria',\n      password: 'guess',\n    },\n  ];\n\n  async findOne(username: string): Promise<User | undefined> {\n    return this.users.find(user => user.username === username);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Exception Response\nDESCRIPTION: Example of throwing an HttpException with a custom error response and status code.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nasync findAll() {\n  try {\n    await this.service.findAll()\n  } catch (error) {\n    throw new HttpException({\n      status: HttpStatus.FORBIDDEN,\n      error: 'This is a custom message',\n    }, HttpStatus.FORBIDDEN, {\n      cause: error\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Build Script via NPM\nDESCRIPTION: Executes the 'build' script defined in the project's package.json file using npm. This typically invokes the locally installed NestJS CLI's build command (`nest build`), leveraging project-specific dependencies and configurations for compiling the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/scripts.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Accessing HttpAdapter Instance in NestJS\nDESCRIPTION: Shows how to access the actual HttpAdapter instance from the HttpAdapterHost.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/http-adapter.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst adapterHost = app.get(HttpAdapterHost);\nconst httpAdapter = adapterHost.httpAdapter;\n```\n\n----------------------------------------\n\nTITLE: Creating an Exception Filter that Extends BaseExceptionFilter in NestJS\nDESCRIPTION: Demonstrates how to extend the built-in BaseExceptionFilter to inherit its behavior while allowing for custom overrides. This pattern enables delegation of exception processing to the base filter.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Catch, ArgumentsHost } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n\n@Catch()\nexport class AllExceptionsFilter extends BaseExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    super.catch(exception, host);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Helmet for Fastify in NestJS\nDESCRIPTION: Command to install the Fastify-specific Helmet package for use in a NestJS application with FastifyAdapter.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/helmet.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @fastify/helmet\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Providers with Full Provider Object in NestJS\nDESCRIPTION: This example shows how to export a custom provider using the full provider object instead of just the token.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst connectionFactory = {\n  provide: 'CONNECTION',\n  useFactory: (optionsProvider: OptionsProvider) => {\n    const options = optionsProvider.get();\n    return new DatabaseConnection(options);\n  },\n  inject: [OptionsProvider],\n};\n\n@Module({\n  providers: [connectionFactory],\n  exports: [connectionFactory],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Importing a Library Module in a Nest.js Application\nDESCRIPTION: Example of importing a library module into an application module. This demonstrates the usage of the path alias (@app) that was configured during library creation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/libraries.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MyLibraryModule } from '@app/my-library';\n\n@Module({\n  imports: [MyLibraryModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating a gRPC Microservice in NestJS\nDESCRIPTION: Example of setting up a NestJS application as a gRPC microservice with configuration for the hero service. It specifies the transport type and options including the package name and path to the proto file.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {\n  transport: Transport.GRPC,\n  options: {\n    package: 'hero',\n    protoPath: join(__dirname, 'hero/hero.proto'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using @Client Decorator for gRPC Client in NestJS\nDESCRIPTION: Alternative approach using @Client decorator to instantiate gRPC client with transport and proto configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class AppService implements OnModuleInit {\n  @Client({\n    transport: Transport.GRPC,\n    options: {\n      package: 'hero',\n      protoPath: join(__dirname, 'hero/hero.proto'),\n    },\n  })\n  client: ClientGrpc;\n\n  private heroesService: HeroesService;\n\n  onModuleInit() {\n    this.heroesService = this.client.getService<HeroesService>('HeroesService');\n  }\n\n  getHero(): Observable<string> {\n    return this.heroesService.findOne({ id: 1 });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting LazyModuleLoader from Application Instance\nDESCRIPTION: Demonstrates how to obtain the LazyModuleLoader instance from the main application bootstrap file.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lazy-loading-modules.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst lazyModuleLoader = app.get(LazyModuleLoader);\n```\n\n----------------------------------------\n\nTITLE: Filtering Subscriptions with Access to Resolver Instance in NestJS\nDESCRIPTION: Demonstrates how to implement a subscription filter with access to the resolver instance, allowing use of injected providers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Subscription(() => Comment, {\n  filter(this: AuthorResolver, payload, variables) {\n    // \"this\" refers to an instance of \"AuthorResolver\"\n    return payload.commentAdded.title === variables.title;\n  }\n})\ncommentAdded(@Args('title') title: string, @Context('pubsub') pubSub: PubSub) {\n  return pubSub.subscribe('commentAdded');\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Microservice Configuration\nDESCRIPTION: Demonstrates configuration setup for Kafka microservice with client ID and consumer group settings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {\n  transport: Transport.KAFKA,\n  options: {\n    client: {\n      clientId: 'hero', // hero-server\n      brokers: ['localhost:9092'],\n    },\n    consumer: {\n      groupId: 'hero-consumer' // hero-consumer-server\n    },\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SequelizeOptionsFactory for Configuration in NestJS\nDESCRIPTION: Demonstrates how to create a custom service that implements SequelizeOptionsFactory to provide Sequelize configuration options. This approach allows for more complex configuration logic.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass SequelizeConfigService implements SequelizeOptionsFactory {\n  createSequelizeOptions(): SequelizeModuleOptions {\n    return {\n      dialect: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      models: [],\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Version in NestJS\nDESCRIPTION: This code shows how to set a global default version for controllers and routes in a NestJS application. It allows specifying a single version, multiple versions, or VERSION_NEUTRAL as the default.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napp.enableVersioning({\n  // ...\n  defaultVersion: '1'\n  // or\n  defaultVersion: ['1', '2']\n  // or\n  defaultVersion: VERSION_NEUTRAL\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values\nDESCRIPTION: Examples of retrieving environment variables and custom configuration values using ConfigService\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// get an environment variable\nconst dbUser = this.configService.get<string>('DATABASE_USER');\n\n// get a custom configuration value\nconst dbHost = this.configService.get<string>('database.host');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resolver Class for Authors in NestJS\nDESCRIPTION: Complete implementation of an AuthorsResolver class with both query and field resolvers. This demonstrates how to create query handlers and resolve related fields using the @Parent decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => Author)\nexport class AuthorsResolver {\n  constructor(\n    private authorsService: AuthorsService,\n    private postsService: PostsService,\n  ) {}\n\n  @Query(() => Author)\n  async author(@Args('id', { type: () => Int }) id: number) {\n    return this.authorsService.findOneById(id);\n  }\n\n  @ResolveField()\n  async posts(@Parent() author: Author) {\n    const { id } = author;\n    return this.postsService.findAll({ authorId: id });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config Service in NestJS Application (JavaScript)\nDESCRIPTION: JavaScript version of using a custom config service with getter methods in a NestJS service.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n@Dependencies(ApiConfigService)\n@Injectable()\nexport class AppService {\n  constructor(apiConfigService) {\n    if (apiConfigService.isAuthEnabled) {\n      // Authentication is enabled\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Specific Named Mongoose Connection in a NestJS Feature Module\nDESCRIPTION: Illustrates how to specify which named Mongoose connection should be used by a feature module when registering models with MongooseModule.forFeature.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Cat.name, schema: CatSchema }], 'cats'),\n  ],\n})\nexport class CatsModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Service with Prisma\nDESCRIPTION: Post service implementation with CRUD operations using Prisma Client\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { Post, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class PostsService {\n  constructor(private prisma: PrismaService) {}\n\n  async post(\n    postWhereUniqueInput: Prisma.PostWhereUniqueInput,\n  ): Promise<Post | null> {\n    return this.prisma.post.findUnique({\n      where: postWhereUniqueInput,\n    });\n  }\n\n  async posts(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.PostWhereUniqueInput;\n    where?: Prisma.PostWhereInput;\n    orderBy?: Prisma.PostOrderByWithRelationInput;\n  }): Promise<Post[]> {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.post.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createPost(data: Prisma.PostCreateInput): Promise<Post> {\n    return this.prisma.post.create({\n      data,\n    });\n  }\n\n  async updatePost(params: {\n    where: Prisma.PostWhereUniqueInput;\n    data: Prisma.PostUpdateInput;\n  }): Promise<Post> {\n    const { data, where } = params;\n    return this.prisma.post.update({\n      data,\n      where,\n    });\n  }\n\n  async deletePost(where: Prisma.PostWhereUniqueInput): Promise<Post> {\n    return this.prisma.post.delete({\n      where,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Context Switching Methods in ArgumentsHost\nDESCRIPTION: Lists the utility methods available in ArgumentsHost for switching to the appropriate application context (RPC, HTTP, or WebSockets).\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Switch context to RPC.\n */\nswitchToRpc(): RpcArgumentsHost;\n/**\n * Switch context to HTTP.\n */\nswitchToHttp(): HttpArgumentsHost;\n/**\n * Switch context to WebSockets.\n */\nswitchToWs(): WsArgumentsHost;\n```\n\n----------------------------------------\n\nTITLE: Queue Management Operations in NestJS BullMQ\nDESCRIPTION: Examples of basic queue management operations like pause and resume.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait audioQueue.pause();\n\nawait audioQueue.resume();\n```\n\n----------------------------------------\n\nTITLE: Handling Mongoose Connection Events (Synchronous Config)\nDESCRIPTION: Shows how to register event listeners for Mongoose connection events using the `onConnectionCreate` option within a synchronous `forRoot` call. The provided function receives the connection object and can attach listeners for various lifecycle events.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nMongooseModule.forRoot('mongodb://localhost/test', {\n  onConnectionCreate: (connection: Connection) => {\n    connection.on('connected', () => console.log('connected'));\n    connection.on('open', () => console.log('open'));\n    connection.on('disconnected', () => console.log('disconnected'));\n    connection.on('reconnected', () => console.log('reconnected'));\n    connection.on('disconnecting', () => console.log('disconnecting'));\n\n    return connection;\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Installing Devtools Integration Package\nDESCRIPTION: Command to install the NestJS Devtools integration package using npm.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @nestjs/devtools-integration\n```\n\n----------------------------------------\n\nTITLE: Defining a Subscription Resolver in NestJS (Code First Approach)\nDESCRIPTION: Creates a subscription resolver using the @Subscription decorator and PubSub from the mercurius package.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => Author)\nexport class AuthorResolver {\n  // ...\n  @Subscription(() => Comment)\n  commentAdded(@Context('pubsub') pubSub: PubSub) {\n    return pubSub.subscribe('commentAdded');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CacheModule with Dependency Injection in NestJS\nDESCRIPTION: This example illustrates how to use a factory function with dependency injection to configure the CacheModule. It injects a ConfigService to dynamically set the cache TTL.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nCacheModule.registerAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    ttl: configService.get('CACHE_TTL'),\n  }),\n  inject: [ConfigService],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Helmet with Apollo Server in NestJS\nDESCRIPTION: TypeScript code showing how to configure Helmet with specific Content Security Policy (CSP) settings to work with Apollo Server and Apollo Sandbox in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/helmet.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(helmet({\n  crossOriginEmbedderPolicy: false,\n  contentSecurityPolicy: {\n    directives: {\n      imgSrc: [`'self'`, 'data:', 'apollo-server-landing-page.cdn.apollographql.com'],\n      scriptSrc: [`'self'`, `https: 'unsafe-inline'`],\n      manifestSrc: [`'self'`, 'apollo-server-landing-page.cdn.apollographql.com'],\n      frameSrc: [`'self'`, 'sandbox.embed.apollographql.com'],\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Entity Transformation Pipe Usage in NestJS\nDESCRIPTION: Shows how to use a custom pipe for transforming route parameters into database entities.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':id')\nfindOne(@Param('id', UserByIdPipe) userEntity: UserEntity) {\n  return userEntity;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Process for BullMQ Queue in NestJS\nDESCRIPTION: This snippet demonstrates how to configure a BullMQ queue to run job handlers in a separate (forked) process. It uses the BullModule to register a queue with a processor file path.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { BullModule } from '@nestjs/bullmq';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'audio',\n      processors: [join(__dirname, 'processor.js')],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Complete GraphQL Schema Definition with Mutation\nDESCRIPTION: The complete SDL schema definition including Author and Post types, a Query for fetching an author, and a Mutation for upvoting a post. This shows how mutations integrate with the rest of a GraphQL schema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String\n  votes: Int\n}\n\ntype Query {\n  author(id: Int!): Author\n}\n\ntype Mutation {\n  upvotePost(postId: Int!): Post\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CQRS Module in NestJS Application\nDESCRIPTION: Setup of CQRS module in the root application module (AppModule) using CqrsModule.forRoot().\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CqrsModule } from '@nestjs/cqrs';\n\n@Module({\n  imports: [CqrsModule.forRoot()],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining Required Properties in Mongoose Schema - TypeScript\nDESCRIPTION: Configures the 'name' property to be required within the schema by passing an options object to the @Prop decorator. Ensures that 'name' must be set on document creation. Depends on @nestjs/mongoose.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Prop({ required: true })\nname: string;\n\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Registry for NestJS Application\nDESCRIPTION: This set of commands shows how to log in to a Docker registry, tag the local image, and push it to the registry for deployment or sharing. Replace 'your-dockerhub-username' with the actual username or registry URL.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker login # Log in to your Docker registry\ndocker tag my-nestjs-app your-dockerhub-username/my-nestjs-app # Tag your image\ndocker push your-dockerhub-username/my-nestjs-app # Push your image\n```\n\n----------------------------------------\n\nTITLE: Handling Unhandled Exceptions in NestJS CQRS\nDESCRIPTION: Implementation of unhandled exception handling using UnhandledExceptionBus. Shows how to subscribe to and process unhandled exceptions in event handlers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nprivate destroy$ = new Subject<void>();\n\nconstructor(private unhandledExceptionsBus: UnhandledExceptionBus) {\n  this.unhandledExceptionsBus\n    .pipe(takeUntil(this.destroy$))\n    .subscribe((exceptionInfo) => {\n      // Handle exception here\n      // e.g. send it to external service, terminate process, or publish a new event\n    });\n}\n\nonModuleDestroy() {\n  this.destroy$.next();\n  this.destroy$.complete();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Wildcard Support for Redis Transporter in NestJS\nDESCRIPTION: Demonstrates how to enable wildcard support in the Redis transporter configuration, allowing the use of pattern-based subscriptions.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice(AppModule, {\n  transport: Transport.REDIS,\n  options: {\n    // Other options\n    wildcards: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidationPipe with WebSocket Gateway in TypeScript\nDESCRIPTION: Example showing how to bind a ValidationPipe to a WebSocket message handler using @UsePipes decorator. The pipe is configured with a custom exception factory that throws WsException instead of HttpException for validation errors.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/pipes.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new WsException(errors) }))\n@SubscribeMessage('events')\nhandleEvent(client: Client, data: unknown): WsResponse<unknown> {\n  const event = 'events';\n  return { event, data };\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new WsException(errors) }))\n@SubscribeMessage('events')\nhandleEvent(client, data) {\n  const event = 'events';\n  return { event, data };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker Event Listener in NestJS BullMQ\nDESCRIPTION: Example of setting up a worker event listener for the 'active' event using @OnWorkerEvent decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, Process, OnWorkerEvent } from '@nestjs/bullmq';\nimport { Job } from 'bullmq';\n\n@Processor('audio')\nexport class AudioConsumer {\n  @OnWorkerEvent('active')\n  onActive(job: Job) {\n    console.log(\n      `Processing job ${job.id} of type ${job.name} with data ${job.data}...`,\n    );\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Cache Interceptor in NestJS\nDESCRIPTION: Demonstrates how to bind the CacheInterceptor globally for all endpoints in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CacheModule, CacheInterceptor } from '@nestjs/cache-manager';\nimport { AppController } from './app.controller';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\n\n@Module({\n  imports: [CacheModule.register()],\n  controllers: [AppController],\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: CacheInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Handling Mongoose Connection Events (Asynchronous Config)\nDESCRIPTION: Illustrates how to incorporate the `onConnectionCreate` option for registering connection event listeners within an asynchronous `forRootAsync` configuration, typically inside the `useFactory` function.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nMongooseModule.forRootAsync({\n  useFactory: () => ({\n    uri: 'mongodb://localhost/test',\n    onConnectionCreate: (connection: Connection) => {\n      // Register event listeners here\n      return connection;\n    },\n  }),\n}),\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Indicator (NestJS v11)\nDESCRIPTION: Demonstrates the new way of implementing a custom health indicator for the TerminusModule in NestJS v11 using the HealthIndicatorService API.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class DogHealthIndicator {\n  constructor(\n    private readonly httpService: HttpService,\n    //  Inject the `HealthIndicatorService` provided by the `TerminusModule`\n    private readonly healthIndicatorService: HealthIndicatorService,\n  ) {}\n\n  async isHealthy(key: string) {\n    // Start the health indicator check for the given key\n    const indicator = this.healthIndicatorService.check(key);\n\n    try {\n      const badboys = await this.getBadboys();\n      const isHealthy = badboys.length === 0;\n\n      if (!isHealthy) {\n        // Mark the indicator as \"down\" and add additional info to the response\n        return indicator.down({ badboys: badboys.length });\n      }\n\n      // Mark the health indicator as up\n      return indicator.up();\n    } catch (error) {\n      return indicator.down('Unable to retrieve dogs');\n    }\n  }\n\n  private getBadboys() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull Module with useClass Syntax in TypeScript\nDESCRIPTION: Shows how to use the useClass syntax to provide Bull configuration through a dedicated service class.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.forRootAsync({\n  useClass: BullConfigService,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Nest CLI globally with npm\nDESCRIPTION: Command to install the Nest CLI tool globally using npm. This makes the CLI available as a system-wide command.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @nestjs/cli\n```\n\n----------------------------------------\n\nTITLE: Installing MikroORM dependencies in Bash\nDESCRIPTION: Shows the command to install the core MikroORM package along with the NestJS integration module and the SQLite database driver using npm. This is a prerequisite step before importing and configuring MikroORM in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @mikro-orm/core @mikro-orm/nestjs @mikro-orm/sqlite\n```\n\n----------------------------------------\n\nTITLE: Installing Cookie Parser for Express in NestJS\nDESCRIPTION: This snippet shows how to install the cookie-parser package and its TypeScript types for use with Express in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i cookie-parser\n$ npm i -D @types/cookie-parser\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Key Tracking in NestJS\nDESCRIPTION: Demonstrates how to create a custom CacheInterceptor subclass to implement custom cache key tracking.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass HttpCacheInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext): string | undefined {\n    return 'key';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mongoose Virtual Property with @Virtual Decorator\nDESCRIPTION: Shows how to define a virtual property (`fullName`) on a Mongoose schema class using the `@Virtual` decorator from `@nestjs/mongoose`. Virtuals are computed dynamically and not stored in the database.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n  @Prop()\n  firstName: string;\n\n  @Prop()\n  lastName: string;\n\n  @Virtual({\n    get: function (this: Person) {\n      return `${this.firstName} ${this.lastName}`;\n    },\n  })\n  fullName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Controller in NestJS\nDESCRIPTION: AuthController implementation with sign-in endpoint that handles authentication requests.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Body, Controller, Post, HttpCode, HttpStatus } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: Record<string, any>) {\n    return this.authService.signIn(signInDto.username, signInDto.password);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Auth Module Configuration in NestJS\nDESCRIPTION: AuthModule setup with JWT configuration including token expiration and secret key settings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './local.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Connection Provider in NestJS\nDESCRIPTION: Defines a provider for establishing a MongoDB connection using Mongoose in NestJS. It uses an async factory function to connect to the database.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as mongoose from 'mongoose';\n\nexport const databaseProviders = [\n  {\n    provide: 'DATABASE_CONNECTION',\n    useFactory: (): Promise<typeof mongoose> =>\n      mongoose.connect('mongodb://localhost/nest'),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Explicit Conversion of Request Parameters using ParseIntPipe and ParseBoolPipe (TypeScript)\nDESCRIPTION: This example shows explicit use of built-in transformation pipes (ParseIntPipe, ParseBoolPipe) to enforce and validate the types of incoming path and query parameters, useful when global transformation is disabled. The ParseIntPipe converts a string to a number, while ParseBoolPipe converts a string to a boolean. Both are provided by the @nestjs/common module and should be imported as dependencies.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':id')\nfindOne(\n  @Param('id', ParseIntPipe) id: number,\n  @Query('sort', ParseBoolPipe) sort: boolean,\n) {\n  console.log(typeof id === 'number'); // true\n  console.log(typeof sort === 'boolean'); // true\n  return 'This action returns a user';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Authorization Guard in NestJS\nDESCRIPTION: Implementation of a basic authorization guard that validates requests based on authentication token. The guard implements CanActivate interface and uses ExecutionContext to access request details.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const request = context.switchToHttp().getRequest();\n    return validateRequest(request);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing feature module with registered MikroORM repositories into the root AppModule in TypeScript\nDESCRIPTION: Shows the root AppModule importing both the MikroOrmModule with global configuration and a feature module that registered entity repositories, enabling repository injection and usage in services within the feature module context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// app.module.ts\n@Module({\n  imports: [MikroOrmModule.forRoot(...), PhotoModule],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Using Fastify Session in NestJS Route Handler with @Session() Decorator\nDESCRIPTION: Example of accessing and modifying Fastify session data within a NestJS route handler using the @Session() decorator and secureSession.Session type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nfindAll(@Session() session: secureSession.Session) {\n  const visits = session.get('visits');\n  session.set('visits', visits ? visits + 1 : 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Hybrid NestJS Application with TCP Microservice\nDESCRIPTION: Creates a hybrid NestJS application by combining a standard HTTP application with a TCP microservice. The code demonstrates how to create the app, connect the microservice, and start both servers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/hybrid-application.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\nconst microservice = app.connectMicroservice<MicroserviceOptions>({\n  transport: Transport.TCP,\n});\n\nawait app.startAllMicroservices();\nawait app.listen(3001);\n```\n\n----------------------------------------\n\nTITLE: Publishing Events in NestJS GraphQL Subscriptions\nDESCRIPTION: Shows how to publish events using PubSub within a mutation resolver. This example publishes a 'commentAdded' event when a new comment is added.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Mutation(() => Comment)\nasync addComment(\n  @Args('postId', { type: () => Int }) postId: number,\n  @Args('comment', { type: () => Comment }) comment: CommentInput,\n) {\n  const newComment = this.commentsService.addComment({ id: postId, comment });\n  pubSub.publish('commentAdded', { commentAdded: newComment });\n  return newComment;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Sequelize Instance for Specific Connection in NestJS\nDESCRIPTION: Demonstrates how to inject a Sequelize instance for a specific named connection in a NestJS service. This is useful when working with multiple database connections.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class AlbumsService {\n  constructor(\n    @InjectConnection('albumsConnection')\n    private sequelize: Sequelize,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch for NestJS Contribution\nDESCRIPTION: Command to create a new git branch for implementing a fix or feature in the NestJS repository. This is step 3 in the pull request submission process.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-fix-branch master\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Dynamic Module in TypeScript\nDESCRIPTION: Shows how to register a dynamic module in the global scope by setting the global property to true in the module configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  global: true,\n  module: DatabaseModule,\n  providers: providers,\n  exports: providers,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Paginated Response Decorator in NestJS\nDESCRIPTION: This snippet demonstrates applying the custom @ApiPaginatedResponse decorator to an endpoint, specifying the model type for the paginated response, improving maintainability and consistency in API documentation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n@ApiPaginatedResponse(CatDto)\nasync findAll(): Promise<PaginatedDto<CatDto>> {}\n```\n\n----------------------------------------\n\nTITLE: Array Type Definition in Swagger\nDESCRIPTION: Demonstration of how to properly define array types in Swagger documentation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({ type: [String] })\nnames: string[];\n```\n\n----------------------------------------\n\nTITLE: Subscription with Resolver Instance Access\nDESCRIPTION: Demonstrates how to access the resolver instance within subscription filters for using injected providers and external services.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@Subscription('commentAdded', {\n  filter(this: AuthorResolver, payload, variables) {\n    // \"this\" refers to an instance of \"AuthorResolver\"\n    return payload.commentAdded.title === variables.title;\n  }\n})\ncommentAdded(@Context('pubsub') pubSub: PubSub) {\n  return pubSub.subscribe('commentAdded');\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Media Type Versioning in NestJS\nDESCRIPTION: This snippet illustrates how to enable Media Type versioning in a NestJS application. It configures the application to use the Accept header for version specification.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\napp.enableVersioning({\n  type: VersioningType.MEDIA_TYPE,\n  key: 'v=',\n});\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Defining a Role Enum in TypeScript\nDESCRIPTION: This code defines a `Role` enum with two values: `User` and `Admin`.  This enum is used to represent the different roles a user can have in the application. It serves as the foundation for the RBAC implementation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Role {\n  User = 'user',\n  Admin = 'admin',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Base Input Type in TypeScript GraphQL\nDESCRIPTION: Definition of a base CreateUserInput class with required email, password, and firstName fields using GraphQL decorators.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@InputType()\nclass CreateUserInput {\n  @Field()\n  email: string;\n\n  @Field()\n  password: string;\n\n  @Field()\n  firstName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Versioning in NestJS\nDESCRIPTION: This code demonstrates how to implement Custom versioning in a NestJS application. It defines an extractor function to determine the version from a custom header and configures the application to use this custom versioning approach.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Example extractor that pulls out a list of versions from a custom header and turns it into a sorted array.\n// This example uses Fastify, but Express requests can be processed in a similar way.\nconst extractor = (request: FastifyRequest): string | string[] =>\n  [request.headers['custom-versioning-field'] ?? '']\n     .flatMap(v => v.split(','))\n     .filter(v => !!v)\n     .sort()\n     .reverse()\n\nconst app = await NestFactory.create(AppModule);\napp.enableVersioning({\n  type: VersioningType.CUSTOM,\n  extractor,\n});\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Registering Global Exception Filter that Extends BaseExceptionFilter in NestJS\nDESCRIPTION: Shows how to inject the HttpAdapter reference when registering a global exception filter that extends BaseExceptionFilter, allowing the custom filter to work with the application's HTTP adapter.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  const { httpAdapter } = app.get(HttpAdapterHost);\n  app.useGlobalFilters(new AllExceptionsFilter(httpAdapter));\n\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Applying Helmet Middleware in NestJS with Express\nDESCRIPTION: TypeScript code snippet demonstrating how to apply Helmet as a global middleware in a NestJS application using Express.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/helmet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport helmet from 'helmet';\n// somewhere in your initialization file\napp.use(helmet());\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Configuration for BullMQ in NestJS\nDESCRIPTION: This snippet shows how to use asynchronous configuration for BullMQ in NestJS. It demonstrates the use of a factory function to provide configuration options, including dependency injection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.forRootAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    connection: {\n      host: configService.get('QUEUE_HOST'),\n      port: configService.get('QUEUE_PORT'),\n    },\n  }),\n  inject: [ConfigService],\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata at Controller Level in NestJS\nDESCRIPTION: Illustrates how to apply metadata at the controller level, which affects all routes in the controller. This example sets the 'admin' role for the entire CatsController.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Roles(['admin'])\n@Controller('cats')\nexport class CatsController {}\n```\n\n----------------------------------------\n\nTITLE: ValidationPipe Options Interface Definition\nDESCRIPTION: This interface defines the configuration options for the `ValidationPipe`, including options inherited from `ValidatorOptions` and specific options like `transform`, `disableErrorMessages`, and `exceptionFactory`. These options control the behavior of the validation process.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ValidationPipeOptions extends ValidatorOptions {\n  transform?: boolean;\n  disableErrorMessages?: boolean;\n  exceptionFactory?: (errors: ValidationError[]) => any;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Fastify Cookie Plugin in NestJS\nDESCRIPTION: This code demonstrates how to register the @fastify/cookie plugin in a NestJS application using Fastify adapter.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastifyCookie from '@fastify/cookie';\n\n// somewhere in your initialization file\nconst app = await NestFactory.create<NestFastifyApplication>(AppModule, new FastifyAdapter());\nawait app.register(fastifyCookie, {\n  secret: 'my-secret', // for cookies signature\n});\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS Microservices Package\nDESCRIPTION: Command to install the required package for building microservices in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @nestjs/microservices\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Status Codes in NestJS Controllers\nDESCRIPTION: Demonstrates how to override the default HTTP status code using the @HttpCode decorator. The example shows setting a 204 No Content status for a POST endpoint.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@HttpCode(204)\ncreate() {\n  return 'This action adds a new cat';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Security in NestJS TCP Client\nDESCRIPTION: Demonstrates client-side TLS configuration for secure microservice communication using CA certificates.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\n\n@Module({\n  imports: [\n    ClientsModule.register([\n      {\n        name: 'MATH_SERVICE',\n        transport: Transport.TCP,\n        options: {\n          tlsOptions: {\n            ca: [fs.readFileSync('<pathToCaFile>', 'utf-8').toString()],\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Mutation in NestJS GraphQL (Code-First Approach)\nDESCRIPTION: Creating an upvotePost mutation that increments a post's votes using the code-first approach with the @Mutation() decorator. The method takes a postId as argument and returns the updated Post entity.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Mutation(() => Post)\nasync upvotePost(@Args({ name: 'postId', type: () => Int }) postId: number) {\n  return this.postsService.upvoteById({ id: postId });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM with User Entity in NestJS AppModule\nDESCRIPTION: Updated AppModule configuration to include the User entity in TypeORM's entity array.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      entities: [User],\n      synchronize: true,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Interaction in TypeScript with Necord\nDESCRIPTION: This snippet shows how to create a button interaction handler using Necord in a NestJS application. It defines a method that responds to a button click event with a reply message.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Context, Button, ButtonContext } from 'necord';\n\n@Injectable()\nexport class AppComponents {\n  @Button('BUTTON')\n  public onButtonClick(@Context() [interaction]: ButtonContext) {\n    return interaction.reply({ content: 'Button clicked!' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing JWT Authentication with cURL in NestJS\nDESCRIPTION: Demonstrates how to test the JWT authentication flow using cURL commands: accessing a protected route without authentication, logging in to obtain a JWT token, and accessing the protected route with the valid token.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ # GET /profile\n$ curl http://localhost:3000/profile\n$ # result -> {\"statusCode\":401,\"message\":\"Unauthorized\"}\n\n$ # POST /auth/login\n$ curl -X POST http://localhost:3000/auth/login -d '{\"username\": \"john\", \"password\": \"changeme\"}' -H \"Content-Type: application/json\"\n$ # result -> {\"access_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm... }\n\n$ # GET /profile using access_token returned from previous step as bearer code\n$ curl http://localhost:3000/profile -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm...\"\n$ # result -> {\"userId\":1,\"username\":\"john\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Response with Fastify\nDESCRIPTION: Example demonstrating how to properly handle redirect responses using Fastify's approach.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nindex(@Res() res) {\n  res.status(302).redirect('/login');\n}\n```\n\n----------------------------------------\n\nTITLE: Custom ClientProxy Provider Configuration\nDESCRIPTION: Demonstrates setting up a custom provider using ClientProxyFactory for dynamic client configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  providers: [\n    {\n      provide: 'MATH_SERVICE',\n      useFactory: (configService: ConfigService) => {\n        const mathSvcOptions = configService.getMathSvcOptions();\n        return ClientProxyFactory.create(mathSvcOptions);\n      },\n      inject: [ConfigService],\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Discriminator Schema for NestJS Mongoose\nDESCRIPTION: Defines a specific discriminator schema class (@Schema) that will inherit from a base schema. This example shows the schema for a 'ClickedLinkEvent', adding unique properties.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n@Schema()\nexport class ClickedLinkEvent {\n  kind: string;\n  time: Date;\n\n  @Prop({ type: String, required: true })\n  url: string;\n}\n\nexport const ClickedLinkEventSchema = SchemaFactory.createForClass(ClickedLinkEvent);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Pipe with Class Validator\nDESCRIPTION: Custom validation pipe implementation using class-validator and class-transformer libraries for object validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToInstance } from 'class-transformer';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform<any> {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToInstance(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Function): boolean {\n    const types: Function[] = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing a Queue in NestJS Bull\nDESCRIPTION: Example of pausing a Bull queue in NestJS. A paused queue will not process new jobs until resumed, though current jobs being processed will continue until they are finalized.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nawait audioQueue.pause();\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with Express in NestJS\nDESCRIPTION: Sets up a NestJS application that uses HTTPS by providing key and certificate files to the NestFactory.create() method. The application listens on the port specified in environment variables or defaults to 3000.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/multiple-servers.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst httpsOptions = {\n  key: fs.readFileSync('./secrets/private-key.pem'),\n  cert: fs.readFileSync('./secrets/public-certificate.pem'),\n};\nconst app = await NestFactory.create(AppModule, {\n  httpsOptions,\n});\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Swagger Property with Schema Configuration\nDESCRIPTION: Example of @ApiProperty decorator with additional schema configuration options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({\n  description: 'The age of a cat',\n  minimum: 1,\n  default: 1,\n})\nage: number;\n```\n\n----------------------------------------\n\nTITLE: Generic Paginated Response Schema with Raw Definitions in NestJS\nDESCRIPTION: This complex snippet illustrates creating a generic PaginatedDto class with a type parameter, and how to define the @ApiOkResponse schema with allOf referencing the class and overriding the 'results' property to be an array of a specific model. It supports detailed schema customization for paginated responses.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class PaginatedDto<TData> {\n  @ApiProperty()\n  total: number;\n\n  @ApiProperty()\n  limit: number;\n\n  @ApiProperty()\n  offset: number;\n\n  results: TData[];\n}\n\n// Example entity\nexport class CatDto {\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty()\n  age: number;\n\n  @ApiProperty()\n  breed: string;\n}\n\n// Usage in controller\n@ApiOkResponse({\n  schema: {\n    allOf: [\n      { $ref: getSchemaPath(PaginatedDto) },\n      {\n        properties: {\n          results: {\n            type: 'array',\n            items: { $ref: getSchemaPath(CatDto) },\n          },\n        },\n      },\n    ],\n  },\n})\nasync findAll(): Promise<PaginatedDto<CatDto>> {}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection with Fastify in NestJS\nDESCRIPTION: TypeScript code snippet showing how to register and use the @fastify/csrf-protection plugin for CSRF protection in a NestJS application using Fastify. It imports the plugin and registers it with the Fastify app instance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/csrf.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastifyCsrf from '@fastify/csrf-protection';\n// ...\n// somewhere in your initialization file after registering some storage plugin\nawait app.register(fastifyCsrf);\n```\n\n----------------------------------------\n\nTITLE: Using Input Type in a GraphQL Mutation (Code-First)\nDESCRIPTION: Example of using a custom input type (UpvotePostInput) as an argument in a GraphQL mutation. This demonstrates how to accept complex objects as parameters in mutations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Mutation(() => Post)\nasync upvotePost(\n  @Args('upvotePostData') upvotePostData: UpvotePostInput,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Dispatch in Service Layer\nDESCRIPTION: Service class implementation showing how to dispatch commands using CommandBus in NestJS CQRS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class HeroesGameService {\n  constructor(private commandBus: CommandBus) {}\n\n  async killDragon(heroId: string, killDragonDto: KillDragonDto) {\n    return this.commandBus.execute(\n      new KillDragonCommand(heroId, killDragonDto.dragonId)\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Loading Entities in NestJS TypeORM Module\nDESCRIPTION: Shows how to set up automatic entity loading in TypeORM configuration to avoid manual entity registration. This approach uses the autoLoadEntities property in the TypeOrmModule.forRoot() method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      ...\n      autoLoadEntities: true,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining NestJS CatsModule\nDESCRIPTION: TypeScript code defining a NestJS module for cats, including imports for HttpModule and PrismaModule, and providers for various cat-related services.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [HttpModule.register({ baseUrl: 'https://api.cats.com/' }), PrismaModule],\n  providers: [CatsService, CatsApiService, CatsDAL, Logger],\n  exports: [CatsService],\n})\nexport class CatsModule {}\n```\n\n----------------------------------------\n\nTITLE: Custom Health Indicator Implementation\nDESCRIPTION: Example of creating a custom health indicator service to check application-specific health conditions.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { HealthIndicatorService } from '@nestjs/terminus';\n\nexport interface Dog {\n  name: string;\n  type: string;\n}\n\n@Injectable()\nexport class DogHealthIndicator {\n  constructor(\n    private readonly healthIndicatorService: HealthIndicatorService\n  ) {}\n\n  private dogs: Dog[] = [\n    { name: 'Fido', type: 'goodboy' },\n    { name: 'Rex', type: 'badboy' },\n  ];\n\n  async isHealthy(key: string){\n    const indicator = this.healthIndicatorService.check(key);\n    const badboys = this.dogs.filter(dog => dog.type === 'badboy');\n    const isHealthy = badboys.length === 0;\n\n    if (!isHealthy) {\n      return indicator.down({ badboys: badboys.length });\n    }\n\n    return indicator.up();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CacheOptionsFactory Interface in NestJS\nDESCRIPTION: This code shows how to implement the CacheOptionsFactory interface in a custom service class. The class provides a method to create cache options, including setting the TTL.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass CacheConfigService implements CacheOptionsFactory {\n  createCacheOptions(): CacheModuleOptions {\n    return {\n      ttl: 5,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL SDL Schema\nDESCRIPTION: The resulting GraphQL Schema Definition Language (SDL) generated from the Character interface.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Character {\n  id: ID!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Generation with Custom Scalars\nDESCRIPTION: Demonstrates schema generation with both resolvers and custom scalar types. Takes an array of resolver classes and an array of scalar classes as arguments.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/schema-generator.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = await gqlSchemaFactory.create(\n  [RecipesResolver, AuthorsResolver, PostsResolvers],\n  [DurationScalar, DateScalar],\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Another Discriminator Schema for NestJS Mongoose\nDESCRIPTION: Defines another specific discriminator schema class (@Schema) that will inherit from the same base schema. This example shows the schema for a 'SignUpEvent', adding unique properties.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n@Schema()\nexport class SignUpEvent {\n  kind: string;\n  time: Date;\n\n  @Prop({ type: String, required: true })\n  user: string;\n}\n\nexport const SignUpEventSchema = SchemaFactory.createForClass(SignUpEvent);\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Providers to MulterModule in NestJS\nDESCRIPTION: This code demonstrates how to pass additional providers to the registerAsync() method of MulterModule. These providers will be merged with the module providers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nMulterModule.registerAsync({\n  imports: [ConfigModule],\n  useClass: ConfigService,\n  extraProviders: [MyAdditionalProvider],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Handler Metadata in NestJS Guard\nDESCRIPTION: Shows how to use the Reflector's get method to access custom metadata from a route handler. This example retrieves the roles set by the Roles decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst roles = this.reflector.get(Roles, context.getHandler());\n```\n\n----------------------------------------\n\nTITLE: Determining Application Context Type in NestJS\nDESCRIPTION: Shows how to use the getType() method of ArgumentsHost to determine the current application context (HTTP, RPC, or GraphQL).\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (host.getType() === 'http') {\n  // do something that is only important in the context of regular HTTP requests (REST)\n} else if (host.getType() === 'rpc') {\n  // do something that is only important in the context of Microservice requests\n} else if (host.getType<GqlContextType>() === 'graphql') {\n  // do something that is only important in the context of GraphQL requests\n}\n```\n\n----------------------------------------\n\nTITLE: Async Module Configuration with Custom Factory\nDESCRIPTION: Example of using useClass for async module configuration\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ConfigModule.registerAsync({\n      useClass: ConfigModuleOptionsFactory,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Sharing Configuration Between HTTP and Microservice Applications in NestJS\nDESCRIPTION: Demonstrates how to inherit global pipes, interceptors, guards, and filters from the main HTTP application to microservices by setting the inheritAppConfig option when connecting a microservice.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/hybrid-application.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst microservice = app.connectMicroservice<MicroserviceOptions>(\n  {\n    transport: Transport.TCP,\n  },\n  { inheritAppConfig: true },\n);\n```\n\n----------------------------------------\n\nTITLE: Uploading Single File in NestJS Controller\nDESCRIPTION: Demonstrates how to use FileInterceptor and UploadedFile decorator to handle single file upload in a NestJS controller.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('upload')\n@UseInterceptors(FileInterceptor('file'))\nuploadFile(@UploadedFile() file: Express.Multer.File) {\n  console.log(file);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GET and POST Routes in NestJS Controller\nDESCRIPTION: Demonstrates creating a basic controller with GET and POST routes for a cats resource. The example shows the implementation in both TypeScript and JavaScript syntax with decorators to define HTTP methods.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Post } from '@nestjs/common';\n\n@Controller('cats')\nexport class CatsController {\n  @Post()\n  create(): string {\n    return 'This action adds a new cat';\n  }\n\n  @Get()\n  findAll(): string {\n    return 'This action returns all cats';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying RpcExceptionFilter to MessagePattern in NestJS\nDESCRIPTION: Shows how to apply a custom RpcExceptionFilter to a specific message pattern handler in NestJS microservices.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/exception-filters.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@UseFilters(new ExceptionFilter())\n@MessagePattern({ cmd: 'sum' })\naccumulate(data: number[]): number {\n  return (data || []).reduce((a, b) => a + b);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting a Provider into a Controller in TypeScript (NestJS)\nDESCRIPTION: This code shows how to inject a provider (CatsService) into a controller (CatsController) using constructor-based dependency injection in NestJS. It also defines a GET route to retrieve all cats.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@nestjs/common';\nimport { CatsService } from './cats.service';\nimport { Cat } from './interfaces/cat.interface';\n\n@Controller('cats')\nexport class CatsController {\n  constructor(private catsService: CatsService) {}\n\n  @Get()\n  async findAll(): Promise<Cat[]> {\n    return this.catsService.findAll();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Public Decorator on NestJS Route\nDESCRIPTION: This snippet demonstrates how to use the custom Public decorator to mark a route as public, exempting it from authentication checks.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Public()\n@Get()\nfindAll() {\n  return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a @Roles() Decorator (TypeScript)\nDESCRIPTION: This code defines a custom `@Roles()` decorator using `SetMetadata` from `@nestjs/common`. This decorator allows specifying which roles are required to access a particular route. The `ROLES_KEY` constant is used to store the metadata.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SetMetadata } from '@nestjs/common';\nimport { Role } from '../enums/role.enum';\n\nexport const ROLES_KEY = 'roles';\nexport const Roles = (...roles: Role[]) => SetMetadata(ROLES_KEY, roles);\n```\n\n----------------------------------------\n\nTITLE: Kafka Message Interface Definition\nDESCRIPTION: Defines the interface structure for incoming Kafka messages with all available properties.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IncomingMessage {\n  topic: string;\n  partition: number;\n  timestamp: string;\n  size: number;\n  attributes: number;\n  offset: string;\n  key: any;\n  value: any;\n  headers: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Microservice Instance Status\nDESCRIPTION: Shows how to subscribe to status updates from both client and server instances in microservices.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nthis.client.status.subscribe((status: TcpStatus) => {\n  console.log(status);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Module Lazily with LazyModuleLoader\nDESCRIPTION: Shows the pattern for dynamically loading a module using the LazyModuleLoader.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lazy-loading-modules.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { LazyModule } = await import('./lazy.module');\nconst moduleRef = await this.lazyModuleLoader.load(() => LazyModule);\n```\n\n----------------------------------------\n\nTITLE: Configuring Joi Validation Options in NestJS\nDESCRIPTION: Shows how to customize Joi validation behavior by specifying validation options like allowUnknown and abortEarly in the ConfigModule.forRoot method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Joi from 'joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        NODE_ENV: Joi.string()\n          .valid('development', 'production', 'test', 'provision')\n          .default('development'),\n        PORT: Joi.number().port().default(3000),\n      }),\n      validationOptions: {\n        allowUnknown: false,\n        abortEarly: true,\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous WebSocket Handler\nDESCRIPTION: Example of an asynchronous WebSocket handler using Observable for multiple responses.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/gateways.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@SubscribeMessage('events')\nonEvent(@MessageBody() data: unknown): Observable<WsResponse<number>> {\n  const event = 'events';\n  const response = [1, 2, 3];\n\n  return from(response).pipe(\n    map(data => ({ event, data })),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Intersecting DTOs in TypeScript\nDESCRIPTION: Demonstrates how to combine two different DTOs into a single type using IntersectionType.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/mapped-types.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateCatDto {\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty()\n  breed: string;\n}\n\nexport class AdditionalCatInfo {\n  @ApiProperty()\n  color: string;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UpdateCatDto extends IntersectionType(\n  CreateCatDto,\n  AdditionalCatInfo,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongooseModule Async with Factory (Dependency Injection)\nDESCRIPTION: Shows how to configure the MongooseModule asynchronously using a factory function that injects dependencies. The `imports` array specifies modules providing dependencies, and the `inject` array lists providers to be injected into the factory function.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nMongooseModule.forRootAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    uri: configService.get<string>('MONGODB_URI'),\n  }),\n  inject: [ConfigService],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Public Decorator for Route Exemption in NestJS\nDESCRIPTION: Demonstrates applying the Public decorator to make a specific endpoint bypass the global authentication check. This allows the route to be accessed without authentication.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n@Public()\n@Get()\nfindAll() {\n  return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NATS Queue Groups\nDESCRIPTION: Configuration for creating a NATS queue subscription for load balancing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {\n  transport: Transport.NATS,\n  options: {\n    servers: ['nats://localhost:4222'],\n    queue: 'cats_queue',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing autocomplete for slash commands in Necord\nDESCRIPTION: Shows how to create an autocomplete interceptor for slash commands in Necord.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { AutocompleteInteraction } from 'discord.js';\nimport { AutocompleteInterceptor } from 'necord';\n\n@Injectable()\nclass CatsAutocompleteInterceptor extends AutocompleteInterceptor {\n  public transformOptions(interaction: AutocompleteInteraction) {\n    const focused = interaction.options.getFocused(true);\n    let choices: string[];\n\n    if (focused.name === 'cat') {\n      choices = ['Siamese', 'Persian', 'Maine Coon'];\n    }\n\n    return interaction.respond(\n      choices\n        .filter((choice) => choice.startsWith(focused.value.toString()))\n        .map((choice) => ({ name: choice, value: choice })),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Constraints in Fastify\nDESCRIPTION: Example demonstrating how to use Fastify's route constraints feature for version-specific routing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@RouteConstraints({ version: '1.2.x' })\nnewFeature() {\n  return 'This works only for version >= 1.2.x';\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Class\nDESCRIPTION: Implementation of a custom exception class that extends HttpException.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ForbiddenException extends HttpException {\n  constructor() {\n    super('Forbidden', HttpStatus.FORBIDDEN);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Named Jobs in a Bull Queue Consumer\nDESCRIPTION: Shows how to create a job handler that processes only jobs with a specific name by passing the job name to the @Process decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n@Process('transcode')\nasync transcode(job: Job<unknown>) { ... }\n```\n\n----------------------------------------\n\nTITLE: Throwing RpcException in NestJS Microservices\nDESCRIPTION: Demonstrates how to throw an RpcException in a NestJS microservice. RpcException is used instead of HttpException for microservices.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/exception-filters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new RpcException('Invalid credentials.');\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Subscriptions\nDESCRIPTION: Shows the GraphQL schema definition for subscriptions, including types for Author, Post, Query, Comment, and the Subscription type for commentAdded.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String\n  votes: Int\n}\n\ntype Query {\n  author(id: Int!): Author\n}\n\ntype Comment {\n  id: String\n  content: String\n}\n\ntype Subscription {\n  commentAdded(title: String!): Comment\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enum Internal Values Resolver in NestJS\nDESCRIPTION: Creates a resolver object that maps enum values to different internal representations, useful when backend uses different values than the public API.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const allowedColorResolver: Record<keyof typeof AllowedColor, any> = {\n  RED: '#f00',\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming with @GrpcStreamCall in NestJS\nDESCRIPTION: Demonstrates how to implement a bidirectional streaming gRPC method using the @GrpcStreamCall decorator. This example shows handling incoming data and writing responses to the stream.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@GrpcStreamCall()\nbidiHello(requestStream: any) {\n  requestStream.on('data', message => {\n    console.log(message);\n    requestStream.write({\n      reply: 'Hello, world!'\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using CaslAbilityFactory to Check Permissions in TypeScript\nDESCRIPTION: Shows the typical usage pattern after injecting `CaslAbilityFactory`. It calls the `createForUser` method with a `user` object to get a user-specific `Ability` instance. It then uses the `ability.can()` method to check if the user has permission for a specific action (`Action.Read`) on a subject (`'all'`).\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst ability = this.caslAbilityFactory.createForUser(user);\nif (ability.can(Action.Read, 'all')) {\n  // \"user\" has read access to everything\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Providers by Metadata with DiscoveryService\nDESCRIPTION: Shows how to retrieve and filter providers based on custom metadata attached via decorators. This example finds providers tagged with the 'experimental' feature flag.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/discovery-service.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst providers = this.discoveryService.getProviders();\n\nconst [provider] = providers.filter(\n  (item) =>\n    this.discoveryService.getMetadataByDecorator(FeatureFlag, item) ===\n    'experimental',\n);\n\nconsole.log(\n  'Providers with the \"experimental\" feature flag metadata:',\n  provider,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Namespaced Configuration\nDESCRIPTION: Example of creating a namespaced configuration using registerAs function\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default registerAs('database', () => ({\n  host: process.env.DATABASE_HOST,\n  port: process.env.DATABASE_PORT || 5432\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Shutdown Hook\nDESCRIPTION: Example of implementing OnApplicationShutdown interface to handle application termination signals.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lifecycle-events.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass UsersService implements OnApplicationShutdown {\n  onApplicationShutdown(signal: string) {\n    console.log(signal); // e.g. \"SIGINT\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom User Decorator in NestJS\nDESCRIPTION: Demonstrates how to create a custom param decorator that extracts the user object from the request, making route handlers more readable and maintainable.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration Factory\nDESCRIPTION: Example of a custom configuration factory function that processes environment variables and provides typed configuration values.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default () => ({\n  port: parseInt(process.env.PORT, 10) || 3000,\n  database: {\n    host: process.env.DATABASE_HOST,\n    port: parseInt(process.env.DATABASE_PORT, 10) || 5432\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout Interceptor in NestJS\nDESCRIPTION: This interceptor adds a timeout mechanism to route requests. It uses RxJS operators to cancel the request after a specified time and throw a RequestTimeoutException.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler, RequestTimeoutException } from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    return next.handle().pipe(\n      timeout(5000),\n      catchError(err => {\n        if (err instanceof TimeoutError) {\n          return throwError(() => new RequestTimeoutException());\n        }\n        return throwError(() => err);\n      }),\n    );\n  };\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor {\n  intercept(context, next) {\n    return next.handle().pipe(\n      timeout(5000),\n      catchError(err => {\n        if (err instanceof TimeoutError) {\n          return throwError(() => new RequestTimeoutException());\n        }\n        return throwError(() => err);\n      }),\n    );\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Request-Response Message Handler in NestJS\nDESCRIPTION: Example of a NestJS controller using the @MessagePattern decorator to handle request-response style messages. The handler accumulates an array of numbers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller } from '@nestjs/common';\nimport { MessagePattern } from '@nestjs/microservices';\n\n@Controller()\nexport class MathController {\n  @MessagePattern({ cmd: 'sum' })\n  accumulate(data: number[]): number {\n    return (data || []).reduce((a, b) => a + b);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Type Mappings in TypeScript\nDESCRIPTION: Shows how to compose multiple type mapping utilities together to create complex type transformations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/mapped-types.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UpdateCatDto extends PartialType(\n  OmitType(CreateCatDto, ['name'] as const),\n) {}\n```\n\n----------------------------------------\n\nTITLE: Using Exported Sequelize Models in Another Module\nDESCRIPTION: Importing a module that exports Sequelize models to use them in a different module's providers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { UsersModule } from './users.module';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  imports: [UsersModule],\n  providers: [UsersService],\n  controllers: [UsersController]\n})\nexport class UserHttpModule {}\n```\n\n----------------------------------------\n\nTITLE: Executing a Message Handler from Custom Transport Strategy\nDESCRIPTION: Example of accessing and executing a specific message handler from a custom transport strategy. This demonstrates how to retrieve and invoke a handler using its pattern name.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync listen(callback: () => void) {\n  const echoHandler = this.messageHandlers.get('echo');\n  console.log(await echoHandler('Hello world!'));\n  callback();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Endpoint for Validation Testing\nDESCRIPTION: This code snippet defines a basic POST endpoint that accepts a `CreateUserDto` as the request body. This endpoint is used to test the `ValidationPipe` and ensure that the validation rules defined in the DTO are being enforced.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\ncreate(@Body() createUserDto: CreateUserDto) {\n  return 'This action adds a new user';\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-loading Sequelize Models in NestJS Module\nDESCRIPTION: Demonstrates how to configure the SequelizeModule to automatically load models and synchronize the database schema. This approach simplifies model management and maintains proper domain boundaries.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\n\n@Module({\n  imports: [\n    SequelizeModule.forRoot({\n      ...\n      autoLoadModels: true,\n      synchronize: true,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Kafka Client Initialization in NestJS\nDESCRIPTION: Initialize a Kafka client asynchronously in NestJS, ensuring proper subscription to response topics before connecting. This is done in the onModuleInit lifecycle hook.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync onModuleInit() {\n  this.client.subscribeToResponseOf('hero.kill.dragon');\n  await this.client.connect();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Request Headers with @ApiHeader in NestJS\nDESCRIPTION: This snippet shows how to specify expected custom headers for a controller route using @ApiHeader. It helps document headers like 'X-MyHeader' that clients need to include when making requests.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n@ApiHeader({\n  name: 'X-MyHeader',\n  description: 'Custom header',\n})\n@Controller('cats')\nexport class CatsController {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Cache Module in NestJS\nDESCRIPTION: Demonstrates how to set up the CacheModule as a global module in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nCacheModule.register({\n  isGlobal: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting an entity repository in a service using @InjectRepository decorator in TypeScript\nDESCRIPTION: Demonstrates using the @InjectRepository() decorator to inject a standard EntityRepository for the Photo entity into a NestJS service. This enables the service to perform database operations directly on the Photo entity's repository.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class PhotoService {\n  constructor(\n    @InjectRepository(Photo)\n    private readonly photoRepository: EntityRepository<Photo>,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache Settings in NestJS Controller\nDESCRIPTION: Shows how to override cache settings (CacheKey and CacheTTL) on a per-method basis in a controller.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller()\n@CacheTTL(50)\nexport class AppController {\n  @CacheKey('custom_key')\n  @CacheTTL(20)\n  findAll(): string[] {\n    return [];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Interface for Configuration Type Hinting\nDESCRIPTION: Shows how to use TypeScript interfaces for type-safe configuration access\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DatabaseConfig {\n  host: string;\n  port: number;\n}\n\nconst dbConfig = this.configService.get<DatabaseConfig>('database');\n\n// you can now use `dbConfig.port` and `dbConfig.host`\nconst port = dbConfig.port;\n```\n\n----------------------------------------\n\nTITLE: Filtered Subscription Implementation\nDESCRIPTION: Shows how to add filtering to GraphQL subscriptions using the filter property to control event broadcasting based on payload and variables.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n@Subscription('commentAdded', {\n  filter: (payload, variables) =>\n    payload.commentAdded.title === variables.title,\n})\ncommentAdded(@Context('pubsub') pubSub: PubSub) {\n  return pubSub.subscribe('commentAdded');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Streaming with Callback in NestJS gRPC\nDESCRIPTION: Shows how to implement a server streaming gRPC method using @GrpcStreamCall decorator. This example demonstrates handling incoming data and sending a response using a callback function.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@GrpcStreamCall()\nlotsOfGreetings(requestStream: any, callback: (err: unknown, value: HelloResponse) => void) {\n  requestStream.on('data', message => {\n    console.log(message);\n  });\n  requestStream.on('end', () => callback(null, { reply: 'Hello, world!' }));\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Schema Name with @ApiSchema() in TypeScript\nDESCRIPTION: This snippet shows how to use the @ApiSchema() decorator to change the name of a generated OpenAPI schema. It renames the schema from 'CreateCatDto' to 'CreateCatRequest'.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiSchema({ name: 'CreateCatRequest' })\nclass CreateCatDto {}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events with Custom Client Proxy\nDESCRIPTION: This snippet shows how to use the custom client proxy to dispatch an event, demonstrating the event-based communication feature.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngooglePubSubClient.emit('event', 'Hello world!');\n```\n\n----------------------------------------\n\nTITLE: Injecting a Mongoose Model from a Named Connection in NestJS\nDESCRIPTION: Explains how to inject a Mongoose Model associated with a specific named database connection into a NestJS service using the @InjectModel decorator or legacy dependency injection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService {\n  constructor(@InjectModel(Cat.name, 'cats') private catModel: Model<Cat>) {}\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\n@Dependencies(getModelToken(Cat.name, 'cats'))\nexport class CatsService {\n  constructor(catModel) {\n    this.catModel = catModel;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Helper Function to Detect GraphQL Field Resolution in NestJS\nDESCRIPTION: A utility function that determines if the current execution context is resolving a GraphQL field (not a top-level Query or Mutation). Useful for conditionally applying enhancers to optimize performance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport function isResolvingGraphQLField(context: ExecutionContext): boolean {\n  if (context.getType<GqlContextType>() === 'graphql') {\n    const gqlContext = GqlExecutionContext.create(context);\n    const info = gqlContext.getInfo();\n    const parentType = info.parentType.name;\n    return parentType !== 'Query' && parentType !== 'Mutation';\n  }\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Instrumentation\nDESCRIPTION: Initial Sentry setup code that must be imported before other modules. Configures tracing and profiling integrations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst Sentry = require(\"@sentry/nestjs\");\nconst { nodeProfilingIntegration } = require(\"@sentry/profiling-node\");\n\n// Ensure to call this before requiring any other modules!\nSentry.init({\n  dsn: SENTRY_DSN,\n  integrations: [\n    // Add our Profiling integration\n    nodeProfilingIntegration(),\n  ],\n\n  // Add Tracing by setting tracesSampleRate\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n\n  // Set sampling rate for profiling\n  // This is relative to tracesSampleRate\n  profilesSampleRate: 1.0,\n});\n```\n\n----------------------------------------\n\nTITLE: Deriving DTO Subsets with PickType Utility in NestJS (TypeScript)\nDESCRIPTION: This snippet uses the PickType utility (from @nestjs/mapped-types) to create a DTO containing only a selected subset of properties from a given base DTO, improving code reuse and targeting specific validation scenarios. The second parameter is an array of property names to include. Requires @nestjs/mapped-types as a dependency.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UpdateCatAgeDto extends PickType(CreateCatDto, ['age'] as const) {}\n```\n\n----------------------------------------\n\nTITLE: Streaming File Using StreamableFile in NestJS Controller\nDESCRIPTION: This example shows how to use the StreamableFile class to return a file from a NestJS controller. This approach preserves access to post-controller interceptor logic.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/streaming-files.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, StreamableFile } from '@nestjs/common';\nimport { createReadStream } from 'fs';\nimport { join } from 'path';\n\n@Controller('file')\nexport class FileController {\n  @Get()\n  getFile(): StreamableFile {\n    const file = createReadStream(join(process.cwd(), 'package.json'));\n    return new StreamableFile(file);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callback-Style TypeORM Transactions in NestJS\nDESCRIPTION: Shows an alternative approach to transactions using the callback-style transaction method from TypeORM's DataSource. This provides a more concise way to handle transactions without explicit transaction lifecycle management.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nasync createMany(users: User[]) {\n  await this.dataSource.transaction(async manager => {\n    await manager.save(users[0]);\n    await manager.save(users[1]);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing RedisContext in NestJS Message Handler\nDESCRIPTION: Shows how to access the RedisContext object in a NestJS message handler, which provides additional information about the incoming request, such as the channel name.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('notifications')\ngetNotifications(@Payload() data: number[], @Ctx() context: RedisContext) {\n  console.log(`Channel: ${context.getChannel()}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Cache in NestJS\nDESCRIPTION: Demonstrates how to remove specific items or clear the entire cache.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Remove specific item\nawait this.cacheManager.del('key');\n\n// Clear entire cache\nawait this.cacheManager.clear();\n```\n\n----------------------------------------\n\nTITLE: Listing All Timeouts in NestJS\nDESCRIPTION: Shows how to list all timeouts using the SchedulerRegistry's getTimeouts method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ngetTimeouts() {\n  const timeouts = this.schedulerRegistry.getTimeouts();\n  timeouts.forEach(key => this.logger.log(`Timeout: ${key}`));\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition for Subscriptions\nDESCRIPTION: Defines the GraphQL schema types including Author, Post, Query, Comment, and Subscription types.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String\n  votes: Int\n}\n\ntype Query {\n  author(id: Int!): Author\n}\n\ntype Comment {\n  id: String\n  content: String\n}\n\ntype Subscription {\n  commentAdded(title: String!): Comment\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables Loaded Hook in NestJS\nDESCRIPTION: Shows how to use the ConfigModule.envVariablesLoaded hook to ensure environment variables are loaded before accessing them in conditional module configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getStorageModule() {\n  await ConfigModule.envVariablesLoaded;\n  return process.env.STORAGE === 'S3' ? S3StorageModule : DefaultStorageModule;\n}\n```\n\n----------------------------------------\n\nTITLE: Query Execution with Request Context\nDESCRIPTION: Example of executing a query with custom request context in CQRS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst myRequest = new MyRequest(user);\nconst hero = await this.queryBus.execute(new GetHeroQuery(heroId), myRequest);\n```\n\n----------------------------------------\n\nTITLE: Applying Field Middleware to a Custom Field Resolver\nDESCRIPTION: This snippet shows how to bind a field middleware to a method decorated with @ResolveField. The middleware will be executed when this specific resolver is called.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/field-middleware.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@ResolveField(() => String, { middleware: [loggerMiddleware] })\ntitle() {\n  return 'Placeholder';\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration to Fix Endless File Change Detection in Watch Mode\nDESCRIPTION: tsconfig.json configuration to resolve the issue where TypeScript 4.9+ enters an endless loop of file change detection on Windows. This sets the file watching strategy to use polling instead of file system events.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/errors.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n  \"watchOptions\": {\n    \"watchFile\": \"fixedPollingInterval\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing an Observable-based Message Handler in NestJS\nDESCRIPTION: Shows how to use RxJS Observables in a NestJS microservice message handler to emit multiple values.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern({ cmd: 'sum' })\naccumulate(data: number[]): Observable<number> {\n  return from([1, 2, 3]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Service in NestJS\nDESCRIPTION: Implementation of PrismaService that handles database connection initialization\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Transient Logger in NestJS\nDESCRIPTION: Shows how to extend NestJS's ConsoleLogger with custom functionality, using a transient scope to ensure each service gets its own logger instance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Scope, ConsoleLogger } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class MyLogger extends ConsoleLogger {\n  customLog() {\n    this.log('Please feed the cat!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Method and Controller Metadata in NestJS\nDESCRIPTION: Shows how to use Reflector's utility methods to combine metadata from both the method and controller levels. This example uses getAllAndOverride to prioritize method-level metadata.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst roles = this.reflector.getAllAndOverride(Roles, [context.getHandler(), context.getClass()]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify Options\nDESCRIPTION: Example showing how to pass configuration options to Fastify through the FastifyAdapter constructor.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew FastifyAdapter({ logger: true });\n```\n\n----------------------------------------\n\nTITLE: Service Description Layout in HTML\nDESCRIPTION: HTML structure for displaying service descriptions with images and text content in a row layout.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/enterprise.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row\">\n  <div class=\"content\">\n    <h4>Team Augmentation & Development</h4>\n    <p>\n      With team augmentation, NestJS core team members can work directly with your team on a daily basis to help take your project to the next-level. Consider us \"part of your team\", tackling the most ambitious projects - right by your side.\n    </p>\n  </div>\n  <div class=\"thumbnail p-l-30\">\n    <img src=\"/assets/enterprise/help.svg\" />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Exporting Sequelize Models from a Module\nDESCRIPTION: Making Sequelize models available to other modules by re-exporting the SequelizeModule from a feature module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { User } from './user.entity';\n\n@Module({\n  imports: [SequelizeModule.forFeature([User])],\n  exports: [SequelizeModule]\n})\nexport class UsersModule {}\n```\n\n----------------------------------------\n\nTITLE: Event Publisher with Request Context\nDESCRIPTION: Example of using EventPublisher to merge request context with a model.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst hero = this.publisher.mergeObjectContext(\n  await this.repository.findOneById(+heroId),\n  this.request, // Inject the request context here\n);\n```\n\n----------------------------------------\n\nTITLE: Using Namespaced Configuration Provider\nDESCRIPTION: Demonstrates using namespaced configuration as a provider for other modules\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync(databaseConfig.asProvider()),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: WebSocket Exception Response Structure in NestJS\nDESCRIPTION: Shows the structure of the exception message emitted by NestJS when a WsException is thrown in a WebSocket application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/exception-filters.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  status: 'error',\n  message: 'Invalid credentials.'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeORM Entity Subscribers in NestJS\nDESCRIPTION: Demonstrates how to create a TypeORM subscriber to listen for entity events in a NestJS application. The example shows a subscriber that hooks into the User entity's beforeInsert event.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DataSource,\n  EntitySubscriberInterface,\n  EventSubscriber,\n  InsertEvent,\n} from 'typeorm';\nimport { User } from './user.entity';\n\n@EventSubscriber()\nexport class UserSubscriber implements EntitySubscriberInterface<User> {\n  constructor(dataSource: DataSource) {\n    dataSource.subscribers.push(this);\n  }\n\n  listenTo() {\n    return User;\n  }\n\n  beforeInsert(event: InsertEvent<User>) {\n    console.log(`BEFORE USER INSERTED: `, event.entity);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Non-Class-Based Provider Tokens in NestJS\nDESCRIPTION: This snippet shows how to use string-valued tokens as custom providers in NestJS. It demonstrates injecting a pre-existing connection object using a string token.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connection } from './connection';\n\n@Module({\n  providers: [\n    {\n      provide: 'CONNECTION',\n      useValue: connection,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Kafka Exception Filter in NestJS Event Handler\nDESCRIPTION: This snippet demonstrates how to integrate the custom Kafka Exception Filter into a NestJS event handler. It sets the maximum number of retries to 5.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@UseFilters(new KafkaMaxRetryExceptionFilter(5))\nexport class MyEventHandler {\n  @EventPattern('your-topic')\n  async handleEvent(@Payload() data: any, @Ctx() context: KafkaContext) {\n    // Your event processing logic...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Mongoose Plugins for All Schemas on a Connection in NestJS\nDESCRIPTION: Shows how to register a Mongoose plugin that applies to all schemas associated with a specific connection by using the connectionFactory option in MongooseModule.forRoot.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot('mongodb://localhost/test', {\n      connectionFactory: (connection) => {\n        connection.plugin(require('mongoose-autopopulate'));\n        return connection;\n      }\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining SwaggerDocumentOptions Interface\nDESCRIPTION: TypeScript interface definition for SwaggerDocumentOptions, which allows customization of Swagger document generation behavior.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SwaggerDocumentOptions {\n  include?: Function[];\n  extraModels?: Function[];\n  ignoreGlobalPrefix?: boolean;\n  deepScanRoutes?: boolean;\n  operationIdFactory?: OperationIdFactory;\n  linkNameFactory?: (\n    controllerKey: string,\n    methodKey: string,\n    fieldKey: string\n  ) => string;\n  autoTagControllers?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Schema with TypeORM in NestJS\nDESCRIPTION: Demonstrates how to define an entity using TypeORM's EntitySchema approach instead of decorators. This method separates entity definition from the model class, defining columns, primary keys, and relationships in a schema object.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntitySchema } from 'typeorm';\nimport { User } from './user.entity';\n\nexport const UserSchema = new EntitySchema<User>({\n  name: 'User',\n  target: User,\n  columns: {\n    id: {\n      type: Number,\n      primary: true,\n      generated: true,\n    },\n    firstName: {\n      type: String,\n    },\n    lastName: {\n      type: String,\n    },\n    isActive: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  relations: {\n    photos: {\n      type: 'one-to-many',\n      target: 'Photo', // the name of the PhotoSchema\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying the @Roles() Decorator (TypeScript)\nDESCRIPTION: This code demonstrates how to use the `@Roles()` decorator to protect a route handler.  The `@Post()` decorator indicates it's a POST request handler, and `@Roles(Role.Admin)` specifies that only users with the `Admin` role can access this endpoint. The `CreateCatDto` is expected in the request body.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@Roles(Role.Admin)\ncreate(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REQUEST Scope for a Service in NestJS\nDESCRIPTION: Demonstrates how to specify REQUEST scope for a service using the @Injectable decorator. With REQUEST scope, a new instance of the provider is created for each incoming request.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class CatsService {}\n```\n\n----------------------------------------\n\nTITLE: Registering Mongoose Plugins for a Specific Schema in NestJS Asynchronously\nDESCRIPTION: Illustrates how to register a Mongoose plugin for a specific schema using the MongooseModule.forFeatureAsync method and a useFactory that applies the plugin to the schema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    MongooseModule.forFeatureAsync([\n      {\n        name: Cat.name,\n        useFactory: () => {\n          const schema = CatsSchema;\n          schema.plugin(require('mongoose-autopopulate'));\n          return schema;\n        },\n      },\n    ]),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Registering Payload for Durable Tree in TypeScript\nDESCRIPTION: This code snippet shows how to modify the return value of the attach method to include a payload for durable trees. The payload contains the tenantId, which can be injected using @Inject(REQUEST) or @Inject(CONTEXT) decorators.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nreturn {\n  resolve: (info: HostComponentInfo) =>\n    info.isTreeDurable ? tenantSubTreeId : contextId,\n  payload: { tenantId },\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Resolver Implementation\nDESCRIPTION: Example of an auto-generated GraphQL resolver with CRUD operations including queries and mutations\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/crud-generator.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolver, Query, Mutation, Args, Int } from '@nestjs/graphql';\nimport { UsersService } from './users.service';\nimport { User } from './entities/user.entity';\nimport { CreateUserInput } from './dto/create-user.input';\nimport { UpdateUserInput } from './dto/update-user.input';\n\n@Resolver(() => User)\nexport class UsersResolver {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Mutation(() => User)\n  createUser(@Args('createUserInput') createUserInput: CreateUserInput) {\n    return this.usersService.create(createUserInput);\n  }\n\n  @Query(() => [User], { name: 'users' })\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Query(() => User, { name: 'user' })\n  findOne(@Args('id', { type: () => Int }) id: number) {\n    return this.usersService.findOne(id);\n  }\n\n  @Mutation(() => User)\n  updateUser(@Args('updateUserInput') updateUserInput: UpdateUserInput) {\n    return this.usersService.update(updateUserInput.id, updateUserInput);\n  }\n\n  @Mutation(() => User)\n  removeUser(@Args('id', { type: () => Int }) id: number) {\n    return this.usersService.remove(id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing @SetMetadata Decorator Metadata in NestJS Guard\nDESCRIPTION: Illustrates how to access metadata set using a custom @SetMetadata decorator in a NestJS guard. This example retrieves the roles set for a route handler.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst roles = this.reflector.get<string[]>('roles', context.getHandler());\n```\n\n----------------------------------------\n\nTITLE: Request-Scoped Service with Context Injection\nDESCRIPTION: Demonstrates how to create a request-scoped service with access to the request context in microservices.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Scope, Inject } from '@nestjs/common';\nimport { CONTEXT, RequestContext } from '@nestjs/microservices';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class CatsService {\n  constructor(@Inject(CONTEXT) private ctx: RequestContext) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Mongoose Schema Hooks with Dependency Injection in NestJS\nDESCRIPTION: Demonstrates how to register asynchronous Mongoose schema hooks using MongooseModule.forFeatureAsync and useFactory, injecting dependencies (like ConfigService) that can be used within the hook logic.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    MongooseModule.forFeatureAsync([\n      {\n        name: Cat.name,\n        imports: [ConfigModule],\n        useFactory: (configService: ConfigService) => {\n          const schema = CatsSchema;\n          schema.pre('save', function() {\n            console.log(\n              `${configService.get('APP_NAME')}: Hello from pre save`,\n            ),\n          });\n          return schema;\n        },\n        inject: [ConfigService],\n      },\n    ]),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull Module with useExisting Syntax in TypeScript\nDESCRIPTION: Demonstrates using the useExisting syntax to reuse an existing ConfigService from another module for Bull configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Handler Interfaces and Types - NestJS - TypeScript\nDESCRIPTION: Defines the IPolicyHandler interface and related types allowing for both class-based and functional policy handlers in NestJS. Requires the AppAbility type from the casl-ability.factory module. These interfaces enable flexibility in how policies are written for authorization guards, accepting either objects with a handle() method or callback functions that return a boolean. Intended to be used as types for decorators and guards enforcing access control.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AppAbility } from '../casl/casl-ability.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n```\n\n----------------------------------------\n\nTITLE: Registering entity repositories within a NestJS module using MikroOrmModule.forFeature in TypeScript\nDESCRIPTION: Describes how to use the forFeature() method of MikroOrmModule to register repositories for specific entities such as Photo. This pattern scopes the repository to the module and allows injection of repositories via decorators in dependent services.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// photo.module.ts\n@Module({\n  imports: [MikroOrmModule.forFeature([Photo])],\n  providers: [PhotoService],\n  controllers: [PhotoController],\n})\nexport class PhotoModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining PubSub Provider in NestJS\nDESCRIPTION: Creates a provider for PubSub instance to be used across the application. This allows for dependency injection of the PubSub instance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  provide: 'PUB_SUB',\n  useValue: new PubSub(),\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Namespaced Configuration\nDESCRIPTION: Shows how to load namespaced configuration in a module\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [databaseConfig],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Displaying Nest CLI help commands\nDESCRIPTION: Command to show all available Nest CLI commands and options by invoking the help flag.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nest --help\n```\n\n----------------------------------------\n\nTITLE: Applying ContextIdStrategy in NestJS Application\nDESCRIPTION: This code snippet demonstrates how to apply the custom ContextIdStrategy in a NestJS application. It should be placed in the main.ts file or before any request hits the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nContextIdFactory.apply(new AggregateByTenantContextIdStrategy());\n```\n\n----------------------------------------\n\nTITLE: Extending BaseWsExceptionFilter in NestJS\nDESCRIPTION: Demonstrates how to create a custom WebSocket exception filter by extending the BaseWsExceptionFilter class in NestJS. This allows for overriding default behavior while delegating to the base filter.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/exception-filters.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Catch, ArgumentsHost } from '@nestjs/common';\nimport { BaseWsExceptionFilter } from '@nestjs/websockets';\n\n@Catch()\nexport class AllExceptionsFilter extends BaseWsExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    super.catch(exception, host);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Users Module in NestJS\nDESCRIPTION: Configuration of UsersModule to export UsersService for use in other modules.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing Passport and related packages\nDESCRIPTION: Commands to install necessary packages for Passport authentication in NestJS, including the local strategy and type definitions.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/passport passport passport-local\n$ npm install --save-dev @types/passport-local\n```\n\n----------------------------------------\n\nTITLE: Sample Output of NestJS Info Command\nDESCRIPTION: Example output of the 'nest info' command showing the NestJS ASCII art logo, system information including OS and Node.js version, and versions of installed NestJS packages.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/usages.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n _   _             _      ___  _____  _____  _     _____\n| \\ | |           | |    |_  |/  ___|/  __ \\| |   |_   _|\n|  \\| |  ___  ___ | |_     | |\\ `--. | /  \\/| |     | |\n| . ` | / _ \\/ __|| __|    | | `--. \\| |    | |     | |\n| |\\  ||  __/\\__ \\| |_ /\\__/ //\\__/ /| \\__/\\| |_____| |_\n\\_| \\_/ \\___||___/ \\__|\\____/ \\____/  \\____/\\_____/\\___/\n\n[System Information]\nOS Version : macOS High Sierra\nNodeJS Version : v20.18.0\n[Nest Information]\nmicroservices version : 10.0.0\nwebsockets version : 10.0.0\ntesting version : 10.0.0\ncommon version : 10.0.0\ncore version : 10.0.0\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cron Job in NestJS\nDESCRIPTION: Demonstrates how to delete a named cron job using the SchedulerRegistry's deleteCronJob method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteCron(name: string) {\n  this.schedulerRegistry.deleteCronJob(name);\n  this.logger.warn(`job ${name} deleted!`);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting a Specific Named Mongoose Connection into a NestJS Service\nDESCRIPTION: Demonstrates how to inject a Mongoose Connection object associated with a specific named connection into a NestJS service using the @InjectConnection decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/mongoose';\nimport { Connection } from 'mongoose';\n\n@Injectable()\nexport class CatsService {\n  constructor(@InjectConnection('cats') private connection: Connection) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom WebSocket Adapter in TypeScript\nDESCRIPTION: This code snippet shows a custom implementation of a WebSocket adapter using the ws library in NestJS. It demonstrates how to create, bind, and handle WebSocket connections and messages.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as WebSocket from 'ws';\nimport { WebSocketAdapter, INestApplicationContext } from '@nestjs/common';\nimport { MessageMappingProperties } from '@nestjs/websockets';\nimport { Observable, fromEvent, EMPTY } from 'rxjs';\nimport { mergeMap, filter } from 'rxjs/operators';\n\nexport class WsAdapter implements WebSocketAdapter {\n  constructor(private app: INestApplicationContext) {}\n\n  create(port: number, options: any = {}): any {\n    return new WebSocket.Server({ port, ...options });\n  }\n\n  bindClientConnect(server, callback: Function) {\n    server.on('connection', callback);\n  }\n\n  bindMessageHandlers(\n    client: WebSocket,\n    handlers: MessageMappingProperties[],\n    process: (data: any) => Observable<any>,\n  ) {\n    fromEvent(client, 'message')\n      .pipe(\n        mergeMap(data => this.bindMessageHandler(data, handlers, process)),\n        filter(result => result),\n      )\n      .subscribe(response => client.send(JSON.stringify(response)));\n  }\n\n  bindMessageHandler(\n    buffer,\n    handlers: MessageMappingProperties[],\n    process: (data: any) => Observable<any>,\n  ): Observable<any> {\n    const message = JSON.parse(buffer.data);\n    const messageHandler = handlers.find(\n      handler => handler.message === message.event,\n    );\n    if (!messageHandler) {\n      return EMPTY;\n    }\n    return process(messageHandler.callback(message.data));\n  }\n\n  close(server) {\n    server.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeOrmOptionsFactory in NestJS Service\nDESCRIPTION: This code snippet demonstrates how to create a service class that implements the TypeOrmOptionsFactory interface. This class is used to provide TypeORM configuration options in a more structured way.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class TypeOrmConfigService implements TypeOrmOptionsFactory {\n  createTypeOrmOptions(): TypeOrmModuleOptions {\n    return {\n      type: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      entities: [],\n      synchronize: true,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS in NestJS using enableCors() method\nDESCRIPTION: This snippet demonstrates how to enable CORS in a NestJS application using the enableCors() method on the Nest application object. It also shows how to set up the application to listen on a specified port.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/cors.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\napp.enableCors();\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Uploading Any Files with AnyFilesInterceptor in NestJS\nDESCRIPTION: Example of using AnyFilesInterceptor to handle file uploads with arbitrary field names in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('upload')\n@UseInterceptors(AnyFilesInterceptor())\nuploadFile(@UploadedFiles() files: Array<Express.Multer.File>) {\n  console.log(files);\n}\n```\n\n----------------------------------------\n\nTITLE: Keyed Kafka Messages with Headers\nDESCRIPTION: Shows how to send keyed Kafka messages with custom headers for co-partitioning requirements. Includes realm information in headers and hero ID as message key.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller()\nexport class HeroesController {\n  @MessagePattern('hero.kill.dragon')\n  killDragon(@Payload() message: KillDragonMessage): any {\n    const realm = 'Nest';\n    const heroId = message.heroId;\n    const dragonId = message.dragonId;\n\n    const items = [\n      { id: 1, name: 'Mythical Sword' },\n      { id: 2, name: 'Key to Dungeon' },\n    ];\n\n    return {\n      headers: {\n        realm\n      },\n      key: heroId,\n      value: items\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding LIFO Job to Queue in NestJS BullMQ\nDESCRIPTION: Example of adding a job to be processed as Last In First Out (LIFO) using the lifo option.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.audioQueue.add(\n  'transcode',\n  {\n    foo: 'bar',\n  },\n  { lifo: true },\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @nestjs/throttler Package - Bash\nDESCRIPTION: Installs the @nestjs/throttler package using npm. This package provides the necessary tools to implement rate limiting in NestJS applications. Requires Node.js and npm installed in the development environment.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @nestjs/throttler\n```\n\n----------------------------------------\n\nTITLE: Configuring Selective Spec Generation\nDESCRIPTION: Configuration example showing how to disable spec file generation specifically for service schematics while maintaining default behavior for other generators.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"generateOptions\": {\n    \"spec\": {\n      \"service\": false\n    }\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Request-Scoped Command Handler with Context Injection\nDESCRIPTION: Implementation of a request-scoped command handler with injected request context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n@CommandHandler(KillDragonCommand, {\n  scope: Scope.REQUEST,\n})\nexport class KillDragonHandler {\n  constructor(\n    @Inject(REQUEST) private request: MyRequest, // Inject the request context\n  ) {}\n\n  // Handler implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Schema Description with @ApiSchema() in TypeScript\nDESCRIPTION: This example demonstrates how to add a description to a generated OpenAPI schema using the @ApiSchema() decorator. The description is added to the 'CreateCatDto' schema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiSchema({ description: 'Description of the CreateCatDto schema' })\nclass CreateCatDto {}\n```\n\n----------------------------------------\n\nTITLE: Adding a Prioritized Job to a Bull Queue\nDESCRIPTION: Demonstrates adding a job with a priority level, where lower numbers indicate higher priority (1 is highest priority).\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.audioQueue.add(\n  {\n    foo: 'bar',\n  },\n  { priority: 2 },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Prioritized Job to Queue in NestJS BullMQ\nDESCRIPTION: Example of adding a job with priority level 2 using the priority option.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.audioQueue.add(\n  'transcode',\n  {\n    foo: 'bar',\n  },\n  { priority: 2 },\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Subscriptions in NestJS\nDESCRIPTION: Implements a filter function for subscriptions to control which events are sent to subscribers based on payload and variables.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Subscription(() => Comment, {\n  filter: (payload, variables) =>\n    payload.commentAdded.title === variables.title,\n})\ncommentAdded(@Args('title') title: string, @Context('pubsub') pubSub: PubSub) {\n  return pubSub.subscribe('commentAdded');\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Resolved Instances in NestJS\nDESCRIPTION: Demonstrates how multiple calls to resolve() create unique instances of a provider. This example resolves TransientService twice and compares the instances to show they are not equal.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/module-reference.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService implements OnModuleInit {\n  constructor(private moduleRef: ModuleRef) {}\n\n  async onModuleInit() {\n    const transientServices = await Promise.all([\n      this.moduleRef.resolve(TransientService),\n      this.moduleRef.resolve(TransientService),\n    ]);\n    console.log(transientServices[0] === transientServices[1]); // false\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n\n  async onModuleInit() {\n    const transientServices = await Promise.all([\n      this.moduleRef.resolve(TransientService),\n      this.moduleRef.resolve(TransientService),\n    ]);\n    console.log(transientServices[0] === transientServices[1]); // false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ParseIntPipe with Route Parameters in NestJS\nDESCRIPTION: Demonstrates how to apply the ParseIntPipe to route parameters for automatic type conversion.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':id')\nasync findOne(@Param('id', new ParseIntPipe()) id) {\n  return this.catsService.findOne(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing nest-commander Package\nDESCRIPTION: Command to install the nest-commander package via npm\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/nest-commander.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i nest-commander\n```\n\n----------------------------------------\n\nTITLE: Configuring Brotli Compression Quality in Fastify\nDESCRIPTION: Configuration of Brotli compression quality parameters in Fastify compression middleware.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/compression.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { constants } from 'zlib';\n// somewhere in your initialization file\nawait app.register(compression, { brotliOptions: { params: { [constants.BROTLI_PARAM_QUALITY]: 4 } } });\n```\n\n----------------------------------------\n\nTITLE: Injecting Model with Dependencies Decorator (Vanilla JavaScript/TypeScript) - TypeScript\nDESCRIPTION: Uses the @Dependencies decorator as an alternative to @InjectModel for injecting the Cat model, suitable for use without TypeScript experimental decorators. Shows typical CRUD methods. Requires @nestjs/common, @nestjs/mongoose, and proper set-up of Cat model token.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from 'mongoose';\nimport { Injectable, Dependencies } from '@nestjs/common';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { Cat } from './schemas/cat.schema';\n\n@Injectable()\n@Dependencies(getModelToken(Cat.name))\nexport class CatsService {\n  constructor(catModel) {\n    this.catModel = catModel;\n  }\n\n  async create(createCatDto) {\n    const createdCat = new this.catModel(createCatDto);\n    return createdCat.save();\n  }\n\n  async findAll() {\n    return this.catModel.find().exec();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Serialization in Client Proxy\nDESCRIPTION: This snippet demonstrates how to create a custom client proxy that serializes errors into RpcExceptions, showcasing advanced error handling techniques.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientTcp, RpcException } from '@nestjs/microservices';\n\nclass ErrorHandlingProxy extends ClientTCP {\n  serializeError(err: Error) {\n    return new RpcException(err);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Checking Permissions for a Non-Admin User (TypeScript)\nDESCRIPTION: Provides a concrete example of creating a non-admin `User` instance, generating their `Ability` object using `CaslAbilityFactory`, and checking various permissions (`Action.Read`, `Action.Delete`, `Action.Create` on the `Article` subject) using `ability.can()`. The results (`true`, `false`, `false`) demonstrate the rules defined in `CaslAbilityFactory`.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User();\nuser.isAdmin = false;\n\nconst ability = this.caslAbilityFactory.createForUser(user);\nability.can(Action.Read, Article); // true\nability.can(Action.Delete, Article); // false\nability.can(Action.Create, Article); // false\n```\n\n----------------------------------------\n\nTITLE: Registering Global AuthGuard in NestJS\nDESCRIPTION: This snippet shows how to register an AuthGuard as a global guard in a NestJS module. This allows automatic binding of the AuthGuard to all endpoints.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nproviders: [\n  {\n    provide: APP_GUARD,\n    useClass: AuthGuard,\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeouts in NestJS\nDESCRIPTION: Examples of creating timeout-based scheduled tasks using @Timeout decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Timeout(5000)\nhandleTimeout() {\n  this.logger.debug('Called once after 5 seconds');\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Timeout('notifications', 2500)\nhandleTimeout() {}\n```\n\n----------------------------------------\n\nTITLE: Adding Delayed Job to Queue in NestJS BullMQ\nDESCRIPTION: Example of adding a job to a queue with a 3-second delay using the delay option.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.audioQueue.add(\n  'transcode',\n  {\n    foo: 'bar',\n  },\n  { delay: 3000 }, // 3 seconds delayed\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Kafka Producer and Consumer in NestJS\nDESCRIPTION: This snippet shows how to access the underlying Kafka producer and consumer instances in NestJS for advanced use cases, such as manually closing connections or using driver-specific methods.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst producer = this.client.producer;\nconst consumer = this.client.consumer;\n```\n\n----------------------------------------\n\nTITLE: Installing bcrypt Package for Hashing in NestJS\nDESCRIPTION: This shell command installs the bcrypt package and its TypeScript types for use in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/encryption-hashing.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i bcrypt\n$ npm i -D @types/bcrypt\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Wildcards in NestJS Microservice\nDESCRIPTION: Shows how to enable wildcard support in RabbitMQ routing keys configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(\n  AppModule,\n  {\n    transport: Transport.RMQ,\n    options: {\n      urls: ['amqp://localhost:5672'],\n      queue: 'cats_queue',\n      wildcards: true,\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring EventEmitterModule in NestJS\nDESCRIPTION: Shows how to pass configuration options to the EventEmitterModule.forRoot() method to customize the underlying EventEmitter instance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nEventEmitterModule.forRoot({\n  // set this to `true` to use wildcards\n  wildcard: false,\n  // the delimiter used to segment namespaces\n  delimiter: '.',\n  // set this to `true` if you want to emit the newListener event\n  newListener: false,\n  // set this to `true` if you want to emit the removeListener event\n  removeListener: false,\n  // the maximum amount of listeners that can be assigned to an event\n  maxListeners: 10,\n  // show event name in memory leak message when more than maximum amount of listeners is assigned\n  verboseMemoryLeak: false,\n  // disable throwing uncaughtException if an error event is emitted and it has no listeners\n  ignoreErrors: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Events in NestJS\nDESCRIPTION: Shows how to use the @OnEvent() decorator to declare an event listener method in a NestJS service or controller.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@OnEvent('order.created')\nhandleOrderCreatedEvent(payload: OrderCreatedEvent) {\n  // handle and process \"OrderCreatedEvent\" event\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cookie Decorator in NestJS Route Handler\nDESCRIPTION: This code shows how to use the custom @Cookies() decorator in a NestJS route handler to extract a specific cookie value.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nfindAll(@Cookies('name') name: string) {}\n```\n\n----------------------------------------\n\nTITLE: Schema-First Interface Definition\nDESCRIPTION: Defines a GraphQL interface using Schema Definition Language (SDL).\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Character {\n  id: ID!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a gRPC Service Handler with Class-Based Association\nDESCRIPTION: Implementation of a gRPC service using class name for automatic service association. The class name 'HeroesService' is used to match the service definition in the proto file without requiring arguments in the @GrpcMethod decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller()\nexport class HeroesService {\n  @GrpcMethod()\n  findOne(data: HeroById, metadata: Metadata, call: ServerUnaryCall<any, any>): Hero {\n    const items = [\n      { id: 1, name: 'John' },\n      { id: 2, name: 'Doe' },\n    ];\n    return items.find(({ id }) => id === data.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using switchToHttp() for HTTP Context\nDESCRIPTION: Demonstrates how to use the switchToHttp() method to access the request and response objects in an HTTP context with proper typing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ctx = host.switchToHttp();\nconst request = ctx.getRequest<Request>();\nconst response = ctx.getResponse<Response>();\n```\n\n----------------------------------------\n\nTITLE: JWT Constants Configuration in NestJS\nDESCRIPTION: Configuration file defining JWT secret key constant for token signing and verification.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const jwtConstants = {\n  secret: 'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Cookie Decorator in NestJS\nDESCRIPTION: This snippet demonstrates how to create a custom decorator for convenient, declarative access to incoming cookies in NestJS, which works across different platforms.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\nexport const Cookies = createParamDecorator((data: string, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest();\n  return data ? request.cookies?.[data] : request.cookies;\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting TypeORM DataSource in NestJS AppModule\nDESCRIPTION: Example of injecting the TypeORM DataSource into the AppModule constructor for database operations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from 'typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forRoot(), UsersModule],\n})\nexport class AppModule {\n  constructor(private dataSource: DataSource) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling NATS Context and Payload\nDESCRIPTION: Example of accessing NATS context and payload in a message handler with subject information.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('notifications')\ngetNotifications(@Payload() data: number[], @Ctx() context: NatsContext) {\n  console.log(`Subject: ${context.getSubject()}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API Controller\nDESCRIPTION: Main application controller implementing REST endpoints using User and Post services\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Body,\n  Put,\n  Delete,\n} from '@nestjs/common';\nimport { UsersService } from './user.service';\nimport { PostsService } from './post.service';\nimport { User as UserModel, Post as PostModel } from '@prisma/client';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly userService: UsersService,\n    private readonly postService: PostsService,\n  ) {}\n\n  @Get('post/:id')\n  async getPostById(@Param('id') id: string): Promise<PostModel> {\n    return this.postService.post({ id: Number(id) });\n  }\n\n  @Get('feed')\n  async getPublishedPosts(): Promise<PostModel[]> {\n    return this.postService.posts({\n      where: { published: true },\n    });\n  }\n\n  @Get('filtered-posts/:searchString')\n  async getFilteredPosts(\n    @Param('searchString') searchString: string,\n  ): Promise<PostModel[]> {\n    return this.postService.posts({\n      where: {\n        OR: [\n          {\n            title: { contains: searchString },\n          },\n          {\n            content: { contains: searchString },\n          },\n        ],\n      },\n    });\n  }\n\n  @Post('post')\n  async createDraft(\n    @Body() postData: { title: string; content?: string; authorEmail: string },\n  ): Promise<PostModel> {\n    const { title, content, authorEmail } = postData;\n    return this.postService.createPost({\n      title,\n      content,\n      author: {\n        connect: { email: authorEmail },\n      },\n    });\n  }\n\n  @Post('user')\n  async signupUser(\n    @Body() userData: { name?: string; email: string },\n  ): Promise<UserModel> {\n    return this.userService.createUser(userData);\n  }\n\n  @Put('publish/:id')\n  async publishPost(@Param('id') id: string): Promise<PostModel> {\n    return this.postService.updatePost({\n      where: { id: Number(id) },\n      data: { published: true },\n    });\n  }\n\n  @Delete('post/:id')\n  async deletePost(@Param('id') id: string): Promise<PostModel> {\n    return this.postService.deletePost({ id: Number(id) });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize Database Provider\nDESCRIPTION: Setup of Sequelize instance with MySQL connection configuration and model registration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from 'sequelize-typescript';\nimport { Cat } from '../cats/cat.entity';\n\nexport const databaseProviders = [\n  {\n    provide: 'SEQUELIZE',\n    useFactory: async () => {\n      const sequelize = new Sequelize({\n        dialect: 'mysql',\n        host: 'localhost',\n        port: 3306,\n        username: 'root',\n        password: 'password',\n        database: 'nest',\n      });\n      sequelize.addModels([Cat]);\n      await sequelize.sync();\n      return sequelize;\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Pagination in TypeScript for GraphQL\nDESCRIPTION: This snippet demonstrates how to create a generic pagination implementation using TypeScript decorators and NestJS GraphQL modules. It defines interfaces and classes for edge types and paginated types, which can be used to create specialized paginated objects.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Field, ObjectType, Int } from '@nestjs/graphql';\nimport { Type } from '@nestjs/common';\n\ninterface IEdgeType<T> {\n  cursor: string;\n  node: T;\n}\n\nexport interface IPaginatedType<T> {\n  edges: IEdgeType<T>[];\n  nodes: T[];\n  totalCount: number;\n  hasNextPage: boolean;\n}\n\nexport function Paginated<T>(classRef: Type<T>): Type<IPaginatedType<T>> {\n  @ObjectType(`${classRef.name}Edge`)\n  abstract class EdgeType {\n    @Field(() => String)\n    cursor: string;\n\n    @Field(() => classRef)\n    node: T;\n  }\n\n  @ObjectType({ isAbstract: true })\n  abstract class PaginatedType implements IPaginatedType<T> {\n    @Field(() => [EdgeType], { nullable: true })\n    edges: EdgeType[];\n\n    @Field(() => [classRef], { nullable: true })\n    nodes: T[];\n\n    @Field(() => Int)\n    totalCount: number;\n\n    @Field()\n    hasNextPage: boolean;\n  }\n  return PaginatedType as Type<IPaginatedType<T>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Consumer in NestJS BullMQ\nDESCRIPTION: Basic setup of a queue consumer class using the @Processor decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor } from '@nestjs/bullmq';\n\n@Processor('audio')\nexport class AudioConsumer {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller Metadata in NestJS Guard\nDESCRIPTION: Demonstrates how to retrieve metadata applied at the controller level using the Reflector class. This is useful when metadata is set for all routes in a controller.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst roles = this.reflector.get(Roles, context.getClass());\n```\n\n----------------------------------------\n\nTITLE: Advanced Asset Configuration in NestJS\nDESCRIPTION: Detailed asset configuration showing include/exclude patterns and watch mode settings for GraphQL files.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"assets\": [\n  { \"include\": \"**/*.graphql\", \"exclude\": \"**/omitted.graphql\", \"watchAssets\": true },\n]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Module Dependency and Lifecycle Hook Execution Order\nDESCRIPTION: Demonstrates the order of execution for OnModuleInit and OnModuleDestroy hooks in a scenario with three modules (A, B, C) where A depends on B, which depends on C.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n// Where A, B, and C are modules and \"->\" represents the module dependency.\nA -> B -> C\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nC -> B -> A\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nA -> B -> C\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Interaction in TypeScript with Necord\nDESCRIPTION: This snippet shows how to create and handle a modal interaction using Necord in a NestJS application. It defines a method that responds to a modal submission by replying with the value of a specific input field.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Context, Modal, ModalContext } from 'necord';\n\n@Injectable()\nexport class AppModals {\n  @Modal('pizza')\n  public onModal(@Context() [interaction]: ModalContext) {\n    return interaction.reply({\n      content: `Your fav pizza : ${interaction.fields.getTextInputValue('pizza')}`\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Prefix Ignore in Swagger\nDESCRIPTION: Shows how to ignore global prefix for routes when creating Swagger documentation using ignoreGlobalPrefix option.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/other-features.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst document = SwaggerModule.createDocument(app, options, {\n  ignoreGlobalPrefix: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Test Scripts for Vitest in NestJS\nDESCRIPTION: This snippet shows the updated test scripts in package.json for running Vitest in a NestJS project. It includes commands for running tests, watching for changes, generating coverage reports, debugging, and running E2E tests with a custom configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"vitest run\",\n    \"test:watch\": \"vitest\",\n    \"test:cov\": \"vitest run --coverage\",\n    \"test:debug\": \"vitest --inspect-brk --inspect --logHeapUsage --threads=false\",\n    \"test:e2e\": \"vitest run --config ./vitest.config.e2e.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering TypeORM Entity Subscribers in NestJS Module\nDESCRIPTION: Shows how to register a TypeORM entity subscriber in a NestJS module. The subscriber is added to the providers array alongside the related service to ensure it's instantiated by NestJS's dependency injection system.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { UserSubscriber } from './user.subscriber';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService, UserSubscriber],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n```\n\n----------------------------------------\n\nTITLE: Running a NestJS Application in Development Mode\nDESCRIPTION: Command to start a NestJS application in development mode with file watching enabled. This will automatically recompile and reload the server when files change.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/first-steps.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run start:dev\n```\n\n----------------------------------------\n\nTITLE: Using Custom Decorators in GraphQL Mutations in NestJS\nDESCRIPTION: Shows how to use a custom @User() decorator in a GraphQL mutation to access the authenticated user without explicitly extracting it from the context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Mutation()\nasync upvotePost(\n  @User() user: UserEntity,\n  @Args('postId') postId: number,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Using PartialType for Optional Fields in TypeScript\nDESCRIPTION: Creates an UpdateCatDto class that extends PartialType of CreateCatDto, making all fields optional.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/mapped-types.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UpdateCatDto extends PartialType(CreateCatDto) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercurius Integration for Fastify in NestJS GraphQL\nDESCRIPTION: This code shows how to set up the GraphQLModule using the Mercurius driver for Fastify users, enabling the GraphiQL interface.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { MercuriusDriver, MercuriusDriverConfig } from '@nestjs/mercurius';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<MercuriusDriverConfig>({\n      driver: MercuriusDriver,\n      graphiql: true,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Redis PubSub Configuration\nDESCRIPTION: Shows how to configure Redis-based PubSub emitter for production use with MercuriusDriver.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<MercuriusDriverConfig>({\n  driver: MercuriusDriver,\n  subscription: {\n    emitter: require('mqemitter-redis')({\n      port: 6579,\n      host: '127.0.0.1',\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Intervals in NestJS\nDESCRIPTION: Examples of creating interval-based scheduled tasks using @Interval decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Interval(10000)\nhandleInterval() {\n  this.logger.debug('Called every 10 seconds');\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Interval('notifications', 2500)\nhandleInterval() {}\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic TypeScript Definition Generation in NestJS GraphQL\nDESCRIPTION: This code configures the GraphQLModule to automatically generate TypeScript definitions from GraphQL SDL, specifying the output path and format.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  typePaths: ['./**/*.graphql'],\n  definitions: {\n    path: join(process.cwd(), 'src/graphql.ts'),\n    outputAs: 'class',\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Client Driver Instance in NestJS\nDESCRIPTION: Shows how to access the underlying AMQP connection manager instance from the client for advanced usage.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst managerRef =\n  this.client.unwrap<import('amqp-connection-manager').AmqpConnectionManager>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless Framework\nDESCRIPTION: YAML configuration for Serverless framework defining AWS Lambda function settings and HTTP endpoints\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservice: serverless-example\n\nplugins:\n  - serverless-offline\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n\nfunctions:\n  main:\n    handler: dist/main.handler\n    events:\n      - http:\n          method: ANY\n          path: /\n      - http:\n          method: ANY\n          path: '{proxy+}'\n```\n\n----------------------------------------\n\nTITLE: RpcArgumentsHost Interface Methods\nDESCRIPTION: Defines the methods available in the RpcArgumentsHost interface for microservices (RPC) contexts, showing how to access data and context objects.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RpcArgumentsHost {\n  /**\n   * Returns the data object.\n   */\n  getData<T>(): T;\n\n  /**\n   * Returns the context object.\n   */\n  getContext<T>(): T;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GraphQL Subscriptions with Apollo Driver in NestJS\nDESCRIPTION: Configures the GraphQLModule to enable subscriptions using the Apollo driver. It demonstrates how to use both the deprecated 'installSubscriptionHandlers' option and the recommended 'graphql-ws' package.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  installSubscriptionHandlers: true,\n}),\n```\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  subscriptions: {\n    'graphql-ws': true\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Configuring MongooseModule Async with Existing Provider\nDESCRIPTION: Demonstrates configuring the MongooseModule asynchronously by reusing an existing provider that implements the necessary options factory interface. This avoids creating a new instance within the module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nMongooseModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Redis and Socket.IO Adapter Dependencies\nDESCRIPTION: This command installs the necessary packages for implementing a Redis-based Socket.IO adapter in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save redis socket.io @socket.io/redis-adapter\n```\n\n----------------------------------------\n\nTITLE: Providing MikroOrmModule configuration explicitly from external file in TypeScript\nDESCRIPTION: Shows how to import MikroORM configuration from a separate TypeScript config file and supply it to MikroOrmModule.forRoot(). This method avoids issues with build tools that use tree shaking and ensures that configuration remains explicit and available at runtime.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport config from './mikro-orm.config'; // your ORM config\n\n@Module({\n  imports: [\n    MikroOrmModule.forRoot(config),\n  ],\n  ...\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger Operation ID Generation\nDESCRIPTION: Example of customizing the operation ID generation in Swagger document options to use method names as operation IDs.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst options: SwaggerDocumentOptions =  {\n  operationIdFactory: (\n    controllerKey: string,\n    methodKey: string\n  ) => methodKey\n};\nconst documentFactory = () => SwaggerModule.createDocument(app, config, options);\n```\n\n----------------------------------------\n\nTITLE: Installing Jest with SWC for NestJS\nDESCRIPTION: Command to install necessary packages for using Jest with SWC in a NestJS project.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save-dev jest @swc/core @swc/jest\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Model with CLI Plugin\nDESCRIPTION: Simplified Author model definition using the CLI plugin which automatically adds necessary decorators.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/cli-plugin.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@ObjectType()\nexport class Author {\n  @Field(type => ID)\n  id: number;\n  firstName?: string;\n  lastName?: string;\n  posts: Post[];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions and Deprecation to Enum Values\nDESCRIPTION: Provides descriptions for individual enum values and marks certain values as deprecated using the valuesMap property.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nregisterEnumType(AllowedColor, {\n  name: 'AllowedColor',\n  description: 'The supported colors.',\n  valuesMap: {\n    RED: {\n      description: 'The default color.',\n    },\n    BLUE: {\n      deprecationReason: 'Too blue.',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Logger in Terminus Module\nDESCRIPTION: Shows how to configure the Terminus module to use a custom logger by passing it to the TerminusModule.forRoot() method in the module imports.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\nimports: [\n  TerminusModule.forRoot({\n    logger: TerminusLogger,\n  }),\n],\n})\nexport class HealthModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Microservice\nDESCRIPTION: Setup for creating a NestJS microservice with RabbitMQ transport configuration including connection URL and queue options\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {\n  transport: Transport.RMQ,\n  options: {\n    urls: ['amqp://localhost:5672'],\n    queue: 'cats_queue',\n    queueOptions: {\n      durable: false\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom User Decorator in NestJS Controllers\nDESCRIPTION: Shows how to use the custom User decorator in a controller method with both TypeScript and JavaScript (switch) syntax.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nasync findOne(@User() user: UserEntity) {\n  console.log(user);\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSON Field in Class\nDESCRIPTION: Example of using the JSON scalar type in a class definition.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Field(() => GraphQLJSON)\ninfo: JSON;\n```\n\n----------------------------------------\n\nTITLE: Registering Global Exception Filter in NestJS\nDESCRIPTION: Shows how to register a global-scoped exception filter that applies to all controllers and route handlers in the application using the useGlobalFilters method in the bootstrap function.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalFilters(new HttpExceptionFilter());\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Customizing Resolver Method Names in NestJS GraphQL\nDESCRIPTION: This snippet demonstrates how to customize resolver method names by passing arguments to the @Query and @ResolveField decorators. This allows for more descriptive method names while maintaining the desired GraphQL schema structure.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver('Author')\nexport class AuthorsResolver {\n  constructor(\n    private authorsService: AuthorsService,\n    private postsService: PostsService,\n  ) {}\n\n  @Query('author')\n  async getAuthor(@Args('id') id: number) {\n    return this.authorsService.findOneById(id);\n  }\n\n  @ResolveField('posts')\n  async getPosts(@Parent() author) {\n    const { id } = author;\n    return this.postsService.findAll({ authorId: id });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zod Validation Pipe in TypeScript\nDESCRIPTION: Custom validation pipe implementation using Zod schema validation. Transforms incoming data and validates it against a Zod schema, throwing BadRequestException on validation failure.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PipeTransform, ArgumentMetadata, BadRequestException } from '@nestjs/common';\nimport { ZodSchema  } from 'zod';\n\nexport class ZodValidationPipe implements PipeTransform {\n  constructor(private schema: ZodSchema) {}\n\n  transform(value: unknown, metadata: ArgumentMetadata) {\n    try {\n      const parsedValue = this.schema.parse(value);\n      return parsedValue;\n    } catch (error) {\n      throw new BadRequestException('Validation failed');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom GraphQL Directive Transformer in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom directive transformer function that converts string results to uppercase. It uses the mapSchema function to iterate through schema locations and apply transformations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/directives.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDirective, MapperKind, mapSchema } from '@graphql-tools/utils';\nimport { defaultFieldResolver, GraphQLSchema } from 'graphql';\n\nexport function upperDirectiveTransformer(\n  schema: GraphQLSchema,\n  directiveName: string,\n) {\n  return mapSchema(schema, {\n    [MapperKind.OBJECT_FIELD]: (fieldConfig) => {\n      const upperDirective = getDirective(\n        schema,\n        fieldConfig,\n        directiveName,\n      )?.[0];\n\n      if (upperDirective) {\n        const { resolve = defaultFieldResolver } = fieldConfig;\n\n        // Replace the original resolver with a function that *first* calls\n        // the original resolver, then converts its result to upper case\n        fieldConfig.resolve = async function (source, args, context, info) {\n          const result = await resolve(source, args, context, info);\n          if (typeof result === 'string') {\n            return result.toUpperCase();\n          }\n          return result;\n        };\n        return fieldConfig;\n      }\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for HMR in NestJS without CLI\nDESCRIPTION: Webpack configuration for enabling Hot Module Replacement in a NestJS application when not using the Nest CLI. This configuration includes the necessary loaders, plugins, and output settings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst webpack = require('webpack');\nconst path = require('path');\nconst nodeExternals = require('webpack-node-externals');\nconst { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');\n\nmodule.exports = {\n  entry: ['webpack/hot/poll?100', './src/main.ts'],\n  target: 'node',\n  externals: [\n    nodeExternals({\n      allowlist: ['webpack/hot/poll?100'],\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /.tsx?$/,\n        use: 'ts-loader',\n        exclude: /node_modules/,\n      },\n    ],\n  },\n  mode: 'development',\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js'],\n  },\n  plugins: [new webpack.HotModuleReplacementPlugin(), new RunScriptWebpackPlugin({ name: 'server.js', autoRestart: false })],\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'server.js',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining autocomplete options in Necord DTOs\nDESCRIPTION: Demonstrates how to mark a DTO property for autocomplete in Necord slash commands.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StringOption } from 'necord';\n\nexport class CatDto {\n  @StringOption({\n    name: 'cat',\n    description: 'Choose a cat breed',\n    autocomplete: true,\n    required: true,\n  })\n  cat: string;\n}\n```\n\n----------------------------------------\n\nTITLE: WsArgumentsHost Interface Methods\nDESCRIPTION: Defines the methods available in the WsArgumentsHost interface for WebSockets contexts, showing how to access data and client objects.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WsArgumentsHost {\n  /**\n   * Returns the data object.\n   */\n  getData<T>(): T;\n  /**\n   * Returns the client object.\n   */\n  getClient<T>(): T;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Condition Function for Conditional Module Loading in NestJS\nDESCRIPTION: Shows how to use a custom condition function with ConditionalModule to determine whether to load a module based on multiple environment variables.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ConditionalModule.registerWhen(\n      FooBarModule,\n      (env: NodeJS.ProcessEnv) => !!env['foo'] && !!env['bar'],\n    ),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Exception Response\nDESCRIPTION: Default JSON response format when an unrecognized exception is thrown by the built-in global exception filter.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCode\": 500,\n  \"message\": \"Internal server error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Redis Client Error Events in NestJS\nDESCRIPTION: Shows how to listen for error events emitted by the Redis client, allowing for custom error handling or additional operations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis.client.on('error', (err) => {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving Request-Scoped Service for Testing in NestJS\nDESCRIPTION: This snippet demonstrates how to use the mocked context identifier to resolve a request-scoped service instance for testing purposes. It allows access to the same instance that would be created for a real request.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncatsService = await moduleRef.resolve(CatsService, contextId);\n```\n\n----------------------------------------\n\nTITLE: Implementing CatsDAL in NestJS\nDESCRIPTION: TypeScript code for a NestJS data access layer (DAL) that interacts with a database using Prisma ORM to save cat data.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class CatsDAL {\n  constructor(private prisma: PrismaClient) {}\n\n  async saveCat(cat: Cat): Promise<Cat> {\n    return this.prisma.cat.create({data: cat});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Resolver Enhancers in NestJS GraphQL\nDESCRIPTION: Shows how to configure the GraphQL module to run enhancers (interceptors, guards, filters) at the field resolver level. This example enables interceptors for @ResolveField() methods.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot({\n  fieldResolverEnhancers: ['interceptors']\n}),\n```\n\n----------------------------------------\n\nTITLE: Enabling Configuration Cache\nDESCRIPTION: Shows how to enable caching for environment variables\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nConfigModule.forRoot({\n  cache: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Application with HMR\nDESCRIPTION: Command to start the NestJS application with Hot Module Replacement enabled using the npm script.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run start:dev\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Dependencies\nDESCRIPTION: Commands to install Prisma CLI as a development dependency in the project.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd hello-prisma\n$ npm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Module Date Scalar Mode\nDESCRIPTION: Configuration for setting the date scalar mode to timestamp in GraphQL module options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot({\n  buildSchemaOptions: {\n    dateScalarMode: 'timestamp',\n  }\n}),\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Dependencies for NestJS\nDESCRIPTION: Command to install the required Sentry packages including the NestJS SDK and profiling node module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @sentry/nestjs @sentry/profiling-node\n```\n\n----------------------------------------\n\nTITLE: Registering Queue Producer Service\nDESCRIPTION: Implementation of a service that produces jobs for the queue using dependency injection\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Queue } from 'bullmq';\nimport { InjectQueue } from '@nestjs/bullmq';\n\n@Injectable()\nexport class AudioService {\n  constructor(@InjectQueue('audio') private audioQueue: Queue) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Graceful Shutdown Timeout in Terminus Module\nDESCRIPTION: Demonstrates how to configure a graceful shutdown timeout for the Terminus module, which can be useful when working with orchestrators like Kubernetes to achieve zero downtime during container shutdown.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    TerminusModule.forRoot({\n      gracefulShutdownTimeoutMs: 1000,\n    }),\n  ]\n})\nexport class HealthModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Strategy Options in NestJS\nDESCRIPTION: Demonstrates how to pass strategy-specific options to customize field names for username and password. This allows the strategy to work with custom field names in the authentication request.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private authService: AuthService) {\n  super({\n    usernameField: 'email',\n    passwordField: 'password',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Database Providers in NestJS Module\nDESCRIPTION: Creates a DatabaseModule that exports the database providers, making them accessible to other parts of the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n```\n\n----------------------------------------\n\nTITLE: Listening to All Events in NestJS\nDESCRIPTION: Demonstrates how to create an event listener that catches all events using the multi-level wildcard pattern.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@OnEvent('**')\nhandleEverything(payload: any) {\n  // handle and process an event\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Redis ClientProxy using ClientsModule in NestJS\nDESCRIPTION: Demonstrates how to create a Redis ClientProxy instance using the ClientsModule in NestJS. It registers the client with specific options and a name for injection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ClientsModule.register([\n      {\n        name: 'MATH_SERVICE',\n        transport: Transport.REDIS,\n        options: {\n          host: 'localhost',\n          port: 6379,\n        }\n      },\n    ]),\n  ]\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Query-Level Complexity with Dynamic Calculation\nDESCRIPTION: Example of implementing complexity calculation for a GraphQL query based on input parameters\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/complexity.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Query({ complexity: (options: ComplexityEstimatorArgs) => options.args.count * options.childComplexity })\nitems(@Args('count') count: number) {\n  return this.itemsService.getItems({ count });\n}\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema for Author Query\nDESCRIPTION: This snippet shows the GraphQL schema generated from the author query definition. It specifies the query name, argument, and return type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  author(id: Int!): Author\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Health Checks in NestJS Microservice\nDESCRIPTION: Demonstrates how to set up gRPC health checks in a NestJS microservice application. It includes configuring the health implementation and adding it to the gRPC server.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HealthImplementation, protoPath as healthCheckProtoPath } from 'grpc-health-check';\n\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {\n  options: {\n    protoPath: [\n      healthCheckProtoPath,\n      protoPath: join(__dirname, 'hero/hero.proto'),\n    ],\n    onLoadPackageDefinition: (pkg, server) => {\n      const healthImpl = new HealthImplementation({\n        '': 'UNKNOWN',\n      });\n\n      healthImpl.addToServer(server);\n      healthImpl.setStatus('', 'SERVING');\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Handling in NestJS Guard\nDESCRIPTION: Example of throwing a custom unauthorized exception in the guard instead of using the default forbidden exception.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new UnauthorizedException();\n```\n\n----------------------------------------\n\nTITLE: Installing CASL Dependency via npm\nDESCRIPTION: Installs the `@casl/ability` package using the npm package manager. This package is the core dependency required for implementing CASL authorization features in the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @casl/ability\n```\n\n----------------------------------------\n\nTITLE: Enabling Type Checking with SWC Builder\nDESCRIPTION: Command to start a NestJS application using SWC builder with type checking enabled.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ nest start -b swc --type-check\n```\n\n----------------------------------------\n\nTITLE: Creating an AsyncLocalStorage Module in NestJS\nDESCRIPTION: This snippet demonstrates how to create a NestJS module that provides an AsyncLocalStorage instance as a custom provider. It sets up the AlsModule which can be imported in other parts of the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/async-local-storage.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  providers: [\n    {\n      provide: AsyncLocalStorage,\n      useValue: new AsyncLocalStorage(),\n    },\n  ],\n  exports: [AsyncLocalStorage],\n})\nexport class AlsModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Service Based Providers in NestJS\nDESCRIPTION: This example shows how to create a provider that supplies a non-service value, such as configuration objects based on the current environment.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst configFactory = {\n  provide: 'CONFIG',\n  useFactory: () => {\n    return process.env.NODE_ENV === 'development' ? devConfig : prodConfig;\n  },\n};\n\n@Module({\n  providers: [configFactory],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing CatsHttpService in NestJS\nDESCRIPTION: TypeScript code for a NestJS service that fetches cat data from an API and logs the operation, demonstrating dependency injection of HttpClient and Logger.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsHttpService {\n  constructor(private httpClient: HttpClient, private logger: Logger) {}\n\n  async fetchCats(): Promise<Cat[]> {\n    this.logger.log('Fetching cats from the API');\n    const response = await this.httpClient.get('/cats');\n    return response.data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Session Middleware in NestJS\nDESCRIPTION: Example of applying express-session middleware globally in a NestJS application. It sets up session configuration options including secret, resave, and saveUninitialized.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as session from 'express-session';\n// somewhere in your initialization file\napp.use(\n  session({\n    secret: 'my-secret',\n    resave: false,\n    saveUninitialized: false,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Schema-First Interface Resolver\nDESCRIPTION: Implements the __resolveType method for type resolution in schema-first approach.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver('Character')\nexport class CharactersResolver {\n  @ResolveField()\n  __resolveType(value) {\n    if ('age' in value) {\n      return Person;\n    }\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Menu Interaction in TypeScript with Necord\nDESCRIPTION: This snippet demonstrates how to handle a select menu interaction using Necord in a NestJS application. It defines a method that responds to a select menu interaction by replying with the selected values.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Context, StringSelect, StringSelectContext, SelectedStrings } from 'necord';\n\n@Injectable()\nexport class AppComponents {\n  @StringSelect('SELECT_MENU')\n  public onSelectMenu(\n    @Context() [interaction]: StringSelectContext,\n    @SelectedStrings() values: string[],\n  ) {\n    return interaction.reply({ content: `You selected: ${values.join(', ')}` });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Serverless\nDESCRIPTION: TSConfig settings required for serverless integration\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    ...\n    \"esModuleInterop\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ValidationPipe with Route Parameters\nDESCRIPTION: This code snippet demonstrates how to use the `ValidationPipe` to validate route parameters. It defines a GET endpoint that accepts an `:id` parameter and uses the `FindOneParams` class to validate that the `id` is a number.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':id')\nfindOne(@Param() params: FindOneParams) {\n  return 'This action returns a user';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for NestJS Application\nDESCRIPTION: This Dockerfile sets up a Node.js environment, installs dependencies, builds the NestJS application, and prepares it for running. It uses the official Node.js image as a base and exposes port 3000 for the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Use the official Node.js image as the base image\nFROM node:20\n\n# Set the working directory inside the container\nWORKDIR /usr/src/app\n\n# Copy package.json and package-lock.json to the working directory\nCOPY package*.json ./\n\n# Install the application dependencies\nRUN npm install\n\n# Copy the rest of the application files\nCOPY . .\n\n# Build the NestJS application\nRUN npm run build\n\n# Expose the application port\nEXPOSE 3000\n\n# Command to run the application\nCMD [\"node\", \"dist/main\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Class Providers with useClass in NestJS\nDESCRIPTION: This snippet demonstrates how to use the useClass syntax to dynamically determine a class that a token should resolve to based on the current environment.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst configServiceProvider = {\n  provide: ConfigService,\n  useClass:\n    process.env.NODE_ENV === 'development'\n      ? DevelopmentConfigService\n      : ProductionConfigService,\n};\n\n@Module({\n  providers: [configServiceProvider],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Durable Provider in NestJS\nDESCRIPTION: This code snippet demonstrates how to register a custom durable provider using the long-hand form for provider registration in NestJS. It sets the scope to REQUEST and marks the provider as durable.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  provide: 'foobar',\n  useFactory: () => { ... },\n  scope: Scope.REQUEST,\n  durable: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Type Definitions Generation\nDESCRIPTION: Configuration for generating TypeScript definitions from GraphQL schema with custom scalar mappings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLDefinitionsFactory } from '@nestjs/graphql';\nimport { join } from 'path';\n\nconst definitionsFactory = new GraphQLDefinitionsFactory();\n\ndefinitionsFactory.generate({\n  typePaths: ['./src/**/*.graphql'],\n  path: join(process.cwd(), 'src/graphql.ts'),\n  outputAs: 'class',\n  defaultScalarType: 'unknown',\n  customScalarTypeMapping: {\n    DateTime: 'Date',\n    BigNumber: '_BigNumber',\n  },\n  additionalHeader: \"import _BigNumber from 'bignumber.js'\",\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Controller to a Tag with @ApiTags in NestJS\nDESCRIPTION: This snippet demonstrates how to associate a NestJS controller with a specific tag in Swagger documentation using the @ApiTags decorator. It is useful for grouping related endpoints visually in the API documentation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n@ApiTags('cats')\n@Controller('cats')\nexport class CatsController {}\n```\n\n----------------------------------------\n\nTITLE: Accessing RabbitMQ Server Driver Instance in NestJS\nDESCRIPTION: Demonstrates how to access the underlying AMQP connection manager instance from the server.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst managerRef =\n  server.unwrap<import('amqp-connection-manager').AmqpConnectionManager>();\n```\n\n----------------------------------------\n\nTITLE: Linting and Formatting NestJS Projects\nDESCRIPTION: Commands for linting with ESLint and formatting with Prettier in a NestJS project. These commands are useful for maintaining code quality in headless environments.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/first-steps.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Lint and autofix with eslint\n$ npm run lint\n\n# Format with prettier\n$ npm run format\n```\n\n----------------------------------------\n\nTITLE: Applying the @Roles() Decorator (JavaScript)\nDESCRIPTION: This code demonstrates how to use the `@Roles()` decorator to protect a route handler.  The `@Post()` decorator indicates it's a POST request handler, and `@Roles(Role.Admin)` specifies that only users with the `Admin` role can access this endpoint. The `Bind(Body())` decorator makes request body available to the `createCatDto` argument.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@Roles(Role.Admin)\n@Bind(Body())\ncreate(createCatDto) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NestJS Swagger Transformer for ts-jest\nDESCRIPTION: Configuration file to enable the NestJS Swagger plugin with ts-jest. This transformer applies AST transformations for e2e tests.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst transformer = require('@nestjs/swagger/plugin');\n\nmodule.exports.name = 'nestjs-swagger-transformer';\n// you should change the version number anytime you change the configuration below - otherwise, jest will not detect changes\nmodule.exports.version = 1;\n\nmodule.exports.factory = (cs) => {\n  return transformer.before(\n    {\n      // @nestjs/swagger/plugin options (can be empty)\n    },\n    cs.program, // \"cs.tsCompiler.program\" for older versions of Jest (<= v27)\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Testing JWT Authentication Endpoint\nDESCRIPTION: cURL command example for testing the JWT authentication endpoint.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ # POST to /auth/login\n$ curl -X POST http://localhost:3000/auth/login -d '{\"username\": \"john\", \"password\": \"changeme\"}' -H \"Content-Type: application/json\"\n$ # result -> {\"access_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"}\n$ # Note: above JWT truncated\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Options for GraphQLModule in NestJS\nDESCRIPTION: This snippet demonstrates how to use forRootAsync to pass module options asynchronously, using a factory function that can inject dependencies.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRootAsync<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => ({\n    typePaths: configService.get<string>('GRAPHQL_TYPE_PATHS'),\n  }),\n  inject: [ConfigService],\n}),\n```\n\n----------------------------------------\n\nTITLE: Implementing Sentry Exception Handling\nDESCRIPTION: Custom exception filter implementation with Sentry integration for error capturing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Catch, ExceptionFilter } from '@nestjs/common';\nimport { SentryExceptionCaptured } from '@sentry/nestjs';\n\n@Catch()\nexport class YourCatchAllExceptionFilter implements ExceptionFilter {\n  @SentryExceptionCaptured()\n  catch(exception, host): void {\n    // your implementation here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fastify Session in NestJS Route Handler with Request Object\nDESCRIPTION: Example of accessing and modifying Fastify session data within a NestJS route handler using the FastifyRequest object.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nfindAll(@Req() request: FastifyRequest) {\n  const visits = request.session.get('visits');\n  request.session.set('visits', visits ? visits + 1 : 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Field Value with Middleware in NestJS GraphQL\nDESCRIPTION: This snippet shows how to modify a field's value from within a middleware function. It demonstrates converting the field value to uppercase before returning it to the client.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/field-middleware.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = await next();\nreturn value?.toUpperCase();\n```\n\n----------------------------------------\n\nTITLE: Implementing CatsApiService in NestJS\nDESCRIPTION: TypeScript code for a NestJS service that retrieves cat data by ID using HttpClient, demonstrating dependency injection and API interaction.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from '@nestjs/axios';\n\n@Injectable()\nexport class CatsApiService {\n  constructor(private httpClient: HttpClient) {}\n\n  async getCatById(id: number): Promise<Cat> {\n    const response = await this.httpClient.get(`/cats/${id}`);\n    return response.data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Authentication with graphql-ws in NestJS\nDESCRIPTION: Demonstrates how to implement authentication for WebSocket connections using the onConnect callback with the graphql-ws package.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  subscriptions: {\n    'graphql-ws': {\n      onConnect: (context: Context<any>) => {\n        const { connectionParams, extra } = context;\n        // user validation will remain the same as in the example above\n        // when using with graphql-ws, additional context value should be stored in the extra field\n        extra.user = { user: {} };\n      },\n    },\n  },\n  context: ({ extra }) => {\n    // you can now access your additional context value through the extra field\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Unit Testing CatsHttpService with Suites\nDESCRIPTION: TypeScript code demonstrating how to use Suites for unit testing the CatsHttpService, including mocking of dependencies and assertions on service behavior.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TestBed, Mocked } from '@suites/unit';\n\ndescribe('Cats Http Service Unit Test', () => {\n  let catsHttpService: CatsHttpService;\n  let httpClient: Mocked<HttpClient>;\n  let logger: Mocked<Logger>;\n\n  beforeAll(async () => {\n    const { unit, unitRef } = await TestBed.solitary(CatsHttpService).compile();\n\n    catsHttpService = unit;\n    httpClient = unitRef.get(HttpClient);\n    logger = unitRef.get(Logger);\n  });\n\n  it('should fetch cats from the API and log the operation', async () => {\n    const catsFixtures: Cat[] = [{ id: 1, name: 'Catty' }, { id: 2, name: 'Mitzy' }];\n    httpClient.get.mockResolvedValue({ data: catsFixtures });\n\n    const cats = await catsHttpService.fetchCats();\n\n    expect(logger.log).toHaveBeenCalledWith('Fetching cats from the API');\n    expect(httpClient.get).toHaveBeenCalledWith('/cats');\n    expect(cats).toEqual<Cat[]>(catsFixtures);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example of HTTP GET Request with Array Query Parameters (Bash)\nDESCRIPTION: This bash example demonstrates how to structure an HTTP GET request sending multiple comma-separated values as a single query parameter (ids), which can be parsed by the server with ParseArrayPipe. No additional dependencies required; can be run with any HTTP client.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nGET /?ids=1,2,3\n```\n\n----------------------------------------\n\nTITLE: Accessing AsyncLocalStorage Store in NestJS Service\nDESCRIPTION: This snippet illustrates how to access the AsyncLocalStorage store within a NestJS service. It injects the AsyncLocalStorage instance and uses it to retrieve the user ID from the store for further processing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/async-local-storage.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService {\n  constructor(\n    private readonly als: AsyncLocalStorage,\n    private readonly catsRepository: CatsRepository,\n  ) {}\n\n  getCatForUser() {\n    const userId = this.als.getStore()[\"userId\"] as number;\n    return this.catsRepository.getForUser(userId);\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n@Injectable()\n@Dependencies(AsyncLocalStorage, CatsRepository)\nexport class CatsService {\n  constructor(als, catsRepository) {\n    this.als = als\n    this.catsRepository = catsRepository\n  }\n\n  getCatForUser() {\n    const userId = this.als.getStore()[\"userId\"] as number;\n    return this.catsRepository.getForUser(userId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Service with INQUIRER Token in NestJS\nDESCRIPTION: Shows how to use a service that implements the INQUIRER token. When the service method is called, it logs the name of the class that constructed it along with the provided message.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { HelloService } from './hello.service';\n\n@Injectable()\nexport class AppService {\n  constructor(private helloService: HelloService) {}\n\n  getRoot(): string {\n    this.helloService.sayHello('My name is getRoot');\n\n    return 'Hello world!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Config Service\nDESCRIPTION: Example of implementing a configuration service class for HTTP module options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass HttpConfigService implements HttpModuleOptionsFactory {\n  createHttpOptions(): HttpModuleOptions {\n    return {\n      timeout: 5000,\n      maxRedirects: 5,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing NestJS Application with Sentry\nDESCRIPTION: Main application bootstrap code showing how to import Sentry instrumentation before other modules.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Import this first!\nimport \"./instrument\";\n\n// Now import other modules\nimport { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Implementing MQTT Wildcards\nDESCRIPTION: Demonstration of using MQTT wildcards in message patterns for topic subscription\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/mqtt.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('sensors/+/temperature/+')\ngetTemperature(@Ctx() context: MqttContext) {\n  console.log(`Topic: ${context.getTopic()}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Imports with Options in NestJS\nDESCRIPTION: Example of importing a ConfigModule with custom options in a NestJS application module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from './config/config.module';\n\n@Module({\n  imports: [ConfigModule.register({ folder: './config' })],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Logging in NestJS\nDESCRIPTION: Configures the ConsoleLogger to output logs in JSON format, which is useful for log aggregation and analysis in modern cloud environments.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule, {\n  logger: new ConsoleLogger({\n    json: true,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Sequelize Dependencies\nDESCRIPTION: Commands to install required Sequelize packages and TypeScript type definitions for a NestJS project.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save sequelize sequelize-typescript mysql2\n$ npm install --save-dev @types/sequelize\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for versions below 29\nDESCRIPTION: JSON configuration for Jest versions below 29 to enable AST transformers in ts-jest.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  ... // other configuration\n  \"globals\": {\n    \"ts-jest\": {\n      \"astTransformers\": {\n        \"before\": [\"<path to the file created above>\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template with Handlebars\nDESCRIPTION: HTML template using Handlebars syntax to display dynamic message\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>App</title>\n  </head>\n  <body>\n    {{ \"{{ message }\"}} }\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom GraphQL Directive in NestJS Module\nDESCRIPTION: This snippet shows how to register the custom upperDirectiveTransformer in the GraphQLModule.forRoot() method of a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/directives.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot({\n  // ...\n  transformSchema: (schema) => upperDirectiveTransformer(schema, 'upper'),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Union Type in NestJS GraphQL\nDESCRIPTION: Uses the createUnionType function to define a union type consisting of Author and Book types. The union allows returning different object types from the same field.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ResultUnion = createUnionType({\n  name: 'ResultUnion',\n  types: () => [Author, Book] as const,\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Filter Implementation\nDESCRIPTION: Implementation of a custom exception filter that catches HttpExceptions and provides detailed error responses.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse<Response>();\n    const request = ctx.getRequest<Request>();\n    const status = exception.getStatus();\n\n    response\n      .status(status)\n      .json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Webpack Configuration with Options Function\nDESCRIPTION: Function-based webpack configuration that extends default options while including node_modules in the bundle.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (options) {\n  return {\n    ...options,\n    externals: [],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Interface Resolver Implementation\nDESCRIPTION: Creates a resolver for the Character interface to share field resolver implementation across implementing types.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolver, ResolveField, Parent, Info } from '@nestjs/graphql';\n\n@Resolver((type) => Character)\nexport class CharacterInterfaceResolver {\n  @ResolveField(() => [Character])\n  friends(\n    @Parent() character,\n    @Info() { parentType },\n    @Args('search', { type: () => String }) searchTerm: string,\n  ) {\n    return [];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting the Native Mongoose Connection - TypeScript\nDESCRIPTION: Demonstrates how to inject the low-level native Mongoose Connection into a service using the @InjectConnection decorator. Useful for advanced use cases where native MongoDB or Mongoose operations outside the ODM context are required. Requires @nestjs/mongoose.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/mongoose';\nimport { Connection } from 'mongoose';\n\n@Injectable()\nexport class CatsService {\n  constructor(@InjectConnection() private connection: Connection) {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using ContextIdFactory for Consistent Instance Resolution\nDESCRIPTION: Shows how to use ContextIdFactory to generate a context identifier, ensuring that multiple resolve() calls return the same instance. This example creates a context ID and uses it to resolve TransientService twice, resulting in identical instances.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/module-reference.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService implements OnModuleInit {\n  constructor(private moduleRef: ModuleRef) {}\n\n  async onModuleInit() {\n    const contextId = ContextIdFactory.create();\n    const transientServices = await Promise.all([\n      this.moduleRef.resolve(TransientService, contextId),\n      this.moduleRef.resolve(TransientService, contextId),\n    ]);\n    console.log(transientServices[0] === transientServices[1]); // true\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n\n  async onModuleInit() {\n    const contextId = ContextIdFactory.create();\n    const transientServices = await Promise.all([\n      this.moduleRef.resolve(TransientService, contextId),\n      this.moduleRef.resolve(TransientService, contextId),\n    ]);\n    console.log(transientServices[0] === transientServices[1]); // true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Mongoose Schema with NestJS Decorators - TypeScript\nDESCRIPTION: Defines a Cat schema using NestJS decorators for tight TypeScript integration. Depends on @nestjs/mongoose and mongoose. The class properties are mapped to MongoDB document fields, supporting automatic type inference and extensible property configuration. Input: none; Output: exports CatSchema for module use.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\nexport type CatDocument = HydratedDocument<Cat>;\n\n@Schema()\nexport class Cat {\n  @Prop()\n  name: string;\n\n  @Prop()\n  age: number;\n\n  @Prop()\n  breed: string;\n}\n\nexport const CatSchema = SchemaFactory.createForClass(Cat);\n\n```\n\n----------------------------------------\n\nTITLE: Code-First Federation Module Configuration\nDESCRIPTION: NestJS module configuration for GraphQL Federation using code-first approach\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ApolloFederationDriver,\n  ApolloFederationDriverConfig,\n} from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { UsersResolver } from './users.resolver';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloFederationDriverConfig>({\n      driver: ApolloFederationDriver,\n      autoSchemaFile: true,\n    }),\n  ],\n  providers: [UsersResolver, UsersService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Cookie Authentication in NestJS\nDESCRIPTION: Demonstrates cookie-based authentication implementation using @ApiCookieAuth decorator and its configuration with optional session ID.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/security.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiCookieAuth()\n@Controller('cats')\nexport class CatsController {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = new DocumentBuilder().addCookieAuth('optional-session-id');\n```\n\n----------------------------------------\n\nTITLE: Applying Interceptors to GraphQL Mutations in NestJS\nDESCRIPTION: Shows how to use interceptors with GraphQL mutations. The example demonstrates using an EventsInterceptor to handle side effects when upvoting a post.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Mutation()\n@UseInterceptors(EventsInterceptor)\nasync upvotePost(@Args('postId') postId: number) {\n  return this.postsService.upvoteById({ id: postId });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify Adapter in NestJS\nDESCRIPTION: Main application bootstrap code showing how to initialize NestJS with FastifyAdapter. Includes type configuration and basic server setup.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    new FastifyAdapter()\n  );\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Resuming a Queue in NestJS Bull\nDESCRIPTION: Example of resuming a previously paused Bull queue in NestJS using the resume() method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nawait audioQueue.resume();\n```\n\n----------------------------------------\n\nTITLE: Nest CLI command syntax pattern\nDESCRIPTION: Example of the general syntax pattern for Nest CLI commands, showing the format with required and optional arguments.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnest commandOrAlias requiredArg [optionalArg] [options]\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL SDL Schema for Mutation\nDESCRIPTION: The SDL (Schema Definition Language) representation of the upvotePost mutation that gets generated from the code-first implementation. It defines a mutation that accepts an integer postId and returns a Post object.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  upvotePost(postId: Int!): Post\n}\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Start Script via NPM\nDESCRIPTION: Executes the 'start' script defined in the project's package.json file using npm. This usually runs the locally installed NestJS CLI's start command (`nest start`) after ensuring the project is built, using project-specific dependencies for execution.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/scripts.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Logging Levels in NestJS\nDESCRIPTION: This code shows how to enable only specific logging levels in a NestJS application. It sets the logger property to an array of strings representing the desired log levels.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule, {\n  logger: ['error', 'warn'],\n});\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Type in NestJS GraphQL (Code-First)\nDESCRIPTION: Creates a TypeScript enum for use with GraphQL that represents a set of allowed color values.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AllowedColor {\n  RED,\n  GREEN,\n  BLUE,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying AuthGuard to WebSocket Event Handler in NestJS (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript equivalent of applying an AuthGuard to a WebSocket event handler. It uses the @UseGuards decorator and demonstrates the structure of a WebSocket message handler function without TypeScript type annotations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/guards.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n@UseGuards(AuthGuard)\n@SubscribeMessage('events')\nhandleEvent(client, data) {\n  const event = 'events';\n  return { event, data };\n}\n```\n\n----------------------------------------\n\nTITLE: Sociable Testing CatsService with Suites\nDESCRIPTION: TypeScript code demonstrating sociable testing of CatsService using Suites, exposing real CatsDAL interactions while mocking CatsApiService and Prisma client.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TestBed, Mocked } from '@suites/unit';\nimport { PrismaClient } from '@prisma/client';\n\ndescribe('Cats Service Sociable Unit Test', () => {\n  let catsService: CatsService;\n  let prisma: Mocked<PrismaClient>;\n  let catsApiService: Mocked<CatsApiService>;\n\n  beforeAll(async () => {\n    const { unit, unitRef } = await TestBed.sociable(CatsService)\n      .expose(CatsDAL)\n      .mock(CatsApiService)\n      .final({ getCatById: async () => ({ id: 1, name: 'Catty' })})\n      .compile();\n\n    catsService = unit;\n    prisma = unitRef.get(PrismaClient);\n  });\n\n  it('should get cat by id and save it', async () => {\n    const catFixture: Cat = { id: 1, name: 'Catty' };\n    prisma.cat.create.mockResolvedValue(catFixture);\n\n    const savedCat = await catsService.getAndSaveCat(1);\n\n    expect(prisma.cat.create).toHaveBeenCalledWith({ data: catFixture });\n    expect(savedCat).toEqual(catFixture);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Global Field Middleware in NestJS GraphQL\nDESCRIPTION: This snippet demonstrates how to register field middleware globally in the GraphQLModule configuration. When registered globally, the middleware will be automatically applied to all fields of all object types in the schema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/field-middleware.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot({\n  autoSchemaFile: 'schema.gql',\n  buildSchemaOptions: {\n    fieldMiddleware: [loggerMiddleware],\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Installing MQTT Package\nDESCRIPTION: Command to install the MQTT package dependency for NestJS microservices\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/mqtt.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save mqtt\n```\n\n----------------------------------------\n\nTITLE: Federation Gateway Configuration\nDESCRIPTION: Gateway module configuration for GraphQL Federation using Mercurius Gateway driver.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MercuriusGatewayDriver,\n  MercuriusGatewayDriverConfig,\n} from '@nestjs/mercurius';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<MercuriusGatewayDriverConfig>({\n      driver: MercuriusGatewayDriver,\n      gateway: {\n        services: [\n          { name: 'users', url: 'http://user-service/graphql' },\n          { name: 'posts', url: 'http://post-service/graphql' },\n        ],\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: NestJS AWS Lambda Handler Setup\nDESCRIPTION: TypeScript implementation of AWS Lambda handler using NestJS with full HTTP server capabilities\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport serverlessExpress from '@codegenie/serverless-express';\nimport { Callback, Context, Handler } from 'aws-lambda';\nimport { AppModule } from './app.module';\n\nlet server: Handler;\n\nasync function bootstrap(): Promise<Handler> {\n  const app = await NestFactory.create(AppModule);\n  await app.init();\n\n  const expressApp = app.getHttpAdapter().getInstance();\n  return serverlessExpress({ app: expressApp });\n}\n\nexport const handler: Handler = async (\n  event: any,\n  context: Context,\n  callback: Callback,\n) => {\n  server = server ?? (await bootstrap());\n  return server(event, context, callback);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and using custom repositories in MikroORM with NestJS in TypeScript\nDESCRIPTION: Shows how to declare a custom repository for an entity by specifying it in the entity decorator and extending EntityRepository to add custom methods. In services, injection of the custom repository class is done directly without the @InjectRepository() decorator, relying on NestJS DI by class reference.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// `**./author.entity.ts**`\n@Entity({ repository: () => AuthorRepository })\nexport class Author {\n  // to allow inference in `em.getRepository()`\n  [EntityRepositoryType]?: AuthorRepository;\n}\n\n// `**./author.repository.ts**`\nexport class AuthorRepository extends EntityRepository<Author> {\n  // your custom methods...\n}\n\n@Injectable()\nexport class MyService {\n  constructor(private readonly repo: AuthorRepository) {}\n}\n```\n\n----------------------------------------\n\nTITLE: ParseUUIDPipe Implementation in NestJS\nDESCRIPTION: Demonstrates how to use ParseUUIDPipe to validate UUID parameters in both regular and switch syntax.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':uuid')\nasync findOne(@Param('uuid', new ParseUUIDPipe()) uuid: string) {\n  return this.catsService.findOne(uuid);\n}\n```\n\n----------------------------------------\n\nTITLE: Schema-First Enum Definition in GraphQL SDL\nDESCRIPTION: Defines an enum type using GraphQL SDL in the schema-first approach, specifying the allowed color values.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nenum AllowedColor {\n  RED\n  GREEN\n  BLUE\n}\n```\n\n----------------------------------------\n\nTITLE: Handling MQTT Context and Payload\nDESCRIPTION: Example of accessing MQTT context and payload in message handlers using decorators\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/mqtt.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('notifications')\ngetNotifications(@Payload() data: number[], @Ctx() context: MqttContext) {\n  console.log(`Topic: ${context.getTopic()}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify Cookie Plugin for NestJS\nDESCRIPTION: This snippet shows how to install the @fastify/cookie package for use with Fastify in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i @fastify/cookie\n```\n\n----------------------------------------\n\nTITLE: Handling Global Queue Events in NestJS\nDESCRIPTION: Example of implementing a global event listener that handles completed jobs from any process. It demonstrates how to use the @OnGlobalQueueCompleted decorator and retrieve the full job object using the queue's getJob method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n@OnGlobalQueueCompleted()\nasync onGlobalCompleted(jobId: number, result: any) {\n  const job = await this.immediateQueue.getJob(jobId);\n  console.log('(Global) on completed: job ', job.id, ' -> result: ', result);\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for Circular Dependencies in NestJS\nDESCRIPTION: Example of the error message when circular dependencies exist between modules. This occurs when two or more modules depend on each other directly or indirectly, requiring the use of forwardRef() to resolve.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/errors.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNest cannot create the <module> instance.\nThe module at index [<index>] of the <module> \"imports\" array is undefined.\n\nPotential causes:\n- A circular dependency between modules. Use forwardRef() to avoid it. Read more: https://docs.nestjs.com/fundamentals/circular-dependency\n- The module at index [<index>] is of type \"undefined\". Check your import statements and the type of the module.\n\nScope [<module_import_chain>]\n# example chain AppModule -> FooModule\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Definitions for Union Types\nDESCRIPTION: Shows the TypeScript class and type definitions that would be generated from the schema-first approach for union types.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Author {\n  name: string;\n}\n\nexport class Book {\n  title: string;\n}\n\nexport type ResultUnion = Author | Book;\n```\n\n----------------------------------------\n\nTITLE: Enabling File Uploads with @ApiBody, @ApiConsumes, and File Interceptors in NestJS\nDESCRIPTION: This snippet shows how to set up file upload endpoints using @UseInterceptors with FileInterceptor, declare content type with @ApiConsumes, and document the expected request payload with @ApiBody. It supports single file uploads with 'multipart/form-data' encoding.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n@UseInterceptors(FileInterceptor('file'))\n@ApiConsumes('multipart/form-data')\n@ApiBody({\n  description: 'List of cats',\n  type: FileUploadDto,\n})\nuploadFile(@UploadedFile() file: Express.Multer.File) {}\n\n// FileUploadDto definition\nclass FileUploadDto {\n  @ApiProperty({ type: 'string', format: 'binary' })\n  file: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Application with SWC in Watch Mode\nDESCRIPTION: Command to start a NestJS application using SWC builder in watch mode for development.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ nest start -b swc -w\n# OR nest start --builder swc --watch\n```\n\n----------------------------------------\n\nTITLE: Defining Types for IntersectionType in GraphQL\nDESCRIPTION: Definition of two separate types that will be combined using IntersectionType utility.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@InputType()\nclass CreateUserInput {\n  @Field()\n  email: string;\n\n  @Field()\n  password: string;\n}\n\n@ObjectType()\nexport class AdditionalUserInfo {\n  @Field()\n  firstName: string;\n\n  @Field()\n  lastName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Deprecated Directive to GraphQL Query in NestJS\nDESCRIPTION: This snippet shows how to apply the @deprecated directive to a GraphQL query handler in a NestJS application using the code-first approach.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/directives.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Directive('@deprecated(reason: \"This query will be removed in the next version\")')\n@Query(() => Author, { name: 'author' })\nasync getAuthor(@Args({ name: 'id', type: () => Int }) id: number) {\n  return this.authorsService.findOneById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Request Object in NestJS Service\nDESCRIPTION: Demonstrates how to inject the request object into a service using the @Inject() decorator. This is useful for obtaining the current context identifier within a request context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/module-reference.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService {\n  constructor(\n    @Inject(REQUEST) private request: Record<string, unknown>,\n  ) {}\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\n@Dependencies(REQUEST)\nexport class CatsService {\n  constructor(request) {\n    this.request = request;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Jobs with Options in NestJS\nDESCRIPTION: Example of creating a cron job with additional configuration options like timezone and name.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\n\n@Injectable()\nexport class NotificationService {\n  @Cron('* * 0 * * *', {\n    name: 'notifications',\n    timeZone: 'Europe/Paris',\n  })\n  triggerNotifications() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Property-based Injection in NestJS\nDESCRIPTION: Shows how to use property-based injection with the @Inject() decorator. This method can be useful in certain scenarios, especially when dealing with inheritance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/components.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Inject } from '@nestjs/common';\n\n@Injectable()\nexport class HttpService<T> {\n  @Inject('HTTP_OPTIONS')\n  private readonly httpClient: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Response for All Endpoints with DocumentBuilder in NestJS\nDESCRIPTION: This snippet demonstrates configuring a global response for all routes using DocumentBuilder, adding a 500 Internal Server Error response. It is useful for standardizing certain responses across the API.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst config = new DocumentBuilder()\n  .addGlobalResponse({\n    status: 500,\n    description: 'Internal server error',\n  })\n  // other configurations\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Roles Decorator in TypeScript\nDESCRIPTION: Demonstrates how to create a strongly-typed Roles decorator using Reflector#createDecorator. This decorator takes an array of strings as an argument to specify user roles.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Reflector } from '@nestjs/core';\n\nexport const Roles = Reflector.createDecorator<string[]>();\n```\n\n----------------------------------------\n\nTITLE: WebSocket Authentication Configuration\nDESCRIPTION: Implements authentication verification for WebSocket connections using the verifyClient callback.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<MercuriusDriverConfig>({\n  driver: MercuriusDriver,\n  subscription: {\n    verifyClient: (info, next) => {\n      const authorization = info.req.headers?.authorization as string;\n      if (!authorization?.startsWith('Bearer ')) {\n        return next(false);\n      }\n      next(true);\n    },\n  }\n}),\n```\n\n----------------------------------------\n\nTITLE: Creating the CheckPolicies Decorator - NestJS - TypeScript\nDESCRIPTION: Implements a custom decorator, CheckPolicies, which assigns policy handlers to route handlers via metadata for later retrieval in guards. Utilizes SetMetadata from @nestjs/common to attach an array of handlers, supporting flexible authorization checks. This decorator requires handlers typed as PolicyHandler and expects to be used with NestJS methods.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const CHECK_POLICIES_KEY = 'check_policy';\nexport const CheckPolicies = (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers);\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware with Fastify\nDESCRIPTION: Example of creating a middleware class that works with Fastify's raw request and response objects.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, NestMiddleware } from '@nestjs/common';\nimport { FastifyRequest, FastifyReply } from 'fastify';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: FastifyRequest['raw'], res: FastifyReply['raw'], next: () => void) {\n    console.log('Request...');\n    next();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Author Class for GraphQL Union Type in NestJS\nDESCRIPTION: Creates an Author class with TypeScript decorators to represent a GraphQL object type. This class will be used as part of a union type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Field, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class Author {\n  @Field()\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Saga Implementation with Request Context\nDESCRIPTION: Implementation of a saga that handles request context in event processing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n@Saga()\ndragonKilled = (events$: Observable<any>): Observable<ICommand> => {\n  return events$.pipe(\n    ofType(HeroKilledDragonEvent),\n    map((event) => {\n      const request = AsyncContext.of(event); // Retrieve the request context\n      const command = new DropAncientItemCommand(event.heroId, fakeItemID);\n\n      AsyncContext.merge(request, command); // Merge the request context into the command\n      return command;\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Configurations for Bull in NestJS\nDESCRIPTION: This snippet demonstrates how to use named configurations for Bull queues in NestJS. It shows how to register multiple configurations and reference them when registering queues.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.forRoot('alternative-config', {\n  redis: {\n    port: 6381,\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.registerQueue({\n  configKey: 'alternative-config',\n  name: 'video',\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Date Scalar Provider\nDESCRIPTION: Module configuration to register the custom Date scalar as a provider.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  providers: [DateScalar],\n})\nexport class CommonModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Logger Field Middleware in NestJS GraphQL\nDESCRIPTION: This snippet shows how to create a simple field middleware function that logs a field value before returning it to the client. The middleware follows the FieldMiddleware interface, receiving context and next function parameters.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/field-middleware.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FieldMiddleware, MiddlewareContext, NextFn } from '@nestjs/graphql';\n\nconst loggerMiddleware: FieldMiddleware = async (\n  ctx: MiddlewareContext,\n  next: NextFn,\n) => {\n  const value = await next();\n  console.log(value);\n  return value;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Specialized Paginated Type in TypeScript\nDESCRIPTION: This snippet shows how to create a specialized paginated type using the generic Paginated function. It extends the Paginated type with a specific entity (Author in this case).\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@ObjectType()\nclass PaginatedAuthor extends Paginated(Author) {}\n```\n\n----------------------------------------\n\nTITLE: Enabling Method-Level ValidationPipe Transformation in NestJS (TypeScript)\nDESCRIPTION: This snippet demonstrates enabling object payload transformation at the controller method level in a NestJS application via the ValidationPipe. By setting the transform option to true when applying ValidationPipe with @UsePipes, incoming request payloads will be automatically converted to their respective DTO class instances, enabling property validation and type enforcement. Dependencies include the @nestjs/common ValidationPipe, Controllers, Decorators, and the appropriate DTO class definition.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@UsePipes(new ValidationPipe({ transform: true }))\nasync create(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Provider from NestJS Standalone Application\nDESCRIPTION: Shows how to get a provider instance (TasksService) from the standalone application context using the get() method. This allows accessing services from within scripts or CRON jobs.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/application-context.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasksService = app.get(TasksService);\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Provider\nDESCRIPTION: Sets up the database connection provider using TypeORM's DataSource configuration. Includes MySQL connection details and entity scanning configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-typeorm.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from 'typeorm';\n\nexport const databaseProviders = [\n  {\n    provide: 'DATA_SOURCE',\n    useFactory: async () => {\n      const dataSource = new DataSource({\n        type: 'mysql',\n        host: 'localhost',\n        port: 3306,\n        username: 'root',\n        password: 'root',\n        database: 'test',\n        entities: [\n            __dirname + '/../**/*.entity{.ts,.js}',\n        ],\n        synchronize: true,\n      });\n\n      return dataSource.initialize();\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Resolving Request-Scoped Providers in Authentication Strategy Validation\nDESCRIPTION: Demonstrates how to use ModuleRef to resolve request-scoped providers within a strategy's validate method. This approach creates a context ID based on the request object for proper dependency resolution.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nasync validate(\n  request: Request,\n  username: string,\n  password: string,\n) {\n  const contextId = ContextIdFactory.getByRequest(request);\n  // \"AuthService\" is a request-scoped provider\n  const authService = await this.moduleRef.resolve(AuthService, contextId);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Intervals in NestJS\nDESCRIPTION: Shows how to list all intervals using the SchedulerRegistry's getIntervals method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ngetIntervals() {\n  const intervals = this.schedulerRegistry.getIntervals();\n  intervals.forEach(key => this.logger.log(`Interval: ${key}`));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Swagger Specifications\nDESCRIPTION: Demonstrates how to create multiple Swagger specifications for different modules in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/other-features.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\nimport { AppModule } from './app.module';\nimport { CatsModule } from './cats/cats.module';\nimport { DogsModule } from './dogs/dogs.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  /**\n   * createDocument(application, configurationOptions, extraOptions);\n   *\n   * createDocument method takes an optional 3rd argument \"extraOptions\"\n   * which is an object with \"include\" property where you can pass an Array\n   * of Modules that you want to include in that Swagger Specification\n   * E.g: CatsModule and DogsModule will have two separate Swagger Specifications which\n   * will be exposed on two different SwaggerUI with two different endpoints.\n   */\n\n  const options = new DocumentBuilder()\n    .setTitle('Cats example')\n    .setDescription('The cats API description')\n    .setVersion('1.0')\n    .addTag('cats')\n    .build();\n\n  const catDocumentFactory = () =>\n    SwaggerModule.createDocument(app, options, {\n      include: [CatsModule],\n    });\n  SwaggerModule.setup('api/cats', app, catDocumentFactory);\n\n  const secondOptions = new DocumentBuilder()\n    .setTitle('Dogs example')\n    .setDescription('The dogs API description')\n    .setVersion('1.0')\n    .addTag('dogs')\n    .build();\n\n  const dogDocumentFactory = () =>\n    SwaggerModule.createDocument(app, secondOptions, {\n      include: [DogsModule],\n    });\n  SwaggerModule.setup('api/dogs', app, dogDocumentFactory);\n\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Custom UUID Scalar Implementation\nDESCRIPTION: Implementation of a custom UUID scalar type with validation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n\nfunction validate(uuid: unknown): string | never {\n  if (typeof uuid !== 'string' || !regex.test(uuid)) {\n    throw new Error('invalid uuid');\n  }\n  return uuid;\n}\n\nexport const CustomUuidScalar = new GraphQLScalarType({\n  name: 'UUID',\n  description: 'A simple UUID parser',\n  serialize: (value) => validate(value),\n  parseValue: (value) => validate(value),\n  parseLiteral: (ast) => validate(ast.value),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Query in NestJS CQRS\nDESCRIPTION: Example of creating a Query class for retrieving a hero by ID. The Query class extends the Query<Hero> type to specify the return type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class GetHeroQuery extends Query<Hero> {\n  constructor(public readonly heroId: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Security in NestJS TCP Server\nDESCRIPTION: Shows how to implement TLS security for TCP microservices by configuring server-side TLS options with private key and certificate.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from 'fs';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { MicroserviceOptions, Transport } from '@nestjs/microservices';\n\nasync function bootstrap() {\n  const key = fs.readFileSync('<pathToKeyFile>', 'utf8').toString();\n  const cert = fs.readFileSync('<pathToCertFile>', 'utf8').toString();\n\n  const app = await NestFactory.createMicroservice<MicroserviceOptions>(\n    AppModule,\n    {\n      transport: Transport.TCP,\n      options: {\n        tlsOptions: {\n          key,\n          cert,\n        },\n      },\n    },\n  );\n\n  await app.listen();\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Using External Apollo Plugins in NestJS\nDESCRIPTION: Demonstrates how to import and configure external Apollo Server plugins in the GraphQLModule configuration. This example shows using the ApolloServerOperationRegistry plugin from an external package.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot({\n  // ...\n  plugins: [ApolloServerOperationRegistry({ /* options */})]\n}),\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Terminus Logger in TypeScript\nDESCRIPTION: Demonstrates how to create a custom TerminusLogger by extending the ConsoleLogger class. This logger can be used to customize error logging behavior for Terminus health checks.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Scope, ConsoleLogger } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class TerminusLogger extends ConsoleLogger {\n  error(message: any, stack?: string, context?: string): void;\n  error(message: any, ...optionalParams: any[]): void;\n  error(\n    message: unknown,\n    stack?: unknown,\n    context?: unknown,\n    ...rest: unknown[]\n  ): void {\n    // Overwrite here how error messages should be logged\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Joi Package for NestJS Config Validation\nDESCRIPTION: Command to install the Joi package which is used for schema validation in NestJS config module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save joi\n```\n\n----------------------------------------\n\nTITLE: Registering Enum Resolver in GraphQL Module\nDESCRIPTION: Configures the GraphQL module to use the custom enum resolver by providing it in the resolvers configuration object.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot({\n  resolvers: {\n    AllowedColor: allowedColorResolver,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Type Utilities in GraphQL\nDESCRIPTION: Example of composing multiple type mapping utilities to create a complex derived type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@InputType()\nexport class UpdateUserInput extends PartialType(\n  OmitType(CreateUserInput, ['email'] as const),\n) {}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Client Proxy for Message Sending\nDESCRIPTION: This snippet shows how to create an instance of the custom client proxy and use it to send a message, demonstrating the basic usage of the implemented client.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst googlePubSubClient = new GoogleCloudPubSubClient();\ngooglePubSubClient\n  .send('pattern', 'Hello world!')\n  .subscribe((response) => console.log(response));\n```\n\n----------------------------------------\n\nTITLE: Configuring DevtoolsModule in AppModule\nDESCRIPTION: Integration of DevtoolsModule into the application's root module with conditional activation based on environment.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    DevtoolsModule.register({\n      http: process.env.NODE_ENV !== 'production',\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Handler Arguments Using getArgs()\nDESCRIPTION: Demonstrates how to access the array of arguments passed to a handler using the getArgs() method of ArgumentsHost.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [req, res, next] = host.getArgs();\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Store in Cache Module (New Version)\nDESCRIPTION: Demonstrates the new way of configuring a Redis store for the CacheModule in NestJS v11 using the Keyv adapter.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// New version - supported\nCacheModule.registerAsync({\n  useFactory: async () => {\n    return {\n      stores: [\n        new KeyvRedis('redis://localhost:6379'),\n      ],\n    };\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Customizing SWC Builder Options in nest-cli.json\nDESCRIPTION: JSON configuration to customize SWC builder options, including specifying a custom .swcrc file path.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"builder\": {\n      \"type\": \"swc\",\n      \"options\": {\n        \"swcrcPath\": \"infrastructure/.swcrc\",\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event-based Handler in NestJS Microservices\nDESCRIPTION: Demonstrates how to create an event handler using the @EventPattern decorator in a NestJS microservice for event-based messaging.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@EventPattern('user_created')\nasync handleUserCreated(data: Record<string, unknown>) {\n  // business logic\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Cron Jobs in NestJS\nDESCRIPTION: Shows how to list all cron jobs and their next execution dates using the SchedulerRegistry's getCronJobs method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ngetCrons() {\n  const jobs = this.schedulerRegistry.getCronJobs();\n  jobs.forEach((value, key, map) => {\n    let next;\n    try {\n      next = value.nextDate().toJSDate();\n    } catch (e) {\n      next = 'error: next fire date is in the past!';\n    }\n    this.logger.log(`job: ${key} -> next: ${next}`);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Interface using Code-First Approach\nDESCRIPTION: Creates a basic Character interface using TypeScript abstract class with @InterfaceType decorator from @nestjs/graphql.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Field, ID, InterfaceType } from '@nestjs/graphql';\n\n@InterfaceType()\nexport abstract class Character {\n  @Field(() => ID)\n  id: string;\n\n  @Field()\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Code-First Users Resolver Implementation\nDESCRIPTION: TypeScript implementation of Users resolver using code-first approach\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Query, Resolver, ResolveReference } from '@nestjs/graphql';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n@Resolver(() => User)\nexport class UsersResolver {\n  constructor(private usersService: UsersService) {}\n\n  @Query(() => User)\n  getUser(@Args('id') id: number): User {\n    return this.usersService.findById(id);\n  }\n\n  @ResolveReference()\n  resolveReference(reference: { __typename: string; id: number }): User {\n    return this.usersService.findById(reference.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom ThrottlerGuard to Extract Client IP behind Proxy - TypeScript\nDESCRIPTION: Extends the ThrottlerGuard to override the getTracker method, extracting the client IP address from the 'req.ips' array provided by Express when trust proxy is enabled. If multiple IPs are present, it uses the first; otherwise, the fallback is req.ip. This customization allows correct IP tracking behind proxies to enforce rate limits fairly.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ThrottlerGuard } from '@nestjs/throttler';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ThrottlerBehindProxyGuard extends ThrottlerGuard {\n  protected async getTracker(req: Record<string, any>): Promise<string> {\n    return req.ips.length ? req.ips[0] : req.ip; // individualize IP extraction to meet your own needs\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling automatic entity loading in MikroOrmModule configuration using TypeScript\nDESCRIPTION: Illustrates how to configure MikroOrmModule with the autoLoadEntities property set to true. This setting causes entities registered by forFeature() calls to be automatically added to the MikroORM configuration entity array, reducing the need to specify entity paths explicitly. However, it does not affect the CLI or non-registered related entities.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    MikroOrmModule.forRoot({\n      ...\n      autoLoadEntities: true,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Injecting SchedulerRegistry in NestJS\nDESCRIPTION: Demonstrates how to inject the SchedulerRegistry into a NestJS class constructor for managing scheduled tasks.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private schedulerRegistry: SchedulerRegistry) {}\n```\n\n----------------------------------------\n\nTITLE: Timestamp Logger Implementation\nDESCRIPTION: Shows how to enable timestamp logging for service-level logging with time difference calculations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger, Injectable } from '@nestjs/common';\n\n@Injectable()\nclass MyService {\n  private readonly logger = new Logger(MyService.name, { timestamp: true });\n\n  doSomething() {\n    this.logger.log('Doing something with timestamp here ->');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema-First Posts Type Definition\nDESCRIPTION: GraphQL schema definition for Posts service with User type extension\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post @key(fields: \"id\") {\n  id: ID!\n  title: String!\n  body: String!\n  user: User\n}\n\nextend type User @key(fields: \"id\") {\n  id: ID! @external\n  posts: [Post]\n}\n\nextend type Query {\n  getPosts: [Post]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Module\nDESCRIPTION: NestJS module definition that exports database providers for application-wide access.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthModule in TypeScript\nDESCRIPTION: Configuration of AuthModule to import UsersModule and provide AuthService, setting up the authentication module structure.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n```\n\n----------------------------------------\n\nTITLE: Custom Interface Type Resolution\nDESCRIPTION: Demonstrates how to provide a custom resolveType function for interface type resolution based on object properties.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@InterfaceType({\n  resolveType(book) {\n    if (book.colors) {\n      return ColoringBook;\n    }\n    return TextBook;\n  },\n})\nexport abstract class Book {\n  @Field(() => ID)\n  id: string;\n\n  @Field()\n  title: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Custom Logger Instance in NestJS Bootstrap\nDESCRIPTION: Shows how to directly provide a custom logger instance during NestJS application bootstrap, useful when adding custom logic to logger methods.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule, {\n  bufferLogs: true,\n});\napp.useLogger(new MyLogger());\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Creating and running a new Nest project\nDESCRIPTION: Series of commands to create a new Nest project, navigate to the project directory, and start the application in development mode.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ nest new my-nest-project\n$ cd my-nest-project\n$ npm run start:dev\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Database Module in TypeScript\nDESCRIPTION: Demonstrates how to create a dynamic database module that can be configured at runtime with entities and options. The module exports a Connection provider by default and allows for dynamic provider creation through the forRoot() method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module, DynamicModule } from '@nestjs/common';\nimport { createDatabaseProviders } from './database.providers';\nimport { Connection } from './connection.provider';\n\n@Module({\n  providers: [Connection],\n  exports: [Connection],\n})\nexport class DatabaseModule {\n  static forRoot(entities = [], options?): DynamicModule {\n    const providers = createDatabaseProviders(options, entities);\n    return {\n      module: DatabaseModule,\n      providers: providers,\n      exports: providers,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building NestJS Application\nDESCRIPTION: Command for compiling a NestJS application or workspace, including path mapping and DTO annotations for OpenAPI and GraphQL if enabled.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/usages.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nest build <name> [options]\n```\n\n----------------------------------------\n\nTITLE: Defining Book Class for GraphQL Union Type in NestJS\nDESCRIPTION: Creates a Book class with TypeScript decorators to represent a GraphQL object type. This class will be used as part of a union type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Field, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class Book {\n  @Field()\n  title: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Internal Events in NestJS Microservices\nDESCRIPTION: Demonstrates how to listen to internal events emitted by microservices and servers using the on() method. Shows error event handling for both client and server instances.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nthis.client.on('error', (err) => {\n  console.error(err);\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nserver.on<TcpEvents>('error', (err) => {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Enum Definition in Swagger\nDESCRIPTION: Various approaches to define and use enums in Swagger documentation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({ enum: ['Admin', 'Moderator', 'User']})\nrole: UserRole;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum UserRole {\n  Admin = 'Admin',\n  Moderator = 'Moderator',\n  User = 'User',\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiQuery({ name: 'role', enum: UserRole })\nasync filterByRole(@Query('role') role: UserRole = UserRole.User) {}\n```\n\n----------------------------------------\n\nTITLE: Disabling Logging in NestJS Application Bootstrapping\nDESCRIPTION: This snippet demonstrates how to disable logging entirely when creating a NestJS application instance. It sets the logger property to false in the options object passed to NestFactory.create().\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule, {\n  logger: false,\n});\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Guard Execution Order in NestJS\nDESCRIPTION: This snippet demonstrates how guards are executed in order of binding at different levels (global, controller, route). It shows that Guard1 will execute before Guard2, and both will execute before Guard3.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/request-lifecycle.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@UseGuards(Guard1, Guard2)\n@Controller('cats')\nexport class CatsController {\n  constructor(private catsService: CatsService) {}\n\n  @UseGuards(Guard3)\n  @Get()\n  getCats(): Cats[] {\n    return this.catsService.getCats();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Transport Strategy in NestJS Microservice\nDESCRIPTION: Example of creating a NestJS microservice using a custom transport strategy instead of a built-in transporter. This demonstrates how to initialize the microservice with the custom strategy.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(\n  AppModule,\n  {\n    strategy: new GoogleCloudPubSubServer(),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Module Configuration with Mercurius Federation\nDESCRIPTION: Module configuration for GraphQL using Mercurius Federation driver in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MercuriusFederationDriver,\n  MercuriusFederationDriverConfig,\n} from '@nestjs/mercurius';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { PostsResolver } from './posts.resolver';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<MercuriusFederationDriverConfig>({\n      driver: MercuriusFederationDriver,\n      federationMetadata: true,\n      typePaths: ['**/*.graphql'],\n    }),\n  ],\n  providers: [PostsResolvers],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Module Loading in NestJS with Environment Variables\nDESCRIPTION: Demonstrates how to conditionally load modules based on environment variables using the ConditionalModule from @nestjs/config.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ConditionalModule.registerWhen(FooModule, 'USE_FOO'),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: SDL Generated for Enum with Descriptions and Deprecation\nDESCRIPTION: Shows the GraphQL SDL that gets generated for an enum type with descriptions and deprecation reasons added.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe supported colors.\n\"\"\"\nenum AllowedColor {\n  \"\"\"\n  The default color.\n  \"\"\"\n  RED\n  GREEN\n  BLUE @deprecated(reason: \"Too blue.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Local Master with NestJS Upstream\nDESCRIPTION: Command to update your local master branch with the latest changes from the upstream NestJS repository using fast-forward merge.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit pull --ff upstream master\n```\n\n----------------------------------------\n\nTITLE: Configuring MikroOrmModule with explicit SQLite Driver in TypeScript\nDESCRIPTION: Demonstrates importing the SQLite driver and using MikroOrmModule.forRoot() with explicit configuration options including entity paths and database filename within the root AppModule. This allows MikroORM to connect to the SQLite database and manage entities. The configuration object is similar to the native MikroORM init() method options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SqliteDriver } from '@mikro-orm/sqlite';\n\n@Module({\n  imports: [\n    MikroOrmModule.forRoot({\n      entities: ['./dist/entities'],\n      entitiesTs: ['./src/entities'],\n      dbName: 'my-db-name.sqlite3',\n      driver: SqliteDriver,\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Controlling a Cron Job in NestJS\nDESCRIPTION: Demonstrates how to access a named cron job, stop it, and get its last execution date using the SchedulerRegistry.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = this.schedulerRegistry.getCronJob('notifications');\n\njob.stop();\nconsole.log(job.lastDate());\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Logger in a NestJS Service\nDESCRIPTION: Demonstrates how to inject and use a custom logger in a NestJS service, showing context setting and calling both standard and custom logging methods.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { MyLogger } from './my-logger.service';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  constructor(private myLogger: MyLogger) {\n    // Due to transient scope, CatsService has its own unique instance of MyLogger,\n    // so setting context here will not affect other instances in other services\n    this.myLogger.setContext('CatsService');\n  }\n\n  findAll(): Cat[] {\n    // You can call all the default methods\n    this.myLogger.warn('About to return cats!');\n    // And your custom methods\n    this.myLogger.customLog();\n    return this.cats;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS CLI as Dev Dependency\nDESCRIPTION: Installs the NestJS command-line interface as a development dependency (`-D`) within the current project using npm. Adding `@nestjs/cli` to the project's `devDependencies` in `package.json` ensures that the specific version of the CLI used for 'build' and 'start' commands is managed per project, promoting consistency among team members.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/scripts.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm install -D @nestjs/cli\n```\n\n----------------------------------------\n\nTITLE: Creating a LoggerModule in NestJS\nDESCRIPTION: Demonstrates how to create a dedicated LoggerModule that provides and exports a custom logger service for use throughout the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { MyLogger } from './my-logger.service';\n\n@Module({\n  providers: [MyLogger],\n  exports: [MyLogger],\n})\nexport class LoggerModule {}\n```\n\n----------------------------------------\n\nTITLE: Customizing Passport Module Options in NestJS\nDESCRIPTION: Shows how to pass custom configuration options to the PassportModule during registration. This example enables session support for authentication strategies.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nPassportModule.register({ session: true });\n```\n\n----------------------------------------\n\nTITLE: Implementing a slash command with Necord\nDESCRIPTION: Demonstrates how to create a slash command 'ping' using the @SlashCommand decorator in Necord.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Context, SlashCommand, SlashCommandContext } from 'necord';\n\n@Injectable()\nexport class AppCommands {\n  @SlashCommand({\n    name: 'ping',\n    description: 'Responds with pong!',\n  })\n  public async onPing(@Context() [interaction]: SlashCommandContext) {\n    return interaction.reply({ content: 'Pong!' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a gRPC Service Handler with Implicit Method Naming\nDESCRIPTION: Example showing how to implement a gRPC service handler with just the service name in the decorator, allowing NestJS to automatically associate the handler with the corresponding RPC method based on the method name.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller()\nexport class HeroesController {\n  @GrpcMethod('HeroesService')\n  findOne(data: HeroById, metadata: Metadata, call: ServerUnaryCall<any, any>): Hero {\n    const items = [\n      { id: 1, name: 'John' },\n      { id: 2, name: 'Doe' },\n    ];\n    return items.find(({ id }) => id === data.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format in NestJS\nDESCRIPTION: Shows the default error response format when authorization fails and access is forbidden.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"statusCode\": 403,\n  \"message\": \"Forbidden resource\",\n  \"error\": \"Forbidden\"\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Schema Definitions\nDESCRIPTION: Examples of defining complex types using raw schema definitions.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({\n  type: 'array',\n  items: {\n    type: 'array',\n    items: {\n      type: 'number',\n    },\n  },\n})\ncoords: number[][];\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      example: 'Error'\n    },\n    status: {\n      type: 'number',\n      example: 400\n    }\n  },\n  required: ['name', 'status']\n})\nrawDefinition: Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS TypeScript Starter with Git\nDESCRIPTION: Commands to clone the official NestJS TypeScript starter repository, install dependencies, and start the application. This method provides an alternative to using the Nest CLI.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/nestjs/typescript-starter.git project\n$ cd project\n$ npm install\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: UnhandledExceptionInfo Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of unhandled exception information in CQRS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UnhandledExceptionInfo<\n  Cause = IEvent | ICommand,\n  Exception = any,\n> {\n  /**\n   * The exception that was thrown.\n   */\n  exception: Exception;\n  /**\n   * The cause of the exception (event or command reference).\n   */\n  cause: Cause;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cat Interface for Mongoose Document\nDESCRIPTION: Creates an interface for the Cat model that extends Mongoose's Document interface, defining the structure of a cat document.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Document } from 'mongoose';\n\nexport interface Cat extends Document {\n  readonly name: string;\n  readonly age: number;\n  readonly breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Apollo Plugin in NestJS\nDESCRIPTION: Demonstrates how to create a custom logging plugin for Apollo Server in NestJS by implementing the ApolloServerPlugin interface. This plugin logs when a GraphQL request starts and before a response is sent.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServerPlugin, GraphQLRequestListener } from '@apollo/server';\nimport { Plugin } from '@nestjs/apollo';\n\n@Plugin()\nexport class LoggingPlugin implements ApolloServerPlugin {\n  async requestDidStart(): Promise<GraphQLRequestListener<any>> {\n    console.log('Request started');\n    return {\n      async willSendResponse() {\n        console.log('Will send response');\n      },\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Bootstrap Times in Different Node.js Application Types\nDESCRIPTION: Four different approaches to bootstrapping Node.js applications: an Express app, a standard NestJS app with HTTP server, a NestJS standalone application without HTTP server, and a raw Node.js script. These examples are used to benchmark startup times in a serverless context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// #1 Express\nimport * as express from 'express';\n\nasync function bootstrap() {\n  const app = express();\n  app.get('/', (req, res) => res.send('Hello world!'));\n  await new Promise<void>((resolve) => app.listen(3000, resolve));\n}\nbootstrap();\n\n// #2 Nest (with @nestjs/platform-express)\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, { logger: ['error'] });\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n\n// #3 Nest as a Standalone application (no HTTP server)\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { AppService } from './app.service';\n\nasync function bootstrap() {\n  const app = await NestFactory.createApplicationContext(AppModule, {\n    logger: ['error'],\n  });\n  console.log(app.get(AppService).getHello());\n}\nbootstrap();\n\n// #4 Raw Node.js script\nasync function bootstrap() {\n  console.log('Hello world!');\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI with Dropdown Explorer\nDESCRIPTION: Demonstrates how to set up multiple Swagger specifications with a dropdown menu in the explorer bar.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/other-features.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\nimport { AppModule } from './app.module';\nimport { CatsModule } from './cats/cats.module';\nimport { DogsModule } from './dogs/dogs.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  // Main API options\n  const options = new DocumentBuilder()\n    .setTitle('Multiple Specifications Example')\n    .setDescription('Description for multiple specifications')\n    .setVersion('1.0')\n    .build();\n\n  // Create main API document\n  const document = SwaggerModule.createDocument(app, options);\n\n  // Setup main API Swagger UI with dropdown support\n  SwaggerModule.setup('api', app, document, {\n    explorer: true,\n    swaggerOptions: {\n      urls: [\n        {\n          name: '1. API',\n          url: 'api/swagger.json',\n        },\n        {\n          name: '2. Cats API',\n          url: 'api/cats/swagger.json',\n        },\n        {\n          name: '3. Dogs API',\n          url: 'api/dogs/swagger.json',\n        },\n      ],\n    },\n    jsonDocumentUrl: '/api/swagger.json',\n  });\n\n  // Cats API options\n  const catOptions = new DocumentBuilder()\n    .setTitle('Cats Example')\n    .setDescription('Description for the Cats API')\n    .setVersion('1.0')\n    .addTag('cats')\n    .build();\n\n  // Create Cats API document\n  const catDocument = SwaggerModule.createDocument(app, catOptions, {\n    include: [CatsModule],\n  });\n\n  // Setup Cats API Swagger UI\n  SwaggerModule.setup('api/cats', app, catDocument, {\n    jsonDocumentUrl: '/api/cats/swagger.json',\n  });\n\n  // Dogs API options\n  const dogOptions = new DocumentBuilder()\n    .setTitle('Dogs Example')\n    .setDescription('Description for the Dogs API')\n    .setVersion('1.0')\n    .addTag('dogs')\n    .build();\n\n  // Create Dogs API document\n  const dogDocument = SwaggerModule.createDocument(app, dogOptions, {\n    include: [DogsModule],\n  });\n\n  // Setup Dogs API Swagger UI\n  SwaggerModule.setup('api/dogs', app, dogDocument, {\n    jsonDocumentUrl: '/api/dogs/swagger.json',\n  });\n\n  await app.listen(3000);\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Implementing CaslAbilityFactory for User Permissions in TypeScript\nDESCRIPTION: Implements the `CaslAbilityFactory` injectable class with a `createForUser(user: User)` method. This method utilizes `AbilityBuilder` from `@casl/ability` to construct an `AppAbility` instance based on the provided `User` object's properties (e.g., `isAdmin`) and specific conditions (e.g., `authorId`, `isPublished`). It defines permissions using `can` and `cannot` rules for `Article` and `User` subjects, including the use of 'all' and 'manage' keywords. Requires `User`, `Article`, `Action`, and types/classes from `@casl/ability`.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype Subjects = InferSubjects<typeof Article | typeof User> | 'all';\n\nexport type AppAbility = Ability<[Action, Subjects]>;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder<\n      Ability<[Action, Subjects]>\n    >(Ability as AbilityClass<AppAbility>);\n\n    if (user.isAdmin) {\n      can(Action.Manage, 'all'); // read-write access to everything\n    } else {\n      can(Action.Read, 'all'); // read-only access to everything\n    }\n\n    can(Action.Update, Article, { authorId: user.id });\n    cannot(Action.Delete, Article, { isPublished: true });\n\n    return build({\n      // Read https://casl.js.org/v6/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType<Subjects>,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global Module in NestJS\nDESCRIPTION: Shows how to create a global module using the @Global decorator, making its providers available throughout the application without explicit imports.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module, Global } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\n@Global()\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n  exports: [CatsService],\n})\nexport class CatsModule {}\n```\n\n----------------------------------------\n\nTITLE: JWT Constants Configuration\nDESCRIPTION: Configuration file containing JWT secret key constant for token signing and verification.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const jwtConstants = {\n  secret: 'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Fastify Middleware Registration in NestJS 11\nDESCRIPTION: Shows how to update the middleware registration syntax for Fastify in NestJS 11, using a named wildcard instead of the previous (.*) syntax.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n.forRoutes('*splat');\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Dispatch in a Model in NestJS CQRS\nDESCRIPTION: Example of updating a Hero model to dispatch the HeroKilledDragonEvent when the killEnemy method is called.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Hero extends AggregateRoot {\n  constructor(private id: string) {\n    super();\n  }\n\n  killEnemy(enemyId: string) {\n    // Business logic\n    this.apply(new HeroKilledDragonEvent(this.id, enemyId));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Photo Entity\nDESCRIPTION: Creates a Photo entity with TypeORM decorators defining the database schema structure.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-typeorm.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Photo {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ length: 500 })\n  name: string;\n\n  @Column('text')\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column('int')\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom @SetMetadata Decorator in NestJS Controller\nDESCRIPTION: Shows how to use a custom decorator created with @SetMetadata in a NestJS controller. This example applies the 'admin' role to the create method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@Roles('admin')\nasync create(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Schema-First Post Type Definition with Federation\nDESCRIPTION: GraphQL schema definition for Post type with federation directives and User type extension.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post @key(fields: \"id\") {\n  id: ID!\n  title: String!\n  body: String!\n  user: User\n}\n\nextend type User @key(fields: \"id\") {\n  id: ID! @external\n  posts: [Post]\n}\n\nextend type Query {\n  getPosts: [Post]\n}\n```\n\n----------------------------------------\n\nTITLE: Stripping Non-Whitelisted Properties with ValidationPipe\nDESCRIPTION: This code snippet demonstrates how to strip non-whitelisted properties from the request body using the `ValidationPipe`. By setting the `whitelist` option to `true`, any properties in the request body that are not defined in the DTO or validation class will be automatically removed.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napp.useGlobalPipes(\n  new ValidationPipe({\n    whitelist: true,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Subscription Implementation in NestJS\nDESCRIPTION: Demonstrates how to create a basic GraphQL subscription using the @Subscription() decorator with PubSub.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst pubSub = new PubSub();\n\n@Resolver('Author')\nexport class AuthorResolver {\n  // ...\n  @Subscription()\n  commentAdded(@Context('pubsub') pubSub: PubSub) {\n    return pubSub.subscribe('commentAdded');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating Subscription Payloads in NestJS GraphQL\nDESCRIPTION: Shows how to mutate the published event payload using the resolve property. This example demonstrates a simple resolve function that returns the value directly.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Subscription(() => Comment, {\n  resolve: value => value,\n})\ncommentAdded() {\n  return pubSub.asyncIterableIterator('commentAdded');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Module\nDESCRIPTION: Complete module configuration combining controllers, services, and providers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\nimport { catsProviders } from './cats.providers';\nimport { DatabaseModule } from '../database/database.module';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [CatsController],\n  providers: [\n    CatsService,\n    ...catsProviders,\n  ],\n})\nexport class CatsModule {}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Interval in NestJS\nDESCRIPTION: Demonstrates how to delete a named interval using the SchedulerRegistry's deleteInterval method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteInterval(name: string) {\n  this.schedulerRegistry.deleteInterval(name);\n  this.logger.warn(`Interval ${name} deleted!`);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample SWC Configuration File (.swcrc)\nDESCRIPTION: Example .swcrc file with common configuration options for NestJS projects using SWC.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://swc.rs/schema.json\",\n  \"sourceMaps\": true,\n  \"jsc\": {\n    \"parser\": {\n      \"syntax\": \"typescript\",\n      \"decorators\": true,\n      \"dynamicImport\": true\n    },\n    \"baseUrl\": \"./\"\n  },\n  \"minify\": false\n}\n```\n\n----------------------------------------\n\nTITLE: CreateCatDto Class Definition in NestJS\nDESCRIPTION: Defines a DTO (Data Transfer Object) class for creating cat entities with type definitions.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CreateCatDto {\n  name: string;\n  age: number;\n  breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NecordModule in NestJS AppModule\nDESCRIPTION: Sets up the NecordModule with token, intents, and development guild ID in the main AppModule.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { NecordModule } from 'necord';\nimport { IntentsBitField } from 'discord.js';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [\n    NecordModule.forRoot({\n      token: process.env.DISCORD_TOKEN,\n      intents: [IntentsBitField.Flags.Guilds],\n      development: [process.env.DISCORD_DEVELOPMENT_GUILD_ID],\n    }),\n  ],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthorsModule with GraphQL Resolver in NestJS\nDESCRIPTION: This snippet demonstrates how to create an AuthorsModule in NestJS, which provides the AuthorsResolver and AuthorsService. It also imports the PostsModule, showing the module organization for a GraphQL-based application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [PostsModule],\n  providers: [AuthorsService, AuthorsResolver],\n})\nexport class AuthorsModule {}\n```\n\n----------------------------------------\n\nTITLE: Adding HMR Script to package.json\nDESCRIPTION: Script to be added to the package.json file for easily running the NestJS application with Hot Module Replacement enabled.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"start:dev\": \"nest build --webpack --webpackPath webpack-hmr.config.js --watch\"\n```\n\n----------------------------------------\n\nTITLE: Installing Terminus Package\nDESCRIPTION: Command to install the @nestjs/terminus package for health check functionality\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/terminus\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for ClsService Store\nDESCRIPTION: This code defines a TypeScript interface that extends the ClsStore interface from nestjs-cls. It provides strong typing for the store values managed by ClsService, enabling auto-suggestions and type checking.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/async-local-storage.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MyClsStore extends ClsStore {\n  userId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Original Message Access\nDESCRIPTION: Shows how to access the original Kafka message properties including headers, timestamp, and partition information.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('hero.kill.dragon')\nkillDragon(@Payload() message: KillDragonMessage, @Ctx() context: KafkaContext) {\n  const originalMessage = context.getMessage();\n  const partition = context.getPartition();\n  const { headers, timestamp } = originalMessage;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Pattern Handler with Context in NestJS\nDESCRIPTION: Demonstrates how to handle messages with additional context information using MessagePattern decorator and context extraction in both regular and switch syntax.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('time.us.*')\ngetDate(@Payload() data: number[], @Ctx() context: NatsContext) {\n  console.log(`Subject: ${context.getSubject()}`); // e.g. \"time.us.east\"\n  return new Date().toLocaleTimeString(...);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Multer Type Definitions in NestJS\nDESCRIPTION: Command to install Multer type definitions for better type safety when handling file uploads in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i -D @types/multer\n```\n\n----------------------------------------\n\nTITLE: Generated SDL for Post Type in GraphQL\nDESCRIPTION: The GraphQL SDL representation that gets automatically generated by NestJS based on the Post TypeScript class definition with decorators.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post {\n  id: Int!\n  title: String!\n  votes: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Module\nDESCRIPTION: Defines a DatabaseModule that exports database providers for application-wide access.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-typeorm.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom GraphQL Directive in Schema-First Approach\nDESCRIPTION: This GraphQL SDL snippet shows how to define and apply a custom @upper directive in the schema-first approach.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/directives.md#2025-04-23_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @upper on FIELD_DEFINITION\n\ntype Post {\n  id: Int!\n  title: String! @upper\n  votes: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming in NestJS gRPC\nDESCRIPTION: Example of implementing bidirectional streaming using RxJS Subject in a gRPC service method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@GrpcStreamMethod()\nbidiHello(messages: Observable<any>, metadata: Metadata, call: ServerDuplexStream<any, any>): Observable<any> {\n  const subject = new Subject();\n\n  const onNext = message => {\n    console.log(message);\n    subject.next({\n      reply: 'Hello, world!'\n    });\n  };\n  const onComplete = () => subject.complete();\n  messages.subscribe({\n    next: onNext,\n    complete: onComplete,\n  });\n\n\n  return subject.asObservable();\n}\n```\n\n----------------------------------------\n\nTITLE: Using ClsService in NestJS Service with nestjs-cls\nDESCRIPTION: This snippet shows how to use the ClsService from the nestjs-cls package in a NestJS service. It injects the ClsService and uses it to retrieve the user ID from the store for further processing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/async-local-storage.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService {\n  constructor(\n    private readonly cls: ClsService,\n    private readonly catsRepository: CatsRepository,\n  ) {}\n\n  getCatForUser() {\n    const userId = this.cls.get('userId');\n    return this.catsRepository.getForUser(userId);\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n@Injectable()\n@Dependencies(AsyncLocalStorage, CatsRepository)\nexport class CatsService {\n  constructor(cls, catsRepository) {\n    this.cls = cls\n    this.catsRepository = catsRepository\n  }\n\n  getCatForUser() {\n    const userId = this.cls.get('userId');\n    return this.catsRepository.getForUser(userId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Testing with ClsService in NestJS\nDESCRIPTION: This code snippet demonstrates how to set up an integration test for a CatsService that uses ClsService. It shows how to create a test module, mock dependencies, and use ClsService.runWith() to provide context for tests.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/async-local-storage.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('CatsService', () => {\n  let service: CatsService\n  let cls: ClsService\n  const mockCatsRepository = createMock<CatsRepository>()\n\n  beforeEach(async () => {\n    const module = await Test.createTestingModule({\n      // Set up most of the testing module as we normally would.\n      providers: [\n        CatsService,\n        {\n          provide: CatsRepository\n          useValue: mockCatsRepository\n        }\n      ],\n      imports: [\n        // Import the static version of ClsModule which only provides\n        // the ClsService, but does not set up the store in any way.\n        ClsModule\n      ],\n    }).compile()\n\n    service = module.get(CatsService)\n\n    // Also retrieve the ClsService for later use.\n    cls = module.get(ClsService)\n  })\n\n  describe('getCatForUser', () => {\n    it('retrieves cat based on user id', async () => {\n      const expectedUserId = 42\n      mocksCatsRepository.getForUser.mockImplementationOnce(\n        (id) => ({ userId: id })\n      )\n\n      // Wrap the test call in the `runWith` method\n      // in which we can pass hand-crafted store values.\n      const cat = await cls.runWith(\n        { userId: expectedUserId },\n        () => service.getCatForUser()\n      )\n\n      expect(cat.userId).toEqual(expectedUserId)\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Message Pattern Handler in NestJS\nDESCRIPTION: Demonstrates how to handle messages using wildcard routing patterns in a NestJS microservice.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('cats.#')\ngetCats(@Payload() data: { message: string }, @Ctx() context: RmqContext) {\n  console.log(`Received message with routing key: ${context.getPattern()}`);\n\n  return {\n    message: 'Hello from the cats service!',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Defining a Mongoose Schema Without Decorators - TypeScript\nDESCRIPTION: Shows the creation of a Mongoose schema using the traditional new mongoose.Schema approach in TypeScript, rather than decorators. Suitable for users preferring manual or dynamic schema definition. Requires mongoose to be installed and imported.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const CatSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  breed: String,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using gRPC Client Service in NestJS\nDESCRIPTION: Shows how to inject and initialize a gRPC client service using dependency injection and implement service methods.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class AppService implements OnModuleInit {\n  private heroesService: HeroesService;\n\n  constructor(@Inject('HERO_PACKAGE') private client: ClientGrpc) {}\n\n  onModuleInit() {\n    this.heroesService = this.client.getService<HeroesService>('HeroesService');\n  }\n\n  getHero(): Observable<string> {\n    return this.heroesService.findOne({ id: 1 });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP Health Dependencies\nDESCRIPTION: Command to install required packages for HTTP health checks\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @nestjs/axios axios\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom Providers with @Inject Decorator in NestJS\nDESCRIPTION: This code demonstrates how to inject a custom provider that uses a string-valued token. It uses the @Inject decorator to specify the token when injecting the dependency.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsRepository {\n  constructor(@Inject('CONNECTION') connection: Connection) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified ConfigModule with ConfigurableModuleClass\nDESCRIPTION: Final implementation of ConfigModule using the generated ConfigurableModuleClass.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\nimport { ConfigurableModuleClass } from './config.module-definition';\n\n@Module({\n  providers: [ConfigService],\n  exports: [ConfigService],\n})\nexport class ConfigModule extends ConfigurableModuleClass {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Body in Fastify Controller\nDESCRIPTION: Example of accessing the raw request body in a NestJS controller using the RawBodyRequest interface with Fastify\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/raw-body.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post, RawBodyRequest, Req } from '@nestjs/common';\nimport { FastifyRequest } from 'fastify';\n\n@Controller('cats')\nclass CatsController {\n  @Post()\n  create(@Req() req: RawBodyRequest<FastifyRequest>) {\n    const raw = req.rawBody; // returns a `Buffer`.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Compression Packages for Express\nDESCRIPTION: Installation commands for compression middleware packages in Express-based NestJS applications.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save compression\n$ npm i --save-dev @types/compression\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Proxy Methods with Logging\nDESCRIPTION: This snippet demonstrates the implementation of client proxy methods with added console logging for debugging and understanding the execution flow.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass GoogleCloudPubSubClient extends ClientProxy {\n  async connect(): Promise<any> {\n    console.log('connect');\n  }\n\n  async close() {\n    console.log('close');\n  }\n\n  async dispatchEvent(packet: ReadPacket<any>): Promise<any> {\n    return console.log('event to dispatch: ', packet);\n  }\n\n  publish(\n    packet: ReadPacket<any>,\n    callback: (packet: WritePacket<any>) => void,\n  ): Function {\n    console.log('message:', packet);\n\n    // In a real-world application, the \"callback\" function should be executed\n    // with payload sent back from the responder. Here, we'll simply simulate (5 seconds delay)\n    // that response came through by passing the same \"data\" as we've originally passed in.\n    setTimeout(() => callback({ response: packet.data }), 5000);\n\n    return () => console.log('teardown');\n  }\n\n  unwrap<T = never>(): T {\n    throw new Error('Method not implemented.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Schema with Discriminator Key in NestJS Mongoose\nDESCRIPTION: Defines a base Mongoose schema class using @Schema with the discriminatorKey option, enabling schema inheritance for different document types within the same collection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n@Schema({ discriminatorKey: 'kind' })\nexport class Event {\n  @Prop({\n    type: String,\n    required: true,\n    enum: [ClickedLinkEvent.name, SignUpEvent.name],\n  })\n  kind: string;\n\n  @Prop({ type: Date, required: true })\n  time: Date;\n}\n\nexport const EventSchema = SchemaFactory.createForClass(Event);\n```\n\n----------------------------------------\n\nTITLE: Defining SwaggerCustomOptions Interface in TypeScript for NestJS Swagger Configuration\nDESCRIPTION: This code snippet defines the SwaggerCustomOptions interface, which provides a comprehensive set of options for configuring Swagger UI in a NestJS application. It includes options for controlling UI visibility, API definition formats, custom styling, and various other Swagger-related settings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface SwaggerCustomOptions {\n  /**\n   * If `true`, Swagger resources paths will be prefixed by the global prefix set through `setGlobalPrefix()`.\n   * Default: `false`.\n   * @see https://docs.nestjs.com/faq/global-prefix\n   */\n  useGlobalPrefix?: boolean;\n\n  /**\n   * If `false`, the Swagger UI will not be served. Only API definitions (JSON and YAML)\n   * will be accessible (on `/{path}-json` and `/{path}-yaml`). To fully disable both the Swagger UI and API definitions, use `raw: false`.\n   * Default: `true`.\n   * @deprecated Use `ui` instead.\n   */\n  swaggerUiEnabled?: boolean;\n\n  /**\n   * If `false`, the Swagger UI will not be served. Only API definitions (JSON and YAML)\n   * will be accessible (on `/{path}-json` and `/{path}-yaml`). To fully disable both the Swagger UI and API definitions, use `raw: false`.\n   * Default: `true`.\n   */\n  ui?: boolean;\n\n  /**\n   * If `true`, raw definitions for all formats will be served.\n   * Alternatively, you can pass an array to specify the formats to be served, e.g., `raw: ['json']` to serve only JSON definitions.\n   * If omitted or set to an empty array, no definitions (JSON or YAML) will be served.\n   * Use this option to control the availability of Swagger-related endpoints.\n   * Default: `true`.\n   */\n  raw?: boolean | Array<'json' | 'yaml'>;\n\n  /**\n   * Url point the API definition to load in Swagger UI.\n   */\n  swaggerUrl?: string;\n\n  /**\n   * Path of the JSON API definition to serve.\n   * Default: `<path>-json`.\n   */\n  jsonDocumentUrl?: string;\n\n  /**\n   * Path of the YAML API definition to serve.\n   * Default: `<path>-yaml`.\n   */\n  yamlDocumentUrl?: string;\n\n  /**\n   * Hook allowing to alter the OpenAPI document before being served.\n   * It's called after the document is generated and before it is served as JSON & YAML.\n   */\n  patchDocumentOnRequest?: <TRequest = any, TResponse = any>(\n    req: TRequest,\n    res: TResponse,\n    document: OpenAPIObject\n  ) => OpenAPIObject;\n\n  /**\n   * If `true`, the selector of OpenAPI definitions is displayed in the Swagger UI interface.\n   * Default: `false`.\n   */\n  explorer?: boolean;\n\n  /**\n   * Additional Swagger UI options\n   */\n  swaggerOptions?: SwaggerUiOptions;\n\n  /**\n   * Custom CSS styles to inject in Swagger UI page.\n   */\n  customCss?: string;\n\n  /**\n   * URL(s) of a custom CSS stylesheet to load in Swagger UI page.\n   */\n  customCssUrl?: string | string[];\n\n  /**\n   * URL(s) of custom JavaScript files to load in Swagger UI page.\n   */\n  customJs?: string | string[];\n\n  /**\n   * Custom JavaScript scripts to load in Swagger UI page.\n   */\n  customJsStr?: string | string[];\n\n  /**\n   * Custom favicon for Swagger UI page.\n   */\n  customfavIcon?: string;\n\n  /**\n   * Custom title for Swagger UI page.\n   */\n  customSiteTitle?: string;\n\n  /**\n   * File system path (ex: ./node_modules/swagger-ui-dist) containing static Swagger UI assets.\n   */\n  customSwaggerUiPath?: string;\n\n  /**\n   * @deprecated This property has no effect.\n   */\n  validatorUrl?: string;\n\n  /**\n   * @deprecated This property has no effect.\n   */\n  url?: string;\n\n  /**\n   * @deprecated This property has no effect.\n   */\n  urls?: Record<'url' | 'name', string>[];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Header Versioning in NestJS\nDESCRIPTION: This code shows how to enable Header versioning in a NestJS application. It sets up versioning to use a custom header for specifying the API version.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\napp.enableVersioning({\n  type: VersioningType.HEADER,\n  header: 'Custom-Header',\n});\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Flat File Structure Generation\nDESCRIPTION: Configuration example demonstrating how to enable flat file structure generation as the default for all projects.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"generateOptions\": {\n    \"flat\": true\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Response Validation Check\nDESCRIPTION: Implementation of a health check with custom HTTP response validation\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\n@HealthCheck()\ncheck() {\n  return this.health.check([\n    () =>\n      this.http.responseCheck(\n        'my-external-service',\n        'https://my-external-service.com',\n        (res) => res.status === 204,\n      ),\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ClientProxy in NestJS Service\nDESCRIPTION: Shows how to inject and use ClientProxy in a service constructor using the Inject decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(\n  @Inject('MATH_SERVICE') private client: ClientProxy,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Client with @Client Decorator in NestJS\nDESCRIPTION: Utilize the @Client decorator to create a Kafka client instance in a NestJS service or controller. This configuration includes client ID, broker locations, and consumer group settings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Client({\n  transport: Transport.KAFKA,\n  options: {\n    client: {\n      clientId: 'hero',\n      brokers: ['localhost:9092'],\n    },\n    consumer: {\n      groupId: 'hero-consumer'\n    }\n  }\n})\nclient: ClientKafkaProxy;\n```\n\n----------------------------------------\n\nTITLE: Code-First GraphQL Schema Configuration\nDESCRIPTION: Configuration examples for generating GraphQL schema using the code-first approach, including file-based and in-memory schema generation options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n}),\n\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  autoSchemaFile: true,\n}),\n\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n  sortSchema: true,\n}),\n```\n\n----------------------------------------\n\nTITLE: Accessing and Clearing an Interval in NestJS\nDESCRIPTION: Demonstrates how to access a named interval and clear it using the SchedulerRegistry.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst interval = this.schedulerRegistry.getInterval('notifications');\nclearInterval(interval);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with SWC Loader\nDESCRIPTION: JavaScript configuration for webpack.config.js to use SWC loader for TypeScript files in a NestJS monorepo.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst swcDefaultConfig = require('@nestjs/cli/lib/compiler/defaults/swc-defaults').swcDefaultsFactory().swcOptions;\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'swc-loader',\n          options: swcDefaultConfig,\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exposing Computed Properties with @Expose Decorator\nDESCRIPTION: Demonstrates how to use the @Expose decorator to create a computed property that combines firstName and lastName.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/serialization.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Expose()\nget fullName(): string {\n  return `${this.firstName} ${this.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Specific Generate Options in NestJS\nDESCRIPTION: Example of setting project-specific generate options in NestJS that override global options. Shows how to disable service spec generation for a specific project.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"projects\": {\n    \"cats-project\": {\n      \"generateOptions\": {\n        \"spec\": {\n          \"service\": false\n        }\n      },\n      ...\n    }\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Middleware Class in NestJS\nDESCRIPTION: Creates a class-based middleware that implements NestMiddleware interface to log requests. Shows both TypeScript and JavaScript implementations with proper dependency injection setup.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    console.log('Request...');\n    next();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Module Circular Dependencies using forwardRef() in CommonModule\nDESCRIPTION: This example demonstrates how to handle circular dependencies between modules. The CommonModule imports CatsModule using forwardRef() to allow Nest to resolve the circular dependency at the module level.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/circular-dependency.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [forwardRef(() => CatsModule)],\n})\nexport class CommonModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating Zod Schema for Cat Entity\nDESCRIPTION: Definition of a Zod schema for validating cat creation data with required name, age, and breed fields.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\n\nexport const createCatSchema = z\n  .object({\n    name: z.string(),\n    age: z.number(),\n    breed: z.string(),\n  })\n  .required();\n\nexport type CreateCatDto = z.infer<typeof createCatSchema>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Alias for GraphQL Model Shim in NestJS\nDESCRIPTION: This code snippet demonstrates how to configure a webpack alias to replace the original @nestjs/graphql package with a shim. This allows the reuse of GraphQL models in the frontend without the performance impact of decorators.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/sharing-models.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresolve: { // see: https://webpack.js.org/configuration/resolve/\n  alias: {\n      \"@nestjs/graphql\": path.resolve(__dirname, \"../node_modules/@nestjs/graphql/dist/extra/graphql-model-shim\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify MVC Dependencies\nDESCRIPTION: Commands to install required packages for Fastify MVC implementation\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @fastify/static @fastify/view handlebars\n```\n\n----------------------------------------\n\nTITLE: Disk Storage Health Check Implementation\nDESCRIPTION: Shows how to implement disk storage monitoring using DiskHealthIndicator with customizable threshold checks.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private readonly health: HealthCheckService,\n    private readonly disk: DiskHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.disk.checkStorage('storage', { path: '/', thresholdPercent: 0.5 }),\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serialization Options Configuration\nDESCRIPTION: Demonstrates how to use @SerializeOptions decorator to customize serialization behavior at the method level.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/serialization.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@SerializeOptions({\n  excludePrefixes: ['_'],\n})\n@Get()\nfindOne(): UserEntity {\n  return new UserEntity();\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Generic Base Resolver in NestJS GraphQL\nDESCRIPTION: This example demonstrates how to extend the generic base resolver to create a concrete resolver class for a specific type (Recipe in this case).\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => Recipe)\nexport class RecipesResolver extends BaseResolver(Recipe) {\n  constructor(private recipesService: RecipesService) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting the Job Reference in a Request-Scoped Consumer\nDESCRIPTION: Shows how to inject the current job reference into a request-scoped consumer using the JOB_REF token, which provides access to the job being processed.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(@Inject(JOB_REF) jobRef: Job) {\n  console.log(jobRef);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown for Multiple Servers in NestJS\nDESCRIPTION: Creates a ShutdownObserver service that properly closes HTTP/HTTPS servers when the application shuts down. This is necessary when manually creating server instances as NestJS won't automatically close them during application shutdown.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/multiple-servers.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class ShutdownObserver implements OnApplicationShutdown {\n  private httpServers: http.Server[] = [];\n\n  public addHttpServer(server: http.Server): void {\n    this.httpServers.push(server);\n  }\n\n  public async onApplicationShutdown(): Promise<void> {\n    await Promise.all(\n      this.httpServers.map(\n        (server) =>\n          new Promise((resolve, reject) => {\n            server.close((error) => {\n              if (error) {\n                reject(error);\n              } else {\n                resolve(null);\n              }\n            });\n          }),\n      ),\n    );\n  }\n}\n\nconst shutdownObserver = app.get(ShutdownObserver);\nshutdownObserver.addHttpServer(httpServer);\nshutdownObserver.addHttpServer(httpsServer);\n```\n\n----------------------------------------\n\nTITLE: Implementing a gRPC Service Handler with Explicit Method Naming\nDESCRIPTION: Implementation of a NestJS controller with a gRPC service handler using the @GrpcMethod decorator with explicit service and method names. It includes the handler logic for finding a hero by ID.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller()\nexport class HeroesController {\n  @GrpcMethod('HeroesService', 'FindOne')\n  findOne(data: HeroById, metadata: Metadata, call: ServerUnaryCall<any, any>): Hero {\n    const items = [\n      { id: 1, name: 'John' },\n      { id: 2, name: 'Doe' },\n    ];\n    return items.find(({ id }) => id === data.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting NestJS Applications\nDESCRIPTION: Commands demonstrating how to start applications in a monorepo workspace, showing both default project and named project startup.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nest start\n$ nest start my-app\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import of ConfigModule with Configuration Options in NestJS\nDESCRIPTION: Example showing how to dynamically import the ConfigModule with custom configuration options. This demonstrates using a static register() method to pass parameters that affect the module's behavior.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from './config/config.module';\n\n@Module({\n  imports: [ConfigModule.register({ folder: './config' })],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Extending BaseRpcExceptionFilter in NestJS Microservices\nDESCRIPTION: Demonstrates how to create a custom exception filter that extends the core BaseRpcExceptionFilter in NestJS microservices.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/exception-filters.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Catch, ArgumentsHost } from '@nestjs/common';\nimport { BaseRpcExceptionFilter } from '@nestjs/microservices';\n\n@Catch()\nexport class AllExceptionsFilter extends BaseRpcExceptionFilter {\n  catch(exception: any, host: ArgumentsHost) {\n    return super.catch(exception, host);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest with SWC for NestJS\nDESCRIPTION: TypeScript configuration for vitest.config.ts to set up Vitest with SWC for NestJS projects.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport swc from 'unplugin-swc';\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    globals: true,\n    root: './',\n  },\n  plugins: [\n    // This is required to build the test files with SWC\n    swc.vite({\n      // Explicitly set the module type to avoid inheriting this value from a `.swcrc` config file\n      module: { type: 'es6' },\n    }),\n  ],\n  resolve: {\n    alias: {\n      // Ensure Vitest correctly resolves TypeScript path aliases\n      'src': resolve(__dirname, './src'),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Mongoose Schema Hooks (Middleware) in NestJS Asynchronously\nDESCRIPTION: Shows how to register Mongoose pre/post hooks for a specific schema using MongooseModule.forFeatureAsync and a useFactory. This allows hooks to be registered before the model is compiled.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    MongooseModule.forFeatureAsync([\n      {\n        name: Cat.name,\n        useFactory: () => {\n          const schema = CatsSchema;\n          schema.pre('save', function () {\n            console.log('Hello from pre save');\n          });\n          return schema;\n        },\n      },\n    ]),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing BullConfigService Class in TypeScript\nDESCRIPTION: Defines a service class that implements the SharedBullConfigurationFactory interface to provide Bull module configuration options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass BullConfigService implements SharedBullConfigurationFactory {\n  createSharedConfiguration(): BullModuleOptions {\n    return {\n      redis: {\n        host: 'localhost',\n        port: 6379,\n      },\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Webpack Configuration for NestJS\nDESCRIPTION: Simple webpack configuration to include node_modules in the bundle by setting externals to an empty array.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  externals: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest with TypeScript Path Aliases\nDESCRIPTION: TypeScript configuration for Vitest to support TypeScript path aliases in tests using SWC.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport swc from 'unplugin-swc';\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    include: ['**/*.e2e-spec.ts'],\n    globals: true,\n    alias: {\n      '@src': './src',\n      '@test': './test',\n    },\n    root: './',\n  },\n  resolve: {\n    alias: {\n      '@src': './src',\n      '@test': './test',\n    },\n  },\n  plugins: [swc.vite()],\n});\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a NestJS Application with TypeScript\nDESCRIPTION: The main entry file that bootstraps a NestJS application using the NestFactory. It creates the application instance and starts the HTTP listener on the specified port.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/first-steps.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Source Maps Wizard\nDESCRIPTION: Command to install and run the Sentry wizard for setting up source maps support.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx @sentry/wizard@latest -i sourcemaps\n```\n\n----------------------------------------\n\nTITLE: REPL Service Interaction Example\nDESCRIPTION: Example of how to interact with services using REPL in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/repl.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> get(AppService).getHello()\n'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Defining entity serialization behavior in MikroORM using decorators in TypeScript\nDESCRIPTION: An example entity class showing how to control serialization with MikroORM property decorators: @Property({ hidden: true }) excludes a field from serialization, @Property({ persist: false }) creates a non-persisted field that will be serialized, and relationship fields like @ManyToOne() can specify custom serializer functions to control how relations are serialized when returned from handlers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Book {\n  @Property({ hidden: true }) // Equivalent of class-transformer's `@Exclude`\n  hiddenField = Date.now();\n\n  @Property({ persist: false }) // Similar to class-transformer's `@Expose()`. Will only exist in memory, and will be serialized.\n  count?: number;\n\n  @ManyToOne({\n    serializer: (value) => value.name,\n    serializedName: 'authorName',\n  }) // Equivalent of class-transformer's `@Transform()`\n  author: Author;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Subscriptions Server with graphql-ws in NestJS\nDESCRIPTION: Configures the GraphQL module to use a custom path for subscriptions using the graphql-ws package.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  subscriptions: {\n    'graphql-ws': {\n      path: '/graphql'\n    },\n  }\n}),\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Mau Deployment CLI\nDESCRIPTION: Command line instructions for installing the Mau CLI tool globally using npm and executing the deploy command to deploy a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @nestjs/mau\n$ mau deploy\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Configuration for CLI Application\nDESCRIPTION: Main entry point setup for running the CLI application\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/nest-commander.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  await CommandFactory.run(AppModule);\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration with Terser Plugin\nDESCRIPTION: Extended webpack configuration including Terser plugin for proper class name preservation\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst TerserPlugin = require('terser-webpack-plugin');\n\nreturn {\n  ...options,\n  externals: [],\n  optimization: {\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          keep_classnames: true,\n        },\n      }),\n    ],\n  },\n  output: {\n    ...options.output,\n    libraryTarget: 'commonjs2',\n  },\n  // ... the rest of the configuration\n};\n```\n\n----------------------------------------\n\nTITLE: Binding Controller-Scoped Guard in NestJS\nDESCRIPTION: Example of applying guards at the controller level using the @UseGuards decorator. Shows both class-based and instance-based guard application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('cats')\n@UseGuards(RolesGuard)\nexport class CatsController {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Providers from Dynamic Modules in NestJS\nDESCRIPTION: Shows how to access providers from dynamic modules by first defining a dynamic module and then using select() to retrieve a service from it with strict context checking.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/application-context.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamicConfigModule = ConfigModule.register({ folder: './config' });\n\n@Module({\n  imports: [dynamicConfigModule],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Resolving Provider Circular Dependencies with forwardRef() in CatsService\nDESCRIPTION: This snippet demonstrates how to use the forwardRef() utility function in a CatsService that depends on CommonService, which in turn depends on CatsService. The @Inject() decorator combined with forwardRef() allows Nest to resolve this circular dependency.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/circular-dependency.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService {\n  constructor(\n    @Inject(forwardRef(() => CommonService))\n    private commonService: CommonService,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Date Scalar Implementation\nDESCRIPTION: Implementation of a custom Date scalar type with parsing and serialization logic.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scalar, CustomScalar } from '@nestjs/graphql';\nimport { Kind, ValueNode } from 'graphql';\n\n@Scalar('Date', () => Date)\nexport class DateScalar implements CustomScalar<number, Date> {\n  description = 'Date custom scalar type';\n\n  parseValue(value: number): Date {\n    return new Date(value); // value from the client\n  }\n\n  serialize(value: Date): number {\n    return value.getTime(); // value sent to the client\n  }\n\n  parseLiteral(ast: ValueNode): Date {\n    if (ast.kind === Kind.INT) {\n      return new Date(ast.value);\n    }\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Message Patterns to Specific Transport Strategies in NestJS\nDESCRIPTION: Shows how to bind message patterns to specific transport strategies in a hybrid application. The example demonstrates handling messages from both NATS and TCP transports using the @MessagePattern decorator with transport specification.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/hybrid-application.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@@filename()\n@MessagePattern('time.us.*', Transport.NATS)\ngetDate(@Payload() data: number[], @Ctx() context: NatsContext) {\n  console.log(`Subject: ${context.getSubject()}`);\n  return new Date().toLocaleTimeString(...);\n}\n@MessagePattern({ cmd: 'time.us' }, Transport.TCP)\ngetTCPDate(@Payload() data: number[]) {\n  return new Date().toLocaleTimeString(...);\n}\n@@switch\n@Bind(Payload(), Ctx())\n@MessagePattern('time.us.*', Transport.NATS)\ngetDate(data, context) {\n  console.log(`Subject: ${context.getSubject()}`);\n  return new Date().toLocaleTimeString(...);\n}\n@Bind(Payload(), Ctx())\n@MessagePattern({ cmd: 'time.us' }, Transport.TCP)\ngetTCPDate(data, context) {\n  return new Date().toLocaleTimeString(...);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting a Queue in a NestJS Producer Service\nDESCRIPTION: Shows how to inject a Bull queue into a NestJS service using the @InjectQueue decorator, which identifies the queue by its name as provided in the registerQueue() method call.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Queue } from 'bull';\nimport { InjectQueue } from '@nestjs/bull';\n\n@Injectable()\nexport class AudioService {\n  constructor(@InjectQueue('audio') private audioQueue: Queue) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Nest.js Library Project Configuration in nest-cli.json\nDESCRIPTION: Configuration entry in nest-cli.json for a library project. This shows the metadata differences between libraries and applications, including the type property set to \"library\" and entryFile set to \"index\".\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/libraries.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\n{\n    \"my-library\": {\n      \"type\": \"library\",\n      \"root\": \"libs/my-library\",\n      \"entryFile\": \"index\",\n      \"sourceRoot\": \"libs/my-library/src\",\n      \"compilerOptions\": {\n        \"tsConfigPath\": \"libs/my-library/tsconfig.lib.json\"\n      }\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Serialized JSON Response Example\nDESCRIPTION: Shows the resulting JSON response after serialization has removed the password field.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/serialization.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting DiscoveryService in a NestJS Service\nDESCRIPTION: Demonstrates how to inject the DiscoveryService into a service using constructor injection. Shows both TypeScript and JavaScript syntax approaches.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/discovery-service.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class ExampleService {\n  constructor(private readonly discoveryService: DiscoveryService) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Optional Providers in NestJS\nDESCRIPTION: Demonstrates how to use the @Optional() decorator to mark a provider as optional. This is useful when a dependency might not always be available or needed.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/components.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Optional, Inject } from '@nestjs/common';\n\n@Injectable()\nexport class HttpService<T> {\n  constructor(@Optional() @Inject('HTTP_OPTIONS') private httpClient: T) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Saga in NestJS CQRS\nDESCRIPTION: Example of creating a Saga that listens for HeroKilledDragonEvent and dispatches a DropAncientItemCommand in response.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class HeroesGameSagas {\n  @Saga()\n  dragonKilled = (events$: Observable<any>): Observable<ICommand> => {\n    return events$.pipe(\n      ofType(HeroKilledDragonEvent),\n      map((event) => new DropAncientItemCommand(event.heroId, fakeItemID)),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema-First Federation Module Configuration\nDESCRIPTION: NestJS module configuration for GraphQL Federation using schema-first approach\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ApolloFederationDriver,\n  ApolloFederationDriverConfig,\n} from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { UsersResolver } from './users.resolver';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloFederationDriverConfig>({\n      driver: ApolloFederationDriver,\n      typePaths: ['**/*.graphql'],\n    }),\n  ],\n  providers: [UsersResolver],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom RpcExceptionFilter in NestJS Microservices\nDESCRIPTION: Illustrates how to create a custom RpcExceptionFilter in NestJS microservices. The catch() method must return an Observable.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/exception-filters.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Catch, RpcExceptionFilter, ArgumentsHost } from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { RpcException } from '@nestjs/microservices';\n\n@Catch(RpcException)\nexport class ExceptionFilter implements RpcExceptionFilter<RpcException> {\n  catch(exception: RpcException, host: ArgumentsHost): Observable<any> {\n    return throwError(() => exception.getError());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Pipes to Custom Decorators in NestJS\nDESCRIPTION: Demonstrates how to apply validation pipes to custom decorators, ensuring the extracted data meets validation criteria.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nasync findOne(\n  @User(new ValidationPipe({ validateCustomDecorators: true }))\n  user: UserEntity,\n) {\n  console.log(user);\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Auto-generated Module Methods\nDESCRIPTION: Shows how to extend the auto-generated register and registerAsync methods with custom logic\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\nimport { ConfigurableModuleClass, ASYNC_OPTIONS_TYPE, OPTIONS_TYPE } from './config.module-definition';\n\n@Module({\n  providers: [ConfigService],\n  exports: [ConfigService],\n})\nexport class ConfigModule extends ConfigurableModuleClass {\n  static register(options: typeof OPTIONS_TYPE): DynamicModule {\n    return {\n      // your custom logic here\n      ...super.register(options),\n    };\n  }\n\n  static registerAsync(options: typeof ASYNC_OPTIONS_TYPE): DynamicModule {\n    return {\n      // your custom logic here\n      ...super.registerAsync(options),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Description to GraphQL Enum Type\nDESCRIPTION: Provides a description for the enum type by passing a description property to the registerEnumType function.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nregisterEnumType(AllowedColor, {\n  name: 'AllowedColor',\n  description: 'The supported colors.',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Message Pattern Handler in NestJS\nDESCRIPTION: Example of a message handler using the @MessagePattern decorator that will be registered automatically by the NestJS runtime. This handler processes messages with the 'echo' pattern.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('echo')\necho(@Payload() data: object) {\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: NestJS CLI Plugin Configuration\nDESCRIPTION: Configuration examples for enabling and customizing the GraphQL CLI plugin in nest-cli.json.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/cli-plugin.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"collection\": \"@nestjs/schematics\",\n  \"sourceRoot\": \"src\",\n  \"compilerOptions\": {\n    \"plugins\": [\"@nestjs/graphql\"]\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"collection\": \"@nestjs/schematics\",\n  \"sourceRoot\": \"src\",\n  \"compilerOptions\": {\n    \"plugins\": [\n      {\n        \"name\": \"@nestjs/graphql\",\n        \"options\": {\n          \"typeFileNameSuffix\": [\".input.ts\", \".args.ts\"],\n          \"introspectComments\": true\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Provider Circular Dependencies with forwardRef() in CommonService\nDESCRIPTION: This snippet shows the other side of the circular dependency resolution, where CommonService depends on CatsService. The same pattern with @Inject() and forwardRef() is used to complete the circular reference resolution.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/circular-dependency.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CommonService {\n  constructor(\n    @Inject(forwardRef(() => CatsService))\n    private catsService: CatsService,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing WsException in NestJS WebSocket\nDESCRIPTION: Demonstrates how to throw a WsException in a NestJS WebSocket application. WsException is used instead of HttpException for WebSocket-specific error handling.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/exception-filters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new WsException('Invalid credentials.');\n```\n\n----------------------------------------\n\nTITLE: Configuring UsersModule in TypeScript\nDESCRIPTION: Configuration of UsersModule to export UsersService, making it accessible to other modules in the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions to Requests with @ApiExtension in NestJS\nDESCRIPTION: This snippet adds custom API extension data to request definitions using @ApiExtension with a prefix 'x-'. It helps include custom metadata in Swagger documentation for extension purposes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n@ApiExtension('x-foo', { hello: 'world' })\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Health Check Package in NestJS\nDESCRIPTION: Command to install the grpc-health-check package for implementing health checks in a gRPC NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save grpc-health-check\n```\n\n----------------------------------------\n\nTITLE: Converting to Monorepo Mode\nDESCRIPTION: Commands to convert a standard NestJS project to monorepo mode by generating a new application within the workspace.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my-project\n$ nest generate app my-app\n```\n\n----------------------------------------\n\nTITLE: Suppressing Terminus Log Messages\nDESCRIPTION: Demonstrates how to completely suppress all log messages from Terminus, including error messages, by setting the logger option to false in the module configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\nimports: [\n  TerminusModule.forRoot({\n    logger: false,\n  }),\n],\n})\nexport class HealthModule {}\n```\n\n----------------------------------------\n\nTITLE: GraphQL SDL Schema Definition for Author Type\nDESCRIPTION: Example of how an Author type would be defined using GraphQL Schema Definition Language (SDL). This demonstrates the schema that would be manually created in a schema-first approach.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  id: Int!\n  firstName: String\n  lastName: String\n  posts: [Post!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Handling RabbitMQ Server Error Events in NestJS\nDESCRIPTION: Demonstrates error event handling for the RabbitMQ server instance using typed events.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nserver.on<RmqEvents>('error', (err) => {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Client Module\nDESCRIPTION: Setting up ClientsModule registration for MQTT transport with connection options\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/mqtt.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ClientsModule.register([\n      {\n        name: 'MATH_SERVICE',\n        transport: Transport.MQTT,\n        options: {\n          url: 'mqtt://localhost:1883',\n        }\n      },\n    ]),\n  ]\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: REPL History Configuration\nDESCRIPTION: Code to configure REPL history preservation between runs and reloads.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/repl.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  const replServer = await repl(AppModule);\n  replServer.setupHistory(\".nestjs_repl_history\", (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache TTL in NestJS\nDESCRIPTION: Shows how to specify a custom Time-to-Live (TTL) for cache entries when registering the CacheModule.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nCacheModule.register({\n  ttl: 5000, // milliseconds\n});\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Decorators List in NestJS\nDESCRIPTION: Complete list of OpenAPI decorators showing their names and where they can be applied (Method, Controller, or Model level). Each decorator is prefixed with 'Api' and serves a specific documentation purpose.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/decorators.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiBasicAuth()         // Method / Controller\n@ApiBearerAuth()        // Method / Controller\n@ApiBody()              // Method\n@ApiConsumes()          // Method / Controller\n@ApiCookieAuth()        // Method / Controller\n@ApiExcludeController() // Controller\n@ApiExcludeEndpoint()   // Method\n@ApiExtension()         // Method\n@ApiExtraModels()       // Method / Controller\n@ApiHeader()            // Method / Controller\n@ApiHideProperty()      // Model\n@ApiOAuth2()            // Method / Controller\n@ApiOperation()         // Method\n@ApiParam()             // Method / Controller\n@ApiProduces()          // Method / Controller\n@ApiSchema()            // Model\n@ApiProperty()          // Model\n@ApiPropertyOptional()  // Model\n@ApiQuery()             // Method / Controller\n@ApiResponse()          // Method / Controller\n@ApiSecurity()          // Method / Controller\n@ApiTags()              // Method / Controller\n@ApiCallbacks()         // Method / Controller\n```\n\n----------------------------------------\n\nTITLE: REPL Methods Display Example\nDESCRIPTION: Example of how to display available methods for a controller or provider using the methods() function.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/repl.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> methods(AppController)\n\nMethods:\n ◻ getHello\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Configuration in NestJS Microservices\nDESCRIPTION: Shows how to use AsyncMicroserviceOptions with ConfigService for dynamic microservice configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConfigService } from '@nestjs/config';\nimport { AsyncMicroserviceOptions, Transport } from '@nestjs/microservices';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.createMicroservice<AsyncMicroserviceOptions>(\n    AppModule,\n    {\n      useFactory: (configService: ConfigService) => ({\n        transport: Transport.TCP,\n        options: {\n          host: configService.get<string>('HOST'),\n          port: configService.get<number>('PORT'),\n        },\n      }),\n      inject: [ConfigService],\n    },\n  );\n\n  await app.listen();\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Using Date Field in Class\nDESCRIPTION: Example of using the custom Date scalar in a class definition.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Field()\ncreationDate: Date;\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Schema Generation with NestJS\nDESCRIPTION: Demonstrates how to generate a GraphQL SDL schema using GraphQLSchemaBuilderModule. Creates an application instance, initializes it, and uses GraphQLSchemaFactory to generate and print the schema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/schema-generator.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function generateSchema() {\n  const app = await NestFactory.create(GraphQLSchemaBuilderModule);\n  await app.init();\n\n  const gqlSchemaFactory = app.get(GraphQLSchemaFactory);\n  const schema = await gqlSchemaFactory.create([RecipesResolver]);\n  console.log(printSchema(schema));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Strategy Authentication Chain in NestJS\nDESCRIPTION: Shows how to configure an AuthGuard to use multiple authentication strategies in a chain. The first strategy to succeed, redirect, or error will halt the chain, while authentication failures proceed through each strategy in series.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport class JwtAuthGuard extends AuthGuard(['strategy_jwt_1', 'strategy_jwt_2', '...']) { ... }\n```\n\n----------------------------------------\n\nTITLE: Using the Nest CLI new command with options\nDESCRIPTION: Example of using the 'new' command with the 'dry-run' option to preview the creation of a new project without actually creating files.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ nest new my-nest-project --dry-run\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items from Cache in NestJS\nDESCRIPTION: Demonstrates how to retrieve items from the cache using the get method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = await this.cacheManager.get('key');\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Module Configuration in NestJS\nDESCRIPTION: Initial setup of GraphQLModule using Apollo driver in the main application module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloDriverConfig>({\n      driver: ApolloDriver,\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Specifying Compression Encodings in Fastify\nDESCRIPTION: Configuration to specify preferred compression encodings (gzip and deflate) in Fastify compression middleware.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/compression.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait app.register(compression, { encodings: ['gzip', 'deflate'] });\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Body in Express Controller\nDESCRIPTION: Example of accessing the raw request body in a NestJS controller using the RawBodyRequest interface with Express\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/raw-body.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post, RawBodyRequest, Req } from '@nestjs/common';\nimport { Request } from 'express';\n\n@Controller('cats')\nclass CatsController {\n  @Post()\n  create(@Req() req: RawBodyRequest<Request>) {\n    const raw = req.rawBody; // returns a `Buffer`.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Request Context Implementation\nDESCRIPTION: Implementation of a custom request context class extending AsyncContext for CQRS operations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AsyncContext } from '@nestjs/cqrs';\n\nexport class MyRequest extends AsyncContext {\n  constructor(public readonly user: User) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom WebSocket Adapter in NestJS Application\nDESCRIPTION: This code snippet shows how to set up and use a custom WebSocket adapter (WsAdapter) in a NestJS application's main file.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\napp.useWebSocketAdapter(new WsAdapter(app));\n```\n\n----------------------------------------\n\nTITLE: Posts Resolver Implementation for Federation\nDESCRIPTION: TypeScript resolver implementation for Posts service with federation support including user reference resolution.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Query, Resolver, Parent, ResolveField } from '@nestjs/graphql';\nimport { PostsService } from './posts.service';\nimport { Post } from './posts.interfaces';\n\n@Resolver('Post')\nexport class PostsResolver {\n  constructor(private postsService: PostsService) {}\n\n  @Query('getPosts')\n  getPosts() {\n    return this.postsService.findAll();\n  }\n\n  @ResolveField('user')\n  getUser(@Parent() post: Post) {\n    return { __typename: 'User', id: post.userId };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the @RequirePermissions() Decorator (TypeScript)\nDESCRIPTION: This code demonstrates how to use a theoretical `@RequirePermissions()` decorator (similar to `@Roles()`) to protect a route handler based on permissions.  Only users with the `Permission.CREATE_CAT` permission will be able to access the endpoint.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@RequirePermissions(Permission.CREATE_CAT)\ncreate(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NestJS Module for CLI Command\nDESCRIPTION: Module configuration to register the command class and its dependencies\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/nest-commander.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  providers: [LogService, BasicCommand],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Joi Schema Validation for Environment Variables in NestJS\nDESCRIPTION: Demonstrates how to define a Joi validation schema for environment variables in a NestJS application module. The schema validates NODE_ENV and PORT with default values.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Joi from 'joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        NODE_ENV: Joi.string()\n          .valid('development', 'production', 'test', 'provision')\n          .default('development'),\n        PORT: Joi.number().port().default(3000),\n      }),\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing Mongoose Dependencies in NestJS\nDESCRIPTION: Command to install Mongoose package for MongoDB integration in a NestJS project.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save mongoose\n```\n\n----------------------------------------\n\nTITLE: Checking Out Master Branch After NestJS PR\nDESCRIPTION: Command to check out the master branch after your pull request has been merged, using the force flag to ensure a clean state.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master -f\n```\n\n----------------------------------------\n\nTITLE: Defining the User Entity Class in TypeScript\nDESCRIPTION: Defines a simple `User` class with `id` (number) and `isAdmin` (boolean) properties. This class represents a user entity whose permissions will be managed by CASL.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n  id: number;\n  isAdmin: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New NestJS Project\nDESCRIPTION: Command syntax for creating a new NestJS project with optional project name and configuration options. Supports both standard and shorthand syntax.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/usages.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nest new <name> [options]\n$ nest n <name> [options]\n```\n\n----------------------------------------\n\nTITLE: Registering GraphQL Enum Type in NestJS\nDESCRIPTION: Registers a TypeScript enum as a GraphQL enum type using the registerEnumType function, which makes it available for use in GraphQL schema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nregisterEnumType(AllowedColor, {\n  name: 'AllowedColor',\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the NestJS Server\nDESCRIPTION: Command to start the NestJS server with Swagger documentation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/other-features.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Registering Helmet Plugin with Fastify in NestJS\nDESCRIPTION: TypeScript code demonstrating how to register the Helmet plugin with Fastify in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/helmet.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport helmet from '@fastify/helmet'\n// somewhere in your initialization file\nawait app.register(helmet)\n```\n\n----------------------------------------\n\nTITLE: Implementing Photo Service\nDESCRIPTION: Creates a service class that uses the Photo repository for database operations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-typeorm.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Inject } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Photo } from './photo.entity';\n\n@Injectable()\nexport class PhotoService {\n  constructor(\n    @Inject('PHOTO_REPOSITORY')\n    private photoRepository: Repository<Photo>,\n  ) {}\n\n  async findAll(): Promise<Photo[]> {\n    return this.photoRepository.find();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Posts Service Federation Module Configuration\nDESCRIPTION: NestJS module configuration for Posts service with Federation\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ApolloFederationDriver,\n  ApolloFederationDriverConfig,\n} from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { PostsResolver } from './posts.resolver';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<ApolloFederationDriverConfig>({\n      driver: ApolloFederationDriver,\n      typePaths: ['**/*.graphql'],\n    }),\n  ],\n  providers: [PostsResolvers],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Dependencies in NestJS\nDESCRIPTION: Commands to install required packages for WebSocket functionality in NestJS applications.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/gateways.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @nestjs/websockets @nestjs/platform-socket.io\n```\n\n----------------------------------------\n\nTITLE: Accessing Lazy Loaded Service\nDESCRIPTION: Demonstrates how to obtain a reference to a service from a lazy loaded module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lazy-loading-modules.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { LazyModule } = await import('./lazy.module');\nconst moduleRef = await this.lazyModuleLoader.load(() => LazyModule);\n\nconst { LazyService } = await import('./lazy.service');\nconst lazyService = moduleRef.get(LazyService);\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Dependencies for NestJS\nDESCRIPTION: Command to install the required packages for building gRPC-based microservices in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @grpc/grpc-js @grpc/proto-loader\n```\n\n----------------------------------------\n\nTITLE: REPL Watch Mode Command\nDESCRIPTION: Command to run REPL in watch mode for development purposes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/repl.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run start -- --watch --entryFile repl\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Generate Options with Spec Disabled\nDESCRIPTION: Configuration example showing how to disable spec file generation globally for all projects using the generateOptions property.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"generateOptions\": {\n    \"spec\": false\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nest CLI command with aliases\nDESCRIPTION: Example showing how to use the shorthand alias 'n' for 'new' and '-d' for '--dry-run' when creating a new Nest project.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ nest n my-nest-project -d\n```\n\n----------------------------------------\n\nTITLE: Defining a DTO Class with Manual Swagger Decorators in TypeScript\nDESCRIPTION: Example of a CreateUserDto class with manually added @ApiProperty decorators for Swagger documentation. This approach requires more boilerplate code.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CreateUserDto {\n  @ApiProperty()\n  email: string;\n\n  @ApiProperty()\n  password: string;\n\n  @ApiProperty({ enum: RoleEnum, default: [], isArray: true })\n  roles: RoleEnum[] = [];\n\n  @ApiProperty({ required: false, default: true })\n  isEnabled?: boolean = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Host Module in NestJS\nDESCRIPTION: This snippet demonstrates how to create a host module (UsersModule) that provides and exports a service (UsersService) to make it available for other modules to import and use.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing SWC Dependencies for NestJS\nDESCRIPTION: Command to install the necessary SWC packages for use with NestJS CLI.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save-dev @swc/cli @swc/core\n```\n\n----------------------------------------\n\nTITLE: Initializing CommandFactory with Basic Setup\nDESCRIPTION: Basic setup for running a CLI application using CommandFactory with optional logger configuration\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/nest-commander.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CommandFactory } from 'nest-commander';\nimport { AppModule } from './app.module';\nimport { LogService } './log.service';\n\nasync function bootstrap() {\n  await CommandFactory.run(AppModule, new LogService());\n\n  // or, if you only want to print Nest's warnings and errors\n  await CommandFactory.run(AppModule, ['warn', 'error']);\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Conditional Worker Module Loading Based on Worker Type\nDESCRIPTION: Example of using the LazyModuleLoader to dynamically load different worker modules based on the worker type. This pattern optimizes serverless function performance by only loading the necessary modules for specific operations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (workerType === WorkerType.A) {\n  const { WorkerAModule } = await import('./worker-a.module');\n  const moduleRef = await this.lazyModuleLoader.load(() => WorkerAModule);\n  // ...\n} else if (workerType === WorkerType.B) {\n  const { WorkerBModule } = await import('./worker-b.module');\n  const moduleRef = await this.lazyModuleLoader.load(() => WorkerBModule);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Serverless\nDESCRIPTION: Webpack configuration for bundling NestJS serverless applications with proper output settings\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  ...options,\n  externals: [],\n  output: {\n    ...options.output,\n    libraryTarget: 'commonjs2',\n  },\n  // ... the rest of the configuration\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Client Proxy in NestJS Module\nDESCRIPTION: This snippet shows how to register the custom client proxy in a NestJS module using the ClientsModule, demonstrating integration with the NestJS framework.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ClientsModule.register([{\n      name: 'CustomProxy',\n      customClass: ErrorHandlingProxy,\n    }]),\n  ]\n})\nexport class AppModule\n```\n\n----------------------------------------\n\nTITLE: Command Execution with Request Context\nDESCRIPTION: Example of executing a command with custom request context in CQRS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst myRequest = new MyRequest(user);\nawait this.commandBus.execute(\n  new KillDragonCommand(heroId, killDragonDto.dragonId),\n  myRequest,\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Field Middleware on an Object Type Field\nDESCRIPTION: This snippet demonstrates how to apply a field middleware to a specific field in an ObjectType class using the middleware option in the @Field decorator. The loggerMiddleware will be executed when the title field is resolved.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/field-middleware.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@ObjectType()\nexport class Recipe {\n  @Field({ middleware: [loggerMiddleware] })\n  title: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kafka Dependencies for NestJS\nDESCRIPTION: Install the required package 'kafkajs' to start building Kafka-based microservices in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save kafkajs\n```\n\n----------------------------------------\n\nTITLE: Error Message for ModuleRef Dependencies in Monorepo Setup\nDESCRIPTION: Example of the error message when a core provider (ModuleRef) cannot be resolved in a monorepo setup. This typically occurs when a project loads two different Node modules of the @nestjs/core package.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/errors.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNest can't resolve dependencies of the <provider> (?).\nPlease make sure that the argument ModuleRef at index [<index>] is available in the <module> context.\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Module in NestJS\nDESCRIPTION: Configuration of AuthModule with necessary imports and providers for authentication functionality.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n```\n\n----------------------------------------\n\nTITLE: REPL Debug Output Example\nDESCRIPTION: Example of using the debug() function to display registered modules, controllers, and providers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/repl.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> debug()\n\nAppModule:\n - controllers:\n  ◻ AppController\n - providers:\n  ◻ AppService\n```\n\n----------------------------------------\n\nTITLE: Deriving DTOs by Excluding Properties with OmitType Utility in NestJS (TypeScript)\nDESCRIPTION: This code leverages the OmitType utility (from @nestjs/mapped-types) to create a DTO that inherits all fields except for specified properties from another class. The second argument is an array of property names to omit. Useful for fine-tuning which fields are available in update or partial Dto classes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UpdateCatDto extends OmitType(CreateCatDto, ['name'] as const) {}\n```\n\n----------------------------------------\n\nTITLE: Installing and Deploying with Mau\nDESCRIPTION: Shows the commands to install the Mau CLI tool and deploy a NestJS application using Mau, the official deployment platform for NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @nestjs/mau\n$ mau deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Parameter Decorators for GraphQL in NestJS\nDESCRIPTION: Demonstrates how to create and use custom parameter decorators with GraphQL resolvers. The example creates a @User() decorator that extracts the user object from the GraphQL context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) =>\n    GqlExecutionContext.create(ctx).getContext().user,\n);\n```\n\n----------------------------------------\n\nTITLE: Lightweight NestJS Lambda Handler\nDESCRIPTION: Simplified AWS Lambda handler using NestJS application context without HTTP server\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpStatus } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { Callback, Context, Handler } from 'aws-lambda';\nimport { AppModule } from './app.module';\nimport { AppService } from './app.service';\n\nexport const handler: Handler = async (\n  event: any,\n  context: Context,\n  callback: Callback,\n) => {\n  const appContext = await NestFactory.createApplicationContext(AppModule);\n  const appService = appContext.get(AppService);\n\n  return {\n    body: appService.getHello(),\n    statusCode: HttpStatus.OK,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw Body Access in NestJS Express Application\nDESCRIPTION: Setting up a NestJS Express application with raw body access enabled through the rawBody option in NestFactory.create()\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/raw-body.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport type { NestExpressApplication } from '@nestjs/platform-express';\nimport { AppModule } from './app.module';\n\n// in the \"bootstrap\" function\nconst app = await NestFactory.create<NestExpressApplication>(AppModule, {\n  rawBody: true,\n});\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Code-First User Entity Definition\nDESCRIPTION: User entity class definition with federation decorators for code-first approach.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Directive, ObjectType, Field, ID } from '@nestjs/graphql';\nimport { Post } from './post.entity';\n\n@ObjectType()\n@Directive('@extends')\n@Directive('@key(fields: \"id\")')\nexport class User {\n  @Field(() => ID)\n  @Directive('@external')\n  id: number;\n\n  @Field(() => [Post])\n  posts?: Post[];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket (ws) Library for NestJS\nDESCRIPTION: This command installs the necessary package for using the ws library as a WebSocket adapter in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @nestjs/platform-ws\n```\n\n----------------------------------------\n\nTITLE: Applying Roles Decorator to Controller Method\nDESCRIPTION: Demonstrates how to apply the Roles decorator to a controller method to restrict access to users with admin role. Shows both TypeScript and JavaScript syntax.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@Roles(['admin'])\nasync create(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS CLI Globally\nDESCRIPTION: Installs the NestJS command-line interface globally on the operating system using npm. This allows access to commands like 'nest new' and 'nest generate' from any directory. For version management consistency, 'build' and 'start' commands are recommended to be run via project-local package scripts.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/scripts.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm install -g @nestjs/cli\n```\n\n----------------------------------------\n\nTITLE: Implementing Interceptor with MessagePattern in NestJS Microservices (JavaScript)\nDESCRIPTION: This snippet shows the JavaScript version of using an interceptor with a microservice message pattern in NestJS. It implements an 'accumulate' method that sums an array of numbers, using UseInterceptors and MessagePattern decorators. The TransformInterceptor is manually instantiated and applied at the method level.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/interceptors.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n@UseInterceptors(new TransformInterceptor())\n@MessagePattern({ cmd: 'sum' })\naccumulate(data) {\n  return (data || []).reduce((a, b) => a + b);\n}\n```\n\n----------------------------------------\n\nTITLE: Using IntersectionType in GraphQL Schema\nDESCRIPTION: Example of using IntersectionType utility to combine two types into a new composite type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@InputType()\nexport class UpdateUserInput extends IntersectionType(\n  CreateUserInput,\n  AdditionalUserInfo,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Message Properties\nDESCRIPTION: Example of extracting specific properties from message body using decorators.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/gateways.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@SubscribeMessage('events')\nhandleEvent(@MessageBody('id') id: number): number {\n  return id;\n}\n```\n\n----------------------------------------\n\nTITLE: SDL Schema Generated for Union Type\nDESCRIPTION: Shows the GraphQL SDL schema that gets generated based on the code-first approach implementation of the union type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  name: String!\n}\n\ntype Book {\n  title: String!\n}\n\nunion ResultUnion = Author | Book\n\ntype Query {\n  search: [ResultUnion!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Generating NestJS Module and Class using Nest CLI\nDESCRIPTION: Uses the NestJS CLI commands `nest g module casl` and `nest g class casl/casl-ability.factory` to scaffold a new `CaslModule` and a `CaslAbilityFactory` class within the `casl` directory. This sets up the basic structure for the CASL integration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ nest g module casl\n$ nest g class casl/casl-ability.factory\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Parser Size Limit in Express\nDESCRIPTION: Setting a custom size limit for the JSON body parser in NestJS Express application\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/raw-body.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.useBodyParser('json', { limit: '10mb' });\n```\n\n----------------------------------------\n\nTITLE: Adding Global Parameters in Swagger Documentation\nDESCRIPTION: Demonstrates how to add global parameters that apply to all routes using DocumentBuilder.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/other-features.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = new DocumentBuilder()\n  .addGlobalParameters({\n    name: 'tenantId',\n    in: 'header',\n  })\n  // other configurations\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Using NATS Wildcards\nDESCRIPTION: Implementation of NATS wildcard subscriptions for pattern matching subjects.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('time.us.*')\ngetDate(@Payload() data: number[], @Ctx() context: NatsContext) {\n  console.log(`Subject: ${context.getSubject()}`); // e.g. \"time.us.east\"\n  return new Date().toLocaleTimeString(...);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Decorator with DiscoveryService\nDESCRIPTION: Shows how to create a custom decorator using the DiscoveryService's createDecorator method. This allows attaching metadata to providers that can be queried later.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/discovery-service.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiscoveryService } from '@nestjs/core';\n\nexport const FeatureFlag = DiscoveryService.createDecorator();\n```\n\n----------------------------------------\n\nTITLE: Extending BaseWsExceptionFilter in NestJS (JavaScript)\nDESCRIPTION: Shows how to extend the BaseWsExceptionFilter class in NestJS using JavaScript syntax. This allows for custom exception handling while leveraging the base filter's functionality.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/exception-filters.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Catch } from '@nestjs/common';\nimport { BaseWsExceptionFilter } from '@nestjs/websockets';\n\n@Catch()\nexport class AllExceptionsFilter extends BaseWsExceptionFilter {\n  catch(exception, host) {\n    super.catch(exception, host);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Options Interface\nDESCRIPTION: TypeScript interface defining the available configuration options for the GraphQL CLI plugin.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/cli-plugin.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PluginOptions {\n  typeFileNameSuffix?: string[];\n  introspectComments?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to RabbitMQ Server Status Updates in NestJS\nDESCRIPTION: Demonstrates how to monitor the microservice server's status stream for RabbitMQ connection updates.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = app.connectMicroservice<MicroserviceOptions>(...);\nserver.status.subscribe((status: RmqStatus) => {\n  console.log(status);\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating a NestJS Microservice with TCP Transport\nDESCRIPTION: TypeScript code to create a NestJS microservice instance using the TCP transport layer. It demonstrates how to use NestFactory to create and start a microservice.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { Transport, MicroserviceOptions } from '@nestjs/microservices';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.createMicroservice<MicroserviceOptions>(\n    AppModule,\n    {\n      transport: Transport.TCP,\n    },\n  );\n  await app.listen();\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with SWC Transformer\nDESCRIPTION: JSON configuration to set up Jest with SWC transformer for NestJS projects.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"transform\": {\n      \"^.+\\\\.(t|j)s?$\": [\"@swc/jest\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting and Retrieving from Dynamic Module in NestJS\nDESCRIPTION: Demonstrates how to select a dynamic module and retrieve a service from it with strict context checking.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/application-context.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst configService = app.select(dynamicConfigModule).get(ConfigService, { strict: true });\n```\n\n----------------------------------------\n\nTITLE: Basic Event Handler Implementation\nDESCRIPTION: Simple implementation of a WebSocket event handler using the @SubscribeMessage decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/gateways.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@SubscribeMessage('events')\nhandleEvent(@MessageBody() data: string): string {\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting OpenAPI Schema with Description in YAML\nDESCRIPTION: This YAML snippet shows the output of the OpenAPI schema generation after adding a description using the @ApiSchema() decorator. It includes the 'CreateCatDto' schema with the added description.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nschemas:\n  CreateCatDto:\n    type: object\n    description: Description of the CreateCatDto schema\n```\n\n----------------------------------------\n\nTITLE: Resolving Module Circular Dependencies using forwardRef() in CatsModule\nDESCRIPTION: This snippet shows the other side of the module circular dependency resolution, where CatsModule imports CommonModule. Using forwardRef() on both sides allows Nest to properly initialize both modules despite their circular relationship.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/circular-dependency.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [forwardRef(() => CommonModule)],\n})\nexport class CatsModule {}\n```\n\n----------------------------------------\n\nTITLE: Event-Driven Lambda Handler\nDESCRIPTION: AWS Lambda handler implementation using NestJS for event processing\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: Handler = async (\n  event: any,\n  context: Context,\n  callback: Callback,\n) => {\n  const appContext = await NestFactory.createApplicationContext(AppModule);\n  const eventsService = appContext.get(EventsService);\n  return eventsService.process(event);\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Image for NestJS Application\nDESCRIPTION: These commands demonstrate how to build a Docker image from the Dockerfile and run it as a container. The -t flag tags the image, and -p maps the container port to the host.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my-nestjs-app .\ndocker run -p 3000:3000 my-nestjs-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Event Listener in NestJS BullMQ\nDESCRIPTION: Example of setting up a queue event listener for the 'active' event using @QueueEventsListener and @OnQueueEvent decorators.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  QueueEventsHost,\n  QueueEventsListener,\n  OnQueueEvent,\n} from '@nestjs/bullmq';\n\n@QueueEventsListener('audio')\nexport class AudioEventsListener extends QueueEventsHost {\n  @OnQueueEvent('active')\n  onActive(job: { jobId: string; prev?: string }) {\n    console.log(`Processing job ${job.jobId}...`);\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Static Import of ConfigModule in NestJS\nDESCRIPTION: Example of importing a ConfigModule statically in a NestJS application module. This approach doesn't allow for customization of the imported module's behavior.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from './config/config.module';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless Dependencies\nDESCRIPTION: Commands to install required packages for AWS Lambda integration with Serverless framework\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @codegenie/serverless-express aws-lambda\n$ npm i -D @types/aws-lambda serverless-offline\n```\n\n----------------------------------------\n\nTITLE: Using RxJS Observables in NestJS Route Handlers\nDESCRIPTION: Shows how to return RxJS observables from controller methods. NestJS will automatically subscribe to the observable and send the emitted value to the client when the stream completes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nfindAll(): Observable<any[]> {\n  return of([]);\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Lazy Loading\nDESCRIPTION: Required TypeScript configuration changes for enabling lazy loading with Webpack.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lazy-loading-modules.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Posts Resolver Implementation\nDESCRIPTION: TypeScript implementation of Posts resolver with User reference resolution\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Query, Resolver, Parent, ResolveField } from '@nestjs/graphql';\nimport { PostsService } from './posts.service';\nimport { Post } from './posts.interfaces';\n\n@Resolver('Post')\nexport class PostsResolver {\n  constructor(private postsService: PostsService) {}\n\n  @Query('getPosts')\n  getPosts() {\n    return this.postsService.findAll();\n  }\n\n  @ResolveField('user')\n  getUser(@Parent() post: Post) {\n    return { __typename: 'User', id: post.userId };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Scoped Providers in NestJS\nDESCRIPTION: Illustrates how to use the resolve() method of ModuleRef to dynamically resolve a scoped provider (transient or request-scoped). This example resolves a TransientService instance in the onModuleInit lifecycle hook.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/module-reference.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService implements OnModuleInit {\n  private transientService: TransientService;\n  constructor(private moduleRef: ModuleRef) {}\n\n  async onModuleInit() {\n    this.transientService = await this.moduleRef.resolve(TransientService);\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n\n  async onModuleInit() {\n    this.transientService = await this.moduleRef.resolve(TransientService);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Platform-Specific NestJS Application\nDESCRIPTION: Example of creating a NestJS application with a specific platform type (Express in this case). This enables access to platform-specific methods and APIs.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/first-steps.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create<NestExpressApplication>(AppModule);\n```\n\n----------------------------------------\n\nTITLE: Defining a gRPC Service with Protocol Buffers\nDESCRIPTION: Sample .proto file defining a HeroesService with a FindOne RPC method. It includes message definitions for the request (HeroById) and response (Hero) types.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// hero/hero.proto\nsyntax = \"proto3\";\n\npackage hero;\n\nservice HeroesService {\n  rpc FindOne (HeroById) returns (Hero) {}\n}\n\nmessage HeroById {\n  int32 id = 1;\n}\n\nmessage Hero {\n  int32 id = 1;\n  string name = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting HttpAdapterHost in NestJS Service (TypeScript)\nDESCRIPTION: Shows how to inject the HttpAdapterHost into a service using constructor injection in TypeScript.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/http-adapter.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CatsService {\n  constructor(private adapterHost: HttpAdapterHost) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Body Parser in Express\nDESCRIPTION: Example of registering a custom text body parser in NestJS Express application\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/raw-body.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.useBodyParser('text');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Indicator (Pre-v11)\nDESCRIPTION: Shows how to implement a custom health indicator for the TerminusModule in NestJS versions prior to v11.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class DogHealthIndicator extends HealthIndicator {\n  constructor(private readonly httpService: HttpService) {\n    super();\n  }\n\n  async isHealthy(key: string) {\n    try {\n      const badboys = await this.getBadboys();\n      const isHealthy = badboys.length === 0;\n\n      const result = this.getStatus(key, isHealthy, {\n        badboys: badboys.length,\n      });\n\n      if (!isHealthy) {\n        throw new HealthCheckError('Dog check failed', result);\n      }\n\n      return result;\n    } catch (error) {\n      const result = this.getStatus(key, isHealthy);\n      throw new HealthCheckError('Dog check failed', result);\n    }\n  }\n\n  private getBadboys() {\n    return firstValueFrom(\n      this.httpService.get<Dog[]>('https://example.com/dog').pipe(\n        map((response) => response.data),\n        map((dogs) => dogs.filter((dog) => dog.state === DogState.BAD_BOY)),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Query Parser in NestJS\nDESCRIPTION: Demonstrates how to configure the Express adapter in NestJS to use the extended query parser for handling complex query parameters.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create<NestExpressApplication>(AppModule);\napp.set('query parser', 'extended');\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify MVC Setup\nDESCRIPTION: TypeScript code to configure Fastify instance with static assets and view engine\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { NestFastifyApplication, FastifyAdapter } from '@nestjs/platform-fastify';\nimport { AppModule } from './app.module';\nimport { join } from 'path';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    new FastifyAdapter(),\n  );\n  app.useStaticAssets({\n    root: join(__dirname, '..', 'public'),\n    prefix: '/public/',\n  });\n  app.setViewEngine({\n    engine: {\n      handlebars: require('handlebars'),\n    },\n    templates: join(__dirname, '..', 'views'),\n  });\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Metadata with @Extensions Decorator in NestJS GraphQL\nDESCRIPTION: Example showing how to use the @Extensions decorator to attach role-based metadata to a password field in a GraphQL schema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Field()\n@Extensions({ role: Role.ADMIN })\npassword: string;\n```\n\n----------------------------------------\n\nTITLE: Installing HMR Dependencies with npm\nDESCRIPTION: Command to install the required packages for implementing Hot Module Replacement in a NestJS application using npm.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save-dev webpack-node-externals run-script-webpack-plugin webpack\n```\n\n----------------------------------------\n\nTITLE: Comments Introspection Example\nDESCRIPTION: Example showing how comments are used for GraphQL field descriptions with and without the CLI plugin.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/cli-plugin.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A list of user's roles\n */\n@Field(() => [String], {\n  description: `A list of user's roles`\n})\nroles: string[];\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A list of user's roles\n */\nroles: string[];\n```\n\n----------------------------------------\n\nTITLE: Handling NATS Status Updates\nDESCRIPTION: Implementation of status monitoring for NATS client connections.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis.client.status.subscribe((status: NatsStatus) => {\n  console.log(status);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting help for specific Nest CLI commands\nDESCRIPTION: Example of how to get detailed help for a specific Nest CLI command, using 'generate' as an example.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nest generate --help\n```\n\n----------------------------------------\n\nTITLE: Configuring ServeStaticModule in NestJS AppModule\nDESCRIPTION: Implementation of ServeStaticModule in the root AppModule. Demonstrates how to import and configure the module with rootPath setting to serve static content from a specified directory.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/serve-static.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client'),\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing ioredis Package for Redis Microservices in NestJS\nDESCRIPTION: Command to install the ioredis package, which is required for building Redis-based microservices in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save ioredis\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS CQRS Module\nDESCRIPTION: Command to install the @nestjs/cqrs package using npm package manager.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/cqrs\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Process Processors in NestJS Bull Module\nDESCRIPTION: Example of configuring Bull queue to run job handlers in separate processes. This approach provides benefits like sandboxed execution, prevention of queue blocking, better CPU utilization, and fewer Redis connections.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { BullModule } from '@nestjs/bull';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'audio',\n      processors: [join(__dirname, 'processor.js')],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Project Root\nDESCRIPTION: Navigates the current shell session into the root directory of a NestJS project. This is a standard operating system command and a necessary prerequisite step before running project-specific commands like installing local dependencies or executing package scripts within the correct context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/scripts.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ cd  /some/project/root/folder\n```\n\n----------------------------------------\n\nTITLE: Using Session in NestJS Route Handler with @Session() Decorator\nDESCRIPTION: Example of accessing and modifying session data within a NestJS route handler using the @Session() decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nfindAll(@Session() session: Record<string, any>) {\n  session.visits = session.visits ? session.visits + 1 : 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Subgraph Dependencies\nDESCRIPTION: Command to install the required Apollo Federation subgraph package\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @apollo/subgraph\n```\n\n----------------------------------------\n\nTITLE: Starting REPL Command\nDESCRIPTION: Terminal command to start the NestJS application in REPL mode using npm.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/repl.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run start -- --entryFile repl\n```\n\n----------------------------------------\n\nTITLE: Transform Decorator Usage Example\nDESCRIPTION: Shows how to use the @Transform decorator to modify the serialization output of a property.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/serialization.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Transform(({ value }) => value.name)\nrole: RoleEntity;\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS CLI and Creating Project\nDESCRIPTION: Commands to install NestJS CLI globally and create a new project\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -g @nestjs/cli\n$ nest new project\n```\n\n----------------------------------------\n\nTITLE: Importing DiscoveryModule in NestJS Application\nDESCRIPTION: Shows how to import the DiscoveryModule into a NestJS module. This setup is required before using the DiscoveryService for dependency injection in your application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/discovery-service.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { DiscoveryModule } from '@nestjs/core';\nimport { ExampleService } from './example.service';\n\n@Module({\n  imports: [DiscoveryModule],\n  providers: [ExampleService],\n})\nexport class ExampleModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Middleware for Role-Based Access Control in NestJS GraphQL\nDESCRIPTION: A field middleware implementation that checks if the user has the required role to access a field by comparing the user's role with the role specified in the field's extensions metadata.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/extensions.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const checkRoleMiddleware: FieldMiddleware = async (\n  ctx: MiddlewareContext,\n  next: NextFn,\n) => {\n  const { info } = ctx;\n  const { extensions } = info.parentType.getFields()[info.fieldName];\n\n  /**\n   * In a real-world application, the \"userRole\" variable\n   * should represent the caller's (user) role (for example, \"ctx.user.role\").\n   */\n  const userRole = Role.USER;\n  if (userRole === extensions.role) {\n    // or just \"return null\" to ignore\n    throw new ForbiddenException(\n      `User does not have sufficient permissions to access \"${info.fieldName}\" field.`,\n    );\n  }\n  return next();\n};\n```\n\n----------------------------------------\n\nTITLE: Using MQTT Record Builder\nDESCRIPTION: Example of using MqttRecordBuilder to configure message options and properties\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/mqtt.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst userProperties = { 'x-version': '1.0.0' };\nconst record = new MqttRecordBuilder(':cat:')\n  .setProperties({ userProperties })\n  .setQoS(1)\n  .build();\nclient.send('replace-emoji', record).subscribe(...);\n```\n\n----------------------------------------\n\nTITLE: Sample User Entity JSON Structure\nDESCRIPTION: Shows an example of a user entity object that might be attached to the request by an authentication layer.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 101,\n  \"firstName\": \"Alan\",\n  \"lastName\": \"Turing\",\n  \"email\": \"alan@email.com\",\n  \"roles\": [\"admin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UserHttpModule with Imported UsersModule in NestJS\nDESCRIPTION: TypeScript code for UserHttpModule, demonstrating how to import and use UsersModule to access TypeORM repositories.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { UsersModule } from './users.module';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  imports: [UsersModule],\n  providers: [UsersService],\n  controllers: [UsersController]\n})\nexport class UserHttpModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing ComplexityPlugin for NestJS GraphQL\nDESCRIPTION: Class implementation of a ComplexityPlugin that monitors and limits GraphQL query complexity. Sets up request listeners and complexity estimators with a maximum complexity threshold of 20.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/complexity.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLSchemaHost } from '@nestjs/graphql';\nimport { Plugin } from '@nestjs/apollo';\nimport {\n  ApolloServerPlugin,\n  BaseContext,\n  GraphQLRequestListener,\n} from '@apollo/server';\nimport { GraphQLError } from 'graphql';\nimport {\n  fieldExtensionsEstimator,\n  getComplexity,\n  simpleEstimator,\n} from 'graphql-query-complexity';\n\n@Plugin()\nexport class ComplexityPlugin implements ApolloServerPlugin {\n  constructor(private gqlSchemaHost: GraphQLSchemaHost) {}\n\n  async requestDidStart(): Promise<GraphQLRequestListener<BaseContext>> {\n    const maxComplexity = 20;\n    const { schema } = this.gqlSchemaHost;\n\n    return {\n      async didResolveOperation({ request, document }) {\n        const complexity = getComplexity({\n          schema,\n          operationName: request.operationName,\n          query: document,\n          variables: request.variables,\n          estimators: [\n            fieldExtensionsEstimator(),\n            simpleEstimator({ defaultComplexity: 1 }),\n          ],\n        });\n        if (complexity > maxComplexity) {\n          throw new GraphQLError(\n            `Query is too complex: ${complexity}. Maximum allowed complexity: ${maxComplexity}`,\n          );\n        }\n        console.log('Query Complexity:', complexity);\n      },\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HttpAdapter Outside Application Context in NestJS\nDESCRIPTION: Demonstrates how to obtain a reference to the HttpAdapter from outside the application context using the getHttpAdapter() method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/http-adapter.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\nconst httpAdapter = app.getHttpAdapter();\n```\n\n----------------------------------------\n\nTITLE: Adding a LIFO Job to a Bull Queue\nDESCRIPTION: Shows how to add a job with the LIFO (Last In First Out) option, which places the job at the right end of the queue to be processed before older jobs.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.audioQueue.add(\n  {\n    foo: 'bar',\n  },\n  { lifo: true },\n);\n```\n\n----------------------------------------\n\nTITLE: Generating NestJS Users Module\nDESCRIPTION: Commands to generate the Users module and service for handling user operations.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nest g module users\n$ nest g service users\n```\n\n----------------------------------------\n\nTITLE: REPL Initialization Output\nDESCRIPTION: Expected console output when REPL is successfully initialized in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/repl.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nLOG [NestFactory] Starting Nest application...\nLOG [InstanceLoader] AppModule dependencies initialized\nLOG REPL initialized\n```\n\n----------------------------------------\n\nTITLE: Installing Cache Dependencies in NestJS\nDESCRIPTION: Command to install the required cache-related packages for NestJS applications.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @nestjs/cache-manager cache-manager\n```\n\n----------------------------------------\n\nTITLE: Using Custom Module Registration Method\nDESCRIPTION: Shows how to use the custom forRoot method for module registration in the application module\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ConfigModule.forRoot({ folder: './config' }),\n    // or alternatively:\n    // ConfigModule.forRootAsync({\n    //   useFactory: () => {\n    //     return {\n    //       folder: './config',\n    //     }\n    //   },\n    //   inject: [...any extra dependencies...]\n    // }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Starting NestJS Application from Compiled Files\nDESCRIPTION: Command to start a NestJS application in production by running the compiled JavaScript files from the dist directory.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ node dist/main.js # Adjust this based on your entry point location\n```\n\n----------------------------------------\n\nTITLE: Enabling Subscriptions with Mercurius Driver in NestJS\nDESCRIPTION: Configures the GraphQL module to enable subscriptions using the Mercurius driver.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<MercuriusDriverConfig>({\n  driver: MercuriusDriver,\n  subscription: true,\n}),\n```\n\n----------------------------------------\n\nTITLE: Exporting TypeOrmModule in UsersModule for NestJS\nDESCRIPTION: TypeScript code showing how to re-export TypeOrmModule from UsersModule to make repositories available in other modules.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  exports: [TypeOrmModule]\n})\nexport class UsersModule {}\n```\n\n----------------------------------------\n\nTITLE: Displaying NestJS Installation Information\nDESCRIPTION: Command to display information about installed nest packages and other helpful system information.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/usages.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ nest info\n```\n\n----------------------------------------\n\nTITLE: Fine-tuning Skipping Rate Limiting on Routes in Controllers - TypeScript\nDESCRIPTION: Illustrates selectively enabling and disabling rate limiting inside a controller decorated with @SkipThrottle. The route method decorated with @SkipThrottle({ default: false }) will have rate limiting enforced despite the surrounding controller having skipping enabled. This allows partial application of throttling behavior within a class where the default state is skipping.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@SkipThrottle()\n@Controller('users')\nexport class UsersController {\n  // Rate limiting is applied to this route.\n  @SkipThrottle({ default: false })\n  dontSkip() {\n    return 'List users work with Rate limiting.';\n  }\n  // This route will skip rate limiting.\n  doSkip() {\n    return 'List users work without Rate limiting.';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MikroOrmModule with default CLI config in TypeScript\nDESCRIPTION: Illustrates the use of MikroOrmModule.forRoot() without parameters when the configuration is provided separately through a mikro-orm.config.ts file. This setup depends on external CLI configurations, which may not be tree-shaking friendly during the build.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    MikroOrmModule.forRoot(),\n  ],\n  ...\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global ValidationPipe in NestJS\nDESCRIPTION: Demonstrates how to set up a global-scoped ValidationPipe in the main bootstrap function of a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe());\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Publishing in NestJS Bootstrap\nDESCRIPTION: Configuration for the main bootstrap file to enable graph publishing using GraphPublisher. Includes conditional logic for CI/CD vs regular application bootstrap and preview mode settings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/ci-cd.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  const shouldPublishGraph = process.env.PUBLISH_GRAPH === \"true\";\n\n  const app = await NestFactory.create(AppModule, {\n    snapshot: true,\n    preview: shouldPublishGraph,\n  });\n\n  if (shouldPublishGraph) {\n    await app.init();\n\n    const publishOptions = { ... } // NOTE: this options object will vary depending on the CI/CD provider you're using\n    const graphPublisher = new GraphPublisher(app);\n    await graphPublisher.publish(publishOptions);\n\n    await app.close();\n  } else {\n    await app.listen(process.env.PORT ?? 3000);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New NestJS Project\nDESCRIPTION: Command to create a new NestJS project in standard mode, which creates a new folder with a minimal base-level application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nest new my-project\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in NestJS Route Handler with Fastify\nDESCRIPTION: This snippet shows how to read cookies from the request object in a NestJS route handler using Fastify.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nfindAll(@Req() request: FastifyRequest) {\n  console.log(request.cookies); // or \"request.cookies['cookieKey']\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize in the AppModule\nDESCRIPTION: Setting up the Sequelize connection in the root AppModule using SequelizeModule.forRoot() with MySQL configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\n\n@Module({\n  imports: [\n    SequelizeModule.forRoot({\n      dialect: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'root',\n      database: 'test',\n      models: [],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing and Deploying with Mau CLI for NestJS\nDESCRIPTION: Commands to install the Mau CLI globally and deploy a NestJS application to AWS using Mau, the official platform for NestJS deployments.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @nestjs/mau\n$ mau deploy\n```\n\n----------------------------------------\n\nTITLE: Consuming SSE Events in Client-Side JavaScript\nDESCRIPTION: This snippet shows how to create an EventSource instance in a client-side application to consume Server-Sent Events. It establishes a connection to the SSE endpoint and logs incoming messages.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/server-sent-events.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventSource = new EventSource('/sse');\neventSource.onmessage = ({ data }) => {\n  console.log('New message', JSON.parse(data));\n};\n```\n\n----------------------------------------\n\nTITLE: Building NestJS Application for Production\nDESCRIPTION: Command to build a NestJS application, compiling TypeScript code into JavaScript and generating a dist directory with compiled files.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Registering a Plugin Provider in NestJS Module\nDESCRIPTION: Shows how to register a custom GraphQL plugin as a provider within a NestJS module. Once registered, NestJS will automatically instantiate the plugin and apply it to the Apollo Server.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  providers: [LoggingPlugin],\n})\nexport class CommonModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in Vitest for TypeScript\nDESCRIPTION: This snippet demonstrates how to configure path aliases in Vitest to resolve TypeScript imports correctly. It uses the 'resolve.alias' configuration in the vitest.config.ts file to map 'src' to the project's source directory.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolve } from 'path';\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      'src': resolve(__dirname, './src'),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Model with Manual Decorators\nDESCRIPTION: Example showing how to manually define a GraphQL object type with field decorators for an Author model.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/cli-plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@ObjectType()\nexport class Author {\n  @Field(type => ID)\n  id: number;\n\n  @Field({ nullable: true })\n  firstName?: string;\n\n  @Field({ nullable: true })\n  lastName?: string;\n\n  @Field(type => [Post])\n  posts: Post[];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing BullMQ Dependencies\nDESCRIPTION: Command to install the required BullMQ packages and dependencies for NestJS queue implementation\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/bullmq bullmq\n```\n\n----------------------------------------\n\nTITLE: Installing TypeORM Dependencies\nDESCRIPTION: Command to install required TypeORM and MySQL dependencies for the project.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-typeorm.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save typeorm mysql2\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware in AppModule\nDESCRIPTION: Demonstrates how to apply middleware to specific routes using the configure() method in the AppModule class. Shows implementation with basic route configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';\nimport { LoggerMiddleware } from './common/middleware/logger.middleware';\nimport { CatsModule } from './cats/cats.module';\n\n@Module({\n  imports: [CatsModule],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes('cats');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Module-level Global Pipe Configuration in NestJS\nDESCRIPTION: Shows how to configure a global pipe within a module context to enable dependency injection support.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { APP_PIPE } from '@nestjs/core';\n\n@Module({\n  providers: [\n    {\n      provide: APP_PIPE,\n      useClass: ValidationPipe,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in NestJS Response with Fastify\nDESCRIPTION: This code demonstrates how to attach a cookie to an outgoing response in a NestJS route handler using Fastify.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nfindAll(@Res({ passthrough: true }) response: FastifyReply) {\n  response.setCookie('key', 'value')\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sequelize Dependencies for NestJS\nDESCRIPTION: Command to install necessary Sequelize dependencies including MySQL driver and type definitions for a NestJS project.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/sequelize sequelize sequelize-typescript mysql2\n$ npm install --save-dev @types/sequelize\n```\n\n----------------------------------------\n\nTITLE: Rebasing and Force-Pushing NestJS Changes\nDESCRIPTION: Commands to rebase your branch against master and force-push to update your pull request after making suggested changes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase master -i\ngit push -f\n```\n\n----------------------------------------\n\nTITLE: Running a NestJS Application\nDESCRIPTION: Commands to start a NestJS application. The first command starts the application normally, while the second starts it in development mode with file watching enabled.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/first-steps.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: User Class Definition (TypeScript)\nDESCRIPTION: This code shows the expected structure of the `User` class. It's crucial for the `RolesGuard` to function correctly, as it accesses the `roles` property to determine the user's roles.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n  // ...other properties\n  roles: Role[];\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Template Rendering Controller\nDESCRIPTION: Controller implementation for dynamic template rendering using @Res decorator\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Get, Controller, Res, Render } from '@nestjs/common';\nimport { Response } from 'express';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private appService: AppService) {}\n\n  @Get()\n  root(@Res() res: Response) {\n    return res.render(\n      this.appService.getViewName(),\n      { message: 'Hello world!' },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS in NestJS using create() method options\nDESCRIPTION: This snippet shows an alternative way to enable CORS in a NestJS application by passing a configuration object to the create() method. It sets the cors property to true, enabling CORS with default settings, and sets up the application to listen on a specified port.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/cors.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule, { cors: true });\nawait app.listen(process.env.PORT ?? 3000);\n```\n\n----------------------------------------\n\nTITLE: Initializing REPL in NestJS Application\nDESCRIPTION: Basic setup code for enabling REPL in a NestJS application. Creates a new repl.ts file that imports necessary dependencies and bootstraps the REPL feature.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/repl.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { repl } from '@nestjs/core';\nimport { AppModule } from './src/app.module';\n\nasync function bootstrap() {\n  await repl(AppModule);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Resource Generation Command\nDESCRIPTION: Example of generating a GraphQL resource using the NestJS CLI with output showing created files\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/crud-generator.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nest g resource users\n\n> ? What transport layer do you use? GraphQL (code first)\n> ? Would you like to generate CRUD entry points? Yes\n> CREATE src/users/users.module.ts (224 bytes)\n> CREATE src/users/users.resolver.spec.ts (525 bytes)\n> CREATE src/users/users.resolver.ts (1109 bytes)\n> CREATE src/users/users.service.spec.ts (453 bytes)\n> CREATE src/users/users.service.ts (625 bytes)\n> CREATE src/users/dto/create-user.input.ts (195 bytes)\n> CREATE src/users/dto/update-user.input.ts (281 bytes)\n> CREATE src/users/entities/user.entity.ts (187 bytes)\n> UPDATE src/app.module.ts (312 bytes)\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Query Complexity Package\nDESCRIPTION: Command to install the graphql-query-complexity package as a project dependency\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/complexity.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save graphql-query-complexity\n```\n\n----------------------------------------\n\nTITLE: Implementing Version-Neutral Controller in NestJS\nDESCRIPTION: This snippet demonstrates how to create a version-neutral controller in NestJS using the VERSION_NEUTRAL symbol. It allows the controller to handle requests regardless of the version specified.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, VERSION_NEUTRAL } from '@nestjs/common';\n\n@Controller({\n  version: VERSION_NEUTRAL,\n})\nexport class CatsController {\n  @Get('cats')\n  findAll(): string {\n    return 'This action returns all cats regardless of version';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a RolesGuard (TypeScript)\nDESCRIPTION: This code implements a `RolesGuard` that implements the `CanActivate` interface. It retrieves the required roles from the route's metadata using the `Reflector` class and checks if the user's roles include any of the required roles. It assumes that `request.user` contains the user's role information.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring publishOptions for Other CI/CD Tools in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure publishOptions for Nest Devtools when using other CI/CD tools. It uses generic environment variables that can be adapted to different CI/CD providers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/ci-cd.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst publishOptions = {\n  apiKey: process.env.DEVTOOLS_API_KEY,\n  repository: process.env.CI_PROJECT_NAME,\n  owner: process.env.CI_PROJECT_ROOT_NAMESPACE,\n  sha: process.env.CI_COMMIT_SHA,\n  target: process.env.CI_MERGE_REQUEST_DIFF_BASE_SHA,\n  trigger: process.env.CI_MERGE_REQUEST_DIFF_BASE_SHA ? 'pull' : 'push',\n  branch: process.env.CI_COMMIT_BRANCH ?? process.env.CI_MERGE_REQUEST_SOURCE_BRANCH_NAME,\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom GraphQL Directive in NestJS Module Configuration\nDESCRIPTION: This code demonstrates how to declare a custom directive in the GraphQLModule configuration, including the transformer and directive definition.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/directives.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot({\n  // ...,\n  transformSchema: schema => upperDirectiveTransformer(schema, 'upper'),\n  buildSchemaOptions: {\n    directives: [\n      new GraphQLDirective({\n        name: 'upper',\n        locations: [DirectiveLocation.FIELD_DEFINITION],\n      }),\n    ],\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Customizing Content Type and Disposition with StreamableFile in NestJS\nDESCRIPTION: This snippet demonstrates how to customize the content type and disposition when streaming a file using StreamableFile in a NestJS controller.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/streaming-files.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, StreamableFile, Res } from '@nestjs/common';\nimport { createReadStream } from 'fs';\nimport { join } from 'path';\nimport type { Response } from 'express';\n\n@Controller('file')\nexport class FileController {\n  @Get()\n  getFile(): StreamableFile {\n    const file = createReadStream(join(process.cwd(), 'package.json'));\n    return new StreamableFile(file, {\n      type: 'application/json',\n      disposition: 'attachment; filename=\"package.json\"',\n    });\n  }\n\n  @Get()\n  getFileChangingResponseObjDirectly(@Res({ passthrough: true }) res: Response): StreamableFile {\n    const file = createReadStream(join(process.cwd(), 'package.json'));\n    res.set({\n      'Content-Type': 'application/json',\n      'Content-Disposition': 'attachment; filename=\"package.json\"',\n    });\n    return new StreamableFile(file);\n  }\n\n  @Get()\n  @Header('Content-Type', 'application/json')\n  @Header('Content-Disposition', 'attachment; filename=\"package.json\"')\n  getFileUsingStaticValues(): StreamableFile {\n    const file = createReadStream(join(process.cwd(), 'package.json'));\n    return new StreamableFile(file);\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Running Initial Migration\nDESCRIPTION: Command to generate and run the initial database migration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Adding a Library to NestJS Project\nDESCRIPTION: Command for importing a library packaged as a nest library and running its install schematic with the library name as an argument.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/usages.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ nest add <name> [options]\n```\n\n----------------------------------------\n\nTITLE: Using @SkipThrottle Decorator to Exclude Routes or Controllers - TypeScript\nDESCRIPTION: Demonstrates the use of the @SkipThrottle decorator to disable rate limiting on entire controllers or specific routes. It optionally accepts an object to configure skipping per named throttler set. By default, applying @SkipThrottle() without parameters disables throttling entirely for the decorated target, allowing exceptions where selective rate limiting control is necessary.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@SkipThrottle()\n@Controller('users')\nexport class UsersController {}\n```\n\n----------------------------------------\n\nTITLE: Using CheckPolicies Decorator with Inline Function Handler - NestJS - TypeScript\nDESCRIPTION: Demonstrates usage of the PoliciesGuard and CheckPolicies decorator on a route handler by passing a functional policy handler as an inline function. Assumes that AppAbility, Action, and Article are properly imported and set up in context. The handler checks whether the user can perform a 'Read' action on Article entities, delegating authorization logic to CASL abilities.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Get()\n@UseGuards(PoliciesGuard)\n@CheckPolicies((ability: AppAbility) => ability.can(Action.Read, Article))\nfindAll() {\n  return this.articlesService.findAll();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Handlebars Template Engine\nDESCRIPTION: Command to install the Handlebars template engine for view rendering\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save hbs\n```\n\n----------------------------------------\n\nTITLE: Validating and Transforming Path Parameters with ValidationPipe (TypeScript)\nDESCRIPTION: This snippet illustrates automatic conversion of primitive path parameters by leveraging ValidationPipe, which transforms incoming string values into expected types annotated in the method signature (e.g., converting path parameter id from string to number). The usage demonstrates type inference and run-time validation of RESTful parameters. Prerequisites: ValidationPipe enabled, proper parameter type annotation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':id')\nfindOne(@Param('id') id: number) {\n  console.log(typeof id === 'number'); // true\n  return 'This action returns a user';\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ConfigModule in Feature Module\nDESCRIPTION: Shows how to import ConfigModule into a feature module to enable configuration access\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [ConfigModule],\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Base DTO with Required Fields in TypeScript\nDESCRIPTION: Defines a CreateCatDto class with required name, age and breed properties using @ApiProperty decorators from @nestjs/swagger.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/mapped-types.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateCatDto {\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty()\n  age: number;\n\n  @ApiProperty()\n  breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with Compodoc for Nest.js Project\nDESCRIPTION: This command generates project documentation using Compodoc. It requires npm 6 for npx support. The command specifies the tsconfig.json file for TypeScript configuration and uses the -s flag to serve the generated documentation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/documentation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @compodoc/compodoc -p tsconfig.json -s\n```\n\n----------------------------------------\n\nTITLE: Installing SWC Loader for Webpack in Monorepo\nDESCRIPTION: Command to install swc-loader package for using SWC with Webpack in a monorepo setup.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save-dev swc-loader\n```\n\n----------------------------------------\n\nTITLE: Auto-generated GraphQL Types in TypeScript\nDESCRIPTION: This snippet shows the auto-generated TypeScript classes for GraphQL types. These classes are created based on the SDL schema and can be used for type-safe operations in the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport (class Author {\n  id: number;\n  firstName?: string;\n  lastName?: string;\n  posts?: Post[];\n})\nexport class Post {\n  id: number;\n  title: string;\n  votes?: number;\n}\n\nexport abstract class IQuery {\n  abstract author(id: number): Author | Promise<Author>;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Registration of BullMQ Components in NestJS\nDESCRIPTION: This snippet demonstrates how to manually register BullMQ components in NestJS. It shows how to enable manual registration in the BullModule configuration and how to use the BullRegistrar to register components.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.forRoot({\n  extraOptions: {\n    manualRegistration: true,\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport { BullRegistrar } from '@nestjs/bullmq';\n\n@Injectable()\nexport class AudioService implements OnModuleInit {\n  constructor(private bullRegistrar: BullRegistrar) {}\n\n  onModuleInit() {\n    if (yourConditionHere) {\n      this.bullRegistrar.register();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for HMR in NestJS with CLI\nDESCRIPTION: Webpack configuration for enabling Hot Module Replacement in a NestJS application when using the Nest CLI. This configuration includes the necessary plugins and externals setup.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nodeExternals = require('webpack-node-externals');\nconst { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');\n\nmodule.exports = function (options, webpack) {\n  return {\n    ...options,\n    entry: ['webpack/hot/poll?100', options.entry],\n    externals: [\n      nodeExternals({\n        allowlist: ['webpack/hot/poll?100'],\n      }),\n    ],\n    plugins: [\n      ...options.plugins,\n      new webpack.HotModuleReplacementPlugin(),\n      new webpack.WatchIgnorePlugin({\n        paths: [/\\.js$/, /\\.d\\.ts$/],\n      }),\n      new RunScriptWebpackPlugin({ name: options.output.filename, autoRestart: false }),\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Enum Type in GraphQL Field Definition\nDESCRIPTION: Shows how to reference a registered enum type in a GraphQL object field definition using the @Field decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Field(type => AllowedColor)\nfavoriteColor: AllowedColor;\n```\n\n----------------------------------------\n\nTITLE: Console Logger Output Format\nDESCRIPTION: Example of the default console logger output format with context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n[Nest] 19096   - 12/08/2019, 7:12:59 AM   [NestFactory] Starting Nest application...\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncLocalStorage Middleware in NestJS AppModule\nDESCRIPTION: This code shows how to set up middleware in the AppModule to wrap each request with AsyncLocalStorage. It injects the AsyncLocalStorage instance and configures a middleware to populate the store with user ID from request headers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/async-local-storage.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [AlsModule],\n  providers: [CatsService],\n  controllers: [CatsController],\n})\nexport class AppModule implements NestModule {\n  constructor(\n    private readonly als: AsyncLocalStorage\n  ) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply((req, res, next) => {\n        const store = {\n          userId: req.headers['x-user-id'],\n        };\n        this.als.run(store, () => next());\n      })\n      .forRoutes('*path');\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n@Module({\n  imports: [AlsModule],\n  providers: [CatsService],\n  controllers: [CatsController],\n})\n@Dependencies(AsyncLocalStorage)\nexport class AppModule {\n  constructor(als) {\n    this.als = als\n  }\n\n  configure(consumer) {\n    consumer\n      .apply((req, res, next) => {\n        const store = {\n          userId: req.headers['x-user-id'],\n        };\n        this.als.run(store, () => next());\n      })\n      .forRoutes('*path');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CASL Actions Enum in TypeScript\nDESCRIPTION: Defines an `Action` enum representing possible operations (Manage, Create, Read, Update, Delete) that can be performed on entities. This enum is used by CASL for defining and checking permissions. The `Manage` value is a special CASL keyword representing 'any' action.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Action {\n  Manage = 'manage',\n  Create = 'create',\n  Read = 'read',\n  Update = 'update',\n  Delete = 'delete',\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Single Mongoose Subdocument in Parent Schema\nDESCRIPTION: Demonstrates defining a parent schema (`Person`) that embeds a single instance of another schema (`Name`) as a property using the `@Prop` decorator. Includes type overrides for proper TypeScript typing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n@@filename(person.schema)\n@Schema()\nexport class Person {\n  @Prop(NameSchema)\n  name: Name;\n}\n\nexport const PersonSchema = SchemaFactory.createForClass(Person);\n\nexport type PersonDocumentOverride = {\n  name: Types.Subdocument<Types.ObjectId> & Name;\n};\n\nexport type PersonDocument = HydratedDocument<Person, PersonDocumentOverride>;\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Graph Publishing\nDESCRIPTION: GitHub Actions workflow configuration for publishing NestJS application graphs on pull requests and push events to master branch. Includes environment setup and dependency installation steps.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/ci-cd.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Devtools\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  publish:\n    if: github.actor!= 'dependabot[bot]'\n    name: Publish graph\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Setup Environment (PR)\n        if: {{ '${{' }} github.event_name == 'pull_request' {{ '}}' }}\n        shell: bash\n        run: |\n          echo \"COMMIT_SHA={{ '${{' }} github.event.pull_request.head.sha {{ '}}' }}\" >>${GITHUB_ENV}\n      - name: Setup Environment (Push)\n        if: {{ '${{' }} github.event_name == 'push' {{ '}}' }}\n        shell: bash\n        run: |\n          echo \"COMMIT_SHA=${GITHUB_SHA}\" >> ${GITHUB_ENV}\n      - name: Publish\n        run: PUBLISH_GRAPH=true npm run start\n        env:\n          DEVTOOLS_API_KEY: CHANGE_THIS_TO_YOUR_API_KEY\n          REPOSITORY_NAME: {{ '${{' }} github.event.repository.name {{ '}}' }}\n          BRANCH_NAME: {{ '${{' }} github.head_ref || github.ref_name {{ '}}' }}\n          TARGET_SHA: {{ '${{' }} github.event.pull_request.base.sha {{ '}}' }}\n```\n\n----------------------------------------\n\nTITLE: Configuring nest-cli.json for Proto Files\nDESCRIPTION: Configuration in nest-cli.json to ensure .proto files are automatically copied to the dist folder during build and watched for changes during development.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"assets\": [\"**/*.proto\"],\n    \"watchAssets\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Force Close Connections in NestJS Application\nDESCRIPTION: This snippet demonstrates how to enable the forceCloseConnections option when creating a NestJS application in the main.ts file. This setting forces the application to exit without waiting for ongoing keep-alive connections to end, which is useful during development or when shutdown hooks are enabled.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/keep-alive-connections.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    forceCloseConnections: true,\n  });\n  await app.listen(process.env.PORT ?? 3000);\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS Testing Package\nDESCRIPTION: Command to install the @nestjs/testing package as a dev dependency for NestJS testing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save-dev @nestjs/testing\n```\n\n----------------------------------------\n\nTITLE: Configuring NATS Record Headers\nDESCRIPTION: Example of setting custom headers in NATS messages using NatsRecordBuilder.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as nats from 'nats';\n\nconst headers = nats.headers();\nheaders.set('x-version', '1.0.0');\n\nconst record = new NatsRecordBuilder(':cat:').setHeaders(headers).build();\nthis.client.send('replace-emoji', record).subscribe(...);\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription Handler in NestJS (Schema-First Approach)\nDESCRIPTION: Demonstrates how to create a subscription handler using the schema-first approach in NestJS. This example shows a basic subscription for adding comments.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst pubSub = new PubSub();\n\n@Resolver('Author')\nexport class AuthorResolver {\n  // ...\n  @Subscription()\n  commentAdded() {\n    return pubSub.asyncIterableIterator('commentAdded');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom ParseIntPipe Configuration in NestJS\nDESCRIPTION: Shows how to instantiate ParseIntPipe with custom error handling options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':id')\nasync findOne(\n  @Param('id', new ParseIntPipe({ errorHttpStatusCode: HttpStatus.NOT_ACCEPTABLE }))\n  id: number,\n) {\n  return this.catsService.findOne(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Throttling Policies with ThrottlerModule - TypeScript\nDESCRIPTION: Shows how to define multiple rate limiting policies in the ThrottlerModule by passing an array of named throttler objects. Each object includes unique 'name', 'ttl', and 'limit' properties, enabling distinct rate limiting rules which can be referenced individually with decorators such as @Throttle and @SkipThrottle for fine-grained control.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ThrottlerModule.forRoot([\n      {\n        name: 'short',\n        ttl: 1000,\n        limit: 3,\n      },\n      {\n        name: 'medium',\n        ttl: 10000,\n        limit: 20\n      },\n      {\n        name: 'long',\n        ttl: 60000,\n        limit: 100\n      }\n    ]),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Exporting Serialized Graph\nDESCRIPTION: Code to export the application's serialized graph data to a JSON file after initialization.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait app.listen(process.env.PORT ?? 3000); // OR await app.init()\nfs.writeFileSync('./graph.json', app.get(SerializedGraph).toString());\n```\n\n----------------------------------------\n\nTITLE: Reading Metadata in gRPC Stream Call Handler in NestJS\nDESCRIPTION: Shows how to read metadata in a gRPC stream call handler decorated with @GrpcStreamCall. This example demonstrates listening for the 'metadata' event on the request stream.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nrequestStream.on('metadata', (metadata: Metadata) => {\n  const meta = metadata.get('X-Meta');\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Provider with Strict Context Checking in NestJS\nDESCRIPTION: Demonstrates retrieving a provider with strict context checking by using select() and get() methods together. This navigates through specific modules to obtain a particular instance from the selected context.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/application-context.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasksService = app.select(TasksModule).get(TasksService, { strict: true });\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL JSON Type Package\nDESCRIPTION: Command to install the graphql-type-json package for JSON scalar support.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save graphql-type-json\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Prefix in NestJS\nDESCRIPTION: This code demonstrates how to set a custom prefix for each log message in NestJS. It uses the ConsoleLogger object with the prefix attribute set to a custom value.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule, {\n  logger: new ConsoleLogger({\n    prefix: 'MyApp', // Default is \"Nest\"\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Decorator to a Service\nDESCRIPTION: Demonstrates how to apply a custom metadata decorator to a NestJS service. The example shows tagging a service with an 'experimental' feature flag.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/discovery-service.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { FeatureFlag } from './custom-metadata.decorator';\n\n@Injectable()\n@FeatureFlag('experimental')\nexport class CustomService {}\n```\n\n----------------------------------------\n\nTITLE: Injecting Reflector in NestJS Guard\nDESCRIPTION: Demonstrates how to inject the Reflector class into a guard to access custom metadata. This is necessary for reading decorator metadata in guards or interceptors.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class RolesGuard {\n  constructor(private reflector: Reflector) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Gateway with Namespace\nDESCRIPTION: Example of setting up a WebSocket gateway with a specific port and namespace configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/gateways.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@WebSocketGateway(80, { namespace: 'events' })\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to NestJS Repository\nDESCRIPTION: Command to commit changes with a descriptive message following NestJS commit message conventions. The -a option automatically adds and removes edited files.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: Generating a Salt with bcrypt in NestJS\nDESCRIPTION: This snippet shows how to generate a salt using the genSalt function from the bcrypt package in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/encryption-hashing.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst salt = await bcrypt.genSalt();\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Optimizing Serverless NestJS Applications\nDESCRIPTION: Custom webpack configuration for bundling NestJS applications into a single file, including all dependencies from node_modules. This configuration ignores lazy imports for microservices and websockets modules to optimize the bundle size.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (options, webpack) => {\n  const lazyImports = [\n    '@nestjs/microservices/microservices-module',\n    '@nestjs/websockets/socket-module',\n  ];\n\n  return {\n    ...options,\n    externals: [],\n    plugins: [\n      ...options.plugins,\n      new webpack.IgnorePlugin({\n        checkResource(resource) {\n          if (lazyImports.includes(resource)) {\n            try {\n              require.resolve(resource);\n            } catch (err) {\n              return true;\n            }\n          }\n          return false;\n        },\n      }),\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Body Parser in Fastify\nDESCRIPTION: Example of registering a custom text/plain body parser in NestJS Fastify application\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/raw-body.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.useBodyParser('text/plain');\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigService with Hard-coded Options\nDESCRIPTION: Initial implementation of ConfigService showing configuration file loading with hard-coded options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport * as dotenv from 'dotenv';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { EnvConfig } from './interfaces';\n\n@Injectable()\nexport class ConfigService {\n  private readonly envConfig: EnvConfig;\n\n  constructor() {\n    const options = { folder: './config' };\n\n    const filePath = `${process.env.NODE_ENV || 'development'}.env`;\n    const envFile = path.resolve(__dirname, '../../', options.folder, filePath);\n    this.envConfig = dotenv.parse(fs.readFileSync(envFile));\n  }\n\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Timeout in NestJS\nDESCRIPTION: Demonstrates how to delete a named timeout using the SchedulerRegistry's deleteTimeout method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteTimeout(name: string) {\n  this.schedulerRegistry.deleteTimeout(name);\n  this.logger.warn(`Timeout ${name} deleted!`);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Express MVC Setup\nDESCRIPTION: TypeScript code to configure Express instance with static assets, views directory, and template engine\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { NestExpressApplication } from '@nestjs/platform-express';\nimport { join } from 'path';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestExpressApplication>(\n    AppModule,\n  );\n\n  app.useStaticAssets(join(__dirname, '..', 'public'));\n  app.setBaseViewsDir(join(__dirname, '..', 'views'));\n  app.setViewEngine('hbs');\n\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Defining a DTO Class with Swagger CLI Plugin in TypeScript\nDESCRIPTION: Simplified CreateUserDto class definition when using the Swagger CLI plugin. The plugin automatically generates @ApiProperty decorators based on TypeScript types.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CreateUserDto {\n  email: string;\n  password: string;\n  roles: RoleEnum[] = [];\n  isEnabled?: boolean = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Generation with Options\nDESCRIPTION: Shows how to generate a schema with additional configuration options. Includes skipCheck for validation control and orphanedTypes for including unreferenced types.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/schema-generator.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = await gqlSchemaFactory.create([RecipesResolver], {\n  skipCheck: true,\n  orphanedTypes: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Using PickType for Selected Properties in TypeScript\nDESCRIPTION: Demonstrates using PickType to create a new DTO with only selected properties from the original DTO.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/mapped-types.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UpdateCatAgeDto extends PickType(CreateCatDto, ['age'] as const) {}\n```\n\n----------------------------------------\n\nTITLE: Path Mapping Configuration for Libraries in tsconfig.json\nDESCRIPTION: Configuration in the global tsconfig.json file showing the path mapping for a library. This enables importing libraries using the specified alias prefix (@app) without needing to use relative paths.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/libraries.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"paths\": {\n    \"@app/my-library\": [\n        \"libs/my-library/src\"\n    ],\n    \"@app/my-library/*\": [\n        \"libs/my-library/src/*\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: ExecutionContext Interface Definition\nDESCRIPTION: Shows the ExecutionContext interface that extends ArgumentsHost, providing methods to get the controller class and handler method information.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ExecutionContext extends ArgumentsHost {\n  /**\n   * Returns the type of the controller class which the current handler belongs to.\n   */\n  getClass<T>(): Type<T>;\n  /**\n   * Returns a reference to the handler (method) that will be invoked next in the\n   * request pipeline.\n   */\n  getHandler(): Function;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting the CONTEXT Object in GraphQL Applications\nDESCRIPTION: Shows how to access the request context in a GraphQL application by injecting the CONTEXT token instead of REQUEST. This handles the platform differences for GraphQL applications.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Scope, Inject } from '@nestjs/common';\nimport { CONTEXT } from '@nestjs/graphql';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class CatsService {\n  constructor(@Inject(CONTEXT) private context) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Class Inheritance for GraphQL Types\nDESCRIPTION: These snippets demonstrate how to use TypeScript class inheritance to create base and derived classes for GraphQL types, including @ArgsType() and @ObjectType().\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@ArgsType()\nclass PaginationArgs {\n  @Field(() => Int)\n  offset: number = 0;\n\n  @Field(() => Int)\n  limit: number = 10;\n}\n\n@ArgsType()\nclass GetAuthorArgs extends PaginationArgs {\n  @Field({ nullable: true })\n  firstName?: string;\n\n  @Field({ defaultValue: '' })\n  @MinLength(3)\n  lastName: string;\n}\n\n@ObjectType()\nclass Character {\n  @Field(() => Int)\n  id: number;\n\n  @Field()\n  name: string;\n}\n\n@ObjectType()\nclass Warrior extends Character {\n  @Field()\n  level: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helmet for Swagger UI Compatibility\nDESCRIPTION: TypeScript code to configure Helmet's Content Security Policy (CSP) to allow Swagger UI to function properly when using Fastify.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.register(helmet, {\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [`'self'`],\n      styleSrc: [`'self'`, `'unsafe-inline'`],\n      imgSrc: [`'self'`, 'data:', 'validator.swagger.io'],\n      scriptSrc: [`'self'`, `https: 'unsafe-inline'`],\n    },\n  },\n});\n\n// If you are not going to use CSP at all, you can use this:\napp.register(helmet, {\n  contentSecurityPolicy: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ClsModule in NestJS AppModule\nDESCRIPTION: This code demonstrates how to set up the ClsModule from the nestjs-cls package in the root AppModule. It configures the module to automatically mount middleware and set up default store values based on request headers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/async-local-storage.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ClsModule.forRoot({\n      middleware: {\n        mount: true,\n        setup: (cls, req) => {\n          cls.set('userId', req.headers['x-user-id']);\n        },\n      },\n    }),\n  ],\n  providers: [CatsService],\n  controllers: [CatsController],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Binding ThrottlerGuard Globally in NestJS - TypeScript\nDESCRIPTION: Demonstrates how to bind the ThrottlerGuard globally by providing it in the providers array, using the APP_GUARD token. This ensures that rate limiting is enforced across all routes guarded within the module without needing to individually apply the guard to controllers or routes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  provide: APP_GUARD,\n  useClass: ThrottlerGuard\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Store in Cache Module (Old Version)\nDESCRIPTION: Shows the deprecated way of configuring a Redis store for the CacheModule in NestJS versions prior to v11.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Old version - no longer supported\nCacheModule.registerAsync({\n  useFactory: async () => {\n    const store = await redisStore({\n      socket: {\n        host: 'localhost',\n        port: 6379,\n      },\n    });\n\n    return {\n      store,\n    };\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Transport Strategy in NestJS\nDESCRIPTION: Custom implementation of a Google Cloud Pub/Sub server that extends the Server class and implements the CustomTransportStrategy interface. This provides the foundation for creating a custom transporter in NestJS microservices.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomTransportStrategy, Server } from '@nestjs/microservices';\n\nclass GoogleCloudPubSubServer\n  extends Server\n  implements CustomTransportStrategy\n{\n  /**\n   * Triggered when you run \"app.listen()\".\n   */\n  listen(callback: () => void) {\n    callback();\n  }\n\n  /**\n   * Triggered on application shutdown.\n   */\n  close() {}\n\n  /**\n   * You can ignore this method if you don't want transporter users\n   * to be able to register event listeners. Most custom implementations\n   * will not need this.\n   */\n  on(event: string, callback: Function) {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * You can ignore this method if you don't want transporter users\n   * to be able to retrieve the underlying native server. Most custom implementations\n   * will not need this.\n   */\n  unwrap<T = never>(): T {\n    throw new Error('Method not implemented.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema-First Union Type Definition in GraphQL SDL\nDESCRIPTION: Defines a union type using GraphQL SDL in the schema-first approach. This defines Author and Book types and creates a ResultUnion that can be either type.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  name: String!\n}\n\ntype Book {\n  title: String!\n}\n\nunion ResultUnion = Author | Book\n```\n\n----------------------------------------\n\nTITLE: Streaming File Using Pipe Method in NestJS Controller\nDESCRIPTION: This snippet demonstrates how to stream a file directly using the pipe method in a NestJS controller. However, this approach loses access to post-controller interceptor logic.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/streaming-files.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('file')\nexport class FileController {\n  @Get()\n  getFile(@Res() res: Response) {\n    const file = createReadStream(join(process.cwd(), 'package.json'));\n    file.pipe(res);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Server Listen Event in NestJS\nDESCRIPTION: Shows how to subscribe to the listen$ stream to execute an action when the server starts listening for incoming requests.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/http-adapter.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis.httpAdapterHost.listen$.subscribe(() =>\n  console.log('HTTP server is listening'),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring NestJS Application for Devtools\nDESCRIPTION: Bootstrap configuration to enable application snapshot collection for Devtools visualization by setting the snapshot flag to true.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    snapshot: true,\n  });\n  await app.listen(process.env.PORT ?? 3000);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HMR in NestJS Entry File\nDESCRIPTION: Modifications to the NestJS application entry file (main.ts) to enable Hot Module Replacement. This includes setting up the bootstrap function to handle HMR events.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const module: any;\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(process.env.PORT ?? 3000);\n\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() => app.close());\n  }\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Injecting CaslAbilityFactory in a NestJS Class (TypeScript)\nDESCRIPTION: Demonstrates standard constructor injection in NestJS to provide an instance of `CaslAbilityFactory`. For this injection to work, the module containing the consuming class must import the `CaslModule` where `CaslAbilityFactory` is exported.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private caslAbilityFactory: CaslAbilityFactory) {}\n```\n\n----------------------------------------\n\nTITLE: Customizing Subscriptions Server with subscriptions-transport-ws in NestJS\nDESCRIPTION: Configures the GraphQL module to use a custom path for subscriptions using the subscriptions-transport-ws package.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot<ApolloDriverConfig>({\n  driver: ApolloDriver,\n  subscriptions: {\n    'subscriptions-transport-ws': {\n      path: '/graphql'\n    },\n  }\n}),\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Client Proxy for NestJS Microservices\nDESCRIPTION: This snippet shows the basic structure of a custom client proxy class extending ClientProxy. It includes placeholder methods for connecting, closing, dispatching events, and publishing messages.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientProxy, ReadPacket, WritePacket } from '@nestjs/microservices';\n\nclass GoogleCloudPubSubClient extends ClientProxy {\n  async connect(): Promise<any> {}\n  async close() {}\n  async dispatchEvent(packet: ReadPacket<any>): Promise<any> {}\n  publish(\n    packet: ReadPacket<any>,\n    callback: (packet: WritePacket<any>) => void,\n  ): Function {}\n  unwrap<T = never>(): T {\n    throw new Error('Method not implemented.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Necord and Discord.js dependencies\nDESCRIPTION: Command to install Necord and its dependency Discord.js using npm.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install necord discord.js\n```\n\n----------------------------------------\n\nTITLE: Generating Health Controller\nDESCRIPTION: CLI command to generate a new controller for health checks\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nest g controller health\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in NestJS Route Handler with Express\nDESCRIPTION: This snippet shows how to read cookies from the request object in a NestJS route handler using Express.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nfindAll(@Req() request: Request) {\n  console.log(request.cookies); // or \"request.cookies['cookieKey']\"\n  // or console.log(request.signedCookies);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Connections with Sequelize in NestJS\nDESCRIPTION: Illustrates how to set up multiple database connections using Sequelize in a NestJS application. This is useful for projects that require data to be stored across different databases.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultOptions = {\n  dialect: 'postgres',\n  port: 5432,\n  username: 'user',\n  password: 'password',\n  database: 'db',\n  synchronize: true,\n};\n\n@Module({\n  imports: [\n    SequelizeModule.forRoot({\n      ...defaultOptions,\n      host: 'user_db_host',\n      models: [User],\n    }),\n    SequelizeModule.forRoot({\n      ...defaultOptions,\n      name: 'albumsConnection',\n      host: 'album_db_host',\n      models: [Album],\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing user context menu commands in Necord\nDESCRIPTION: Demonstrates how to create a user context menu command to get a user's avatar using Necord decorators.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Context, UserCommand, UserCommandContext, TargetUser } from 'necord';\nimport { User } from 'discord.js';\n\n@Injectable()\nexport class AppCommands {\n  @UserCommand({ name: 'Get avatar' })\n  public async getUserAvatar(\n    @Context() [interaction]: UserCommandContext,\n    @TargetUser() user: User,\n  ) {\n    return interaction.reply({\n      embeds: [\n        new MessageEmbed()\n          .setTitle(`Avatar of ${user.username}`)\n          .setImage(user.displayAvatarURL({ size: 4096, dynamic: true })),\n      ],\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Method-Level Guard in NestJS Microservice\nDESCRIPTION: Demonstrates how to implement a method-scoped guard using @UseGuards decorator with a MessagePattern in a NestJS microservice. The example shows an accumulate method that sums an array of numbers while being protected by an AuthGuard.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/guards.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@UseGuards(AuthGuard)\n@MessagePattern({ cmd: 'sum' })\naccumulate(data: number[]): number {\n  return (data || []).reduce((a, b) => a + b);\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@UseGuards(AuthGuard)\n@MessagePattern({ cmd: 'sum' })\naccumulate(data) {\n  return (data || []).reduce((a, b) => a + b);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Express v5 Wildcard Route in NestJS 11\nDESCRIPTION: Demonstrates how to update a wildcard route to be compatible with Express v5 in NestJS 11. The new syntax requires using a named wildcard instead of the asterisk.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('users/*splat')\nfindAll() {\n  return 'This route will work in Express v5';\n}\n```\n\n----------------------------------------\n\nTITLE: Applying AuthGuard to WebSocket Event Handler in NestJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to apply an AuthGuard to a WebSocket event handler using the @UseGuards decorator. It shows the structure of a typical WebSocket message handler function, including the client and data parameters, and the expected return format.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/guards.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@UseGuards(AuthGuard)\n@SubscribeMessage('events')\nhandleEvent(client: Client, data: unknown): WsResponse<unknown> {\n  const event = 'events';\n  return { event, data };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Health Module\nDESCRIPTION: Implementation of the HealthModule that imports TerminusModule\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n  imports: [TerminusModule]\n})\nexport class HealthModule {}\n```\n\n----------------------------------------\n\nTITLE: Using the INQUIRER Token for Class Identification in NestJS\nDESCRIPTION: Demonstrates how to use the INQUIRER token to identify the parent class where a provider was constructed. This is useful for logging or metrics providers to track which class is using them.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Injectable, Scope } from '@nestjs/common';\nimport { INQUIRER } from '@nestjs/core';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class HelloService {\n  constructor(@Inject(INQUIRER) private parentClass: object) {}\n\n  sayHello(message: string) {\n    console.log(`${this.parentClass?.constructor?.name}: ${message}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Event Listener in NestJS with Bull\nDESCRIPTION: Example of how to implement an event listener for queue events in a NestJS consumer class. This snippet shows how to listen for the 'active' event on an audio queue using the @OnQueueActive decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, Process, OnQueueActive } from '@nestjs/bull';\nimport { Job } from 'bull';\n\n@Processor('audio')\nexport class AudioConsumer {\n\n  @OnQueueActive()\n  onActive(job: Job) {\n    console.log(\n      `Processing job ${job.id} of type ${job.name} with data ${job.data}...`,\n    );\n  }\n  ...\n\n```\n\n----------------------------------------\n\nTITLE: Registering Discriminator Schemas with Base Schema in NestJS\nDESCRIPTION: Shows how to register discriminator schemas with their base schema in a feature module using the discriminators option within MongooseModule.forFeature, enabling schema inheritance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Event.name,\n        schema: EventSchema,\n        discriminators: [\n          { name: ClickedLinkEvent.name, schema: ClickedLinkEventSchema },\n          { name: SignUpEvent.name, schema: SignUpEventSchema },\n        ],\n      },\n    ]),\n  ]\n})\nexport class EventsModule {}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Instantiating Custom Classes in NestJS\nDESCRIPTION: Shows how to use the create() method of ModuleRef to dynamically instantiate a class that wasn't previously registered as a provider. This example creates an instance of CatsFactory in the onModuleInit lifecycle hook.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/module-reference.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService implements OnModuleInit {\n  private catsFactory: CatsFactory;\n  constructor(private moduleRef: ModuleRef) {}\n\n  async onModuleInit() {\n    this.catsFactory = await this.moduleRef.create(CatsFactory);\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n\n  async onModuleInit() {\n    this.catsFactory = await this.moduleRef.create(CatsFactory);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using slash command options in Necord commands\nDESCRIPTION: Demonstrates how to use the defined DTO in a slash command to calculate text length.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Context, SlashCommand, Options, SlashCommandContext } from 'necord';\nimport { TextDto } from './length.dto';\n\n@Injectable()\nexport class AppCommands {\n  @SlashCommand({\n    name: 'length',\n    description: 'Calculate the length of your text',\n  })\n  public async onLength(\n    @Context() [interaction]: SlashCommandContext,\n    @Options() { text }: TextDto,\n  ) {\n    return interaction.reply({\n      content: `The length of your text is: ${text.length}`,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using EntitySchema in NestJS TypeORM Module\nDESCRIPTION: Shows how to register and use an EntitySchema in a NestJS module. This code imports and registers a UserSchema with TypeOrmModule.forFeature() instead of using an entity class directly.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserSchema } from './user.schema';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserSchema])],\n  providers: [UsersService],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n```\n\n----------------------------------------\n\nTITLE: Checking Server Listening Status in NestJS\nDESCRIPTION: Demonstrates how to use the listening property of HttpAdapterHost to check if the server is currently active and listening.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/http-adapter.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nif (this.httpAdapterHost.listening) {\n  console.log('HTTP server is listening');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Method Name in ConfigurableModuleBuilder\nDESCRIPTION: Demonstrates how to change the default register method name to a custom name like forRoot using setClassMethodName()\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =\n  new ConfigurableModuleBuilder<ConfigModuleOptions>().setClassMethodName('forRoot').build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Mapping Interceptor in NestJS\nDESCRIPTION: This interceptor overrides thrown exceptions by using RxJS's catchError operator. It demonstrates how to handle and transform errors in the response stream.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  BadGatewayException,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorsInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    return next\n      .handle()\n      .pipe(\n        catchError(err => throwError(() => new BadGatewayException())),\n      );\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Injectable, BadGatewayException } from '@nestjs/common';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorsInterceptor {\n  intercept(context, next) {\n    return next\n      .handle()\n      .pipe(\n        catchError(err => throwError(() => new BadGatewayException())),\n      );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Injection Token for a Named Mongoose Connection in NestJS\nDESCRIPTION: Shows how to use the getConnectionToken() function to obtain the injection token for a specific named Mongoose connection, useful for injecting it into custom providers like factory providers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  provide: CatsService,\n  useFactory: (catsConnection: Connection) => {\n    return new CatsService(catsConnection);\n  },\n  inject: [getConnectionToken('cats')],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route-level Versioning in NestJS\nDESCRIPTION: This code demonstrates how to apply versioning to individual routes in NestJS. It defines two versions of the same route, each handling a different API version.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Version } from '@nestjs/common';\n\n@Controller()\nexport class CatsController {\n  @Version('1')\n  @Get('cats')\n  findAllV1(): string {\n    return 'This action returns all cats for version 1';\n  }\n\n  @Version('2')\n  @Get('cats')\n  findAllV2(): string {\n    return 'This action returns all cats for version 2';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercurius Plugins in NestJS\nDESCRIPTION: Shows how to register Mercurius-specific Fastify plugins with the MercuriusDriver in NestJS. The example configures the cache plugin with custom TTL and caching policy options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot({\n  driver: MercuriusDriver,\n  // ...\n  plugins: [\n    {\n      plugin: cache,\n      options: {\n        ttl: 10,\n        policy: {\n          Query: {\n            add: true\n          }\n        }\n      },\n    }\n  ]\n}),\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CatsService in NestJS\nDESCRIPTION: Demonstrates how to create a simple CatsService class with methods for creating and retrieving cat data. The @Injectable() decorator is used to mark the class as a provider.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/components.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  create(cat: Cat) {\n    this.cats.push(cat);\n  }\n\n  findAll(): Cat[] {\n    return this.cats;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Provider Instances in NestJS\nDESCRIPTION: Shows how to use the ModuleRef's get() method to retrieve an instance of a provider within the current module. This example demonstrates retrieving a Service instance in the onModuleInit lifecycle hook.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/module-reference.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService implements OnModuleInit {\n  private service: Service;\n  constructor(private moduleRef: ModuleRef) {}\n\n  onModuleInit() {\n    this.service = this.moduleRef.get(Service);\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n\n  onModuleInit() {\n    this.service = this.moduleRef.get(Service);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Route Config with Fastify\nDESCRIPTION: Example showing how to use Fastify's route config feature using the @RouteConfig decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@RouteConfig({ output: 'hello world' })\n@Get()\nindex(@Req() req) {\n  return req.routeConfig.output;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ModuleRef in NestJS Service\nDESCRIPTION: Demonstrates how to inject the ModuleRef class into a NestJS service using constructor injection. This allows the service to use ModuleRef's capabilities for provider management.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/module-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService {\n  constructor(private moduleRef: ModuleRef) {}\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\n@Dependencies(ModuleRef)\nexport class CatsService {\n  constructor(moduleRef) {\n    this.moduleRef = moduleRef;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Compodoc as a Dev Dependency in Nest.js Project\nDESCRIPTION: This command installs Compodoc as a development dependency in an existing Nest.js project. It uses npm to add the @compodoc/compodoc package to the project's devDependencies.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/documentation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -D @compodoc/compodoc\n```\n\n----------------------------------------\n\nTITLE: Implementing Alias Providers with useExisting in NestJS\nDESCRIPTION: This snippet demonstrates how to create aliases for existing providers using the useExisting syntax. It shows how to create two ways to access the same provider instance.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass LoggerService {\n  /* implementation details */\n}\n\nconst loggerAliasProvider = {\n  provide: 'AliasedLoggerService',\n  useExisting: LoggerService,\n};\n\n@Module({\n  providers: [LoggerService, loggerAliasProvider],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Mocking Mongoose Model for Unit Testing in NestJS\nDESCRIPTION: Demonstrates how to provide a mock Mongoose Model implementation for unit testing using the getModelToken() function and a custom provider (useValue) within a NestJS module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  providers: [\n    CatsService,\n    {\n      provide: getModelToken(Cat.name),\n      useValue: catModel,\n    },\n  ],\n})\nexport class CatsModule {}\n```\n\n----------------------------------------\n\nTITLE: Registering Providers in NestJS Module\nDESCRIPTION: Demonstrates how to register a provider (CatsService) in a NestJS module. This step is crucial for making the service available for dependency injection throughout the application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/components.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats/cats.controller';\nimport { CatsService } from './cats/cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL-specific Guard with Execution Context in NestJS\nDESCRIPTION: Demonstrates how to transform the generic ExecutionContext to a GraphQL-specific context in a guard. Shows the implementation of AuthGuard that works with GraphQL resolvers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const ctx = GqlExecutionContext.create(context);\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SSE Route in NestJS Controller\nDESCRIPTION: This snippet demonstrates how to create a Server-Sent Events route in a NestJS controller using the @Sse() decorator. It returns an Observable that emits MessageEvent objects every second.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/server-sent-events.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Sse('sse')\nsse(): Observable<MessageEvent> {\n  return interval(1000).pipe(map((_) => ({ data: { hello: 'world' } })));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Mongoose Subdocument Schema (TypeScript)\nDESCRIPTION: Shows how to define a schema class (`Name`) intended to be used as a subdocument within other Mongoose documents using NestJS decorators (`@Schema`, `@Prop`).\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n@@filename(name.schema)\n@Schema()\nexport class Name {\n  @Prop()\n  firstName: string;\n\n  @Prop()\n  lastName: string;\n}\n\nexport const NameSchema = SchemaFactory.createForClass(Name);\n```\n\n----------------------------------------\n\nTITLE: Implementing CatsService in NestJS\nDESCRIPTION: TypeScript code for a NestJS service that combines functionality from CatsApiService and CatsDAL to retrieve and save cat data.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CatsService {\n  constructor(\n    private catsApiService: CatsApiService,\n    private catsDAL: CatsDAL\n  ) {}\n\n  async getAndSaveCat(id: number): Promise<Cat> {\n    const cat = await this.catsApiService.getCatById(id);\n    return this.catsDAL.saveCat(cat);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object in NestJS Controller\nDESCRIPTION: Shows how to inject and use the Express Request object in a controller using the @Req decorator. Demonstrates type safety with Express types.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Req } from '@nestjs/common';\nimport { Request } from 'express';\n\n@Controller('cats')\nexport class CatsController {\n  @Get()\n  findAll(@Req() request: Request): string {\n    return 'This action returns all cats';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Method-Scoped Exception Filter Using Class in NestJS\nDESCRIPTION: Shows how to apply an exception filter by passing the filter class instead of an instance, enabling dependency injection and reducing memory usage through instance reuse.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@UseFilters(HttpExceptionFilter)\nasync create(@Body() createCatDto: CreateCatDto) {\n  throw new ForbiddenException();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Service in NestJS\nDESCRIPTION: AuthService implementation with sign-in logic, user validation, and password verification.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n\n  async signIn(username: string, pass: string): Promise<any> {\n    const user = await this.usersService.findOne(username);\n    if (user?.password !== pass) {\n      throw new UnauthorizedException();\n    }\n    const { password, ...result } = user;\n    // TODO: Generate a JWT and return it here\n    // instead of the user object\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Roles Decorator in NestJS Controller\nDESCRIPTION: Shows how to apply the custom Roles decorator to a route handler in a NestJS controller. This example sets the 'admin' role for the create method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@Roles(['admin'])\nasync create(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Route Parameters in NestJS\nDESCRIPTION: Shows how to access specific route parameters directly by name using the @Param decorator with a parameter name. The example demonstrates extracting the ID parameter from the route.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':id')\nfindOne(@Param('id') id: string): string {\n  return `This action returns a #${id} cat`;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Event Loss in NestJS\nDESCRIPTION: Shows how to use the EventEmitterReadinessWatcher to ensure all listeners are registered before emitting events, preventing potential event loss during application startup.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.eventEmitterReadinessWatcher.waitUntilReady();\nawait this.eventEmitter.emit(\n  'order.created',\n  new OrderCreatedEvent({ orderId: 1, payload: {} }),\n);\n```\n\n----------------------------------------\n\nTITLE: Sample Environment Variables\nDESCRIPTION: Example of environment variables defined in a .env file.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nDATABASE_USER=test\nDATABASE_PASSWORD=test\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Decorators with applyDecorators in NestJS\nDESCRIPTION: Shows how to combine multiple decorators into a single reusable decorator using the applyDecorators utility function.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { applyDecorators } from '@nestjs/common';\n\nexport function Auth(...roles: Role[]) {\n  return applyDecorators(\n    SetMetadata('roles', roles),\n    UseGuards(AuthGuard, RolesGuard),\n    ApiBearerAuth(),\n    ApiUnauthorizedResponse({ description: 'Unauthorized' }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Job to a Bull Queue\nDESCRIPTION: Shows how to add a named job to a Bull queue, which allows for creating specialized consumers that only process jobs with a specific name.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.audioQueue.add('transcode', {\n  foo: 'bar',\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Providers with DiscoveryService\nDESCRIPTION: Shows how to use the DiscoveryService to retrieve all registered providers in a NestJS application. This can be used for dynamically processing providers based on specific conditions.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/discovery-service.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst providers = this.discoveryService.getProviders();\nconsole.log(providers);\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Route Handlers with Promises in NestJS\nDESCRIPTION: Demonstrates using async/await syntax in controller methods to return Promises. NestJS will automatically resolve the Promise and return the result to the client.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nasync findAll(): Promise<any[]> {\n  return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with Fastify in NestJS\nDESCRIPTION: Creates a NestJS application using the FastifyAdapter with HTTPS options. This demonstrates how to set up HTTPS when using Fastify as the underlying HTTP provider instead of Express.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/multiple-servers.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create<NestFastifyApplication>(\n  AppModule,\n  new FastifyAdapter({ https: httpsOptions }),\n);\n```\n\n----------------------------------------\n\nTITLE: Reusing Existing Options Provider for MulterModule in NestJS\nDESCRIPTION: This snippet shows how to use the useExisting syntax to reuse an existing options provider instead of creating a private copy inside the MulterModule.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nMulterModule.registerAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n});\n```\n\n----------------------------------------\n\nTITLE: Health Check Response Example\nDESCRIPTION: Example JSON response from a successful health check endpoint\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"ok\",\n  \"info\": {\n    \"nestjs-docs\": {\n      \"status\": \"up\"\n    }\n  },\n  \"error\": {},\n  \"details\": {\n    \"nestjs-docs\": {\n      \"status\": \"up\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a text command handler with Necord\nDESCRIPTION: Shows how to implement a simple text command 'ping' using the @TextCommand decorator in Necord.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Context, TextCommand, TextCommandContext, Arguments } from 'necord';\n\n@Injectable()\nexport class AppCommands {\n  @TextCommand({\n    name: 'ping',\n    description: 'Responds with pong!',\n  })\n  public onPing(\n    @Context() [message]: TextCommandContext,\n    @Arguments() args: string[],\n  ) {\n    return message.reply('pong!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Schema\nDESCRIPTION: Basic Prisma schema configuration for SQLite database connection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Named Authentication Strategies in NestJS\nDESCRIPTION: Shows how to create a named strategy by passing a second argument to the PassportStrategy function. Named strategies can be referenced specifically in guards and other components.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport class JwtStrategy extends PassportStrategy(Strategy, 'myjwt')\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Configuration for Nest Devtools Integration\nDESCRIPTION: This YAML configuration sets up a GitLab CI pipeline for building and publishing Nest Devtools graphs. It includes stages for installing dependencies and running the graph publisher.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/ci-cd.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:16\n\nstages:\n  - build\n\ncache:\n  key:\n    files:\n      - package-lock.json\n  paths:\n    - node_modules/\n\nworkflow:\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n      when: always\n    - if: $CI_COMMIT_BRANCH == \"master\" && $CI_PIPELINE_SOURCE == \"push\"\n      when: always\n    - when: never\n\ninstall_dependencies:\n  stage: build\n  script:\n    - npm ci\n\npublish_graph:\n  stage: build\n  needs:\n    - install_dependencies\n  script: npm run start\n  variables:\n    PUBLISH_GRAPH: 'true'\n    DEVTOOLS_API_KEY: 'CHANGE_THIS_TO_YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Client Decorator Usage in NestJS\nDESCRIPTION: Shows how to use the @Client decorator for simple client configuration, though not recommended for production use.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Client({ transport: Transport.TCP })\nclient: ClientProxy;\n```\n\n----------------------------------------\n\nTITLE: Using Route Parameters with @Param Decorator in NestJS\nDESCRIPTION: Demonstrates accessing route parameters using the @Param decorator to get all parameters as an object. The example shows accessing an ID parameter from the URL path.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':id')\nfindOne(@Param() params: any): string {\n  console.log(params.id);\n  return `This action returns a #${params.id} cat`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Controller-level Versioning in NestJS\nDESCRIPTION: This snippet shows how to apply versioning at the controller level in NestJS. It sets version 1 for all routes within the controller.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller({\n  version: '1',\n})\nexport class CatsControllerV1 {\n  @Get('cats')\n  findAll(): string {\n    return 'This action returns all cats for version 1';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Initialization Hook in TypeScript\nDESCRIPTION: Example showing how to implement the OnModuleInit interface in a service class to execute code during module initialization phase.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lifecycle-events.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\n\n@Injectable()\nexport class UsersService implements OnModuleInit {\n  onModuleInit() {\n    console.log(`The module has been initialized.`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listener Options in NestJS\nDESCRIPTION: Demonstrates how to pass options to the @OnEvent() decorator to configure the event listener, including async handling and error suppression.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@OnEvent('order.created', { async: true })\nhandleOrderCreatedEvent(payload: OrderCreatedEvent) {\n  // handle and process \"OrderCreatedEvent\" event\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for Unresolved Dependencies in NestJS\nDESCRIPTION: Example of the error message that appears when NestJS cannot resolve dependencies of a provider. This typically happens when a provider is missing from a module's providers array or when there are circular dependencies.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/errors.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNest can't resolve dependencies of the <provider> (?). Please make sure that the argument <unknown_token> at index [<index>] is available in the <module> context.\n\nPotential solutions:\n- Is <module> a valid NestJS module?\n- If <unknown_token> is a provider, is it part of the current <module>?\n- If <unknown_token> is exported from a separate @Module, is that module imported within <module>?\n  @Module({\n    imports: [ /* the Module containing <unknown_token> */ ]\n  })\n```\n\n----------------------------------------\n\nTITLE: Disabling Colorized Output in NestJS Logger\nDESCRIPTION: This snippet illustrates how to disable colorized output for the NestJS logger. It uses the ConsoleLogger object with the colors property set to false.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule, {\n  logger: new ConsoleLogger({\n    colors: false,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Providers by Token in NestJS\nDESCRIPTION: This snippet demonstrates how to export a custom provider using its token to make it visible to other modules.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst connectionFactory = {\n  provide: 'CONNECTION',\n  useFactory: (optionsProvider: OptionsProvider) => {\n    const options = optionsProvider.get();\n    return new DatabaseConnection(options);\n  },\n  inject: [OptionsProvider],\n};\n\n@Module({\n  providers: [connectionFactory],\n  exports: ['CONNECTION'],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: MessageEvent Interface for SSE in TypeScript\nDESCRIPTION: This code defines the MessageEvent interface used in Server-Sent Events. It specifies the structure of the event objects that should be emitted by the SSE route.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/server-sent-events.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MessageEvent {\n  data: string | object;\n  id?: string;\n  type?: string;\n  retry?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to RabbitMQ Client Status Updates in NestJS\nDESCRIPTION: Shows how to subscribe to status updates from the RabbitMQ client instance. Uses RmqStatus type from @nestjs/microservices to track connection state.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis.client.status.subscribe((status: RmqStatus) => {\n  console.log(status);\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Sequelize Instance in a Service\nDESCRIPTION: Example showing how to inject the Sequelize instance in a service using dependency injection. Includes both TypeScript and JavaScript syntax.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Sequelize } from 'sequelize-typescript';\n\n@Injectable()\nexport class AppService {\n  constructor(private sequelize: Sequelize) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Union Type in a GraphQL Query Resolver\nDESCRIPTION: Implements a search query that returns an array of the ResultUnion type. The resolver returns a mix of Author and Book instances.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Query(() => [ResultUnion])\nsearch(): Array<typeof ResultUnion> {\n  return [new Author(), new Book()];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Photo Module\nDESCRIPTION: Sets up the PhotoModule with necessary imports and providers for the photo functionality.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-typeorm.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { DatabaseModule } from '../database/database.module';\nimport { photoProviders } from './photo.providers';\nimport { PhotoService } from './photo.service';\n\n@Module({\n  imports: [DatabaseModule],\n  providers: [\n    ...photoProviders,\n    PhotoService,\n  ],\n})\nexport class PhotoModule {}\n```\n\n----------------------------------------\n\nTITLE: Comparing Passwords with bcrypt in NestJS\nDESCRIPTION: This snippet demonstrates how to compare a plain text password with a hashed password using the compare function from the bcrypt package in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/encryption-hashing.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst isMatch = await bcrypt.compare(password, hash);\n```\n\n----------------------------------------\n\nTITLE: Creating Mongoose Model Provider for Cats\nDESCRIPTION: Defines a provider for the Cat model using the CatSchema and the database connection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Connection } from 'mongoose';\nimport { CatSchema } from './schemas/cat.schema';\n\nexport const catsProviders = [\n  {\n    provide: 'CAT_MODEL',\n    useFactory: (connection: Connection) => connection.model('Cat', CatSchema),\n    inject: ['DATABASE_CONNECTION'],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS Documentation Dependencies\nDESCRIPTION: Commands to install project dependencies and start the local development server for the NestJS documentation site. After running these commands, the documentation will be available at http://localhost:4200/.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Setting Extra Module Options\nDESCRIPTION: Demonstrates how to add extra configuration options that won't be included in the module options token\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } = new ConfigurableModuleBuilder<ConfigModuleOptions>()\n  .setExtras(\n    {\n      isGlobal: true,\n    },\n    (definition, extras) => ({\n      ...definition,\n      global: extras.isGlobal,\n    }),\n  )\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards for Event Listening in NestJS\nDESCRIPTION: Shows how to use wildcards in event names to listen to multiple related events with a single listener method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@OnEvent('order.*')\nhandleOrderEvents(payload: OrderCreatedEvent | OrderRemovedEvent | OrderUpdatedEvent) {\n  // handle and process an event\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Login Controller Implementation in NestJS\nDESCRIPTION: Controller implementation for handling login requests and returning JWT tokens.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Request, Post, UseGuards } from '@nestjs/common';\nimport { LocalAuthGuard } from './auth/local-auth.guard';\nimport { AuthService } from './auth/auth.service';\n\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('auth/login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Value Pipe with Parse Pipes in NestJS\nDESCRIPTION: Illustrates using DefaultValuePipe in combination with Parse pipes for handling optional query parameters.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nasync findAll(\n  @Query('activeOnly', new DefaultValuePipe(false), ParseBoolPipe) activeOnly: boolean,\n  @Query('page', new DefaultValuePipe(0), ParseIntPipe) page: number,\n) {\n  return this.catsService.findAll({ activeOnly, page });\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Route with Method from Global Prefix\nDESCRIPTION: Shows how to exclude specific routes with their HTTP methods from the global prefix using an exclusion configuration object.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/global-prefix.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.setGlobalPrefix('v1', {\n  exclude: [{ path: 'health', method: RequestMethod.GET }],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Bull and Configuring in NestJS\nDESCRIPTION: This snippet shows how to install Bull and configure it in a NestJS application. It includes the installation command and basic configuration in the AppModule.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/bull bull\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { BullModule } from '@nestjs/bull';\n\n@Module({\n  imports: [\n    BullModule.forRoot({\n      redis: {\n        host: 'localhost',\n        port: 6379,\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config Service in NestJS Application (TypeScript)\nDESCRIPTION: Demonstrates how to use a custom config service with getter methods in a NestJS service to check configuration values.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class AppService {\n  constructor(apiConfigService: ApiConfigService) {\n    if (apiConfigService.isAuthEnabled) {\n      // Authentication is enabled\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Custom User Decorator in NestJS Controllers\nDESCRIPTION: Shows how to use the parameterized User decorator to extract specific properties from the user object in a controller method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nasync findOne(@User('firstName') firstName: string) {\n  console.log(`Hello ${firstName}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session in NestJS Route Handler with Request Object\nDESCRIPTION: Example of accessing and modifying session data within a NestJS route handler using the Request object.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nfindAll(@Req() request: Request) {\n  request.session.visits = request.session.visits ? request.session.visits + 1 : 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Schema-First Users Resolver Implementation\nDESCRIPTION: TypeScript implementation of Users resolver with reference resolution for Federation\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Query, Resolver, ResolveReference } from '@nestjs/graphql';\nimport { UsersService } from './users.service';\n\n@Resolver('User')\nexport class UsersResolver {\n  constructor(private usersService: UsersService) {}\n\n  @Query()\n  getUser(@Args('id') id: string) {\n    return this.usersService.findById(id);\n  }\n\n  @ResolveReference()\n  resolveReference(reference: { __typename: string; id: string }) {\n    return this.usersService.findById(reference.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SWC Configuration for Jest Compatibility\nDESCRIPTION: Additional SWC configuration options required for compatibility with Jest in NestJS projects.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://swc.rs/schema.json\",\n  \"sourceMaps\": true,\n  \"jsc\": {\n    \"parser\": {\n      \"syntax\": \"typescript\",\n      \"decorators\": true,\n      \"dynamicImport\": true\n    },\n    \"transform\": {\n      \"legacyDecorator\": true,\n      \"decoratorMetadata\": true\n    },\n    \"baseUrl\": \"./\"\n  },\n  \"minify\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Binding ParseIntPipe to Route Parameter in NestJS\nDESCRIPTION: Demonstrates how to bind a ParseIntPipe to a route parameter to ensure the parameter is converted to a number before reaching the handler method.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':id')\nasync findOne(@Param('id', ParseIntPipe) id: number) {\n  return this.catsService.findOne(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting HttpAdapterHost in NestJS Service (JavaScript)\nDESCRIPTION: Demonstrates how to inject the HttpAdapterHost into a service using constructor injection in JavaScript with @Dependencies decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/http-adapter.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Dependencies(HttpAdapterHost)\nexport class CatsService {\n  constructor(adapterHost) {\n    this.adapterHost = adapterHost;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Dynamic Database Module\nDESCRIPTION: Shows how to re-export a dynamic module from another module while maintaining its dynamic configuration.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { DatabaseModule } from './database/database.module';\nimport { User } from './users/entities/user.entity';\n\n@Module({\n  imports: [DatabaseModule.forRoot([User])],\n  exports: [DatabaseModule],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple GraphQL Endpoints in NestJS\nDESCRIPTION: This snippet demonstrates how to configure the GraphQLModule to serve multiple endpoints by including only specific modules in the GraphQL schema.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nGraphQLModule.forRoot({\n  include: [CatsModule],\n}),\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT QoS Settings\nDESCRIPTION: Setting up Quality of Service options for MQTT connections globally\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/mqtt.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {\n  transport: Transport.MQTT,\n  options: {\n    url: 'mqtt://localhost:1883',\n    subscribeOptions: {\n      qos: 2\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Pipe Implementation in NestJS\nDESCRIPTION: Shows how to create a basic custom validation pipe that implements the PipeTransform interface.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    return value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Size Validation Pipe in NestJS\nDESCRIPTION: Custom pipe implementation to validate file size before upload in NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';\n\n@Injectable()\nexport class FileSizeValidationPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    // \"value\" is an object containing the file's attributes and metadata\n    const oneKb = 1000;\n    return value.size < oneKb;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Subscription in NestJS\nDESCRIPTION: Creates a subscription with an explicitly defined name using the @Subscription decorator options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@Subscription(() => Comment, {\n  name: 'commentAdded',\n})\nsubscribeToCommentAdded(@Context('pubsub') pubSub: PubSub) {\n  return pubSub.subscribe('commentAdded');\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Branch After NestJS PR Merge\nDESCRIPTION: Command to delete your local development branch after your pull request has been merged into the NestJS repository.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit branch -D my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for E2E Tests with SWC\nDESCRIPTION: TypeScript configuration for Vitest to run E2E tests using SWC in a NestJS project.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport swc from 'unplugin-swc';\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    include: ['**/*.e2e-spec.ts'],\n    globals: true,\n    root: './',\n  },\n  plugins: [swc.vite()],\n});\n```\n\n----------------------------------------\n\nTITLE: Example Validation Error Response\nDESCRIPTION: This JSON snippet shows an example of the error response that is returned when a request fails validation. It includes the status code, error message, and an array of detailed error messages for each validation failure.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCode\": 400,\n  \"error\": \"Bad Request\",\n  \"message\": [\"email must be an email\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Illustration of Duplicate @nestjs/core Module Structure in Monorepos\nDESCRIPTION: Shows the directory structure that can cause dependency resolution issues in monorepos when multiple instances of @nestjs/core are loaded. This happens when packages have their own nested dependencies.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/errors.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.\n├── package.json\n├── apps\n│   └── api\n│       └── node_modules\n│           └── @nestjs/bull\n│               └── node_modules\n│                   └── @nestjs/core\n└── node_modules\n    ├── (other packages)\n    └── @nestjs/core\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Graph Export\nDESCRIPTION: Bootstrap error handling configuration to export partial graph data when dependency resolution fails.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrap().catch((err) => {\n  fs.writeFileSync('graph.json', PartialGraphHost.toString() ?? '');\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Zod Validation Pipe to Controller Method\nDESCRIPTION: Example of binding the ZodValidationPipe to a controller method using the @UsePipes decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@UsePipes(new ZodValidationPipe(createCatSchema))\nasync create(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing EventEmitterModule in NestJS AppModule\nDESCRIPTION: Demonstrates how to import and configure the EventEmitterModule in the root AppModule of a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\n\n@Module({\n  imports: [\n    EventEmitterModule.forRoot()\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Interface in Object Type\nDESCRIPTION: Shows how to implement the Character interface in a Human object type using the implements keyword.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@ObjectType({\n  implements: () => [Character],\n})\nexport class Human implements Character {\n  id: string;\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Interceptors to Controllers in NestJS\nDESCRIPTION: This snippet shows how to apply an interceptor to all route handlers in a controller using the @UseInterceptors() decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@UseInterceptors(LoggingInterceptor)\nexport class CatsController {}\n```\n\n----------------------------------------\n\nTITLE: Jest E2E Test Configuration\nDESCRIPTION: Configuration for integrating the GraphQL CLI plugin with Jest for e2e testing.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/cli-plugin.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst transformer = require('@nestjs/graphql/plugin');\n\nmodule.exports.name = 'nestjs-graphql-transformer';\nmodule.exports.version = 1;\n\nmodule.exports.factory = (cs) => {\n  return transformer.before(\n    {},\n    cs.program,\n  );\n};\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"globals\": {\n    \"ts-jest\": {\n      \"astTransformers\": {\n        \"before\": [\"<path to the file created above>\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Metadata Generation Script\nDESCRIPTION: Command to execute the metadata generation script for NestJS CLI plugins in a monorepo environment.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npx ts-node src/generate-metadata.ts\n# OR npx ts-node apps/{YOUR_APP}/src/generate-metadata.ts\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for RpcException in NestJS\nDESCRIPTION: Shows the structure of the error object returned by NestJS when an RpcException is thrown in a microservice.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/exception-filters.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"error\",\n  \"message\": \"Invalid credentials.\"\n}\n```\n\n----------------------------------------\n\nTITLE: SDL Generated for Enum Type\nDESCRIPTION: Shows the GraphQL SDL that gets generated for an enum type defined using the code-first approach.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nenum AllowedColor {\n  RED\n  GREEN\n  BLUE\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeORM and MySQL dependencies for NestJS\nDESCRIPTION: Command to install the necessary packages for integrating TypeORM and MySQL with NestJS.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/typeorm typeorm mysql2\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest with SWC for NestJS\nDESCRIPTION: Command to install Vitest and related packages for use with SWC in a NestJS project.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save-dev vitest unplugin-swc @swc/core @vitest/coverage-v8\n```\n\n----------------------------------------\n\nTITLE: Caching WebSocket Subscribers in NestJS\nDESCRIPTION: Demonstrates how to apply caching to WebSocket subscribers using CacheInterceptor and CacheKey decorators.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@CacheKey('events')\n@UseInterceptors(CacheInterceptor)\n@SubscribeMessage('events')\nhandleEvent(client: Client, data: string[]): Observable<string[]> {\n  return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing HTTP Exception in Controller\nDESCRIPTION: Example of throwing a basic HttpException in a NestJS controller with status code and message.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nasync findAll() {\n  throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering JSON Scalar Resolver\nDESCRIPTION: Configuration to register the JSON scalar resolver in the GraphQL module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport GraphQLJSON from 'graphql-type-json';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      resolvers: { JSON: GraphQLJSON },\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Checking in nest-cli.json\nDESCRIPTION: JSON configuration to enable type checking by default when using SWC builder.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"builder\": \"swc\",\n    \"typeCheck\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Repository Provider\nDESCRIPTION: Provider definition for repository injection in NestJS services.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Cat } from './cat.entity';\n\nexport const catsProviders = [\n  {\n    provide: 'CATS_REPOSITORY',\n    useValue: Cat,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Helmet for Express in NestJS\nDESCRIPTION: Command to install the Helmet package for use with Express in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/helmet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save helmet\n```\n\n----------------------------------------\n\nTITLE: ParseIntPipe with Query Parameter in NestJS\nDESCRIPTION: Example of using ParseIntPipe with a query string parameter.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nasync findOne(@Query('id', ParseIntPipe) id: number) {\n  return this.catsService.findOne(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zod Package\nDESCRIPTION: Command to install the Zod validation library as a project dependency.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save zod\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS Event Emitter Package\nDESCRIPTION: Command to install the @nestjs/event-emitter package using npm.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i --save @nestjs/event-emitter\n```\n\n----------------------------------------\n\nTITLE: Applying Express Compression Middleware\nDESCRIPTION: Implementation of compression middleware in an Express-based NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/compression.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as compression from 'compression';\n// somewhere in your initialization file\napp.use(compression());\n```\n\n----------------------------------------\n\nTITLE: Database URL Configuration\nDESCRIPTION: Environment variable configuration for SQLite database connection.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"file:./dev.db\"\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Dependencies in NestJS\nDESCRIPTION: Commands for installing required packages for GraphQL integration in NestJS with different server options including Express/Apollo, Fastify/Apollo, and Fastify/Mercurius.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For Express and Apollo (default)\n$ npm i @nestjs/graphql @nestjs/apollo @apollo/server graphql\n\n# For Fastify and Apollo\n# npm i @nestjs/graphql @nestjs/apollo @apollo/server @as-integrations/fastify graphql\n\n# For Fastify and Mercurius\n# npm i @nestjs/graphql @nestjs/mercurius graphql mercurius\n```\n\n----------------------------------------\n\nTITLE: Generating NestJS Resource using CLI\nDESCRIPTION: Shell command to generate a new NestJS resource using the CLI generator\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/crud-generator.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nest g resource\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Builder in nest-cli.json\nDESCRIPTION: JSON configuration to set SWC as the default builder in the nest-cli.json file.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"builder\": \"swc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord event handlers in AppService\nDESCRIPTION: Demonstrates how to use Necord decorators to handle Discord events like 'ready' and 'warn' in the AppService.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Context, On, Once, ContextOf } from 'necord';\nimport { Client } from 'discord.js';\n\n@Injectable()\nexport class AppService {\n  private readonly logger = new Logger(AppService.name);\n\n  @Once('ready')\n  public onReady(@Context() [client]: ContextOf<'ready'>) {\n    this.logger.log(`Bot logged in as ${client.user.username}`);\n  }\n\n  @On('warn')\n  public onWarn(@Context() [message]: ContextOf<'warn'>) {\n    this.logger.warn(message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Query Parser in NestJS 11 with Express v5\nDESCRIPTION: Shows how to configure the Express application in NestJS 11 to use the extended query parser, which supports nested objects and arrays in query strings.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NestFactory } from '@nestjs/core';\nimport { NestExpressApplication } from '@nestjs/platform-express';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestExpressApplication>(AppModule); // <-- Make sure to use <NestExpressApplication>\n  app.set('query parser', 'extended'); // <-- Add this line\n  await app.listen(3000);\n}\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Cache Store Package for NestJS\nDESCRIPTION: This command installs the @keyv/redis package, which is required to use Redis as a cache store in NestJS applications.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @keyv/redis\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Dependencies\nDESCRIPTION: Commands to install required npm packages for RabbitMQ integration\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save amqplib amqp-connection-manager\n```\n\n----------------------------------------\n\nTITLE: Installing NATS Package\nDESCRIPTION: Command to install the NATS package as a project dependency.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save nats\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema for Extended Resolver\nDESCRIPTION: This snippet shows the GraphQL schema generated from the extended resolver class, demonstrating the automatically created query for finding all recipes.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  findAllRecipe: [Recipe!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Applying autocomplete to Necord slash commands\nDESCRIPTION: Shows how to use the autocomplete interceptor and DTO in a Necord slash command.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, UseInterceptors } from '@nestjs/common';\nimport { Context, SlashCommand, Options, SlashCommandContext } from 'necord';\nimport { CatDto } from '/cat.dto';\nimport { CatsAutocompleteInterceptor } from './cats-autocomplete.interceptor';\n\n@Injectable()\nexport class CatsCommands {\n  @UseInterceptors(CatsAutocompleteInterceptor)\n  @SlashCommand({\n    name: 'cat',\n    description: 'Retrieve information about a specific cat breed',\n  })\n  public async onSearch(\n    @Context() [interaction]: SlashCommandContext,\n    @Options() { cat }: CatDto,\n  ) {\n    return interaction.reply({\n      content: `I found information on the breed of ${cat} cat!`,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining slash command options with Necord DTOs\nDESCRIPTION: Shows how to create a DTO for slash command options using Necord's StringOption decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StringOption } from 'necord';\n\nexport class TextDto {\n  @StringOption({\n    name: 'text',\n    description: 'Input your text here',\n    required: true,\n  })\n  text: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring publishOptions for Nest Devtools in TypeScript\nDESCRIPTION: This snippet defines the publishOptions object used by the GraphPublisher class. It sets up environment variables for API key, repository details, and commit information.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/ci-cd.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst publishOptions = {\n  apiKey: process.env.DEVTOOLS_API_KEY,\n  repository: process.env.REPOSITORY_NAME,\n  owner: process.env.GITHUB_REPOSITORY_OWNER,\n  sha: process.env.COMMIT_SHA,\n  target: process.env.TARGET_SHA,\n  trigger: process.env.GITHUB_BASE_REF ? 'pull' : 'push',\n  branch: process.env.BRANCH_NAME,\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Controller in NestJS Module\nDESCRIPTION: Shows how to register a controller in a NestJS module by including it in the controllers array of the @Module decorator.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats/cats.controller';\n\n@Module({\n  controllers: [CatsController],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify Query Parser in NestJS\nDESCRIPTION: Shows how to configure the Fastify adapter in NestJS to use a custom query string parser for handling complex query parameters.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create<NestFastifyApplication>(\n  AppModule,\n  new FastifyAdapter({\n    querystringParser: (str) => qs.parse(str),\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Associating Extra Models with @ApiExtraModels for Complex Generics in NestJS\nDESCRIPTION: This snippet demonstrates how to inform Swagger to generate schemas for generic classes by using @ApiExtraModels on the controller, enabling complex types like PaginatedDto<SpecificModel> to be documented correctly.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Controller('cats')\n@ApiExtraModels(PaginatedDto)\nexport class CatsController {}\n```\n\n----------------------------------------\n\nTITLE: Handling RxJS Observables in Custom Transport Strategy\nDESCRIPTION: Example of properly handling RxJS observables when executing message handlers with interceptors. This demonstrates how to check if the result is an observable and subscribe to it if necessary.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync listen(callback: () => void) {\n  const echoHandler = this.messageHandlers.get('echo');\n  const streamOrResult = await echoHandler('Hello World');\n  if (isObservable(streamOrResult)) {\n    streamOrResult.subscribe();\n  }\n  callback();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom GraphQL Driver in NestJS\nDESCRIPTION: Example of creating a custom GraphQL driver by extending AbstractGraphQLDriver. This implementation integrates express-graphql package with NestJS GraphQL module.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractGraphQLDriver, GqlModuleOptions } from '@nestjs/graphql';\nimport { graphqlHTTP } from 'express-graphql';\n\nclass ExpressGraphQLDriver extends AbstractGraphQLDriver {\n  async start(options: GqlModuleOptions<any>): Promise<void> {\n    options = await this.graphQlFactory.mergeWithSchema(options);\n\n    const { httpAdapter } = this.httpAdapterHost;\n    httpAdapter.use(\n      '/graphql',\n      graphqlHTTP({\n        schema: options.schema,\n        graphiql: true,\n      }),\n    );\n  }\n\n  async stop() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Log Style in Terminus Module\nDESCRIPTION: Shows how to change the error log style for Terminus health checks using the errorLogStyle configuration option. In this example, it's set to 'pretty' for formatted box output.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    TerminusModule.forRoot({\n      errorLogStyle: 'pretty',\n    }),\n  ]\n})\nexport class HealthModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify Secure Session Package\nDESCRIPTION: Command to install the @fastify/secure-session package for use with NestJS and Fastify.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i @fastify/secure-session\n```\n\n----------------------------------------\n\nTITLE: Handling gRPC Metadata in NestJS Controller\nDESCRIPTION: Illustrates how to work with gRPC metadata in a NestJS controller. This example shows reading incoming metadata, creating server metadata, and sending it back to the client.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller()\nexport class HeroesService {\n  @GrpcMethod()\n  findOne(data: HeroById, metadata: Metadata, call: ServerUnaryCall<any, any>): Hero {\n    const serverMetadata = new Metadata();\n    const items = [\n      { id: 1, name: 'John' },\n      { id: 2, name: 'Doe' },\n    ];\n\n    serverMetadata.add('Set-Cookie', 'yummy_cookie=choco');\n    call.sendMetadata(serverMetadata);\n\n    return items.find(({ id }) => id === data.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Type Resolution for Union Types in NestJS\nDESCRIPTION: Implements a custom resolveType function that determines which concrete type to return based on the properties of the value object.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ResultUnion = createUnionType({\n  name: 'ResultUnion',\n  types: () => [Author, Book] as const,\n  resolveType(value) {\n    if (value.name) {\n      return Author;\n    }\n    if (value.title) {\n      return Book;\n    }\n    return null;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing and Clearing a Timeout in NestJS\nDESCRIPTION: Demonstrates how to access a named timeout and clear it using the SchedulerRegistry.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst timeout = this.schedulerRegistry.getTimeout('notifications');\nclearTimeout(timeout);\n```\n\n----------------------------------------\n\nTITLE: PartialType with Decorator Override in GraphQL\nDESCRIPTION: Demonstration of using PartialType with a second argument to override the decorator type for the resulting class.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@InputType()\nexport class UpdateUserInput extends PartialType(User, InputType) {}\n```\n\n----------------------------------------\n\nTITLE: Circular Dependency Handling\nDESCRIPTION: Example of handling circular dependencies in Swagger documentation using lazy loading.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({ type: () => Node })\nnode: Node;\n```\n\n----------------------------------------\n\nTITLE: Integrating Swagger CLI Plugin with Webpack and ts-loader\nDESCRIPTION: Configuration to use the Swagger CLI plugin with a custom Webpack setup using ts-loader. This is for projects not using the NestJS CLI.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngetCustomTransformers: (program: any) => ({\n  before: [require('@nestjs/swagger/plugin').before({}, program)]\n}),\n```\n\n----------------------------------------\n\nTITLE: Testing Client Proxy with Timeout\nDESCRIPTION: This snippet demonstrates how to use the custom client proxy with a timeout operator, showcasing error handling and the execution of the teardown function.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst googlePubSubClient = new GoogleCloudPubSubClient();\ngooglePubSubClient\n  .send('pattern', 'Hello world!')\n  .pipe(timeout(2000))\n  .subscribe(\n    (response) => console.log(response),\n    (error) => console.error(error.message),\n  );\n```\n\n----------------------------------------\n\nTITLE: Extracting User Data Using Request Object in TypeScript\nDESCRIPTION: Shows the traditional approach of manually extracting properties from the request object in NestJS route handlers.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = req.user;\n```\n\n----------------------------------------\n\nTITLE: Defining the Article Entity Class in TypeScript\nDESCRIPTION: Defines a simple `Article` class with `id` (number), `isPublished` (boolean), and `authorId` (number) properties. This class represents an article entity that will be subject to CASL authorization rules.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass Article {\n  id: number;\n  isPublished: boolean;\n  authorId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Message Handlers from Custom Transport Strategy\nDESCRIPTION: Example of logging all registered message handlers from a custom transport strategy. This demonstrates how to access the messageHandlers property provided by the Server class.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlisten(callback: () => void) {\n  console.log(this.messageHandlers);\n  callback();\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for version 29 and above\nDESCRIPTION: Updated JSON configuration for Jest version 29+ to enable AST transformers in ts-jest using the new transform syntax.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ... // other configuration\n  \"transform\": {\n    \"^.+\\\\.(t|j)s$\": [\n      \"ts-jest\",\n      {\n        \"astTransformers\": {\n          \"before\": [\"<path to the file created above>\"]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Serialized Metadata for Swagger with SWC Builder\nDESCRIPTION: TypeScript code to load serialized metadata for the Swagger module when using the SWC builder. This is necessary for monorepo setups.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport metadata from './metadata'; // <-- file auto-generated by the \"PluginMetadataGenerator\"\n\nawait SwaggerModule.loadPluginMetadata(metadata); // <-- here\nconst document = SwaggerModule.createDocument(app, config);\n```\n\n----------------------------------------\n\nTITLE: Kafka Context Access Implementation\nDESCRIPTION: Demonstrates accessing Kafka context information including topic details and original message content using KafkaContext.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@MessagePattern('hero.kill.dragon')\nkillDragon(@Payload() message: KillDragonMessage, @Ctx() context: KafkaContext) {\n  console.log(`Topic: ${context.getTopic()}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Queue Asynchronously in Bull Module in TypeScript\nDESCRIPTION: Shows how to register a specific queue asynchronously with the registerQueueAsync method, specifying the queue name outside the factory function.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.registerQueueAsync({\n  name: 'audio',\n  useFactory: () => ({\n    redis: {\n      host: 'localhost',\n      port: 6379,\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Multiple Microservices in a NestJS Hybrid Application\nDESCRIPTION: Demonstrates how to connect multiple microservice instances to a single NestJS application. This example connects both TCP and Redis transports with their respective configuration options.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/hybrid-application.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = await NestFactory.create(AppModule);\n// microservice #1\nconst microserviceTcp = app.connectMicroservice<MicroserviceOptions>({\n  transport: Transport.TCP,\n  options: {\n    port: 3001,\n  },\n});\n// microservice #2\nconst microserviceRedis = app.connectMicroservice<MicroserviceOptions>({\n  transport: Transport.REDIS,\n  options: {\n    host: 'localhost',\n    port: 6379,\n  },\n});\n\nawait app.startAllMicroservices();\nawait app.listen(3001);\n```\n\n----------------------------------------\n\nTITLE: gRPC Service Proto Definition\nDESCRIPTION: Protocol buffer definition for a gRPC service with streaming methods.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage hello;\n\nservice HelloService {\n  rpc BidiHello(stream HelloRequest) returns (stream HelloResponse);\n  rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);\n}\n\nmessage HelloRequest {\n  string greeting = 1;\n}\n\nmessage HelloResponse {\n  string reply = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Jest Cache Command\nDESCRIPTION: Command to clear Jest's cache directory when configuration changes are not being detected.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npx jest --clearCache\n```\n\n----------------------------------------\n\nTITLE: Manual Jest Cache Directory Cleanup\nDESCRIPTION: Commands to locate and manually clear Jest's cache directory when automatic cache clearance fails.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Find jest cache directory (usually /tmp/jest_rs)\n# by running the following command in your NestJS project root\n$ npx jest --showConfig | grep cache\n# ex result:\n#   \"cache\": true,\n#   \"cacheDirectory\": \"/tmp/jest_rs\"\n\n# Remove or empty the Jest cache directory\n$ rm -rf  <cacheDirectory value>\n# ex:\n# rm -rf /tmp/jest_rs\n```\n\n----------------------------------------\n\nTITLE: Generating Metadata for CLI Plugins in Monorepo\nDESCRIPTION: TypeScript code to manually generate metadata for NestJS CLI plugins when using SWC in a monorepo setup.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginMetadataGenerator } from '@nestjs/cli/lib/compiler/plugins/plugin-metadata-generator';\nimport { ReadonlyVisitor } from '@nestjs/swagger/dist/plugin';\n\nconst generator = new PluginMetadataGenerator();\ngenerator.generate({\n  visitors: [new ReadonlyVisitor({ introspectComments: true, pathToSource: __dirname })],\n  outputDir: __dirname,\n  watch: true,\n  tsconfigPath: 'apps/<name>/tsconfig.app.json',\n});\n```\n\n----------------------------------------\n\nTITLE: TypeORM Health Check Response Format\nDESCRIPTION: Example JSON response format for a successful database health check showing status and details.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"ok\",\n  \"info\": {\n    \"database\": {\n      \"status\": \"up\"\n    }\n  },\n  \"error\": {},\n  \"details\": {\n    \"database\": {\n      \"status\": \"up\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing csrf-csrf Package for Express in NestJS\nDESCRIPTION: Command to install the csrf-csrf package for implementing CSRF protection with Express in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/csrf.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i csrf-csrf\n```\n\n----------------------------------------\n\nTITLE: Basic Asset Configuration in NestJS\nDESCRIPTION: Simple configuration for including GraphQL files in the build output and enabling watch mode for assets.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n\"assets\": [\"**/*.graphql\"],\n\"watchAssets\": true,\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify Compression Package\nDESCRIPTION: Installation command for Fastify compression package in NestJS applications.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/compression.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @fastify/compress\n```\n\n----------------------------------------\n\nTITLE: Installing @fastify/csrf-protection Package for Fastify in NestJS\nDESCRIPTION: Command to install the @fastify/csrf-protection package for implementing CSRF protection with Fastify in a NestJS application.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/csrf.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @fastify/csrf-protection\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client\nDESCRIPTION: Command to install the Prisma Client package in your project\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Installing Suites for NestJS with Jest\nDESCRIPTION: Command to install Suites packages for unit testing NestJS applications using Jest as the test runner.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -D @suites/unit @suites/di.nestjs @suites/doubles.jest\n```\n\n----------------------------------------\n\nTITLE: Generating NestJS Authentication Components\nDESCRIPTION: Commands to generate the required NestJS modules, controllers and services for authentication implementation.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nest g module auth\n$ nest g controller auth\n$ nest g service auth\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS CLI and Creating Project\nDESCRIPTION: Commands to install NestJS CLI globally and create a new NestJS project named hello-prisma.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @nestjs/cli\n$ nest new hello-prisma\n```\n\n----------------------------------------\n\nTITLE: Referencing Dgeni CLI Tool in TypeScript\nDESCRIPTION: This snippet shows the location of the custom Dgeni CLI tool written in TypeScript. It's used to start a Dgeni package from the command line with TypeScript support.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/tools/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntools/dgeni-cli.ts\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS Schedule Package\nDESCRIPTION: Command to install the @nestjs/schedule package as a project dependency.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @nestjs/schedule\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to GitHub for NestJS PR\nDESCRIPTION: Command to push your local branch to GitHub in preparation for creating a pull request to the NestJS repository.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Branch After NestJS PR Merge\nDESCRIPTION: Command to delete the remote branch on GitHub after your pull request has been merged into the NestJS repository.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin --delete my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: Support Services Contact Layout in HTML\nDESCRIPTION: HTML structure for displaying the contact section with two columns - text content and action button.\nSOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/enterprise.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"contact-us\">\n  <div class=\"column column-text\">\n    <h5>Contact us!</h5>\n    <p>\n    Let's talk how we can help you become successful with NestJS.\n    </p> \n  </div>\n   <div class=\"column column-action\">\n     <a href=\"mailto:support@nestjs.com\">CONTACT US</a>\n   </div>\n</div>\n```"
  }
]