[
  {
    "owner": "denoland",
    "repo": "fresh",
    "content": "TITLE: Creating Island Component in Fresh with Preact\nDESCRIPTION: This TypeScript snippet shows how to create an Island component in a Fresh project using the Preact framework. It initializes a simple counter using Preact signals, which are incremented with a button click. The Island component supports client-side interactivity and requires '@preact/signals' as a dependency.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/islands.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useSignal } from \"@preact/signals\";\n\nexport default function MyIsland() {\n  const count = useSignal(0);\n\n  return (\n    <div>\n      Counter is at {count}.{\" \"}\n      <button onClick={() => (count.value += 1)}>+</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Countdown Component in Fresh\nDESCRIPTION: Implementation of an island component that displays a countdown timer to a target date. Uses Preact signals for state management and Intl.RelativeTimeFormat for time formatting. The component updates every second and shows a celebration emoji when the countdown ends.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/adding-interactivity.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignal } from \"@preact/signals\";\nimport { useEffect } from \"preact/hooks\";\n\nconst timeFmt = new Intl.RelativeTimeFormat(\"en-US\");\n\n// The target date is passed as a string instead of as a `Date`, because the\n// props to island components need to be JSON (de)serializable.\nexport default function Countdown(props: { target: string }) {\n  const target = new Date(props.target);\n  const now = useSignal(new Date());\n\n  // Set up an interval to update the `now` date every second with the current\n  // date as long as the component is mounted.\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (now.value > target) {\n        clearInterval(timer);\n      }\n      now.value = new Date();\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [props.target]);\n\n  const secondsLeft = Math.floor(\n    (target.getTime() - now.value.getTime()) / 1000,\n  );\n\n  // If the target date has passed, we stop counting down.\n  if (secondsLeft <= 0) {\n    return <span>🎉</span>;\n  }\n\n  // Otherwise, we format the remaining time using `Intl.RelativeTimeFormat` and\n  // render it.\n  return <span>{timeFmt.format(secondsLeft, \"seconds\")}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Handler Route in Fresh (TSX)\nDESCRIPTION: This snippet demonstrates how to create a simple handler route that returns a plain text response. It exports a handler object with a GET method that returns a 'Hello World' response.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/routes.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FreshContext, Handlers } from \"$fresh/server.ts\";\n\nexport const handler: Handlers = {\n  GET(_req: Request, _ctx: FreshContext) {\n    return new Response(\"Hello World\");\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Static Directory\nDESCRIPTION: This code snippet shows how to specify the location of static assets using the `staticDir` option in the `FreshConfig`. This allows you to customize where Fresh serves static files from.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait start(manifest, { staticDir: \"./custom_static\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Functionality with Form Submission in Fresh (TSX)\nDESCRIPTION: This code snippet demonstrates how to create a search form that filters an array of names server-side using Fresh's custom handlers. It includes both the server-side handler for processing the GET request and the client-side component for rendering the form and results.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/form-submissions.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Handlers, PageProps } from \"$fresh/server.ts\";\n\nconst NAMES = [\"Alice\", \"Bob\", \"Charlie\", \"Dave\", \"Eve\", \"Frank\"];\n\ninterface Data {\n  results: string[];\n  query: string;\n}\n\nexport const handler: Handlers<Data> = {\n  GET(req, ctx) {\n    const url = new URL(req.url);\n    const query = url.searchParams.get(\"q\") || \"\";\n    const results = NAMES.filter((name) => name.includes(query));\n    return ctx.render({ results, query });\n  },\n};\n\nexport default function Page({ data }: PageProps<Data>) {\n  const { results, query } = data;\n  return (\n    <div>\n      <form>\n        <input type=\"text\" name=\"q\" value={query} />\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {results.map((name) => <li key={name}>{name}</li>)}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Island Component in a Fresh Route\nDESCRIPTION: This snippet demonstrates the integration of an Island in a Fresh page. The 'Home' component imports and uses the 'MyIsland' component, making it part of the rendered page. This setup allows Fresh to handle server-side rendering and client-side hydration automatically.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/islands.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport MyIsland from \"../islands/my-island.tsx\";\n\nexport default function Home() {\n  return <MyIsland />;\n}\n```\n\n----------------------------------------\n\nTITLE: Fresh Route Handler Using Middleware State\nDESCRIPTION: Route handler demonstrating how to access state data set by middleware in Fresh framework.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/middleware.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: Handlers<any, { data: string }> = {\n  GET(_req, ctx) {\n    return new Response(`middleware data is ${ctx.state.data}`);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an About Page Route in Fresh (TSX)\nDESCRIPTION: This code snippet demonstrates how to create a new route for an 'About' page in a Fresh project. It exports a default function component that returns JSX, which will be rendered when a user visits the /about path.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/create-a-route.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function AboutPage() {\n  return (\n    <main>\n      <h1>About</h1>\n      <p>This is the about page.</p>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Async Layout Implementation in Fresh\nDESCRIPTION: Asynchronous layout implementation demonstrating data fetching before rendering\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/layouts.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FreshContext } from \"$fresh/server.ts\";\n\nexport default async function Layout(req: Request, ctx: FreshContext) {\n  // do something with state here\n  const data = await loadData();\n\n  return (\n    <div class=\"layout\">\n      <p>{data.greeting}</p>\n      <ctx.Component />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Fresh Project with Deno\nDESCRIPTION: Commands to create a new Fresh project, navigate to the project directory, and start the development server. This creates the initial project scaffold with necessary files and folders.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/create-a-project.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno run -A -r https://fresh.deno.dev\ncd fresh-project\ndeno task start\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering Project Data using Handler Function in Fresh (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to fetch project data using a GET handler function and render it in a page component. It includes type definitions for the project data and shows how to handle cases where the project is not found.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/data-fetching.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Project {\n  name: string;\n  stars: number;\n}\n\nexport const handler: Handlers<Project> = {\n  async GET(_req, ctx) {\n    const project = await db.projects.findOne({ id: ctx.params.id });\n    if (!project) {\n      return ctx.renderNotFound({\n        message: \"Project does not exist\",\n      });\n    }\n    return ctx.render(project);\n  },\n};\n\nexport default function ProjectPage(props: PageProps<Project>) {\n  return (\n    <div>\n      <h1>{props.data.name}</h1>\n      <p>{props.data.stars} stars</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using defineRoute Helper for Async Routes in Fresh (TSX)\nDESCRIPTION: This snippet demonstrates the use of the defineRoute helper function to create an async route with automatic type inference for function arguments.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/routes.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineRoute } from \"$fresh/server.ts\";\n\nexport default defineRoute(async (req, ctx) => {\n  const data = await loadData();\n\n  return (\n    <div class=\"page\">\n      <h1>Hello {data.name}</h1>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic Greeting Route in Fresh (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a dynamic route for greeting users in Fresh. It uses the PageProps interface to access the 'name' parameter from the URL and renders a personalized greeting.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/dynamic-routes.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PageProps } from \"$fresh/server.ts\";\n\nexport default function GreetPage(props: PageProps) {\n  const { name } = props.params;\n  return (\n    <main>\n      <p>Greetings to you, {name}!</p>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete MapIsland Implementation\nDESCRIPTION: Full implementation of the MapIsland component including all necessary imports, context creation, provider, and map component logic.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/client-side-components-and-libraries.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Leaflet from \"https://esm.sh/v135/@types/leaflet@1.9.4/index.d.ts\";\nimport { IS_BROWSER } from \"$fresh/runtime.ts\";\nimport { useContext, useEffect, useState } from \"preact/hooks\";\nimport { ComponentChildren, createContext } from \"preact\";\n\n// Create a context to hold Leaflet data/functions\nconst LeafletContext = createContext<typeof Leaflet | null>(null);\n\n// LeafletProvider component manages Leaflet loading and context\nfunction LeafletProvider(props: { children: ComponentChildren }) {\n  if (!IS_BROWSER) {\n    return <p>Leaflet must be loaded on the client. No children will render</p>;\n  }\n  const [value, setValue] = useState<typeof Leaflet | null>(null);\n  return (\n    <>\n      {/* Load Leaflet CSS */}\n      <link\n        rel=\"stylesheet\"\n        href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\"\n        integrity=\"sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=\"\n        crossorigin=\"\"\n      />\n      {/* Load Leaflet JS */}\n      <script\n        onLoad={() => setValue(window.L)}\n        src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"\n        integrity=\"sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=\"\n        crossorigin=\"\"\n      />\n      {/* Provide Leaflet context to children */}\n      <LeafletContext.Provider value={value}>\n        {props.children}\n      </LeafletContext.Provider>\n    </>\n  );\n}\n\n// MapComponent utilizes Leaflet context for rendering the map\nfunction MapComponent() {\n  const leaf = useContext(LeafletContext);\n  if (!leaf) return <div>Component placeholder</div>;\n  useEffect(() => {\n    const map = leaf.map(\"map\").setView(leaf.latLng(0, 0), 2);\n    leaf.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(map);\n  });\n  return <div id=\"map\" class=\"relative w-[80vw] h-[50vh]\" />;\n}\n\n// MapIsland is the parent component integrating LeafletProvider and MapComponent\nexport default function MapIsland() {\n  return (\n    <LeafletProvider>\n      <MapComponent />\n    </LeafletProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mixed Handler and Component Route in Fresh (TSX)\nDESCRIPTION: This snippet demonstrates a route with both a custom handler and a component. The handler adds a custom header to the response after rendering the component.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/routes.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HandlerContext, Handlers, PageProps } from \"$fresh/server.ts\";\n\nexport const handler: Handlers = {\n  async GET(_req: Request, ctx: HandlerContext) {\n    const resp = await ctx.render();\n    resp.headers.set(\"X-Custom-Header\", \"Hello World\");\n    return resp;\n  },\n};\n\nexport default function Page(props: PageProps) {\n  return <div>You are on the page '{props.url.href}'.</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom GET Handler with Header Modification in Fresh (TSX)\nDESCRIPTION: This code snippet demonstrates how to create a custom GET handler for a route in Fresh. It renders the page component, adds a custom header to the response, and includes a simple AboutPage component.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/custom-handlers.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Handlers } from \"$fresh/server.ts\";\n\nexport const handler: Handlers = {\n  async GET(_req, ctx) {\n    const resp = await ctx.render();\n    resp.headers.set(\"X-Custom-Header\", \"Hello\");\n    return resp;\n  },\n};\n\nexport default function AboutPage() {\n  return (\n    <main>\n      <h1>About</h1>\n      <p>This is the about page.</p>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Fresh Application Deployment\nDESCRIPTION: This Dockerfile sets up a container for running a Fresh application. It uses the Deno base image, sets the DENO_DEPLOYMENT_ID environment variable, copies the application files, caches dependencies, and specifies the command to run the application.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/deployment.md#2025-04-19_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM denoland/deno:1.38.3\n\nARG GIT_REVISION\nENV DENO_DEPLOYMENT_ID=${GIT_REVISION}\n\nWORKDIR /app\n\nCOPY . .\nRUN deno cache main.ts\n\nEXPOSE 8000\n\nCMD [\"run\", \"-A\", \"main.ts\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Fresh App Wrapper Implementation\nDESCRIPTION: Demonstrates the basic implementation of an app wrapper component in Fresh framework that provides a common HTML structure for all routes. Uses PageProps to access the Component and state.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/app-wrapper.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PageProps } from \"$fresh/server.ts\";\n\nexport default function App({ Component, state }: PageProps) {\n  // do something with state here\n  return (\n    <html>\n      <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My Fresh app</title>\n      </head>\n      <body>\n        <Component />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Handler Implementation for User List and Creation\nDESCRIPTION: Full implementation of handlers for GET (list all users) and POST (create new user) operations.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/creating-a-crud-api.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Handlers } from \"$fresh/server.ts\";\n\ntype User = {\n  id: string;\n  name: string;\n};\n\nconst kv = await Deno.openKv();\n\nexport const handler: Handlers<User | null> = {\n  async GET(_req, _ctx) {\n    const users = [];\n    for await (const res of kv.list({ prefix: [\"user\"] })) {\n      users.push(res.value);\n    }\n    return new Response(JSON.stringify(users));\n  },\n  async POST(req, _ctx) {\n    const user = (await req.json()) as User;\n    const userKey = [\"user\", user.id];\n    const ok = await kv.atomic().set(userKey, user).commit();\n    if (!ok) throw new Error(\"Something went wrong.\");\n    return new Response(JSON.stringify(user));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Different HTTP Methods in Async Route Components (TSX)\nDESCRIPTION: This snippet demonstrates how to handle different HTTP methods in an async route component. It includes a POST handler and an async component function.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/routes.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const handler: Handlers = {\n  async POST(req) {\n    // ... do something here\n  },\n};\n\nexport default async function MyPage(req: Request, ctx: RouteContext) {\n  const value = await loadFooValue();\n  return <p>foo is: {value}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Async Fresh App Wrapper Implementation\nDESCRIPTION: Shows how to create an asynchronous app wrapper that can load data before rendering. Takes Request and FreshContext as parameters instead of PageProps.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/app-wrapper.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FreshContext } from \"$fresh/server.ts\";\n\nexport default async function App(req: Request, ctx: FreshContext) {\n  const data = await loadData();\n\n  return (\n    <html>\n      <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My Fresh app</title>\n      </head>\n      <body>\n        <h1>Hello {data.name}</h1>\n        <ctx.Component />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Route Pattern in Fresh\nDESCRIPTION: Example showing how to override the default routing pattern using RouteConfig in Fresh. Demonstrates setting a custom URL pattern for more complex routing scenarios.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/routing.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RouteConfig } from \"$fresh/server.ts\";\n\nexport const config: RouteConfig = {\n  routeOverride: \"/x/:module@:version/:path*\",\n};\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom 404 Not Found Page in Fresh (TypeScript/TSX)\nDESCRIPTION: This snippet shows how to create a custom 404 Not Found page in Fresh by creating a _404.tsx file in the routes/ folder. It exports a Preact component that receives PageProps and renders a custom 404 message.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/error-pages.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PageProps } from \"$fresh/server.ts\";\n\nexport default function NotFoundPage({ url }: PageProps) {\n  return <p>404 not found: {url.pathname}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Handler for User Creation\nDESCRIPTION: Demonstrates how to create a POST handler to add a new user to the Deno KV database.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/creating-a-crud-api.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: Handlers<User | null> = {\n  async POST(req, _ctx) {\n    const user = (await req.json()) as User;\n    const userKey = [\"user\", user.id];\n    const ok = await kv.atomic().set(userKey, user).commit();\n    if (!ok) throw new Error(\"Something went wrong.\");\n    return new Response(JSON.stringify(user));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Handler Implementation for User Operations\nDESCRIPTION: Full implementation of handlers for GET, DELETE, and PUT operations on individual users.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/creating-a-crud-api.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Handlers } from \"$fresh/server.ts\";\n\ntype User = {\n  id: string;\n  name: string;\n};\n\nconst kv = await Deno.openKv();\n\nexport const handler: Handlers<User | null> = {\n  async GET(_req, ctx) {\n    const id = ctx.params.id;\n    const key = [\"user\", id];\n    const user = (await kv.get<User>(key)).value!;\n    return new Response(JSON.stringify(user));\n  },\n  async DELETE(_req, ctx) {\n    const id = ctx.params.id;\n    const userKey = [\"user\", id];\n    const userRes = await kv.get(userKey);\n    if (!userRes.value) return new Response(`no user with id ${id} found`);\n    const ok = await kv.atomic().check(userRes).delete(userKey).commit();\n    if (!ok) throw new Error(\"Something went wrong.\");\n    return new Response(`user ${id} deleted`);\n  },\n  async PUT(req, ctx) {\n    const id = ctx.params.id;\n    const user = (await req.json()) as User;\n    const userKey = [\"user\", id];\n    const userRes = await kv.get(userKey);\n    if (!userRes.value) return new Response(`no user with id ${id} found`);\n    const ok = await kv.atomic().check(userRes).set(userKey, user).commit();\n    if (!ok) throw new Error(\"Something went wrong.\");\n    return new Response(JSON.stringify(user));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Fresh Configuration Implementation\nDESCRIPTION: Complete implementation of fresh.config.ts showing integration with initialization context\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/init-the-server.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"$fresh/server.ts\";\nimport twindPlugin from \"$fresh/plugins/twind.ts\";\nimport twindConfig from \"./twind.config.ts\";\nimport { Context } from \"./routes/_middleware.ts\";\n\nawait Context.init();\n\nexport default defineConfig({\n  plugins: [twindPlugin(twindConfig)],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling POST Form Submissions in Fresh\nDESCRIPTION: Demonstrates handling form submissions with application/x-www-form-urlencoded content type. Shows both GET and POST handlers, form data extraction, and redirect implementation for a subscription form.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/forms.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Handlers } from \"$fresh/server.ts\";\n\nexport const handler: Handlers = {\n  async GET(req, ctx) {\n    return await ctx.render();\n  },\n  async POST(req, ctx) {\n    const form = await req.formData();\n    const email = form.get(\"email\")?.toString();\n\n    // Add email to list.\n\n    // Redirect user to thank you page.\n    const headers = new Headers();\n    headers.set(\"location\", \"/thanks-for-subscribing\");\n    return new Response(null, {\n      status: 303, // See Other\n      headers,\n    });\n  },\n};\n\nexport default function Subscribe() {\n  return (\n    <>\n      <form method=\"post\">\n        <input type=\"email\" name=\"email\" value=\"\" />\n        <button type=\"submit\">Subscribe</button>\n      </form>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Handler for User Retrieval\nDESCRIPTION: Shows how to create a GET handler to retrieve a user from the Deno KV database by ID.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/creating-a-crud-api.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: Handlers<User | null> = {\n  async GET(_req, ctx) {\n    const id = ctx.params.id;\n    const key = [\"user\", id];\n    const user = (await kv.get<User>(key)).value!;\n    return new Response(JSON.stringify(user));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Fresh Middleware with Request Logging\nDESCRIPTION: Example middleware implementation showing request logging and destination checking.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/middleware.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FreshContext } from \"$fresh/server.ts\";\n\nexport async function handler(req: Request, ctx: FreshContext) {\n  console.log(ctx.destination);\n  console.log(req.url);\n  const resp = await ctx.next();\n  return resp;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Async Route Component in Fresh (TSX)\nDESCRIPTION: This example shows how to create an async route component, which combines the handler and component into a single async function. It loads a value and renders it in the component.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/routes.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function MyPage(req: Request, ctx: RouteContext) {\n  const value = await loadFooValue();\n  return <p>foo is: {value}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Markdown Rendering in Fresh (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to handle dynamic routing for rendering Markdown content from different sources (remote, string, and file) in a Fresh application. It uses the `$gfm` module for Markdown rendering and includes front matter extraction.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/rendering-markdown.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Handlers, PageProps } from \"$fresh/server.ts\";\nimport { extract } from \"$std/front_matter/yaml.ts\";\nimport { CSS, render } from \"$gfm\";\nimport { Head } from \"$fresh/runtime.ts\";\n\ninterface Page {\n  markdown: string;\n  data: Record<string, unknown>;\n}\n\nexport const handler: Handlers<Page> = {\n  async GET(_req, ctx) {\n    let rawMarkdown = \"\";\n    if (ctx.params.slug === \"remote\") {\n      const resp = await fetch(\n        `https://raw.githubusercontent.com/denoland/fresh/main/docs/latest/introduction/index.md`,\n      );\n      if (resp.status !== 200) {\n        return ctx.render(undefined);\n      }\n      rawMarkdown = await resp.text();\n    } else if (ctx.params.slug === \"string\") {\n      rawMarkdown = `---\ndescription: test\n---\n\n## big text\n\nLook, it's working. _This is in italics._\n      \n      `;\n    } else if (ctx.params.slug === \"file\") {\n      rawMarkdown = await Deno.readTextFile(\"text.md\");\n    } else {\n      return ctx.render(undefined);\n    }\n    const { attrs, body } = extract(rawMarkdown);\n    return ctx.render({ markdown: body, data: attrs });\n  },\n};\n\nexport default function MarkdownPage({ data }: PageProps<Page | null>) {\n  if (!data) {\n    return <h1>File not found.</h1>;\n  }\n\n  return (\n    <>\n      <Head>\n        <style dangerouslySetInnerHTML={{ __html: CSS }} />\n      </Head>\n      <main>\n        <div>{JSON.stringify(data.data)}</div>\n        <div\n          class=\"markdown-body\"\n          dangerouslySetInnerHTML={{ __html: render(data?.markdown) }}\n        />\n      </main>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fresh App Wrapper Using defineApp Helper\nDESCRIPTION: Illustrates the use of defineApp helper function to create an async app wrapper with proper type inference, simplifying the implementation process.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/app-wrapper.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineApp } from \"$fresh/server.ts\";\n\nexport default defineApp(async (req, ctx) => {\n  const data = await loadData();\n\n  return (\n    <html>\n      <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My Fresh app</title>\n      </head>\n      <body>\n        <h1>Hello {data.name}</h1>\n        <ctx.Component />\n      </body>\n    </html>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Implementation in Fresh\nDESCRIPTION: Basic layout component implementation showing how to wrap content and access state from middleware\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/layouts.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PageProps } from \"$fresh/server.ts\";\n\nexport default function Layout({ Component, state }: PageProps) {\n  // do something with state here\n  return (\n    <div class=\"layout\">\n      <Component />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Island with Additional Props and Shared Components\nDESCRIPTION: This TypeScript snippet demonstrates how to create an Island component that not only uses Preact signals but also incorporates props, shared components, and standard DOM interactions to enhance interactivity on the client side.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/islands.md#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useSignal } from \"@preact/signals\";\nimport { ComponentChildren } from \"preact\";\nimport Card from \"../components/Card.tsx\";\nimport Button from \"../components/Button.tsx\";\n\ninterface Props {\n  children: ComponentChildren;\n}\n\nexport default function MyIsland({ children }: Props) {\n  const count = useSignal(0);\n\n  return (\n    <Card>\n      Counter is at {count}.{\" \"}\n      <Button onClick={() => (count.value += 1)}>+</Button>\n      {children}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Route for Random UUID Generation in Fresh (TS)\nDESCRIPTION: This snippet shows how to create an API route in Fresh that generates and returns a random UUID as a JSON response. It demonstrates handling GET requests without rendering a page component.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/custom-handlers.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Handlers } from \"$fresh/server.ts\";\n\nexport const handler: Handlers = {\n  GET(_req) {\n    const uuid = crypto.randomUUID();\n    return new Response(JSON.stringify(uuid), {\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Head Elements in Fresh TSX Route\nDESCRIPTION: This code snippet demonstrates how to use the <Head> component in a Fresh route to add various head elements including meta tags, title, stylesheet link, and script.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/modifying-the-head.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Head } from \"$fresh/runtime.ts\";\n\nexport default function Home() {\n  return (\n    <>\n      <Head>\n        <meta charset=\"UTF-8\" />\n        <title>Fresh App</title>\n        <meta\n          name=\"description\"\n          content=\"This is a brief description of Fresh\"\n        />\n        <link rel=\"stylesheet\" href=\"styles.css\" />\n        <script src=\"script.js\"></script>\n      </Head>\n      <div class=\"p-4 mx-auto max-w-screen-md\">\n        <h1>Hello World</h1>\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Partials in Fresh App Layout\nDESCRIPTION: Demonstrates how to enable partials for every page in the Fresh app by modifying the routes/_app.tsx file. It adds the f-client-nav attribute and wraps the main content with a Partial component.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/partials.md#2025-04-19_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff routes/_app.tsx\n  import { PageProps } from \"$fresh/server.ts\";\n+ import { Partial } from \"$fresh/runtime.ts\";\n\n  export default function App({ Component }: PageProps) {\n    return (\n      <html>\n        <head>\n          <meta charset=\"utf-8\" />\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n          <title>My Fresh app</title>\n        </head>\n-       <body>\n+       <body f-client-nav>\n+         <Partial name=\"body\">\n            <Component />\n+         </Partial>\n        </body>\n      </html>\n    );\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom 500 Internal Server Error Page in Fresh (TypeScript/TSX)\nDESCRIPTION: This code shows how to create a custom 500 Internal Server Error page in Fresh by creating a _500.tsx file in the routes/ folder. It exports a Preact component that receives PageProps and renders a custom error message.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/error-pages.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PageProps } from \"$fresh/server.ts\";\n\nexport default function Error500Page({ error }: PageProps) {\n  return <p>500 internal error: {(error as Error).message}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Simple CORS in Fresh Middleware - TypeScript\nDESCRIPTION: This middleware function enables CORS for simple HTTP requests (GET, HEAD, POST) by setting necessary headers to the response based on the incoming request's origin.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/dealing-with-cors.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FreshContext } from \"$fresh/server.ts\";\n\nexport async function handler(req: Request, ctx: FreshContext) {\n  const origin = req.headers.get(\"Origin\") || \"*\";\n  const resp = await ctx.next();\n  const headers = resp.headers;\n\n  headers.set(\"Access-Control-Allow-Origin\", origin);\n  headers.set(\"Access-Control-Allow-Credentials\", \"true\");\n  headers.set(\n    \"Access-Control-Allow-Headers\",\n    \"Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With\"\n  );\n  headers.set(\n    \"Access-Control-Allow-Methods\",\n    \"POST, OPTIONS, GET, PUT, DELETE\"\n  );\n\n  return resp;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DELETE Handler for User Removal\nDESCRIPTION: Shows how to create a DELETE handler to remove a user from the Deno KV database.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/creating-a-crud-api.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: Handlers<User | null> = {\n  async DELETE(_req, ctx) {\n    const id = ctx.params.id;\n    const userKey = [\"user\", id];\n    const userRes = await kv.get(userKey);\n    if (!userRes.value) return new Response(`no user with id ${id} found`);\n    const ok = await kv.atomic().check(userRes).delete(userKey).commit();\n    if (!ok) throw new Error(\"Something went wrong.\");\n    return new Response(`user ${id} deleted`);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Middleware\nDESCRIPTION: Middleware for protecting routes and handling authentication state\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/authentication-with-supabase.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FreshContext } from \"$fresh/server.ts\";\nimport { createSupabaseClient } from \"lib/supabase.ts\";\n\nexport const handler = [\n  async function authMiddleware(req: Request, ctx: FreshContext) {\n    const url = new URL(req.url);\n    const headers = new Headers();\n    headers.set(\"location\", \"/\");\n\n    const supabase = createSupabaseClient(req, headers);\n    const { error, data: { user } } = await supabase.auth.getUser();\n\n    const isProtectedRoute = url.pathname.includes(\"secret\");\n\n    if (error && error.status !== 401) throw error;\n\n    if (isProtectedRoute && !user) {\n      return new Response(null, { status: 303, headers });\n    }\n\n    ctx.state.user = user;\n\n    return ctx.next();\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Route Configuration in Fresh (TypeScript)\nDESCRIPTION: This snippet showcases a more complex route configuration using RouteConfig in Fresh. It defines a handler for GET requests and a route pattern with optional parameters and regex groups for specific resource types.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/handling-complex-routes.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FreshContext, RouteConfig } from \"$fresh/server.ts\";\n\nexport const handler = {\n  GET(_req: Request, { params }: FreshContext) {\n    console.log(params);\n    return new Response(params.path);\n  },\n};\n\nexport const config: RouteConfig = {\n  routeOverride: \"/api/db/:resource(jobs?|bar)/:id(\\\\d+)?\",\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Fresh Middleware with State Management\nDESCRIPTION: Basic middleware implementation showing state management and response header modification. Uses Fresh framework's context and state interface for data passing.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/middleware.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FreshContext } from \"$fresh/server.ts\";\n\ninterface State {\n  data: string;\n}\n\nexport async function handler(\n  req: Request,\n  ctx: FreshContext<State>,\n) {\n  ctx.state.data = \"myData\";\n  const resp = await ctx.next();\n  resp.headers.set(\"server\", \"fresh server\");\n  return resp;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Partials in a Single Response\nDESCRIPTION: Illustrates how to send multiple partials in a single HTTP response, updating different areas of the page simultaneously. This example shows updating a cart in an online shop scenario.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/partials.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx routes/partials/cart.tsx\nexport default function AddToCartPartial() {\n  return (\n    <>\n      <Partial name=\"cart-items\" mode=\"append\">\n        {/* Render the new cart item here */}\n      </Partial>\n      <Partial name=\"total-price\">\n        <p>Total: {totalPrice} €</p>\n      </Partial>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Fresh Layouts\nDESCRIPTION: Example directory structure showing layout file placement and inheritance hierarchy in a Fresh project\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/layouts.md#2025-04-19_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n└── routes\n    ├── sub\n    │   ├── page.tsx\n    │   └── index.tsx\n    ├── other\n    │   ├── _layout.tsx  # will be applied on top of `routes/_layout.tsx`\n    │   └── page.tsx\n    ├── _layout.tsx  # will be applied to all routes\n    └── _app.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Cart State Management\nDESCRIPTION: A set of components sharing global cart state using a exported signal. Includes cart management utilities and display components.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/sharing-state-between-islands.md#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { signal } from \"@preact/signals\";\n\nexport const cart = signal<string[]>([]);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"../components/Button.tsx\";\nimport { cart } from \"../utils/cart.ts\";\n\ninterface AddToCartProps {\n  product: string;\n}\n\n// This island is used to add a product to the cart state.\nexport default function AddToCart(props: AddToCartProps) {\n  return (\n    <Button\n      onClick={() => (cart.value = [...cart.value, props.product])}\n      class=\"w-full\"\n    >\n      Add{cart.value.includes(props.product) ? \" another\" : \"\"} \"{props.product}\n      \" to cart\n    </Button>\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"../components/Button.tsx\";\nimport { cart } from \"../utils/cart.ts\";\nimport * as icons from \"../components/Icons.tsx\";\n\n// This island is used to display the cart contents and remove items from it.\nexport default function Cart() {\n  return (\n    <h1 class=\"text-xl flex items-center justify-center\">\n      Cart\n    </h1>\n\n    <ul class=\"w-full bg-gray-50 mt-2 p-2 rounded min-h-[6.5rem]\">\n      {cart.value.length === 0 && (\n        <li class=\"text-center my-4\">\n          <div class=\"text-gray-400\">\n            <icons.Cart class=\"w-8 h-8 inline-block\" />\n            <div>\n              Your cart is empty.\n            </div>\n          </div>\n        </li>\n      )}\n      {cart.value.map((product, index) => (\n        <CartItem product={product} index={index} />\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Server Client\nDESCRIPTION: Setup of Supabase server client with PKCE flow configuration and cookie handling\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/authentication-with-supabase.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deleteCookie, getCookies, setCookie } from \"$std/http/cookie.ts\";\nimport { assert } from \"$std/assert/assert.ts\";\nimport { type CookieOptions, createServerClient } from \"supabase/ssr\";\n\nexport function createSupabaseClient(\n  req: Request,\n  resHeaders = new Headers(),\n) {\n  const SUPABASE_URL = Deno.env.get(\"SUPABASE_URL\");\n  const SUPABASE_ANON_KEY = Deno.env.get(\"SUPABASE_ANON_KEY\");\n\n  assert(\n    SUPABASE_URL && SUPABASE_ANON_KEY,\n    \"SUPABASE URL and SUPABASE_ANON_KEY environment variables must be set.\"\n  );\n\n  return createServerClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n    auth: { flowType: \"pkce\" },\n    cookies: {\n      get(name: string) {\n        return decodeURIComponent(getCookies(req.headers)[name]);\n      },\n      set(name: string, value: string, options: CookieOptions) {\n        setCookie(resHeaders, {\n          name,\n          value: encodeURIComponent(value),\n          ...options,\n        });\n      },\n      remove(name: string, options: CookieOptions) {\n        deleteCookie(resHeaders, name, options);\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload Implementation in Fresh\nDESCRIPTION: Implementation of file upload handling using multipart/form-data encoding. Includes file validation, content extraction, and status message display with TypeScript interfaces for props management.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/forms.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Handlers, type PageProps } from \"$fresh/server.ts\";\n\ninterface Props {\n  message: string | null;\n}\n\nexport const handler: Handlers<Props> = {\n  async GET(req, ctx) {\n    return await ctx.render({\n      message: null,\n    });\n  },\n  async POST(req, ctx) {\n    const form = await req.formData();\n    const file = form.get(\"my-file\") as File;\n\n    if (!file) {\n      return ctx.render({\n        message: `Please try again`,\n      });\n    }\n\n    const name = file.name;\n    const contents = await file.text();\n\n    console.log(contents);\n\n    return ctx.render({\n      message: `${name} uploaded!`,\n    });\n  },\n};\n\nexport default function Upload(props: PageProps<Props>) {\n  const { message } = props.data;\n  return (\n    <>\n      <form method=\"post\" encType=\"multipart/form-data\">\n        <input type=\"file\" name=\"my-file\" />\n        <button type=\"submit\">Upload</button>\n      </form>\n      {message ? <p>{message}</p> : null}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Routes with Fresh Handlers and Components\nDESCRIPTION: Defines two route files - index.tsx with POST handler and HomePage component, and foo.tsx with FooPage component. The index route includes form data processing and redirect functionality.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/writing-tests.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Handlers } from \"$fresh/server.ts\";\n\nexport const handler: Handlers = {\n  async POST(req) {\n    const form = await req.formData();\n\n    // Processing something\n\n    return new Response(null, {\n      status: 303,\n      headers: { location: \"/\" },\n    });\n  },\n};\n\nexport default function HomePage() {\n  return <div>Hello Deno!</div>;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function FooPage() {\n  return <div>Hello Foo!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling CSP Violation Reports in Fresh Framework\nDESCRIPTION: This code snippet implements a route handler that processes CSP violation reports sent to the server. It reads JSON data from POST requests and appends the formatted report to a local file, `csp-reports.txt`. The functionality assumes an environment where Deno's standard library is available for file operations. The output is stored in a local text file, expecting JSON input from CSP report submissions.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-csp.md#2025-04-19_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { FreshContext } from \"$fresh/server.ts\";\n\nexport const handler = {\n  async POST(req: Request, _ctx: FreshContext) {\n    const body = await req.json();\n    const report = JSON.stringify(body, null, 2);\n\n    await Deno.writeTextFile(\"./csp-reports.txt\", report + \"\\n\", {\n      append: true,\n    });\n    return new Response(null, { status: 200 });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Island with Children Support in Preact\nDESCRIPTION: This TypeScript code snippet defines an Island component that accepts JSX children. It uses the 'ComponentChildren' type from Preact and demonstrates how to include children content in the component’s rendered output.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/islands.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useSignal } from \"@preact/signals\";\nimport { ComponentChildren } from \"preact\";\n\ninterface Props {\n  children: ComponentChildren;\n}\n\nexport default function MyIsland({ children }: Props) {\n  const count = useSignal(0);\n\n  return (\n    <div>\n      Counter is at {count}.{\" \"}\n      <button onClick={() => (count.value += 1)}>+</button>\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Append Mode for Log View Partial\nDESCRIPTION: Demonstrates the use of the 'append' mode in a Partial component, which is useful for displaying log messages or list-like data that needs to be appended to existing content.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/partials.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nexport default function LogView() {\n  const lines = getNewLogLines();\n\n  return (\n    <Partial name=\"logs-list\" mode=\"append\">\n      {lines.map((line) => {\n        return <li key={line}>{line}</li>;\n      })}\n    </Partial>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Route and Middleware Plugin in TypeScript\nDESCRIPTION: This example demonstrates creating a Fresh plugin that adds custom routes and middlewares to the application.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/plugins.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MiddlewareHandlerContext, Plugin } from \"$fresh/server.ts\";\nimport { handler as testMiddleware } from \"./sample_routes/_middleware.ts\";\nimport { SimpleRoute } from \"./sample_routes/simple-route.tsx\";\nexport type { Options };\n\ninterface Options {\n  title: string;\n}\nexport type PluginMiddlewareState = {\n  num: number;\n  test: string;\n};\n\nconst twoPointlessMiddlewares = [\n  async (\n    _req: Request,\n    ctx: MiddlewareHandlerContext<PluginMiddlewareState>,\n  ) => {\n    ctx.state.num = ctx.state.num === undefined ? 1 : ctx.state.num + 1;\n    return await ctx.next();\n  },\n  async (\n    _req: Request,\n    ctx: MiddlewareHandlerContext<PluginMiddlewareState>,\n  ) => {\n    ctx.state.num = ctx.state.num === undefined ? 1 : ctx.state.num + 1;\n    return await ctx.next();\n  },\n];\n\nexport default function routePlugin(\n  options: Options,\n): Plugin<PluginMiddlewareState> {\n  return {\n    name: \"routePlugin\",\n    middlewares: [{\n      middleware: { handler: testMiddleware },\n      path: \"/\",\n    }, {\n      middleware: {\n        handler: twoPointlessMiddlewares,\n      },\n      path: \"lots-of-middleware\",\n    }],\n    routes: [\n      { path: \"no-leading-slash-here\", component: SimpleRoute },\n    ],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering Project Data using Asynchronous Route in Fresh (TypeScript/TSX)\nDESCRIPTION: This snippet shows an alternative approach to fetching and rendering project data using an asynchronous route function. It combines the data fetching and rendering logic into a single async function, simplifying the code structure.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/data-fetching.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Project {\n  name: string;\n  stars: number;\n}\n\nexport default async function ProjectPage(_req, ctx: FreshContext) {\n  const project: Project | null = await db.projects.findOne({\n    id: ctx.params.id,\n  });\n\n  if (!project) {\n    return <h1>Project not found</h1>;\n  }\n\n  return (\n    <div>\n      <h1>{project.name}</h1>\n      <p>{project.stars} stars</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Tailwind CSS Plugin in Fresh Development Server\nDESCRIPTION: This snippet shows how to configure a Fresh development server with Tailwind CSS support. It imports the Tailwind plugin, initializes a development app, enables Tailwind, and sets up server listening or build operations based on command-line arguments.\nSOURCE: https://github.com/denoland/fresh/blob/main/plugin-tailwindcss/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// dev.ts\n\nimport { tailwind } from \"@fresh/plugin-tailwind\";\nimport { FreshDevApp } from \"fresh/dev\";\nimport { app } from \"./main.ts\";\n\nconst devApp = new FreshDevApp();\n\n// Enable Tailwind CSS\ntailwind(devApp);\n\ndevApp.mountApp(\"/\", app);\n\nif (Deno.args.includes(\"build\")) {\n  await devApp.build({\n    target: \"safari12\",\n  });\n} else {\n  await devApp.listen();\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting and Using Props in Islands\nDESCRIPTION: This TypeScript snippet shows how to nest Islands within each other and utilize passed props, which must be serializable. It highlights the capability of Fresh to serialize and deserialize properties efficiently for use across client and server.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/islands.md#2025-04-19_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useSignal } from \"@preact/signals\";\nimport { ComponentChildren } from \"preact\";\n\ninterface Props {\n  children: ComponentChildren;\n  foo: string;\n}\n\nfunction randomNumber() {\n  return Math.floor(Math.random() * 100);\n}\n\nexport default function OtherIsland({ children, foo }: Props) {\n  const number = useSignal(randomNumber());\n\n  return (\n    <div>\n      <p>String from props: {foo}</p>\n      <p>\n        <button onClick={() => (number.value = randomNumber())}>Random</button>\n        {\" \"}\n        number is: {number}.\n      </p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in API Handler\nDESCRIPTION: API endpoint handler for user authentication\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/authentication-with-supabase.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Handlers } from \"$fresh/server.ts\";\nimport { createSupabaseClient } from \"lib/supabase.ts\";\n\nexport const handler: Handlers = {\n  async POST(req) {\n    const form = await req.formData();\n    const email = form.get(\"email\")!;\n    const password = form.get(\"password\")!;\n\n    const headers = new Headers();\n    headers.set(\"location\", \"/\");\n\n    const supabase = createSupabaseClient(req, headers);\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) throw error;\n\n    return new Response(null, { status: 303, headers });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Route Groups Project Structure Example\nDESCRIPTION: Directory structure example showing how route groups are organized in a Fresh project. Demonstrates layout organization with marketing and career pages.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/routing.md#2025-04-19_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n└── routes\n    ├── (marketing)\n    │   ├── _layout.tsx  # only applies to about.tsx and career.tsx\n    │   ├── about.tsx\n    │   └── career.tsx\n    └── (info)\n        ├── _layout.tsx  # only applies to archive.tsx and contact.tsx\n        ├── archive.tsx\n        └── contact.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Only Rendering in Islands\nDESCRIPTION: This snippet demonstrates how to handle client-only features in a Fresh project by employing the 'IS_BROWSER' flag to guard against server-side execution of incompatible code. This pattern preserves the prerenderable JSX while deferring specific tasks like EventSource to the browser runtime.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/islands.md#2025-04-19_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { IS_BROWSER } from \"$fresh/runtime.ts\";\n\nexport function MyIsland() {\n  // Return any prerenderable JSX here which makes sense for your island\n  if (!IS_BROWSER) return <div></div>;\n\n  // All the code which must run in the browser comes here!\n  // Like: EventSource, navigator.getUserMedia, etc.\n  return <div></div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing NotFound Error in Fresh Route Handler (TypeScript)\nDESCRIPTION: This snippet shows an alternative way to trigger a 404 page by throwing a Deno.errors.NotFound error in the route handler. This method doesn't allow passing custom data to the 404 page.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/error-pages.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Handlers } from \"$fresh/server.ts\";\n\nexport const handler: Handlers = {\n  GET(_req, _ctx) {\n    throw new Deno.errors.NotFound();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-up API Handler\nDESCRIPTION: API endpoint handler for user registration with Supabase\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/authentication-with-supabase.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FreshContext, Handlers } from \"$fresh/server.ts\";\nimport { createSupabaseClient } from \"lib/supabase.ts\";\n\nexport const handler: Handlers = {\n  async POST(req: Request, _ctx: FreshContext) {\n    const form = await req.formData();\n    const email = form.get(\"email\");\n    const password = form.get(\"password\");\n\n    const headers = new Headers();\n    headers.set(\"location\", \"/sign-in\");\n\n    const supabase = createSupabaseClient(req);\n    const { error } = await supabase.auth.signUp({\n      email: String(email),\n      password: String(password),\n    });\n\n    if (error) throw error;\n\n    return new Response(null, { status: 303, headers });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Writing HTTP Tests with Fresh Handler\nDESCRIPTION: Implements test cases for route handling using createHandler. Tests include GET and POST requests to the root path and GET request to /foo path, with assertions for response status and content.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/writing-tests.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createHandler, ServeHandlerInfo } from \"$fresh/server.ts\";\nimport manifest from \"../fresh.gen.ts\";\nimport config from \"../fresh.config.ts\";\nimport { assert, assertEquals } from \"$std/testing/asserts.ts\";\n\nconst CONN_INFO: ServeHandlerInfo = {\n  remoteAddr: { hostname: \"127.0.0.1\", port: 53496, transport: \"tcp\" },\n};\n\nDeno.test(\"HTTP assert test.\", async (t) => {\n  const handler = await createHandler(manifest, config);\n\n  await t.step(\"#1 GET /\", async () => {\n    const resp = await handler(new Request(\"http://127.0.0.1/\"), CONN_INFO);\n    assertEquals(resp.status, 200);\n  });\n\n  await t.step(\"#2 POST /\", async () => {\n    const formData = new FormData();\n    formData.append(\"text\", \"Deno!\");\n    const req = new Request(\"http://127.0.0.1/\", {\n      method: \"POST\",\n      body: formData,\n    });\n    const resp = await handler(req, CONN_INFO);\n    assertEquals(resp.status, 303);\n  });\n\n  await t.step(\"#3 GET /foo\", async () => {\n    const resp = await handler(new Request(\"http://127.0.0.1/foo\"), CONN_INFO);\n    const text = await resp.text();\n    assert(text.includes(\"<div>Hello Foo!</div>\"));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Fresh Application\nDESCRIPTION: This code snippet shows the signature of the `start` function in Fresh, which is the entry point for starting the application. It takes a `Manifest` and an optional `FreshConfig` object as parameters.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function start(manifest: Manifest, config: FreshConfig = {});\n```\n\n----------------------------------------\n\nTITLE: Configuring outDir\nDESCRIPTION: This code snippet shows how to configure the output directory for generated files during the build process. It uses the `outDir` option within the `build` property of the `FreshConfig` object.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nawait dev(import.meta.url, \"./main.ts\", {\n  build: {\n    outDir: Deno.env.get(\"FRESH_TEST_OUTDIR\") ?? undefined,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Server Configuration\nDESCRIPTION: This code block presents the available configuration options within the `server` property of the `FreshConfig` object. It outlines the parameters for server configuration, including certificate paths, port, hostname, and callbacks for error handling and server start events.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nserver: {\n  /** Server private key in PEM format */\n  cert: string;\n\n  /** Cert chain in PEM format */\n  key: string;\n\n  /** The port to listen on.\n   *\n   * @default {8000} */\n  port?: number;\n\n  /** A literal IP address or host name that can be resolved to an IP address.\n   *\n   * __Note about `0.0.0.0`__ While listening `0.0.0.0` works on all platforms,\n   * the browsers on Windows don't work with the address `0.0.0.0`.\n   * You should show the message like `server running on localhost:8080` instead of\n   * `server running on 0.0.0.0:8080` if your program supports Windows.\n   *\n   * @default {\"0.0.0.0\"} */\n  hostname?: string;\n\n  /** An {@linkcode AbortSignal} to close the server and all connections. */\n  signal?: AbortSignal;\n\n  /** Sets `SO_REUSEPORT` on POSIX systems. */\n  reusePort?: boolean;\n\n  /** The handler to invoke when route handlers throw an error. */\n  onError?: (error: unknown) => Response | Promise<Response>;\n\n  /** The callback which is called when the server starts listening. */\n  onListen?: (params: { hostname: string; port: number }) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Code Syntax Highlighting Component Implementation\nDESCRIPTION: Implementation of a Preact-based syntax highlighting component using PrismJS and dangerouslySetInnerHTML to render formatted code blocks.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/rendering-raw-html.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Prism from \"https://esm.sh/prismjs@1.29.0\";\n\ninterface Props {\n  code: string;\n  lang: string;\n}\n\nexport default function Code({ code, lang }: Props) {\n  const parsed = Prism.highlight(code, Prism.languages[lang], lang);\n\n  return (\n    <pre data-lang={lang} className={`language-${lang}`}>\n      <code\n        dangerouslySetInnerHTML={{\n          __html: parsed,\n        }}\n      />\n    </pre>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Different Response Types in Async Route Components (TSX)\nDESCRIPTION: This example shows how to return different types of responses from an async route component, including 404 errors and redirects.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/routes.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function MyPage(req: Request, ctx: RouteContext) {\n  const value = await loadFooValue();\n\n  if (value === null) {\n    return ctx.renderNotFound();\n  }\n\n  if (value === \"redirect\") {\n    const headers = new Headers();\n    headers.set(\"location\", \"/some-other-page\");\n    return new Response(null, {\n      status: 302,\n      headers,\n    });\n  }\n\n  return <p>foo is: {value}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Co-location Project Structure Example\nDESCRIPTION: Directory structure demonstrating co-location pattern in Fresh, showing how to organize components and islands alongside routes using private folders.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/routing.md#2025-04-19_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n└── routes\n    ├── (marketing)\n    │   ├── _layout.tsx\n    │   ├── about.tsx\n    │   ├── career.tsx\n    │   ├── (_components)\n    │   │   └── newsletter-cta.tsx\n    │   └── (_islands)\n    │       └── interactive-stats.tsx # Fresh treats this as an island\n    └── shop\n        ├── (_components)\n        │   └── product-card.tsx\n        └── (_islands)\n            └── cart.tsx # Fresh treats this as an island\n```\n\n----------------------------------------\n\nTITLE: Implementing Leaflet Provider Component\nDESCRIPTION: Creates a provider component that handles Leaflet library loading and context distribution. Includes server-side fallback and client-side initialization.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/client-side-components-and-libraries.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction LeafletProvider(props: { children: ComponentChildren }) {\n  if (!IS_BROWSER) {\n    return (\n      <p>Leaflet must be loaded on the client. No children will render</p>\n    );\n  }\n  const [value, setValue] = useState<typeof Leaflet | null>(null);\n  return (\n    <>\n      {/* Load Leaflet CSS */}\n      <link\n        rel=\"stylesheet\"\n        href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\"\n        integrity=\"sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=\"\n        crossorigin=\"\"\n      />\n      {/* Load Leaflet JS */}\n      <script\n        onLoad={() => setValue(window.L)}\n        src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"\n        integrity=\"sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=\"\n        crossorigin=\"\"\n      />\n      {/* Provide Leaflet context to children */}\n      <leafletContext.Provider value={value}>\n        {props.children}\n      </leafletContext.Provider>\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Fresh with Plugins (TypeScript)\nDESCRIPTION: Defines a Fresh configuration file with plugins, used for both development and production environments.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/ahead-of-time-builds.md#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from \"$fresh/server.ts\";\nimport twindPlugin from \"$fresh/plugins/twind.ts\";\nimport twindConfig from \"./twind.config.ts\";\n\nexport default defineConfig({\n  plugins: [twindPlugin(twindConfig)],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronized Slider Components with Shared State\nDESCRIPTION: A slider component that shares state between multiple instances using a passed signal prop. All instances update and display the same value.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/sharing-state-between-islands.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Signal } from \"@preact/signals\";\n\ninterface SliderProps {\n  slider: Signal<number>;\n}\n\n// This island displays a slider with a value equal to the `slider` signal's\n// value. When the slider is moved, the `slider` signal is updated.\nexport default function SynchronizedSlider(props: SliderProps) {\n  return (\n    <input\n      class=\"w-full\"\n      type=\"range\"\n      min={1}\n      max={100}\n      value={props.slider.value}\n      onInput={(e) => (props.slider.value = Number(e.currentTarget.value))}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Correct CSP in Fresh Route (TypeScript/JSX)\nDESCRIPTION: This code snippet demonstrates the correct implementation of CSP in a Fresh route. It uses the correct URL in the styleSrc directive, allowing the stylesheet to be applied.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-csp.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RouteConfig, RouteContext } from \"$fresh/server.ts\";\nimport { useCSP } from \"$fresh/runtime.ts\";\n\nexport default function Home(req: Request, ctx: RouteContext) {\n  useCSP((csp) => {\n    if (!csp.directives.styleSrc) {\n      csp.directives.styleSrc = [];\n    }\n    csp.directives.styleSrc.push(\"http://localhost:8000/example.css\");\n  });\n  return (\n    <>\n      <h1>This page adheres to our configured CSP. Styles will be applied.</h1>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"example.css\" />\n    </>\n  );\n}\n\nexport const config: RouteConfig = {\n  csp: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Slash\nDESCRIPTION: This code snippet demonstrates how to configure Fresh to append a trailing slash to URLs using the `trailingSlash` option in the `router` property of the `FreshConfig` object.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait start(manifest, { router: { trailingSlash: true } });\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Page in Fresh 2\nDESCRIPTION: Example of how to implement a unified error page (_error.tsx) in Fresh 2, handling different error types and status codes.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/canary/examples/migration-guide.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ErrorPage(props: PageProps) {\n  const error = props.error; // Contains the thrown Error or HTTPError\n  if (error instanceof HttpError) {\n    const status = error.status; // HTTP status code\n\n    // Render a 404 not found page\n    if (status === 404) {\n      return <h1>404 - Page not found</h1>;\n    }\n  }\n\n  return <h1>Oh no...</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Report-Only CSP in Fresh Framework\nDESCRIPTION: This code defines a route in a Fresh application where a report-only Content Security Policy (CSP) is configured. The key functionality includes setting the `reportOnly` flag to log CSP violations instead of enforcing them and specifying a `reportUri` where reports should be sent. No specific external dependencies are required, but it assumes a working Fresh setup. The snippet outputs a webpage indicating that a report-only CSP is applied.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-csp.md#2025-04-19_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RouteConfig, RouteContext } from \"$fresh/server.ts\";\nimport { useCSP } from \"$fresh/runtime.ts\";\n\nexport default function Home(req: Request, ctx: RouteContext) {\n  useCSP((csp) => {\n    csp.reportOnly = true;\n    if (!csp.directives.styleSrc) {\n      csp.directives.styleSrc = [];\n    }\n    csp.directives.reportUri = \"http://localhost:8000/reportHandler\";\n    csp.directives.styleSrc.push(\"http://www.example.com\");\n  });\n  return (\n    <>\n      <h1>\n        This page violates our configured CSP. But we\\'re using \"reportOnly\".\n        Styles will be applied.\n      </h1>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"example.css\" />\n    </>\n  );\n}\n\nexport const config: RouteConfig = {\n  csp: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Fresh Application\nDESCRIPTION: This command builds a Docker image for a Fresh application, using the Git revision as the DENO_DEPLOYMENT_ID. It tags the image as 'my-fresh-app'.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/deployment.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ docker build --build-arg GIT_REVISION=$(git rev-parse HEAD) -t my-fresh-app .\n```\n\n----------------------------------------\n\nTITLE: Updating Handler Signature in Fresh 2\nDESCRIPTION: Example of how to update the handler signature in Fresh 2, consolidating the request and context parameters.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/canary/examples/migration-guide.md#2025-04-19_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n  export const handler = {\n-   GET(req, ctx) {\n+   GET(ctx) {\n      return new Response(\"ok\");\n    },\n  };\n```\n\n----------------------------------------\n\nTITLE: Implementing Independent Counter Island in Fresh\nDESCRIPTION: A counter component implementation using local state with Preact signals. Each instance maintains its own independent count state, initialized with a start prop.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/sharing-state-between-islands.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignal } from \"@preact/signals\";\nimport { Button } from \"../components/Button.tsx\";\n\ninterface CounterProps {\n  start: number;\n}\n\n// This island is used to display a counter and increment/decrement it. The\n// state for the counter is stored locally in this island.\nexport default function Counter(props: CounterProps) {\n  const count = useSignal(props.start);\n  return (\n    <div class=\"flex gap-2 items-center w-full\">\n      <p class=\"flex-grow-1 font-bold text-xl\">{count}</p>\n      <Button onClick={() => count.value--}>-1</Button>\n      <Button onClick={() => count.value++}>+1</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Nested Islands in Home Component\nDESCRIPTION: This TypeScript snippet illustrates how to compose multiple Islands within a Home component to achieve complex client-side interactivity while maintaining server-side rendering. Serialized props are passed to nested Islands.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/islands.md#2025-04-19_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport MyIsland from \"../islands/my-island.tsx\";\nimport OtherIsland from \"../islands/other-island.tsx\";\n\nexport default function Home() {\n  return (\n    <div>\n      <MyIsland>\n        <OtherIsland foo=\"this prop will be serialized\" />\n      </MyIsland>\n      <p>Some more server rendered text</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: RouterOptions Interface\nDESCRIPTION: This defines the `RouterOptions` interface for configuring the Fresh router. It includes options for trailing slash behavior, ignoring files with a specific pattern, and serving fresh from a base path.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RouterOptions {\n  /**\n   *  Controls whether Fresh will append a trailing slash to the URL.\n   *  @default {false}\n   */\n  trailingSlash?: boolean;\n  /**\n   *  Configures the pattern of files to ignore in islands and routes.\n   *\n   *  By default Fresh will ignore test files,\n   *  for example files with a `.test.ts` or a `_test.ts` suffix.\n   *\n   *  @default {/(?:[^/]*_|[^/]*\\.|)test\\.(?:ts|tsx|mts|js|mjs|jsx|)\\/$\\/*$/}\n   */\n  ignoreFilePattern?: RegExp;\n  /**\n   * Serve fresh from a base path instead of from the root.\n   *   \"/foo/bar\" -> http://localhost:8000/foo/bar\n   * @default {undefined}\n   */\n  basePath?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating main.ts for Fresh 2\nDESCRIPTION: Example of how to update the main.ts file for Fresh 2, including setting up the App class and configuring production-related settings.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/canary/examples/migration-guide.md#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// main.ts\nimport { App, fsRoutes, staticFiles } from \"fresh\";\n\nexport const app = new App()\n  // Add static file serving middleware\n  .use(staticFiles());\n\n// Enable file-system based routing\nawait fsRoutes(app, {\n  loadIsland: (path) => import(`./islands/${path}`),\n  loadRoute: (path) => import(`./routes/${path}`),\n});\n\n// If this module is called directly, start the server\nif (import.meta.main) {\n  await app.listen();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Route Without CSP in Fresh (TypeScript/JSX)\nDESCRIPTION: This code snippet demonstrates a route in Fresh that doesn't implement any Content Security Policy. It serves as a control example to show how styles are applied without CSP restrictions.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-csp.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RouteContext } from \"$fresh/server.ts\";\n\nexport default function Home(req: Request, ctx: RouteContext) {\n  return (\n    <>\n      <h1>This page doesn't use CSP at all. Styles will be applied.</h1>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"example.css\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Locking Asset Paths for Caching in Fresh (JSX)\nDESCRIPTION: Demonstrates how to use the 'asset' function from Fresh runtime to generate a 'locked' path for static assets, enabling long-term caching. This approach is useful for manually controlling cache busting for specific assets.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/static-files.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { asset } from \"$fresh/runtime.ts\";\n\nexport default function Page() {\n  return (\n    <p>\n      <a href={asset(\"/brochure.pdf\")}>View brochure</a>\n    </p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Typical Documentation Page with Partials\nDESCRIPTION: Demonstrates the implementation of a documentation page layout using partials. It shows how to structure the main content and sidebar using the Partial component.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/partials.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx routes/docs/[id].tsx\nexport default defineRoute(async (req, ctx) => {\n  const content = await loadContent(ctx.params.id);\n\n  return (\n    <div>\n      <aside>\n        <a href=\"/docs/page1\">Page 1</a>\n        <a href=\"/docs/page2\">Page 2</a>\n      </aside>\n      <Partial name=\"docs-content\">\n        {content}\n      </Partial>\n    </div>\n  );\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-up Form Component\nDESCRIPTION: TSX component for the sign-up form interface\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/authentication-with-supabase.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function SignUpPage() {\n  return (\n    <form action=\"/api/sign-up\" method=\"post\">\n      <input autofocus type=\"email\" name=\"email\" />\n      <input type=\"password\" name=\"password\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSON-LD Implementation with dangerouslySetInnerHTML\nDESCRIPTION: Proper implementation of JSON-LD rendering using Preact's dangerouslySetInnerHTML to avoid character escaping.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/rendering-raw-html.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function JsonLd() {\n  return (\n    <script\n      type=\"application/ld+json\"\n      dangerouslySetInnerHTML={{ __html: json }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Middleware Handlers in Fresh\nDESCRIPTION: Example showing how to define multiple middleware handlers in a single file using an array of functions.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/middleware.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler = [\n  async function middleware1(req, ctx) {\n    // do something\n    return ctx.next();\n  },\n  async function middleware2(req, ctx) {\n    // do something\n    return ctx.next();\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing PUT Handler for User Update\nDESCRIPTION: Demonstrates how to create a PUT handler to update an existing user in the Deno KV database.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/creating-a-crud-api.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: Handlers<User | null> = {\n  async PUT(req, ctx) {\n    const id = ctx.params.id;\n    const user = (await req.json()) as User;\n    const userKey = [\"user\", id];\n    const userRes = await kv.get(userKey);\n    if (!userRes.value) return new Response(`no user with id ${id} found`);\n    const ok = await kv.atomic().check(userRes).set(userKey, user).commit();\n    if (!ok) throw new Error(\"Something went wrong.\");\n    return new Response(JSON.stringify(user));\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Language Attribute in Fresh Deno Server\nDESCRIPTION: Customize server render options to dynamically set the HTML language attribute to a specific language code\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/setting-the-language.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n/// <reference lib=\"dom.asynciterable\" />\n/// <reference lib=\"deno.ns\" />\n\nimport { start } from \"$fresh/server.ts\";\nimport manifest from \"./fresh.gen.ts\";\n\nimport twindPlugin from \"$fresh/plugins/twind.ts\";\nimport twindConfig from \"./twind.config.ts\";\n\nawait start(manifest, {\n  plugins: [twindPlugin(twindConfig)],\n  render: (ctx, render) => {\n    ctx.lang = \"de\";\n    render();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Leaflet Context in TypeScript\nDESCRIPTION: Initializes a context variable for Leaflet library with proper typing.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/client-side-components-and-libraries.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const leafletContext = createContext<typeof Leaflet | null>(null);\n```\n\n----------------------------------------\n\nTITLE: FreshConfig Interface\nDESCRIPTION: This defines the `FreshConfig` interface which is used to configure the Fresh server. It includes options for build settings, custom render functions, plugins, static directory, router options, and server configurations.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FreshConfig {\n  build?: {\n    /**\n     * The directory to write generated files to when `dev.ts build` is run.\n     * This can be an absolute path, a file URL or a relative path.\n     */\n    outDir?: string;\n    /**\n     * This sets the target environment for the generated code. Newer\n     * language constructs will be transformed to match the specified\n     * support range. See https://esbuild.github.io/api/#target\n     * @default {\"es2022\"}\n     */\n    target?: string | string[];\n  };\n  render?: RenderFunction;\n  plugins?: Plugin[];\n  staticDir?: string;\n  router?: RouterOptions;\n  server?: Partial<Deno.ServeTlsOptions>;\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Rendering 404 Page in Fresh Route Handler (TypeScript/TSX)\nDESCRIPTION: This example demonstrates how to manually trigger a 404 page render in a Fresh route handler. It checks if a blog post exists and renders a 404 page if not found, passing custom props to the 404 component.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/error-pages.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Handlers, PageProps } from \"$fresh/server.ts\";\n\nexport const handler: Handlers = {\n  async GET(req, ctx) {\n    const blogpost = await fetchBlogpost(ctx.params.slug);\n    if (!blogpost) {\n      return ctx.renderNotFound({\n        custom: \"prop\",\n      });\n    }\n    return ctx.render({ blogpost });\n  },\n};\n\nexport default function BlogpostPage({ data }) {\n  return (\n    <article>\n      <h1>{data.blogpost.title}</h1>\n      {/* rest of your page */}\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in Fresh 2\nDESCRIPTION: Example of how to set a page-specific title using ctx.state in a route handler and render it in the _app.tsx wrapper.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/canary/examples/migration-guide.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// about.tsx\nexport const handler = {\n  GET(ctx) {\n    // Set a route specific data in a handler\n    ctx.state.title = \"About Me\";\n    return page();\n  },\n};\n\n// Render that in _app.tsx\nexport default function AppWrapper(ctx: FreshContext) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        {ctx.state.title ? <title>{ctx.state.title}</title> : null}\n      </head>\n      <body>\n        <ctx.Component />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Fresh Deno Server with Default Language\nDESCRIPTION: Default server initialization configuration using Fresh and Twind plugin with standard configuration\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/setting-the-language.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n/// <reference lib=\"dom.asynciterable\" />\n/// <reference lib=\"deno.ns\" />\n\nimport { start } from \"$fresh/server.ts\";\nimport manifest from \"./fresh.gen.ts\";\n\nimport twindPlugin from \"$fresh/plugins/twind.ts\";\nimport twindConfig from \"./twind.config.ts\";\n\nawait start(manifest, { plugins: [twindPlugin(twindConfig)] });\n```\n\n----------------------------------------\n\nTITLE: Starting Fresh Server in Production (TypeScript)\nDESCRIPTION: Main entry point for starting the Fresh server in production, using the manifest and configuration.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/ahead-of-time-builds.md#2025-04-19_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { start } from \"$fresh/server.ts\";\nimport manifest from \"./fresh.gen.ts\";\nimport config from \"./fresh.config.ts\";\n\nawait start(manifest, config);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Partial Requests with f-partial Attribute\nDESCRIPTION: Shows how to optimize partial requests by adding the f-partial attribute to links. This allows Fresh to fetch only the necessary content instead of the full page.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/partials.md#2025-04-19_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- <a href=\"/docs/routes\">Routes</a>\n+ <a href=\"/docs/routes\" f-partial=\"/partials/docs/routes\">Routes</a>\n```\n```\n\n----------------------------------------\n\nTITLE: Fresh createHandler Type Definition\nDESCRIPTION: Shows the TypeScript type definition for the createHandler function used in Fresh framework for creating application handlers.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/writing-tests.md#2025-04-19_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport async function createHandler(\n  manifest: Manifest,\n  config: FreshConfig = {},\n): Promise<\n  (req: Request, connInfo?: ServeHandlerInfo) => Promise<Response>\n```\n\n----------------------------------------\n\nTITLE: Updating Fresh Configuration for Initialization\nDESCRIPTION: Shows the differential changes needed in fresh.config.ts to add initialization support\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/init-the-server.md#2025-04-19_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n import twindConfig from \"./twind.config.ts\";\n+import { Context } from \"./routes/_middleware.ts\";\n+\n+await Context.init();\n\n export default defineConfig({\n   plugins: [twindPlugin(twindConfig)],\n\n```\n\n----------------------------------------\n\nTITLE: Creating Map Island Component\nDESCRIPTION: Exports a complete island component that combines the LeafletProvider and MapComponent.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/client-side-components-and-libraries.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MapIsland() {\n  return (\n    <LeafletProvider>\n      <MapComponent />\n    </LeafletProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port in Fresh's main.ts\nDESCRIPTION: This code shows how to modify the configuration in main.ts to set a custom port (3000) for the Fresh server. It changes the port configuration in the start() function call.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/running-locally.md#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait start(manifest, { server: { port: 3000 } });\n```\n\n----------------------------------------\n\nTITLE: Configuring ESBuild Target\nDESCRIPTION: This code snippet demonstrates how to set the target environment for generated code using the `target` option.  It should be a valid ES Build target.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nawait dev(import.meta.url, \"./main.ts\", {\n  build: {\n    target: \"es2015\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Layout Inheritance in Routes\nDESCRIPTION: Configuration to skip inherited layouts for specific routes using RouteConfig\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/layouts.md#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouteConfig } from \"$fresh/server.ts\";\n\nexport const config: RouteConfig = {\n  skipInheritedLayouts: true, // Skip already inherited layouts\n};\n\nexport default function MyPage() {\n  return <p>Hello world</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Component Route in Fresh (TSX)\nDESCRIPTION: This example shows how to implement a component route that renders HTML. It exports a default function that returns a JSX element, displaying the current page URL.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/routes.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PageProps } from \"$fresh/server.ts\";\n\nexport default function Page(props: PageProps) {\n  return <div>You are on the page '{props.url.href}'.</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Github Flavored Markdown Module (Bash)\nDESCRIPTION: This command installs the Github Flavored Markdown module using Deno. This module is required for rendering Markdown content in the Fresh application.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/rendering-markdown.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndeno add @deno/gfm\n```\n\n----------------------------------------\n\nTITLE: Styling Active Links with Twind in Fresh\nDESCRIPTION: Example of using Twind to style links with aria-current attribute in Fresh applications.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/active-links.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Menu() {\n  return (\n    <a href=\"/foo\" class=\"[aria-current]:text-green-600\">\n      Link to some page\n    </a>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Contained Executable for Fresh Application\nDESCRIPTION: These commands create a self-contained executable of a Fresh project using Deno 2.1. It includes all assets and dependencies, allowing the application to run on any platform without Deno installed.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/deployment.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ deno build\n$ deno compile --include static --include _fresh --include deno.json -A main.ts\n```\n\n----------------------------------------\n\nTITLE: Styling Active Links with TwindV1 Plugin in Fresh\nDESCRIPTION: Example of using the new TwindV1 plugin to style links with aria-current attribute in Fresh applications, noting the different syntax.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/active-links.md#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nclass=\"aria-[current='page']:text-green-600\"\n```\n\n----------------------------------------\n\nTITLE: Mounting Multiple Fresh Apps from JSR\nDESCRIPTION: Shows how to import and mount multiple Fresh applications from JSR packages into a main application. Demonstrates using the mountApp method to combine multiple apps under different path prefixes.\nSOURCE: https://github.com/denoland/fresh/blob/main/examples/README.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { App } from \"fresh\";\n// Import the example apps\nimport { app1 } from \"jsr:@fresh/examples/app1\";\nimport { app2 } from \"jsr:@fresh/examples/app2\";\n\nexport const app = new App({ root: import.meta.url })\n  .use(staticFiles());\n\n// Merge apps from JSR into this one\napp.mountApp(\"/app1\", app1);\napp.mountApp(\"/app2\", app1);\n\nawait app.listen();\n```\n\n----------------------------------------\n\nTITLE: Duplicate Head Tags in Fresh TSX\nDESCRIPTION: This snippet shows an example of potential duplicate tags when using <Head> components in different files. It demonstrates the issue with duplicate meta tags for og:title.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/modifying-the-head.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/page-a.tsx\n<Head>\n  <meta name=\"og:title\" content=\"This is a title\" />\n</Head>\n\n// components/MyTitle.tsx\n<Head>\n  <meta name=\"og:title\" content=\"Other title\" />\n</Head>\n```\n\n----------------------------------------\n\nTITLE: Initializing Fresh with Twind Plugin in TypeScript\nDESCRIPTION: This snippet demonstrates how to start a Fresh application with the Twind plugin configured in the main.ts file.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/plugins.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { start } from \"$fresh/server.ts\";\nimport manifest from \"./fresh.gen.ts\";\n\nimport twindPlugin from \"$fresh/plugins/twind.ts\";\nimport twindConfig from \"./twind.config.js\";\n\nawait start(manifest, {\n  plugins: [\n    // This line configures Fresh to use the first-party twind plugin.\n    twindPlugin(twindConfig),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Active Links with Original Twind Plugin in Fresh\nDESCRIPTION: Example of using the original Twind plugin to style links with aria-current attribute in Fresh applications.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/active-links.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nclass=\"[aria-current='page']:text-green-600\"\n```\n\n----------------------------------------\n\nTITLE: Updating Fresh Configuration for Tailwind CSS (TypeScript)\nDESCRIPTION: Replaces the twind plugin with the Tailwind CSS plugin in the Fresh configuration file.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/migrating-to-tailwind.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"$fresh/server.ts\";\n- import twind from \"$fresh/plugins/twind.ts\";\n+ import tailwind from \"$fresh/plugins/tailwind.ts\";\n\nexport default defineConfig({\n-   plugins: [twind()],\n+   plugins: [tailwind()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP Without RouteConfig in Fresh (TypeScript/JSX)\nDESCRIPTION: This code snippet shows what happens when CSP is configured in a Fresh route but the RouteConfig is missing. Without the RouteConfig, Fresh doesn't know to use the CSP, so the styles will still be applied despite the incorrect configuration.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-csp.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RouteContext } from \"$fresh/server.ts\";\nimport { useCSP } from \"$fresh/runtime.ts\";\n\nexport default function Home(req: Request, ctx: RouteContext) {\n  useCSP((csp) => {\n    if (!csp.directives.styleSrc) {\n      csp.directives.styleSrc = [];\n    }\n    csp.directives.styleSrc.push(\"http://www.example.com\");\n  });\n  return (\n    <>\n      <h1>\n        This page violates our configured CSP. But we don't have a{\" \"}\n        <code>RouteConfig</code>{\" \"}\n        enabled, so Fresh doesn't know to use the CSP. Styles will be applied.\n      </h1>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"example.css\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Fresh Project from Latest Commit\nDESCRIPTION: This example demonstrates how to create a new Fresh project using the latest commit of the Fresh source code hosted on GitHub. This is useful when you want to ensure you're working with the most recent updates in the Fresh framework. The command executes the initialization script directly from the main branch.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-fresh-canary-version.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n\"deno run -A -r https://raw.githubusercontent.com/denoland/fresh/main/init.ts\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Twind v1 for Fresh Project (TypeScript)\nDESCRIPTION: This snippet provides a base configuration for Twind v1 in a Fresh project. It imports necessary modules from Twind v1, defines the configuration with presets for Tailwind and Autoprefixer, and exports the configuration object.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-twind-v1.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, Preset } from \"https://esm.sh/@twind/core@1.1.3\";\nimport presetTailwind from \"https://esm.sh/@twind/preset-tailwind@1.1.4\";\nimport presetAutoprefix from \"https://esm.sh/@twind/preset-autoprefix@1.0.7\";\n\nexport default {\n  ...defineConfig({\n    presets: [presetTailwind() as Preset, presetAutoprefix()],\n  }),\n  selfURL: import.meta.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Optimized Partial Route for Documentation Content\nDESCRIPTION: Shows how to create an optimized route that only renders the content for a partial update. It disables the app wrapper and inherited layouts to focus on the specific content.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/partials.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx routes/partials/docs/[id].tsx\nimport { defineRoute, RouteConfig } from \"$fresh/server.ts\";\nimport { Partial } from \"$fresh/runtime.ts\";\n\n// We only want to render the content, so disable\n// the `_app.tsx` template as well as any potentially\n// inherited layouts\nexport const config: RouteConfig = {\n  skipAppWrapper: true,\n  skipInheritedLayouts: true,\n};\n\nexport default defineRoute(async (req, ctx) => {\n  const content = await loadContent(ctx.params.id);\n\n  // Only render the new content\n  return (\n    <Partial name=\"docs-content\">\n      {content}\n    </Partial>\n  );\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Project Structure for Fresh API\nDESCRIPTION: Shows the directory structure for the API routes in a Fresh project.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/creating-a-crud-api.md#2025-04-19_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nroutes\n└── api\n    └── users\n        ├── [id].ts\n        └── index.ts\n```\n\n----------------------------------------\n\nTITLE: Updating Deno Configuration for Tailwind CSS (JSON)\nDESCRIPTION: Modifies the deno.json file to include Tailwind CSS imports and enable node modules support.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/migrating-to-tailwind.md#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n+   \"nodeModulesDir\": \"auto\",\n    \"imports\": {\n      \"$fresh/\": \"https://deno.land/x/fresh@1.5.2/\",\n      \"preact\": \"https://esm.sh/preact@10.22.0\",\n      \"preact/\": \"https://esm.sh/preact@10.22.0/\",\n-     \"twind\": \"https://esm.sh/twind@0.16.19\",\n-     \"twind/\": \"https://esm.sh/twind@0.16.19/\"\n+     \"tailwindcss\": \"npm:tailwindcss@3.4.1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Countdown Page Component in Fresh\nDESCRIPTION: Example of how to use the Countdown island component within a page component. Sets up a target date one hour in the future and renders the countdown within a paragraph element.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/adding-interactivity.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Countdown from \"../islands/Countdown.tsx\";\n\nexport default function Page() {\n  const date = new Date();\n  date.setHours(date.getHours() + 1);\n  return (\n    <p>\n      The big event is happening <Countdown target={date.toISOString()} />.\n    </p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Optimized Build in Fresh (Shell)\nDESCRIPTION: Commands to run an optimized build in Fresh projects, either as a task or manually invoking the build script.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/ahead-of-time-builds.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# As a task in newer Fresh projects\ndeno task build\n# or invoke it manually\ndeno run -A dev.ts build\n```\n\n----------------------------------------\n\nTITLE: Layout Definition using defineLayout Helper\nDESCRIPTION: Using Fresh's defineLayout helper for better type inference in async layouts\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/layouts.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineLayout } from \"$fresh/server.ts\";\n\nexport default defineLayout(async (req, ctx) => {\n  const data = await loadData();\n\n  return (\n    <div class=\"layout\">\n      <p>{data.greeting}</p>\n      <ctx.Component />\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Tailwind CSS Base Styles (CSS)\nDESCRIPTION: Imports Tailwind's base, components, and utilities styles in a CSS file.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/migrating-to-tailwind.md#2025-04-19_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Updating Fresh Configuration for Twind v1 (TypeScript)\nDESCRIPTION: This diff snippet shows the change required in fresh.config.ts to upgrade to Twind v1. It replaces the import statement for the Twind plugin with the v1 version.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-twind-v1.md#2025-04-19_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/fresh.config.ts b/fresh.config.ts\nindex 548e16a..e00d557 100644\n--- a/fresh.config.ts\n+++ b/fresh.config.ts\n@@ -1,5 +1,5 @@\n import { defineConfig } from \"$fresh/server.ts\";\n-import twindPlugin from \"$fresh/plugins/twind.ts\";\n+import twindPlugin from \"$fresh/plugins/twindv1.ts\";\n import twindConfig from \"./twind.config.ts\";\n\n export default defineConfig({\n```\n\n----------------------------------------\n\nTITLE: Creating Map Component with Leaflet Context\nDESCRIPTION: Implements a map component that uses the Leaflet context to render an interactive map. Includes fallback for when context is not ready.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/client-side-components-and-libraries.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MapComponent() {\n  const leaf = useContext(leafletContext);\n  if (!leaf) return <p>Context not ready. Component placeholder</p>;\n  useEffect(() => {\n    const map = leaf.map(\"map\").setView(leaf.latLng(0, 0), 2);\n    leaf.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(map);\n  });\n  return <div id=\"map\" class=\"relative w-[80vw] h-[50vh]\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Plugins\nDESCRIPTION: This code snippet illustrates how to use plugins in a Fresh application. It shows how to load a plugin, such as `twindPlugin`, by including it in the `plugins` array within the `FreshConfig` object.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait start(manifest, { plugins: [twindPlugin(twindConfig)] });\n```\n\n----------------------------------------\n\nTITLE: Fresh Middleware with Route Parameters\nDESCRIPTION: Middleware implementation showing how to access route parameters in Fresh framework.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/middleware.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FreshContext } from \"$fresh/server.ts\";\n\nexport async function handler(_req: Request, ctx: FreshContext) {\n  const currentTenant = ctx.params.tenant;\n  // do something with the tenant\n  const resp = await ctx.next();\n  return resp;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Fresh Application Docker Container\nDESCRIPTION: This command runs the Docker container for a Fresh application, mapping port 80 on the host to port 8000 in the container.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/deployment.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run -t -i -p 80:8000 my-fresh-app\n```\n\n----------------------------------------\n\nTITLE: Implementing Fresh Island Component with JSR\nDESCRIPTION: Demonstrates how to import, register and use a Fresh island component from JSR. Shows the setup process including creating an app instance, registering the island component, and using it in a route handler.\nSOURCE: https://github.com/denoland/fresh/blob/main/examples/README.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { App } from \"fresh\";\n// Import the island function\nimport { DemoIsland } from \"jsr:@fresh/examples/island\";\n\nexport const app = new App({ root: import.meta.url })\n  .use(staticFiles());\n\n// Register the island\napp.island(\n  // Module specifier for esbuild, could also be a file path\n  \"jsr:@fresh/examples/island\",\n  // Name of the island\n  \"DemoIsland\",\n  // Island component function\n  DemoIsland,\n);\n\n// Use the island somewhere in your components\napp.get(\"/\", (ctx) => ctx.render(<DemoIsland />));\n\nawait app.listen();\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Confirmation Handler\nDESCRIPTION: API endpoint handler for email confirmation process\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/authentication-with-supabase.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Handlers } from \"$fresh/server.ts\";\nimport { createSupabaseClient } from \"lib/supabase.ts\";\n\nexport const handler: Handlers = {\n  async GET(req: Request) {\n    const { searchParams } = new URL(req.url);\n    const token_hash = searchParams.get(\"token_hash\");\n    const type = searchParams.get(\"type\") as EmailOtpType | null;\n    const next = searchParams.get(\"next\") ?? \"/welcome\";\n\n    const redirectTo = new URL(req.url);\n    redirectTo.pathname = next;\n\n    if (token_hash && type) {\n      const supabase = createSupabaseClient(req);\n      const { error } = await supabase.auth.verifyOtp({ type, token_hash });\n      if (error) throw error;\n    }\n\n    redirectTo.searchParams.delete(\"next\");\n    return Response.redirect(redirectTo);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Bypassing or Disabling Partials with f-client-nav\nDESCRIPTION: Shows how to bypass or disable partial navigation for specific elements or sections of the page using the f-client-nav attribute. This allows fine-grained control over which elements trigger partial updates.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/partials.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<body f-client-nav>\n  {/* This will cause a partial navigation */}\n  <a href=\"/docs/page1\">With partials</a>\n\n  {/* This WONT cause a partial navigation */}\n  <a href=\"/docs/page1\" f-client-nav={false}>No partials</a>\n\n  {/* This WONT cause a partial navigation on any elements below */}\n  <div f-client-nav={false}>\n    <div>\n      <a href=\"/docs/page1\">No partials</a>\n    </div>\n  </div>\n</body>;\n```\n```\n\n----------------------------------------\n\nTITLE: Running Fresh Project Update Command\nDESCRIPTION: Command to execute the Fresh project update tool using Deno. The -A flag grants all permissions, and -r ensures the latest version is fetched from the JSR registry.\nSOURCE: https://github.com/denoland/fresh/blob/main/update/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno run -Ar jsr:@fresh/update\n```\n\n----------------------------------------\n\nTITLE: Configuring Fresh with Default Twind Plugin (TypeScript)\nDESCRIPTION: This snippet demonstrates the default Fresh configuration file (fresh.config.ts) that uses the Twind plugin. It imports the necessary modules and defines the configuration with the Twind plugin.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-twind-v1.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"$fresh/server.ts\";\nimport twindPlugin from \"$fresh/plugins/twind.ts\";\nimport twindConfig from \"./twind.config.ts\";\n\nexport default defineConfig({\n  plugins: [twindPlugin(twindConfig)],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in Fresh (TypeScript)\nDESCRIPTION: Creates a Tailwind configuration file specifying content sources for the Tailwind compiler.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/migrating-to-tailwind.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Config } from \"tailwindcss\";\n\nexport default {\n  content: [\n    \"{routes,islands,components}/**/*.{ts,tsx}\",\n  ],\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Defining CSP Directives in Fresh Framework (TypeScript)\nDESCRIPTION: This code snippet defines the interface for Content Security Policy directives in the Fresh framework. It includes various fetch, document, and navigation directives that can be used to configure CSP.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-csp.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ContentSecurityPolicyDirectives {\n  // Fetch directives\n  childSrc?: string[];\n  connectSrc?: string[];\n  defaultSrc?: string[];\n  fontSrc?: string[];\n  frameSrc?: string[];\n  imgSrc?: string[];\n  manifestSrc?: string[];\n  mediaSrc?: string[];\n  objectSrc?: string[];\n  prefetchSrc?: string[];\n  scriptSrc?: string[];\n  scriptSrcElem?: string[];\n  scriptSrcAttr?: string[];\n  styleSrc?: string[];\n  styleSrcElem?: string[];\n  styleSrcAttr?: string[];\n  workerSrc?: string[];\n\n  // Document directives\n  baseUri?: string[];\n  sandbox?: string[];\n\n  // Navigation directives\n  formAction?: string[];\n  frameAncestors?: string[];\n  navigateTo?: string[];\n\n  reportUri?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Complex CORS in Fresh Middleware - TypeScript\nDESCRIPTION: This middleware function handles complex CORS requests, particularly those involving methods like DELETE. It includes special handling for OPTIONS preflight requests by returning a 204 response with appropriate CORS headers.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/dealing-with-cors.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FreshContext } from \"$fresh/server.ts\";\n\nexport async function handler(req: Request, ctx: FreshContext) {\n  if (req.method == \"OPTIONS\") {\n    const resp = new Response(null, {\n      status: 204,\n    });\n    const origin = req.headers.get(\"Origin\") || \"*\";\n    const headers = resp.headers;\n    headers.set(\"Access-Control-Allow-Origin\", origin);\n    headers.set(\"Access-Control-Allow-Methods\", \"DELETE\");\n    return resp;\n  }\n  const origin = req.headers.get(\"Origin\") || \"*\";\n  const resp = await ctx.next();\n  const headers = resp.headers;\n\n  headers.set(\"Access-Control-Allow-Origin\", origin);\n  headers.set(\"Access-Control-Allow-Credentials\", \"true\");\n  headers.set(\n    \"Access-Control-Allow-Headers\",\n    \"Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With\"\n  );\n  headers.set(\n    \"Access-Control-Allow-Methods\",\n    \"POST, OPTIONS, GET, PUT, DELETE\"\n  );\n\n  return resp;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Fresh Website Development Server\nDESCRIPTION: Command to start the Fresh website project in development mode. This task will watch the project directory and automatically restart as necessary when changes are detected.\nSOURCE: https://github.com/denoland/fresh/blob/main/www/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndeno task start\n```\n\n----------------------------------------\n\nTITLE: Migrating from Classical to Automatic JSX\nDESCRIPTION: Example showing how to remove Classical JSX syntax in favor of Automatic JSX transform introduced in Fresh 1.1.0\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/updating.md#2025-04-19_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- /** @jsx h */\n- import { h } from \"preact\";\n\n  export default function Page() {\n    return <div>Hello world!</div>;\n  }\n```\n\n----------------------------------------\n\nTITLE: Styling Active Links with CSS in Fresh\nDESCRIPTION: CSS examples for styling links with aria-current attribute to visually differentiate active links and improve accessibility.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/active-links.md#2025-04-19_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Give links pointing to the current page a green color */\na[aria-current=\"page\"] {\n  color: green;\n}\n\n/* Color all ancestor links of the current page */\na[aria-current=\"true\"] {\n  color: peachpuff;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Fresh Plugin with Custom Islands in TypeScript\nDESCRIPTION: This snippet illustrates how to create a Fresh plugin that includes custom island components to be processed and bundled for the browser.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/plugins.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugin } from \"$fresh/server.ts\";\n\nexport default function myIslandPlugin(): Plugin {\n  return {\n    name: \"my-island-plugin\",\n    islands: {\n      baseLocation: import.meta.url,\n      paths: [\n        \"./plugin/MyPluginIsland.tsx\",\n        \"./plugin/OtherPluginIsland.tsx\",\n      ],\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Fresh 2 Update Script\nDESCRIPTION: Command to run the automatic update script for Fresh 2 migration.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/canary/examples/migration-guide.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno run -Ar jsr:@fresh/update\n```\n\n----------------------------------------\n\nTITLE: Fresh Configuration Interface Definition\nDESCRIPTION: Defines the FreshConfig interface that specifies available configuration options for Fresh applications.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/writing-tests.md#2025-04-19_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport interface FreshConfig {\n  build?: {\n    outDir?: string;\n    target?: string | string[];\n  };\n  render?: RenderFunction;\n  plugins?: Plugin[];\n  staticDir?: string;\n  router?: RouterOptions;\n  server?: Partial<Deno.ServeTlsOptions>;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Active Links with Tailwind in Fresh\nDESCRIPTION: Example of using Tailwind CSS to style links with aria-current attribute in Fresh applications.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/active-links.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Menu() {\n  return (\n    <a href=\"/foo\" class=\"aria-[current]:text-green-600\">\n      Link to some page\n    </a>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Fresh Manually with Full Permissions\nDESCRIPTION: This command shows how to start a Fresh project manually using 'deno run' with all required permission flags and watch mode configured. It includes network, file read, environment, and run permissions with watchers for static files and routes.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/running-locally.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ deno run --allow-net --allow-read --allow-env --allow-run --watch=static/,routes/ main.ts\nWatcher Process started.\n 🍋 Fresh ready\n     Local: http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Running Fresh in Development Mode (TypeScript)\nDESCRIPTION: Script for running Fresh in development mode, using the configuration file for consistency with production.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/ahead-of-time-builds.md#2025-04-19_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport dev from \"$fresh/dev.ts\";\nimport config from \"./fresh.config.ts\";\n\nawait dev(import.meta.url, \"./main.ts\", config);\n```\n\n----------------------------------------\n\nTITLE: Adding Fresh Badge in Markdown\nDESCRIPTION: Markdown code to add Fresh badge to documentation\nSOURCE: https://github.com/denoland/fresh/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: md\nCODE:\n```\n[![Made with Fresh](https://fresh.deno.dev/fresh-badge.svg)](https://fresh.deno.dev)\n```\n\n----------------------------------------\n\nTITLE: Modifying Imports in deno.json for Specific Commit\nDESCRIPTION: This snippet demonstrates how to change your `deno.json` to use a specific commit of the Fresh framework instead of the current release version. This is useful if you need to test or use a particular commit. The modifications are made by changing the URL in the imports section of the `deno.json` file.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-fresh-canary-version.md#2025-04-19_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n\"\"\"\n     \"update\": \"deno run -A -r https://fresh.deno.dev/update .\"\n   },\n   \"imports\": {\n-    \"$fresh/\": \"https://deno.land/x/fresh@1.2.0/\",\n+    \"$fresh/\": \"https://raw.githubusercontent.com/denoland/fresh/the-particular-commit-hash-here/\",\n     \"preact\": \"https://esm.sh/preact@10.22.0\",\n     \"preact/\": \"https://esm.sh/preact@10.22.0/\",\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating Middleware Signature in Fresh 2\nDESCRIPTION: Example of how to update the middleware signature in Fresh 2, consolidating the request and context parameters.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/canary/examples/migration-guide.md#2025-04-19_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- const middleware = (req, ctx) => new Response(\"ok\");\n+ const middleware = (ctx) => new Response(\"ok\");\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Layout Inheritance in Layouts\nDESCRIPTION: Configuration to skip inherited layouts within a layout file using LayoutConfig\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/layouts.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LayoutConfig } from \"$fresh/server.ts\";\n\nexport const config: LayoutConfig = {\n  skipInheritedLayouts: true, // Skip already inherited layouts\n};\n\nexport default function MyPage() {\n  return <p>Hello world</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Forked Fresh in deno.json\nDESCRIPTION: This snippet illustrates how to modify your `deno.json` to reference a branch in a fork of the Fresh repository. This allows the use of features from a pull request or branch that hasn't been merged yet. It involves changing the URL in the imports section to point to the fork's specific branch.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-fresh-canary-version.md#2025-04-19_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n\"\"\"\n     \"update\": \"deno run -A -r https://fresh.deno.dev/update .\"\n   },\n   \"imports\": {\n-    \"$fresh/\": \"https://deno.land/x/fresh@1.2.0/\",\n+    \"$fresh/\": \"https://raw.githubusercontent.com/deer/fresh/state_in_props/\",\n     \"preact\": \"https://esm.sh/preact@10.22.0\",\n     \"preact/\": \"https://esm.sh/preact@10.22.0/\",\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating Async Route Component Signature in Fresh 2\nDESCRIPTION: Example of how to update the async route component signature in Fresh 2, using the new PageProps type.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/canary/examples/migration-guide.md#2025-04-19_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-  export default async function MyPage(req: Request, ctx: RouteContext) {\n+  export default async function MyPage(props: PageProps) {\n    const value = await loadFooValue();\n    return <p>foo is: {value}</p>;\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering Server-side Content in Island Component\nDESCRIPTION: This snippet shows how to use the 'MyIsland' component and pass server-rendered JSX content as children. Fresh handles the integration, ensuring mixed static and interactive content is possible.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/islands.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport MyIsland from \"../islands/my-island.tsx\";\n\nexport default function Home() {\n  return (\n    <MyIsland>\n      <p>This text is rendered on the server</p>\n    </MyIsland>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Incorrect CSP in Fresh Route (TypeScript/JSX)\nDESCRIPTION: This code snippet shows an incorrect implementation of CSP in a Fresh route. It uses the wrong URL in the styleSrc directive, which will cause the browser to reject the stylesheet.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-csp.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RouteConfig, RouteContext } from \"$fresh/server.ts\";\nimport { useCSP } from \"$fresh/runtime.ts\";\n\nexport default function Home(req: Request, ctx: RouteContext) {\n  useCSP((csp) => {\n    if (!csp.directives.styleSrc) {\n      csp.directives.styleSrc = [];\n    }\n    csp.directives.styleSrc.push(\"http://www.example.com\");\n  });\n  return (\n    <>\n      <h1>This page violates our configured CSP. Styles won't be applied.</h1>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"example.css\" />\n    </>\n  );\n}\n\nexport const config: RouteConfig = {\n  csp: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Fresh Dependencies Manually\nDESCRIPTION: Example diff showing manual updates to Fresh, Preact, and related dependencies in deno.json configuration file\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/updating.md#2025-04-19_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  {\n    \"imports\": {\n-     \"$fresh/\": \"https://deno.land/x/fresh@1.0.2/\",\n+     \"$fresh/\": \"https://deno.land/x/fresh@1.1.5/\",\n\n-     \"preact\": \"https://esm.sh/preact@10.8.1\",\n-     \"preact/\": \"https://esm.sh/preact@10.8.1/\",\n+     \"preact\": \"https://esm.sh/preact@10.11.0\",\n+     \"preact/\": \"https://esm.sh/preact@10.11.0/\",\n\n-     \"preact-render-to-string\": \"https://esm.sh/*preact-render-to-string@5.2.0\",\n+     \"preact-render-to-string\": \"https://esm.sh/*preact-render-to-string@6.1.0\",\n\n      \"twind\": \"https://esm.sh/twind@0.16.17\",\n      \"twind/\": \"https://esm.sh/twind@0.16.17/\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: RenderFunction Type Definition\nDESCRIPTION: This defines the `RenderFunction` type, which is used for customizing the rendering process in Fresh. It takes a `RenderContext` and an `InnerRenderFunction` as parameters and allows modifying the rendering behavior.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RenderFunction = (\n  ctx: RenderContext,\n  render: InnerRenderFunction,\n) => void | Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Modifying deno.json for src Directory in Fresh\nDESCRIPTION: Demonstrates the changes required in the deno.json file to accommodate a src directory structure. It updates the start task to point to the new src directory.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/changing-the-src-dir.md#2025-04-19_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"lock\": false,\n  \"tasks\": {\n-    \"start\": \"deno run -A --watch=static/,routes/ dev.ts\"\n+    \"start\": \"deno run -A --watch=src/static/,src/routes/ src/dev.ts\"\n  },\n  \"imports\": {\n    \"$fresh/\": \"file:///Users/reed/code/fresh/\",\n```\n\n----------------------------------------\n\nTITLE: Initializing Fresh Project with Default Configuration (TypeScript)\nDESCRIPTION: This snippet shows the default main.ts file created when initializing a Fresh project. It imports necessary modules and starts the Fresh server with the provided manifest and configuration.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-twind-v1.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"dom\" />\n/// <reference lib=\"dom.iterable\" />\n/// <reference lib=\"dom.asynciterable\" />\n/// <reference lib=\"deno.ns\" />\n\nimport \"$std/dotenv/load.ts\";\n\nimport { start } from \"$fresh/server.ts\";\nimport manifest from \"./fresh.gen.ts\";\nimport config from \"./fresh.config.ts\";\n\nawait start(manifest, config);\n```\n\n----------------------------------------\n\nTITLE: Updating Links to Use Optimized Partial Routes\nDESCRIPTION: Demonstrates how to update links in the documentation sidebar to use the optimized partial routes by adding the f-partial attribute.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/partials.md#2025-04-19_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n```diff routes/docs/[id].tsx\n  <aside>\n-   <a href=\"/docs/page1\">Page 1</a>\n-   <a href=\"/docs/page2\">Page 2</a>\n+   <a href=\"/docs/page1\" f-partial=\"/partials/docs/page1\">Page 1</a>\n+   <a href=\"/docs/page2\" f-partial=\"/partials/docs/page2\">Page 2</a>\n  </aside>\n```\n```\n\n----------------------------------------\n\nTITLE: Running Fresh Tests in Terminal\nDESCRIPTION: Shows the command and output for running the HTTP tests using Deno test runner with necessary permissions.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/writing-tests.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ deno test --allow-read --allow-env --allow-net\nrunning 1 test from ./tests/main_test.ts\nHTTP assert test. ...\n  #1 GET / ... ok (31ms)\n  #2 POST / ... ok (35ms)\n  #3 GET /foo ... ok (12ms)\nHTTP assert test. ... ok (118ms)\n\nok | 1 passed (3 steps) | 0 failed (236ms)\n```\n\n----------------------------------------\n\nTITLE: Automatic Asset Path Locking for Images in Fresh (JSX)\nDESCRIPTION: Shows an example of Fresh's automatic asset path locking for image sources. Fresh automatically applies 'locked' paths to 'src' and 'srcset' attributes in <img> and <source> tags for safe long-term caching.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/static-files.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<img src=\"/user.png\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Route Configuration in Fresh (TypeScript)\nDESCRIPTION: This snippet demonstrates a simple route configuration using RouteConfig in Fresh. It defines a handler for GET requests and a route pattern with named parameters and a wildcard.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/handling-complex-routes.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FreshContext, RouteConfig } from \"$fresh/server.ts\";\n\nexport const handler = {\n  GET(_req: Request, { params }: FreshContext) {\n    console.log(params);\n    return new Response(params.path);\n  },\n};\n\nexport const config: RouteConfig = {\n  routeOverride: \"/x/:module@:version/:path*\",\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Modified Fresh Project Structure with src Directory\nDESCRIPTION: Shows the updated file and directory structure of a Fresh project after moving files to a src directory.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/changing-the-src-dir.md#2025-04-19_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── README.md\n├── deno.json\n└── src\n    ├── components\n    │   └── Button.tsx\n    ├── dev.ts\n    ├── fresh.gen.ts\n    ├── islands\n    │   └── Counter.tsx\n    ├── main.ts\n    ├── routes\n    │   ├── greet\n    │   │   ├── [name].tsx\n    │   ├── api\n    │   │   └── joke.ts\n    │   ├── _404.tsx\n    │   └── index.tsx\n    └── static\n        ├── favicon.ico\n        └── logo.svg\n```\n\n----------------------------------------\n\nTITLE: Updating Fresh App Component for Tailwind CSS (TypeScript/JSX)\nDESCRIPTION: Modifies the Fresh App component to include the Tailwind CSS stylesheet.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/migrating-to-tailwind.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppProps } from \"$fresh/server.ts\";\n\nexport default function App({ Component }: AppProps) {\n  return (\n    <html>\n      <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My Fresh Project</title>\n+       <link rel=\"stylesheet\" href=\"/styles.css\" />\n      </head>\n      <body>\n        <Component />\n    </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fresh Context Interface Type Definition\nDESCRIPTION: Type definition for Fresh framework's context interface showing state and destination properties.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/middleware.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FreshContext<State = Record<string, unknown>> {\n  ...\n  next: () => Promise<Response>;\n  state: State;\n  destination: router.DestinationKind;\n  remoteAddr: {\n    transport: \"tcp\" | \"udp\";\n    hostname: string;\n    port: number;\n  };\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSON-LD Implementation in Fresh\nDESCRIPTION: Example showing the incorrect way to render JSON-LD that results in escaped characters, demonstrating why dangerouslySetInnerHTML is needed.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/rendering-raw-html.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst json = `\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"PostalAddress\",\n  \"streetAddress\": \"8888 University Drive\",\n  \"addressLocality\": \"Burnaby\",\n  \"addressRegion\": \"British Columbia\"\n}`;\n\nexport default function JsonLd() {\n  return <script type=\"application/ld+json\">{json}</script>;\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Inheritance Structure Example\nDESCRIPTION: Directory structure showing layout inheritance and special route configuration\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/layouts.md#2025-04-19_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n└── routes\n    ├── sub\n    │   ├── _layout_.tsx\n    │   ├── special.tsx  # should not inherit layouts\n    │   └── index.tsx\n    └── _layout.tsx\n```\n\n----------------------------------------\n\nTITLE: Fresh Middleware Implementation with Context\nDESCRIPTION: Implementation of _middleware.ts showing context initialization and request handling logic with singleton pattern\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/init-the-server.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FreshContext } from \"$fresh/server.ts\";\n\nexport interface State {\n  context: Context;\n}\n\nexport class Context {\n  private static context: Context;\n  private complicatedStartupValue: number;\n\n  public constructor() {\n    console.log(\"i'm logged during initialization, and not during handling!\");\n    // presumably this involves connecting to a\n    // database or doing some heavy computation\n    this.complicatedStartupValue = 42;\n  }\n\n  public static async init() {\n    Context.context = new Context();\n  }\n\n  public static instance() {\n    if (this.context) return this.context;\n    else throw new Error(\"Context is not initialized!\");\n  }\n}\n\nexport async function handler(\n  _req: Request,\n  ctx: FreshContext<State>,\n) {\n  ctx.state.context = Context.instance();\n  if (ctx.destination === \"route\") {\n    console.log(\"i'm logged during a request!\");\n    console.log(ctx.state.context);\n  }\n  const resp = await ctx.next();\n  return resp;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Supabase\nDESCRIPTION: Environment variable template for Supabase project credentials\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/authentication-with-supabase.md#2025-04-19_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nSUPABASE_URL=https://<projectName>.supabase.co\nSUPABASE_ANON_KEY=<api_key>\n```\n\n----------------------------------------\n\nTITLE: Disabling Fresh App Wrapper\nDESCRIPTION: Shows how to configure a route to skip the app wrapper using RouteConfig with skipAppWrapper option set to true.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/app-wrapper.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouteConfig } from \"$fresh/server.ts\";\n\nexport const config: RouteConfig = {\n  skipAppWrapper: true, // Skip the app wrapper during rendering\n};\n\nexport default function Page() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Example CSS Stylesheet (CSS)\nDESCRIPTION: This code snippet defines a simple CSS stylesheet that will be used in the CSP examples. It styles the h1 element with specific font size, weight, and margins.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-csp.md#2025-04-19_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nh1 {\n  font-size: 25px;\n  font-weight: normal;\n  margin-top: 5px;\n  margin-left: 25px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Dependencies in Deno\nDESCRIPTION: Import map configuration in deno.json for Supabase dependencies\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/authentication-with-supabase.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"imports\": {\n  \"supabase\": \"npm:@supabase/supabase-js@2\",\n  \"supabase/ssr\": \"npm:@supabase/ssr\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating dev.ts for Fresh 2\nDESCRIPTION: Example of how to update the dev.ts file for Fresh 2, including setting up the Builder class and configuring development-only plugins.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/canary/examples/migration-guide.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Builder } from \"fresh/dev\";\nimport { tailwind } from \"@fresh/plugin-tailwind\";\nimport { app } from \"./main.ts\";\n\n// Pass development only configuration here\nconst builder = new Builder({ target: \"safari12\" });\n\n// Example: Enabling the tailwind plugin for Fresh\ntailwind(builder, app, {});\n\n// Create optimized assets for the browser when\n// running `deno run -A dev.ts build`\nif (Deno.args.includes(\"build\")) {\n  await builder.build(app);\n} else {\n  // ...otherwise start the development server\n  await builder.listen(app);\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for User Creation\nDESCRIPTION: Shows the structure of a JSON payload for creating a new user via POST request.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/creating-a-crud-api.md#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"2\",\n  \"name\": \"TestUserName\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Fresh Project with Deno Task\nDESCRIPTION: This command starts a Fresh project using the default 'deno task start' command. It automatically enables watch mode to detect file changes and reload the server.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/running-locally.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ deno task start\nWatcher Process started.\n 🍋 Fresh ready\n     Local: http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: HTML Markup for Server-side Rendered Islands\nDESCRIPTION: This HTML snippet shows the server-side rendered markup for an Island component. It includes special annotations by Fresh, enabling browser-side rendering to place islands correctly without requiring hydration of static children.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/islands.md#2025-04-19_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<!--frsh-myisland_default:default:0-->\n<div>\n  Counter is at 0.\n  <button>+</button>\n  <!--frsh-slot-myisland_default:children-->\n  <p>This text is rendered on the server</p>\n  <!--/frsh-slot-myisland_default:children-->\n</div>\n<!--/frsh-myisland_default:default:0-->\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for User Update\nDESCRIPTION: Shows the structure of a JSON payload for updating a user via PUT request.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/creating-a-crud-api.md#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"2\",\n  \"name\": \"New Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Port via Environment Variable\nDESCRIPTION: This command demonstrates how to start a Fresh project with a custom port (3000) using the PORT environment variable. Environment variables take precedence over the default configuration.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/getting-started/running-locally.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ PORT=3000 deno task start\n```\n\n----------------------------------------\n\nTITLE: Fresh Destination Type Definition\nDESCRIPTION: Type definition for Fresh framework's destination kinds.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/middleware.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DestinationKind = \"internal\" | \"static\" | \"route\" | \"notFound\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Fresh Project with Deno\nDESCRIPTION: Command to scaffold a new Fresh project using the Deno CLI\nSOURCE: https://github.com/denoland/fresh/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno run -A -r https://fresh.deno.dev\n```\n\n----------------------------------------\n\nTITLE: Invalid Route Groups Structure Example\nDESCRIPTION: Example showing an invalid route groups configuration where multiple routes map to the same URL, creating ambiguity in routing.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/routing.md#2025-04-19_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n└── routes\n    ├── (group-1)\n    │   └── about.tsx  # Bad: Maps to same `/about` url\n    └── (group-2)\n        └── about.tsx  # Bad: Maps to same `/about` url\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore for Tailwind CSS (Plain Text)\nDESCRIPTION: Adds node_modules to .gitignore to exclude it from version control.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/migrating-to-tailwind.md#2025-04-19_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n+ node_modules/\n```\n\n----------------------------------------\n\nTITLE: Initializing a Fresh Project with Deno\nDESCRIPTION: Command to bootstrap a new Fresh project using the Fresh initialization CLI tool. The command runs the initialization script from the JSR registry with allow-read permissions.\nSOURCE: https://github.com/denoland/fresh/blob/main/init/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno run -Ar jsr:@fresh/init\n```\n\n----------------------------------------\n\nTITLE: Avoiding Duplicate Tags with Key Prop in Fresh TSX\nDESCRIPTION: This code snippet demonstrates how to use the key prop in Fresh's <Head> component to avoid duplicate tags when multiple <Head> components are rendered on the same page.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/modifying-the-head.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n  // routes/page-a.tsx\n  <Head>\n   <meta name=\"og:title\" content=\"This is a title\" key=\"title\" />\n  </Head>\n\n  // components/MyTitle.tsx\n  <Head>\n   <meta name=\"og:title\" content=\"Other title\" key=\"title\" />\n  </Head>\n```\n\n----------------------------------------\n\nTITLE: Sample Markdown File Content (Markdown)\nDESCRIPTION: This snippet shows the contents of a sample Markdown file named 'text.md'. It includes front matter with a description and demonstrates basic Markdown syntax with a header and bold text.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/rendering-markdown.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: testFromText\n---\n\n# Really Big Text\n\n**bold**\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fresh Plugin in TypeScript\nDESCRIPTION: This snippet shows how to create a minimal Fresh plugin with just a name property.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/plugins.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugin } from \"$fresh/server.ts\";\n\nconst plugin: Plugin = {\n  name: \"my_plugin\",\n};\n```\n\n----------------------------------------\n\nTITLE: CSP Violation Report Example\nDESCRIPTION: This text represents an entry of a CSP violation report. It details the document URI, violated directive, and original policy among other metadata provided by the browser when a CSP violation occurs. It's generated after accessing a page with report-only CSP in Fresh.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-csp.md#2025-04-19_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\nThis page violates our configured CSP. But we\\'re using \"reportOnly\". Styles will be applied.\n```\n\n----------------------------------------\n\nTITLE: Running Fresh Auto Updater\nDESCRIPTION: Command to run the Fresh automatic updater tool which updates project dependencies in deno.json\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/updating.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ deno run -A -r https://fresh.deno.dev/update\n```\n\n----------------------------------------\n\nTITLE: CSP Report Entry in JSON Format\nDESCRIPTION: The JSON structure captures a detailed CSP violation report including various fields such as the document URI, directives, and specific violation details. The JSON entry is logged in `csp-reports.txt` upon a CSP violation when fetched from the Fresh application.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-csp.md#2025-04-19_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"csp-report\": {\n    \"document-uri\": \"http://localhost:8000/incorrectCSPwithReport\",\n    \"referrer\": \"http://localhost:8000/incorrectCSPwithReport\",\n    \"violated-directive\": \"style-src-elem\",\n    \"effective-directive\": \"style-src-elem\",\n    \"original-policy\": \"default-src 'none'; style-src 'unsafe-inline' http://www.example.com; report-uri http://localhost:8000/reportHandler; script-src 'nonce-0f2d8259315d40479e8c21979128ac0d'; connect-src 'self'\",\n    \"disposition\": \"report\",\n    \"blocked-uri\": \"http://localhost:8000/example.css\",\n    \"line-number\": 37,\n    \"source-file\": \"http://localhost:8000/incorrectCSPwithReport\",\n    \"status-code\": 200,\n    \"script-sample\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Fresh Build Directory (GitIgnore)\nDESCRIPTION: GitIgnore entry to prevent committing the _fresh build directory to the repository.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/ahead-of-time-builds.md#2025-04-19_snippet_1\n\nLANGUAGE: gitignore\nCODE:\n```\n# Ignore fresh build directory\n_fresh/\n```\n\n----------------------------------------\n\nTITLE: Adding Trailing Slash Middleware in Fresh 2\nDESCRIPTION: Example of how to add the optional trailing slash middleware in Fresh 2 to handle URL formatting consistently.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/canary/examples/migration-guide.md#2025-04-19_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-  import { App, staticFiles } from \"fresh\";\n+  import { App, staticFiles, trailingSlashes } from \"fresh\";\n\n  export const app = new App({ root: import.meta.url })\n    .use(staticFiles())\n+   .use(trailingSlashes(\"never\"));\n```\n\n----------------------------------------\n\nTITLE: Starting Fresh Development Server\nDESCRIPTION: Command to start the Fresh development server using Deno task\nSOURCE: https://github.com/denoland/fresh/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndeno task start\n```\n\n----------------------------------------\n\nTITLE: JSX Link Example\nDESCRIPTION: This JSX code shows a simple link to `/about`.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<a href=\"/about\">About</a>;\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory to the newly created Fresh project\nSOURCE: https://github.com/denoland/fresh/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd deno-fresh-demo\n```\n\n----------------------------------------\n\nTITLE: HTML Link Example\nDESCRIPTION: This HTML snippet shows the rendered output of the JSX example, demonstrating how the `basePath` is automatically applied to absolute links.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/concepts/server-configuration.md#2025-04-19_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/foo/bar/about\">About</a>\n```\n\n----------------------------------------\n\nTITLE: Adding Dark Fresh Badge in Markdown\nDESCRIPTION: Markdown code to add dark version of Fresh badge to documentation\nSOURCE: https://github.com/denoland/fresh/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: md\nCODE:\n```\n[![Made with Fresh](https://fresh.deno.dev/fresh-badge-dark.svg)](https://fresh.deno.dev)\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshot for Showcase\nDESCRIPTION: Command to capture a screenshot of a Fresh application for the showcase\nSOURCE: https://github.com/denoland/fresh/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndeno task screenshot [url] [your-app-name]\n```\n\n----------------------------------------\n\nTITLE: Adding Fresh Badge in HTML\nDESCRIPTION: HTML code to add Fresh badge to web pages\nSOURCE: https://github.com/denoland/fresh/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://fresh.deno.dev\">\n  <img\n    width=\"197\"\n    height=\"37\"\n    src=\"https://fresh.deno.dev/fresh-badge.svg\"\n    alt=\"Made with Fresh\"\n  />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Adding Dark Fresh Badge in HTML\nDESCRIPTION: HTML code to add dark version of Fresh badge to web pages\nSOURCE: https://github.com/denoland/fresh/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://fresh.deno.dev\">\n  <img\n    width=\"197\"\n    height=\"37\"\n    src=\"https://fresh.deno.dev/fresh-badge-dark.svg\"\n    alt=\"Made with Fresh\"\n  />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Creating a Fresh Project from Local Source\nDESCRIPTION: This example shows how to initialize a Fresh project using a local version of the source code. It is intended for developers who want to test or use their own modifications of the Fresh framework. The command given runs the init script found locally instead of from the remote Fresh project.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/using-fresh-canary-version.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\"deno run -A -r path/to/fresh/init.ts\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Initial Fresh Project Structure\nDESCRIPTION: Shows the default file and directory structure of a Fresh project after initialization.\nSOURCE: https://github.com/denoland/fresh/blob/main/docs/latest/examples/changing-the-src-dir.md#2025-04-19_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── README.md\n├── components\n│   └── Button.tsx\n├── deno.json\n├── dev.ts\n├── fresh.gen.ts\n├── islands\n│   └── Counter.tsx\n├── main.ts\n├── routes\n│   ├── greet\n│   │   ├── [name].tsx\n│   ├── api\n│   │   └── joke.ts\n│   ├── _404.tsx\n│   └── index.tsx\n└── static\n    ├── favicon.ico\n    └── logo.svg\n```"
  }
]