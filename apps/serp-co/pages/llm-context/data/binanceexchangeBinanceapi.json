[
  {
    "owner": "binance-exchange",
    "repo": "binanceapi",
    "content": "TITLE: Initializing BinanceApi for Signed and Unsigned Endpoints in Objective-C\nDESCRIPTION: Creates a BinanceApi object with API key and secret key for accessing both signed and unsigned endpoints in Objective-C.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\nBinanceApi *api = [[BinanceApi alloc] initWithApiKey:@\"<apikey>\" secretKey:@\"<secretkey>\"];\n```\n\n----------------------------------------\n\nTITLE: Initializing BinanceApi for Signed and Unsigned Endpoints in Swift\nDESCRIPTION: Creates a BinanceApi object with API key and secret key for accessing both signed and unsigned endpoints in Swift.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet api = BinanceApi(apiKey: \"<apikey>\", secretKey: \"<secretkey>\")\n```\n\n----------------------------------------\n\nTITLE: Getting Current Account Balances in Objective-C\nDESCRIPTION: Retrieves and logs the current account balances for all assets using the Binance API in Objective-C.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: objc\nCODE:\n```\n[api accountInformationWithResponseHandler:^(NSDictionary<NSString *,id> * _Nullable result, NSError * _Nullable error) {\n    if (error != nil) {\n        return;\n    }\n\n    NSDictionary<NSString *, NSDictionary<NSString *, NSDecimalNumber *> *> *balances = [result valueForKey:@\"balances\"];\n    NSLog(@\"Balances\");\n\n    for (NSString *asset in balances) {\n        NSDictionary<NSString *, NSDecimalNumber *> *balance = [balances valueForKey:asset];\n        NSLog(@\"%@ %@\", [balance valueForKey:@\"total\"], asset); // \"free\" and \"locked\" are also available keys\n    }\n}];\n```\n\n----------------------------------------\n\nTITLE: Getting Current Account Balances in Swift\nDESCRIPTION: Retrieves and prints the current account balances for all assets using the Binance API in Swift.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\napi.send(request) { response in\n    assert(response.result.isSuccess)\n\n    let account = response.result.value!\n    let balances = account.balances\n    for (asset, balance) in balances {\n        print(\"\\(balance.total) \\(asset)\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Placing a Test Order in Swift\nDESCRIPTION: Places a test market buy order for ETH/BTC using the Binance API in Swift. This does not execute an actual trade.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nlet request = BinanceTestNewOrderRequest(\n    symbol: \"ETHBTC\",\n    side: .buy,\n    type: .market,\n    quantity: Decimal(string: \"1.1\")!)\n\napi.send(request) { response in\n    assert(response.result.isSuccess)\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling an Order in Swift\nDESCRIPTION: Cancels a specific order using its symbol and order ID with the Binance API in Swift.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nlet symbol = \"<order symbol>\"\nlet orderId = UInt64(<order id>)\nlet request = BinanceCancelOrderRequest(symbol: symbol, orderId: orderId)\n\napi.send(request) { response in\n    assert(request.result.isSuccess)\n\n    let value = response.result.value!\n    print(\"Cancelled order #\\(value.orderId)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling an Order in Objective-C\nDESCRIPTION: Cancels a specific order using its symbol and order ID with the Binance API in Objective-C.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: objc\nCODE:\n```\nNSString *symbol = @\"<order symbol>\";\nUInt64 orderId = <order id>;\n\n[api cancelOrderWithSymbol:symbol orderId:orderId originalClientOrderId:nil newClientOrderId:nil responseHandler:^(NSDictionary<NSString *,id> * _Nullable result, NSError * _Nullable error) {\n    XCTAssertNil(error);\n    XCTAssert(result);\n\n    UInt64 orderId = [[result valueForKey:@\"orderId\"] unsignedLongLongValue];\n    NSLog(@\"Cancelled order #%llu\", orderId);\n}];\n```\n\n----------------------------------------\n\nTITLE: Querying Order Status in Objective-C\nDESCRIPTION: Retrieves and logs the status of a specific order using its symbol and order ID with the Binance API in Objective-C.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: objc\nCODE:\n```\nNSString *symbol = @\"<order symbol>\";\nUInt64 orderId = <order id>;\n\n[api queryOrderWithSymbol:symbol orderId:orderId originalClientOrderId:nil responseHandler:^(NSDictionary<NSString *,id> * _Nullable result, NSError * _Nullable error) {\n    if (error != nil) {\n        return\n    }\n\n    NSLog(@\"%@: %@\", [result valueForKey:@\"symbol\"], [result valueForKey:@\"status\"]);\n}];\n```\n\n----------------------------------------\n\nTITLE: Querying Order Status in Swift\nDESCRIPTION: Retrieves and prints the status of a specific order using its symbol and order ID with the Binance API in Swift.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nlet request = BinanceQueryOrderRequest(symbol: self.querySymbol, orderId: self.queryOrderId)\n\napi.send(request) { response in\n    assert(response.result.isSuccess)\n\n    let order = response.result.value!\n    print(order)\n}\n```\n\n----------------------------------------\n\nTITLE: Placing a Test Order in Objective-C\nDESCRIPTION: Places a test market buy order for ETH/BTC using the Binance API in Objective-C. This does not execute an actual trade.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: objc\nCODE:\n```\n[api testNewOrderWithSymbol:@\"ETHBTC\" side:BinanceOrderSide.Buy type:BinanceOrderType.Market timeInForce:nil quantity:Decimal(string: \"1.1\") price:nil newClientOrderId:nil stopPrice:nil icebergQuantity:nil responseHandler:^(NSError * _Nullable error) {\n    if (error != nil) {\n        return;\n    }\n}];\n```\n\n----------------------------------------\n\nTITLE: Getting Latest Prices for All Symbols in Swift\nDESCRIPTION: Retrieves and prints the latest prices for all symbols using the Binance API in Swift.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet api = BinanceApi()\nlet request = BinanceAllPricesRequest()\n\napi.send(request) { response in\n    assert(request.result.isSuccess)\n\n    let elements = response.result.value!.elements\n    for (symbol, price) in elements {\n        print(\"\\(symbol): \\(price)\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Latest Prices for All Symbols in Objective-C\nDESCRIPTION: Retrieves and logs the latest prices for all symbols using the Binance API in Objective-C.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: objc\nCODE:\n```\n[api allPricesWithResponseHandler:^(NSDictionary<NSString *,NSDecimalNumber *> * _Nullable result, NSError * _Nullable error) {\n    if (error != nil) {\n        return;\n    }\n\n    for (NSString *symbol in result) {\n        NSLog(@\"%@: %@\", symbol, [result valueForKey:symbol]);\n    }\n}];\n```\n\n----------------------------------------\n\nTITLE: Getting Market Depth for a Symbol in Swift\nDESCRIPTION: Retrieves and prints the market depth (order book) for a specific symbol using the Binance API in Swift.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet symbol = \"ETHBTC\"\nlet request = BinanceDepthRequest(symbol: symbol)\n\napi.send(request) { response in\n    assert(response.result.isSuccess)\n\n    let value = response.result.value!\n    print(\"lastUpdateId: \\(value.lastUpdateId)\")\n    print(\"bids: \\(value.bids)\")\n    print(\"asks: \\(value.asks)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Market Depth for a Symbol in Objective-C\nDESCRIPTION: Retrieves and logs the market depth (order book) for a specific symbol using the Binance API in Objective-C.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: objc\nCODE:\n```\n[api depthWithSymbol:@\"ETHBTC\" limit:0 responseHandler:^(NSDictionary<NSString *,id> * _Nullable result, NSError * _Nullable error) {\n    if (error != nil) {\n        return;\n    }\n\n    NSLog(@\"lastUpdateId: %@\", [result valueForKey:@\"lastUpdateId\"]);\n    NSLog(@\"bids: %@\", [result valueForKey:@\"bids\"]);\n    NSLog(@\"asks: %@\", [result valueForKey:@\"asks\"]);\n}];\n```\n\n----------------------------------------\n\nTITLE: Getting Market Spread for All Symbols in Swift\nDESCRIPTION: Retrieves and prints the market spread (bid and ask prices and quantities) for all symbols using the Binance API in Swift.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet request = BinanceAllBookTickersRequest()\n\napi.send(request) { response in\n    assert(response.result.isSuccess)\n\n    let elements = response.result.value!.elements\n    for (asset, prices) in elements {\n        let bidPrice = prices.bidPrice\n        let bidQuantity = prices.bidQuantity\n        let askPrice = prices.askPrice\n        let askQuantity = prices.askQuantity\n        print(\"\\(asset): \\(bidPrice) @ \\(bidQuantity) - \\(askPrice) @ \\(askQuantity)\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Market Spread for All Symbols in Objective-C\nDESCRIPTION: Retrieves and logs the market spread (bid and ask prices and quantities) for all symbols using the Binance API in Objective-C.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: objc\nCODE:\n```\n[api allBookTickersWithResponseHandler:^(NSDictionary<NSString *, id> * _Nullable result, NSError * _Nullable error) {\n    if (error != nil) {\n        return;\n    }\n\n    for (NSString *asset in result) {\n        NSDictionary *dict = [result valueForKey:asset];\n        NSDecimalNumber *bidPrice = [dict valueForKey:@\"bidPrice\"];\n        NSDecimalNumber *bidQuantity = [dict valueForKey:@\"bidQuantity\"];\n        NSDecimalNumber *askPrice = [dict valueForKey:@\"askPrice\"];\n        NSDecimalNumber *askQuantity = [dict valueForKey:@\"askQuantity\"];\n        NSLog(@\"%@: %@ @ %@ - %@ @ %@\", asset, bidPrice, bidQuantity, askPrice, askQuantity);\n    }\n}];\n```\n\n----------------------------------------\n\nTITLE: Initializing BinanceApi for Unsigned Endpoints in Objective-C\nDESCRIPTION: Creates a BinanceApi object for accessing only unsigned endpoints in Objective-C.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: objc\nCODE:\n```\nBinanceApi *api = [[BinanceApi alloc] init];\n```\n\n----------------------------------------\n\nTITLE: Initializing BinanceApi for Unsigned Endpoints in Swift\nDESCRIPTION: Creates a BinanceApi object for accessing only unsigned endpoints in Swift.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet api = BinanceApi()\n```\n\n----------------------------------------\n\nTITLE: Installing BinanceApi via Carthage\nDESCRIPTION: Instructions for adding the BinanceApi library to a project using Carthage. This includes adding the repository to the Cartfile and updating the built frameworks.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngithub \"dpyro/BinanceApi\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ carthage update\n```\n\n----------------------------------------\n\nTITLE: Binance API TODO List in Markdown\nDESCRIPTION: Markdown formatted list of development tasks including websocket implementation, Apple platform targets, package management, API response optimization, debugging support and CI integration.\nSOURCE: https://github.com/binance-exchange/binanceapi/blob/master/TODO.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Add websocket endpoints.\n* Add iOS, tvOS, and watchOS targets.\n* Swift package manager integration.\n* Remove the need for an `elements` ivar in array responses that are transformed into dicts.\n* Add dSYM files for debugging\n* Add CI support\n```"
  }
]