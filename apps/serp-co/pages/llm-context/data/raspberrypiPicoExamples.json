[
  {
    "owner": "raspberrypi",
    "repo": "pico-examples",
    "content": "TITLE: Conditionally Adding Network Examples in CMake\nDESCRIPTION: Checks if WIFI_SSID and WIFI_PASSWORD are defined using CMake's if and STREQUAL logic. If credentials are set, it includes numerous network-related examples (HTTP, TCP/UDP, MQTT, etc.) and a nested check for TLS examples based on PICO_MBEDTLS_PATH. Otherwise, it outputs a message skipping these examples.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (\"${WIFI_SSID}\" STREQUAL \"\")\n    message(\"Skipping some Pico W examples as WIFI_SSID is not defined\")\nelseif (\"${WIFI_PASSWORD}\" STREQUAL \"\")\n    message(\"Skipping some Pico W examples as WIFI_PASSWORD is not defined\")\nelse()\n    add_subdirectory_exclude_platforms(freertos)\n    add_subdirectory_exclude_platforms(httpd)\n    add_subdirectory_exclude_platforms(iperf)\n    add_subdirectory_exclude_platforms(ntp_client)\n    add_subdirectory_exclude_platforms(tcp_client)\n    add_subdirectory_exclude_platforms(tcp_server)\n    add_subdirectory_exclude_platforms(udp_beacon)\n    add_subdirectory_exclude_platforms(http_client)\n    add_subdirectory_exclude_platforms(mqtt)\n\n    if (NOT PICO_MBEDTLS_PATH)\n        message(\"Skipping tls examples as PICO_MBEDTLS_PATH is not defined\")\n    else()\n        add_subdirectory_exclude_platforms(tls_client)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Standard Library Dependency CMake\nDESCRIPTION: This command links the standard library (`pico_stdlib`) to the `picoboard_button` executable target. This provides essential functions and framework support required for developing applications on the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/picoboard/button/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(picoboard_button pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Linking Standard Library (CMake)\nDESCRIPTION: Links the essential 'pico_stdlib' library to the 'hello_uart' executable target. This provides access to standard functions and hardware abstraction layers necessary for Pico SDK applications.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/hello_uart/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_uart pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries CMake MPU9250 SPI\nDESCRIPTION: Links necessary libraries to the 'mpu9250_spi' executable target. It includes the standard Pico SDK library ('pico_stdlib') and the specific hardware SPI support library ('hardware_spi'), which are essential dependencies for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/mpu9250_spi/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(mpu9250_spi pico_stdlib hardware_spi)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target (CMake)\nDESCRIPTION: Links the 'hello_watchdog' executable target to the 'pico_stdlib' library. This command ensures that the standard Pico SDK library functions are available for use by the executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/watchdog/hello_watchdog/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(hello_watchdog pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable in CMake\nDESCRIPTION: Links standard Pico libraries (`pico_stdlib`) and the I2C hardware library (`hardware_i2c`) to the `mma8451_i2c` executable target using `target_link_libraries`. This provides access to necessary functions and hardware support for the program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mma8451_i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(mma8451_i2c pico_stdlib hardware_i2c)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: This command defines a new executable target named `hello_dma` using the specified source file `hello_dma.c`. This is the fundamental step to tell CMake what program to build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/hello_dma/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_dma\n hello_dma.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target - CMake\nDESCRIPTION: Creates an executable target named 'rtc_alarm_repeat' in the CMake build system, using 'rtc_alarm_repeat.c' as the source file. This is the first step in defining a buildable program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/rtc_alarm_repeat/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(rtc_alarm_repeat\n      rtc_alarm_repeat.c\n      )\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Executable (CMake)\nDESCRIPTION: Defines an executable target named `adc_dma_capture` using the source file `dma_capture.c`. This is the fundamental step in CMake to declare a program to be built.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/dma_capture/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(adc_dma_capture\n        dma_capture.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable with CMake for Raspberry Pi Pico\nDESCRIPTION: This command defines a CMake executable target named `multicore_fifo_irqs`. It specifies the source file `multicore_fifo_irqs.c` that will be compiled into this executable. This is the entry point for building the program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_fifo_irqs/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(multicore_fifo_irqs\n        multicore_fifo_irqs.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking Standard Library CMake\nDESCRIPTION: Links the previously defined executable target `hello_resus` with the `pico_stdlib` library. This provides essential standard library functions and core Pico SDK functionalities required by the application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_resus/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_resus pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Initialize Pico SDK - CMake\nDESCRIPTION: Calls the Pico SDK initialization function provided by `pico_sdk_import.cmake`. This step is essential to set up the SDK's internal state and make its functionalities available for the project.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\npico_sdk_init()\n```\n\n----------------------------------------\n\nTITLE: Building Standard PIO UART RX Executable (CMake)\nDESCRIPTION: This snippet defines and configures the CMake build target for the standard `pio_uart_rx` example. It specifies the main C source file, generates the necessary PIO header from the `.pio` source, links core Pico SDK libraries like `pico_stdlib`, `pico_multicore`, and `hardware_pio`, and uses Pico SDK functions to set up build outputs and an example URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/uart_rx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_uart_rx)\npico_generate_pio_header(pio_uart_rx ${CMAKE_CURRENT_LIST_DIR}/uart_rx.pio)\ntarget_sources(pio_uart_rx PRIVATE uart_rx.c)\ntarget_link_libraries(pio_uart_rx PRIVATE\n        pico_stdlib\n        pico_multicore\n        hardware_pio\n        )\npico_add_extra_outputs(pio_uart_rx)\n\n# add url via pico_set_program_url\nexample_auto_set_url(pio_uart_rx)\n```\n\n----------------------------------------\n\nTITLE: Define Executable Target in CMake for Pico\nDESCRIPTION: This command defines a new executable target named `hello_pwm`. It specifies that the target is built from the source file `hello_pwm.c`, which should contain the main application logic for the example. This is the fundamental step to create a buildable program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pwm/hello_pwm/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(hello_pwm\n        hello_pwm.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: This CMake command defines an executable target named `multicore_runner_queue`. It specifies that the executable is built from the source file `multicore_runner_queue.c`, which is a fundamental step in configuring the build process for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_runner_queue/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(multicore_runner_queue\n        multicore_runner_queue.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Flash Examples (CMake)\nDESCRIPTION: This CMake snippet conditionally includes flash-related example subdirectories. It checks if the 'hardware_flash' target is available on the current platform. If so, it adds various flash examples (`cache_perfctr`, `nuke`, `program`, `ssi_dma`, `xip_stream`, `runtime_flash_permissions`), sometimes excluding specific platforms like `rp2350.*` or `rp2040`. If `hardware_flash` is not available, it skips these examples and prints an informational message.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_flash)\n  add_subdirectory_exclude_platforms(cache_perfctr \"rp2350.*\")\n  add_subdirectory_exclude_platforms(nuke)\n  add_subdirectory_exclude_platforms(program)\n  add_subdirectory_exclude_platforms(ssi_dma \"rp2350.*\")\n  add_subdirectory_exclude_platforms(xip_stream)\n  add_subdirectory_exclude_platforms(runtime_flash_permissions rp2040)\nelse()\n  message(\"Skipping flash examples as hardware_flash is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target: TLS Client Background CMake\nDESCRIPTION: This snippet defines the build process for the `picow_tls_client_background` executable. It specifies the source files (`picow_tls_client.c`, `tls_common.c`), adds required compile definitions for Wi-Fi SSID and password using variables, includes necessary directories for common headers (like lwipopts and mbedtls_config.h), and links libraries for Pico W with thread-safe background Wi-Fi, lwIP with mbedTLS, mbedTLS itself, and the standard Pico library. Finally, it uses `pico_add_extra_outputs` to generate the standard Pico SDK output formats (UF2, ELF, etc.).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/tls_client/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_tls_client_background\n        picow_tls_client.c\n        tls_common.c\n        )\ntarget_compile_definitions(picow_tls_client_background PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        )\ntarget_include_directories(picow_tls_client_background PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts and mbedtls_config.h\n        )\ntarget_link_libraries(picow_tls_client_background\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_lwip_mbedtls\n        pico_mbedtls\n        pico_stdlib\n        )\npico_add_extra_outputs(picow_tls_client_background)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target - CMake\nDESCRIPTION: Defines a CMake executable target named `picoboard_blinky` using the source file `blinky.c`. This is the first step in setting up a buildable program for the Raspberry Pi Pico. Requires a C source file.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/picoboard/blinky/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picoboard_blinky\n        blinky.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Executable with CMake\nDESCRIPTION: Defines a CMake executable target named 'hello_7segment'. It specifies the source file 'hello_7segment.c' that will be compiled to build this executable, establishing the primary build artifact.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/gpio/hello_7segment/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_7segment\n      hello_7segment.c\n      )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable for Pico Example (CMake)\nDESCRIPTION: This command defines an executable target named 'lcd_uart'. It specifies the source file 'lcd_uart.c' which will be compiled to create the executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/lcd_uart/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(lcd_uart\n        lcd_uart.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Executable with CMake\nDESCRIPTION: Defines an executable target named `max7219_8x7seg_spi` using the source file `max7219_8x7seg_spi.c`. This command is essential for telling CMake which source files compile into the main program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/max7219_8x7seg_spi/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(\n        max7219_8x7seg_spi\n        max7219_8x7seg_spi.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target in CMake\nDESCRIPTION: Defines an executable target named `picow_httpd_background` using the source file `pico_httpd.c`. This command is fundamental for creating the main application binary from the specified source code.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/httpd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_httpd_background\n        pico_httpd.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Pico Executable Target (CMake)\nDESCRIPTION: Defines a CMake executable target named `dev_lowlevel`. It specifies that the executable is built from the source file `dev_lowlevel.c`. This is the fundamental step to create a build artifact for the project.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/device/dev_lowlevel/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dev_lowlevel\n      dev_lowlevel.c\n      )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target - CMake\nDESCRIPTION: Defines a new executable target named `pio_hub75`. This command is typically the starting point for configuring the build of a specific program within a CMake project.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hub75/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_hub75)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Executable Target (CMake)\nDESCRIPTION: Defines a new executable target named flash_cache_perfctr within the CMake project. It specifies the source file flash_cache_perfctr.c that will be compiled to create this executable. This is the first step in defining a build artifact.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/cache_perfctr/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(flash_cache_perfctr\n        flash_cache_perfctr.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Library Target (CMake)\nDESCRIPTION: Defines a static or shared library target named `nec_receive_library` using the specified source file `nec_receive.c`. This command registers the library with the CMake build system.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/nec_receive_library/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(nec_receive_library nec_receive.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable in CMake\nDESCRIPTION: Defines a C/C++ executable target named `pa1010d_i2c` within the CMake build system. It specifies the source file `pa1010d_i2c.c` that will be compiled to create this executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/pa1010d_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pa1010d_i2c\n        pa1010d_i2c.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Define bmp280_i2c Executable Target CMake\nDESCRIPTION: Defines the `bmp280_i2c` executable target in CMake, specifying the source file `bmp280_i2c.c`. This command is the starting point for the build process of this specific example program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/bmp280_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(bmp280_i2c\n        bmp280_i2c.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target picow_blink CMake\nDESCRIPTION: Defines the CMake executable target named 'picow_blink' using the source file 'picow_blink.c'. This command is the first step in configuring the build for the standard blink application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_blink\n        picow_blink.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable CMake\nDESCRIPTION: This command defines a new executable target within the CMake build system. The specified name 'pio_quadrature_encoder' will be used for the generated executable file and as a reference for subsequent build configurations.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/quadrature_encoder/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_quadrature_encoder)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target using CMake\nDESCRIPTION: This snippet defines the build target `hello_dcp` as an executable within the CMake project. It lists the primary source files (`hello_dcp.c` and `dcp_examples.S`) that will be compiled and linked together to create this executable binary.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dcp/hello_dcp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_dcp\n        hello_dcp.c\n        dcp_examples.S\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: Creates a new executable build target named 'unique_board_id' from the specified source file. This command is the fundamental step to declare the executable that CMake will build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/unique_board_id/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(unique_board_id\n        unique_board_id.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Configure Background TCP Client Executable - CMake\nDESCRIPTION: Configures the CMake target for the background-threaded TCP client example. It specifies the source file (`picow_tcp_client.c`), defines necessary symbols like WIFI credentials and the server IP for the compiler, sets include directories, and links libraries required for the background threadsafe CYW43/LWIP integration and standard Pico functions.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/tcp_client/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_tcpip_client_background\n        picow_tcp_client.c\n        )\ntarget_compile_definitions(picow_tcpip_client_background PRIVATE\n        WIFI_SSID=\\\"${\\${WIFI_SSID}}\\\"\n        WIFI_PASSWORD=\\\"${\\${WIFI_PASSWORD}}\\\"\n        TEST_TCP_SERVER_IP=\\\"${\\${TEST_TCP_SERVER_IP}}\\\"\n        )\ntarget_include_directories(picow_tcpip_client_background PRIVATE\n        ${\\${CMAKE_CURRENT_LIST_DIR}}\n        ${\\${CMAKE_CURRENT_LIST_DIR}}/.. # for our common lwipopts\n        )\ntarget_link_libraries(picow_tcpip_client_background\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_stdlib\n        )\n\npico_add_extra_outputs(picow_tcpip_client_background)\n```\n\n----------------------------------------\n\nTITLE: Packaging Application UF2 (CMake)\nDESCRIPTION: Packages the application binary into a UF2 file. It uses `pico_package_uf2_output` to create the UF2, specifying the target flash address (0x10000000), which is the same start address as the bootloader's UF2, indicating they are packaged together or intended to be programmed contiguously into flash.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n# package uf2 in flash\npico_package_uf2_output(hello_serial_enc 0x10000000)\n```\n\n----------------------------------------\n\nTITLE: Building Standard HTTP Client Executable CMake\nDESCRIPTION: This defines the main `picow_http_client` executable target. It includes the source file `picow_http_client.c` and sets compiler definitions for `WIFI_SSID` and `WIFI_PASSWORD`, which are typically passed from the build environment. It also sets include directories and links the necessary Pico W networking stack, the utility library, and the standard library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/http_client/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_http_client\n        picow_http_client.c\n        )\ntarget_compile_definitions(picow_http_client PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        )\ntarget_include_directories(picow_http_client PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts and mbedtls_config\n        )\ntarget_link_libraries(picow_http_client\n        pico_cyw43_arch_lwip_threadsafe_background\n        example_lwip_http_util\n        pico_stdlib\n        )\npico_add_extra_outputs(picow_http_client)\n```\n\n----------------------------------------\n\nTITLE: Add Source Files to Target CMake\nDESCRIPTION: This command adds the `differential_manchester.c` source file to the `pio_differential_manchester` executable target. The `PRIVATE` keyword means these sources are only used to build this specific target and are not exposed to targets that might link against it. It is required for building the application logic.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/differential_manchester/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(pio_differential_manchester PRIVATE differential_manchester.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target CMake\nDESCRIPTION: Specifies the source files (`hello.c`) that should be compiled and linked into the `hello_pio` executable target. The `PRIVATE` keyword means these source files are only required for building this specific target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hello_pio/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(hello_pio PRIVATE hello.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring PIO Quadrature Encoder Executable Build - CMake\nDESCRIPTION: This CMake snippet defines the build configuration for the `pio_quadrature_encoder_substep` executable project targeting the Raspberry Pi Pico. It specifies the main source file (`quadrature_encoder_substep.c`), generates a C header from the associated PIO program file, and links essential Pico SDK libraries including standard library, multicore support, and hardware drivers for PIO, PWM, and Watchdog. Additionally, it sets a compiler definition for USB stdio behavior, enables USB stdio for the project, configures extra build outputs, and automatically sets the program URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/quadrature_encoder_substep/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_quadrature_encoder_substep)\n\npico_generate_pio_header(pio_quadrature_encoder_substep ${CMAKE_CURRENT_LIST_DIR}/quadrature_encoder_substep.pio)\n\ntarget_sources(pio_quadrature_encoder_substep PRIVATE quadrature_encoder_substep.c)\n\ntarget_link_libraries(pio_quadrature_encoder_substep PRIVATE\n        pico_stdlib\n        pico_multicore\n        hardware_pio\n        hardware_pwm\n        hardware_watchdog\n        )\n\ntarget_compile_definitions(pio_quadrature_encoder_substep PRIVATE PICO_STDIO_USB_DEFAULT_CRLF=0)\npico_enable_stdio_usb(pio_quadrature_encoder_substep 1)\n\npico_add_extra_outputs(pio_quadrature_encoder_substep)\n\n# add url via pico_set_program_url\nexample_auto_set_url(pio_quadrature_encoder_substep)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pico Example Build with TinyUSB - CMake\nDESCRIPTION: This CMake snippet defines how to build the 'hello_anything' executable. It specifies the source file, links the standard Pico library, enables standard input/output over both USB and UART interfaces, generates various output formats (map, bin, hex, uf2), and automatically sets a program URL. The entire configuration block is conditional, executing only if the `tinyusb_device` target is set. If running on the device and TinyUSB is not initialized, it skips the build and prints a message.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/hello_anything/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET tinyusb_device)\n  add_executable(hello_anything\n          hello_anything.c\n          )\n\n  # pull in common dependencies\n  target_link_libraries(hello_anything pico_stdlib)\n\n  # enable usb and uart output\n  pico_enable_stdio_usb(hello_anything 1)\n  pico_enable_stdio_uart(hello_anything 1)\n\n  # create map/bin/hex/uf2 file etc.\n  pico_add_extra_outputs(hello_anything)\n\n  # add url via pico_set_program_url\n  example_auto_set_url(hello_anything)\nelseif(PICO_ON_DEVICE)\n  message(\"Skipping hello_anything because TinyUSB submodule is not initialized in the SDK\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Library - CMake\nDESCRIPTION: This snippet adds include directories required by `onewire_library`. It adds the source directory (`CMAKE_CURRENT_SOURCE_DIR`) and the build binary directory (`CMAKE_CURRENT_BINARY_DIR`). The binary directory is crucial because the header generated by `pico_generate_pio_header` (Snippet 2) is typically placed there. These are `INTERFACE` requirements, passed to consuming targets.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/onewire/onewire_library/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# add the \\`binary\\` directory so that the generated headers are included in the project\n#\ntarget_include_directories(onewire_library INTERFACE\n\t${CMAKE_CURRENT_SOURCE_DIR}\n\t${CMAKE_CURRENT_BINARY_DIR}\n\t)\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI Master Target with CMake\nDESCRIPTION: This CMake code block defines an executable target named `spi_master` from the `spi_master.c` source file. It links the necessary Pico SDK standard library (`pico_stdlib`) and the hardware SPI library (`hardware_spi`). Additional commands are included to generate extra build outputs (like .map, .bin, .hex files) and set a program URL for the executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_master_slave/spi_master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(spi_master\n      spi_master.c\n      )\n\n# Pull in basic dependencies\ntarget_link_libraries(spi_master pico_stdlib hardware_spi)\n\n# create map/bin/hex file etc.\npico_add_extra_outputs(spi_master)\n\n# add url via pico_set_program_url\nexample_auto_set_url(spi_master)\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi Pico ADC Example Build (CMake)\nDESCRIPTION: This snippet configures the CMake build for the `microphone_adc` example on the Raspberry Pi Pico. It defines the executable target from the specified source file, links essential libraries (`pico_stdlib` for standard functionality and `hardware_adc` for ADC hardware support), enables the generation of standard Pico build artifacts (map, bin, hex), and sets a program URL for the final executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/microphone_adc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(microphone_adc\n        microphone_adc.c\n        )\n\n# pull in common dependencies and adc hardware support\ntarget_link_libraries(microphone_adc pico_stdlib hardware_adc)\n\n# create map/bin/hex file etc.\npico_add_extra_outputs(microphone_adc)\n\n# add url via pico_set_program_url\nexample_auto_set_url(microphone_adc)\n```\n\n----------------------------------------\n\nTITLE: Configuring mbedtls SHA-256 Example Build - CMake\nDESCRIPTION: This CMake snippet defines and configures the `mbedtls_sha256` executable target. It includes the source file (`mbedtls_sha256.c`), links standard Pico libraries (`pico_stdlib`), the mbedtls library (`pico_mbedtls`), and includes the current directory for headers. It also adds standard Pico output formats (`pico_add_extra_outputs`) and sets the example URL (`example_auto_set_url`). The initial `if` condition skips the target definition if `hardware_sha256` is not available, indicating a dependency on specific hardware support.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/sha/mbedtls_sha256/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT TARGET hardware_sha256)\n  return()\nendif()\n\n# This example uses the mbedtls SHA-256 API\n# mbedtls_config.h defines MBEDTLS_SHA256_ALT enabling hardware acceleration if supported\nadd_executable(mbedtls_sha256\n        mbedtls_sha256.c\n        )\ntarget_link_libraries(mbedtls_sha256\n        pico_stdlib\n        pico_mbedtls\n)\ntarget_include_directories(mbedtls_sha256 PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n)\npico_add_extra_outputs(mbedtls_sha256)\nexample_auto_set_url(mbedtls_sha256)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multicore Doorbell Example Build - CMake\nDESCRIPTION: This snippet configures the CMake build rules for the 'multicore_doorbell' example project. It first defines an executable target named 'multicore_doorbell' using the specified source file 'multicore_doorbell.c'. It then links this target against the 'pico_stdlib' (standard library) and 'pico_multicore' (multicore support) libraries, which are required dependencies for this example. Finally, it invokes helper functions to generate additional outputs like UF2 files and set a project URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_doorbell/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(multicore_doorbell\n        multicore_doorbell.c\n        )\ntarget_link_libraries(multicore_doorbell\n        pico_stdlib\n        pico_multicore)\npico_add_extra_outputs(multicore_doorbell)\nexample_auto_set_url(multicore_doorbell)\n```\n\n----------------------------------------\n\nTITLE: Managing OTP Key File Generation and Copy (CMake)\nDESCRIPTION: Configures custom build commands to manage the OTP key file (otp.json). The first command updates the file using a CMake script when the private AES key changes, and the second command copies the generated file to the build directory. A custom target is created to ensure these steps run before the bootloader build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Add command to update otp.json if privateaes.bin changes\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_LIST_DIR}/otp.json\n    COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_CURRENT_LIST_DIR}/update-key.cmake\"\n    DEPENDS ${CMAKE_CURRENT_LIST_DIR}/privateaes.bin)\n# Copy that otp.json file to build directory\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/otp.json\n    COMMAND ${CMAKE_COMMAND} -E copy \"${CMAKE_CURRENT_LIST_DIR}/otp.json\" \"${CMAKE_CURRENT_BINARY_DIR}/otp.json\"\n    DEPENDS ${CMAKE_CURRENT_LIST_DIR}/otp.json)\nadd_custom_target(otp_json DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/otp.json)\nadd_dependencies(enc_bootloader otp_json)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target - CMake\nDESCRIPTION: Creates the executable target named `rtc_alarm` from the specified source file `rtc_alarm.c`. This is the initial step in defining the program to be built.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/rtc_alarm/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(rtc_alarm\n        rtc_alarm.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target (CMake)\nDESCRIPTION: Defines a CMake executable target named 'hello_watchdog' using the source file 'hello_watchdog.c'. This command is fundamental for specifying the main output of the build process.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/watchdog/hello_watchdog/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(hello_watchdog\n      hello_watchdog.c\n      )\n```\n\n----------------------------------------\n\nTITLE: Define Executable Target - CMake\nDESCRIPTION: Defines a new executable target named 'pio_logic_analyser'. This is the first step in creating a build artifact in CMake, specifying the name under which the compiled program will be known.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/logic_analyser/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_logic_analyser)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target CMake\nDESCRIPTION: Defines an executable target named `hello_pio` in the CMake build system. This target will be the primary output of the build process.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hello_pio/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_pio)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable CMake MPU9250 SPI\nDESCRIPTION: Defines the main executable target named 'mpu9250_spi' and specifies the source file 'mpu9250_spi.c' to compile it from. This is the initial step in setting up the build target within the CMake project.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/mpu9250_spi/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(mpu9250_spi\n        mpu9250_spi.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Define Executable Target CMake\nDESCRIPTION: Defines the executable target named `hello_universal` using the source file `hello_universal.c`. This command registers the primary build artifact with CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/hello_universal/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_universal\n        hello_universal.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target - CMake\nDESCRIPTION: Defines the CMake executable target named 'hello_timer' using the source file 'hello_timer.c'. This is the primary step to tell CMake what program to build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/timer/hello_timer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_timer\n        hello_timer.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: This command defines an executable target named `joystick_display` based on the specified source file `joystick_display.c`. This is the foundational step in CMake to create a buildable program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/joystick_display/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(joystick_display\n        joystick_display.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Encrypted Bootloader Executable (CMake)\nDESCRIPTION: Defines the executable target for the encrypted bootloader. It includes the main C source file and an assembly file likely related to AES operations. This snippet creates the basic build target for the bootloader.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(enc_bootloader\n        enc_bootloader.c\n        aes.S\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs CMake\nDESCRIPTION: Invokes the Pico SDK-specific CMake function to generate additional build artifacts for the 'dvi_out_hstx_encoder' target. This command typically creates output files such as .uf2, .bin, .hex, and .map files, which are commonly used for flashing the Pico or for debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hstx/dvi_out_hstx_encoder/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(dvi_out_hstx_encoder)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs CMake\nDESCRIPTION: Uses a Pico SDK-specific CMake function, `pico_add_extra_outputs`, to generate additional build artifacts for the 'rand' target. These outputs typically include .map, .bin, and .hex files, which are essential for deploying and debugging on the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/rand/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(rand)\n```\n\n----------------------------------------\n\nTITLE: Generate Extra Build Outputs (Pico SDK CMake)\nDESCRIPTION: Invokes a Pico SDK-specific function to generate useful additional build artifacts for the `flash_program` target, including the .map file, and the .bin and .hex files commonly used for flashing microcontrollers.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/program/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(flash_program)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs CMake\nDESCRIPTION: Uses a Pico SDK-specific function to configure the build process to generate additional output formats for the `multicore_runner` target, such as `.uf2`, `.hex`, and `.bin` files. These formats are commonly used for flashing the program onto the Raspberry Pi Pico. This relies on the `pico_add_extra_outputs` function being available from the SDK's CMake modules.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(multicore_runner)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs (CMake)\nDESCRIPTION: This Raspberry Pi Pico SDK specific function is used to generate additional build artifacts for the `dma_control_blocks` executable, such as .map, .bin, and .hex files, which are commonly used for flashing and debugging embedded systems.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/control_blocks/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(dma_control_blocks)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs for CMake Target - CMake\nDESCRIPTION: The `pico_add_extra_outputs` function is a Pico SDK specific command used to generate additional build artifacts for the target `hstx_spi_lcd`. This typically includes files like .map, .bin, .hex, and the .uf2 file required for flashing onto the Raspberry Pi Pico board.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hstx/spi_lcd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hstx_spi_lcd)\n```\n\n----------------------------------------\n\nTITLE: Generate Extra Build Outputs CMake\nDESCRIPTION: Configures CMake to generate additional output file formats (like `.bin`, `.hex`, and `.uf2`) for the `hello_universal` executable target. These formats are commonly used for flashing and deploying applications to the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/hello_universal/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_universal)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for picow_blink CMake\nDESCRIPTION: Uses a Pico SDK function to add standard build outputs like the .uf2, .hex, and .map files for the 'picow_blink' executable target. These files are necessary for flashing and debugging the application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(picow_blink)\n```\n\n----------------------------------------\n\nTITLE: Adding Standard Outputs for Pico Executable in CMake\nDESCRIPTION: This CMake function, specific to the Pico SDK, adds common extra output formats for the executable, such as `.uf2`, `.bin`, and `.hex` files. These formats are useful for flashing the executable onto the Raspberry Pi Pico board.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/ssd1306_i2c/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(ssd1306_i2c)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Outputs with Pico CMake Macro\nDESCRIPTION: This Pico-specific CMake macro adds extra build outputs (like .uf2 files) for the `pio_ir_loopback` executable, facilitating easy deployment to the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/ir_loopback/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pio_ir_loopback)\n```\n\n----------------------------------------\n\nTITLE: Configuring PIO I2C Bus Scanner Executable Build - CMake\nDESCRIPTION: This CMake snippet defines the build process for the 'pio_i2c_bus_scan' executable. It specifies the executable name, uses `pico_generate_pio_header` to process the `i2c.pio` assembly file, lists the C source and header files, links the required `pico_stdlib` and `hardware_pio` libraries, and configures standard output files and a program URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_i2c_bus_scan)\n\npico_generate_pio_header(pio_i2c_bus_scan ${CMAKE_CURRENT_LIST_DIR}/i2c.pio)\n\ntarget_sources(pio_i2c_bus_scan PRIVATE\n        i2c_bus_scan.c\n        pio_i2c.c\n        pio_i2c.h\n        )\n\ntarget_link_libraries(pio_i2c_bus_scan PRIVATE pico_stdlib hardware_pio)\npico_add_extra_outputs(pio_i2c_bus_scan)\n\n# add url via pico_set_program_url\nexample_auto_set_url(pio_i2c_bus_scan)\n\n```\n\n----------------------------------------\n\nTITLE: Loading Encrypted Firmware with picotool (bash)\nDESCRIPTION: Provides a sequence of `picotool` commands to load encrypted firmware onto a Raspberry Pi Pico. It first loads the encrypted bootloader (`enc_bootloader.uf2`), reboots the device into flash programming mode (`-u`), and then loads the encrypted application (`hello_serial_enc.uf2`), using the `-x` flag to execute the application after a successful load. Requires `picotool` installed and the Pico connected.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npicotool load enc_bootloader.uf2\npicotool reboot -u\npicotool load -x hello_serial_enc.uf2\n```\n\n----------------------------------------\n\nTITLE: Defining BLE Temperature Reader Executable (Client) - CMake\nDESCRIPTION: This CMake block defines the build rules for the 'picow_ble_temp_reader' executable, which functions as a BLE GATT client. It includes the `client.c` source file, links essential libraries for standard Pico operations, BLE stack, CYW43 driver, and ADC hardware. It also includes necessary configuration directories and defines the `RUNNING_AS_CLIENT=1` preprocessor macro to enable client-specific code paths.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/standalone/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_ble_temp_reader\n    client.c\n    )\ntarget_link_libraries(picow_ble_temp_reader\n    pico_stdlib\n    pico_btstack_ble\n    pico_btstack_cyw43\n    pico_cyw43_arch_none\n    hardware_adc\n    )\ntarget_include_directories(picow_ble_temp_reader PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR} # For btstack config\n    )\ntarget_compile_definitions(picow_ble_temp_reader PRIVATE\n    RUNNING_AS_CLIENT=1\n)\n\npico_add_extra_outputs(picow_ble_temp_reader)\nexample_auto_set_url(picow_ble_temp_reader)\n```\n\n----------------------------------------\n\nTITLE: Linking SDK Libraries (CMake)\nDESCRIPTION: Links the `nec_receive_library` target against essential Raspberry Pi Pico SDK libraries: `pico_stdlib` (standard library functions) and `hardware_pio` (hardware access for the PIO state machine). The `PRIVATE` keyword indicates these dependencies are only required for building `nec_receive_library` itself, not for targets that link against it.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/nec_receive_library/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(nec_receive_library PRIVATE\n        pico_stdlib\n        hardware_pio\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Setting Stack Guards for Bootloader (CMake)\nDESCRIPTION: Links necessary standard Pico SDK libraries (`pico_stdlib`, `pico_rand`) to the bootloader executable. It also adds a private compile definition (`PICO_USE_STACK_GUARDS=1`) to enable stack guards, which is important given variables are written near the stack for AES operations.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# pull in common dependencies\ntarget_link_libraries(enc_bootloader pico_stdlib pico_rand)\n\n# use stack guards, as AES variables are written near the stack\ntarget_compile_definitions(enc_bootloader PRIVATE PICO_USE_STACK_GUARDS=1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Boot Information Executable using CMake\nDESCRIPTION: This CMake snippet defines the build process for the `boot_info` executable. It specifies the source file (`boot_info.c`), links necessary libraries (`pico_stdlib`), adds standard build outputs (like .uf2, .hex, .bin) using `pico_add_extra_outputs`, and sets the program URL for flashing via `example_auto_set_url`. It is typically found in a `CMakeLists.txt` file within a Raspberry Pi Pico SDK example directory and requires the Pico SDK to be configured.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/boot_info/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(boot_info\n      boot_info.c\n      )\ntarget_link_libraries(boot_info\n      pico_stdlib\n      )\n\n# create map/bin/hex file etc.\npico_add_extra_outputs(boot_info)\n\n# add url via pico_set_program_url\nexample_auto_set_url(boot_info)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable CMake\nDESCRIPTION: Defines a new executable target named `multicore_runner` using the source file `multicore_runner.c`. This is the fundamental step to tell CMake what program to build. It requires the source file to exist and be accessible to CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(multicore_runner\n        multicore_runner.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable CMake\nDESCRIPTION: Defines a new executable target named 'hello_otp' using the source file 'hello_otp.c'. This command is fundamental for creating a buildable program target in CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/otp/hello_otp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_otp\n        hello_otp.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target in CMake\nDESCRIPTION: This CMake command defines a new executable target named 'flash_ssi_dma'. It specifies the source file(s) ('flash_ssi_dma.c') required to compile and link this executable. This is a fundamental step in setting up any C/C++ project in CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/ssi_dma/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(\n  flash_ssi_dma\n  flash_ssi_dma.c\n)\n```\n\n----------------------------------------\n\nTITLE: Adding pico_freertos_httpd_sys Executable Target\nDESCRIPTION: Defines a new executable target named `pico_freertos_httpd_sys` using the specified source file. This target represents the HTTP server example configured to use lwIP in 'sys' mode (with an operating system abstraction layer, in this case provided by FreeRTOS).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pico_freertos_httpd_sys\n        pico_freertos_httpd.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target in CMake\nDESCRIPTION: This command defines a new executable target in the CMake build system named `uart_advanced`. It specifies that the executable should be built from the source file `uart_advanced.c`. This is a standard CMake command for creating a program target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/uart_advanced/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(uart_advanced\n        uart_advanced.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable with CMake\nDESCRIPTION: This command defines a new executable target named `clocks_detached_clk_peri` using the specified source file `detached_clk_peri.c`. This is the fundamental step in declaring a program within the CMake build system and requires the source file to be present.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/detached_clk_peri/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(clocks_detached_clk_peri\n        detached_clk_peri.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target CMake\nDESCRIPTION: Defines a new executable target named `max7219_32x8_spi` in CMake, specifying the source file `max7219_32x8_spi.c` required for compilation. This command is fundamental for telling CMake which source files make up a buildable program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/max7219_32x8_spi/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(max7219_32x8_spi\n        max7219_32x8_spi.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target picow_blink_fast_clock CMake\nDESCRIPTION: Defines the CMake executable target 'picow_blink_fast_clock', using its source file. This target represents a version of the blink example configured to run the system clock faster.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_blink_fast_clock\n        picow_blink_fast_clock.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi Pico HID Composite Build with CMake\nDESCRIPTION: This CMake snippet configures the build for a Pico example. It defines the executable 'dev_hid_composite', adds its source files (main.c, usb_descriptors.c), specifies the current directory for includes, links standard Pico SDK and TinyUSB libraries, provides an optional compile definition for an RP2040 errata fix, and sets up extra output files and a program URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/device/dev_hid_composite/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\nadd_executable(dev_hid_composite)\n\ntarget_sources(dev_hid_composite PUBLIC\n        ${CMAKE_CURRENT_LIST_DIR}/main.c\n        ${CMAKE_CURRENT_LIST_DIR}/usb_descriptors.c\n        )\n\n# Make sure TinyUSB can find tusb_config.h\ntarget_include_directories(dev_hid_composite PUBLIC\n        ${CMAKE_CURRENT_LIST_DIR})\n\n# In addition to pico_stdlib required for common PicoSDK functionality, add dependency on tinyusb_device\n# for TinyUSB device support and tinyusb_board for the additional board support library used by the example\ntarget_link_libraries(dev_hid_composite PUBLIC pico_stdlib pico_unique_id tinyusb_device tinyusb_board)\n\n# Uncomment this line to enable fix for Errata RP2040-E5 (the fix requires use of GPIO 15)\n#target_compile_definitions(dev_hid_composite PUBLIC PICO_RP2040_USB_DEVICE_ENUMERATION_FIX=1)\n\npico_add_extra_outputs(dev_hid_composite)\n\n# add url via pico_set_program_url\nexample_auto_set_url(dev_hid_composite)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Second Target (CMake)\nDESCRIPTION: Links the standard Pico SDK libraries (`pico_stdlib`, `hardware_pio`) to the `pio_squarewave_div_sync` executable target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(pio_squarewave_div_sync PRIVATE\n    pico_stdlib hardware_pio\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring System-Based Socket Ping Executable - CMake\nDESCRIPTION: Configures the build for the `picow_freertos_ping_sys` executable, using the system-based lwIP/CYW43 architecture with FreeRTOS and sockets. It defines WiFi credentials and explicit compile flags (`NO_SYS=0`, `LWIP_SOCKET=1`, `PING_USE_SOCKETS=1`), sets include directories, and links required Pico W libraries including the system-based network stack and FreeRTOS heap.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/ping/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_freertos_ping_sys\n        picow_freertos_ping.c\n        ${PICO_LWIP_CONTRIB_PATH}/apps/ping/ping.c\n        )\ntarget_compile_definitions(picow_freertos_ping_sys PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        NO_SYS=0            # don't want NO_SYS (generally this would be in your lwipopts.h)\n        LWIP_SOCKET=1       # we need the socket API (generally this would be in your lwipopts.h)\n        PING_USE_SOCKETS=1\n        )\ntarget_include_directories(picow_freertos_ping_sys PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common FreeRTOSConfig\n        ${CMAKE_CURRENT_LIST_DIR}/../.. # for our common lwipopts\n        ${PICO_LWIP_CONTRIB_PATH}/apps/ping\n        )\ntarget_link_libraries(picow_freertos_ping_sys\n        pico_cyw43_arch_lwip_sys_freertos\n        pico_stdlib\n        pico_lwip_iperf\n        FreeRTOS-Kernel-Heap4 # FreeRTOS kernel and dynamic heap\n        )\npico_add_extra_outputs(picow_freertos_ping_sys)\n```\n\n----------------------------------------\n\nTITLE: Specify Source Files for Target - CMake\nDESCRIPTION: Associates the source file 'logic_analyser.c' with the 'pio_logic_analyser' executable target. The PRIVATE keyword indicates that this source file is only used internally for building this specific target and is not exposed to dependent targets.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/logic_analyser/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(pio_logic_analyser PRIVATE logic_analyser.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Pico W TCP Server Executable (Background LWIP) - CMake\nDESCRIPTION: This snippet defines the CMake executable target `picow_tcpip_server_background`. It specifies the source file `picow_tcp_server.c`, sets compile definitions for WiFi SSID and password (pulled from variables), includes standard directories, and links necessary libraries including the background thread-safe LWIP library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/tcp_server/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_tcpip_server_background\n        picow_tcp_server.c\n        )\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(picow_tcpip_server_background PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        )\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(picow_tcpip_server_background PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        )\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(picow_tcpip_server_background\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_stdlib\n        )\n```\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(picow_tcpip_server_background)\n```\n\n----------------------------------------\n\nTITLE: Defining BLE Temperature Sensor Executable (Server) - CMake\nDESCRIPTION: This CMake block defines the build rules for the 'picow_ble_temp_sensor' executable, which acts as a BLE GATT server. It specifies the source files (`server.c`, `server_common.c`), links required libraries including standard Pico libraries, BLE stack, CYW43 driver, and ADC hardware support, includes necessary directories for BTstack configuration, and generates the GATT header file from `temp_sensor.gatt`.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/standalone/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_ble_temp_sensor\n    server.c server_common.c\n    )\ntarget_link_libraries(picow_ble_temp_sensor\n    pico_stdlib\n    pico_btstack_ble\n    pico_btstack_cyw43\n    pico_cyw43_arch_none\n    hardware_adc\n    )\ntarget_include_directories(picow_ble_temp_sensor PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR} # For btstack config\n    )\npico_btstack_make_gatt_header(picow_ble_temp_sensor PRIVATE \"${CMAKE_CURRENT_LIST_DIR}/temp_sensor.gatt\")\n\npico_add_extra_outputs(picow_ble_temp_sensor)\nexample_auto_set_url(picow_ble_temp_sensor)\n```\n\n----------------------------------------\n\nTITLE: Include Example Subdirectories - CMake\nDESCRIPTION: Includes various subdirectories containing individual examples using the `add_subdirectory` command or the custom `add_subdirectory_exclude_platforms` function, making their CMakeLists.txt files part of the build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(blink)\nadd_subdirectory_exclude_platforms(blink_simple)\n\n# Add hello world example\nadd_subdirectory_exclude_platforms(hello_world)\n\n# Hardware-specific examples in subdirectories:\nadd_subdirectory(adc)\nadd_subdirectory(binary_info)\nadd_subdirectory(bootloaders)\nadd_subdirectory(clocks)\nadd_subdirectory(cmake)\nadd_subdirectory(dcp)\nadd_subdirectory(divider)\nadd_subdirectory(dma)\nadd_subdirectory(flash)\nadd_subdirectory(gpio)\nadd_subdirectory(hstx)\nadd_subdirectory(i2c)\nadd_subdirectory(interp)\nadd_subdirectory(multicore)\nadd_subdirectory(otp)\nadd_subdirectory(picoboard)\nadd_subdirectory(pico_w)\nadd_subdirectory(pio)\nadd_subdirectory(pwm)\nadd_subdirectory(reset)\nadd_subdirectory(rtc)\nadd_subdirectory(spi)\nadd_subdirectory(system)\nadd_subdirectory(timer)\nadd_subdirectory(uart)\nadd_subdirectory(universal)\nadd_subdirectory(usb)\nadd_subdirectory(watchdog)\nadd_subdirectory(sha)\nadd_subdirectory(freertos)\n```\n\n----------------------------------------\n\nTITLE: Configuring USB Example Build in CMake\nDESCRIPTION: This CMake block configures the build for the 'hello_usb' executable. It defines the source files, links the standard library (`pico_stdlib`), enables standard output over USB while disabling UART output, adds targets for generating binary/UF2 files, and sets a program URL. This configuration is only applied if the `TARGET tinyusb_device` condition is met.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hello_world/usb/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET tinyusb_device)\n    add_executable(hello_usb\n            hello_usb.c\n            )\n\n    # pull in common dependencies\n    target_link_libraries(hello_usb pico_stdlib)\n\n    # enable usb output, disable uart output\n    pico_enable_stdio_usb(hello_usb 1)\n    pico_enable_stdio_uart(hello_usb 0)\n\n    # create map/bin/hex/uf2 file etc.\n    pico_add_extra_outputs(hello_usb)\n\n    # add url via pico_set_program_url\n    example_auto_set_url(hello_usb)\n```\n\n----------------------------------------\n\nTITLE: Including Directories for Headers (CMake)\nDESCRIPTION: Adds include directories for the `nec_receive_library` target. `CMAKE_CURRENT_SOURCE_DIR` includes the directory containing the CMakeLists.txt file (and likely source files), while `CMAKE_CURRENT_BINARY_DIR` includes the build output directory where generated files, such as the PIO header, are placed. The `PUBLIC` keyword means these include paths are propagated to any target that links against `nec_receive_library`.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/nec_receive_library/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories (nec_receive_library PUBLIC\n\t${CMAKE_CURRENT_SOURCE_DIR}\n\t${CMAKE_CURRENT_BINARY_DIR}\n\t)\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi Pico W Examples - CMake\nDESCRIPTION: This CMake snippet configures the build process for Raspberry Pi Pico W examples. It checks if CYW43 (WiFi/Bluetooth) support is available. If so, it attempts to retrieve WiFi SSID and password from environment variables if not already set, defines them as CMake cache variables, and conditionally includes subdirectories for WiFi and Bluetooth examples based on the availability of the required target libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\n\nif (PICO_CYW43_SUPPORTED) # set by PICO_BOARD=pico_w\n    if (NOT TARGET pico_cyw43_arch)\n        message(\"Skipping Pico W examples as support is not available\")\n    else()\n\n        if (DEFINED ENV{WIFI_SSID} AND (NOT WIFI_SSID))\n            set(WIFI_SSID $ENV{WIFI_SSID})\n            message(\"Using WIFI_SSID from environment ('${WIFI_SSID}')\")\n        endif()\n\n        if (DEFINED ENV{WIFI_PASSWORD} AND (NOT WIFI_PASSWORD))\n            set(WIFI_PASSWORD $ENV{WIFI_PASSWORD})\n            message(\"Using WIFI_PASSWORD from environment\")\n        endif()\n\n        set(WIFI_SSID \"${WIFI_SSID}\" CACHE INTERNAL \"WiFi SSID for examples\")\n        set(WIFI_PASSWORD \"${WIFI_PASSWORD}\" CACHE INTERNAL \"WiFi password for examples\")\n\n        add_subdirectory(wifi)\n        if (NOT TARGET pico_btstack_base)\n            message(\"Skipping Pico W Bluetooth examples as support is not available\")\n        else()\n            add_subdirectory(bt)\n        endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define MQTT Client Executable Target in CMake\nDESCRIPTION: This snippet defines the `picow_mqtt_client` executable target, specifying source files, linking required libraries like Pico SDK, hardware ADC, CYW43, lwIP MQTT, and mbedTLS. It also sets include directories and defines compile-time constants for Wi-Fi and MQTT credentials and certificate includes based on the configured variables.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/mqtt/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(TARGET_NAME picow_mqtt_client)\nadd_executable(${TARGET_NAME}\n    mqtt_client.c\n    )\ntarget_link_libraries(${TARGET_NAME}\n    pico_stdlib\n    hardware_adc\n    pico_cyw43_arch_lwip_threadsafe_background\n    pico_lwip_mqtt\n    pico_mbedtls\n    pico_lwip_mbedtls\n    )\ntarget_include_directories(${TARGET_NAME} PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}\n    ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts or any other standard includes, if required\n    )\ntarget_compile_definitions(${TARGET_NAME} PRIVATE\n    WIFI_SSID=\\\"${WIFI_SSID}\\\"\n    WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n    MQTT_SERVER=\\\"${MQTT_SERVER}\\\"\n    )\nif (EXISTS \"${MQTT_CERT_PATH}/${MQTT_CERT_INC}\")\n    target_compile_definitions(${TARGET_NAME} PRIVATE\n        MQTT_CERT_INC=\\\"${MQTT_CERT_INC}\\\" # contains the tls certificates for MQTT_SERVER needed by the client\n        ALTCP_MBEDTLS_AUTHMODE=MBEDTLS_SSL_VERIFY_REQUIRED\n        )\n    target_include_directories(${TARGET_NAME} PRIVATE\n        ${MQTT_CERT_PATH}\n        )\nendif()\nif (MQTT_USERNAME AND MQTT_PASSWORD)\n    target_compile_definitions(${TARGET_NAME} PRIVATE\n        MQTT_USERNAME=\\\"${MQTT_USERNAME}\\\"\n        MQTT_PASSWORD=\\\"${MQTT_PASSWORD}\\\"\n    )\nendif()\npico_add_extra_outputs(${TARGET_NAME})\n\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs (CMake)\nDESCRIPTION: This Pico-specific CMake function adds commands to generate additional output formats for the `joystick_display` target, such as `.uf2`, `.hex`, and `.bin` files. These formats are commonly used for flashing the executable onto the Raspberry Pi Pico microcontroller.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/joystick_display/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# create map/bin/hex file etc.\npico_add_extra_outputs(joystick_display)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs (CMake)\nDESCRIPTION: Uses the Pico-specific CMake function `pico_add_extra_outputs` to generate additional build artifacts for the `hello_adc` target, such as map, bin, and hex files, which are often useful for debugging or flashing.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/hello_adc/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_adc)\n```\n\n----------------------------------------\n\nTITLE: Adding Background Build Outputs (CMake)\nDESCRIPTION: Invokes the Pico SDK function `pico_add_extra_outputs` for the `picow_access_point_background` target. This function automatically adds targets to generate standard build output formats like UF2, BIN, and ELF, simplifying the build process.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/access_point/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(picow_access_point_background)\n```\n\n----------------------------------------\n\nTITLE: Adding Standard Application Outputs (CMake)\nDESCRIPTION: Invokes a Pico SDK function to generate standard build output files for the application executable, such as .map, .bin, .hex, and the final .uf2 file.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n# create map/bin/hex/uf2 file etc.\npico_add_extra_outputs(hello_serial_enc)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for picow_blink_fast_clock CMake\nDESCRIPTION: Adds standard build outputs (.uf2, .hex, .map) for the 'picow_blink_fast_clock' executable, necessary for flashing and debugging the application built with the faster clock configuration.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(picow_blink_fast_clock)\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi Pico PIO PWM Build (CMake)\nDESCRIPTION: Defines the build process for the 'pio_pwm' executable. This includes adding the executable, generating a C header from the 'pwm.pio' PIO assembly file, adding the 'pwm.c' source file, linking the necessary 'pico_stdlib' and 'hardware_pio' libraries, adding extra build outputs, and setting a program URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/pwm/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_pwm)\n\npico_generate_pio_header(pio_pwm ${CMAKE_CURRENT_LIST_DIR}/pwm.pio)\n\ntarget_sources(pio_pwm PRIVATE pwm.c)\n\ntarget_link_libraries(pio_pwm PRIVATE pico_stdlib hardware_pio)\npico_add_extra_outputs(pio_pwm)\n\n# add url via pico_set_program_url\nexample_auto_set_url(pio_pwm)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target CMake\nDESCRIPTION: This command adds one or more source files to the specified executable target. The `PRIVATE` keyword indicates that the source files are only used to build this specific target and are not intended for use by other targets that might link against it.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/quadrature_encoder/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(pio_quadrature_encoder PRIVATE quadrature_encoder.c)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries CMake\nDESCRIPTION: Links the necessary Raspberry Pi Pico SDK libraries to the `pio_clocked_input` executable target. These libraries provide standard C functions (`pico_stdlib`), hardware abstraction for PIO (`hardware_pio`), and hardware abstraction for SPI (`hardware_spi`). The `PRIVATE` keyword means these libraries are only needed internally by this target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/clocked_input/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pio_clocked_input PRIVATE\n        pico_stdlib\n        hardware_pio\n        hardware_spi\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target - CMake\nDESCRIPTION: Specifies the C source file (`st7789_lcd.c`) that will be compiled and linked into the `pio_st7789_lcd` executable target. The `PRIVATE` keyword indicates that this source file is used internally by this specific target and not exposed to others.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/st7789_lcd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(pio_st7789_lcd PRIVATE st7789_lcd.c)\n```\n\n----------------------------------------\n\nTITLE: Define Executable for Background Wi-Fi Scan (CMake)\nDESCRIPTION: This CMake block defines the 'picow_wifi_scan_background' executable target. It specifies the source file, includes necessary directories for build dependencies like lwIP, links the application against the Pico SDK standard library and the threadsafe background version of the CYW43 Wi-Fi driver, and adds extra build outputs (like ELF, UF2 files) via a Pico SDK macro.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/wifi_scan/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_wifi_scan_background\n        picow_wifi_scan.c\n        )\ntarget_include_directories(picow_wifi_scan_background PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        )\ntarget_link_libraries(picow_wifi_scan_background\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_stdlib\n        )\n\npico_add_extra_outputs(picow_wifi_scan_background)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to CMake Target\nDESCRIPTION: Links required libraries to the `hello_reset` executable target. It includes the standard Pico library (`pico_stdlib`) for core functionality and the hardware resets library (`hardware_resets`) for specific reset-related operations.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/reset/hello_reset/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_reset pico_stdlib hardware_resets)\n```\n\n----------------------------------------\n\nTITLE: Configuring Picow BT Example with CYW43 LWIP CMake\nDESCRIPTION: Defines an interface library 'picow_bt_example_cyw43_lwip' that links to the common example library and includes support for the CYW43 wireless chip's integration with LWIP. It sets compile definitions for WiFi credentials and enables CYW43 LWIP, linking necessary libraries and include directories for LWIP configuration.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(picow_bt_example_cyw43_lwip INTERFACE)\ntarget_link_libraries(picow_bt_example_cyw43_lwip INTERFACE\n        picow_bt_example_common\n        )\ntarget_compile_definitions(picow_bt_example_cyw43_lwip INTERFACE\n        WIFI_SSID=\"${WIFI_SSID}\"\n        WIFI_PASSWORD=\"${WIFI_PASSWORD}\"\n        CYW43_LWIP=1\n        )\ntarget_link_libraries(picow_bt_example_cyw43_lwip INTERFACE\n        pico_lwip_iperf\n        )\ntarget_include_directories(picow_bt_example_cyw43_lwip INTERFACE\n        ${CMAKE_CURRENT_LIST_DIR}/../wifi # for our common lwipopts\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target CMake\nDESCRIPTION: Links the specified libraries (`pico_stdlib`, `hardware_pio`) to the `hello_pio` target. `pico_stdlib` provides standard Pico SDK functions, and `hardware_pio` provides functions for interacting with the PIO hardware.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hello_pio/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_pio PRIVATE\n        pico_stdlib\n        hardware_pio\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to CMake Target - CMake\nDESCRIPTION: This snippet links necessary libraries to the `hstx_spi_lcd` target using `target_link_libraries`. It links `pico_stdlib` and `pico_sync`, which are standard libraries provided by the Raspberry Pi Pico SDK. These provide essential functions for standard C/C++ and synchronization primitives.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hstx/spi_lcd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hstx_spi_lcd\n pico_stdlib\n pico_sync\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Target using CMake\nDESCRIPTION: This snippet defines the build configuration for the `pwm_led_fade` executable. It specifies the source file (`pwm_led_fade.c`), links standard Pico libraries (`pico_stdlib`, `hardware_pwm`), adds extra output formats (map, bin, hex), and sets a program URL using specific Pico CMake functions.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pwm/led_fade/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pwm_led_fade\n        pwm_led_fade.c\n        )\n\n# pull in common dependencies and additional pwm hardware support\ntarget_link_libraries(pwm_led_fade pico_stdlib hardware_pwm)\n\n# create map/bin/hex file etc.\npico_add_extra_outputs(pwm_led_fade)\n\n# add url via pico_set_program_url\nexample_auto_set_url(pwm_led_fade)\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Interrupt Example Build using CMake\nDESCRIPTION: This CMake script defines the executable target 'hello_gpio_irq' using the source file 'hello_gpio_irq.c'. It links the standard Pico library 'pico_stdlib' as a dependency, adds extra build outputs like map, bin, and hex files, and sets a program URL using a helper function 'example_auto_set_url'.\nRequired dependencies: pico_stdlib library.\nInputs: Source file 'hello_gpio_irq.c'.\nOutputs: Executable, map, bin, hex files for the 'hello_gpio_irq' target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/gpio/hello_gpio_irq/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_gpio_irq\n        hello_gpio_irq.c\n        )\n\n# pull in common dependencies\ntarget_link_libraries(hello_gpio_irq pico_stdlib)\n\n# create map/bin/hex file etc.\npico_add_extra_outputs(hello_gpio_irq)\n\n# add url via pico_set_program_url\nexample_auto_set_url(hello_gpio_irq)\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring CMake Executable Target - CMake\nDESCRIPTION: This snippet defines a CMake executable target named 'dht' using the source file 'dht.c'. It links the target to the essential 'pico_stdlib' library, adds extra output files necessary for Pico development (like UF2), and automatically sets a program URL for the build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/gpio/dht_sensor/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dht\n      dht.c\n      )\n\ntarget_link_libraries(dht pico_stdlib)\n\npico_add_extra_outputs(dht)\n\n# add url via pico_set_program_url\nexample_auto_set_url(dht)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Outputs for pico_freertos_httpd_nosys\nDESCRIPTION: Invokes a Pico SDK specific function to generate additional output files (like .uf2, .hex, .bin) for the `pico_freertos_httpd_nosys` executable target, simplifying the process of deploying the built application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pico_freertos_httpd_nosys)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs with CMake\nDESCRIPTION: This function, part of the Pico SDK CMake utilities, configures the build system to generate additional output file formats for the `pio_manchester_encoding` target, beyond the standard ELF executable. This typically includes the `.uf2` file, which is the standard format for easy drag-and-drop flashing onto the Raspberry Pi Pico. This simplifies the deployment process.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/manchester_encoding/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pio_manchester_encoding)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs with CMake for Raspberry Pi Pico\nDESCRIPTION: This command uses a Pico SDK specific function to generate additional output files (like .map, .bin, .hex) for the specified target `multicore_fifo_irqs`. These files are often required for flashing or debugging embedded projects. Dependencies: `multicore_fifo_irqs` target must be defined, and Pico SDK CMake functions must be available.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_fifo_irqs/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# create map/bin/hex file etc.\npico_add_extra_outputs(multicore_fifo_irqs)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for Pico Executable in CMake\nDESCRIPTION: This Pico SDK specific CMake function requests the generation of additional build output formats beyond the default executable. This typically includes .uf2, .hex, and .bin files which are useful for deploying the application to the Raspberry Pi Pico board.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/bus_scan/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(i2c_bus_scan)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs with Pico SDK CMake\nDESCRIPTION: Utilizes a Pico SDK specific function to configure the build system to generate additional output files for the 'hello_gpout' target, such as .map, .bin, and .hex files, which are common for embedded development.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_gpout/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_gpout)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs with Pico SDK CMake\nDESCRIPTION: Invokes a specific Raspberry Pi Pico SDK CMake function to generate additional build output files for the 'hello_7segment' target. This typically includes essential files like .map, .bin, and .hex, which are used for analysis, flashing, and debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/gpio/hello_7segment/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_7segment)\n```\n\n----------------------------------------\n\nTITLE: Generating Additional Outputs with CMake (Pico SDK)\nDESCRIPTION: This Pico SDK-specific CMake function generates additional output files (like .map, .bin, .hex) for the `clocks_detached_clk_peri` executable target. These output formats are typically needed for programming the Raspberry Pi Pico device and should be run after the executable target is defined.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/detached_clk_peri/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(clocks_detached_clk_peri)\n```\n\n----------------------------------------\n\nTITLE: Add Pico Extra Outputs - CMake\nDESCRIPTION: This Pico-specific CMake function configures the build process to generate additional output formats, such as the UF2 file suitable for drag-and-drop programming, for the `pio_uart_tx` target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/uart_tx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pio_uart_tx)\n```\n\n----------------------------------------\n\nTITLE: Building Pico PIO Executable (CMake)\nDESCRIPTION: This snippet defines the build process for a Raspberry Pi Pico executable named 'pio_addition'. It sets up the executable, generates a C/C++ header file from the 'addition.pio' PIO assembly file, adds the main source file 'addition.c', links required libraries ('pico_stdlib', 'hardware_pio'), and ensures extra build outputs and a program URL are generated.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/addition/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_addition)\n\npico_generate_pio_header(pio_addition ${CMAKE_CURRENT_LIST_DIR}/addition.pio)\n\ntarget_sources(pio_addition PRIVATE addition.c)\n\ntarget_link_libraries(pio_addition PRIVATE pico_stdlib hardware_pio)\npico_add_extra_outputs(pio_addition)\n\n# add url via pico_set_program_url\nexample_auto_set_url(pio_addition)\n```\n\n----------------------------------------\n\nTITLE: Setting WiFi Credentials in CMake\nDESCRIPTION: Configures the WiFi SSID and password variables (WIFI_SSID, WIFI_PASSWORD) for Pico W examples using set with CACHE INTERNAL. These values are typically read from the environment and stored in the CMake cache for persistence across builds.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(WIFI_SSID \"${WIFI_SSID}\" CACHE INTERNAL \"WiFi SSID for examples\")\nset(WIFI_PASSWORD \"${WIFI_PASSWORD}\" CACHE INTERNAL \"WiFi password for examples\")\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for picow_blink_slow_clock CMake\nDESCRIPTION: Adds standard build outputs (.uf2, .hex, .map) for the 'picow_blink_slow_clock' executable, similar to other targets, enabling flashing and debugging the application with the slow clock configuration.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(picow_blink_slow_clock)\n```\n\n----------------------------------------\n\nTITLE: Adding Standard Pico Build Outputs (CMake)\nDESCRIPTION: Uses the Pico SDK macro pico_add_extra_outputs to generate standard build output files for the flash_cache_perfctr target. This typically includes the .uf2 file (for easy flashing), .bin, and .hex files, which are essential for deploying the application to the Pico board.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/cache_perfctr/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(flash_cache_perfctr)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs with CMake\nDESCRIPTION: This snippet uses a Pico-specific CMake function to generate additional build outputs for the `blink_simple` target. These outputs typically include `.map`, `.bin`, `.hex`, and `.uf2` files, which are necessary for flashing the program onto the Raspberry Pi Pico device.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/blink_simple/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npico_add_extra_outputs(blink_simple)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries with CMake for Raspberry Pi Pico\nDESCRIPTION: This command links the specified libraries (`pico_multicore` and `pico_stdlib`) to the executable target `multicore_fifo_irqs`. These libraries provide essential functions for multicore communication and standard Pico SDK features. Dependencies: `multicore_fifo_irqs` target must be defined.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_fifo_irqs/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(multicore_fifo_irqs\n        pico_multicore\n        pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for picow_blink_fast_clock CMake\nDESCRIPTION: Links necessary libraries to the 'picow_blink_fast_clock' target, including standard SDK, CYW43 GPIO access, and `hardware_clocks` for clock manipulation, specifically needed for this fast clock version.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(picow_blink_fast_clock\n        pico_stdlib              # for core functionality\n        pico_cyw43_arch_none     # we need Wifi to access the GPIO, but we don't need anything else\n        hardware_clocks\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs - CMake\nDESCRIPTION: Invokes the Pico SDK function `pico_add_extra_outputs` for the `picoboard_blinky` target. The comment explains that this creates additional build artifacts like .map, .bin, and .hex files, which are useful for debugging and deployment on the Pico. Requires the `picoboard_blinky` target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/picoboard/blinky/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# create map/bin/hex file etc.\npico_add_extra_outputs(picoboard_blinky)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs CMake\nDESCRIPTION: This command uses a Pico-specific function to configure CMake to generate additional build output formats for the `picoboard_button` target, such as .map, .bin, and .hex files. These formats are commonly used for debugging, analysis, and flashing the target device.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/picoboard/button/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(picoboard_button)\n```\n\n----------------------------------------\n\nTITLE: Defining PIO Executable Build Process - CMake\nDESCRIPTION: This CMake snippet defines the build target 'pio_blink' for a Raspberry Pi Pico project. It configures the executable, specifies the source file ('blink.c'), generates a C header from the PIO assembly file ('blink.pio') using the Pico SDK's `pico_generate_pio_header` function, links necessary libraries (`pico_stdlib`, `hardware_pio`), adds extra build output formats, and automatically sets a program URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/pio_blink/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_blink)\n\n# by default the header is generated into the build dir\npico_generate_pio_header(pio_blink ${CMAKE_CURRENT_LIST_DIR}/blink.pio)\n# however, alternatively you can choose to generate it somewhere else (in this case in the source tree for check in)\n#pico_generate_pio_header(pio_blink ${CMAKE_CURRENT_LIST_LIST_DIR}/blink.pio OUTPUT_DIR ${CMAKE_CURRENT_LIST_DIR})\n\ntarget_sources(pio_blink PRIVATE blink.c)\n\ntarget_link_libraries(pio_blink PRIVATE pico_stdlib hardware_pio)\npico_add_extra_outputs(pio_blink)\n\n# add url via pico_set_program_url\nexample_auto_set_url(pio_blink)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pico Library Build - CMake\nDESCRIPTION: Configures the CMake build for the `nec_transmit_library`. It adds the source file `nec_transmit.c`, generates C headers from `nec_carrier_burst.pio` and `nec_carrier_control.pio` using the Pico SDK's `pico_generate_pio_header` command to assemble PIO state machines, links necessary libraries (`pico_stdlib`, `hardware_pio`), and sets include directories for the generated headers and source files.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/nec_transmit_library/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# build a normal library\n#\nadd_library(nec_transmit_library nec_transmit.c)\n\n# invoke pio_asm to assemble the PIO state machine programs\n#\npico_generate_pio_header(nec_transmit_library ${CMAKE_CURRENT_LIST_DIR}/nec_carrier_burst.pio)\npico_generate_pio_header(nec_transmit_library ${CMAKE_CURRENT_LIST_DIR}/nec_carrier_control.pio)\n\ntarget_link_libraries(nec_transmit_library PRIVATE\n        pico_stdlib\n        hardware_pio\n        )\n\n# add the `binary` directory so that the generated headers are included in the project\n#\ntarget_include_directories (nec_transmit_library PUBLIC\n\t${CMAKE_CURRENT_SOURCE_DIR}\n\t${CMAKE_CURRENT_BINARY_DIR}\n\t)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable in CMake\nDESCRIPTION: Links the created executable target `max7219_8x7seg_spi` against the `pico_stdlib` and `hardware_spi` libraries. These dependencies provide standard Pico SDK functions and hardware SPI support necessary for the program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/max7219_8x7seg_spi/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(max7219_8x7seg_spi pico_stdlib hardware_spi)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: Links necessary libraries to the previously defined `pa1010d_i2c` executable target. It adds dependencies on the standard Pico SDK library (`pico_stdlib`) and the hardware I2C library (`hardware_i2c`).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/pa1010d_i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pa1010d_i2c pico_stdlib hardware_i2c)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries CMake\nDESCRIPTION: Links the 'rand' executable target to the required Pico SDK libraries: 'pico_stdlib' for standard C library functions and 'pico_rand' for random number generation utilities. This ensures that the necessary code is included during the link phase.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/rand/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(rand\n        pico_stdlib\n        pico_rand\n        )\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Executable CMake\nDESCRIPTION: This command links the specified libraries ('pico_stdlib' and 'hardware_rtc') to the 'hello_rtc' executable target. This provides access to standard Pico SDK functions and the necessary hardware Real-Time Clock (RTC) drivers.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/hello_rtc/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_rtc pico_stdlib hardware_rtc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi Pico DMA IRQ Example Build (CMake)\nDESCRIPTION: This CMake snippet defines the build process for the `dma_channel_irq` example. It specifies the source file, includes a PIO program, links essential hardware libraries from the Pico SDK (stdlib, dma, irq, pio), and sets up standard build outputs (map, bin, hex) and a program URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/channel_irq/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dma_channel_irq\n        channel_irq.c\n        )\n\npico_generate_pio_header(dma_channel_irq ${CMAKE_CURRENT_LIST_DIR}/pio_serialiser.pio)\n\ntarget_link_libraries(dma_channel_irq\n\t\tpico_stdlib\n        hardware_dma\n        hardware_irq\n        hardware_pio\n        )\n\n# create map/bin/hex file etc.\npico_add_extra_outputs(dma_channel_irq)\n\n# add url via pico_set_program_url\nexample_auto_set_url(dma_channel_irq)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Link CYW43 Library (CMake)\nDESCRIPTION: Conditionally links the 'pico_cyw43_arch_none' library to the target if the CMake variable PICO_CYW43_SUPPORTED is set. This is necessary for Pico W boards with the CYW43 wireless chip.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/blink_any/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (PICO_CYW43_SUPPORTED)\n    target_link_libraries(blink_any pico_cyw43_arch_none)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Picow BT Example CYW43 LWIP Background CMake\nDESCRIPTION: Defines an interface library for examples using CYW43 LWIP in a threadsafe background architecture. It adds the common background source file and links the base cyw43-lwip library and the pico_cyw43_arch_lwip_threadsafe_background library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(picow_bt_example_cyw43_lwip_background INTERFACE)\ntarget_sources(picow_bt_example_cyw43_lwip_background INTERFACE\n        ${BT_EXAMPLE_COMMON_DIR}/picow_bt_example_background.c\n        )\ntarget_link_libraries(picow_bt_example_cyw43_lwip_background INTERFACE\n        picow_bt_example_cyw43_lwip\n        pico_cyw43_arch_lwip_threadsafe_background\n        )\n```\n\n----------------------------------------\n\nTITLE: Configure Pico Onewire Executable Build with CMake\nDESCRIPTION: This CMake snippet configures the build process for the 'pio_onewire' executable. It defines the executable target, specifies the source file 'onewire.c', includes the build configuration from the 'onewire_library' subdirectory, links required libraries (pico_stdlib, hardware_pio, onewire_library), and adds Pico-specific build outputs and URL configuration.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/onewire/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_onewire)\n\ntarget_sources(pio_onewire PRIVATE onewire.c)\n\nadd_subdirectory(onewire_library)\n\ntarget_link_libraries(pio_onewire PRIVATE\n    pico_stdlib\n    hardware_pio\n    onewire_library)\n\npico_add_extra_outputs(pio_onewire)\n\n# add url via pico_set_program_url\nexample_auto_set_url(pio_onewire)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Pico W NTP Client Executable (Polling)\nDESCRIPTION: Defines the `picow_ntp_client_poll` executable in CMake, specifying its source file, compile definitions (including WiFi credentials), include directories for LWIP options, and necessary libraries for polling-based network operations.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/ntp_client/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_ntp_client_poll\n        picow_ntp_client.c\n        )\ntarget_compile_definitions(picow_ntp_client_poll PRIVATE\n        WIFI_SSID=\\\"${\\\\${WIFI_SSID}}\\\"\n        WIFI_PASSWORD=\\\"${\\\\${WIFI_PASSWORD}}\\\"\n        )\ntarget_include_directories(picow_ntp_client_poll PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        )\ntarget_link_libraries(picow_ntp_client_poll\n        pico_cyw43_arch_lwip_poll\n        pico_stdlib\n        )\npico_add_extra_outputs(picow_ntp_client_poll)\n```\n\n----------------------------------------\n\nTITLE: Adding Private Include Directories to CMake Target - CMake\nDESCRIPTION: This command adds include directories specifically for the `hstx_spi_lcd` target. The `PRIVATE` keyword means these includes are only used when building this target. It adds the `images` subdirectory relative to the current file, likely containing header files or data required by the source.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hstx/spi_lcd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(hstx_spi_lcd PRIVATE\n ${CMAKE_CURRENT_LIST_DIR}/images\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs in CMake\nDESCRIPTION: This uses the Pico SDK specific CMake function 'pico_add_extra_outputs' to generate standard output files for the specified target, 'flash_ssi_dma'. This function typically produces .uf2, .hex, .bin, and .map files, which are useful for programming the Pico and debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/ssi_dma/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(flash_ssi_dma)\n```\n\n----------------------------------------\n\nTITLE: Processing Bootloader Binary (Sign, Hash, Clear SRAM) (CMake)\nDESCRIPTION: Applies post-processing steps to the bootloader binary. `pico_sign_binary` signs it using a private key, `pico_hash_binary` computes a hash, and `pico_load_map_clear_sram` likely uses the generated map file to zero out specific SRAM regions, preparing it for loading other code.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# sign, hash, and clear SRAM\npico_sign_binary(enc_bootloader ${CMAKE_CURRENT_LIST_DIR}/private.pem)\npico_hash_binary(enc_bootloader)\npico_load_map_clear_sram(enc_bootloader)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Utility Library CMake\nDESCRIPTION: This snippet defines a CMake library target named `example_lwip_http_util` without the NOFLAG property. It adds the source file `example_http_client_util.c` to this target and links it against core networking and TLS libraries (`pico_lwip_http`, `pico_lwip_mbedtls`, `pico_mbedtls`). It also sets the include directory for the source file.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/http_client/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_library(example_lwip_http_util NOFLAG)\ntarget_sources(example_lwip_http_util INTERFACE\n        ${CMAKE_CURRENT_LIST_DIR}/example_http_client_util.c\n        )\npico_mirrored_target_link_libraries(example_lwip_http_util INTERFACE\n        pico_lwip_http\n        pico_lwip_mbedtls\n        pico_mbedtls\n        )\ntarget_include_directories(example_lwip_http_util INTERFACE\n        ${CMAKE_CURRENT_LIST_DIR}\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: Links required libraries to the `adc_console` executable target. This command ensures that the standard Pico SDK library (`pico_stdlib`) and the hardware ADC library (`hardware_adc`) are included, providing the necessary functions for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/adc_console/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(adc_console pico_stdlib hardware_adc)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries - CMake\nDESCRIPTION: Links the 'pico_stdlib' library (providing standard SDK functions) and the 'hardware_rtc' library (for Real-Time Clock hardware support) to the 'rtc_alarm_repeat' executable target. This makes necessary functions and symbols available to the compiled program and is required for using RTC features.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/rtc_alarm_repeat/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# pull in common dependencies and additional rtc hardware support\ntarget_link_libraries(rtc_alarm_repeat pico_stdlib hardware_rtc)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target - CMake\nDESCRIPTION: This command links the specified libraries (`pico_stdlib` and `hardware_dma`) to the `flash_xip_stream` executable target. Linking ensures that the functions and resources provided by these Pico SDK libraries are available to the compiled executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/xip_stream/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(flash_xip_stream\n        pico_stdlib\n        hardware_dma\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target with CMake\nDESCRIPTION: Links the necessary common Pico dependencies and hardware-specific libraries (stdio, standard library, and SPI hardware support) to the `bme280_spi` executable target. This makes functions and definitions from these libraries available to the application code.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/bme280_spi/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(bme280_spi pico_stdlib hardware_spi)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target (CMake)\nDESCRIPTION: Links the specified Pico SDK libraries ('pico_stdlib', 'pico_unique_id') to the 'unique_board_id' executable target. This ensures the executable can use functions and features provided by these libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/unique_board_id/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(unique_board_id\n        pico_stdlib\n        pico_unique_id\n        )\n```\n\n----------------------------------------\n\nTITLE: Link Standard Library (CMake)\nDESCRIPTION: Links the 'pico_stdlib' library to the 'blink_any' executable target. This library provides core functions and standard utilities for Pico development.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/blink_any/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(blink_any pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target - CMake\nDESCRIPTION: Links the 'pico_stdlib' library to the 'hello_timer' executable target. This library provides essential functions and definitions for programming the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/timer/hello_timer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_timer pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Outputs - CMake\nDESCRIPTION: Configures the CMake build system to generate additional output formats for the 'rtc_alarm_repeat' executable, such as .map, .bin, and .hex files, which are useful for programming the target device and debugging. This utilizes a Pico SDK-specific function 'pico_add_extra_outputs'.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/rtc_alarm_repeat/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# create map/bin/hex file etc.\npico_add_extra_outputs(rtc_alarm_repeat)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs - CMake\nDESCRIPTION: Uses a Pico SDK function `pico_add_extra_outputs` to configure the build system to generate additional output file formats for the `pio_st7789_lcd` target. This typically includes the `.uf2` file which is commonly used for flashing the Raspberry Pi Pico board.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/st7789_lcd/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pio_st7789_lcd)\n```\n\n----------------------------------------\n\nTITLE: Adding Polling Build Outputs (CMake)\nDESCRIPTION: Invokes the Pico SDK function `pico_add_extra_outputs` for the `picow_access_point_poll` target. This function automatically adds targets to generate standard build output formats like UF2, BIN, and ELF, simplifying the build process, identical to the background version.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/access_point/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(picow_access_point_poll)\n```\n\n----------------------------------------\n\nTITLE: Adding Build Outputs (CMake)\nDESCRIPTION: Configures the build system to generate extra output file formats for the 'hello_uart' target, typically including .uf2, .hex, and .bin files, which are useful for programming the Raspberry Pi Pico board.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/hello_uart/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_uart)\n```\n\n----------------------------------------\n\nTITLE: Adding Pico Output Formats CMake\nDESCRIPTION: Utilizes a Pico SDK specific CMake function to generate additional output formats for the `max7219_32x8_spi` target, such as `.uf2`, `.hex`, and map files. These formats are essential for flashing the compiled program onto the Raspberry Pi Pico board and for debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/max7219_32x8_spi/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(max7219_32x8_spi)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs - CMake\nDESCRIPTION: Uses a Pico SDK function to add extra build outputs for the `pio_hub75` target. This typically configures CMake to generate files like the UF2 file (for easy drag-and-drop programming) and potentially other debug or binary formats useful for the Pico. Depends on the Pico SDK being configured correctly.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hub75/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pio_hub75)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs CMake\nDESCRIPTION: Configures CMake, using a Pico SDK function, to generate additional build output formats for the `hello_resus` target, such as .map, .bin, and .hex files, which are commonly used for flashing or debugging Pico applications.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_resus/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_resus)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Output Formats - CMake\nDESCRIPTION: Invokes a Pico-specific CMake function to generate additional output formats like .map, .bin, and .hex for the 'hello_timer' executable, which are useful for flashing the device or debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/timer/hello_timer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_timer)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for Pico in CMake\nDESCRIPTION: Invokes a Pico SDK specific function to generate additional build outputs for the `adc_console` target, such as .map, .bin, and .uf2 files. These files are essential for flashing the device and debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/adc_console/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(adc_console)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target CMake\nDESCRIPTION: This command links the specified libraries to the executable target. The `PRIVATE` keyword means these libraries are only required for building this target. `pico_stdlib`, `pico_multicore`, and `hardware_pio` are essential Pico SDK libraries providing standard functions, multicore support, and PIO hardware access, respectively.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/quadrature_encoder/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pio_quadrature_encoder PRIVATE\n        pico_stdlib\n        pico_multicore\n        hardware_pio\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking Standard Pico Library using CMake\nDESCRIPTION: This command links the standard Raspberry Pi Pico SDK library (`pico_stdlib`) to the `hello_dcp` executable target. This dependency provides essential functions and features from the SDK required by the example program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dcp/hello_dcp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_dcp pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable (CMake)\nDESCRIPTION: This command links the previously defined executable target `narrow_io_write` against the `pico_stdlib` library. This grants the executable access to the standard functions and features provided by the Raspberry Pi Pico SDK.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/narrow_io_write/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(narrow_io_write pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Linking Standard Library to CMake Target\nDESCRIPTION: This snippet links the `pico_stdlib` library to the `blink_simple` executable target. The `pico_stdlib` provides essential functions and APIs for Pico development, making it a crucial dependency for most Pico projects.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/blink_simple/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(blink_simple pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Executable in CMake\nDESCRIPTION: This command links the `pico_stdlib` library to the `clocks_detached_clk_peri` executable target. This provides access to core Pico SDK functions and hardware abstractions required for the program to run and is dependent on the target being previously defined.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/detached_clk_peri/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(clocks_detached_clk_peri pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries with CMake\nDESCRIPTION: Links the specified executable target 'hello_7segment' against the 'pico_stdlib' library. This step is crucial to provide access to the core functions and standard libraries provided by the Raspberry Pi Pico SDK.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/gpio/hello_7segment/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_7segment pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Link Standard Library CMake\nDESCRIPTION: Links the `pico_stdlib` library to the `hello_universal` executable target. This library provides essential functions and configurations required for building applications on the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/hello_universal/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_universal pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Configuring PIO SPI Loopback Example Target (CMake)\nDESCRIPTION: This CMake block defines the build configuration for the 'pio_spi_loopback' executable target. Similar to the flash example, it adds the executable target, generates a PIO header from 'spi.pio', lists the source files (including the 'spi_loopback.c' specific file), links required libraries ('pico_stdlib', 'hardware_pio'), adds extra build outputs, and sets an example URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/spi/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_spi_loopback)\n\npico_generate_pio_header(pio_spi_loopback ${CMAKE_CURRENT_LIST_DIR}/spi.pio)\n\ntarget_sources(pio_spi_loopback PRIVATE\n        spi_loopback.c\n        pio_spi.c\n        pio_spi.h\n        )\n\ntarget_link_libraries(pio_spi_loopback PRIVATE pico_stdlib hardware_pio)\npico_add_extra_outputs(pio_spi_loopback)\n\nexample_auto_set_url(pio_spi_loopback)\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Header CMake\nDESCRIPTION: Processes the specified PIO assembly file (`hello.pio`) and generates a C/C++ header file (`hello.pio.h`) that can be included and used within the C code to interact with the PIO program. This command relies on Pico SDK's build functions.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hello_pio/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npico_generate_pio_header(hello_pio ${CMAKE_CURRENT_LIST_DIR}/hello.pio)\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Header File - CMake\nDESCRIPTION: Invokes the Pico SDK function `pico_generate_pio_header` to process the PIO assembly file (`st7789_lcd.pio`) and automatically generate a corresponding C header file. This header file provides symbols and data required for C/C++ code to interact with the compiled PIO program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/st7789_lcd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npico_generate_pio_header(pio_st7789_lcd ${CMAKE_CURRENT_LIST_DIR}/st7789_lcd.pio)\n```\n\n----------------------------------------\n\nTITLE: Generate PIO Header - CMake\nDESCRIPTION: This Pico-specific CMake function processes the PIO assembly code file `uart_tx.pio` to generate a C/C++ header file, making the PIO program usable from the C source code. The generated header is associated with the `pio_uart_tx` target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/uart_tx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npico_generate_pio_header(pio_uart_tx ${CMAKE_CURRENT_LIST_DIR}/uart_tx.pio)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Encrypted Bootloader Example (CMake)\nDESCRIPTION: This CMake code snippet conditionally builds the encrypted bootloader example. It first checks for the `pico_mbedtls` target. If available, it then checks if the compiler is LLVM/Clang older than version 17. If these conditions are met, it prints a warning and skips; otherwise, it includes the necessary subdirectory. If `pico_mbedtls` is not available, it prints a message and skips the example build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET pico_mbedtls)\n  # older clang seem to have a segment overlap issue that confuses picotool\n  if (PICO_C_COMPILER_IS_CLANG AND CMAKE_C_COMPILER_VERSION VERSION_LESS \"17.0.0\")\n      message(\"Skipping encrypted bootloader example on LLVM/Clang version < 17; please use GCC or newer LLVM/Clang\")\n  else()\n      add_subdirectory_exclude_platforms(encrypted host rp2040 rp2350-riscv)\n  endif()\nelse()\n  # Assume picotool has no signing support, if no pico_mbedtls available\n  message(\"Skipping encrypted bootloader example as pico_mbedtls unavailable\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Checking Required Toolchain Paths (CMake)\nDESCRIPTION: This snippet verifies the presence of necessary toolchains (`PICO_RISCV_TOOLCHAIN_PATH` and `PICO_ARM_TOOLCHAIN_PATH`) for building universal binaries. If either is not defined, it issues a message and aborts the function execution, preventing the build process from starting without the required compilers.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif ((NOT DEFINED PICO_RISCV_TOOLCHAIN_PATH) OR (NOT DEFINED PICO_ARM_TOOLCHAIN_PATH))\n    # Must define PICO_RISCV_TOOLCHAIN_PATH and PICO_ARM_TOOLCHAIN_PATH\n    # to ensure both compilers are present\n    message(\n        \"Skipping universal examples as PICO_RISCV_TOOLCHAIN_PATH and \"\n        \"PICO_ARM_TOOLCHAIN_PATH are not defined\"\n        )\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling UART StdIO for Pico Executable using CMake\nDESCRIPTION: Enables standard input/output (stdio) communication over the UART interface for the \"onboard_temperature\" target. The argument `1` indicates that UART stdio should be enabled, typically used for debugging output.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/onboard_temperature/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_enable_stdio_uart(onboard_temperature 1)\n```\n\n----------------------------------------\n\nTITLE: Creating Second Executable Linking Common Library - CMake\nDESCRIPTION: Defines a second executable target 'build_variant2'. It also links against 'common_stuff' to inherit common settings. This target has its own distinct private compile definitions, including 'A_DEFINE_THAT_IS_NOT_SHARED=789' and 'DO_EXTRA'. 'pico_add_extra_outputs' is called for this target as well.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/cmake/build_variants/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(build_variant2)\ntarget_link_libraries(build_variant2 common_stuff)\ntarget_compile_definitions(build_variant2 PRIVATE\n        A_DEFINE_THAT_IS_NOT_SHARED=789\n        DO_EXTRA)\npico_add_extra_outputs(build_variant2)\n```\n\n----------------------------------------\n\nTITLE: Set Text String Variable in Pico Binary File (shell)\nDESCRIPTION: Shows how to use `picotool config` with the `-s` flag to set a string-type configurable variable (`text`) within a `.uf2` file (`hello_anything.uf2`). This allows changing embedded text strings in the binary without recompiling the source code.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ picotool config hello_anything.uf2 -s text \"Goodbye, world!\"\n```\n\n----------------------------------------\n\nTITLE: Generate PIO Header CMake\nDESCRIPTION: This Pico SDK specific command processes the `differential_manchester.pio` file and generates a corresponding C/C++ header file. This header allows the main application code to include and use the PIO program defined in the `.pio` file. It depends on the `hardware_pio` component.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/differential_manchester/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npico_generate_pio_header(pio_differential_manchester ${CMAKE_CURRENT_LIST_DIR}/differential_manchester.pio)\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Header (CMake)\nDESCRIPTION: Uses the Pico SDK's CMake function `pico_generate_pio_header` to process the `resistor_dac.pio` file located in the current directory and generate a C/C++ header file. This makes the compiled PIO program accessible from the application code.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/dma_capture/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npico_generate_pio_header(adc_dma_capture ${CMAKE_CURRENT_LIST_DIR}/resistor_dac.pio)\n```\n\n----------------------------------------\n\nTITLE: Setting Application Binary Type (CMake)\nDESCRIPTION: Sets the binary type for the `hello_serial_enc` target to `no_flash`. Similar to the bootloader, this indicates the application binary is intended to run from SRAM after being loaded by the bootloader.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# set as no_flash binary\npico_set_binary_type(hello_serial_enc no_flash)\n```\n\n----------------------------------------\n\nTITLE: Configuring hello_interp Executable - CMake\nDESCRIPTION: This CMake block defines and configures the 'hello_interp' executable. It specifies the source file 'hello_interp.c', links dependencies like 'pico_stdlib' and 'hardware_interp', configures extra build outputs (map, bin, hex), and sets a program URL. This configuration is applied only if the 'TARGET hardware_interp' condition is met.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/interp/hello_interp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_interp)\n  add_executable(hello_interp\n          hello_interp.c\n          )\n\n  # pull in common dependencies and additional interpolator hardware support\n  target_link_libraries(hello_interp pico_stdlib hardware_interp)\n\n  # create map/bin/hex file etc.\n  pico_add_extra_outputs(hello_interp)\n\n  # add url via pico_set_program_url\n  example_auto_set_url(hello_interp)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Type (flash_nuke) CMake\nDESCRIPTION: Configures the build type for the 'flash_nuke' binary. Setting it to 'no_flash' ensures that the program runs directly from RAM, which is essential for a utility that erases the flash it would otherwise run from.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/nuke/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_set_binary_type(flash_nuke no_flash)\n```\n\n----------------------------------------\n\nTITLE: Configuring Background UDP Beacon Executable (CMake)\nDESCRIPTION: This snippet defines and configures the 'picow_udp_beacon_background' executable. It sets compile definitions for Wi-Fi SSID and password, includes necessary source and SDK directories, and links the thread-safe background LWIP library required for background networking.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/udp_beacon/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_udp_beacon_background\n        picow_udp_beacon.c\n        )\ntarget_compile_definitions(picow_udp_beacon_background PRIVATE\n        WIFI_SSID=\\\"\\${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"\\${WIFI_PASSWORD}\\\"\n        )\ntarget_include_directories(picow_udp_beacon_background PRIVATE\n        \\${CMAKE_CURRENT_LIST_DIR}\n        \\${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        )\ntarget_link_libraries(picow_udp_beacon_background\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_stdlib\n        )\n\npico_add_extra_outputs(picow_udp_beacon_background)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Executable CMake\nDESCRIPTION: This command links the specified libraries (`pico_stdlib` and `hardware_i2c`) to the `mcp9808_i2c` executable target. `pico_stdlib` provides essential SDK functions, and `hardware_i2c` includes hardware-specific support for the I2C peripheral.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mcp9808_i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(mcp9808_i2c pico_stdlib hardware_i2c)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Pico Executable using CMake\nDESCRIPTION: Links essential libraries, specifically `pico_stdlib` and `hardware_adc`, to the \"onboard_temperature\" executable target. This provides the application with access to standard Pico functions and ADC hardware interfaces.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/onboard_temperature/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(onboard_temperature pico_stdlib hardware_adc)\n```\n\n----------------------------------------\n\nTITLE: Creating CMake Executable for Pico\nDESCRIPTION: This command defines a CMake executable target named `spi_flash` using the source file `spi_flash.c`. It is the fundamental step to compile the source code into a runnable program. The specified source file must exist in the project's source directory.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_flash/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(spi_flash\n        spi_flash.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: This command defines a new executable target named `hello_serial` in the CMake build system. It specifies that the executable should be built from the source file `hello_serial.c`. This is the fundamental step to create a buildable program from source code.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hello_world/serial/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_serial\n        hello_serial.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target in CMake\nDESCRIPTION: Defines a CMake executable target named runtime_flash_permissions using the source file runtime_flash_permissions.c. This command specifies the primary build artifact for the example application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/runtime_flash_permissions/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(runtime_flash_permissions\n        runtime_flash_permissions.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: This command defines an executable target named `narrow_io_write` within the CMake project, specifying `narrow_io_write.c` as its primary source file. This is the fundamental step to create a buildable program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/narrow_io_write/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(narrow_io_write\n        narrow_io_write.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable CMake\nDESCRIPTION: Creates an executable target named 'rand' from the specified source file 'rand.c'. This is the fundamental step in CMake to define a program or library that will be built.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/rand/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(rand\n        rand.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Pico Executable Target - CMake\nDESCRIPTION: Creates the main executable target named `pio_st7789_lcd` within the CMake build system for the Raspberry Pi Pico project. This target represents the final program that will be compiled and linked.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/st7789_lcd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_st7789_lcd)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target CMake\nDESCRIPTION: Defines the main executable target for the project, named `pio_clocked_input`. This is the first step in setting up a new program build in CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/clocked_input/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_clocked_input)\n```\n\n----------------------------------------\n\nTITLE: Defining Polling Executable (CMake)\nDESCRIPTION: Defines the `picow_access_point_poll` executable target and lists its source files (`picow_access_point.c`, `dhcpserver/dhcpserver.c`, `dnsserver/dnsserver.c`). These are the same source files used for the background version, implementing the core access point logic.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/access_point/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_access_point_poll\n        picow_access_point.c\n        dhcpserver/dhcpserver.c\n        dnsserver/dnsserver.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target CMake\nDESCRIPTION: Defines a new executable target named `hello_resus` in CMake, compiled from the source file `hello_resus.c`. This is the initial step to create a buildable program for the Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_resus/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_resus\n        hello_resus.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target - CMake\nDESCRIPTION: This command defines an executable target named 'spi_dma' using the source file 'spi_dma.c'. This is the fundamental step to tell CMake what program to build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_dma/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(\n        spi_dma\n        spi_dma.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Define Executable Target CMake\nDESCRIPTION: This command defines an executable target named 'hello_rtc' and specifies the source file ('hello_rtc.c') that will be compiled to create this executable. It is the starting point for defining the build artifact.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/hello_rtc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_rtc\n hello_rtc.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Second Executable Target (CMake)\nDESCRIPTION: Creates another executable target named `pio_squarewave_div_sync` for a related example demonstrating a different square wave generation method.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(pio_squarewave_div_sync)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Clock Examples - CMake\nDESCRIPTION: This CMake snippet checks if the 'hardware_clocks' target is available on the current platform. If the target exists, it includes several subdirectories containing clock-related examples using the `add_subdirectory_exclude_platforms` command. If the target is not available, it prints a descriptive message to the console.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_clocks)\n  add_subdirectory_exclude_platforms(detached_clk_peri)\n  add_subdirectory_exclude_platforms(hello_48MHz)\n  add_subdirectory_exclude_platforms(hello_gpout)\n  add_subdirectory_exclude_platforms(hello_resus)\nelse()\n  message(\"Skipping clocks examples as hardware_clocks is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Header (Pico CMake)\nDESCRIPTION: Invokes the `pico_generate_pio_header` CMake function provided by the Pico SDK to assemble the PIO program defined in `nec_receive.pio`. The generated C header file, typically containing constants and initialization functions for the state machine, will be associated with the `nec_receive_library` target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/nec_receive_library/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npico_generate_pio_header(nec_receive_library ${CMAKE_CURRENT_LIST_DIR}/nec_receive.pio)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include PIO Examples (CMake)\nDESCRIPTION: This CMake snippet checks if the target platform defines `hardware_pio`. If true, it includes several subdirectories containing PIO-based examples using `add_subdirectory_exclude_platforms`. If `hardware_pio` is not defined, it prints an informational message indicating that the PIO examples are being skipped because the hardware feature is unavailable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_pio)\n  add_subdirectory_exclude_platforms(addition)\n  add_subdirectory_exclude_platforms(apa102)\n  add_subdirectory_exclude_platforms(clocked_input)\n  add_subdirectory_exclude_platforms(differential_manchester)\n  add_subdirectory_exclude_platforms(hello_pio)\n  add_subdirectory_exclude_platforms(hub75)\n  add_subdirectory_exclude_platforms(i2c)\n  add_subdirectory_exclude_platforms(ir_nec)\n  add_subdirectory_exclude_platforms(logic_analyser)\n  add_subdirectory_exclude_platforms(manchester_encoding)\n  add_subdirectory_exclude_platforms(onewire)\n  add_subdirectory_exclude_platforms(pio_blink)\n  add_subdirectory_exclude_platforms(pwm)\n  add_subdirectory_exclude_platforms(quadrature_encoder)\n  add_subdirectory_exclude_platforms(quadrature_encoder_substep)\n  add_subdirectory_exclude_platforms(spi)\n  add_subdirectory_exclude_platforms(squarewave)\n  add_subdirectory_exclude_platforms(st7789_lcd)\n  add_subdirectory_exclude_platforms(uart_rx)\n  add_subdirectory_exclude_platforms(uart_tx)\n  add_subdirectory_exclude_platforms(ws2812)\n  add_subdirectory_exclude_platforms(uart_pio_dma)\nelse()\n  message(\"Skipping PIO examples as hardware_pio is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Bluetooth Audio Example Pins and Target - CMake\nDESCRIPTION: This CMake code block defines an interface library named 'mod_player_pins' to hold compile definitions for I2S audio data and clock pins. It then uses these definitions when creating a Pico W Bluetooth example target 'mod_player', linking it with the specified source file 'pico_btstack_hxcmod_player' and the defined pins interface. This configuration is essential for setting up the hardware pins used by the audio player within the Bluetooth example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/mod_player/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mod_player_pins INTERFACE)\ntarget_compile_definitions(mod_player_pins INTERFACE\n    PICO_AUDIO_I2S_DATA_PIN=9\n    PICO_AUDIO_I2S_CLOCK_PIN_BASE=10\n    )\npicow_bt_example(mod_player pico_btstack_hxcmod_player mod_player_pins)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Target (CMake)\nDESCRIPTION: Links essential Pico SDK libraries (`pico_stdlib` and `hardware_flash`) to the `flash_program` executable target. This makes the functions and headers from these libraries available to the program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/program/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\\n        flash_program\\n        pico_stdlib\\n        hardware_flash\\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for picow_blink_slow_clock CMake\nDESCRIPTION: Links necessary libraries to the 'picow_blink_slow_clock' target. It includes standard Pico SDK, CYW43 GPIO access, and the `hardware_clocks` library, required for runtime modification of the system clock speed.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(picow_blink_slow_clock\n        pico_stdlib              # for core functionality\n        pico_cyw43_arch_none     # we need Wifi to access the GPIO, but we don't need anything else\n        hardware_clocks\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Pico Timer Low-Level Example Executable (CMake)\nDESCRIPTION: This CMake code block defines the build steps for the `timer_lowlevel` executable within the Raspberry Pi Pico SDK environment. It adds the executable source file, disables the default SDK alarm pool feature specifically for this example, links the program against the standard Pico library (`pico_stdlib`), and utilizes custom SDK functions (`pico_add_extra_outputs`, `example_auto_set_url`) to generate necessary build outputs (map, bin, hex) and set metadata. This snippet requires the Pico SDK and CMake to be installed.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/timer/timer_lowlevel/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (PICO_ON_DEVICE)\n  add_executable(timer_lowlevel\n          timer_lowlevel.c)\n\n  # Disable SDK alarm support for this lowlevel example\n  set(PICO_TIME_DEFAULT_ALARM_POOL_DISABLED 1)\n\n  target_link_libraries(timer_lowlevel pico_stdlib)\n\n  # create map/bin/hex file etc.\n  pico_add_extra_outputs(timer_lowlevel)\n\n  # add url via pico_set_program_url\n  example_auto_set_url(timer_lowlevel)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Common INTERFACE Library - CMake\nDESCRIPTION: Declares an INTERFACE library named 'common_stuff'. INTERFACE libraries are used to group usage requirements (like include directories, compile definitions, dependencies) that are passed to targets linking against them, without producing a physical library file.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/cmake/build_variants/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(common_stuff INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Defining Pico Power Status ADC Library (CMake)\nDESCRIPTION: Defines an INTERFACE library named `power_status_adc` in CMake. It specifies the source file (`power_status.c`), include directories, and required dependencies (`hardware_adc`, `hardware_gpio`) for any target that links against this interface library, making the power status functions available.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/read_vsys/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(power_status_adc INTERFACE)\ntarget_sources(power_status_adc INTERFACE\n        ${CMAKE_CURRENT_LIST_DIR}/power_status.c\n        )\ntarget_include_directories(power_status_adc INTERFACE\n        ${CMAKE_CURRENT_LIST_DIR}\n        )\ntarget_link_libraries(power_status_adc INTERFACE\n        hardware_adc\n        hardware_gpio\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring and Packaging Bootloader UF2 (CMake)\nDESCRIPTION: Configures the UF2 packaging for the bootloader binary. `pico_set_uf2_family` sets the UF2 family type (likely 'absolute' for bootloaders loaded directly) and `pico_package_uf2_output` packages the binary into a UF2 file, specifying the target flash address (0x10000000, the start of flash).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# create absolute uf2, and package in flash\npico_set_uf2_family(enc_bootloader \"absolute\")\npico_package_uf2_output(enc_bootloader 0x10000000)\n```\n\n----------------------------------------\n\nTITLE: Configuring Polling iPerf Server CMake Target (CMake)\nDESCRIPTION: This snippet defines the CMake target for the polling iPerf server executable. It is similar to the background version, specifying the same source file and setting the same compile definitions for WIFI credentials and include directories. The key difference is the library linked for the CYW43/LWIP architecture: it links pico_cyw43_arch_lwip_poll, indicating a polling-based network handling approach rather than a background thread.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/iperf/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_iperf_server_poll\n        picow_iperf.c\n        )\ntarget_compile_definitions(picow_iperf_server_poll PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        )\ntarget_include_directories(picow_iperf_server_poll PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        )\ntarget_link_libraries(picow_iperf_server_poll\n        pico_cyw43_arch_lwip_poll\n        pico_stdlib\n        pico_lwip_iperf\n        )\npico_add_extra_outputs(picow_iperf_server_poll)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable - CMake\nDESCRIPTION: This command links the necessary libraries ('pico_stdlib', 'hardware_spi', 'hardware_dma') to the 'spi_dma' executable target. These libraries provide standard SDK functions and access to the SPI and DMA hardware peripherals required by the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_dma/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(spi_dma pico_stdlib hardware_spi hardware_dma)\n```\n\n----------------------------------------\n\nTITLE: Define and Configure Executable Target - CMake\nDESCRIPTION: Configures the main executable target `hello_sha256`. It specifies the primary source file (`hello_sha256.c`), adds a dependency on the generated include file target (`sample.txt.inc`), links required Pico SDK libraries (`pico_stdlib`, `pico_sha256`), and sets private include directories. Finally, it applies Pico-specific functions for handling build outputs and example URLs.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/sha/sha256/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_sha256\n        hello_sha256.c\n        )\nadd_dependencies(hello_sha256 sample.txt.inc)\ntarget_link_libraries(hello_sha256\n        pico_stdlib\n        pico_sha256\n)\ntarget_include_directories(hello_sha256 PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_BINARY_DIR}/generated\n)\npico_add_extra_outputs(hello_sha256)\nexample_auto_set_url(hello_sha256)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Compile Definition CMake\nDESCRIPTION: Checks if the CMake variable `HELLO_PIO_LED_PIN` is set. If it is, it adds a compile definition `HELLO_PIO_LED_PIN` with the variable's value to the `hello_pio` target, allowing the C code to use this value via a preprocessor define.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hello_pio/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Pass cmake -DHELLO_PIO_LED_PIN=x, where x is the pin you want to use\nif(HELLO_PIO_LED_PIN)\n        target_compile_definitions(hello_pio PRIVATE\n                HELLO_PIO_LED_PIN=${HELLO_PIO_LED_PIN}\n        )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Pico Project with TinyUSB CMake\nDESCRIPTION: This snippet sets key CMake variables for a Raspberry Pi Pico (RP2040) project, specifying the chip family (`rp2040`) and the board (`pico_sdk`). It then includes the TinyUSB dual examples subdirectory from the specified `PICO_TINYUSB_PATH`, making these examples available within the build system under the alias `tinyusb_dual_examples`. It requires the Pico SDK and TinyUSB components to be accessible via CMake variables like `PICO_TINYUSB_PATH`.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/dual/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FAMILY rp2040)\nset(BOARD pico_sdk)\nset(TINYUSB_FAMILY_PROJECT_NAME_PREFIX \"tinyusb_dual_\")\nadd_subdirectory(${PICO_TINYUSB_PATH}/examples/dual tinyusb_dual_examples)\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Header for Second Target (CMake)\nDESCRIPTION: Uses the Pico SDK function `pico_generate_pio_header` to process `squarewave.pio` and generate the necessary header file for the `pio_squarewave_div_sync` executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\npico_generate_pio_header(pio_squarewave_div_sync ${CMAKE_CURRENT_LIST_DIR}/squarewave.pio)\n```\n\n----------------------------------------\n\nTITLE: Enable USB StdIO CMake\nDESCRIPTION: Enables standard input/output (stdio) functionality for the `hello_universal` target using the USB interface. The `1` indicates that USB stdio is enabled, allowing console communication over USB.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/hello_universal/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_enable_stdio_usb(hello_universal 1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Picow BT Example CYW43 LWIP Poll CMake\nDESCRIPTION: Defines an interface library for examples using CYW43 LWIP in a polling architecture. It adds the common poll source file and links the base cyw43-lwip library and the pico_cyw43_arch_lwip_poll library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(picow_bt_example_cyw43_lwip_poll INTERFACE)\ntarget_sources(picow_bt_example_cyw43_lwip_poll INTERFACE\n        ${BT_EXAMPLE_COMMON_DIR}/picow_bt_example_poll.c\n        )\ntarget_link_libraries(picow_bt_example_cyw43_lwip_poll INTERFACE\n        picow_bt_example_cyw43_lwip\n        pico_cyw43_arch_lwip_poll\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory Nec Transmit Library CMake\nDESCRIPTION: Configures the CMake build process to include the 'nec_transmit_library' directory. This command adds the subdirectory containing the NEC transmit library source files and CMakeLists.txt to the build, potentially excluding it on specific platforms as defined elsewhere.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(nec_transmit_library)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Linker Script Generation Function (CMake)\nDESCRIPTION: Defines a CMake function `add_linker_script` that generates a custom linker script based on a base `memmap_no_flash.ld`. It modifies the RAM origin and length based on provided arguments and writes the result to a target-specific .ld file in the build directory, creating a custom command and target to ensure the script is generated when needed.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_linker_script target origin length)\n    # Write script file to run later, to generate the linker script\n    file(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/make_linker_script.cmake\"\n        \"# create linker script to run from elsewhere in SRAM\\n\"\n        \"file(READ \\${PICO_LINKER_SCRIPT_PATH}/memmap_no_flash.ld LINKER_SCRIPT)\\n\"\n        \"string(REPLACE \\\"RAM(rwx) : ORIGIN =  0x20000000, LENGTH = 512k\\\" \\\"RAM(rwx) : ORIGIN =  \\${origin}, LENGTH = \\${length}\\\" LINKER_SCRIPT \\\"\\${LINKER_SCRIPT}\\\")\\n\"\n        \"file(WRITE \\${output_file} \\\"\\${LINKER_SCRIPT}\\\")\\n\"\n    )\n    # Add command to run this whenever memmap_no_flash.ld changes\n    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${target}.ld\n        COMMAND ${CMAKE_COMMAND}\n            -DPICO_LINKER_SCRIPT_PATH:PATH=${PICO_LINKER_SCRIPT_PATH}\n            -Dorigin=\"${origin}\" -Dlength=\"${length}\"\n            -Doutput_file:FILEPATH=${CMAKE_CURRENT_BINARY_DIR}/${target}.ld\n            -P \"${CMAKE_CURRENT_BINARY_DIR}/make_linker_script.cmake\"\n        DEPENDS ${PICO_LINKER_SCRIPT_PATH}/memmap_no_flash.ld)\n    add_custom_target(${target}_ld DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${target}.ld)\n    add_dependencies(${target} ${target}_ld)\n    pico_set_linker_script(${target} ${CMAKE_CURRENT_BINARY_DIR}/${target}.ld)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Define Exclude Platform Function - CMake\nDESCRIPTION: Defines a custom CMake function `add_subdirectory_exclude_platforms` that includes a specified subdirectory only if the current `PICO_PLATFORM` variable is NOT found in the list of arguments provided to the function.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_subdirectory_exclude_platforms NAME)\n    if (ARGN)\n        if (PICO_PLATFORM IN_LIST ARGN)\n            message(\"Skipping ${NAME} example which is unsupported on this platform\")\n            return()\n        endif()\n        foreach(PATTERN IN LISTS ARGN)\n            string(REGEX MATCH \"${PATTERN}\" MATCHED \"${PICO_PLATFORM}\")\n            if (MATCHED)\n                message(\"Skipping ${NAME} example which is unsupported on this platform\")\n                return()\n            endif()\n        endforeach()\n    endif()\n    add_subdirectory(${NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include TinyUSB Dual/PIO-USB Examples (CMake)\nDESCRIPTION: Checks if the 'tinyusb_pico_pio_usb' target, associated with the Pico-PIO-USB submodule, is available. If the target exists, it includes the 'dual' subdirectory, likely containing examples using both device and host roles via PIO. If the target is unavailable, it prints a message noting the skipping of dual examples, specifically mentioning the required submodule.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET tinyusb_pico_pio_usb)\n  add_subdirectory(dual)\nelse ()\n  message(\"Skipping TinyUSB dual examples, as TinyUSB hw/mcu/raspberry_pi/Pico-PIO-USB submodule unavailable\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries - CMake\nDESCRIPTION: Links the specified libraries (`pico_stdlib` and `hardware_pio`) to the `pio_hub75` target. `pico_stdlib` provides standard Pico SDK functions, while `hardware_pio` provides access to the Programmable I/O hardware. Linking ensures the target can use functions and symbols from these libraries. This requires the libraries to be findable by CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hub75/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pio_hub75 PRIVATE pico_stdlib hardware_pio)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable - CMake\nDESCRIPTION: Links necessary libraries to the `rtc_alarm` executable. It includes the standard Pico library (`pico_stdlib`) and the specific hardware support library for the RTC (`hardware_rtc`).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/rtc_alarm/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(rtc_alarm pico_stdlib hardware_rtc)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries (flash_nuke) CMake\nDESCRIPTION: Links necessary Pico SDK libraries to the 'flash_nuke' target. 'pico_stdlib' provides standard functions, and 'hardware_flash' provides functions to interact with the Pico's flash memory.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/nuke/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(flash_nuke\n        pico_stdlib\n        hardware_flash\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Standard Bootloader Outputs (CMake)\nDESCRIPTION: Invokes a Pico SDK function to generate standard build output files for the bootloader executable, such as .map, .bin, .hex, and the final .uf2 file.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# create map/bin/hex/uf2 file etc.\npico_add_extra_outputs(enc_bootloader)\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories CMake\nDESCRIPTION: Specifies private include directories required by the 'dvi_out_hstx_encoder' target. It adds the 'images' subdirectory, relative to the current CMakeLists.txt file's location, which likely contains necessary header files or assets.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hstx/dvi_out_hstx_encoder/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(dvi_out_hstx_encoder PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}/images\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for pico_freertos_httpd_nosys\nDESCRIPTION: Adds private include directories for the `pico_freertos_httpd_nosys` target. It includes the current directory and parent directories to locate common configuration files like FreeRTOSConfig.h and lwipopts.h, along with the lwIP HTTPD application path.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(pico_freertos_httpd_nosys PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common FreeRTOSConfig\n        ${CMAKE_CURRENT_LIST_DIR}/../.. # for our common lwipopts\n        ${PICO_LWIP_CONTRIB_PATH}/apps/httpd\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating First Executable Linking Common Library - CMake\nDESCRIPTION: Defines an executable target 'build_variant1'. It links against 'common_stuff' to inherit its sources, definitions, and dependencies. A private compile definition ('A_DEFINE_THAT_IS_NOT_SHARED=456') specific to this executable is added. 'pico_add_extra_outputs' is used to generate additional build artifacts relevant for Pico, like UF2 files.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/cmake/build_variants/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(build_variant1)\ntarget_link_libraries(build_variant1 common_stuff)\ntarget_compile_definitions(build_variant1 PRIVATE\n        A_DEFINE_THAT_IS_NOT_SHARED=456)\npico_add_extra_outputs(build_variant1)\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Linker Script to Bootloader (CMake)\nDESCRIPTION: Calls the previously defined `add_linker_script` function to generate and apply a custom linker script for the `enc_bootloader`. The script is configured to place the bootloader in SRAM starting at address 0x20070000 with a length of 64k.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# create linker script to run from 0x20070000\nadd_linker_script(enc_bootloader \"0x20070000\" \"64k\")\n```\n\n----------------------------------------\n\nTITLE: Generating Default BTstack Example Target Name in CMake\nDESCRIPTION: Defines a CMake function to generate the default target name for a BTstack example based on its logical NAME. It sets the output variable RET in the parent scope.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(picow_bt_example_target_name NAME RET)\n        SET(${RET} \"picow_bt_example_${NAME}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including FreeRTOS Examples CMake\nDESCRIPTION: This CMake snippet checks if the `FREERTOS_KERNEL_PATH` variable (either CMake or environment) is defined. If it is not found, it prints a message and exits, preventing the inclusion of FreeRTOS examples. Otherwise, it includes a necessary CMake import file and adds the `hello_freertos` subdirectory to the build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/freertos/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT FREERTOS_KERNEL_PATH AND NOT DEFINED ENV{FREERTOS_KERNEL_PATH})\n  message(\"Skipping FreeRTOS examples as FREERTOS_KERNEL_PATH not defined\")\n  return()\nendif()\n\ninclude(FreeRTOS_Kernel_import.cmake)\n\nadd_subdirectory(hello_freertos)\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Linker Script to Application (CMake)\nDESCRIPTION: Calls the `add_linker_script` function to generate and apply a custom linker script for the `hello_serial_enc` application. It is configured to place the application in SRAM starting at 0x20000000 with a length of 448k, ensuring it does not overlap with the bootloader located at 0x20070000.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# create linker script to ensure it doesn't overwrite the bootloader at 0x20070000\nadd_linker_script(hello_serial_enc \"0x20000000\" \"448k\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including DMA Examples (CMake)\nDESCRIPTION: Checks if the 'hardware_dma' target is available. If true, it includes several DMA example subdirectories ('channel_irq', 'control_blocks', 'hello_dma', 'sniff_crc') using `add_subdirectory_exclude_platforms`. If false, it prints a message indicating the examples are skipped. This ensures DMA examples are only built on platforms with hardware DMA support.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_dma)\n  add_subdirectory_exclude_platforms(channel_irq)\n  add_subdirectory_exclude_platforms(control_blocks)\n  add_subdirectory_exclude_platforms(hello_dma)\n  add_subdirectory_exclude_platforms(sniff_crc)\nelse()\n  message(\"Skipping DMA examples as hardware_dma is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Pico Executable (CMake)\nDESCRIPTION: This command links necessary libraries to the 'lcd_uart' executable target. It links 'pico_stdlib' for core SDK functions and 'hardware_uart' for UART peripheral support, which are common dependencies for this example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/lcd_uart/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(lcd_uart pico_stdlib hardware_uart)\n```\n\n----------------------------------------\n\nTITLE: Set C and C++ Standards - CMake\nDESCRIPTION: Sets the C standard for source files to C11 and the C++ standard to C++17, ensuring that the code is compiled using specific versions of the language standards.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_CXX_STANDARD 17)\n```\n\n----------------------------------------\n\nTITLE: Set Numeric Variable in Pico Binary File (shell)\nDESCRIPTION: Illustrates how to modify a specific configurable variable, such as the `LED_PIN`, within a `.uf2` binary file (`blink_any.uf2`) using the `-s` flag with `picotool config`. This changes the program's behavior before it is loaded onto the device.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ picotool config blink_any.uf2 -s LED_PIN 7\n```\n\n----------------------------------------\n\nTITLE: Enabling btstack Debug in CMake\nDESCRIPTION: This CMake snippet demonstrates how to enable btstack debug output and packet logging within a Pico W project. By uncommenting the `WANT_HCI_DUMP=1` definition for the `picow_bt_example_common` target, detailed HCI packet information will be included in the debug output, which can then be processed for Wireshark analysis. This requires modifying the project's CMakeLists.txt file.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/README.md#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(picow_bt_example_common INTERFACE\n    #WANT_HCI_DUMP=1 # This enables btstack debug\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for Pico (CMake)\nDESCRIPTION: This command instructs the build system to generate additional output file types for the 'lcd_uart' target, such as .map, .bin, and .hex files, which are often useful for debugging or different programming methods.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/lcd_uart/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(lcd_uart)\n```\n\n----------------------------------------\n\nTITLE: Generate Extra Build Outputs in CMake\nDESCRIPTION: This Pico SDK specific function adds custom commands to generate additional build output files for the `hello_pwm` target. It typically creates files like `.map` (memory layout), `.bin` (binary for loading), and `.hex` (hexadecimal format), which are necessary for flashing and debugging the embedded application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pwm/hello_pwm/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npico_add_extra_outputs(hello_pwm)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs - CMake\nDESCRIPTION: The `pico_add_extra_outputs` command is a Pico SDK specific helper function. It configures the build system to generate additional output files for the specified target (`flash_xip_stream`), typically including .map, .bin, and .hex files, which are useful for debugging and flashing.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/xip_stream/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# create map/bin/hex file etc.\npico_add_extra_outputs(flash_xip_stream)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for Pico in CMake\nDESCRIPTION: This command utilizes a specific function provided by the Pico SDK's CMake extensions to generate additional output files for the `uart_advanced` target. This typically includes files like `.map`, `.bin`, and `.hex`, which are useful for debugging, flashing, and analysis of the compiled program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/uart_advanced/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(uart_advanced)\n```\n\n----------------------------------------\n\nTITLE: Adding Example Subdirectories with Exclusion\nDESCRIPTION: This snippet uses the `add_subdirectory_exclude_platforms` CMake function to include specific example project directories (dht_sensor, hello_7segment, hello_gpio_irq) into the build tree. The 'host' platform is excluded, meaning these examples will only be built when targeting a platform other than the build host itself. This is useful for embedded projects where certain examples are hardware-specific.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/gpio/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(dht_sensor host)\nadd_subdirectory_exclude_platforms(hello_7segment host)\nadd_subdirectory_exclude_platforms(hello_gpio_irq host)\n```\n\n----------------------------------------\n\nTITLE: Building HTTPS Client Verification Executable CMake\nDESCRIPTION: This snippet defines an alternative executable, `picow_http_client_verify`, using `picow_http_verify.c`. It includes the same WiFi definitions but adds `ALTCP_MBEDTLS_AUTHMODE=MBEDTLS_SSL_VERIFY_REQUIRED` to force server certificate verification during HTTPS connections, overriding the default optional mode. Dependencies and include paths are similar to the standard client.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/http_client/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_http_client_verify\n        picow_http_verify.c\n        )\ntarget_compile_definitions(picow_http_client_verify PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        # By default verification is optional (MBEDTLS_SSL_VERIFY_OPTIONAL)\n        # Make it required for this test\n        ALTCP_MBEDTLS_AUTHMODE=MBEDTLS_SSL_VERIFY_REQUIRED\n        )\ntarget_include_directories(picow_http_client_verify PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts and mbedtls_config\n        )\ntarget_link_libraries(picow_http_client_verify\n        pico_cyw43_arch_lwip_threadsafe_background\n        example_lwip_http_util\n        pico_stdlib\n        )\npico_add_extra_outputs(picow_http_client_verify)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory Excluding Platforms (hello_double_tap) - CMake\nDESCRIPTION: Includes the 'hello_double_tap' subdirectory in the build, except when the target platform is 'host'. This is used for examples that are designed to run only on the target hardware, not on the host machine.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(hello_double_tap host)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Watchdog Example (CMake)\nDESCRIPTION: This CMake snippet checks if the target hardware supports the 'hardware_watchdog' feature. If supported, it includes the 'hello_watchdog' example subdirectory, excluding the 'host' platform from the build. Otherwise, it prints a message indicating that the watchdog examples are being skipped because the hardware_watchdog feature is unavailable on the current target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/watchdog/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_watchdog)\n  add_subdirectory_exclude_platforms(hello_watchdog host)\nelse()\n  message(\"Skipping Watchdog examples as hardware_watchdog unavailable\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include Subdirectory CMake\nDESCRIPTION: This CMake code block checks if the target `hardware_resets` exists. If it does, it includes the `hello_reset` subdirectory, presumably containing example code or modules. If the target does not exist, it prints a message indicating that the reset examples are being skipped because hardware resets are unavailable on the current platform.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/reset/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_resets)\n  add_subdirectory_exclude_platforms(hello_reset)\nelse()\n  message(\"Skipping reset examples as hardware_resets is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Add RTC Examples in CMake\nDESCRIPTION: This CMake code block checks for the presence of the `hardware_rtc` target. If the target exists, it adds several subdirectories containing RTC-related examples to the build. If the target is not found, it prints a message indicating that the RTC examples are being skipped due to hardware unavailability. This is common practice for tailoring builds based on specific hardware capabilities.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_rtc)\n  add_subdirectory_exclude_platforms(hello_rtc)\n  add_subdirectory_exclude_platforms(rtc_alarm)\n  add_subdirectory_exclude_platforms(rtc_alarm_repeat)\nelse()\n  message(\"Skipping RTC examples as hardware_rtc is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Datasheet Target (CMake)\nDESCRIPTION: Creates a custom build target named `pio_squarewave_datasheet`. This target depends on specific generated files (`.hex`, `.pio.h`) needed for documentation purposes (like the RP2040 datasheet), ensuring they are built.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(pio_squarewave_datasheet DEPENDS\n\t\t${CMAKE_CURRENT_LIST_DIR}/generated/squarewave.hex\n\t\t${CMAKE_CURRENT_LIST_DIR}/generated/squarewave.pio.h\n\t\t${CMAKE_CURRENT_LIST_DIR}/generated/squarewave_wrap.pio.h\n\t\t)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory Excluding Platforms (unique_board_id) - CMake\nDESCRIPTION: Includes the 'unique_board_id' subdirectory, excluding it when the target platform is 'host'. This is likely for examples that require accessing unique hardware identifiers available only on the target device.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(unique_board_id host)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries CMake\nDESCRIPTION: Links the previously defined executable target 'hello_otp' against the 'pico_stdlib' library. This step is necessary to include standard Pico SDK functions and features needed by the executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/otp/hello_otp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_otp pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Linking Standard Library CMake\nDESCRIPTION: Links the 'pico_stdlib' library to the 'blink' executable target. This library provides essential functions and definitions required by most applications developed with the Raspberry Pi Pico SDK, offering standard microcontroller peripherals and utilities.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/blink/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(blink pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including UART Examples (CMake)\nDESCRIPTION: This CMake code block checks if the `hardware_uart` target is available on the current platform. If it is, it includes several UART-related example subdirectories (`hello_uart`, `lcd_uart`, `uart_advanced`) while excluding certain platforms like `host`. If `hardware_uart` is not available, it prints a message indicating that the UART examples are being skipped.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_uart)\n  add_subdirectory_exclude_platforms(hello_uart)\n  add_subdirectory_exclude_platforms(lcd_uart host)\n  add_subdirectory_exclude_platforms(uart_advanced host)\nelse()\n  message(\"Skipping UART examples as hardware_uart is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Polling UDP Beacon Executable (CMake)\nDESCRIPTION: This snippet defines and configures the 'picow_udp_beacon_poll' executable. It sets compile definitions for Wi-Fi SSID and password, includes necessary source and SDK directories, and links the polling LWIP library required for polling-based networking.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/udp_beacon/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_udp_beacon_poll\n        picow_udp_beacon.c\n        )\ntarget_compile_definitions(picow_udp_beacon_poll PRIVATE\n        WIFI_SSID=\\\"\\${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"\\${WIFI_PASSWORD}\\\"\n        )\ntarget_include_directories(picow_udp_beacon_poll PRIVATE\n        \\${CMAKE_CURRENT_LIST_DIR}\n        \\${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        )\ntarget_link_libraries(picow_udp_beacon_poll\n        pico_cyw43_arch_lwip_poll\n        pico_stdlib\n        )\npico_add_extra_outputs(picow_udp_beacon_poll)\n```\n\n----------------------------------------\n\nTITLE: Defining Pico W TCP Server Executable (Polling LWIP) - CMake\nDESCRIPTION: This snippet defines the CMake executable target `picow_tcpip_server_poll`. It uses the same source file `picow_tcp_server.c` but links against the polling-based LWIP library (`pico_cyw43_arch_lwip_poll`) instead of the background version. It similarly sets WiFi compile definitions and includes/links standard Pico SDK components.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/tcp_server/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_tcpip_server_poll\n        picow_tcp_server.c\n        )\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(picow_tcpip_server_poll PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        )\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(picow_tcpip_server_poll PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        )\n```\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(picow_tcpip_server_poll\n        pico_cyw43_arch_lwip_poll\n        pico_stdlib\n        )\n```\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(picow_tcpip_server_poll)\n```\n\n----------------------------------------\n\nTITLE: Add periodic_sampler Subdirectory in CMake\nDESCRIPTION: Includes the 'periodic_sampler' example subdirectory into the CMake build system. While the macro name suggests platform exclusion, no platforms are listed in this particular call, indicating it is likely included for all default target platforms relevant to the project.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/timer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(periodic_sampler)\n```\n\n----------------------------------------\n\nTITLE: Building blink_universal Target (CMake)\nDESCRIPTION: This command calls `add_universal_target` to build the `blink` example project as a universal binary named `blink_universal`. It explicitly sets `SOURCE_TARGET` to `blink`, indicating that the `blink.bin` file from the platform-specific builds should be used for linking.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_universal_target(blink_universal\n    ${CMAKE_CURRENT_LIST_DIR}/../blink\n    SOURCE_TARGET blink\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Target Dependency (CMake)\nDESCRIPTION: Establishes a dependency where the `pio_squarewave` executable target relies on the `pio_squarewave_datasheet` custom target. This ensures that the datasheet assets are built whenever the main executable is built.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(pio_squarewave pio_squarewave_datasheet)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for picow_blink CMake\nDESCRIPTION: Links the required libraries to the 'picow_blink' executable target. It includes `pico_stdlib` for core SDK functionality and `pico_cyw43_arch_none` to enable access to the onboard CYW43xx wireless chip's GPIO for blinking without the full network stack.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(picow_blink\n        pico_stdlib              # for core functionality\n        pico_cyw43_arch_none     # we need Wifi to access the GPIO, but we don't need anything else\n        )\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Header CMake\nDESCRIPTION: Uses the `pico_generate_pio_header` function provided by the Pico SDK to process the `clocked_input.pio` assembly file and generate a C header file. This header allows C/C++ code to interface with the defined PIO program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/clocked_input/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npico_generate_pio_header(pio_clocked_input ${CMAKE_CURRENT_LIST_DIR}/clocked_input.pio)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Add I2C Example Subdirectories (CMake)\nDESCRIPTION: This CMake code block checks if the 'hardware_i2c' target is defined for the current build. If true, it includes multiple subdirectories containing I2C peripheral examples (like sensors and displays) using the 'add_subdirectory_exclude_platforms' command.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_i2c)\n  add_subdirectory_exclude_platforms(bmp280_i2c)\n  add_subdirectory_exclude_platforms(bus_scan)\n  add_subdirectory_exclude_platforms(lcd_1602_i2c)\n  add_subdirectory_exclude_platforms(lis3dh_i2c)\n  add_subdirectory_exclude_platforms(mcp9808_i2c)\n  add_subdirectory_exclude_platforms(mma8451_i2c)\n  add_subdirectory_exclude_platforms(mpl3115a2_i2c)\n  add_subdirectory_exclude_platforms(mpu6050_i2c)\n  add_subdirectory_exclude_platforms(ssd1306_i2c)\n  add_subdirectory_exclude_platforms(pa1010d_i2c)\n  add_subdirectory_exclude_platforms(pcf8523_i2c)\n  add_subdirectory_exclude_platforms(ht16k33_i2c)\n  add_subdirectory_exclude_platforms(slave_mem_i2c)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Pico W NTP Client Executable (Background)\nDESCRIPTION: Defines the `picow_ntp_client_background` executable in CMake, specifying its source file, compile definitions (including WiFi credentials), include directories for LWIP options, and necessary libraries for background thread-safe network operations.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/ntp_client/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_ntp_client_background\n        picow_ntp_client.c\n        )\ntarget_compile_definitions(picow_ntp_client_background PRIVATE\n        WIFI_SSID=\\\"${\\\\${WIFI_SSID}}\\\"\n        WIFI_PASSWORD=\\\"${\\\\${WIFI_PASSWORD}}\\\"\n        )\ntarget_include_directories(picow_ntp_client_background PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n)\ntarget_link_libraries(picow_ntp_client_background\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_stdlib\n        )\npico_add_extra_outputs(picow_ntp_client_background)\n```\n\n----------------------------------------\n\nTITLE: Exclude Serial Subdirectory in CMake\nDESCRIPTION: Adds the 'serial' subdirectory to the build process, excluding it for platforms specified by the `add_subdirectory_exclude_platforms` function. This typically controls platform-specific examples or libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hello_world/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(serial)\n```\n\n----------------------------------------\n\nTITLE: Generate C Include from sample.txt - CMake\nDESCRIPTION: Calls the previously defined `make_sample_inc` function. This specifically processes the `sample.txt` file, generating a C include file named `sample.txt.inc` and setting up a custom target with the same name to manage this generated file as a dependency for other build targets.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/sha/sha256/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nmake_sample_inc(sample.txt sample.txt.inc)\n```\n\n----------------------------------------\n\nTITLE: Suppress lwIP mbedTLS Warning in CMake\nDESCRIPTION: This snippet applies a specific compile option (`-Wno-unused-result`) to the `altcp_tls_mbedtls.c` source file from the lwIP library. This is done to suppress a particular compiler warning that might be generated by the external code within that file.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/mqtt/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(\n    ${PICO_LWIP_PATH}/src/apps/altcp_tls/altcp_tls_mbedtls.c\n    PROPERTIES\n    COMPILE_OPTIONS \"-Wno-unused-result\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Path for Pico SDK\nDESCRIPTION: Sets the CMAKE_MODULE_PATH variable, appending the current directory to allow CMake to find custom modules, typically provided by the Pico SDK for functions like `pico_add_extra_outputs`.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR})\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Header CMake\nDESCRIPTION: This Pico SDK specific CMake function processes a .pio assembly file and generates a C/C++ header file containing the assembled PIO program and associated constants. This allows the main C code to include and use the PIO program directly.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/quadrature_encoder/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npico_generate_pio_header(pio_quadrature_encoder ${CMAKE_CURRENT_LIST_DIR}/quadrature_encoder.pio)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Linking CYW43 Library CMake\nDESCRIPTION: Conditionally links the 'pico_cyw43_arch_none' library to the 'blink' target if the CMake variable 'PICO_CYW43_SUPPORTED' is set. This library is necessary for projects running on boards with the CYW43xx wireless chip (like the Pico W) to enable its functionality.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/blink/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (PICO_CYW43_SUPPORTED)\n    target_link_libraries(blink pico_cyw43_arch_none)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring PIO SPI Flash Example Target (CMake)\nDESCRIPTION: This CMake block defines the build configuration for the 'pio_spi_flash' executable target. It includes adding the target, generating a PIO header file from the 'spi.pio' source, listing the required source files (including C code and the generated PIO header), linking necessary libraries like 'pico_stdlib' and 'hardware_pio', adding extra build outputs, and setting a URL for the example documentation.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/spi/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_spi_flash)\n\npico_generate_pio_header(pio_spi_flash ${CMAKE_CURRENT_LIST_DIR}/spi.pio)\n\ntarget_sources(pio_spi_flash PRIVATE\n        spi_flash.c\n        pio_spi.c\n        pio_spi.h\n        )\n\ntarget_link_libraries(pio_spi_flash PRIVATE pico_stdlib hardware_pio)\npico_add_extra_outputs(pio_spi_flash)\n\nexample_auto_set_url(pio_spi_flash)\n```\n\n----------------------------------------\n\nTITLE: Enabling Standard IO on Pico (CMake)\nDESCRIPTION: These commands enable standard input/output (stdio) for the 'lcd_uart' target. 'pico_enable_stdio_usb' enables stdio over USB, and 'pico_enable_stdio_uart' enables stdio over the UART peripheral, both configured to be enabled (1).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/lcd_uart/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_enable_stdio_usb(lcd_uart 1)\npico_enable_stdio_uart(lcd_uart 1)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target (CMake)\nDESCRIPTION: Links necessary libraries from the Pico SDK, such as `pico_stdlib` (standard library functions) and `hardware_pio` (PIO hardware access), to the `pio_squarewave` executable target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(pio_squarewave PRIVATE pico_stdlib hardware_pio)\n```\n\n----------------------------------------\n\nTITLE: Defining BLE Temp Sensor with Wi-Fi Executable (Conditional) - CMake\nDESCRIPTION: This conditional CMake block defines the 'picow_ble_temp_sensor_with_wifi' executable if both `WIFI_SSID` and `WIFI_PASSWORD` are defined. This target combines the BLE temperature sensor server functionality with Wi-Fi network capabilities, linking additional libraries for LwIP and iperf. It also defines the Wi-Fi credentials as preprocessor macros, escaping the double quotes within the definition.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/standalone/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIFI_SSID AND WIFI_PASSWORD)\n    # Another version of the sensor example, but this time also runs iperf over wifi\n    add_executable(picow_ble_temp_sensor_with_wifi\n        server_with_wifi.c server_common.c\n        )\n    target_link_libraries(picow_ble_temp_sensor_with_wifi\n        pico_stdlib\n        pico_btstack_ble\n        pico_btstack_cyw43\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_lwip_iperf\n        hardware_adc\n        )\n    target_include_directories(picow_ble_temp_sensor_with_wifi PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR} # For btstack config\n        )\n    target_compile_definitions(picow_ble_temp_sensor_with_wifi PRIVATE\n        WIFI_SSID=\\\"\\\"${WIFI_SSID}\\\"\\\"\n        WIFI_PASSWORD=\\\"\\\"${WIFI_PASSWORD}\\\"\\\"\n        )\n    pico_btstack_make_gatt_header(picow_ble_temp_sensor_with_wifi PRIVATE \"${CMAKE_CURRENT_LIST_DIR}/temp_sensor.gatt\")\n\n    pico_add_extra_outputs(picow_ble_temp_sensor_with_wifi)\n    example_auto_set_url(picow_ble_temp_sensor_with_wifi)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target CMake\nDESCRIPTION: Links the `pico_stdlib` and `hardware_i2c` libraries to the previously defined `lcd_1602_i2c` executable target. These libraries provide essential Pico functions and specific I2C hardware support needed by the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/lcd_1602_i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(lcd_1602_i2c pico_stdlib hardware_i2c)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Executable - CMake\nDESCRIPTION: Links the necessary libraries (`pico_stdlib` for standard functionality and `pico_multicore` specifically for multicore support) to the `hello_multicore` executable target. This ensures required functions and APIs are available to the program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/hello_multicore/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_multicore\n pico_stdlib\n pico_multicore)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Pico Target (CMake)\nDESCRIPTION: Links the previously defined executable target flash_cache_perfctr against the pico_stdlib library. This command ensures that the necessary SDK functions and components provided by pico_stdlib are included during the linking phase of the build process.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/cache_perfctr/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(flash_cache_perfctr\n        pico_stdlib\n        )\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include TinyUSB Device Examples (CMake)\nDESCRIPTION: Checks if the 'tinyusb_device' target is available within the CMake build system. If the target exists, it includes the 'device' subdirectory, which presumably contains the TinyUSB device examples. If the target is not available, it prints a message to the console indicating that the device examples are being skipped.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET tinyusb_device)\n  add_subdirectory(device)\nelse ()\n  message(\"Skipping TinyUSB device examples as TinyUSB is unavailable\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Linking Pico SDK Libraries (CMake)\nDESCRIPTION: This CMake command links the `multicore_runner_queue` executable with required libraries from the Raspberry Pi Pico SDK. It links `pico_multicore` for accessing multicore functionality and `pico_stdlib` for standard SDK functions, which are essential dependencies.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_runner_queue/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(multicore_runner_queue\n        pico_multicore\n        pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Check Pico SDK Version - CMake\nDESCRIPTION: Checks the version of the included Pico SDK. If the version is less than 2.1.0, a fatal error message is printed, stopping the build process because a newer SDK version is required.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (PICO_SDK_VERSION_STRING VERSION_LESS \"2.1.0\")\n    message(FATAL_ERROR \"Raspberry Pi Pico SDK version 2.1.0 (or later) required. Your version is ${PICO_SDK_VERSION_STRING}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Polling Libraries (CMake)\nDESCRIPTION: Links necessary libraries to the `picow_access_point_poll` executable target. This includes the Pico SDK's specific library for CYW43xx Wi-Fi in polling mode with LWIP (`pico_cyw43_arch_lwip_poll`) and the standard Pico SDK library (`pico_stdlib`). This library differs from the background version.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/access_point/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(picow_access_point_poll\n        pico_cyw43_arch_lwip_poll\n        pico_stdlib\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring BTstack Audio Example Library CMake\nDESCRIPTION: Conditionally defines an interface library 'pico_btstack_audio_example' if PICO_EXTRAS_PATH is defined. It adds BTstack audio source files and links the pico_audio_i2s library, required for audio output, making the audio functionality available to dependent targets.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT PICO_EXTRAS_PATH)\n        message(\"Skipping some Pico W BTstack examples that require pico-extras\")\nelse()\n        add_library(pico_btstack_audio_example INTERFACE)\n        target_sources(pico_btstack_audio_example INTERFACE\n                ${PICO_BTSTACK_PATH}/src/btstack_audio.c\n                ${CMAKE_CURRENT_LIST_DIR}/btstack_audio_pico.c\n                )\n        target_link_libraries(pico_btstack_audio_example INTERFACE\n                pico_audio_i2s\n                )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including SHA256 Examples in CMake\nDESCRIPTION: This CMake code block checks for the presence of both `pico_sha256` and `pico_mbedtls` targets. If both targets are available, it includes the `sha256` and `mbedtls_sha256` subdirectories, allowing their examples to be built. Otherwise, it prints a message indicating that the SHA256 examples are being skipped due to missing dependencies.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/sha/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET pico_sha256 AND TARGET pico_mbedtls)\n    add_subdirectory_exclude_platforms(sha256)\n    add_subdirectory_exclude_platforms(mbedtls_sha256)\nelse()\n    message(\"Skipping SHA256 examples as pico_sha256 or pico_mbedtls unavailable\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Pico HT16K33 Example Build (CMake)\nDESCRIPTION: This CMake snippet defines the build targets and dependencies for the HT16K33 I2C example on the Raspberry Pi Pico. It specifies the source file for the executable, links essential Pico libraries like pico_stdlib and hardware_i2c, generates standard build outputs (map, bin, hex), and automatically sets a program URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/ht16k33_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ht16k33_i2c\n        ht16k33_i2c.c\n        )\n\n# pull in common dependencies and additional i2c hardware support\ntarget_link_libraries(ht16k33_i2c pico_stdlib hardware_i2c)\n\n# create map/bin/hex file etc.\npico_add_extra_outputs(ht16k33_i2c)\n\n# add url via pico_set_program_url\nexample_auto_set_url(ht16k33_i2c)\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Header with CMake\nDESCRIPTION: This function, provided by the Pico SDK, processes the specified PIO program file (`manchester_encoding.pio`) and generates a corresponding C/C++ header file. This header contains the compiled PIO program data and helper functions, allowing the C code to easily integrate and control the PIO state machines defined in the `.pio` file. The generated header is associated with the `pio_manchester_encoding` target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/manchester_encoding/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npico_generate_pio_header(pio_manchester_encoding ${CMAKE_CURRENT_LIST_DIR}/manchester_encoding.pio)\n```\n\n----------------------------------------\n\nTITLE: Filtering and Adding BTstack Examples in CMake Loop\nDESCRIPTION: This loop iterates through the BTSTACK_EXAMPLES list, removes duplicates, and applies filtering logic. Examples are skipped if their source directory is not found, they require pico-extras but it's not available, or they are in the 'ADDITIONAL' list and BTSTACK_EXAMPLES_ALL is not set. Valid examples are added as subdirectories.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\n# Add examples\nset(BTSTACK_EXAMPLE_COUNT 0)\nlist(REMOVE_DUPLICATES BTSTACK_EXAMPLES)\nforeach(NAME ${BTSTACK_EXAMPLES})\n        # Ignore if sub folder not found\n        if (NOT IS_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/${NAME})\n                continue()\n        endif()\n        # Ignore example if it needs pico-extras and pico-extras could not be found\n        if (NOT PICO_EXTRAS_PATH AND ${NAME} IN_LIST BTSTACK_EXAMPLES_NEED_EXTRAS)\n                continue()\n        endif()\n        # Ignore less interesting examples if BTSTACK_EXAMPLES_ALL=1 is not set\n        if (NOT BTSTACK_EXAMPLES_ALL AND ${NAME} IN_LIST BTSTACK_EXAMPLES_ADDITIONAL)\n                continue()\n        endif()\n        # add example\n        add_subdirectory_exclude_platforms(${NAME})\n        MATH(EXPR BTSTACK_EXAMPLE_COUNT \"${BTSTACK_EXAMPLE_COUNT}+1\")\nendforeach()\nmessage(\"Adding ${BTSTACK_EXAMPLE_COUNT} BTstack examples of type '${BTSTACK_EXAMPLE_TYPE}'\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Picow BT Example No CYW43 LWIP Background CMake\nDESCRIPTION: Defines an interface library for examples without CYW43 LWIP, using a threadsafe background architecture. It adds the common background source file and links the base no-cyw43-lwip library and the pico_cyw43_arch_threadsafe_background library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(picow_bt_example_no_cyw43_lwip_background INTERFACE)\ntarget_sources(picow_bt_example_no_cyw43_lwip_background INTERFACE\n        ${BT_EXAMPLE_COMMON_DIR}/picow_bt_example_background.c\n        )\ntarget_link_libraries(picow_bt_example_no_cyw43_lwip_background INTERFACE\n        picow_bt_example_no_cyw43_lwip\n        pico_cyw43_arch_threadsafe_background\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Target (CMake)\nDESCRIPTION: Uses a Pico SDK function to set a URL property for the `pio_squarewave` executable, which can be useful for documentation or linking back to the example source.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nexample_auto_set_url(pio_squarewave)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Executable in CMake\nDESCRIPTION: Sets a program URL for the `mma8451_i2c` target using the `example_auto_set_url` macro provided by the Pico SDK. This typically embeds information about the example's source location or documentation into the build metadata.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mma8451_i2c/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(mma8451_i2c)\n```\n\n----------------------------------------\n\nTITLE: Setting Example URL (CMake)\nDESCRIPTION: Calls a helper function `example_auto_set_url` to associate a URL with the `adc_dma_capture` example. This function, specific to the examples framework, likely embeds the URL for documentation or retrieval purposes.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/dma_capture/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(adc_dma_capture)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL (CMake)\nDESCRIPTION: This command sets a URL property on the `joystick_display` target, often used in Pico SDK examples to link to the source code location or relevant documentation. The comment indicates it utilizes the underlying `pico_set_program_url` mechanism.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/joystick_display/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# add url via pico_set_program_url\nexample_auto_set_url(joystick_display)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Example (CMake)\nDESCRIPTION: This command sets a URL property for the 'lcd_uart' target. This function is likely a helper macro used within the Pico SDK examples to associate the built program with its online source or documentation URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/lcd_uart/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(lcd_uart)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL in CMake (Pico Example)\nDESCRIPTION: This command, used in Pico examples, automatically sets the PICO_PROGRAM_URL property for the 'mpu6050_i2c' target. This property often points to the source code location or documentation URL for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mpu6050_i2c/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(mpu6050_i2c)\n```\n\n----------------------------------------\n\nTITLE: Configure STDIO USB Timeout - CMake\nDESCRIPTION: Sets a timeout duration in milliseconds for waiting for a USB connection when STDIO is configured to use USB. This prevents the program from blocking indefinitely if no USB connection is established.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT DEFINED PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS)\n    set(PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS 3000)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including TinyUSB Host Examples Subdirectory (CMake)\nDESCRIPTION: Includes the CMakeLists.txt file found within the TinyUSB host examples directory into the current project's build. This makes the build targets and source files defined in that subdirectory available.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/host/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${PICO_TINYUSB_PATH}/examples/host tinyusb_host_examples)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include PWM Examples - CMake\nDESCRIPTION: This CMake snippet checks for the availability of the 'hardware_pwm' target. If available, it includes specific PWM example subdirectories ('hello_pwm', 'led_fade', 'measure_duty_cycle') while excluding them for incompatible platforms. If 'hardware_pwm' is not available, it prints a message indicating the skipping of these examples.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pwm/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_pwm)\n  add_subdirectory_exclude_platforms(hello_pwm)\n  add_subdirectory_exclude_platforms(led_fade)\n  add_subdirectory_exclude_platforms(measure_duty_cycle)\nelse()\n  message(\"Skipping PWM examples as hardware_pwm is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of ADC Examples - CMake\nDESCRIPTION: This CMake code block checks if the target platform supports hardware ADC functionality using the `TARGET hardware_adc` condition. If true, it includes several subdirectories containing specific ADC examples (adc_console, dma_capture, hello_adc, joystick_display, onboard_temperature, microphone_adc, read_vsys) using `add_subdirectory_exclude_platforms`. If the condition is false, it prints a message to the console indicating that the ADC examples are being skipped due to the lack of hardware ADC support.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_adc)\n  add_subdirectory_exclude_platforms(adc_console)\n  add_subdirectory_exclude_platforms(dma_capture)\n  add_subdirectory_exclude_platforms(hello_adc)\n  add_subdirectory_exclude_platforms(joystick_display)\n  add_subdirectory_exclude_platforms(onboard_temperature)\n  add_subdirectory_exclude_platforms(microphone_adc)\n  add_subdirectory_exclude_platforms(read_vsys)\nelse()\n  message(\"Skipping ADC examples as hardware_adc is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Bluetooth Example Target Name - CMake\nDESCRIPTION: Calls a custom CMake function `picow_bt_example_target_name` to generate and set the main build target name for the example. It appends `_with_wifi` to the project `NAME` and stores the resulting target name in the `TARGET_NAME` variable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/gatt_counter_with_wifi/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example_target_name(${NAME}_with_wifi TARGET_NAME)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory Excluding Host Platform - Blinky CMake\nDESCRIPTION: Uses the custom CMake function `add_subdirectory_exclude_platforms` to include the 'blinky' example project directory in the build system.\nThis command specifically excludes the 'blinky' project when building for the 'host' platform, which is typically used for native compilation rather than targeting the Pico board.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/picoboard/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(blinky host)\n```\n\n----------------------------------------\n\nTITLE: Linking Required Libraries - CMake\nDESCRIPTION: Links essential libraries from the Raspberry Pi Pico SDK to the `pio_st7789_lcd` executable target. This includes `pico_stdlib` for standard SDK functions, `hardware_pio` for PIO peripheral access, and `hardware_interp` for the interpolator hardware access.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/st7789_lcd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pio_st7789_lcd PRIVATE pico_stdlib hardware_pio hardware_interp)\n```\n\n----------------------------------------\n\nTITLE: Add hello_timer Subdirectory in CMake\nDESCRIPTION: Includes the 'hello_timer' example subdirectory into the CMake build system, specifically excluding it when the target platform is 'host'. This macro is part of the Pico SDK's utility functions for managing examples and libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/timer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(hello_timer host)\n```\n\n----------------------------------------\n\nTITLE: Add timer_lowlevel Subdirectory in CMake\nDESCRIPTION: Includes the 'timer_lowlevel' example subdirectory into the CMake build system, specifically excluding it when the target platform is 'host'. This macro is part of the Pico SDK's utility functions for managing examples and libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/timer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(timer_lowlevel host)\n```\n\n----------------------------------------\n\nTITLE: Define Project and Languages - CMake\nDESCRIPTION: Defines the main project name as 'pico_examples' and declares the programming languages used within the project, which are C, C++, and Assembly.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(pico_examples C CXX ASM)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory Ir Loopback Example CMake\nDESCRIPTION: Configures the CMake build process to include the 'ir_loopback' directory. This command typically adds a subdirectory containing an example program (in this case, an IR loopback example) to the build, potentially excluding it on specific platforms as defined elsewhere.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(ir_loopback)\n```\n\n----------------------------------------\n\nTITLE: Setting TinyUSB Project Name Prefix (CMake)\nDESCRIPTION: Assigns a prefix string to a variable `TINYUSB_FAMILY_PROJECT_NAME_PREFIX`. This variable is likely used later in the build process to construct names for targets related to TinyUSB host examples.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/host/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(TINYUSB_FAMILY_PROJECT_NAME_PREFIX \"tinyusb_host_\")\n```\n\n----------------------------------------\n\nTITLE: Exclude USB Subdirectory in CMake\nDESCRIPTION: Adds the 'usb' subdirectory to the build process, excluding it for platforms specified by the `add_subdirectory_exclude_platforms` function. This command manages the inclusion of USB-related examples or components based on platform constraints.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hello_world/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(usb)\n```\n\n----------------------------------------\n\nTITLE: Excluding Subdirectory for Specific Platforms CMake\nDESCRIPTION: This line uses a custom CMake function `add_subdirectory_exclude_platforms` to include the source directory 'hello_otp'. The directory is excluded from the build process if the target platform is identified as 'host' or 'rp2040'. This is useful for managing platform-specific examples or components.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/otp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(hello_otp host rp2040)\n```\n\n----------------------------------------\n\nTITLE: Configure Subdirectory Exclusion (CMake)\nDESCRIPTION: Uses the `add_subdirectory_exclude_platforms` CMake command to include a specified directory in the build, except when building for the listed platforms. Here, it excludes the 'blink_any' example when the target platform is 'host', preventing compilation of embedded-specific code on the development machine.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(blink_any host)\n```\n\n----------------------------------------\n\nTITLE: Excluding Subdirectory with CMake\nDESCRIPTION: Uses the `add_subdirectory_exclude_platforms` function to include a subdirectory (`hello_dcp`) in the project but exclude it from the build when targeting the `host`, `rp2040`, or `rp2350-riscv` platforms. This custom function is specific to the Pico SDK CMake environment for managing examples.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dcp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(hello_dcp host rp2040 rp2350-riscv)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries with CMake\nDESCRIPTION: This command links the necessary libraries to the `pio_manchester_encoding` executable target. It links against `pico_stdlib`, which provides core Pico SDK functionality, and `hardware_pio`, specifically required for interacting with the PIO hardware block. The `PRIVATE` keyword signifies that these libraries are internal dependencies of this target and are not needed by other targets linking to it.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/manchester_encoding/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pio_manchester_encoding PRIVATE pico_stdlib hardware_pio)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Pico Executable with CMake\nDESCRIPTION: This command links the necessary libraries (`pico_stdlib` for core SDK functions and `hardware_spi` for SPI peripheral support) to the `spi_flash` executable target. Linking ensures that required functions and symbols from the SDK and hardware libraries are available to the executable. Dependencies include the defined `spi_flash` target and the presence of the Pico SDK libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_flash/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# pull in common dependencies and additional spi hardware support\ntarget_link_libraries(spi_flash pico_stdlib hardware_spi)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to CMake Target\nDESCRIPTION: This command links the specified libraries to the `uart_advanced` executable target defined previously. It includes `pico_stdlib` for standard Pico SDK functions and `hardware_uart` to provide support for the UART peripheral. This ensures the compiled program has access to the necessary hardware and SDK functions.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/uart_advanced/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(uart_advanced pico_stdlib hardware_uart)\n```\n\n----------------------------------------\n\nTITLE: Defining BTstack Example Lists and Dependencies in CMake\nDESCRIPTION: This block includes example lists from the BTstack root, defines the main list of BTSTACK_EXAMPLES, conditionally adds WiFi-dependent examples if SSID/PASSWORD are set, and defines lists for additional or pico-extras dependent examples used for filtering.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${BTSTACK_ROOT}/example/CMakeLists.txt)\n\n# Full list of bluetooth examples\nset(BTSTACK_EXAMPLES\n        ${EXAMPLES_GENERAL}\n        ${EXAMPLES_CLASSIC_ONLY}\n        ${EXAMPLES_LE_ONLY}\n        ${EXAMPLES_DUAL_MODE}\n        pan_lwip_http_server\n)\n\n# These examples run wifi and bt at the same time\nif (WIFI_SSID AND WIFI_PASSWORD)\n        list(APPEND BTSTACK_EXAMPLES\n                gatt_counter_with_wifi\n                gatt_streamer_server_with_wifi\n                #spp_streamer_with_wifi\n        )\nendif()\n\n# Extra examples that are not that interesting or a bit tricky to run\n# They are not built unless BTSTACK_EXAMPLES_ALL=1\nset(BTSTACK_EXAMPLES_ADDITIONAL\n        ancs_client_demo\n        att_delayed_response\n        avrcp_browsing_client\n        dut_mode_classic\n        gap_dedicated_bonding\n        gap_link_keys\n        le_credit_based_flow_control_mode_client\n        le_credit_based_flow_control_mode_server\n        le_mitm\n        led_counter\n        sdp_bnep_query\n        sdp_general_query\n        spp_flowcontrol\n        sdp_rfcomm_query\n        spp_and_gatt_counter\n        spp_and_gatt_streamer\n        hfp_ag_demo\n        hsp_ag_demo\n        hfp_hf_demo\n        hsp_hs_demo\n        mod_player\n        sine_player\n        ublox_spp_le_counter\n        nordic_spp_le_streamer\n        nordic_spp_le_counter\n        hog_boot_host_demo\n        gatt_battery_query\n        gatt_browser\n        gatt_device_information_query\n        le_streamer_client\n)\n\n# These examples will only be built if pico-extras exists\nset(BTSTACK_EXAMPLES_NEED_EXTRAS\n        a2dp_sink_demo\n        hfp_hf_demo\n        hfp_ag_demo\n        hsp_ag_demo\n        hsp_hs_demo\n        mod_player\n        sine_player\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Pins for CMake Interface Library\nDESCRIPTION: Sets compile definitions for the 'hfp_hf_demo_pins' interface library. These definitions specify the GPIO pins used for the I2S audio data (PICO_AUDIO_I2S_DATA_PIN) and the base pin for the I2S clock signals (PICO_AUDIO_I2S_CLOCK_PIN_BASE) for the Bluetooth HFP/HF demo.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/hfp_hf_demo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(hfp_hf_demo_pins INTERFACE\n    PICO_AUDIO_I2S_DATA_PIN=9\n    PICO_AUDIO_I2S_CLOCK_PIN_BASE=10\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target: TLS Client Poll CMake\nDESCRIPTION: This snippet defines the build process for the `picow_tls_client_poll` executable. It is similar to the background version but links against `pico_cyw43_arch_lwip_poll`, indicating it uses a polling architecture for handling Wi-Fi events rather than a separate background thread. It includes the same source files, compile definitions (SSID/password), include directories, and links the necessary lwIP/mbedTLS and stdlib libraries. `pico_add_extra_outputs` is used for generating output formats.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/tls_client/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_tls_client_poll\n        picow_tls_client.c\n        tls_common.c\n        )\ntarget_compile_definitions(picow_tls_client_poll PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        )\ntarget_include_directories(picow_tls_client_poll PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts and mbedtls_config.h\n        )\ntarget_link_libraries(picow_tls_client_poll\n        pico_cyw43_arch_lwip_poll\n        pico_lwip_mbedtls\n        pico_mbedtls\n        pico_stdlib\n        )\npico_add_extra_outputs(picow_tls_client_poll)\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeRTOS Example Target hello_freertos2 CMake\nDESCRIPTION: Configures the CMake target `hello_freertos2` for a FreeRTOS example, using the same `hello_freertos.c` source file. It links the Pico SDK standard library, FreeRTOS Kernel Heap4, and the FreeRTOS async context implementation. Optional wireless support (`pico_cyw43_arch_none`) is included if `PICO_CYW43_SUPPORTED` is defined. This configuration differs from `hello_freertos1` by omitting the explicit `configNUMBER_OF_CORES` compile definition.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/freertos/hello_freertos/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(TARGET_NAME hello_freertos2)\nadd_executable(${TARGET_NAME}\n    hello_freertos.c\n    )\ntarget_include_directories(${TARGET_NAME} PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}/..\n    )\ntarget_link_libraries(${TARGET_NAME} PRIVATE\n    pico_async_context_freertos\n    FreeRTOS-Kernel-Heap4\n    pico_stdlib\n    )\nif(PICO_CYW43_SUPPORTED)\n    # For led support on pico_w\n    target_link_libraries(${TARGET_NAME} PRIVATE\n        pico_cyw43_arch_none\n    )\nendif()\npico_add_extra_outputs(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Disabling USB StdIO for Pico Executable using CMake\nDESCRIPTION: Disables standard input/output (stdio) communication over the USB interface for the \"onboard_temperature\" target. The argument `0` indicates that USB stdio should be disabled, often done when UART is preferred for debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/onboard_temperature/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_enable_stdio_usb(onboard_temperature 0)\n```\n\n----------------------------------------\n\nTITLE: Configure MQTT Connection Variables CMake\nDESCRIPTION: This snippet configures CMake variables required for the MQTT client example, including the server address, username, password, and certificate paths. It prioritizes values set in environment variables or CMake arguments, falling back to defaults or showing messages if missing. If the MQTT_SERVER is not defined, the script returns.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/mqtt/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the host name of the MQTT server in an environment variable or pass it to cmake,\n# e.g. cmake -DMQTT_SERVER=myserver ..\n\nif (DEFINED ENV{MQTT_SERVER} AND (NOT MQTT_SERVER))\n    set(MQTT_SERVER $ENV{MQTT_SERVER})\n    message(\"Using MQTT_SERVER from environment ('${MQTT_SERVER}')\")\nendif()\nif (NOT MQTT_SERVER)\n    message(\"Skipping MQTT example as MQTT_SERVER is not defined\")\n    return()\nendif()\n# Define the name of an MQTT broker/server to enable this example\nset(MQTT_SERVER \"${MQTT_SERVER}\" CACHE INTERNAL \"MQTT server for examples\")\n\nif (DEFINED ENV{MQTT_USERNAME} AND (NOT MQTT_USERNAME))\n    set(MQTT_USERNAME $ENV{MQTT_USERNAME})\n    message(\"Using MQTT_USERNAME from environment ('${MQTT_USERNAME}')\")\nendif()\nset(MQTT_USERNAME \"${MQTT_USERNAME}\" CACHE INTERNAL \"MQTT user name for examples\")\nif (DEFINED ENV{MQTT_PASSWORD} AND (NOT MQTT_PASSWORD))\n    set(MQTT_PASSWORD $ENV{MQTT_PASSWORD})\n    message(\"Using MQTT_PASSWORD from environment\")\nendif()\nset(MQTT_PASSWORD \"${MQTT_PASSWORD}\" CACHE INTERNAL \"MQTT password for examples\")\n\n# Set path to the certificate include file\nif (NOT MQTT_CERT_PATH)\n    set(MQTT_CERT_PATH ${CMAKE_CURRENT_LIST_DIR}/certs/${MQTT_SERVER})\nendif()\n\n# Set the name of the certificate include file\nif (NOT MQTT_CERT_INC)\n    set(MQTT_CERT_INC mqtt_client.inc)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory Excluding Platforms (narrow_io_write) - CMake\nDESCRIPTION: Adds the 'narrow_io_write' subdirectory to the build process, unless the target platform is 'host'. This command prevents hardware-specific examples from being built in a non-hardware context.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(narrow_io_write host)\n```\n\n----------------------------------------\n\nTITLE: Adding spi_master Subdirectory Conditionally (CMake)\nDESCRIPTION: Includes the 'spi_master' example subdirectory in the project build using the custom CMake command `add_subdirectory_exclude_platforms`. This command prevents the subdirectory from being added on platforms specified for exclusion by the command's implementation or associated configuration files.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_master_slave/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(spi_master)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory Excluding Platforms (rand) - CMake\nDESCRIPTION: Adds the 'rand' subdirectory to the build, excluding it specifically for the 'host' platform. This suggests the random number example might depend on hardware entropy sources or libraries not available on the host.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(rand host)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including FreeRTOS Examples in CMake\nDESCRIPTION: This CMake snippet checks if the FREERTOS_KERNEL_PATH is defined (either as a CMake variable or environment variable). If not defined, it skips adding the Pico W FreeRTOS examples and prints a message. If defined, it includes the FreeRTOS_Kernel_import.cmake file and adds several example subdirectories (httpd, iperf, ntp_client_socket, ping, http_client) using add_subdirectory_exclude_platforms.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT FREERTOS_KERNEL_PATH AND NOT DEFINED ENV{FREERTOS_KERNEL_PATH})\n  message(\"Skipping Pico W FreeRTOS examples as FREERTOS_KERNEL_PATH not defined\")\nelse()\n  include(FreeRTOS_Kernel_import.cmake)\n\n  add_subdirectory_exclude_platforms(httpd)\n  add_subdirectory_exclude_platforms(iperf)\n  add_subdirectory_exclude_platforms(ntp_client_socket)\n  add_subdirectory_exclude_platforms(ping)\n  add_subdirectory_exclude_platforms(http_client)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Interface Library for DHCP Server\nDESCRIPTION: This snippet defines a CMake interface library named `pan_lwip_dhserver`. It specifies the source files (`dhserver.c`) and include directories required for the lwIP DHCP server component, making them available to targets that link against this interface library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/pan_lwip_http_server/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(pan_lwip_dhserver INTERFACE)\ntarget_sources(pan_lwip_dhserver INTERFACE\n    ${BTSTACK_3RD_PARTY_PATH}/lwip/dhcp-server/dhserver.c\n)\ntarget_include_directories(pan_lwip_dhserver INTERFACE\n    ${BTSTACK_3RD_PARTY_PATH}/lwip/dhcp-server\n)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Interface Library for Pins (CMake)\nDESCRIPTION: Defines an INTERFACE library named 'a2dp_sink_demo_pins'. INTERFACE libraries in CMake do not produce a build artifact but are used to propagate properties like include directories or compile definitions to other targets that link against them.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/a2dp_sink_demo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(a2dp_sink_demo_pins INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pico W Bluetooth HTTP Server Modes (CMake)\nDESCRIPTION: These lines invoke custom CMake functions (`picow_bt_example_poll`, `picow_bt_example_background`, `picow_bt_example_freertos`) to configure the `pan_lwip_http_server` example for different execution models. They link the example target (`${TARGET_NAME}`) against necessary components like a specific poll/background/FreeRTOS implementation, the DHCP server library, lwIP HTTP, and Bluetooth Classic.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/pan_lwip_http_server/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example_poll(pan_lwip_http_server ${TARGET_NAME} picow_bt_example_btstack_lwip_poll pan_lwip_dhserver pico_lwip_http pico_btstack_classic)\npicow_bt_example_background(pan_lwip_http_server ${TARGET_NAME} picow_bt_example_btstack_lwip_background pan_lwip_dhserver pico_lwip_http pico_btstack_classic)\npicow_bt_example_freertos(pan_lwip_http_server ${TARGET_NAME} picow_bt_example_btstack_lwip_freertos pan_lwip_dhserver pico_lwip_http pico_btstack_classic)\n```\n\n----------------------------------------\n\nTITLE: Defining iperf Server Executable (Sys) - CMake\nDESCRIPTION: Defines the CMake build target `picow_freertos_iperf_server_sys` for an iperf server on Pico W using FreeRTOS and a sys-enabled lwIP configuration. It specifies the source file, sets compile definitions for WiFi credentials and `NO_SYS=0`, includes necessary directories, and links required libraries like `pico_cyw43_arch_lwip_sys_freertos` and `FreeRTOS-Kernel-Heap4`. Finally, it adds extra build outputs.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/iperf/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_freertos_iperf_server_sys\n        picow_freertos_iperf.c\n        )\ntarget_compile_definitions(picow_freertos_iperf_server_sys PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        NO_SYS=0            # don't want NO_SYS (generally this would be in your lwipopts.h)\n        )\ntarget_include_directories(picow_freertos_iperf_server_sys PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common FreeRTOSConfig\n        ${CMAKE_CURRENT_LIST_DIR}/../.. # for our common lwipopts\n        )\ntarget_link_libraries(picow_freertos_iperf_server_sys\n        pico_cyw43_arch_lwip_sys_freertos\n        pico_stdlib\n        pico_lwip_iperf\n        FreeRTOS-Kernel-Heap4 # FreeRTOS kernel and dynamic heap\n        )\npico_add_extra_outputs(picow_freertos_iperf_server_sys)\n```\n\n----------------------------------------\n\nTITLE: Defining iperf Server Executable (No Sys) - CMake\nDESCRIPTION: Defines the CMake build target `picow_freertos_iperf_server_nosys` for an iperf server on Pico W using FreeRTOS and a background thread-safe lwIP configuration. It specifies the source file, sets compile definitions for WiFi credentials, includes necessary directories, and links required libraries like `pico_cyw43_arch_lwip_threadsafe_background` and `FreeRTOS-Kernel-Heap4`. Finally, it adds extra build outputs.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/iperf/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_freertos_iperf_server_nosys\n        picow_freertos_iperf.c\n        )\ntarget_compile_definitions(picow_freertos_iperf_server_nosys PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        )\ntarget_include_directories(picow_freertos_iperf_server_nosys PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common FreeRTOSConfig\n        ${CMAKE_CURRENT_LIST_DIR}/../.. # for our common lwipopts\n        )\ntarget_link_libraries(picow_freertos_iperf_server_nosys\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_stdlib\n        pico_lwip_iperf\n        FreeRTOS-Kernel-Heap4 # FreeRTOS kernel and dynamic heap\n        )\npico_add_extra_outputs(picow_freertos_iperf_server_nosys)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for pico_freertos_httpd_sys\nDESCRIPTION: Links the necessary libraries to the `pico_freertos_httpd_sys` executable target. It includes libraries for Pico SDK's CYW43 Wi-Fi driver with lwIP 'sys' architecture and FreeRTOS integration, lwIP HTTP and MDNS apps, Pico standard library, FreeRTOS kernel (Heap4), and the locally defined HTTP content library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pico_freertos_httpd_sys\n        pico_cyw43_arch_lwip_sys_freertos\n        pico_lwip_http\n        pico_lwip_mdns\n        pico_stdlib\n        FreeRTOS-Kernel-Heap4 # FreeRTOS kernel and dynamic heap\n        pico_freertos_httpd_content\n        )\n```\n\n----------------------------------------\n\nTITLE: Skipping USB Example Build Message in CMake\nDESCRIPTION: This CMake block is executed if the `TARGET tinyusb_device` condition is false but `PICO_ON_DEVICE` is true. It outputs a message indicating that the 'hello_usb' example is being skipped because the TinyUSB submodule was not found or initialized within the SDK.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hello_world/usb/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(PICO_ON_DEVICE)\n    message(\"Skipping hello_usb because TinyUSB submodule is not initialized in the SDK\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files with CMake\nDESCRIPTION: This command specifies the C/C++ source files that should be compiled and linked into the `pio_manchester_encoding` executable target. The `PRIVATE` keyword indicates that `manchester_encoding.c` is a source file needed only for building this specific target, and its inclusion is not propagated to other targets that might link against this one. This tells CMake which application code files are part of the project.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/manchester_encoding/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(pio_manchester_encoding PRIVATE manchester_encoding.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Background iPerf Server CMake Target (CMake)\nDESCRIPTION: This snippet defines the CMake target for the background threadsafe iPerf server executable. It specifies the source file (picow_iperf.c), sets private compile definitions for WIFI SSID and password (required for connection), includes necessary directories for common LWIP options and the example itself, and links the required libraries including the background threadsafe CYW43/LWIP architecture, standard Pico SDK libraries, and the iPerf-specific library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/iperf/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_iperf_server_background\n        picow_iperf.c\n        )\ntarget_compile_definitions(picow_iperf_server_background PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        )\ntarget_include_directories(picow_iperf_server_background PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        )\ntarget_link_libraries(picow_iperf_server_background\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_stdlib\n        pico_lwip_iperf\n        )\npico_add_extra_outputs(picow_iperf_server_background)\n```\n\n----------------------------------------\n\nTITLE: Setting Printf Implementation for Pico using CMake\nDESCRIPTION: This snippet configures the `printf` implementation used by the `hello_dcp` project. Setting it to 'compiler' typically selects the compiler's built-in `printf` function, which may be necessary for specific features like high-precision floating-point output.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dcp/hello_dcp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_set_printf_implementation(hello_dcp compiler)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Interface Library for Pins\nDESCRIPTION: Creates an interface library in CMake, typically used to group properties like include directories or compile definitions without creating an actual build target (like a static or shared library). This specific library is intended to hold pin configurations for the HFP/HF demo.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/hfp_hf_demo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(hfp_hf_demo_pins INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pico W BT Example Background Target (CMake)\nDESCRIPTION: Configures a build target using the custom CMake function 'picow_bt_example_background'. This target is configured for an operation model suitable for background tasks or interrupt handling. It integrates components for Wi-Fi/lwIP background processing ('picow_bt_example_cyw43_lwip_background') and the classic Bluetooth stack ('pico_btstack_classic').\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/spp_streamer_with_wifi/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example_background(${NAME} ${TARGET_NAME} picow_bt_example_cyw43_lwip_background pico_btstack_classic)\n```\n\n----------------------------------------\n\nTITLE: Generating secp256k1 Signing Key (bash)\nDESCRIPTION: Generates a new Elliptic Curve (EC) private key using the `secp256k1` curve and saves it to `private.pem` in PEM format. This key is required for signing encrypted bootloaders or applications for the Raspberry Pi Pico secure boot process. Requires OpenSSL installed.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl ecparam -name secp256k1 -genkey -out private.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring periodic_sampler Executable Build (CMake)\nDESCRIPTION: This CMake block defines and configures the 'periodic_sampler' executable target. It's conditionally included if PICO_TIME_NO_ALARM_SUPPORT is NOT defined. It specifies the source file (periodic_sampler.c), links against the 'pico_stdlib' library for core SDK functionality, adds extra build outputs like .map, .bin, and .hex files, and sets a program URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/timer/periodic_sampler/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT PICO_TIME_NO_ALARM_SUPPORT)\n  add_executable(periodic_sampler\n          periodic_sampler.c\n          )\n\n  # pull in common dependencies\n  target_link_libraries(periodic_sampler pico_stdlib)\n\n  # create map/bin/hex file etc.\n  pico_add_extra_outputs(periodic_sampler)\n\n  # add url via pico_set_program_url\n  example_auto_set_url(periodic_sampler)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Output Directory (CMake)\nDESCRIPTION: Uses the `file(MAKE_DIRECTORY ...)` command to create a directory named `generated` within the current CMake source directory, intended for storing generated build artifacts.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfile(MAKE_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/generated)\n```\n\n----------------------------------------\n\nTITLE: Processing Application Binary (Sign, Hash, Encrypt) (CMake)\nDESCRIPTION: Applies post-processing steps to the application binary. `pico_sign_binary` signs it using a private key, `pico_hash_binary` computes a hash, and `pico_encrypt_binary` encrypts the binary using a specified AES key file (`privateaes.bin`), preparing it for loading and decryption by the bootloader.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n# sign, hash, and encrypt\npico_sign_binary(hello_serial_enc ${CMAKE_CURRENT_LIST_DIR}/private.pem)\npico_hash_binary(hello_serial_enc)\npico_encrypt_binary(hello_serial_enc ${CMAKE_CURRENT_LIST_DIR}/privateaes.bin)\n```\n\n----------------------------------------\n\nTITLE: Report Skipped SPI Examples (CMake)\nDESCRIPTION: This block is executed when the 'hardware_spi' target is not available on the current platform. It prints a message to the build console indicating that the SPI examples are being skipped due to the lack of hardware SPI support.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n  message(\"Skipping SPI examples as hardware_spi is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to INTERFACE Library - CMake\nDESCRIPTION: Adds 'pico_stdlib' as a link dependency to the 'common_stuff' INTERFACE library with INTERFACE scope. This means any target linking 'common_stuff' will also automatically have 'pico_stdlib' added as a link dependency.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/cmake/build_variants/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(common_stuff INTERFACE\n        pico_stdlib\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target: TLS Certificate Verification Background CMake\nDESCRIPTION: This snippet defines the build process for the `picow_tls_verify_background` executable, which specifically implements TLS connection verification using a certificate. It uses `tls_verify.c` as the main source file alongside `tls_common.c`. Crucially, it defines `ALTCP_MBEDTLS_AUTHMODE` as `MBEDTLS_SSL_VERIFY_REQUIRED` to enforce certificate validation, unlike the standard client examples where verification is optional by default. It links the same background architecture and mbedTLS/lwIP libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/tls_client/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# This version verifies the tls connection with a certificate\nadd_executable(picow_tls_verify_background\n        tls_verify.c\n        tls_common.c\n        )\ntarget_compile_definitions(picow_tls_verify_background PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        # By default verification is optional (MBEDTLS_SSL_VERIFY_OPTIONAL)\n        # Make it required for this test\n        ALTCP_MBEDTLS_AUTHMODE=MBEDTLS_SSL_VERIFY_REQUIRED\n        )\ntarget_include_directories(picow_tls_verify_background PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts and mbedtls_config.h\n        )\ntarget_link_libraries(picow_tls_verify_background\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_lwip_mbedtls\n        pico_mbedtls\n        pico_stdlib\n        )\npico_add_extra_outputs(picow_tls_verify_background)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target (CMake)\nDESCRIPTION: Specifies the source files (e.g., `squarewave.c`) that are required to build the `pio_squarewave` executable target. The `PRIVATE` keyword indicates these sources are only for this specific target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(pio_squarewave PRIVATE squarewave.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files - CMake\nDESCRIPTION: Adds the `hub75.c` source file to the `pio_hub75` target. All source files listed for a target will be compiled and linked together to produce the final executable. This requires the `pio_hub75` target to be previously defined.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hub75/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(pio_hub75 PRIVATE hub75.c)\n```\n\n----------------------------------------\n\nTITLE: Including ExternalProject Module (CMake)\nDESCRIPTION: This line includes CMake's built-in `ExternalProject` module. This module is essential for downloading, configuring, building, and installing external projects, which is utilized here to build separate versions of the target application for different Pico platforms (RP2040, RP2350 ARM, RP2350 RISC-V).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(ExternalProject)\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Picow BT Example Library CMake\nDESCRIPTION: Sets up the core 'picow_bt_example_common' interface library for all Pico W BTstack examples. It includes common source files, links essential libraries like pico_stdlib and pico_btstack_cyw43, sets include directories for configuration, and defines compile definitions like STDIO timeout. It conditionally links the audio example library and defines TEST_AUDIO if the audio library exists.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(picow_bt_example_common INTERFACE)\ntarget_sources(picow_bt_example_common INTERFACE\n        ${CMAKE_CURRENT_LIST_DIR}/picow_bt_example_common.c\n        )\ntarget_link_libraries(picow_bt_example_common INTERFACE\n        pico_stdlib\n        pico_btstack_cyw43\n        )\ntarget_include_directories(picow_bt_example_common INTERFACE\n        ${BT_EXAMPLE_COMMON_DIR}/config # Use our own config\n        ${BTSTACK_EXAMPLE_PATH}/\n        )\ntarget_compile_definitions(picow_bt_example_common INTERFACE\n        PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS=3000\n        #WANT_HCI_DUMP=1 # This enables btstack debug\n        #ENABLE_SEGGER_RTT=1\n        )\nif (TARGET pico_btstack_audio_example)\n        target_link_libraries(picow_bt_example_common INTERFACE\n                pico_btstack_audio_example\n                )\n        target_compile_definitions(picow_bt_example_common INTERFACE\n                TEST_AUDIO=1\n                )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeRTOS Integration for Picow BT Examples CMake\nDESCRIPTION: Conditionally includes the FreeRTOS Kernel import script if the FreeRTOS path is defined. If the FreeRTOS-Kernel target exists, it defines a common FreeRTOS interface library, adds a common FreeRTOS source, links the FreeRTOS kernel and heap library, sets compile definitions for task stack size and NO_SYS, and adds necessary FreeRTOS include directories.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif (FREERTOS_KERNEL_PATH OR DEFINED ENV{FREERTOS_KERNEL_PATH})\ninclude(FreeRTOS_Kernel_import.cmake)\nendif()\n\nif (TARGET FreeRTOS-Kernel)\n        # common freertos stuff\n        add_library(picow_bt_example_common_freertos INTERFACE)\n        target_sources(picow_bt_example_common_freertos INTERFACE\n                ${BT_EXAMPLE_COMMON_DIR}/picow_bt_example_freertos.c\n                )\n        target_link_libraries(picow_bt_example_common_freertos INTERFACE\n                picow_bt_example_common\n                FreeRTOS-Kernel-Heap4 # FreeRTOS kernel and dynamic heap\n                )\n        target_compile_definitions(picow_bt_example_common_freertos INTERFACE\n                CYW43_TASK_STACK_SIZE=1024\n                NO_SYS=0\n                )\n        target_include_directories(picow_bt_example_common_freertos INTERFACE\n                ${FREERTOS_KERNEL_PATH}/include\n                ${FREERTOS_KERNEL_PATH}/portable/ThirdParty/GCC/RP2040/include\n                )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread-Safe Background Ping Executable - CMake\nDESCRIPTION: Configures the build for the `picow_freertos_ping_nosys` executable, using the thread-safe background lwIP/CYW43 architecture. It defines required WiFi credentials for compilation, sets necessary include directories, and links core Pico W libraries including the thread-safe background network stack and FreeRTOS heap.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/ping/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_freertos_ping_nosys\n        picow_freertos_ping.c\n        ${PICO_LWIP_CONTRIB_PATH}/apps/ping/ping.c\n        )\ntarget_compile_definitions(picow_freertos_ping_nosys PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        )\ntarget_include_directories(picow_freertos_ping_nosys PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common FreeRTOSConfig\n        ${CMAKE_CURRENT_LIST_DIR}/../.. # for our common lwipopts\n        ${PICO_LWIP_CONTRIB_PATH}/apps/ping\n        )\ntarget_link_libraries(picow_freertos_ping_nosys\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_stdlib\n        pico_lwip_iperf\n        FreeRTOS-Kernel-Heap4 # FreeRTOS kernel and dynamic heap\n        )\npico_add_extra_outputs(picow_freertos_ping_nosys)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for dev_multi_cdc\nDESCRIPTION: This CMake script defines and configures the build process for the 'dev_multi_cdc' executable. It specifies the source files (main.c, usb_descriptors.c), ensures the TinyUSB configuration header is included, links against the necessary Pico SDK and TinyUSB libraries, enables standard I/O over USB, and adds extra output targets.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/device/dev_multi_cdc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\nadd_executable(dev_multi_cdc)\n\ntarget_sources(dev_multi_cdc PUBLIC\n        ${CMAKE_CURRENT_LIST_DIR}/main.c\n        ${CMAKE_CURRENT_LIST_DIR}/usb_descriptors.c\n        )\n\n# Make sure TinyUSB can find tusb_config.h\ntarget_include_directories(dev_multi_cdc PUBLIC\n        ${CMAKE_CURRENT_LIST_DIR})\n\n# In addition to pico_stdlib required for common PicoSDK functionality, add dependency on tinyusb_device\n# for TinyUSB device support and tinyusb_board for the additional board support library used by the example\ntarget_link_libraries(dev_multi_cdc PUBLIC pico_stdlib pico_unique_id tinyusb_device tinyusb_board)\n\npico_enable_stdio_usb(dev_multi_cdc 1)\npico_add_extra_outputs(dev_multi_cdc)\n\n# add url via pico_set_program_url\nexample_auto_set_url(dev_multi_cdc)\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeRTOS Example Target hello_freertos1 CMake\nDESCRIPTION: Configures the CMake target `hello_freertos1` for a FreeRTOS example. It compiles `hello_freertos.c`, links against the Pico SDK standard library, FreeRTOS Kernel Heap4, and a Pico async context implementation for FreeRTOS. It also conditionally links wireless support (`pico_cyw43_arch_none`) if `PICO_CYW43_SUPPORTED` is defined and explicitly sets the compile definition `configNUMBER_OF_CORES` to 1.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/freertos/hello_freertos/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TARGET_NAME hello_freertos1)\nadd_executable(${TARGET_NAME}\n    hello_freertos.c\n    )\ntarget_include_directories(${TARGET_NAME} PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}/..\n    )\ntarget_link_libraries(${TARGET_NAME} PRIVATE\n    pico_async_context_freertos\n    FreeRTOS-Kernel-Heap4\n    pico_stdlib\n    )\nif(PICO_CYW43_SUPPORTED)\n    # For led support on pico_w\n    target_link_libraries(${TARGET_NAME} PRIVATE\n        pico_cyw43_arch_none\n    )\nendif()\ntarget_compile_definitions(${TARGET_NAME} PRIVATE\n    configNUMBER_OF_CORES=1\n    )\npico_add_extra_outputs(${TARGET_NAME})\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI Slave Example Build - CMake\nDESCRIPTION: This snippet defines the executable `spi_slave` from the source file `spi_slave.c`. It then links the necessary libraries (`pico_stdlib` for standard Pico SDK functions and `hardware_spi` for SPI peripheral access) required by the project. Finally, it adds standard build outputs (like `.uf2`, `.hex`, `.bin`) using `pico_add_extra_outputs` and sets the program URL using `example_auto_set_url`, typically used in examples.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_master_slave/spi_slave/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(spi_slave\n        spi_slave.c\n        )\n\n# Pull in basic dependencies\ntarget_link_libraries(spi_slave pico_stdlib hardware_spi)\n\n# create map/bin/hex file etc.\npico_add_extra_outputs(spi_slave)\n\n# add url via pico_set_program_url\nexample_auto_set_url(spi_slave)\n```\n\n----------------------------------------\n\nTITLE: Define Executable for Poll-Based Wi-Fi Scan (CMake)\nDESCRIPTION: This CMake block defines the 'picow_wifi_scan_poll' executable target. Similar to the background version, it uses the same source file and includes directories. However, it links against the poll-based version of the CYW43 Wi-Fi driver instead of the threadsafe one, while also linking the Pico SDK standard library. Finally, it adds standard extra build outputs for this target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/wifi_scan/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_wifi_scan_poll\n        picow_wifi_scan.c\n        )\ntarget_include_directories(picow_wifi_scan_poll PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        )\ntarget_link_libraries(picow_wifi_scan_poll\n        pico_cyw43_arch_lwip_poll\n        pico_stdlib\n        )\npico_add_extra_outputs(picow_wifi_scan_poll)\n```\n\n----------------------------------------\n\nTITLE: Configuring USB Host Example Build - CMake\nDESCRIPTION: This CMake script sets up the build process for the `host_cdc_msc_hid` executable, including adding source files, defining include directories, and linking required libraries such as `pico_stdlib`, `tinyusb_host`, and `tinyusb_board` for Pico and TinyUSB functionality.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/host/host_cdc_msc_hid/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\nadd_executable(host_cdc_msc_hid)\n\n# Example source\ntarget_sources(host_cdc_msc_hid PUBLIC\n        ${CMAKE_CURRENT_LIST_DIR}/hid_app.c\n        ${CMAKE_CURRENT_LIST_DIR}/main.c\n        ${CMAKE_CURRENT_LIST_DIR}/msc_app.c\n        ${CMAKE_CURRENT_LIST_DIR}/cdc_app.c\n        )\n\n# Make sure TinyUSB can find tusb_config.h\ntarget_include_directories(host_cdc_msc_hid PUBLIC\n        ${CMAKE_CURRENT_LIST_DIR})\n\n# In addition to pico_stdlib required for common PicoSDK functionality, add dependency on tinyusb_host\n# for TinyUSB device support and tinyusb_board for the additional board support library used by the example\ntarget_link_libraries(host_cdc_msc_hid PUBLIC pico_stdlib tinyusb_host tinyusb_board)\n\npico_add_extra_outputs(host_cdc_msc_hid)\n\n# add url via pico_set_program_url\nexample_auto_set_url(host_cdc_msc_hid)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardware Divider Example Build - CMake\nDESCRIPTION: This CMake snippet conditionally defines the build target 'hello_divider' if the 'hardware_divider' target feature is available. It adds the source file 'hello_divider.c', links it against the 'pico_stdlib' library, adds standard build outputs like .map, .bin, and .hex files, and sets a program URL. If the 'hardware_divider' feature is not present, it prints a message indicating the example is skipped.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/divider/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_divider)\n        add_executable(hello_divider\n                hello_divider.c\n                )\n\n        # pull in common dependencies\n        target_link_libraries(hello_divider pico_stdlib)\n\n        # create map/bin/hex file etc.\n        pico_add_extra_outputs(hello_divider)\n\n        # add url via pico_set_program_url\n        example_auto_set_url(hello_divider)\nelse()\n        message(\"Skipping divider examples as hardware_divider is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configure Pico Build Outputs CMake\nDESCRIPTION: This Pico SDK specific command configures the build system to generate additional output formats for the executable, such as the `.uf2` file suitable for flashing onto the Pico device. It simplifies the process of getting the built program onto the hardware.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/differential_manchester/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pio_differential_manchester)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Outputs to Target CMake\nDESCRIPTION: Instructs the build system to generate additional output formats (like the .uf2 file required for flashing the Pico) for the `hello_pio` target. This uses a Pico SDK specific function.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hello_pio/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_pio)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions - CMake\nDESCRIPTION: Defines preprocessor macros that will be available during the compilation of source files for the `pio_hub75` target. Specifically, it sets the default UART TX and RX pins to 28 and 29 respectively, which are used by the Pico SDK's default UART initialization. This configuration affects how SDK functions behave.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hub75/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(pio_hub75 PRIVATE\n\tPICO_DEFAULT_UART_TX_PIN=28\n\tPICO_DEFAULT_UART_RX_PIN=29\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Picow BT Example without CYW43 LWIP CMake\nDESCRIPTION: Defines an interface library 'picow_bt_example_no_cyw43_lwip' which serves as a base for examples that do not use the CYW43's integrated LWIP stack. It links the common example library and sets a compile definition to disable CYW43 LWIP.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(picow_bt_example_no_cyw43_lwip INTERFACE)\ntarget_link_libraries(picow_bt_example_no_cyw43_lwip INTERFACE\n        picow_bt_example_common\n        )\ntarget_compile_definitions(picow_bt_example_no_cyw43_lwip INTERFACE\n        CYW43_LWIP=0\n        )\n```\n\n----------------------------------------\n\nTITLE: Generating Pico Output Files (CMake)\nDESCRIPTION: This custom Pico SDK CMake command adds build steps to generate various output file formats for the `hello_serial` executable, including memory map (`.map`), binary (`.bin`), Intel HEX (`.hex`), and USB Flashing Format (`.uf2`). These formats are crucial for debugging, flashing, and deploying the application onto the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hello_world/serial/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_serial)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Target for PIO/DMA UART Example\nDESCRIPTION: This CMake code defines the executable target 'uart_pio_dma' for the Raspberry Pi Pico project. It specifies the main source file, links essential libraries (`pico_stdlib`, `hardware_pio`, `hardware_dma`), generates C/C++ headers from the provided PIO assembly files using `pico_generate_pio_header`, and prepares the final build outputs.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/uart_pio_dma/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(uart_pio_dma)\npico_generate_pio_header(uart_pio_dma ${CMAKE_CURRENT_LIST_DIR}/../uart_rx/uart_rx.pio)\npico_generate_pio_header(uart_pio_dma ${CMAKE_CURRENT_LIST_DIR}/../uart_tx/uart_tx.pio)\ntarget_sources(uart_pio_dma PRIVATE uart_pio_dma.c)\ntarget_link_libraries(uart_pio_dma PRIVATE\n        pico_stdlib\n        hardware_pio\n        hardware_dma\n        )\npico_add_extra_outputs(uart_pio_dma)\nexample_auto_set_url(uart_pio_dma)\n```\n\n----------------------------------------\n\nTITLE: Configuring Picow BT Example BTstack LWIP FreeRTOS CMake\nDESCRIPTION: Defines an interface library for examples using BTstack's LWIP integration and running under FreeRTOS. It links the common FreeRTOS base, the no-cyw43-lwip base, sys FreeRTOS, BTstack BNEP LWIP sys FreeRTOS, and pico_lwip_freertos libraries. It also includes common LWIP options and defines HAVE_LWIP.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET FreeRTOS-Kernel)\n        # variant: btstack lwip | freertos\n        add_library(picow_bt_example_btstack_lwip_freertos INTERFACE)\n        target_link_libraries(picow_bt_example_btstack_lwip_freertos INTERFACE\n                picow_bt_example_common_freertos\n                picow_bt_example_no_cyw43_lwip\n                pico_cyw43_arch_sys_freertos\n                pico_btstack_bnep_lwip_sys_freertos\n                pico_lwip_freertos\n                )\n        target_include_directories(picow_bt_example_btstack_lwip_freertos INTERFACE\n                ${CMAKE_CURRENT_LIST_DIR}/../wifi # for our common lwipopts\n                )\n        target_compile_definitions(picow_bt_example_btstack_lwip_freertos INTERFACE\n                HAVE_LWIP=1 # stops btstack calling lwip_init\n                )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Pico PIO Project Executable in CMake\nDESCRIPTION: This CMake snippet defines an executable named 'pio_apa102', generates a C header file from the associated 'apa102.pio' PIO program, includes the primary C source file 'apa102.c', links essential Pico SDK libraries (pico_stdlib and hardware_pio) required for standard functions and PIO hardware access, and configures additional build outputs and a program URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/apa102/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_apa102)\n\npico_generate_pio_header(pio_apa102 ${CMAKE_CURRENT_LIST_DIR}/apa102.pio)\n\ntarget_sources(pio_apa102 PRIVATE apa102.c)\n\ntarget_link_libraries(pio_apa102 PRIVATE\n        pico_stdlib\n        hardware_pio\n        )\n\npico_add_extra_outputs(pio_apa102)\n\n# add url via pico_set_program_url\nexample_auto_set_url(pio_apa102)\n```\n\n----------------------------------------\n\nTITLE: Adding FreeRTOS BTstack Example using CMake\nDESCRIPTION: Defines a CMake function to add a BTstack example executable configured for a FreeRTOS environment. It checks if the build type matches 'freertos' or 'all' AND if the FreeRTOS-Kernel target is available. If conditions are met, it includes common setup, creates an executable, links libraries, adds outputs, and sets the URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(picow_bt_example_freertos NAME TARGET_NAME VARIANT_LIB)\n        if (\"${BTSTACK_EXAMPLE_TYPE}\" STREQUAL \"freertos\" OR \"${BTSTACK_EXAMPLE_TYPE}\" STREQUAL \"all\")\n                if (TARGET FreeRTOS-Kernel)\n                        picow_bt_example_common(${NAME})\n                        add_executable(${TARGET_NAME}_freertos)\n                        target_link_libraries(${TARGET_NAME}_freertos PRIVATE\n                                picow_bt_example_common_${NAME}\n                                ${VARIANT_LIB}\n                                ${ARGN} # extra libs\n                                )\n                        pico_add_extra_outputs(${TARGET_NAME}_freertos)\n                        example_auto_set_url(${TARGET_NAME}_freertos)\n                endif()\n        endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Building Interrupt-Driven PIO UART RX Executable (CMake)\nDESCRIPTION: This snippet defines the CMake build target for the interrupt-driven `pio_uart_rx_intr` example. Similar to the standard version, it generates the PIO header from the same `.pio` file but uses a different source file (`uart_rx_intr.c`) and links an additional library, `pico_async_context_threadsafe_background`, required for the interrupt handling mechanism, alongside the standard libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/uart_rx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_uart_rx_intr)\npico_generate_pio_header(pio_uart_rx_intr ${CMAKE_CURRENT_LIST_DIR}/uart_rx.pio)\ntarget_sources(pio_uart_rx_intr PRIVATE uart_rx_intr.c)\ntarget_link_libraries(pio_uart_rx_intr PRIVATE\n        pico_stdlib\n        pico_multicore\n        hardware_pio\n        pico_async_context_threadsafe_background\n        )\npico_add_extra_outputs(pio_uart_rx_intr)\nexample_auto_set_url(pio_uart_rx_intr)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build: Pico I2C Slave Burst Executable\nDESCRIPTION: This CMake snippet defines the `slave_mem_i2c_burst` executable, specifies its source file (`slave_mem_i2c_burst.c`), links necessary Pico SDK libraries (`pico_i2c_slave`, `hardware_i2c`, `pico_stdlib`), adds extra build outputs (like UF2 files), and sets a URL for the example documentation, specifically for the burst mode variation.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/slave_mem_i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(slave_mem_i2c_burst\n    slave_mem_i2c_burst.c\n    )\ntarget_link_libraries(slave_mem_i2c_burst\n    pico_i2c_slave\n    hardware_i2c\n    pico_stdlib\n    )\npico_add_extra_outputs(slave_mem_i2c_burst)\nexample_auto_set_url(slave_mem_i2c_burst)\n```\n\n----------------------------------------\n\nTITLE: Adding Poll BTstack Example using CMake\nDESCRIPTION: Defines a CMake function to add a BTstack example executable configured for a polling environment. It checks if the build type matches 'poll' or 'all', includes common example setup, creates an executable, links required libraries (common, variant, extra), adds extra build outputs, and sets the example URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(picow_bt_example_poll NAME TARGET_NAME VARIANT_LIB)\n        if (\"${BTSTACK_EXAMPLE_TYPE}\" STREQUAL \"poll\" OR \"${BTSTACK_EXAMPLE_TYPE}\" STREQUAL \"all\")\n                picow_bt_example_common(${NAME})\n                add_executable(${TARGET_NAME}_poll)\n                target_link_libraries(${TARGET_NAME}_poll PRIVATE\n                        picow_bt_example_common_${NAME}\n                        ${VARIANT_LIB}\n                        ${ARGN} # extra libs\n                        )\n                pico_add_extra_outputs(${TARGET_NAME}_poll)\n                example_auto_set_url(${TARGET_NAME}_poll)\n        endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options: LWIP mbedtls source CMake\nDESCRIPTION: This snippet sets specific compile options for the `altcp_tls_mbedtls.c` source file within the LWIP library path. It uses `set_source_files_properties` to add the `-Wno-unused-result` compiler flag. This is commonly done to suppress warnings generated by external library code that doesn't adhere to strict compiler flags enabled elsewhere in the project, keeping the build output clean.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/tls_client/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Ignore warnings from lwip code\nset_source_files_properties(\n        ${PICO_LWIP_PATH}/src/apps/altcp_tls/altcp_tls_mbedtls.c\n        PROPERTIES\n        COMPILE_OPTIONS \"-Wno-unused-result\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Configure Polling TCP Client Executable - CMake\nDESCRIPTION: Configures the CMake target for the polling TCP client example. It specifies the source file (`picow_tcp_client.c`), defines necessary symbols like WIFI credentials and the server IP for the compiler, sets include directories, and links libraries required for the polling CYW43/LWIP integration and standard Pico functions.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/tcp_client/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_tcpip_client_poll\n        picow_tcp_client.c\n        )\ntarget_compile_definitions(picow_tcpip_client_poll PRIVATE\n        WIFI_SSID=\\\"${\\${WIFI_SSID}}\\\"\n        WIFI_PASSWORD=\\\"${\\${WIFI_PASSWORD}}\\\"\n        TEST_TCP_SERVER_IP=\\\"${\\${TEST_TCP_SERVER_IP}}\\\"\n        )\ntarget_include_directories(picow_tcpip_client_poll PRIVATE\n        ${\\${CMAKE_CURRENT_LIST_DIR}}\n        ${\\${CMAKE_CURRENT_LIST_DIR}}/.. # for our common lwipopts\n        )\ntarget_link_libraries(picow_tcpip_client_poll\n        pico_cyw43_arch_lwip_poll\n        pico_stdlib\n        )\npico_add_extra_outputs(picow_tcpip_client_poll)\n```\n\n----------------------------------------\n\nTITLE: Configuring Picow BT Example BTstack LWIP Poll CMake\nDESCRIPTION: Defines an interface library for examples using BTstack's LWIP integration (not CYW43 LWIP) in a polling architecture. It adds the common poll source, links the no-cyw43-lwip base, poll architecture, pico_lwip_nosys, and pico_btstack_bnep_lwip libraries, and includes common LWIP options directories.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(picow_bt_example_btstack_lwip_poll INTERFACE)\ntarget_sources(picow_bt_example_btstack_lwip_poll INTERFACE\n        ${BT_EXAMPLE_COMMON_DIR}/picow_bt_example_poll.c\n        )\ntarget_link_libraries(picow_bt_example_btstack_lwip_poll INTERFACE\n        picow_bt_example_no_cyw43_lwip\n        pico_cyw43_arch_poll\n        pico_lwip_nosys\n        pico_btstack_bnep_lwip\n        )\ntarget_include_directories(picow_bt_example_btstack_lwip_poll INTERFACE\n        ${CMAKE_CURRENT_LIST_DIR}/../wifi # for our common lwipopts\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Background BTstack Example using CMake\nDESCRIPTION: Defines a CMake function to add a BTstack example executable configured for a background environment. It checks if the build type matches 'background' or 'all', includes common example setup, creates an executable, links required libraries (common, variant, extra), adds extra build outputs, and sets the example URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(picow_bt_example_background NAME TARGET_NAME VARIANT_LIB)\n        if (\"${BTSTACK_EXAMPLE_TYPE}\" STREQUAL \"background\" OR \"${BTSTACK_EXAMPLE_TYPE}\" STREQUAL \"all\")\n                picow_bt_example_common(${NAME})\n                add_executable(${TARGET_NAME}_background)\n                target_link_libraries(${TARGET_NAME}_background PRIVATE\n                        picow_bt_example_common_${NAME}\n                        ${VARIANT_LIB}\n                        ${ARGN} # extra libs\n                        )\n                pico_add_extra_outputs(${TARGET_NAME}_background)\n                example_auto_set_url(${TARGET_NAME}_background)\n        endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configure Subdirectory Exclusion (CMake)\nDESCRIPTION: Uses the `add_subdirectory_exclude_platforms` CMake command to include a specified directory in the build, except when building for the listed platforms. This instance excludes the 'hello_anything' example when the target platform is 'host', avoiding unnecessary compilation for the host environment.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(hello_anything host)\n```\n\n----------------------------------------\n\nTITLE: Generate Extra Build Outputs for bmp280_i2c CMake\nDESCRIPTION: Utilizes the Pico-specific CMake function `pico_add_extra_outputs` to generate additional build artifacts like .map, .bin, and .hex files for the `bmp280_i2c` target. These output formats are useful for flashing the device and debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/bmp280_i2c/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(bmp280_i2c)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs (Pico CMake)\nDESCRIPTION: Uses the Pico-specific CMake function 'pico_add_extra_outputs' to generate additional build artifacts for the 'pcf8523_i2c' target, such as .map, .bin, and .hex files, which are crucial for flashing the microcontroller and debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/pcf8523_i2c/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pcf8523_i2c)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Outputs for sniff_crc (CMake)\nDESCRIPTION: This Pico SDK specific command generates additional output files for the `sniff_crc` target, typically including `.map`, `.bin`, and `.hex` files, which are useful for debugging and deployment.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/sniff_crc/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(sniff_crc)\n```\n\n----------------------------------------\n\nTITLE: Generate Extra Output Files CMake\nDESCRIPTION: This command uses a Pico SDK helper function to generate additional build output formats for the 'hello_rtc' target, such as `.map`, `.bin`, and `.hex` files, which are common formats for microcontroller development.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/hello_rtc/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_rtc)\n```\n\n----------------------------------------\n\nTITLE: Setting LWIP HTTP Content for pico_freertos_httpd_content\nDESCRIPTION: Invokes a Pico SDK specific function to associate web content files with the `pico_freertos_httpd_content` library target. The INTERFACE keyword indicates these properties are propagated to targets that link against this library. The listed HTML files will be embedded or made available for the HTTP server.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\npico_set_lwip_httpd_content(pico_freertos_httpd_content INTERFACE\n        ${CMAKE_CURRENT_LIST_DIR}/content/404.html\n        ${CMAKE_CURRENT_LIST_DIR}/content/index.shtml\n        ${CMAKE_CURRENT_LIST_DIR}/content/test.shtml\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding pico_freertos_httpd_content Library\nDESCRIPTION: Defines a new interface library target named `pico_freertos_httpd_content`. This library is intended to hold content files (like HTML) that will be served by the lwIP HTTP server. The NOFLAG ensures no compiler flags are implicitly added.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_library(pico_freertos_httpd_content NOFLAG)\n```\n\n----------------------------------------\n\nTITLE: Embedding Partition Table in CMake\nDESCRIPTION: Demonstrates how to embed a flash partition table defined in pt.json into the runtime_flash_permissions binary. This is optional for the example's functionality but shows a common pattern for managing flash layout for applications requiring partitions.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/runtime_flash_permissions/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# not necessary for the example functionality, but shows you how you would add a partition table\npico_embed_pt_in_binary(runtime_flash_permissions ${CMAKE_CURRENT_LIST_DIR}/pt.json)\n```\n\n----------------------------------------\n\nTITLE: Defining Universal Target Build Function (CMake)\nDESCRIPTION: This function `add_universal_target` automates the creation of a universal binary from a source project. It parses arguments for source target name, padding, packing address, and target platforms, builds the project for each platform using `ExternalProject`, links the resulting binaries with `picotool`, and generates combined binary and UF2 files suitable for multi-platform Pico devices. It requires `picotool` and `pioasm` to be found and checks the order of platforms.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction (add_universal_target TARGET SOURCE)\n    set(oneValueArgs SOURCE_TARGET PADDING PACKADDR)\n    set(multiValueArgs PLATFORMS)\n    cmake_parse_arguments(PARSE_ARGV 2 PARSED \"\" \"${oneValueArgs}\" \"${multiValueArgs}\")\n\n    set(SOURCE_TARGET ${TARGET})\n    if (PARSED_SOURCE_TARGET)\n        set(SOURCE_TARGET ${PARSED_SOURCE_TARGET})\n    endif()\n    set(PADDING 0x1000)\n    if (PARSED_PADDING)\n        set(PADDING ${PARSED_PADDING})\n    endif()\n    set(PACKADDR 0x10000000)\n    if (PARSED_PACKADDR)\n        set(PACKADDR ${PARSED_PACKADDR})\n    endif()\n    set(PLATFORMS \"rp2040;rp2350-arm-s;rp2350-riscv\")\n    if (PARSED_PLATFORMS)\n        set(PLATFORMS ${PARSED_PLATFORMS})\n    endif()\n    # rp2040 must come first, as that has checksum requirements at the start of the binary\n    list(FIND PLATFORMS \"rp2040\" idx)\n    if (idx GREATER 0)\n        message(FATAL_ERROR \"rp2040 must come first in PLATFORMS for universal binaries\")\n    endif()\n\n    add_custom_target(${TARGET} ALL)\n    if (picotool_DIR)\n        set(universal_picotool_DIR ${picotool_DIR})\n    else()\n        set(universal_picotool_DIR ${picotool_INSTALL_DIR}/picotool)\n    endif()\n    if (pioasm_DIR)\n        set(universal_pioasm_DIR ${pioasm_DIR})\n    else()\n        set(universal_pioasm_DIR ${PIOASM_INSTALL_DIR}/pioasm)\n    endif()\n\n    set(DEPS \"\")\n    set(BINS \"\")\n    # Build binaries for each of the platforms\n    foreach(platform IN LISTS PLATFORMS)\n        ExternalProject_Add(${TARGET}_${platform}\n            PREFIX pioasm\n            SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR}/wrapper\n            BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${TARGET}/${platform}/wrapper\n            CMAKE_ARGS\n                \"--no-warn-unused-cli\"\n                \"-DCMAKE_MAKE_PROGRAM:FILEPATH=${CMAKE_MAKE_PROGRAM}\"\n                \"-DPICO_SDK_PATH:FILEPATH=${PICO_SDK_PATH}\"\n                \"-DPICO_EXAMPLES_PATH:FILEPATH=${PICO_EXAMPLES_PATH}\"\n                \"-DPICO_PLATFORM=${platform}\"\n                \"-DPICO_ARM_TOOLCHAIN_PATH=${PICO_ARM_TOOLCHAIN_PATH}\"\n                \"-DPICO_RISCV_TOOLCHAIN_PATH=${PICO_RISCV_TOOLCHAIN_PATH}\"\n                \"-DPICO_BOARD_RP2040=${PICO_BOARD_RP2040}\"\n                \"-DPICO_BOARD_RP2350=${PICO_BOARD_RP2350}\"\n                \"-DUNIVERSAL_PROJECT_DIR:FILEPATH=${SOURCE}\"\n                \"-DUNIVERSAL_BINARY_DIR:FILEPATH=${CMAKE_CURRENT_BINARY_DIR}/${TARGET}/${platform}\"\n                \"-DSOURCE_TARGET=${SOURCE_TARGET}\"\n                \"-Dpicotool_DIR=${universal_picotool_DIR}\"\n                \"-Dpioasm_DIR=${universal_pioasm_DIR}\"\n            BUILD_ALWAYS 1 # force dependency checking\n            INSTALL_COMMAND \"\"\n            )\n\n        set(ORIGINAL_BIN ${CMAKE_CURRENT_BINARY_DIR}/${TARGET}/${platform}/${SOURCE_TARGET}.bin)\n\n        list(APPEND DEPS ${TARGET}_${platform})\n        list(APPEND BINS ${ORIGINAL_BIN})\n    endforeach()\n\n    set(BINDIR ${CMAKE_CURRENT_BINARY_DIR}/${TARGET})\n    set(COMBINED ${BINDIR}/${TARGET}.bin)\n\n    pico_init_picotool()\n    if (NOT picotool_FOUND)\n        message(FATAL_ERROR \"Cannot link universal binary without picotool\")\n    endif()\n\n    # Link the binaries for different platforms into a single block loop, with\n    # appropriate rolling window deltas. This creates a universal binary file,\n    # which will run on any of the platforms when loaded using picotool.\n    add_custom_target(${TARGET}_combined\n            COMMAND picotool link ${COMBINED} ${BINS} --pad ${PADDING}\n            DEPENDS ${DEPS}\n            )\n\n    # Create UF2s targeting the absolute and rp2040 family IDs, then combine these\n    # into a single universal UF2. This is required as there isn't a single family\n    # ID which is accepted by both RP2040 and RP2350. Instead, the 2 UF2 files are\n    # concatenated together and the device ignores the part not targeting it.\n    add_custom_target(${TARGET}_rp2350_uf2\n            COMMAND picotool uf2 convert ${COMBINED} ${BINDIR}/rp2350.uf2 --family absolute --offset ${PACKADDR}\n            DEPENDS ${TARGET}_combined\n            )\n    add_custom_target(${TARGET}_rp2040_uf2\n            COMMAND picotool uf2 convert ${COMBINED} ${BINDIR}/rp2040.uf2 --family rp2040 --offset ${PACKADDR}\n            DEPENDS ${TARGET}_combined\n            )\n    add_custom_target(${TARGET}_uf2\n            COMMAND ${CMAKE_COMMAND} -E cat ${BINDIR}/rp2040.uf2 ${BINDIR}/rp2350.uf2 > ${BINDIR}/${TARGET}.uf2\n            DEPENDS ${TARGET}_rp2350_uf2 ${TARGET}_rp2040_uf2\n            )\n\n    add_dependencies(${TARGET} ${TARGET}_combined ${TARGET}_uf2)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Outputs for pico_freertos_httpd_sys\nDESCRIPTION: Invokes a Pico SDK specific function to generate additional output files (like .uf2, .hex, .bin) for the `pico_freertos_httpd_sys` executable target, simplifying the process of deploying the built application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pico_freertos_httpd_sys)\n```\n\n----------------------------------------\n\nTITLE: Add Standard Pico Build Outputs - CMake\nDESCRIPTION: Configures the 'pio_logic_analyser' target to generate standard Raspberry Pi Pico specific output files during the build process, such as UF2, HEX, and BIN files, in addition to the default ELF executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/logic_analyser/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pio_logic_analyser)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs (CMake)\nDESCRIPTION: Invokes a Pico SDK specific CMake function to generate common extra build outputs for the target, typically including .map, .bin, and .hex files needed for deploying to the Pico board.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/unique_board_id/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(unique_board_id)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for Pico in CMake\nDESCRIPTION: Uses a specific Pico SDK CMake function to generate additional output formats (like `.uf2`, `.bin`, `.hex`, etc.) for the `max7219_8x7seg_spi` executable. These formats are often required for flashing or debugging on the target hardware.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/max7219_8x7seg_spi/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(max7219_8x7seg_spi)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs (CMake)\nDESCRIPTION: Utilizing a Pico SDK specific function, this command configures the build system to generate additional output file formats, such as .map, .bin, and .hex files, for the `narrow_io_write` executable. These formats are commonly required for flashing or debugging the target hardware.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/narrow_io_write/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(narrow_io_write)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs in CMake (Pico)\nDESCRIPTION: This command, specific to the Pico SDK CMake utilities, configures the build process to generate additional output files for the 'mpu6050_i2c' target. This typically includes .map, .bin, and .hex files alongside the standard .elf executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mpu6050_i2c/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(mpu6050_i2c)\n```\n\n----------------------------------------\n\nTITLE: Creating Pico W Bluetooth Example Target (CMake)\nDESCRIPTION: Invokes a custom CMake function 'picow_bt_example' to create an executable target named 'a2dp_sink_demo'. This function likely handles setting up the Pico W Bluetooth stack dependencies and links the specified components: the SBC decoder library and the previously defined pin configuration interface.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/a2dp_sink_demo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example(a2dp_sink_demo pico_btstack_sbc_decoder a2dp_sink_demo_pins)\n```\n\n----------------------------------------\n\nTITLE: Defining Pico VSYS Read Example Executable (CMake)\nDESCRIPTION: Configures the `read_vsys` executable target in CMake. It uses `read_vsys.c` as the source, links the standard Pico library (`pico_stdlib`), the custom `power_status_adc` library, and conditionally links the CYW43 Wi-Fi/Bluetooth library if supported. It also adds extra build outputs and sets the example URL.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/read_vsys/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(read_vsys\n    read_vsys.c\n    )\ntarget_include_directories(read_vsys PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}\n    )\ntarget_link_libraries(read_vsys\n    pico_stdlib\n    power_status_adc\n    )\nif (PICO_CYW43_SUPPORTED)\n    target_link_libraries(read_vsys\n        pico_cyw43_arch_none\n    )\nendif()\n\npico_add_extra_outputs(read_vsys)\nexample_auto_set_url(read_vsys)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include SPI Examples (CMake)\nDESCRIPTION: This block checks if the 'hardware_spi' target is available. If it is, it adds several subdirectories containing SPI examples (like BME280 sensor, MPU9250 sensor, DMA, master/slave, flash, and MAX7219 display drivers) to the build process, excluding platforms where they are not applicable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_spi)\n  add_subdirectory_exclude_platforms(bme280_spi)\n  add_subdirectory_exclude_platforms(mpu9250_spi)\n  add_subdirectory_exclude_platforms(spi_dma)\n  add_subdirectory_exclude_platforms(spi_master_slave)\n  add_subdirectory_exclude_platforms(spi_flash)\n  add_subdirectory_exclude_platforms(max7219_32x8_spi)\n  add_subdirectory_exclude_platforms(max7219_8x7seg_spi)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Picow BT Example BTstack LWIP Background CMake\nDESCRIPTION: Defines an interface library for examples using BTstack's LWIP integration in a threadsafe background architecture. It adds the common background source, links the no-cyw43-lwip base, background architecture, pico_lwip_nosys, and pico_btstack_bnep_lwip libraries, and includes common LWIP options directories.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(picow_bt_example_btstack_lwip_background INTERFACE)\ntarget_sources(picow_bt_example_btstack_lwip_background INTERFACE\n        ${BT_EXAMPLE_COMMON_DIR}/picow_bt_example_background.c\n        )\ntarget_link_libraries(picow_bt_example_btstack_lwip_background INTERFACE\n        picow_bt_example_no_cyw43_lwip\n        pico_cyw43_arch_threadsafe_background\n        pico_lwip_nosys\n        pico_btstack_bnep_lwip\n        )\ntarget_include_directories(picow_bt_example_btstack_lwip_background INTERFACE\n        ${CMAKE_CURRENT_LIST_DIR}/../wifi # for our common lwipopts\n        )\n```\n\n----------------------------------------\n\nTITLE: Define Picow BT Example Common Function CMake\nDESCRIPTION: Defines a CMake function `picow_bt_example_common` that takes an example name as input. If the corresponding interface library doesn't exist, it creates it, adds the example's main source file, and calls `pico_btstack_make_gatt_header` if a .gatt file exists for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(picow_bt_example_common NAME)\n        if (NOT TARGET picow_bt_example_common_${NAME})\n                add_library(picow_bt_example_common_${NAME} INTERFACE)\n                target_sources(picow_bt_example_common_${NAME} INTERFACE\n                        # actual example\n                        ${BTSTACK_EXAMPLE_PATH}/${NAME}.c\n                        )\n                if (EXISTS \"${BTSTACK_EXAMPLE_PATH}/${NAME}.gatt\")\n                        pico_btstack_make_gatt_header(picow_bt_example_common_${NAME} INTERFACE ${BTSTACK_EXAMPLE_PATH}/${NAME}.gatt)\n                endif()\n        endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build: Pico I2C Slave Executable\nDESCRIPTION: This CMake snippet defines the `slave_mem_i2c` executable, specifies its source file (`slave_mem_i2c.c`), links necessary Pico SDK libraries (`pico_i2c_slave`, `hardware_i2c`, `pico_stdlib`), adds extra build outputs (like UF2 files), and sets a URL for the example documentation.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/slave_mem_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(slave_mem_i2c\n    slave_mem_i2c.c\n    )\ntarget_link_libraries(slave_mem_i2c\n    pico_i2c_slave\n    hardware_i2c\n    pico_stdlib\n    )\npico_add_extra_outputs(slave_mem_i2c)\nexample_auto_set_url(slave_mem_i2c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Picow BT Example CYW43 LWIP FreeRTOS CMake\nDESCRIPTION: Defines an interface library for examples using CYW43 LWIP and running under FreeRTOS. It links the common FreeRTOS base, the cyw43-lwip base, and the pico_cyw43_arch_lwip_sys_freertos library, also defining HAVE_LWIP to prevent BTstack from initializing LWIP.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET FreeRTOS-Kernel)\n        # variant: cyw43 lwip | freertos\n        add_library(picow_bt_example_cyw43_lwip_freertos INTERFACE)\n        target_link_libraries(picow_bt_example_cyw43_lwip_freertos INTERFACE\n                picow_bt_example_common_freertos\n                picow_bt_example_cyw43_lwip\n                pico_cyw43_arch_lwip_sys_freertos\n                )\n        target_compile_definitions(picow_bt_example_cyw43_lwip_freertos INTERFACE\n                HAVE_LWIP=1 # stops btstack calling lwip_init\n                )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for pico_freertos_httpd_nosys\nDESCRIPTION: Links the necessary libraries to the `pico_freertos_httpd_nosys` executable target. It includes libraries for Pico SDK's CYW43 Wi-Fi driver with background thread-safety and lwIP 'nosys' architecture, lwIP HTTP and MDNS apps, Pico standard library, FreeRTOS kernel (Heap4), and the locally defined HTTP content library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pico_freertos_httpd_nosys\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_lwip_http\n        pico_lwip_mdns\n        pico_stdlib\n        FreeRTOS-Kernel-Heap4 # FreeRTOS kernel and dynamic heap\n        pico_freertos_httpd_content\n        )\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Outputs CMake for Pico\nDESCRIPTION: This Pico-specific CMake function call generates additional build artifacts for the `mpl3115a2_i2c` target. These outputs typically include memory map files, raw binary files (.bin), and Intel Hex files (.hex), which are commonly used for flashing the program onto the Raspberry Pi Pico. It simplifies the generation of deployment-ready files.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mpl3115a2_i2c/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(mpl3115a2_i2c)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for pico_freertos_httpd_sys\nDESCRIPTION: Configures private compile definitions for the `pico_freertos_httpd_sys` target. It defines WIFI_SSID and WIFI_PASSWORD similar to the 'nosys' target, but also explicitly sets NO_SYS=0 and LWIP_SOCKET=1, which are required for using lwIP with a sys-arch and the socket API.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(pico_freertos_httpd_sys PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        NO_SYS=0            # don't want NO_SYS (generally this would be in your lwipopts.h)\n        LWIP_SOCKET=1       # we need the socket API (generally this would be in your lwipopts.h)\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Pico W BT Example FreeRTOS Target (CMake)\nDESCRIPTION: Configures a build target using the custom CMake function 'picow_bt_example_freertos'. This target is specifically designed to integrate with the FreeRTOS real-time operating system. It integrates components for Wi-Fi/lwIP FreeRTOS handling ('picow_bt_example_cyw43_lwip_freertos') and the classic Bluetooth stack ('pico_btstack_classic').\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/spp_streamer_with_wifi/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example_freertos(${NAME} ${TARGET_NAME} picow_bt_example_cyw43_lwip_freertos pico_btstack_classic)\n```\n\n----------------------------------------\n\nTITLE: Generating Hex File for Datasheet (CMake)\nDESCRIPTION: Defines a custom build command that invokes the `pioasm` tool to compile `squarewave.pio` into a `.hex` file, specifically for inclusion or reference in documentation like the RP2040 datasheet.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_LIST_DIR}/generated/squarewave.hex\n        DEPENDS ${CMAKE_CURRENT_LIST_DIR}/squarewave.pio\n        COMMAND pioasm -o hex ${CMAKE_CURRENT_LIST_DIR}/squarewave.pio ${CMAKE_CURRENT_LIST_DIR}/generated/squarewave.hex\n        VERBATIM)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL with CMake for Raspberry Pi Pico Examples\nDESCRIPTION: This command, likely a helper macro for Pico examples, automatically sets the program URL for the target `multicore_fifo_irqs`. This URL might point to the example's source repository or documentation, useful for debugging or tracking. Dependencies: `multicore_fifo_irqs` target must be defined, and `example_auto_set_url` macro must be defined (likely in Pico SDK example infrastructure).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_fifo_irqs/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# add url via pico_set_program_url\nexample_auto_set_url(multicore_fifo_irqs)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to CMake Target\nDESCRIPTION: This command links several required libraries to the `pio_ir_loopback` executable. The `LINK_PUBLIC` keyword ensures these libraries are propagated to targets that link against `pio_ir_loopback`. Libraries linked include the Pico standard library, hardware PIO library, and specific NEC IR transmit/receive libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/ir_loopback/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pio_ir_loopback LINK_PUBLIC\\n  pico_stdlib\\n  hardware_pio\\n  nec_transmit_library\\n  nec_receive_library\\n  )\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Header for Datasheet (CMake)\nDESCRIPTION: Defines a custom build command that uses `pioasm` to generate the standard `.pio.h` header file from `squarewave.pio`, placing it in the `generated` directory for use in the datasheet.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_LIST_DIR}/generated/squarewave.pio.h\n        DEPENDS ${CMAKE_CURRENT_LIST_DIR}/squarewave.pio\n        COMMAND pioasm ${CMAKE_CURRENT_LIST_DIR}/squarewave.pio ${CMAKE_CURRENT_LIST_DIR}/generated/squarewave.pio.h\n        VERBATIM)\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Definitions to INTERFACE Library - CMake\nDESCRIPTION: Adds a compile definition ('A_DEFINE_THAT_IS_SHARED=123') to the 'common_stuff' INTERFACE library with INTERFACE scope. This definition will be automatically added to the compile definitions of any target that links against 'common_stuff'.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/cmake/build_variants/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(common_stuff INTERFACE\n        A_DEFINE_THAT_IS_SHARED=123\n        )\n```\n\n----------------------------------------\n\nTITLE: Message When Skipping I2C Examples (CMake)\nDESCRIPTION: This CMake snippet is part of an 'else' block executed when the 'hardware_i2c' target is not available. It uses the 'message' command to print an informational note during the CMake configuration phase, explaining why the I2C examples are being skipped.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n  message(\"Skipping I2C examples as hardware_i2c is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Execution Model - CMake\nDESCRIPTION: Configures the Bluetooth example build for a background execution model. It calls the custom CMake function `picow_bt_example_background`, linking the project name, target name, the specific background function (`picow_bt_example_cyw43_lwip_background`), and the Bluetooth library (`pico_btstack_ble`).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/gatt_counter_with_wifi/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example_background(${NAME} ${TARGET_NAME} picow_bt_example_cyw43_lwip_background pico_btstack_ble)\n```\n\n----------------------------------------\n\nTITLE: Adding Sources to INTERFACE Library - CMake\nDESCRIPTION: Adds source files ('main.c', 'other.c') to the 'common_stuff' INTERFACE library. These sources are not compiled as part of the library itself but will be added to the source list of any target that links to 'common_stuff'. CMAKE_CURRENT_LIST_DIR is used to specify paths relative to the current CMakeLists.txt file.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/cmake/build_variants/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(common_stuff INTERFACE\n        ${CMAKE_CURRENT_LIST_DIR}/main.c\n        ${CMAKE_CURRENT_LIST_DIR}/other.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Pico W BT Example Poll Target (CMake)\nDESCRIPTION: Configures a build target using the custom CMake function 'picow_bt_example_poll'. This target is likely configured for a polling-based operational model. It specifies the base target name stored in 'TARGET_NAME' and integrates components for Wi-Fi/lwIP polling ('picow_bt_example_cyw43_lwip_poll') and the classic Bluetooth stack ('pico_btstack_classic').\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/spp_streamer_with_wifi/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example_poll(${NAME} ${TARGET_NAME} picow_bt_example_cyw43_lwip_poll pico_btstack_classic)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sine Player Library GPIO and Build (CMake)\nDESCRIPTION: Defines an interface library `sine_player_pins` to set the I2S data and clock pins (GPIO 9 and 10) for the `sine_player` example using compile definitions. It then builds the `sine_player` executable as a Pico W Bluetooth example, implicitly linking the pin configuration.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/sine_player/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(sine_player_pins INTERFACE)\ntarget_compile_definitions(sine_player_pins INTERFACE\n    PICO_AUDIO_I2S_DATA_PIN=9\n    PICO_AUDIO_I2S_CLOCK_PIN_BASE=10\n    )\npicow_bt_example(sine_player sine_player_pins)\n```\n\n----------------------------------------\n\nTITLE: Linking Required Pico SDK Libraries - CMake\nDESCRIPTION: This snippet specifies the libraries that targets using `onewire_library` must link against. It links the `pico_stdlib` (basic SDK functions) and `hardware_pio` (PIO hardware access functions) libraries. These are marked as `INTERFACE` requirements, meaning they are propagated to targets that link against `onewire_library`.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/onewire/onewire_library/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(onewire_library INTERFACE\n        pico_stdlib\n        hardware_pio\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs CMake\nDESCRIPTION: This Pico SDK function configures the build system to generate additional output formats for the executable, such as the .uf2 file format commonly used for easy flashing onto the Raspberry Pi Pico by simply dragging and dropping the file onto the USB mass storage device presented by the bootloader.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/quadrature_encoder/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pio_quadrature_encoder)\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Header from Assembly - CMake\nDESCRIPTION: This snippet uses the Pico SDK specific function `pico_generate_pio_header` to process the `onewire_library.pio` state machine assembly file. It assembles the PIO program and generates a C/C++ header file containing the assembled instructions and definitions, which is then included by source code.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/onewire/onewire_library/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# invoke pio_asm to assemble the state machine programs\n#\npico_generate_pio_header(onewire_library ${CMAKE_CURRENT_LIST_DIR}/onewire_library.pio)\n```\n\n----------------------------------------\n\nTITLE: Setting Polling Include Dirs (CMake)\nDESCRIPTION: Specifies private include directories for the `picow_access_point_poll` target. Includes the current directory, the parent directory (for `lwipopts`), and the subdirectories containing DHCP and DNS server source files, identical to the configuration for the background version.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/access_point/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(picow_access_point_poll PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        ${CMAKE_CURRENT_LIST_DIR}/dhcpserver\n        ${CMAKE_CURRENT_LIST_DIR}/dnsserver\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definition (CMake)\nDESCRIPTION: This command sets a compile-time definition specifically for the 'hello_double_tap' target's private sources. It defines 'PICO_BOOTSEL_VIA_DOUBLE_RESET_ACTIVITY_LED' to 25, instructing the linked library to use GPIO 25 (typically the onboard LED) as an indicator during the bootloader entry process.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/hello_double_tap/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(hello_double_tap PRIVATE\n\tPICO_BOOTSEL_VIA_DOUBLE_RESET_ACTIVITY_LED=25\n\t)\n```\n\n----------------------------------------\n\nTITLE: Configuring BTstack HxCmod Player Library CMake\nDESCRIPTION: Defines an interface library 'pico_btstack_hxcmod_player' for the HxCmod player used by specific BTstack examples. It includes the player's source file and a sample song, and sets the necessary include directories for the player's headers.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(pico_btstack_hxcmod_player INTERFACE)\ntarget_sources(pico_btstack_hxcmod_player INTERFACE\n        ${BTSTACK_3RD_PARTY_PATH}/hxcmod-player/hxcmod.c\n        ${BTSTACK_3RD_PARTY_PATH}/hxcmod-player/mods/nao-deceased_by_disease.c\n        )\ntarget_include_directories(pico_btstack_hxcmod_player INTERFACE\n        ${BTSTACK_3RD_PARTY_PATH}/hxcmod-player\n        ${BTSTACK_3RD_PARTY_PATH}/hxcmod-player/mods\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: Specifies the directories where the compiler should look for header files when building the `picow_httpd_background` target. This includes the current directory, a parent directory (presumably for common LWIP options), and the path to the LWIP HTTPD application headers.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/httpd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(picow_httpd_background PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        ${PICO_LWIP_CONTRIB_PATH}/apps/httpd\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Background Include Dirs (CMake)\nDESCRIPTION: Specifies private include directories for the `picow_access_point_background` target. Includes the current directory, the parent directory (specifically noted for common `lwipopts` configuration), and the subdirectories containing DHCP and DNS server source files.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/access_point/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(picow_access_point_background PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts\n        ${CMAKE_CURRENT_LIST_DIR}/dhcpserver\n        ${CMAKE_CURRENT_LIST_DIR}/dnsserver\n        )\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Header - CMake\nDESCRIPTION: Uses the Pico SDK function `pico_generate_pio_header` to process the `hub75.pio` source file (a PIO program) and generate a C/C++ header file. This header contains the compiled PIO assembly and makes it usable from the main C/C++ application code. It depends on the Pico SDK being included in the project.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hub75/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npico_generate_pio_header(pio_hub75 ${CMAKE_CURRENT_LIST_DIR}/hub75.pio)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for PWM Executable CMake\nDESCRIPTION: Configures the build system to generate standard output formats for the `pwm_measure_duty_cycle` executable, such as `.map`, `.bin`, and `.hex` files. This is a common step in Pico SDK projects to produce the necessary files for flashing or analyzing the compiled program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pwm/measure_duty_cycle/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pwm_measure_duty_cycle)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries CMake for Pico\nDESCRIPTION: This command links necessary libraries to the previously defined `mpl3115a2_i2c` executable target. It ensures the executable has access to the standard Pico SDK library (`pico_stdlib`) and the hardware I2C driver library (`hardware_i2c`). This step resolves external dependencies required by the source code.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mpl3115a2_i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(mpl3115a2_i2c pico_stdlib hardware_i2c)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries CMake\nDESCRIPTION: Links the `pico_multicore` and `pico_stdlib` libraries to the `multicore_runner` executable target. This provides the necessary functions and APIs from the Pico SDK for standard operations and utilizing the RP2040's second core. This step assumes these libraries are found via `find_package(Pico SDK)`.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(multicore_runner\n        pico_multicore\n        pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Enabling USB stdio CMake\nDESCRIPTION: This Pico SDK function enables standard input/output (stdio) redirection over the USB connection. The '1' parameter typically signifies enabling it. This allows print statements and other console I/O from the Pico program to be viewed on the host computer via USB serial.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/quadrature_encoder/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npico_enable_stdio_usb(pio_quadrature_encoder 1)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target with CMake\nDESCRIPTION: This command creates a new executable target within the CMake build system. The specified name, `pio_manchester_encoding`, will be used to refer to this build artifact throughout the rest of the CMakeLists.txt file. It's the foundational step for defining the project's main output.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/manchester_encoding/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_manchester_encoding)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Executable Target - CMake\nDESCRIPTION: This snippet uses the `add_executable` command to define a build target named `hstx_spi_lcd`. It specifies `hstx_spi_lcd.c` as the source file to be compiled into this executable. This command is essential for telling CMake what program to build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hstx/spi_lcd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hstx_spi_lcd\n hstx_spi_lcd.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target in CMake\nDESCRIPTION: Defines a CMake executable target named 'lis3dh_i2c' from the source file 'lis3dh_i2c.c'. This is the first step in setting up a buildable program within the CMake project and is required before linking libraries or adding build outputs.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/lis3dh_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(lis3dh_i2c\n        lis3dh_i2c.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target in CMake\nDESCRIPTION: This command defines a new executable target named 'mpu6050_i2c'. It specifies the source file 'mpu6050_i2c.c' that will be compiled to create this executable. This is the starting point for defining a program in CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mpu6050_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(mpu6050_i2c\n        mpu6050_i2c.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Define Executable Target CMake\nDESCRIPTION: This command defines an executable target named `pio_differential_manchester`. This target will be the main build output. It is a fundamental step in any CMake project to specify what should be built.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/differential_manchester/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_differential_manchester)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Pico W A2DP Pins (CMake)\nDESCRIPTION: Sets compile definitions for the 'a2dp_sink_demo_pins' INTERFACE library. It defines the I2S audio data and clock base pins using CMake build definitions, which will be passed to the compiler when building targets that link this interface.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/a2dp_sink_demo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(a2dp_sink_demo_pins INTERFACE\n    PICO_AUDIO_I2S_DATA_PIN=9\n    PICO_AUDIO_I2S_CLOCK_PIN_BASE=10\n    )\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target (CMake)\nDESCRIPTION: This command links the specified libraries to the 'hello_double_tap' executable target. It includes 'pico_stdlib' for core Pico SDK functionality and 'pico_bootsel_via_double_reset' which provides the necessary code for implementing the double-tap reset bootloader entry mechanism.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/hello_double_tap/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_double_tap\n      pico_stdlib\n      pico_bootsel_via_double_reset\n      )\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs (CMake)\nDESCRIPTION: This Pico SDK-specific CMake command adds standard extra build outputs for the 'hello_double_tap' target. This typically includes generating .uf2, .hex, and .bin files alongside the default .elf executable, making the binary ready for easy deployment to the Raspberry Pi Pico board.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/hello_double_tap/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_double_tap)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs CMake\nDESCRIPTION: Invokes the Pico SDK specific CMake function 'pico_add_extra_outputs' for the 'blink' target. This command automatically configures the build system to generate additional output formats like .uf2, .hex, and .bin files, which are commonly used for flashing or debugging the microcontroller.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/blink/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(blink)\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Definitions for picow_blink_fast_clock CMake\nDESCRIPTION: Adds private compile definitions for the 'picow_blink_fast_clock' target. Setting `CYW43_PIO_CLOCK_DIV_INT` and `CYW43_PIO_CLOCK_DIV_FRAC8` configures the CYW43 PIO clock divisor at build time to match the faster system clock speed, ensuring proper communication with the chip.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(picow_blink_fast_clock PRIVATE\n        CYW43_PIO_CLOCK_DIV_INT=4\n        CYW43_PIO_CLOCK_DIV_FRAC8=0\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Picow BT Example No CYW43 LWIP FreeRTOS CMake\nDESCRIPTION: Defines an interface library for examples that do not use CYW43 LWIP and run under FreeRTOS. It links the common FreeRTOS base, the no-cyw43-lwip base, and the pico_cyw43_arch_sys_freertos library for FreeRTOS compatibility.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET FreeRTOS-Kernel)\n        # variant: no cyw43 lwip | freertos\n        add_library(picow_bt_example_no_cyw43_lwip_freertos INTERFACE)\n        target_link_libraries(picow_bt_example_no_cyw43_lwip_freertos INTERFACE\n                picow_bt_example_common_freertos\n                picow_bt_example_no_cyw43_lwip\n                pico_cyw43_arch_sys_freertos\n                )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Pico W BT Example Target Name (CMake)\nDESCRIPTION: Sets the project name variable 'NAME' to \"spp_streamer\". It then calls the custom CMake function 'picow_bt_example_target_name' to define a base build target name based on the 'NAME' variable, likely appending '_with_wifi'. The resulting target name is stored in the 'TARGET_NAME' variable for subsequent use.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/spp_streamer_with_wifi/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(NAME spp_streamer)\npicow_bt_example_target_name(${NAME}_with_wifi TARGET_NAME)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL CMake\nDESCRIPTION: Utilizes a Pico SDK example-specific macro/function to automatically set a URL property for the `multicore_runner` target. This property typically points to the online source code location, useful for documentation or debugging purposes within the build system. This function is likely defined elsewhere in the Pico SDK example build infrastructure.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(multicore_runner)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Example (CMake)\nDESCRIPTION: This command, specific to Pico SDK examples, sets a URL property for the `hello_serial` target. This URL typically points to documentation or the source code location for the example, making it easier for users to find more information about the project. It helps in providing context for example applications.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hello_world/serial/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_serial)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable CMake for Pico\nDESCRIPTION: This CMake command defines an executable target named `mpl3115a2_i2c` using the specified source file(s). It tells the build system what the final program will be called and which source code compiles into it. This is the fundamental step for creating a buildable program target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mpl3115a2_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(mpl3115a2_i2c\n        mpl3115a2_i2c.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Generating PIO Headers for Executable (CMake)\nDESCRIPTION: Uses the Pico SDK function `pico_generate_pio_header` to process PIO assembly files (`.pio`) and generate corresponding C/C++ header files (`.h`) that can be included and used by the `pio_squarewave` executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npico_generate_pio_header(pio_squarewave ${CMAKE_CURRENT_LIST_DIR}/squarewave.pio)\npico_generate_pio_header(pio_squarewave ${CMAKE_CURRENT_LIST_DIR}/squarewave_wrap.pio)\npico_generate_pio_header(pio_squarewave ${CMAKE_CURRENT_LIST_DIR}/squarewave_fast.pio)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target CMake\nDESCRIPTION: Links necessary libraries (`pico_stdlib` and `hardware_spi`) to the `max7219_32x8_spi` executable target. This step is crucial for resolving external dependencies, allowing the program to use functions provided by the Pico SDK standard library and the SPI hardware abstraction layer.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/max7219_32x8_spi/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(max7219_32x8_spi pico_stdlib hardware_spi)\n```\n\n----------------------------------------\n\nTITLE: Adding Standard Build Outputs in CMake\nDESCRIPTION: Invokes a Pico SDK function to generate common build output formats like .map, .bin, .hex, and .uf2 files for the runtime_flash_permissions target. This command simplifies the creation of files needed for flashing, debugging, or distribution.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/runtime_flash_permissions/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# create map/bin/hex/uf2 file etc.\npico_add_extra_outputs(runtime_flash_permissions)\n```\n\n----------------------------------------\n\nTITLE: Set Global Compile Options - CMake\nDESCRIPTION: Applies global compile options to all source files in the project. This includes enabling all warnings (`-Wall`), disabling specific warnings (`-Wno-format`, `-Wno-unused-function`), and conditionally disabling `-Wno-maybe-uninitialized` for GNU compilers.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_options(-Wall\n        -Wno-format          # int != int32_t as far as the compiler is concerned because gcc has int32_t as long int\n        -Wno-unused-function # we have some for the docs that aren't called\n        )\nif (CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n    add_compile_options(-Wno-maybe-uninitialized)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include TinyUSB Host Examples (CMake)\nDESCRIPTION: Checks if the 'tinyusb_host' target is available in the CMake build system. If the target is found, it includes the 'host' subdirectory, which contains the TinyUSB host examples. If the target is not present, it prints a message indicating that the host examples are being skipped due to TinyUSB unavailability.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET tinyusb_host)\n  add_subdirectory(host)\nelse ()\n  message(\"Skipping TinyUSB host examples as TinyUSB is unavailable\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Example (CMake)\nDESCRIPTION: Uses a helper function to automatically set the program URL for the target. This is often used in Pico SDK examples to link the compiled binary back to the source code location, useful for debugging or reference.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/unique_board_id/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(unique_board_id)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Example with CMake\nDESCRIPTION: This command, likely specific to Pico examples, sets a URL property for the `spi_flash` target, often used to embed information about where the example source can be found online. It depends on the `spi_flash` target being defined and potentially requires specific functions or macros provided by the Pico SDK examples infrastructure.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_flash/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# add url via pico_set_program_url\nexample_auto_set_url(spi_flash)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Output Formats (CMake)\nDESCRIPTION: This command invokes a Pico SDK-specific function to automatically generate additional output formats for the `hello_dma` target. This typically includes .map, .bin, and .hex files, which are essential for debugging and flashing the compiled program onto the Pico board.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/hello_dma/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_dma)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Target CMake\nDESCRIPTION: This command links necessary libraries to the `pio_differential_manchester` executable. `pico_stdlib` provides standard Pico SDK functions, while `hardware_pio` provides access to the PIO hardware functions. The `PRIVATE` keyword ensures these libraries are only linked for this target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/differential_manchester/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pio_differential_manchester PRIVATE pico_stdlib hardware_pio)\n```\n\n----------------------------------------\n\nTITLE: Set Example Source URL CMake\nDESCRIPTION: This helper function, common in Pico examples, automatically sets metadata in the build output (like the `.uf2` file) that points to the source code repository online. It helps users easily find the original source for the example they are running.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/differential_manchester/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pio_differential_manchester)\n```\n\n----------------------------------------\n\nTITLE: Generating Additional Output Formats for Pico Executable with CMake\nDESCRIPTION: This Pico SDK-specific command configures the build system to generate additional output file formats for the `spi_flash` executable, such as `.map`, `.bin`, and `.hex` files, which are useful for flashing and debugging. It depends on the `spi_flash` target being defined.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_flash/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# create map/bin/hex file etc.\npico_add_extra_outputs(spi_flash)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL - CMake\nDESCRIPTION: Uses a helper function 'example_auto_set_url' to automatically set a program URL for the 'rtc_alarm_repeat' target. This function likely wraps 'pico_set_program_url' and is common in example projects to associate a documentation or repository URL with the built artifact, often for build system metadata.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/rtc_alarm_repeat/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# add url via pico_set_program_url\nexample_auto_set_url(rtc_alarm_repeat)\n```\n\n----------------------------------------\n\nTITLE: Automatically Setting Program URL for Pico Example using CMake\nDESCRIPTION: This command uses a specific function, likely part of the Pico examples framework, to automatically set a URL property for the `hello_dcp` target. This is typically used to link the built executable back to its source location or associated documentation webpage.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dcp/hello_dcp/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_dcp)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL CMake\nDESCRIPTION: Calls a helper CMake function 'example_auto_set_url' with the 'blink' target. This function, specific to the Pico examples repository, likely sets a property on the build target that points to the example's source code URL for documentation or easy access.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/blink/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(blink)\n```\n\n----------------------------------------\n\nTITLE: Set and Validate BTSTACK_EXAMPLE_TYPE CMake\nDESCRIPTION: Checks if the `BTSTACK_EXAMPLE_TYPE` variable is defined; if not, it defaults to 'background'. It then validates the value against allowed options ('poll', 'background', 'freertos', 'all'), raising a fatal error if the value is unknown. Finally, it sets the variable as an internal cache variable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED BTSTACK_EXAMPLE_TYPE)\n   set(BTSTACK_EXAMPLE_TYPE \"background\")\nendif()\nif ((NOT BTSTACK_EXAMPLE_TYPE STREQUAL \"poll\") AND\n    (NOT BTSTACK_EXAMPLE_TYPE STREQUAL \"background\") AND\n    (NOT BTSTACK_EXAMPLE_TYPE STREQUAL \"freertos\") AND\n    (NOT BTSTACK_EXAMPLE_TYPE STREQUAL \"all\"))\n        message(FATAL_ERROR \"Unknown BTSTACK_EXAMPLE_TYPE '${BTSTACK_EXAMPLE_TYPE}'; valid options are 'poll', 'background', 'freertos' or 'all'\")\nendif()\nset(BTSTACK_EXAMPLE_TYPE \"${BTSTACK_EXAMPLE_TYPE}\" CACHE INTERNAL \"BT stack example type (poll|background|freertos|all)\")\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs (CMake)\nDESCRIPTION: This CMake command, provided by the Pico SDK, configures the build system to generate extra output files for the specified executable target. These outputs typically include a map file (.map), binary file (.bin), and hex file (.hex), useful for debugging and deployment.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_runner_queue/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(multicore_runner_queue)\n```\n\n----------------------------------------\n\nTITLE: Setting LWIP HTTPD Content in CMake\nDESCRIPTION: Associates a list of static web content files (HTML, SHTML, PNG) with the `pico_httpd_content` library target. The Pico SDK build system will process these files to be embedded within the application, allowing the LWIP HTTP server to serve them.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/httpd/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\npico_set_lwip_httpd_content(pico_httpd_content INTERFACE\n        ${CMAKE_CURRENT_LIST_DIR}/content/404.html\n        ${CMAKE_CURRENT_LIST_DIR}/content/index.shtml\n        ${CMAKE_CURRENT_LIST_DIR}/content/test.shtml\n        ${CMAKE_CURRENT_LIST_DIR}/content/ledpass.shtml\n        ${CMAKE_CURRENT_LIST_DIR}/content/ledfail.shtml\n        ${CMAKE_CURRENT_LIST_DIR}/content/img/rpi.png\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring BTStack Example Execution Modes - CMake\nDESCRIPTION: Configures the previously defined BTStack example ('gatt_streamer_server') for different execution models (polling loop, background task, FreeRTOS task). Each function call associates specific CYW43/lwIP and BTStack BLE components with the target, allowing the example to run in various environments.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/gatt_streamer_server_with_wifi/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example_poll(${NAME} ${TARGET_NAME} picow_bt_example_cyw43_lwip_poll pico_btstack_ble)\npicow_bt_example_background(${NAME} ${TARGET_NAME} picow_bt_example_cyw43_lwip_background pico_btstack_ble)\npicow_bt_example_freertos(${NAME} ${TARGET_NAME} picow_bt_example_cyw43_lwip_freertos pico_btstack_ble)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL CMake\nDESCRIPTION: Calls a helper function, `example_auto_set_url`, likely defined within the Pico examples framework. This function automatically sets a URL property for the 'rand' target, which is often used to point to the example's source code or documentation for easy reference.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/rand/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(rand)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable for Pico Example using CMake\nDESCRIPTION: Defines a new executable target named \"onboard_temperature\" from the source file \"onboard_temperature.c\". This is the initial step in setting up the build target within the CMake project.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/onboard_temperature/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(onboard_temperature onboard_temperature.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: Defines a CMake executable target named 'pcf8523_i2c' from the specified source file 'pcf8523_i2c.c'. This is the foundational step in the build process for creating the program's binary.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/pcf8523_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pcf8523_i2c\n        pcf8523_i2c.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Generating Wrapped PIO Header for Datasheet (CMake)\nDESCRIPTION: Defines a custom build command to generate the header file for `squarewave_wrap.pio` using `pioasm`, specifically for outputting to the `generated` directory for datasheet purposes.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_LIST_DIR}/generated/squarewave_wrap.pio.h\n        DEPENDS ${CMAKE_CURRENT_LIST_DIR}/squarewave_wrap.pio\n        COMMAND pioasm ${CMAKE_CURRENT_LIST_DIR}/squarewave_wrap.pio ${CMAKE_CURRENT_LIST_DIR}/generated/squarewave_wrap.pio.h\n        VERBATIM)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory Excluding Host Platform - Button CMake\nDESCRIPTION: Uses the custom CMake function `add_subdirectory_exclude_platforms` to include the 'button' example project directory in the build system.\nThis command specifically excludes the 'button' project when building for the 'host' platform, ensuring it's only built for actual Pico targets.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/picoboard/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(button host)\n```\n\n----------------------------------------\n\nTITLE: Adding Build Outputs CMake MPU9250 SPI\nDESCRIPTION: Uses a Pico SDK specific CMake function to automatically generate additional build output formats for the 'mpu9250_spi' target. This typically includes useful files like .map, .bin, and .hex for flashing and debugging the binary on the target hardware.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/mpu9250_spi/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(mpu9250_spi)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for Executable in CMake\nDESCRIPTION: Uses the Pico SDK macro `pico_add_extra_outputs` to generate additional build artifacts like `.map`, `.bin`, and `.hex` files for the `mma8451_i2c` target. These files are essential for debugging, analysis, and flashing the program onto the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mma8451_i2c/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(mma8451_i2c)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL CMake for Pico Example\nDESCRIPTION: This helper function, common in Pico SDK examples, sets a URL property for the specified executable target. This URL typically points to the online location of the example's source code. It helps in linking the built program to its original source for documentation or reference purposes.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mpl3115a2_i2c/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(mpl3115a2_i2c)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for pico_freertos_httpd_sys\nDESCRIPTION: Adds private include directories for the `pico_freertos_httpd_sys` target. Similar to the 'nosys' target, it includes the current directory, parent directories for common configs, and the lwIP HTTPD application path.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(pico_freertos_httpd_sys PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}\n        ${CMAKE_CURRENT_LIST_DIR}/.. # for our common FreeRTOSConfig\n        ${CMAKE_CURRENT_LIST_DIR}/../.. # for our common lwipopts\n        ${PICO_LWIP_CONTRIB_PATH}/apps/httpd\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: Links necessary libraries to the `picow_httpd_background` executable target. This includes libraries for background thread-safe LWIP, the LWIP HTTP server, mDNS support, the custom content library, and the standard Pico SDK library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/httpd/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(picow_httpd_background PRIVATE\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_lwip_http\n        pico_lwip_mdns\n        pico_httpd_content\n        pico_stdlib\n        )\n```\n\n----------------------------------------\n\nTITLE: Building Pico W Bluetooth HFP/HF Example with CMake\nDESCRIPTION: Uses a custom CMake function 'picow_bt_example' (likely defined elsewhere in the project) to build the 'hfp_hf_demo' application. It links this example with required components: 'pico_btstack_sco_demo_util', 'pico_btstack_sbc_encoder', and the previously defined 'hfp_hf_demo_pins' interface library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/hfp_hf_demo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example(hfp_hf_demo pico_btstack_sco_demo_util pico_btstack_sbc_encoder hfp_hf_demo_pins)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for PWM Executable CMake\nDESCRIPTION: Links necessary libraries to the `pwm_measure_duty_cycle` executable target. It includes `pico_stdlib` for standard Pico SDK functions and `hardware_pwm` for specific PWM hardware interaction, providing the required APIs and dependencies for the program to run correctly on the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pwm/measure_duty_cycle/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pwm_measure_duty_cycle pico_stdlib hardware_pwm)\n```\n\n----------------------------------------\n\nTITLE: Linking Background Libraries (CMake)\nDESCRIPTION: Links necessary libraries to the `picow_access_point_background` executable target. This includes the Pico SDK's specific library for CYW43xx Wi-Fi in thread-safe background mode with LWIP (`pico_cyw43_arch_lwip_threadsafe_background`) and the standard Pico SDK library (`pico_stdlib`).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/access_point/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(picow_access_point_background\n        pico_cyw43_arch_lwip_threadsafe_background\n        pico_stdlib\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions in CMake\nDESCRIPTION: Adds private preprocessor definitions `WIFI_SSID` and `WIFI_PASSWORD` to the `picow_httpd_background` target. These definitions are typically used by the source code (`pico_httpd.c`) to embed Wi-Fi network credentials directly into the compiled application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/httpd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(picow_httpd_background PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Name Variable in CMake\nDESCRIPTION: This line calls a custom CMake function, `picow_bt_example_target_name`, specifically designed for Pico W Bluetooth examples. It likely generates or sets a variable named `TARGET_NAME` based on the provided example name `pan_lwip_http_server`, which will be used in subsequent build commands.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/pan_lwip_http_server/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example_target_name(pan_lwip_http_server TARGET_NAME)\n```\n\n----------------------------------------\n\nTITLE: Execute Pico W Bluetooth Classic DUT Example Command\nDESCRIPTION: This command runs the compiled Raspberry Pi Pico W Bluetooth example application, setting it into classic Bluetooth Device Under Test (DUT) mode. This mode is typically used for testing and certification purposes. Execution requires the example application to have been previously built and the execution environment properly configured.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/dut_mode_classic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: Command\nCODE:\n```\npicow_bt_example(dut_mode_classic)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Interface Library and Adding Source - CMake\nDESCRIPTION: This snippet defines an `INTERFACE` CMake library named `onewire_library`. It then adds the source file `onewire_library.c` to this library. Interface libraries are used to propagate usage requirements to consuming targets without compiling code themselves.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/onewire/onewire_library/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(onewire_library INTERFACE)\ntarget_sources(onewire_library INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/onewire_library.c)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for Pico Target in CMake\nDESCRIPTION: Uses a Pico SDK specific CMake function ('pico_add_extra_outputs') to automatically generate common extra output files (like .map, .bin, .hex) for the 'lis3dh_i2c' executable target. These formats are essential for flashing the microcontroller or debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/lis3dh_i2c/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(lis3dh_i2c)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for pico_freertos_httpd_nosys\nDESCRIPTION: Configures private compile definitions for the `pico_freertos_httpd_nosys` target. It defines the WIFI_SSID and WIFI_PASSWORD using CMake variables and passes them as string literals to the compiler, required for the application to connect to a Wi-Fi network.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(pico_freertos_httpd_nosys PRIVATE\n        WIFI_SSID=\\\"${WIFI_SSID}\\\"\n        WIFI_PASSWORD=\\\"${WIFI_PASSWORD}\\\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking Pico SDK Libraries to Executable in CMake\nDESCRIPTION: This command links essential Raspberry Pi Pico SDK libraries to the 'i2c_bus_scan' executable target. 'pico_stdlib' provides core standard library functions for Pico, and 'hardware_i2c' provides specific hardware abstraction layer functions for the I2C peripheral.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/bus_scan/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(i2c_bus_scan pico_stdlib hardware_i2c)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to bmp280_i2c Executable CMake\nDESCRIPTION: Links essential libraries, `pico_stdlib` for standard Pico SDK functions and `hardware_i2c` for I2C peripheral access, to the `bmp280_i2c` executable. These dependencies are required for the application to compile and run correctly.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/bmp280_i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(bmp280_i2c pico_stdlib hardware_i2c)\n```\n\n----------------------------------------\n\nTITLE: Linking Pico SDK Libraries (CMake)\nDESCRIPTION: Links the necessary libraries from the Pico SDK to the `adc_dma_capture` executable target. This includes standard Pico SDK libraries, specific hardware drivers (ADC, DMA, PIO), and multicore support required by the application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/dma_capture/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(adc_dma_capture\n\t\tpico_stdlib\n\t\thardware_adc\n\t\thardware_dma\n\t\t# For the dummy output:\n\t\thardware_pio\n\t\tpico_multicore\n\t\t)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target (CMake)\nDESCRIPTION: This command links the necessary libraries, `pico_stdlib` (the standard Pico SDK library) and `hardware_dma` (the hardware DMA library), to the `hello_dma` executable target. These libraries provide the functions and hardware access required by the program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/hello_dma/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_dma pico_stdlib hardware_dma)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Example in CMake\nDESCRIPTION: This Pico SDK specific CMake function automatically sets a program URL for the 'i2c_bus_scan' target. This URL is often embedded in the build output and can be used for debugging or identifying the source of the built program, particularly useful for example projects.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/bus_scan/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(i2c_bus_scan)\n```\n\n----------------------------------------\n\nTITLE: Defining Background Executable (CMake)\nDESCRIPTION: Defines the `picow_access_point_background` executable target and lists its source files (`picow_access_point.c`, `dhcpserver/dhcpserver.c`, `dnsserver/dnsserver.c`). These files contain the core logic for the access point, DHCP server, and DNS server.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/access_point/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_access_point_background\n        picow_access_point.c\n        dhcpserver/dhcpserver.c\n        dnsserver/dnsserver.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking Standard Library (CMake)\nDESCRIPTION: This command links the `pico_stdlib` library to the `hello_serial` executable target. This library provides standard functions and necessary dependencies for Raspberry Pi Pico projects, ensuring the executable can use core Pico SDK features. It's essential for basic Pico applications.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hello_world/serial/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_serial pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Link SDK Libraries to Executable in CMake\nDESCRIPTION: This command links essential libraries from the Raspberry Pi Pico SDK to the `hello_pwm` executable target. It links `pico_stdlib` for standard Pico SDK functionalities and `hardware_pwm` to enable Pulse Width Modulation features required by the example. These libraries provide necessary APIs for the application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pwm/hello_pwm/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(hello_pwm pico_stdlib hardware_pwm)\n```\n\n----------------------------------------\n\nTITLE: Add Standard Pico Build Outputs CMake\nDESCRIPTION: This command, provided by the Raspberry Pi Pico SDK CMake extensions, adds standard build outputs for the `mcp9808_i2c` target. This typically includes generating the `.uf2`, `.hex`, and `.bin` files necessary for flashing or deploying the application to the Pico device.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mcp9808_i2c/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(mcp9808_i2c)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include Subdirectory CMake\nDESCRIPTION: Checks if the `hardware_interp` target is defined. If true, the `hello_interp` subdirectory is included using `add_subdirectory_exclude_platforms`, likely containing hardware interpreter examples. If false, a message is printed to the console using `message()` explaining why the examples are skipped.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/interp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (TARGET hardware_interp)\n  add_subdirectory_exclude_platforms(hello_interp)\nelse()\n  message(\"Skipping interp examples as hardware_interp is unavailable on this platform\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Pico SDK Libraries to Target (CMake)\nDESCRIPTION: Links necessary libraries from the Pico SDK (`pico_stdlib`, `hardware_resets`, `hardware_irq`) to the `dev_lowlevel` executable target. The `PRIVATE` keyword indicates that these libraries are only required for building the target itself, not for targets that link to it.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/device/dev_lowlevel/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(dev_lowlevel PRIVATE pico_stdlib hardware_resets hardware_irq)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs (CMake)\nDESCRIPTION: Uses the Pico SDK function `pico_add_extra_outputs` to configure CMake to generate additional build artifacts like `.map`, `.bin`, and `.hex` files for the target executable. These are commonly used for flashing the device and debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/dma_capture/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(adc_dma_capture)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target (CMake)\nDESCRIPTION: This command links the necessary libraries (`pico_stdlib` and `hardware_adc`) to the `joystick_display` executable target. `pico_stdlib` provides core Pico SDK functions, and `hardware_adc` is essential for accessing the Analog-to-Digital Converter, likely used for a joystick.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/joystick_display/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(joystick_display pico_stdlib hardware_adc)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable in CMake\nDESCRIPTION: This command links specified libraries to the executable target `ssd1306_i2c`. It links against the `pico_stdlib` (Pico standard library) and `hardware_i2c` (I2C hardware abstraction layer) libraries, providing essential functions and hardware support for the application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/ssd1306_i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(ssd1306_i2c pico_stdlib hardware_i2c)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs - CMake\nDESCRIPTION: This Pico SDK-specific command configures the build system to generate additional useful output formats for the executable, such as .uf2, .bin, and .hex files, which are commonly used for flashing or analyzing microcontroller programs.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_dma/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(spi_dma)\n```\n\n----------------------------------------\n\nTITLE: Link Required Libraries to Target - CMake\nDESCRIPTION: Links essential libraries from the Pico SDK ('pico_stdlib', 'hardware_pio', 'hardware_dma') to the 'pio_logic_analyser' executable. These libraries provide necessary functions for standard operations and accessing PIO and DMA hardware features on the RP2040.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/logic_analyser/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pio_logic_analyser PRIVATE pico_stdlib hardware_pio hardware_dma)\n```\n\n----------------------------------------\n\nTITLE: Configuring Poll Execution Model - CMake\nDESCRIPTION: Configures the Bluetooth example build for a polling-based execution model. It calls the custom CMake function `picow_bt_example_poll`, linking the project name, target name, the specific polling function (`picow_bt_example_cyw43_lwip_poll`), and the Bluetooth library (`pico_btstack_ble`).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/gatt_counter_with_wifi/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example_poll(${NAME} ${TARGET_NAME} picow_bt_example_cyw43_lwip_poll pico_btstack_ble)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Build Outputs (CMake)\nDESCRIPTION: Uses a Pico SDK-specific CMake function to generate additional output file formats (such as .map, .bin, and .hex) for the specified executable target. These formats are essential for flashing or deploying the program to the Raspberry Pi Pico board.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/watchdog/hello_watchdog/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npico_add_extra_outputs(hello_watchdog)\n```\n\n----------------------------------------\n\nTITLE: Excluding Subdirectories with CMake\nDESCRIPTION: Uses the `add_subdirectory_exclude_platforms` command to add a directory to the build but exclude it if the current platform is listed in the arguments. This snippet excludes the `dvi_out_hstx_encoder` and `spi_lcd` examples when building for the 'host' or 'rp2040' platforms.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hstx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(dvi_out_hstx_encoder host rp2040)\nadd_subdirectory_exclude_platforms(spi_lcd host rp2040)\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Definitions for picow_blink_slow_clock CMake\nDESCRIPTION: Adds private compile definitions specifically for the 'picow_blink_slow_clock' target. Setting `CYW43_PIO_CLOCK_DIV_DYNAMIC=1` enables runtime modification of the CYW43 PIO clock divisor, necessary when the system clock speed changes at runtime to maintain communication.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(picow_blink_slow_clock PRIVATE\n        CYW43_PIO_CLOCK_DIV_DYNAMIC=1\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeRTOS Execution Model - CMake\nDESCRIPTION: Configures the Bluetooth example build for a FreeRTOS-based execution model. It calls the custom CMake function `picow_bt_example_freertos`, linking the project name, target name, the specific FreeRTOS function (`picow_bt_example_cyw43_lwip_freertos`), and the Bluetooth library (`pico_btstack_ble`).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/gatt_counter_with_wifi/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npicow_bt_example_freertos(${NAME} ${TARGET_NAME} picow_bt_example_cyw43_lwip_freertos pico_btstack_ble)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL in CMake\nDESCRIPTION: This snippet utilizes the 'example_auto_set_url' CMake function, commonly used in Pico SDK examples. It associates a URL with the 'flash_ssi_dma' target, typically linking to the source code repository or relevant documentation for this specific example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/ssi_dma/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(flash_ssi_dma)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries (CMake)\nDESCRIPTION: Links the `hello_adc` executable target against required libraries: `pico_stdlib` (standard Pico library) and `hardware_adc` (library for interacting with the ADC hardware). This ensures the executable can use functions from these libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/hello_adc/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_adc pico_stdlib hardware_adc)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL - CMake\nDESCRIPTION: The `example_auto_set_url` command, likely a helper function within the Pico SDK examples framework, is used to automatically set a URL associated with the program target (`flash_xip_stream`). This URL might point to online documentation or a download location.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/xip_stream/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# add url via pico_set_program_url\nexample_auto_set_url(flash_xip_stream)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target (CMake)\nDESCRIPTION: Links the required libraries 'pico_stdlib' (Pico standard library) and 'hardware_i2c' (hardware I2C driver) to the 'pcf8523_i2c' executable target. This makes necessary functions and headers available for compilation.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/pcf8523_i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pcf8523_i2c pico_stdlib hardware_i2c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Polling AP IP (CMake)\nDESCRIPTION: Sets the default static IP address for the access point interface of the `picow_access_point_poll` target. Uses the Pico SDK function `pico_configure_ip4_address` to assign the address 192.168.4.1 to the `CYW43_DEFAULT_IP_AP_ADDRESS` symbol, identical to the background version's IP.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/access_point/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\npico_configure_ip4_address(picow_access_point_poll PRIVATE\n        CYW43_DEFAULT_IP_AP_ADDRESS 192.168.4.1\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for Pico Executable using CMake\nDESCRIPTION: Configures the build system to generate additional output formats for the \"onboard_temperature\" target, such as .uf2, .hex, and .map files. These formats are commonly used for flashing the Pico or detailed debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/onboard_temperature/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(onboard_temperature)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL (CMake)\nDESCRIPTION: This command calls a helper function, likely part of the Pico examples infrastructure, to automatically associate a URL with the `hello_dma` program. This URL often points back to the example's source code or documentation within the repository.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/hello_dma/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_dma)\n```\n\n----------------------------------------\n\nTITLE: Linking Pico SDK Libraries CMake\nDESCRIPTION: Links necessary libraries from the Pico SDK to the 'dvi_out_hstx_encoder' executable. It includes libraries for standard functionality (pico_stdlib), multicore support (pico_multicore), hardware DMA access (hardware_dma), and synchronization (pico_sync).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hstx/dvi_out_hstx_encoder/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(dvi_out_hstx_encoder\n        pico_stdlib\n        pico_multicore\n        hardware_dma\n        pico_sync\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Pico Extra Build Outputs (CMake)\nDESCRIPTION: Invokes a Pico SDK specific function to generate additional build output file formats (like .uf2, .hex, .bin) for the `dev_lowlevel` executable target. This is crucial for deploying the built firmware to the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/device/dev_lowlevel/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(dev_lowlevel)\n```\n\n----------------------------------------\n\nTITLE: Setting Example URL Property - CMake\nDESCRIPTION: Utilizes the `example_auto_set_url` function, likely a helper specific to the pico-examples repository, to set a URL property for the generated program. This metadata might be used for linking to documentation or source code online.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/st7789_lcd/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pio_st7789_lcd)\n```\n\n----------------------------------------\n\nTITLE: Setting Bootloader Binary Type (CMake)\nDESCRIPTION: Sets the binary type for the `enc_bootloader` target to `no_flash`. This indicates that the binary is intended to run directly from SRAM, not XIP flash, which is typical for bootloaders loaded early.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# set as no_flash binary\npico_set_binary_type(enc_bootloader no_flash)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL (CMake)\nDESCRIPTION: This function, typically used within Pico SDK examples, automatically sets a URL property associated with the `dma_control_blocks` executable. This URL often points to the source code repository or relevant documentation for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/control_blocks/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(dma_control_blocks)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs in CMake (Pico)\nDESCRIPTION: Configures the `hello_reset` target to generate additional output files specific to the Raspberry Pi Pico build process, such as `.map`, `.bin`, and `.hex` files. These files are essential for flashing the device and debugging.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/reset/hello_reset/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_reset)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Example with CMake\nDESCRIPTION: Sets a program URL for the `bme280_spi` example. This function is part of the Pico examples framework and is typically used to link the built output back to its source location for documentation or automation purposes.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/bme280_spi/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(bme280_spi)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory with Platform Exclusion (CMake)\nDESCRIPTION: Adds the 'build_variants' subdirectory to the CMake build process. This specific command excludes the subdirectory on certain platforms, allowing for platform-specific build configurations or variants to be managed separately. It's a standard CMake command provided by the Pico SDK or a related build helper.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/cmake/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(build_variants)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL in CMake\nDESCRIPTION: Calls a helper function (likely wrapping pico_set_program_url) to automatically set the program URL for the runtime_flash_permissions target. This URL typically points to the source code location and is useful for debugging and identification.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/runtime_flash_permissions/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# add url via pico_set_program_url\nexample_auto_set_url(runtime_flash_permissions)\n```\n\n----------------------------------------\n\nTITLE: Linking Standard Library - CMake\nDESCRIPTION: Links the `pico_stdlib` library to the `picoboard_blinky` executable target. The comment indicates this pulls in common dependencies required for most Pico SDK applications. Requires the `picoboard_blinky` target to be defined and the Pico SDK installed.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/picoboard/blinky/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# pull in common dependencies\ntarget_link_libraries(picoboard_blinky pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Setting CMAKE_MODULE_PATH in CMake\nDESCRIPTION: Appends the current directory's path to the CMAKE_MODULE_PATH variable. This allows CMake to find custom modules or scripts located within the project directory, which is common practice for integrating SDK-specific build functions.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/httpd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR})\n```\n\n----------------------------------------\n\nTITLE: Add Extra Build Outputs - CMake\nDESCRIPTION: Calls the Pico SDK specific function `pico_add_extra_outputs` for the `hello_multicore` target. This command generates additional build artifacts commonly needed for embedded development, such as `.map`, `.bin`, and `.hex` files.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/hello_multicore/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_multicore)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL CMake MPU9250 SPI\nDESCRIPTION: Utilizes another Pico SDK function to embed a URL into the executable metadata. This URL often points to the source code repository or documentation for the specific example, making it easy to find the related information.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/mpu9250_spi/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(mpu9250_spi)\n```\n\n----------------------------------------\n\nTITLE: Set Program URL - CMake\nDESCRIPTION: Calls the `example_auto_set_url` function, likely a helper provided by the example build system, for the `hello_multicore` target. This function is typically used to embed a URL (e.g., to source code or documentation) within the program's metadata.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/hello_multicore/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_multicore)\n```\n\n----------------------------------------\n\nTITLE: Configuring BTstack SCO Demo Utility Library CMake\nDESCRIPTION: Defines an interface library 'pico_btstack_sco_demo_util' containing common utility functions for BTstack Synchronous Connection-Oriented (SCO) audio demos. It adds the specific utility source file to this library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(pico_btstack_sco_demo_util INTERFACE)\ntarget_sources(pico_btstack_sco_demo_util INTERFACE\n        # sco demo utils\n        ${BTSTACK_EXAMPLE_PATH}/sco_demo_util.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Output Formats in CMake\nDESCRIPTION: Uses a Pico SDK specific function to automatically generate additional output file formats (like .uf2, .bin) for the `picow_httpd_background` target, facilitating easy flashing and deployment to the Raspberry Pi Pico W device.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/httpd/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(picow_httpd_background)\n```\n\n----------------------------------------\n\nTITLE: Creating an Executable with CMake\nDESCRIPTION: Defines an executable target named `mma8451_i2c` using the `add_executable` command. It specifies the source file `mma8451_i2c.c` that will be compiled into this executable, serving as the primary build target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mma8451_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(mma8451_i2c\n      mma8451_i2c.c\n      )\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for CMake Target\nDESCRIPTION: This command links the necessary libraries to the 'mpu6050_i2c' executable target. It includes 'pico_stdlib' for standard SDK functions and 'hardware_i2c' for I2C peripheral support, essential for the MPU6050 sensor example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mpu6050_i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(mpu6050_i2c pico_stdlib hardware_i2c)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs CMake\nDESCRIPTION: Uses the Pico SDK function `pico_add_extra_outputs` to configure the build system to generate additional output formats for the `pio_clocked_input` target, such as the `.uf2` file commonly used for flashing the Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/clocked_input/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pio_clocked_input)\n```\n\n----------------------------------------\n\nTITLE: Adding spi_slave Subdirectory Conditionally (CMake)\nDESCRIPTION: Includes the 'spi_slave' example subdirectory in the project build using the custom CMake command `add_subdirectory_exclude_platforms`. This command ensures the subdirectory is only added for platforms that are not explicitly excluded, similar to the handling for 'spi_master'.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_master_slave/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(spi_slave)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Target - CMake\nDESCRIPTION: This command links necessary libraries (`pico_stdlib` for standard functions and `hardware_pio` for PIO hardware access) to the `pio_uart_tx` executable target. `PRIVATE` means these libraries are linked only for this target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/uart_tx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(pio_uart_tx PRIVATE pico_stdlib hardware_pio)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Pico Target in CMake\nDESCRIPTION: Links standard Pico SDK libraries ('pico_stdlib') and I2C hardware support ('hardware_i2c') to the previously defined 'lis3dh_i2c' executable target. This provides the necessary SDK functions and hardware drivers required by the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/lis3dh_i2c/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(lis3dh_i2c pico_stdlib hardware_i2c)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to CMake Target\nDESCRIPTION: This command links the necessary Raspberry Pi Pico SDK libraries (`pico_stdlib`, `hardware_clocks`) to the `hello_48MHz` executable target. This ensures the build process includes the required standard Pico functions and hardware clock support.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_48MHz/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_48MHz pico_stdlib hardware_clocks)\n```\n\n----------------------------------------\n\nTITLE: Adding Build Outputs CMake\nDESCRIPTION: Invokes a Pico SDK specific function to generate extra build outputs for the 'hello_otp' target, such as .map, .bin, .hex, and .uf2 files. These formats are essential for flashing and debugging on the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/otp/hello_otp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_otp)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable (CMake)\nDESCRIPTION: This command links required libraries to the `dma_control_blocks` executable. It links `pico_stdlib` for standard Pico functions and `hardware_dma` for specific DMA hardware access, making their APIs available to the executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/control_blocks/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(dma_control_blocks pico_stdlib hardware_dma)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL CMake\nDESCRIPTION: Uses the 'example_auto_set_url' function, likely a helper macro within the Pico SDK examples, to embed a URL associated with the 'hello_otp' program. This is often used for documentation or source links within example projects.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/otp/hello_otp/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_otp)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL (Pico Examples CMake)\nDESCRIPTION: Uses a Pico example-specific CMake function 'example_auto_set_url' to automatically set the program URL property for the 'pcf8523_i2c' target. This often provides a link to the source code or documentation for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/pcf8523_i2c/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pcf8523_i2c)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs for Pico in CMake\nDESCRIPTION: Uses a Pico SDK specific CMake function to generate additional build artifacts beyond the executable itself. This typically includes files like `.map`, `.bin`, and `.hex` for the specified target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/pa1010d_i2c/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(pa1010d_i2c)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target with CMake\nDESCRIPTION: This snippet defines a new executable target named `blink_simple`. It specifies that the executable is built from the source file `blink_simple.c`. This is the fundamental step to create a buildable program within the CMake project.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/blink_simple/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(\n  blink_simple\n  blink_simple.c\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Pico Example URL (CMake)\nDESCRIPTION: Calls a helper function, likely specific to the `pico-examples` project, to automatically generate and set a URL property for the `dev_lowlevel` target. This URL might point to the source code or documentation for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/device/dev_lowlevel/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(dev_lowlevel)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL with Pico SDK CMake\nDESCRIPTION: Uses a helper function (likely a macro or function provided by the Pico SDK) to set a program URL property for the 'hello_gpout' target. This URL might be used for documentation or tracking the source of the built binary.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_gpout/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_gpout)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs with CMake\nDESCRIPTION: Configures the build process to generate additional output files commonly required for embedded development, such as .map, .bin, and .hex files, for the specified target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/bme280_spi/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(bme280_spi)\n```\n\n----------------------------------------\n\nTITLE: Conditional Return - CMake\nDESCRIPTION: This CMake block checks if a target named `hardware_sha256` exists. If the target is not found, the script returns immediately, effectively disabling the build for this example in configurations where the hardware SHA256 is not available or defined.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/sha/sha256/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT TARGET hardware_sha256)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Content Library Target in CMake\nDESCRIPTION: Defines a custom library target named `pico_httpd_content`. The `NOFLAG` argument indicates this is a special target not intended for standard compilation flags but used to group content files.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/httpd/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_library(pico_httpd_content NOFLAG)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target CMake\nDESCRIPTION: Defines the executable target `lcd_1602_i2c` from the source file `lcd_1602_i2c.c`. This is the initial step in setting up a build target in CMake. It requires a source file and a target name.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/lcd_1602_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(lcd_1602_i2c\n        lcd_1602_i2c.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include Subdirectory (CMake)\nDESCRIPTION: Uses a custom or macro command `add_subdirectory_exclude_platforms` to conditionally include the specified subdirectory `host_cdc_msc_hid`. The inclusion depends on the current platform and any exclusion criteria defined elsewhere.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/host/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(host_cdc_msc_hid)\n```\n\n----------------------------------------\n\nTITLE: Configuring Background AP IP (CMake)\nDESCRIPTION: Sets the default static IP address for the access point interface of the `picow_access_point_background` target. Uses the Pico SDK function `pico_configure_ip4_address` to assign the address 192.168.4.1 to the `CYW43_DEFAULT_IP_AP_ADDRESS` symbol.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/access_point/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_configure_ip4_address(picow_access_point_background PRIVATE\n        CYW43_DEFAULT_IP_AP_ADDRESS 192.168.4.1\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Example URL CMake\nDESCRIPTION: Uses a helper function (likely from the example infrastructure) to automatically set a documentation URL associated with the `hello_pio` example target. This helps link the built output to its documentation.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hello_pio/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# add url via pico_set_program_url\nexample_auto_set_url(hello_pio)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target with CMake\nDESCRIPTION: Defines a new executable target named `hello_reset` in the CMake build system. It specifies `hello_reset.c` as the source file for this target. This is the fundamental step to tell CMake what program to build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/reset/hello_reset/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_reset\n            hello_reset.c\n            )\n```\n\n----------------------------------------\n\nTITLE: Adding Base Pico W Examples in CMake\nDESCRIPTION: Includes core example subdirectories ('blink', 'wifi_scan', 'access_point') using the add_subdirectory_exclude_platforms command. These examples are included in the build process regardless of whether WiFi credentials are configured.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(blink)\nadd_subdirectory_exclude_platforms(wifi_scan)\nadd_subdirectory_exclude_platforms(access_point)\n```\n\n----------------------------------------\n\nTITLE: Adding Standard Build Outputs - CMake\nDESCRIPTION: Configures the build system to generate common output file formats (e.g., .uf2, .elf, .bin) required for deploying and debugging the `rtc_alarm` program on the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/rtc_alarm/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(rtc_alarm)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Outputs (flash_nuke) CMake\nDESCRIPTION: Instructs the build system to generate additional output formats for the 'flash_nuke' target, such as .uf2, .hex, or .bin files, beyond the default executable.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/nuke/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(flash_nuke)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files CMake\nDESCRIPTION: Adds the main C source file, `clocked_input.c`, to the `pio_clocked_input` target. The `PRIVATE` keyword indicates that these sources are compiled only for this target and not exposed to targets linking against it.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/clocked_input/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(pio_clocked_input PRIVATE clocked_input.c)\n```\n\n----------------------------------------\n\nTITLE: Define Executable Target CMake\nDESCRIPTION: This command defines an executable target named `mcp9808_i2c` from the source file `mcp9808_i2c.c`. This is the primary application binary that will be built by the project.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mcp9808_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(mcp9808_i2c\n        mcp9808_i2c.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory Excluding Platforms (boot_info) - CMake\nDESCRIPTION: Adds the 'boot_info' subdirectory to the CMake build, but excludes it when the target platform is either 'host' or 'rp2040'. This selectively includes example projects based on the intended execution environment.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(boot_info host host rp2040)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Example using CMake\nDESCRIPTION: Invokes a project-specific macro, `example_auto_set_url`, to automatically embed a URL into the metadata of the \"onboard_temperature\" executable. This feature is specific to the `pico-examples` project structure.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/onboard_temperature/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(onboard_temperature)\n```\n\n----------------------------------------\n\nTITLE: Linking Pico Stdlib in CMake\nDESCRIPTION: Links the 'hello_gpout' executable target with the 'pico_stdlib' library. This library provides essential functions and includes required for most programs built with the Raspberry Pi Pico SDK.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_gpout/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(hello_gpout pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: This snippet defines an executable target named `dma_control_blocks` using the source file `control_blocks.c`. This command is fundamental in CMake for specifying the main output of the build process.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/control_blocks/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dma_control_blocks\n        control_blocks.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Example with CMake\nDESCRIPTION: This command, likely a custom macro for examples, automatically sets a URL property for the `pio_ir_loopback` target. This URL typically points to the source code location or documentation for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/ir_loopback/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pio_ir_loopback)\n```\n\n----------------------------------------\n\nTITLE: Add Source Files to Target - CMake\nDESCRIPTION: This command adds the source file `uart_tx.c` to the `pio_uart_tx` executable target. The `PRIVATE` keyword indicates that this source file is used only when building this specific target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/uart_tx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(pio_uart_tx PRIVATE uart_tx.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target in CMake\nDESCRIPTION: This CMake command defines an executable target named `hello_48MHz` using the specified source file `hello_48MHz.c`. This is the initial step in specifying the main program binary to be built.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_48MHz/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_48MHz\n      hello_48MHz.c\n      )\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for sniff_crc (CMake)\nDESCRIPTION: This command, likely part of the Pico SDK examples infrastructure, sets a program URL property for the `sniff_crc` target. This URL might point to the example's documentation or source code repository.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/sniff_crc/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(sniff_crc)\n```\n\n----------------------------------------\n\nTITLE: Defining Encrypted Application Executable (CMake)\nDESCRIPTION: Defines the executable target for the example encrypted application (`hello_serial_enc`). It includes the main source file `hello_serial.c`, representing the application code to be loaded and run by the bootloader.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Example binary to load\nadd_executable(hello_serial_enc\n        hello_serial.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable for sniff_crc (CMake)\nDESCRIPTION: This command defines a new executable target named `sniff_crc` using the specified source file `sniff_crc.c`. It's the first step in telling CMake how to build the main program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/sniff_crc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(sniff_crc\\n        sniff_crc.c\\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Output Formats (CMake)\nDESCRIPTION: Invokes a Pico SDK function that automatically adds standard extra build outputs for the `pio_squarewave` executable, such as `.uf2`, `.hex`, or `.bin` files.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\npico_add_extra_outputs(pio_squarewave)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Board (CMake)\nDESCRIPTION: Defines the specific board being used for the project, setting it to 'pico_sdk'. This directs the build process to use configurations appropriate for boards supported by the Pico SDK.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/host/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(BOARD pico_sdk)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target in CMake\nDESCRIPTION: This CMake command defines a new executable target named `ssd1306_i2c`. It specifies the source file(s) required to build this executable. The executable will be compiled from the `ssd1306_i2c.c` source file.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/ssd1306_i2c/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ssd1306_i2c\n        ssd1306_i2c.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target in CMake\nDESCRIPTION: Defines a new executable target named 'hello_gpout' from the specified source file 'hello_gpout.c'. This command is fundamental for creating any buildable program target in CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_gpout/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_gpout\n        hello_gpout.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Define Executable - CMake\nDESCRIPTION: Defines the executable target named `hello_multicore` and specifies its source file (`multicore.c`). This is the initial step in the CMake build process to create the executable for the Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/hello_multicore/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_multicore\n multicore.c\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Example Source URL with CMake\nDESCRIPTION: This snippet calls a function to automatically set the URL for the example's source code on GitHub. This allows tools like `picotool` to help users easily find the source code for the program running on their Pico device. It improves discoverability and ease of use.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/blink_simple/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# call pico_set_program_url to set path to example on github, so users can find the source for an example via picotool\nexample_auto_set_url(blink_simple)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Example in CMake\nDESCRIPTION: Invokes another Pico SDK example-specific CMake function, likely used to associate a URL (perhaps to the source code repository or documentation) with the built program target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/pa1010d_i2c/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pa1010d_i2c)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target CMake\nDESCRIPTION: Defines a CMake executable target named 'blink' using the source file 'blink.c'. This command specifies the primary source file that will be compiled into the executable program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/blink/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(blink\n  blink.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Bootloader Program URL (CMake)\nDESCRIPTION: Sets a program URL for the bootloader binary, likely used by the example framework to link documentation or source code. This is specific to the example setup.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# add url via pico_set_program_url\nexample_auto_set_url(enc_bootloader)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target with CMake\nDESCRIPTION: This command defines an executable target named `pio_ir_loopback` using the source file `ir_loopback.c`. This is the first step in setting up the build process for the program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/ir_loopback/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable (pio_ir_loopback ir_loopback.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target CMake\nDESCRIPTION: This command defines an executable target named `picoboard_button` using the source file `button.c`. This is the fundamental step in specifying the main program to be built by CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/picoboard/button/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picoboard_button\n        button.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Family (CMake)\nDESCRIPTION: Configures the target microcontroller family for the build system, specifying the RP2040. This is essential for selecting the correct compiler toolchain and libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/host/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FAMILY rp2040)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL Property in CMake\nDESCRIPTION: Employs another Pico-specific CMake function to automatically set the program URL property for the `hello_48MHz` target. This property can be used by debugging tools or the bootloader.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_48MHz/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_48MHz)\n```\n\n----------------------------------------\n\nTITLE: Define Executable Target (CMake)\nDESCRIPTION: Creates a new executable target named `flash_program` from the specified source file `flash_program.c`. This target is the fundamental unit for building the program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/program/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(\\n        flash_program\\n        flash_program.c\\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target (flash_nuke) CMake\nDESCRIPTION: Defines the executable target named 'flash_nuke' using the specified source file. This is the primary build artifact that will be created.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/nuke/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(flash_nuke\n        nuke.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Include Pico SDK and Extras - CMake\nDESCRIPTION: Includes the necessary CMake scripts provided by the Raspberry Pi Pico SDK and optional extras. These scripts define functions, variables, and targets required for building Pico projects.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(pico_sdk_import.cmake)\ninclude(pico_extras_import_optional.cmake)\n```\n\n----------------------------------------\n\nTITLE: Linking Standard Library in CMake\nDESCRIPTION: Links the pico_stdlib library to the runtime_flash_permissions executable target. This provides the necessary standard library functions and SDK components required by the application.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/runtime_flash_permissions/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(runtime_flash_permissions pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target CMake\nDESCRIPTION: Defines a CMake executable target named 'dvi_out_hstx_encoder' using the specified source file 'dvi_out_hstx_encoder.c'. This command initiates the build configuration for this particular program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/hstx/dvi_out_hstx_encoder/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dvi_out_hstx_encoder\n        dvi_out_hstx_encoder.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable in CMake\nDESCRIPTION: Configures CMake to create an executable target named `adc_console` using the specified source file. This is the fundamental step to define a buildable program in CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/adc_console/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(adc_console\n        adc_console.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: Defines the `hello_adc` executable target in CMake, specifying its source file `hello_adc.c`. This is the fundamental step to tell CMake what program to build.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/hello_adc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_adc\n        hello_adc.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Example Variables and Target Name - CMake\nDESCRIPTION: Sets the internal project name variable 'NAME' and then uses a custom CMake function to generate the specific build target name 'TARGET_NAME', incorporating the project name and indicating Wi-Fi integration. This defines the core build artifact's identifier.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/gatt_streamer_server_with_wifi/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(NAME gatt_streamer_server)\npicow_bt_example_target_name(${NAME}_with_wifi TARGET_NAME)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL Property - CMake\nDESCRIPTION: Uses a helper function `example_auto_set_url` to automatically set a URL property for the `rtc_alarm` executable. This property might be used for documentation or identification purposes.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/rtc_alarm/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(rtc_alarm)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL (CMake)\nDESCRIPTION: An optional command provided by the Pico SDK build system to set a URL property for the executable target. This can be used for tracking the source or example location.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/hello_uart/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_uart)\n```\n\n----------------------------------------\n\nTITLE: Setting Example URL Property - CMake\nDESCRIPTION: This command, likely specific to the pico-examples project, sets a URL property associated with the 'spi_dma' target. This property might be used by build tools or documentation generators to link to the example's online source code or description.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/spi_dma/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(spi_dma)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL Property (CMake)\nDESCRIPTION: This command uses a helper function (likely specific to the pico-examples repository) to set a URL property for the `narrow_io_write` target. This property often points to the online location of the example's source code for easy reference.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/narrow_io_write/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(narrow_io_write)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Second Target (CMake)\nDESCRIPTION: Sets a URL property for the `pio_squarewave_div_sync` executable, typically linking back to the example's location.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nexample_auto_set_url(pio_squarewave_div_sync)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Output Formats for Pico\nDESCRIPTION: Utilizes a Pico-specific CMake function to generate additional build output formats like `.uf2`, `.hex`, `.bin`, and `.map` files for the `hello_48MHz` target. These formats are commonly used for flashing the executable onto the Raspberry Pi Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_48MHz/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_48MHz)\n```\n\n----------------------------------------\n\nTITLE: Generating Extra Output Files for Pico using CMake\nDESCRIPTION: This command instructs the CMake build system, using Pico SDK functions, to generate additional output file formats for the `hello_dcp` executable. These typically include a memory map (.map), binary (.bin), and Intel HEX (.hex) file, useful for debugging and flashing the device.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dcp/hello_dcp/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(hello_dcp)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Build Outputs CMake\nDESCRIPTION: Uses a Pico-specific CMake function to add extra build outputs for the `lcd_1602_i2c` target, such as `.map`, `.bin`, and `.hex` files, which are commonly used for microcontrollers.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/lcd_1602_i2c/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(lcd_1602_i2c)\n```\n\n----------------------------------------\n\nTITLE: Define Function to Generate C Include from Text - CMake\nDESCRIPTION: Defines a CMake function `make_sample_inc` that takes an input text file and a target name. It creates a custom build command to read the text file, escape its contents, and write them into a C include file (`.inc`) as a static character array. A custom target is created depending on this generated file.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/sha/sha256/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(make_sample_inc input_filename target_name)\n    # Write script file to run later, to generate the inc file\n    file(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/generated/inc.cmake\"\n        \"file(READ \\${input_file} content)\\n\"\n        \"file(WRITE \\${output_file} \\\"static const char sample_txt[] = { \\\\\\\\\\\\\\\"\\\\\\${content}\\\\\\\\\\\\\\\" };\\\\\\\"\\\")\"\n        )\n    # Add command to run this whenever input_filename changes\n    get_filename_component(input_file \"${input_filename}\" REALPATH)\n    set(output_file \"${CMAKE_CURRENT_BINARY_DIR}/generated/${input_filename}.inc\")\n    add_custom_command(OUTPUT ${output_file}\n        COMMAND ${CMAKE_COMMAND} -Dinput_file:FILEPATH=${input_file} -Doutput_file:FILEPATH=${output_file} -P \"${CMAKE_CURRENT_BINARY_DIR}/generated/inc.cmake\"\n        DEPENDS ${input_filename})\n    add_custom_target(${target_name} DEPENDS ${output_file})\nendfunction(make_sample_inc)\n```\n\n----------------------------------------\n\nTITLE: Adding Comprehensive BTstack Example (All Variants) in CMake\nDESCRIPTION: Defines the primary CMake function to add a BTstack example. It generates the default target name and then calls the specific functions (`_poll`, `_background`, `_freertos`) to potentially add the example executable for each supported environment, passing necessary variant libraries and extra libraries.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(picow_bt_example NAME)\n        picow_bt_example_target_name(${NAME} TARGET_NAME)\n        picow_bt_example_poll(${NAME} ${TARGET_NAME} picow_bt_example_no_cyw43_lwip_poll pico_btstack_ble pico_btstack_classic ${ARGN})\n        picow_bt_example_background(${NAME} ${TARGET_NAME} picow_bt_example_no_cyw43_lwip_background pico_btstack_ble pico_btstack_classic ${ARGN})\n        picow_bt_example_freertos(${NAME} ${TARGET_NAME} picow_bt_example_no_cyw43_lwip_freertos pico_btstack_ble pico_btstack_classic ${ARGN})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting BTstack Directory Variables CMake\nDESCRIPTION: Sets CMake variables pointing to the root, example, and third-party directories of the BTstack library within the PICO SDK, along with a variable for the current example directory. These variables are used throughout the file to reference source files and includes.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BTSTACK_ROOT ${PICO_SDK_PATH}/lib/btstack)\nset(BTSTACK_EXAMPLE_PATH ${BTSTACK_ROOT}/example)\nset(BTSTACK_3RD_PARTY_PATH ${BTSTACK_ROOT}/3rd-party)\nset(BT_EXAMPLE_COMMON_DIR \"${CMAKE_CURRENT_LIST_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Example CMake\nDESCRIPTION: Employs a common helper function often found in Pico SDK examples to automatically set the `PROGRAM_URL` property for the executable target. This property typically stores a URL pointing to the example's source code repository or online documentation.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/max7219_32x8_spi/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(max7219_32x8_spi)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL (CMake)\nDESCRIPTION: This command, likely a helper macro provided within the Pico SDK examples, automatically sets a URL property for the 'hello_double_tap' target. This URL typically points to the online location of the source code for the example, which can be embedded in the final binary for easy reference.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/hello_double_tap/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_double_tap)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL in CMake (Pico Example)\nDESCRIPTION: Sets a program URL for the `hello_reset` target using a helper function `example_auto_set_url`. This typically populates the `PICO_PROGRAM_URL` variable, which can be embedded in the binary or used by tools to link to source code or documentation.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/reset/hello_reset/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_reset)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Target in CMake\nDESCRIPTION: Uses an example-specific CMake function ('example_auto_set_url') provided by the Pico SDK examples framework to set a URL property for the built program. This URL typically links back to the example's source code location.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/lis3dh_i2c/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(lis3dh_i2c)\n```\n\n----------------------------------------\n\nTITLE: Set Example URL Metadata in CMake\nDESCRIPTION: This command likely calls a helper function specific to the `pico-examples` project structure. Its purpose is to associate a URL with the `hello_pwm` executable target, potentially for linking back to the source code repository or documentation page for this specific example. It adds metadata to the build output.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pwm/hello_pwm/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nexample_auto_set_url(hello_pwm)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL CMake\nDESCRIPTION: Uses a Pico-examples specific function to automatically set a program URL for the `lcd_1602_i2c` target, typically linking to the source code repository. This is useful for examples to provide context.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/lcd_1602_i2c/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(lcd_1602_i2c)\n```\n\n----------------------------------------\n\nTITLE: Setting LwIP Source File Compiler Options CMake\nDESCRIPTION: This command sets specific compile options for a single source file within the LwIP library itself. It disables the `-Wno-unused-result` warning specifically for the `altcp_tls_mbedtls.c` file, indicating this warning might occur in the upstream LwIP code but is being explicitly ignored here.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/http_client/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(\n        ${PICO_LWIP_PATH}/src/apps/altcp_tls/altcp_tls_mbedtls.c\n        PROPERTIES\n        COMPILE_OPTIONS \"-Wno-unused-result\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Generate Extra Build Outputs (CMake)\nDESCRIPTION: Uses the 'pico_add_extra_outputs' function to generate additional binary formats (like .map, .bin, .hex) for the specified executable target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/blink_any/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npico_add_extra_outputs(blink_any)\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Outputs for Second Target (CMake)\nDESCRIPTION: Adds standard extra build output formats for the `pio_squarewave_div_sync` executable using a Pico SDK function.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\npico_add_extra_outputs(pio_squarewave_div_sync)\n```\n\n----------------------------------------\n\nTITLE: Enable UART StdIO CMake\nDESCRIPTION: Enables standard input/output (stdio) functionality for the `hello_universal` target using the UART interface. The `1` indicates that UART stdio is enabled.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/hello_universal/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npico_enable_stdio_uart(hello_universal 1)\n```\n\n----------------------------------------\n\nTITLE: Define Executable Target - CMake\nDESCRIPTION: This command defines a new executable target named `pio_uart_tx`. This target will represent the final executable program built by CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/uart_tx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pio_uart_tx)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version - CMake\nDESCRIPTION: Specifies the minimum required version of CMake to build the project. This ensures compatibility with the CMake commands and features used in the script.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\n```\n\n----------------------------------------\n\nTITLE: Define Executable Target (CMake)\nDESCRIPTION: Defines the executable target named 'blink_any' using the specified source file. This is the primary output target for the build process.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/blink_any/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(blink_any\n    blink_any.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: Creates an executable target named `pio_squarewave` within the CMake project. This target represents the primary application build output.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(pio_squarewave)\n```\n\n----------------------------------------\n\nTITLE: Embedding Partition Table in Bootloader (CMake)\nDESCRIPTION: Embeds a partition table (`enc-pt.json`) into the bootloader binary. This partition table defines the layout of flash memory, indicating where different sections (like the encrypted application) are located, allowing the bootloader to find and load them.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# add partition table\npico_embed_pt_in_binary(enc_bootloader ${CMAKE_CURRENT_LIST_DIR}/enc-pt.json)\n```\n\n----------------------------------------\n\nTITLE: Setting Example URL CMake\nDESCRIPTION: This Pico SDK specific command is often used in example projects to embed a URL (likely pointing to the source code or documentation) into the build output. This helps users find more information about the example program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/quadrature_encoder/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pio_quadrature_encoder)\n```\n\n----------------------------------------\n\nTITLE: Set Program URL Property (Pico SDK CMake)\nDESCRIPTION: Uses a helper function specific to the Pico examples framework to automatically set a URL property associated with the `flash_program` target. This URL typically points to the source code or documentation for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/program/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(flash_program)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL CMake\nDESCRIPTION: Sets a program URL property for the `hello_resus` target using a helper function `example_auto_set_url`. This is often used within the Pico SDK example framework to associate the build with documentation or source links.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/hello_resus/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_resus)\n```\n\n----------------------------------------\n\nTITLE: Set Example Program URL - CMake\nDESCRIPTION: This command, likely a custom function or macro, sets a URL property for the `pio_uart_tx` target, typically pointing to the online source code location for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/uart_tx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pio_uart_tx)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL (CMake)\nDESCRIPTION: Uses a helper function `example_auto_set_url` (likely defined elsewhere in the examples' CMake structure) to automatically set the program URL for the `hello_adc` target. This URL might point to the example source or documentation.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/hello_adc/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_adc)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL Metadata - CMake\nDESCRIPTION: Invokes the Pico SDK example helper function `example_auto_set_url` for the `picoboard_blinky` target. The comment suggests it uses `pico_set_program_url` internally to embed metadata containing a URL, often linking back to the example's source code. Requires the `picoboard_blinky` target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/picoboard/blinky/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# add url via pico_set_program_url\nexample_auto_set_url(picoboard_blinky)\n```\n\n----------------------------------------\n\nTITLE: Set Program URL CMake\nDESCRIPTION: This command uses a Pico SDK helper function to automatically set a program URL property for the 'hello_rtc' target. This URL typically points to the example's source code repository or documentation page.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/rtc/hello_rtc/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_rtc)\n```\n\n----------------------------------------\n\nTITLE: Set Example Program URL - CMake\nDESCRIPTION: Automatically sets a program URL for the 'pio_logic_analyser' example. This function typically embeds a URL into the build output, allowing users to easily find documentation or source code for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/logic_analyser/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pio_logic_analyser)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Example in CMake\nDESCRIPTION: This function, often used in Pico examples, sets a URL property for the executable target. This URL typically points to the source code repository or a documentation page for the example, aiding in traceability.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/ssd1306_i2c/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(ssd1306_i2c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Picow BT Example No CYW43 LWIP Poll CMake\nDESCRIPTION: Defines an interface library for examples that do not use CYW43 LWIP and operate in a polling architecture. It adds the common poll source file and links the base no-cyw43-lwip library and the pico_cyw43_arch_poll library.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(picow_bt_example_no_cyw43_lwip_poll INTERFACE)\ntarget_sources(picow_bt_example_no_cyw43_lwip_poll INTERFACE\n        ${BT_EXAMPLE_COMMON_DIR}/picow_bt_example_poll.c\n        )\ntarget_link_libraries(picow_bt_example_no_cyw43_lwip_poll INTERFACE\n        picow_bt_example_no_cyw43_lwip\n        pico_cyw43_arch_poll\n        )\n```\n\n----------------------------------------\n\nTITLE: Building hello_universal Target (CMake)\nDESCRIPTION: This command calls the `add_universal_target` function to build the `hello_universal` example as a universal binary. It specifies the target name `hello_universal` and the source directory `${CMAKE_CURRENT_LIST_DIR}/hello_universal`. This will generate a combined binary and UF2 file for this specific example project.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_universal_target(hello_universal\n    ${CMAKE_CURRENT_LIST_DIR}/hello_universal\n    )\n```\n\n----------------------------------------\n\nTITLE: Suppressing BTstack Warnings in CMake\nDESCRIPTION: Calls a custom CMake command `suppress_btstack_warnings`.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/CMakeLists.txt#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nsuppress_btstack_warnings()\n```\n\n----------------------------------------\n\nTITLE: Set Program URL for Example CMake\nDESCRIPTION: This command, likely a helper function specific to the Pico examples CMake setup, automatically sets a URL property for the `mcp9808_i2c` target. This URL is often used to point to the online location of the example's source code for documentation purposes.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/mcp9808_i2c/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(mcp9808_i2c)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL CMake\nDESCRIPTION: Uses the `example_auto_set_url` function (likely a custom macro or function in the examples) to automatically set a URL property for the `pio_clocked_input` target. This is typically used to link the built binary back to its source location or documentation page.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/clocked_input/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pio_clocked_input)\n```\n\n----------------------------------------\n\nTITLE: Setting Application Program URL (CMake)\nDESCRIPTION: Sets a program URL for the application binary, likely used by the example framework to link documentation or source code. This is specific to the example setup.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n# add url via pico_set_program_url\nexample_auto_set_url(hello_serial_enc)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL with CMake (Pico Examples)\nDESCRIPTION: This function, likely specific to the Pico examples project, associates a URL with the `clocks_detached_clk_peri` program. This URL potentially points to the example's source code repository or documentation, aiding in referencing the origin of the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/clocks/detached_clk_peri/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(clocks_detached_clk_peri)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target in CMake\nDESCRIPTION: This snippet links necessary libraries to the 'flash_ssi_dma' executable target. It includes core Pico SDK libraries like 'pico_stdlib', 'hardware_dma' for DMA operations, and 'hardware_sync' for synchronization, which are prerequisites for the example's functionality.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/ssi_dma/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n  flash_ssi_dma\n  pico_stdlib\n  hardware_dma\n  hardware_sync\n)\n```\n\n----------------------------------------\n\nTITLE: Building nuke_universal Target (CMake)\nDESCRIPTION: This command calls `add_universal_target` for the `flash/nuke` example, naming the universal target `nuke_universal`. It sets `SOURCE_TARGET` to `flash_nuke` and critically sets `PACKADDR` to `0x20000000`, indicating that this binary is intended to be loaded into SRAM (as noted in the comment).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_universal_target(nuke_universal\n    ${CMAKE_CURRENT_LIST_DIR}/../flash/nuke\n    SOURCE_TARGET flash_nuke\n    PACKADDR 0x20000000\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name - CMake\nDESCRIPTION: Defines a CMake variable `NAME` and assigns it the value `gatt_counter`. This variable is used throughout the file to reference the project name when defining targets and configurations.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/bt/gatt_counter_with_wifi/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(NAME gatt_counter)\n```\n\n----------------------------------------\n\nTITLE: Configuring OTP Output File for Bootloader (CMake)\nDESCRIPTION: Configures the output file where OTP key data will be placed for the `enc_bootloader`. This function is likely part of the Pico SDK's bootloader support, specifying where key-related information should be linked.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# configure otp output\npico_set_otp_key_output_file(enc_bootloader ${CMAKE_CURRENT_BINARY_DIR}/otp.json)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Example with CMake\nDESCRIPTION: Uses a helper function specific to the pico-examples repository to automatically set the program URL metadata for the 'hello_7segment' target. This URL often points to the online location of the example's source code or documentation.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/gpio/hello_7segment/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_7segment)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL (CMake)\nDESCRIPTION: Calls a custom CMake function, likely specific to the Pico SDK example structure, to associate a URL with the target executable. This might be used for documentation or example indexing purposes, providing a quick link to the example's source or description.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/watchdog/hello_watchdog/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nexample_auto_set_url(hello_watchdog)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for picow_blink_fast_clock CMake\nDESCRIPTION: Sets the program URL for the 'picow_blink_fast_clock' target using the `example_auto_set_url` helper function, assisting in referencing source code or documentation during development for this clock speed variant.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(picow_blink_fast_clock)\n```\n\n----------------------------------------\n\nTITLE: Set Program URL for bmp280_i2c CMake\nDESCRIPTION: Invokes the `example_auto_set_url` macro, which automatically sets a program URL property for the `bmp280_i2c` target. This is a convention in Pico examples, often used for documentation or integration with build tools.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/bmp280_i2c/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(bmp280_i2c)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Example in CMake\nDESCRIPTION: This command uses another Pico SDK specific function to automatically set a URL for the `uart_advanced` program target. This is often used in examples to embed information about where the example source code or documentation can be found, making it easier to locate resources for the built program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/uart_advanced/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(uart_advanced)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL (flash_nuke) CMake\nDESCRIPTION: Uses a helper function to automatically set a URL associated with the 'flash_nuke' program. This typically links back to the source location or documentation for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/nuke/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(flash_nuke)\n```\n\n----------------------------------------\n\nTITLE: Set Program URL (CMake)\nDESCRIPTION: Uses the 'example_auto_set_url' function to automatically set a URL property associated with the executable target. This property can be used by other tools or scripts.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/blink_any/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(blink_any)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Example in CMake\nDESCRIPTION: Uses a custom CMake function (likely defined within the pico-examples project) to automatically set a URL property for the `max7219_8x7seg_spi` target. This URL might point to documentation or the source code location for the example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/max7219_8x7seg_spi/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(max7219_8x7seg_spi)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for picow_blink CMake\nDESCRIPTION: Uses a helper function (`example_auto_set_url`) to set the program URL property for the 'picow_blink' target, likely pointing to the example's source location or documentation, which can be useful for development environments.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(picow_blink)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Target (CMake)\nDESCRIPTION: Calls a macro example_auto_set_url (likely defined elsewhere in the project) to automatically set a URL property for the flash_cache_perfctr target. This URL might point to the example's documentation or source code repository, often used by development tools or documentation generators.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/cache_perfctr/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(flash_cache_perfctr)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for sniff_crc (CMake)\nDESCRIPTION: This command links the specified libraries (`pico_stdlib` and `hardware_dma`) to the `sniff_crc` executable target. These libraries provide essential functions and hardware access needed by the program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/dma/sniff_crc/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(sniff_crc pico_stdlib hardware_dma)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory Nec Receive Library CMake\nDESCRIPTION: Configures the CMake build process to include the 'nec_receive_library' directory. This command adds the subdirectory containing the NEC receive library source files and CMakeLists.txt to the build, potentially excluding it on specific platforms as defined elsewhere.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/ir_nec/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory_exclude_platforms(nec_receive_library)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Second Target (CMake)\nDESCRIPTION: Specifies the source files (e.g., `squarewave_div_sync.c`) required to build the `pio_squarewave_div_sync` executable target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/squarewave/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(pio_squarewave_div_sync PRIVATE\n    squarewave_div_sync.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Example URL Property (CMake)\nDESCRIPTION: This CMake command, specific to the pico-examples project, automatically sets a URL property for the `multicore_runner_queue` executable. This feature, likely using `pico_set_program_url` internally, helps link the built executable to its source location or documentation URL for project tracking.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/multicore/multicore_runner_queue/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# add url via pico_set_program_url\nexample_auto_set_url(multicore_runner_queue)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL CMake\nDESCRIPTION: This command uses a helper function, likely defined elsewhere for examples, to set a URL property associated with the `picoboard_button` target. This URL often points to documentation or source code online and is useful for example projects.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/picoboard/button/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(picoboard_button)\n```\n\n----------------------------------------\n\nTITLE: Setting Example URL - CMake\nDESCRIPTION: Calls an example-specific CMake function (`example_auto_set_url`) to automatically set a URL property for the `pio_hub75` target. In Pico SDK examples, this is often used to embed a URL to the source code location within the build output for easy reference.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/hub75/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pio_hub75)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for picow_blink_slow_clock CMake\nDESCRIPTION: Sets the program URL for the 'picow_blink_slow_clock' target using the `example_auto_set_url` helper function, aiding in development and documentation linking for this specific clock speed version.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(picow_blink_slow_clock)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for PWM Executable CMake\nDESCRIPTION: Calls a macro or function `example_auto_set_url` to automatically assign a URL to the `pwm_measure_duty_cycle` executable. This URL often points to the example's source code or documentation within the Pico examples repository, aiding in identifying and locating the specific example program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pwm/measure_duty_cycle/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pwm_measure_duty_cycle)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL Metadata with CMake\nDESCRIPTION: This command, likely a custom macro provided within the Pico examples repository, sets metadata for the `pio_manchester_encoding` target, specifically related to its source code URL. This URL is often embedded into the output files, such as the `.uf2` file, allowing users to easily find the original source code for the example project online. It's helpful for documentation and discoverability.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pio/manchester_encoding/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(pio_manchester_encoding)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL for Pico Example in CMake\nDESCRIPTION: Sets a URL property for the `adc_console` target, likely pointing to documentation or source code online. This function is part of the Pico SDK's example infrastructure.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/adc/adc_console/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(adc_console)\n```\n\n----------------------------------------\n\nTITLE: Setting Program URL - CMake\nDESCRIPTION: Calls a macro (likely 'example_auto_set_url') to associate a URL with the 'hello_timer' program. This might be used for documentation or project tracking purposes within the Pico SDK examples.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/timer/hello_timer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexample_auto_set_url(hello_timer)\n```\n\n----------------------------------------\n\nTITLE: Generating 32-byte AES Key (bash)\nDESCRIPTION: Creates a 32-byte binary file named `privateaes.bin` filled with random data obtained from `/dev/urandom`. This file serves as the AES key used for encrypting the firmware binaries. Requires the `dd` command available on the system.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/urandom of=privateaes.bin bs=1 count=32\n```\n\n----------------------------------------\n\nTITLE: Configure Universal Example Build with CMake\nDESCRIPTION: This CMake snippet configures the build process for creating universal binary examples within the Raspberry Pi Pico SDK context. It dynamically selects the appropriate toolchain (ARM or RISC-V) based on `PICO_PLATFORM`, clears environment variables (`PICO_BOARD`, `PICO_GCC_TRIPLE`) that might interfere, includes the necessary Pico SDK CMake files, enforces a minimum SDK version, enables a specific CRT0 block for picobin, and overrides the `pico_add_extra_outputs` function to handle packaging for non-RP2040 platforms and `no_flash` binaries. It requires the Pico SDK to be included and expects variables like `PICO_EXAMPLES_PATH`, `UNIVERSAL_PROJECT_DIR`, and `UNIVERSAL_BINARY_DIR` to be defined.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/universal/wrapper/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# This wrapper CMakeLists.txt file is required to add the top-level CMakeLists.txt\n# setup for each build. This is very similar to the top-level CMakeLists.txt file\n# in pico-examples, with some added bits to ensure it can be turned into a universal\n# binary.\ncmake_minimum_required(VERSION 3.12)\n\n# Setup toolchain and compiler\nif (PICO_PLATFORM MATCHES riscv)\n    set(PICO_TOOLCHAIN_PATH ${PICO_RISCV_TOOLCHAIN_PATH})\nelse()\n    set(PICO_TOOLCHAIN_PATH ${PICO_ARM_TOOLCHAIN_PATH})\nendif()\n\n# Clear any environment variables that may break the build\nif (DEFINED ENV{PICO_BOARD})\n    message(WARNING \"Unsetting environment variable PICO_BOARD=$ENV{PICO_BOARD} for universal builds\")\n    unset(ENV{PICO_BOARD})\nendif()\n\nif (DEFINED ENV{PICO_GCC_TRIPLE})\n    message(WARNING \"Unsetting environment variable PICO_GCC_TRIPLE=$ENV{PICO_GCC_TRIPLE} for universal builds\")\n    unset(ENV{PICO_GCC_TRIPLE})\nendif()\n\n# Set PICO_BOARD if defined\nif (PICO_BOARD_RP2040 AND (PICO_PLATFORM MATCHES rp2040))\n    set(PICO_BOARD ${PICO_BOARD_RP2040})\nelseif(PICO_BOARD_RP2350 AND (PICO_PLATFORM MATCHES rp2350))\n    set(PICO_BOARD ${PICO_BOARD_RP2350})\nendif()\n\n# Pull in SDK (must be before project)\ninclude(${PICO_EXAMPLES_PATH}/pico_sdk_import.cmake)\n\nproject(universal_wrapper C CXX ASM)\n\nif (PICO_SDK_VERSION_STRING VERSION_LESS \"2.0.0\")\nmessage(FATAL_ERROR \"Raspberry Pi Pico SDK version 2.0.0 (or later) required. Your version is ${PICO_SDK_VERSION_STRING}\")\nendif()\n\n# Initialize the SDK\npico_sdk_init()\n\ninclude(${PICO_EXAMPLES_PATH}/example_auto_set_url.cmake)\n\n# Ensure a picobin block is present, even on RP2040, so it can be linked into the block loop\ntarget_compile_definitions(pico_crt0 INTERFACE PICO_CRT0_INCLUDE_PICOBIN_BLOCK=1)\n\n# Redefine this to ensure no_flash binaries are packaged\nfunction(pico_add_extra_outputs TARGET)\n    if (NOT (PICO_PLATFORM MATCHES rp2040))\n        get_target_property(BINARY_TYPE ${SOURCE_TARGET} PICO_TARGET_BINARY_TYPE)\n        if (${BINARY_TYPE} STREQUAL \"no_flash\")\n            message(\"Packaging no_flash universal binary to SRAM, so it has a load_map\")\n            pico_package_uf2_output(${SOURCE_TARGET} 0x20000000)\n        endif()\n    endif()\n    _pico_add_extra_outputs(${SOURCE_TARGET})\nendfunction()\n\n# Build the binary\nadd_subdirectory(${UNIVERSAL_PROJECT_DIR} ${UNIVERSAL_BINARY_DIR})\n\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Application (CMake)\nDESCRIPTION: Links necessary standard Pico SDK libraries (`pico_stdlib`) to the application executable. This provides standard functions and utilities for the application to use.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/encrypted/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# pull in common dependencies\ntarget_link_libraries(hello_serial_enc pico_stdlib)\n```\n\n----------------------------------------\n\nTITLE: Set Boolean Variable on Connected Pico Device (shell)\nDESCRIPTION: Illustrates how to change a boolean configurable variable (`use_uart`) directly on a connected Raspberry Pi Pico device using `picotool config` with the `-s` flag. This allows modifying program behavior on a running device without needing to reflash.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ picotool config -s use_uart 0\n```\n\n----------------------------------------\n\nTITLE: View Configurable Variables in Pico Binary File (shell)\nDESCRIPTION: Demonstrates how to use `picotool` to display the configurable variables (`bi_ptr` variables) embedded within specific Raspberry Pi Pico `.uf2` binary files. This command reveals the names and current values of settings exposed by the program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ picotool blink_any.uf2\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ picotool config hello_anything.uf2\n```\n\n----------------------------------------\n\nTITLE: Adding pico_freertos_httpd_nosys Executable Target\nDESCRIPTION: Defines a new executable target named `pico_freertos_httpd_nosys` using the specified source file. This target represents the HTTP server example configured to use lwIP in 'nosys' mode (without an operating system abstraction layer).\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/freertos/httpd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pico_freertos_httpd_nosys\n        pico_freertos_httpd.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target picow_blink_slow_clock CMake\nDESCRIPTION: Defines the CMake executable target named 'picow_blink_slow_clock' using its corresponding source file. This target represents a version of the blink example configured to run the system clock slower.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/blink/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(picow_blink_slow_clock\n        picow_blink_slow_clock.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: This CMake command defines a new executable target named 'hello_double_tap'. It specifies 'hello_double_tap.c' as the primary source file to be compiled for this target, initiating the build definition process.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/system/hello_double_tap/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_double_tap\n      hello_double_tap.c\n      )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable and Source - CMake\nDESCRIPTION: This command defines a new executable target named `flash_xip_stream`. It specifies `flash_xip_stream.c` as the source file for this executable. This is the fundamental step required to create a buildable program target in CMake.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/flash/xip_stream/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(flash_xip_stream\n        flash_xip_stream.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining PWM Duty Cycle Executable Target CMake\nDESCRIPTION: Defines a CMake executable target named `pwm_measure_duty_cycle`. This target is compiled from the source file `measure_duty_cycle.c`, which contains the main program logic for measuring PWM duty cycle on the Raspberry Pi Pico. It's the fundamental step in configuring the build for this example.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/pwm/measure_duty_cycle/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(pwm_measure_duty_cycle\n      measure_duty_cycle.c\n      )\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Source File in CMake\nDESCRIPTION: This snippet defines an executable target named 'i2c_bus_scan' and specifies the source file 'bus_scan.c' that will be compiled to create it. This is a standard CMake command to declare a new executable target.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/i2c/bus_scan/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(i2c_bus_scan\n        bus_scan.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target with CMake\nDESCRIPTION: Defines the executable target named `bme280_spi` using the specified source file. This is the initial step in declaring the program to be built.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/spi/bme280_spi/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(bme280_spi\n bme280_spi.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target (CMake)\nDESCRIPTION: Defines a new executable target named 'hello_uart' using the specified source file 'hello_uart.c'. This command tells CMake to create a build target for this program.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/uart/hello_uart/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(hello_uart\n        hello_uart.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting TinyUSB Root Path Variable (CMake)\nDESCRIPTION: Creates a CMake variable `TOP` and assigns it the value of `PICO_TINYUSB_PATH`. This provides a convenient alias or reference to the TinyUSB library root directory within the build script.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/usb/host/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(TOP ${PICO_TINYUSB_PATH})\n```\n\n----------------------------------------\n\nTITLE: View Configurable Variables on Connected Pico Device (shell)\nDESCRIPTION: Demonstrates using `picotool config` without specifying a file to view the configurable variables currently loaded in RAM on a connected Raspberry Pi Pico device. This allows inspecting runtime settings of the program running on the Pico.\nSOURCE: https://github.com/raspberrypi/pico-examples/blob/master/binary_info/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ picotool config\n```"
  }
]