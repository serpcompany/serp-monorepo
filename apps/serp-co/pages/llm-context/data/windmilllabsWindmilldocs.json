[
  {
    "owner": "windmill-labs",
    "repo": "windmilldocs",
    "content": "TITLE: Python Resource Type Definition\nDESCRIPTION: This Python code snippet demonstrates how to define a resource type in Python as a dictionary. The type hint is used for the Windmill parser to recognize the type as a resource type. This is equivalent to defining a resource type in TypeScript.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/13_json_schema_and_parsing/index.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmy_resource_type = dict\n\ndef main(x: my_resource_type):\n  ...\n```\n\n----------------------------------------\n\nTITLE: Returning Render All - TypeScript\nDESCRIPTION: This snippet shows how to return a rendering of all supported formats simultaneously. It utilizes the \"render_all\" key, expecting an array of objects, with keys specifying the render format and the corresponding data (e.g., JSON and table).  This allows to display the combination of data from different formats.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"render_all\": [ { \"json\": { \"a\": 1 } }, { \"table-col\": { \"foo\": [42, 8], \"bar\": [38, 12] }} ] }\n```\n\n----------------------------------------\n\nTITLE: Basic Greeting Script in Python Using a Main Function\nDESCRIPTION: This minimal Python script defines a main function with a single string parameter representing a user name. It prints a personalized greeting message and returns the name string. This example illustrates the simplest form of a Windmill Python script with a main function for entry point and output suitable for further processing in flows or apps. It emphasizes the required structure of Windmill scripts and the use of function parameters to capture input.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/2_python_quickstart/index.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str):\n  print(\"Hello world. Oh, it's you {}? Greetings!\".format(name))\n  return name\n```\n\n----------------------------------------\n\nTITLE: Sample C# Script with Humanizer Library\nDESCRIPTION: This snippet demonstrates a basic C# script implementing a Main method with various functionalities like pluralizing words, generating random numbers, humanizing time spans and dates, and converting numbers to words. It shows how to structure a script with input parameters, dependencies, and output logic in Windmill, emphasizing the importance of the Main function as the script entry point.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/11_csharp_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#r \"nuget: Humanizer, 2.14.1\"\n\nusing System;\nusing System.Linq;\nusing Humanizer;\n\n\nclass Script\n{\n    public static DateTime Main(string[] extraWords, string word = \"clue\", int highNumberThreshold = 50)\n    {\n        Console.WriteLine(\"Hello, World!\");\n\n        Console.WriteLine(\"Your chosen words are pluralized here:\");\n\n        string[] newWordArray = extraWords.Concat(new[] { word }).ToArray();\n\n        foreach (var s in newWordArray)\n        {\n            Console.WriteLine($\"  {s.Pluralize()}\");\n        }\n\n        var random = new Random();\n        int randomNumber = random.Next(1, 101);\n\n        Console.WriteLine($\"Random number: {randomNumber}\");\n\n        string greeting = randomNumber > highNumberThreshold ? \"High number!\" : \"Low number!\";\n        greeting += \" (according to the threshold parameter)\";\n        Console.WriteLine(greeting);\n         // Humanize a timespan\n        var timespan = TimeSpan.FromMinutes(90);\n        Console.WriteLine($\"Timespan: {timespan.Humanize()}\");\n\n        // Humanize numbers into words\n        int number = 123;\n        Console.WriteLine($\"Number: {number.ToWords()}\");\n\n        // Pluralize words\n        string singular = \"apple\";\n\n        // Humanize date difference\n        var date = DateTime.UtcNow.AddDays(-3);\n        Console.WriteLine($\"Date: {date.Humanize()}\");\n        return date;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching a Resource in Nu Shell\nDESCRIPTION: This Nu shell snippet demonstrates fetching a resource named 'u/user/foo' using the Nu shell's get_resource command. It is used within the Windmill environment to dynamically retrieve resources from the workspace.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_13\n\nLANGUAGE: nu\nCODE:\n```\nget_resource u/user/foo\n```\n\n----------------------------------------\n\nTITLE: TypeScript Trigger Script Template for Postgres Table Events\nDESCRIPTION: This snippet shows a TypeScript function template for handling database change events (insert, update, delete) on tracked tables. It demonstrates how to structure a script to process row data passed from triggers, useful for custom data handling logic.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/46_postgres_triggers/index.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n  export async function main(\n  transaction_type: \"insert\" | \"update\" | \"delete\",\n  schema_name: string,\n  table_name: string,\n  row: {\n\tid?: number,\n\tname?: string,\n\tlastname?: string,\n\tage: number,\n\tpersonal_information: unknown,\n\tcreated_at?: Date,\n\tupdated_at?: Date,\n}\n) {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Windmill Flow with Dynamic Input and Approval - YAML\nDESCRIPTION: This YAML snippet defines a complete Windmill flow demonstrating dynamic enum inputs and an approval step. The first step (ID 'a') is a `rawscript` (Bun) that fetches data (`getResumeUrls`) and defines dynamic `enums` and `default_args` for a field named \"Customers to send to\". This step is configured as a suspend/approval step with a resume form schema. The second step (ID 'b') is a `rawscript` (Python3) that uses an `input_transform` to access the selected argument from the previous step's output.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nsummary: \"\"\nvalue:\n  modules:\n    - id: a\n      value:\n        type: rawscript\n        content: >-\n          import * as wmillClient from \"windmill-client\"\n\n\n          export async function main() {\n            // Constant array, but could come from dynamic source\n            const customers: string[] = [\n              \"New York\",\n              \"Los Angeles\",\n              \"Chicago\",\n              \"Houston\",\n              \"Phoenix\",\n              \"Philadelphia\",\n              \"San Antonio\",\n              \"San Diego\",\n              \"Dallas\",\n              \"San Jose\"\n            ];\n\n            const resumeUrls = await wmillClient.getResumeUrls(\"approver1\");\n\n            // Remove duplicates and sort the customers array in alphabetical order\n            const sortedCustomers = Array.from(new Set(customers)).sort();\n\n            return {\n              resume: resumeUrls['resume'],\n              enums: {\n                \"Customers to send to\": sortedCustomers\n              },\n              default_args: {\n                \"Customers to send to\": sortedCustomers\n              }\n            }\n          }\n        language: bun\n        input_transforms: {}\n        is_trigger: false\n      continue_on_error: false\n      suspend:\n        required_events: 1\n        timeout: 1800\n        hide_cancel: false\n        resume_form:\n          schema:\n            properties:\n              Customers to send to:\n                items:\n                  type: string\n                type: array\n                description: \"\"\n            required: []\n            order:\n              - Customers to send to\n      summary: Approval step with dynamic enum\n    - id: b\n      summary: Use the selected arguments\n      value:\n        type: rawscript\n        content: |-\n          # import wmill\n\n\n          def main(x):\n              return x\n        language: python3\n        input_transforms:\n          x:\n            type: javascript\n            expr: resume[\"Customers to send to\"]\n        is_trigger: false\n  same_worker: false\nschema:\n  $schema: https://json-schema.org/draft/2020-12/schema\n  properties: {}\n  required: []\n  type: object\n```\n\n----------------------------------------\n\nTITLE: PHP Script with Composer Dependencies\nDESCRIPTION: This PHP script demonstrates how to specify Composer dependencies within a Windmill script using the `require` syntax. These dependencies are automatically installed and managed by Windmill. The `main` function defines the entry point of the script and includes type-hinted parameters, which are used to generate the UI and input specifications.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/8_php_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// require:\n// monolog/monolog@3.6.0\n// stripe/stripe-php\n\nfunction main(\n\t// Postgresql $a,\n  // array $b,\n  // object $c,\n\tint $d = 123,\n\tstring $e = \"default value\",\n\tfloat $f = 3.5,\n  bool $g = true,\n) {\n\treturn $d;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define Arguments and Insert Data using PostgreSQL\nDESCRIPTION: Defines script arguments using the PostgreSQL-specific `$N` syntax, including optional names, default values, and type casting (e.g., `::TEXT`, `::INT`). Shows a sample `INSERT` statement using these positional arguments and including `RETURNING *`. Also illustrates how to bind the script to a specific database resource using a comment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- $1 name1 = default arg\n-- $2 name2\nINSERT INTO demo VALUES ($1::TEXT, $2::INT) RETURNING *\n```\n\n----------------------------------------\n\nTITLE: Developing a Complex Python Script Using Windmill Client and Typed Resources\nDESCRIPTION: This comprehensive Python script showcases multiple aspects of a Windmill script including typed resource examples, default and annotated function parameters, usage of the Windmill Python client for getting and setting variables and state, environment variable access, and returning JSON-convertible dictionaries. Key dependencies include the wmill Python client. The main function demonstrates input parameter handling, interaction with Windmill resource variables, persistent state management between script runs, and user context retrieval via environment variables. This snippet highlights best practices for structuring Windmill scripts with robust metadata and input specification.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/2_python_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport wmill\n\n# You can import any PyPI package. \n# See here for more info: https://www.windmill.dev/docs/advanced/dependencies_in_python\n\n# you can use typed resources by doing a type alias to dict\n#postgresql = dict\n\ndef main(\n    no_default: str,\n    #db: postgresql,\n    name=\"Nicolas Bourbaki\",\n    age=42,\n    obj: dict = {\"even\": \"dicts\"},\n    l: list = [\"or\", \"lists!\"],\n    file_: bytes = bytes(0),\n):\n\n    print(f\"Hello World and a warm welcome especially to {name}\")\n    print(\"and its acolytes..\", age, obj, l, len(file_))\n\n    # retrieve variables, resources, states using the wmill client\n    try:\n        secret = wmill.get_variable(\"f/examples/secret\")\n    except:\n        secret = \"No secret yet at f/examples/secret !\"\n    print(f\"The variable at `f/examples/secret`: {secret}\")\n\n    # Get last state of this script execution by the same trigger/user\n    last_state = wmill.get_state()\n    new_state = {\"foo\": 42} if last_state is None else last_state\n    new_state[\"foo\"] += 1\n    wmill.set_state(new_state)\n\n    # fetch context variables\n    user = os.environ.get(\"WM_USERNAME\")\n\n    # return value is converted to JSON\n    return {\"splitted\": name.split(), \"user\": user, \"state\": new_state}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Function in Python\nDESCRIPTION: This snippet illustrates the signature for the 'main' function entrypoint in a Python Windmill script. Parameters are defined as function arguments with type hints, which are used by Windmill to infer the script's input JSON Schema and generate a user interface. The function serves as the primary entry point for script execution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/script_editor/index.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef main(param1: str, param2: dict, ...):\n\t...\n```\n\n----------------------------------------\n\nTITLE: Processing Data with Polars from Azure Blob Storage\nDESCRIPTION: This code snippet shows how to read a Parquet file from Azure Blob Storage using Polars, perform a transformation, and write the result back to Azure. It retrieves connection settings for Azure from `wmill` and configures Polars. Requires the workspace to have Azure Blob Storage properly set up.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/27_data_pipelines/index.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\nfrom wmill import S3Object\nimport polars as pl\n\n\ndef main(input_file: S3Object):\n    # this will default to the workspace Azure Blob Storage resource\n    endpoint_url = wmill.polars_connection_settings().s3fs_args[\"endpoint_url\"]\n    storage_options = wmill.polars_connection_settings().storage_options\n\n    # this will use the designated resource\n    # storage_options = wmill.polars_connection_settings(\"<PATH_TO_S3_RESOURCE>\").storage_options\n\n    # input is a parquet file, we use read_parquet in lazy mode.\n    # Polars can read various file types, see\n    # https://pola-rs.github.io/polars/py-polars/html/reference/io.html\n    input_uri = \"{}/{}\".format(endpoint_url, input_file[\"s3\"])\n\n    input_df = pl.read_parquet(input_uri, storage_options=storage_options).lazy()\n\n    # process the Polars dataframe. See Polars docs:\n    # for dataframe: https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/index.html\n    # for lazy dataframe: https://pola-rs.github.io/polars/py-polars/html/reference/lazyframe/index.html\n    output_df = input_df.collect()\n    print(output_df)\n\n    # To write back the result to Azure Blob Storage, Polars needs an s3fs connection\n    output_file = \"output/result.parquet\"\n    output_uri = \"{}/{}\".format(endpoint_url, output_file)\n    output_df.write_parquet(output_uri, storage_options=storage_options)\n\n    return S3Object(s3=output_file)\n```\n\n----------------------------------------\n\nTITLE: Processing MQTT Messages with Basic TypeScript Script\nDESCRIPTION: This snippet defines an asynchronous main function that receives an MQTT message payload as an array of numbers (binary data). It converts the binary payload into a string and attempts to parse it as JSON, logging the parsed data or the raw string accordingly. The function returns a success response object after processing. Dependencies include the TextDecoder API for encoding conversion. Inputs are binary MQTT message payloads; outputs signal successful message processing.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/49_mqtt_triggers/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(payload: Array<number>) {\n  // Convert binary payload to string\n  const textPayload = new TextDecoder().decode(new Uint8Array(payload));\n  \n  // Parse JSON if applicable\n  try {\n    const jsonData = JSON.parse(textPayload);\n    console.log(\"Received JSON data:\", jsonData);\n    // Process JSON data\n  } catch (e) {\n    // Handle as plain text\n    console.log(\"Received text data:\", textPayload);\n    // Process text data\n  }\n  \n  return { processed: true, message: \"MQTT message processed successfully\" };\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration Template for Windmill with Traefik Reverse Proxy - YAML\nDESCRIPTION: This multi-service Docker Compose YAML snippet provides a template to deploy Windmill components including the PostgreSQL database, Windmill server, multiple worker types, language server (LSP), and optional multiplayer service, all configured to integrate with Traefik. It includes service definitions with deployment replicas, resource limits for CPU and memory, exposed ports, network setup, health checks for the database service, environment variables for configuration, volume mounts for state and caching, and Traefik labels that define routing rules for HTTP and HTTPS with automatic TLS using Let's Encrypt certificate resolver. Users must adapt network names, certificate resolvers, and domain hostnames to their environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.7'\\n\\nservices:\\n  db:\\n    deploy:\\n      # To use an external database, set replicas to 0 and set DATABASE_URL to the external database url in the .env file\\n      replicas: 1\\n    image: postgres:14\\n    restart: unless-stopped\\n    volumes:\\n      - db_data:/var/lib/postgresql/data\\n    expose:\\n      - 5432\\n    networks:\\n      - windmill\\n    ports:\\n      - 5432:5432\\n    environment:\\n      POSTGRES_PASSWORD: changeme\\n      POSTGRES_DB: windmill\\n    healthcheck:\\n      test: ['CMD-SHELL', 'pg_isready -U postgres']\\n      interval: 10s\\n      timeout: 5s\\n      retries: 5\\n\\n  windmill_server:\\n    image: ${WM_IMAGE}\\n    pull_policy: always\\n    deploy:\\n      replicas: 1\\n    restart: unless-stopped\\n    expose:\\n      - 8000\\n    environment:\\n      - DATABASE_URL=${DATABASE_URL}\\n      - MODE=server\\n    networks:\\n      - windmill\\n      - traefik\\n    depends_on:\\n      db:\\n        condition: service_healthy\\n    labels:\\n      - traefik.enable=true\\n      - traefik.http.services.windmill_server.loadbalancer.server.port=8000\\n      #http\\n      - traefik.http.routers.windmill_server_http.entrypoints=web\\n      - traefik.http.routers.windmill_server_http.rule=Host(`windmill.yourdomain.com`)\\n      - traefik.http.routers.windmill_server_http.service=windmill_server\\n      # https\\n      - traefik.http.routers.windmill_server_https.entrypoints=websecure\\n      - traefik.http.routers.windmill_server_https.rule=Host(`windmill.yourdomain.com`)\\n      - traefik.http.routers.windmill_server_https.service=windmill_server\\n      - traefik.http.routers.windmill_server_https.tls=true\\n      - traefik.http.routers.windmill_server_https.tls.certresolver=letsencryptresolver\\n\\n  windmill_worker:\\n    image: ${WM_IMAGE}\\n    pull_policy: always\\n    deploy:\\n      replicas: 3\\n      resources:\\n        limits:\\n          cpus: '1'\\n          memory: 2048M\\n        # for GB, use syntax '2Gi'\\n    restart: unless-stopped\\n    environment:\\n      - DATABASE_URL=${DATABASE_URL}\\n      - MODE=worker\\n      - WORKER_GROUP=default\\n    networks:\\n      - windmill\\n    depends_on:\\n      db:\\n        condition: service_healthy\\n    # to mount the worker folder to debug, KEEP_JOB_DIR=true and mount /tmp/windmill\\n    volumes:\\n      # mount the docker socket to allow to run docker containers from within the workers\\n      - /var/run/docker.sock:/var/run/docker.sock\\n      - worker_dependency_cache:/tmp/windmill/cache\\n\\n  windmill_worker_native:\\n    # Use ghcr.io/windmill-labs/windmill-ee:main for the ee\\n    image: ${WM_IMAGE}\\n    pull_policy: always\\n    deploy:\\n      replicas: 2\\n      resources:\\n        limits:\\n          cpus: '0.1'\\n          memory: 128M\\n    restart: unless-stopped\\n    environment:\\n      - DATABASE_URL=${DATABASE_URL}\\n      - MODE=worker\\n      - WORKER_GROUP=native\\n    networks:\\n      - windmill\\n    depends_on:\\n      db:\\n        condition: service_healthy\\n\\n  # windmill_worker_reports is commented out but available for report or scraping jobs\\n  # with required resources and environment settings.\\n\\n  lsp:\\n    image: ghcr.io/windmill-labs/windmill-lsp:latest\\n    pull_policy: always\\n    restart: unless-stopped\\n    networks:\\n      - windmill\\n      - traefik\\n    expose:\\n      - 3001\\n    volumes:\\n      - lsp_cache:/root/.cache\\n    labels:\\n      - traefik.enable=true\\n      - traefik.http.services.windmill_lsp.loadbalancer.server.port=3001\\n      #http\\n      - traefik.http.routers.windmill_lsp_http.entrypoints=web\\n      - traefik.http.routers.windmill_lsp_http.rule=Host(`windmill.yourdomain.com`) && PathPrefix(`/ws/`)\\n      - traefik.http.routers.windmill_lsp_http.service=windmill_lsp\\n      # https\\n      - traefik.http.routers.windmill_lsp_https.entrypoints=websecure\\n      - traefik.http.routers.windmill_lsp_https.rule=Host(`windmill.yourdomain.com`) && PathPrefix(`/ws/`)\\n      - traefik.http.routers.windmill_lsp_https.service=windmill_lsp\\n      - traefik.http.routers.windmill_lsp_https.tls=true\\n      - traefik.http.routers.windmill_lsp_https.tls.certresolver=letsencryptresolver\\n\\n  multiplayer:\\n    image: ghcr.io/windmill-labs/windmill-multiplayer:latest\\n    deploy:\\n      replicas: 0 # Set to 1 to enable multiplayer, only available on Enterprise Edition\\n    restart: unless-stopped\\n    networks:\\n      - windmill\\n    expose:\\n      - 3002\\n\\nvolumes:\\n  db_data: null\\n  worker_dependency_cache: null\\n  lsp_cache: null\\n\\nnetworks:\\n  windmill:\\n    name: windmill\\n  traefik:\\n    name: traefik\\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Importing dependencies in TypeScript with Deno runtime\nDESCRIPTION: Example showing how to import dependencies in TypeScript using Deno runtime in Windmill. Demonstrates npm imports with and without version pinning that will be resolved by Deno.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/14_dependencies_in_typescript/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// unpinned import\nimport { toWords } from 'npm:number-to-words';\n\n// versioned import\nimport * as wmill from 'npm:windmill-client@1.335.0';\n```\n\n----------------------------------------\n\nTITLE: Python Script Preprocessor Template\nDESCRIPTION: This Python code provides a template for a script preprocessor function. It receives a `wm_trigger` object containing trigger metadata and other trigger-specific arguments. The preprocessor's return value is a dictionary of parameters, which are passed to the script's `main()` function. Dependencies: Requires Python and the `typing` module.  The structure of wm_trigger is defined using TypedDicts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/43_preprocessors/index.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import TypedDict, Literal\nclass Http(TypedDict):\n    route: str # The route path, e.g. \"/users/:id\"\n    path: str  # The actual path called, e.g. \"/users/123\"\n    method: str\n    params: dict[str, str]\n    query: dict[str, str]\n    headers: dict[str, str]\n\nclass Websocket(TypedDict):\n    url: str # The websocket url\n\nclass Kafka(TypedDict):\n    topic: str\n    brokers: list[str]\n    group_id: str\n\nclass Nats(TypedDict):\n    servers: list[str]\n    subject: str\n    headers: dict[str, list[str]] | None\n    status: int | None\n    description: str | None\n    length: int\n\nclass MessageAttribute(TypedDict):\n    string_value: str | None\n    data_type: str\n\nclass Sqs(TypedDict):\n    queue_url: str\n    message_id: str | None\n    receipt_handle: str | None\n    attributes: dict[str, str]\n    message_attributes: dict[str, MessageAttribute] | None\n\nclass MqttV5Properties:\n    payload_format_indicator: int | None\n    topic_alias: int | None\n    response_topic: str | None\n    correlation_data: list[int] | None\n    user_properties: list[tuple[str, str]] | None\n    subscription_identifiers: list[int] | None\n    content_type: str | None\n\nclass Mqtt(TypedDict):\n    topic: str\n    retain: bool\n    pkid: int\n    qos: int\n    v5: MqttV5Properties | None\n\nclass Gcp(TypedDict):\n    message_id: str\n    subscription: str\n    ordering_key: str | None\n    attributes: dict[str, str] | None\n    delivery_type: Literal[\"push\", \"pull\"]\n    headers: dict[str, str] | None\n    publish_time: str | None\n\nclass WmTrigger(TypedDict):\n    kind: Literal[\"http\", \"email\", \"webhook\", \"websocket\", \"kafka\", \"nats\", \"postgres\", \"sqs\", \"mqtt\", \"gcp\"]\n    http: Http | None\n    websocket: Websocket | None\n    kafka: Kafka | None\n    nats: Nats | None\n    sqs: Sqs | None\n    mqtt: Mqtt | None\n    gcp: Gcp | None\n\ndef preprocessor(\n    # Replace this comment with the parameters received from the trigger.  \n    # Examples: `bodyKey1`, `bodyKey2` for Webhook/HTTP, `msg` for WebSocket, etc.  \n\n    # Trigger metadata\n    wm_trigger: WmTrigger,\n):\n    return {\n        # return the args to be passed to the runnable\n    }\n\ndef main(): # add the parameters you expect from the preprocessor\n    # your code here\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Shared Logic Function in Python Script\nDESCRIPTION: This Python script demonstrates importing a function from another script (e.g., from u.user.common_logic import foo) and using it within a main entrypoint. Dependencies include Python 3.x, accessibility to the source script, and Windmill's execution context. The main function calls the imported foo(), which prints to the console, and then returns None. This example outlines standard module import and usage patterns within Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/5_sharing_common_logic/index.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# u/user/custom_script\nfrom u.user.common_logic import foo\ndef main():\n  return foo()\n```\n\n----------------------------------------\n\nTITLE: MQTT Trigger Preprocessor and Main Handler Implementation in TypeScript\nDESCRIPTION: This snippet provides an implementation of a preprocessor and main function for processing MQTT triggers in Windmill. The preprocessor runs before the main function and handles raw MQTT trigger data: it verifies the trigger kind, converts the payload from binary to string, extracts MQTT v5 content type metadata, and returns an object to be passed as parameters to the main function. The main function, called after the preprocessor, accepts processed parameters including payload in Uint8Array, decoded string, and optional content type. It currently contains an empty implementation for further customization. Dependencies include the TextDecoder API and knowledge of Windmill's trigger structure. Inputs to the preprocessor are raw MQTT trigger metadata and payload; outputs are structured parameters for the main function.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/49_mqtt_triggers/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * General Trigger Preprocessor\n * \n * ⚠️ This function runs BEFORE the main function.\n * \n * It processes raw trigger data (e.g., MQTT, HTTP, SQS) before passing it to `main()`.\n * Common tasks:\n * - Convert binary payloads to string/JSON\n * - Extract metadata\n * - Filter messages\n * - Add timestamps/context\n * \n * The returned object determines `main()` parameters:\n * - `{a: 1, b: 2}` → `main(a, b)`\n * - `{payload}` → `main(payload)`\n * \n * @param wm_trigger - Trigger details (e.g., MQTT, HTTP)\n * @param payload - Raw trigger data (format varies by trigger type)\n * @returns Processed data for `main()`\n */\nexport async function preprocessor(\n  wm_trigger: {\n    kind: 'gcp',\n    mqtt?: {\n      topic: string,\n      retain: boolean,\n      pkid: number,\n      qos: number,\n      v5?: {\n        payload_format_indicator?: number,\n        topic_alias?: number,\n        response_topic?: string,\n        correlation_data?: Array<number>,\n        user_properties?: Array<[string, string]>,\n        subscription_identifiers?: Array<number>,\n        content_type?: string\n      }\n    }\n  },\n  payload: Array<number>,\n) {\n  if (wm_trigger.kind === 'mqtt' && wm_trigger.mqtt) {\n    const uint8Payload = new Uint8Array(payload);\n    const payloadAsString = new TextDecoder().decode(uint8Payload);\n\n    return {\n      contentType: wm_trigger.mqtt.v5?.content_type,\n      payload: uint8Payload,\n      payloadAsString\n    };\n  }\n  // We assume the script is triggered by an MQTT message, which is why an error is thrown for other trigger kinds.\n  // If the script is intended to support other triggers, update this logic to handle the respective trigger kind.\n  throw new Error(`Expected mqtt trigger kind got: ${wm_trigger.kind}`)\n}\n\n/**\n * Main Function - Handles processed trigger events\n * \n * ⚠️ Called AFTER `preprocessor()`, with its return values.\n * \n * @param payload - Raw binary payload\n * @param payloadAsString - Decoded string payload\n * @param contentType - MQTT v5 content type (if available)\n */\nexport async function main(payload: Uint8Array, payloadAsString: string, contentType?: string) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Pinning Dependencies in Windmill (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import external dependencies in Windmill scripts. It includes both an unpinned import, which always fetches the latest version, and a version-pinned import that guarantees specific dependency versions. No local manifest file is required; Windmill infers all requirements directly from the code. Input is the script code; output is a runtime environment with the resolved modules. Requires the 'windmill-client' and 'number-to-words' npm packages, with optional versioning supported.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/6_imports/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// unpinned import\nimport { toWords } from 'number-to-words';\n\n// versioned import\nimport * as wmill from 'windmill-client@1.147.3';\n```\n\n----------------------------------------\n\nTITLE: Reverse Geocoding with Google Maps API\nDESCRIPTION: This asynchronous TypeScript function uses the Google Maps Geocoding API to convert an address to its geographic coordinates (latitude and longitude). It takes an address string and an API key as input.  It handles API errors and returns an object containing the latitude, longitude, and address title. It requires a valid Google Maps API key.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function reverseGeocode(address: string, apiKey: string) {\n\tconst encodedAddress = encodeURIComponent(address);\n\tconst response = await fetch(\n\t\t`https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}&key=${apiKey}`\n\t);\n\n\tif (!response.ok) {\n\t\tthrow new Error(`Error fetching data from Google Maps API: ${response.statusText}`);\n\t}\n\n\tconst data = await response.json();\n\n\tif (data.status !== 'OK') {\n\t\tthrow new Error(`Google Maps API error: ${data.status}`);\n\t}\n\n\tconst location = data.results[0].geometry.location;\n\treturn { lat: location.lat, lon: location.lng, title: address };\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(addresses: string[], apiKey: string) {\n\tconst promises = addresses.map((address) => reverseGeocode(address, apiKey));\n\treturn Promise.all(promises);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flow Preprocessor Function in TypeScript\nDESCRIPTION: Provides a template for an asynchronous TypeScript function (`preprocessor`) used as a flow preprocessor step in Windmill. This function accepts trigger-specific arguments (commented out placeholder) and a `wm_trigger` object containing metadata about the trigger source (e.g., HTTP details, Kafka info). It must return an object where keys match the flow's input parameter names, providing the values for those parameters.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/43_preprocessors/index.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function preprocessor(  \n  /*  \n  * Replace this comment with the parameters received from the trigger.  \n  * Examples: `bodyKey1`, `bodyKey2` for Webhook/HTTP, `msg` for WebSocket, etc.  \n  */\n\n  // The trigger metadata\n  wm_trigger: {\n    kind: 'http' | 'email' | 'webhook' | 'websocket' | 'kafka' | 'nats' | 'postgres' | 'sqs' | 'mqtt' | 'gcp',\n    http?: {\n      route: string // The route path, e.g. \"/users/:id\"\n      path: string  // The actual path called, e.g. \"/users/123\"\n      method: string\n      params: Record<string, string> // path parameters\n      query: Record<string, string>  // query parameters\n      headers: Record<string, string>\n    },\n    websocket?: {\n      url: string // The websocket url\n    },\n    kafka?: {\n      brokers: string[]\n      topic: string\n      group_id: string\n    },\n    nats?: {\n      servers: string[]\n      subject: string\n      headers?: Record<string, string[]>\n      status?: number\n      description?: string\n      length: number\n    },\n    sqs?: {\n      queue_url: string,\n      message_id?: string,\n      receipt_handle?: string,\n      attributes: Record<string, string>,\n      message_attributes?: Record<string, {\n        string_value?: string,\n        data_type: string\n      }>\n    },\n    mqtt?: {\n      topic: string,\n      retain: boolean,\n      pkid: number,\n      qos: number,\n      v5?: {\n        payload_format_indicator?: number,\n        topic_alias?: number,\n        response_topic?: string,\n        correlation_data?: Array<number>,\n        user_properties?:  Array<[string, string]>,\n        subscription_identifiers?: Array<number>,\n        content_type?: string\n      }\n    },\n    gcp?: {\n      message_id: string,\n      subscription: string,\n      ordering_key?: string,\n      attributes?: Record<string, string>,\n      delivery_type: \"push\" | \"pull\",\n      headers?: Record<string, string>,\n      publish_time?: string,\n    }\n  }\n) {\n  return {\n    // return the args to be passed to the runnable\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Flow States in TypeScript\nDESCRIPTION: Defines functions to set and get flow-specific persistent state using the Windmill client library. Requires 'windmill-client' dependency and enables flow data persistence across steps, useful for event-watching and stateful workflows.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/16_architecture.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from \"windmill-client@1.297.0\"\\n\\nexport async function main(x: string) {\\n  await wmill.setFlowUserState(\"FOO\", 42)\\n  return await wmill.getFlowUserState(\"FOO\")\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads with Multipart FormData in Windmill Scripts - TypeScript\nDESCRIPTION: TypeScript example demonstrating how to handle multipart/form-data payloads containing both text fields and file uploads in a Windmill webhook script. The files are represented as arrays of S3Object instances pointing to uploaded files in the workspace object storage. This requires the 'windmill-client' library for S3Object typing. The async 'main' function takes a string field and an array of file objects, returning the file objects. This illustrates processing of form submissions with file attachments in Windmill scripts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { S3Object } from 'windmill-client'\n\nexport async function main(mytextfield: string, myfilefield: S3Object[]) {\n\treturn myfilefield\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AWS ECS Task for Windmill LSP (JSON)\nDESCRIPTION: This JSON object represents an AWS ECS Task Definition for the `windmill-lsp` service. It specifies the container image (`ghcr.io/windmill-labs/windmill-lsp:latest`), resource allocation (1 vCPU, 1.5 GiB memory), port mapping (3001), network mode (`awsvpc`), environment variables (`JSON_FMT=true`), logging configuration (awslogs), volume definition (`lsp_cache`), and requires an EC2 compatibility with a Linux/x86_64 runtime. The `ECS_TASK_EXECUTION_ROLE_ARN` needs to be provided manually.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/aws_ecs.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"containerDefinitions\": [\n\t\t{\n\t\t\t\"name\": \"windmill-lsp\",\n\t\t\t\"image\": \"ghcr.io/windmill-labs/windmill-lsp:latest\",\n\t\t\t\"cpu\": 1024,\n\t\t\t\"memory\": 1536,\n\t\t\t\"portMappings\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"http\",\n\t\t\t\t\t\"containerPort\": 3001,\n\t\t\t\t\t\"hostPort\": 3001,\n\t\t\t\t\t\"protocol\": \"tcp\",\n\t\t\t\t\t\"appProtocol\": \"http\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"essential\": true,\n\t\t\t\"environment\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"JSON_FMT\",\n\t\t\t\t\t\"value\": \"true\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"mountPoints\": [],\n\t\t\t\"volumesFrom\": [],\n\t\t\t\"logConfiguration\": {\n\t\t\t\t\"logDriver\": \"awslogs\",\n\t\t\t\t\"options\": {\n\t\t\t\t\t\"awslogs-group\": \"/ecs/windmill-lsp\",\n\t\t\t\t\t\"awslogs-region\": \"us-east-2\",\n\t\t\t\t\t\"awslogs-stream-prefix\": \"ecs\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"family\": \"windmill-lsp\",\n\t\"executionRoleArn\": \"<ECS_TASK_EXECUTION_ROLE_ARN>\",\n\t\"networkMode\": \"awsvpc\",\n\t\"volumes\": [\n\t\t{\n\t\t\t\"name\": \"lsp_cache\",\n\t\t\t\"host\": {\n\t\t\t\t\"sourcePath\": \"/root/.cache\"\n\t\t\t}\n\t\t}\n\t],\n\t\"placementConstraints\": [],\n\t\"requiresCompatibilities\": [\"EC2\"],\n\t\"cpu\": \"1024\",\n\t\"memory\": \"1536\",\n\t\"runtimePlatform\": {\n\t\t\"cpuArchitecture\": \"X86_64\",\n\t\t\"operatingSystemFamily\": \"LINUX\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a Formatted Greeting String in Go\nDESCRIPTION: A simple Go function designed for Windmill that takes a `name` string as an argument. It uses `fmt.Sprintf` to construct a greeting message 'Hello [name]' and returns this string along with a nil error, fulfilling the `(string, error)` return signature expected in this context (implicitly convertible to `(interface{}, error)`).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/3_go_quickstart/index.mdx#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage inner\n\nimport (\n\t\"fmt\"\n)\n\nfunc main(name string) (string, error) {\n\treturn fmt.Sprintf(\"Hello %s\", name), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Windmill Resource in TypeScript (Deno)\nDESCRIPTION: Demonstrates importing the Windmill client and using the `getResource` function within an async `main` function to retrieve a specific resource (`'u/user/name'`) in a Deno environment. Requires the `windmill-client` package to be accessible via the `npm:` specifier.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/ts_client.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport * as wmill from 'npm:windmill-client@1.318.0';\n\nexport async function main() {\n\tlet x = await wmill.getResource('u/user/name');\n}\n```\n\n----------------------------------------\n\nTITLE: Go: Fetching a Resource Using Windmill Client API\nDESCRIPTION: This Go snippet shows how to retrieve a resource named 'u/user/foo' within a Go script by calling the Windmill API client, supporting dynamic resource resolution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/code_editor/add_variables_resources.mdx#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nwmill.GetResource(\"u/user/foo\")\n```\n\n----------------------------------------\n\nTITLE: Kafka Preprocessor and Main Handler in TypeScript\nDESCRIPTION: An example setup for preprocessing Kafka messages before passing into the main handler. The 'preprocessor' parses JSON message content and structures arguments for the main function, which processes message content and topic information. Dependencies include JSON parsing, and the script facilitates more advanced message processing workflows.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/41_kafka_triggers/index.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function preprocessor(\n  msg: string,\n  wm_trigger: {\n    kind: \"kafka\",\n    kafka: {\n      brokers: string[];\n      topic: string; // the specific topic the message was received from\n      group_id: string;\n    }\n  },\n) {\n  // assuming the message is a JSON object\n  const msg = JSON.parse(msg); \n\n  // define args for the main function\n  // let's assume we want to use the message content and the topic\n  return {\n    message_content: msg.content,\n    topic: wm_trigger.kafka.topic\n  };\n}\n\nexport async function main(message_content: string, topic: string) {\n  // do something with the message content and topic\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Resource by Path Using Windmill Client in Python\nDESCRIPTION: This Python snippet shows how to fetch a resource from Windmill using the client method get_resource by specifying the full resource path 'u/user/foo'. It requires the Windmill Python client installed and imported and allows scripts to dynamically obtain resource contents at runtime.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwmill.get_resource(\"u/user/foo\")\n```\n\n----------------------------------------\n\nTITLE: Setting component value with frontend script (JavaScript)\nDESCRIPTION: Demonstrates how to programmatically set the value of a component using the `setValue` function available in frontend scripts. It takes the component ID and the new value as arguments.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/rich_result.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetValue(id: 'a', value: 17)\n```\n\n----------------------------------------\n\nTITLE: Complete Data Pipeline in Windmill with Polars\nDESCRIPTION: This comprehensive example demonstrates a full data pipeline within Windmill, using Polars. It initializes the S3 connection via Windmill, reads data from an S3 bucket, transforms the data using filtering and aggregation with Polars, and writes the transformed data back to another S3 location. It relies on `polars`, `s3fs`, `datetime`, and `wmill` libraries. The function `main` accepts an input dataset location and returns the output dataset location.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/27_data_pipelines/index.mdx#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport polars as pl\nimport s3fs\nimport datetime\nimport wmill\n\ns3object = dict\ndef main(input_dataset: s3object):\n    # initialization: connect Polars to the workspace bucket\n    s3_resource = wmill.get_resource(\"/path/to/resource\")\n    s3 = s3fs.S3FileSystem(wmill.duckdb_connection_settings(s3_resource))\n\n    # reading data from s3:\n    bucket = s3_resource[\"bucket\"]\n    input_dataset_uri = \"s3://{}/{}\".format(bucket, input_dataset[\"s3\"])\n    output_dataset_uri = \"s3://{}/output.parquet\".format(bucket)\n    with s3.open(input_dataset_uri, mode=\"rb\") as input_dataset, s3.open(output_dataset_uri, mode=\"rb\") as output_dataset:\n        input = pl.read_parquet(input_dataset)\n\n        # transforming the data\n        output = (\n            input.filter(pl.col(\"L_SHIPDATE\") >= datetime.datetime(1994, 1, 1))\n                .filter(\n                    pl.col(\"L_SHIPDATE\")\n                    < datetime.datetime(1994, 1, 1) + datetime.timedelta(days=365)\n                )\n                .filter((pl.col(\"L_DISCOUNT\").is_between(0.06 - 0.01, 0.06 + 0.01)))\n                .filter(pl.col(\"L_QUANTITY\") < 24)\n                .select([(pl.col(\"L_EXTENDEDPRICE\") * pl.col(\"L_DISCOUNT\").alias(\"REVENUE\")])\n                .sum()\n                .collect()\n        )\n\n        # writing the output back to S3\n        output.write_parquet(output_dataset)\n\n    # returning the URI of the output for next steps to process it\n    return s3object({\n        \"s3\": output_dataset_uri\n    })\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Expressions in Branch Predicates\nDESCRIPTION: JavaScript expressions can be used as predicate conditions to determine which branch should be executed. These expressions can be simple boolean values or more complex comparisons using flow inputs or previous results.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/13_flow_branches.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nresults.c.command === 'email'\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nflow_input.number >= 2\n```\n\n----------------------------------------\n\nTITLE: Python Relative Imports for Same Folder or Parent Folder\nDESCRIPTION: This snippet shows how to perform relative imports in Python between scripts in the same folder or in a parent folder within Windmill. Dependencies are Python 3.x and matching file/folder hierarchy as assumed by relative import syntax. The first line demonstrates importing foo from a local script, while the second line shows importing from a peer in the parent folder. Proper folder accessibility is required; failure results in ImportError.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/5_sharing_common_logic/index.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# if common_logic is a script in the same folder or user-space\nfrom .common_logic import foo\n# otherwise if you need to access the folder 'folder'\nfrom ..folder.common_logic import foo\n```\n\n----------------------------------------\n\nTITLE: Connecting to DuckDB and Reading Parquet from S3\nDESCRIPTION: This Windmill-specific snippet shows how to connect to DuckDB, configure S3 access, and read a Parquet file. It retrieves S3 resource settings from Windmill, then uses those settings to connect to the S3 resource. It then executes a SQL query using `read_parquet` function. Dependencies include the `duckdb` and `wmill` libraries, along with the appropriate S3 credentials and the file location.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/27_data_pipelines/index.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconn = duckdb.connect()\nconn.execute(wmill.duckdb_connection_settings(s3_resource)[\"connection_settings_str\"])\n\nconn.sql(\"SELECT * FROM read_parquet(s3://windmill_bucket/file.parquet)\")\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Subject Condition Examples for OIDC Roles - JSON\nDESCRIPTION: This snippet demonstrates example JSON blocks using StringLike conditions in AWS IAM policies to refine which OIDC JWT subjects (sub claim) are allowed to assume a role. Replace <workspace>, <script_path>, and <flow_path> as needed for your organization. Intended to implement fine-grained access via regular expressions on the JWT sub claim. Meant for use in IAM role trust policy documents for federated authentication.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"StringLike\": {\n  \"<base_url>/api/oidc/:sub\": \"*::<workspace>\",\n  \"<base_url>/api/oidc/:sub\": \"*::<script_path>::*::*\",\n  \"<base_url>/api/oidc/:sub\": \"*::*::<flow_path>::*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User-Defined Variables in TypeScript\nDESCRIPTION: Shows the TypeScript code generated when using the '+ Variable' feature in the Windmill UI to fetch a specific variable ('u/user/foo') within a script. It uses the `wmill` client's `getVariable` function.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/2_variables_and_secrets/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwmill.getVariable('u/user/foo');\n```\n\n----------------------------------------\n\nTITLE: Using States to Persist Temperature Data in Python\nDESCRIPTION: Example script demonstrating how to use Windmill states to persist and compare temperature data between script executions using the get_state and set_state functions.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/11_persistent_storage/within_windmill.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom wmill import set_state, get_state\n\ndef main():\n\t# Get temperature from last execution\n    last_temperature = get_state()\n\n    # Fetch the temperature in Paris from wttr.in\n    response = requests.get(\"http://wttr.in/Paris?format=%t\")\n\n    new_temperature = response.text.strip(\"°F\")\n\n\t# Set current temperature to state\n    set_state(new_temperature)\n\n    # Compare last_temperature and new_temperature\n    if last_temperature < new_temperature:\n        return \"The temperature has increased.\"\n    elif last_temperature > new_temperature:\n        return \"The temperature has decreased.\"\n    else:\n        return \"The temperature has remained the same.\"\n\n```\n\n----------------------------------------\n\nTITLE: Checkout Button - Creating Order\nDESCRIPTION: This is a frontend script that handles the 'Checkout' button action and creates an order in a Supabase database. It fetches product and customer details, calculates the total price, and inserts the order into the 'orders' table. It requires a Supabase client, customer ID, and a list of product IDs as inputs. The script uses the Supabase JS library.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createClient, SupabaseClient } from 'https://esm.sh/@supabase/supabase-js@2.10.0';\n\ntype Supabase = {\n\turl: string;\n\tkey: string;\n};\n\nexport async function main(auth: Supabase, customerId: string, productIds: string[]) {\n\tconst client = createClient(auth.url, auth.key);\n\n\tproductIds = productIds.filter(Boolean);\n\tconst { country, city, address } = await getCustomer(client, customerId);\n\tconst total_price = await getTotalPrice(client, productIds);\n\n\treturn await client\n\t\t.from('orders')\n\t\t.insert({\n\t\t\tcustomer_id: customerId,\n\t\t\tproduct_ids: productIds,\n\t\t\tcountry,\n\t\t\tcity,\n\t\t\taddress,\n\t\t\ttotal_price\n\t\t})\n\t\t.select();\n}\n\nasync function getCustomer(client: SupabaseClient, id: string) {\n\tconst { data, error } = await client\n\t\t.from('customers')\n\t\t.select('country, city, address')\n\t\t.eq('id', id);\n\n\tif (error || !data.length) {\n\t\tthrow Error(error?.message || `Couldn't find customer with ID \\\"${id}\\\"`);\n\t}\n\n\treturn data[0];\n}\n\nasync function getTotalPrice(client: SupabaseClient, ids: string[]) {\n\tconst promises = ids.map((id) => client.from('products').select('price').eq('id', id));\n\tconst res = await Promise.all(promises);\n\tlet total = 0;\n\n\tfor (let i = 0; i < res.length; i++) {\n\t\tconst { data, error } = res[i];\n\t\tif (error || !data.length) {\n\t\t\tthrow Error(error?.message || `Couldn't find product with ID \\\"${ids[i]}\\\"`);\n\t\t}\n\t\ttotal += data[0].price;\n\t}\n\n\treturn total;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading S3 Files Using Windmill Python Client\nDESCRIPTION: Illustrates loading an entire S3 file as bytes and reading it lazily as a buffered stream using the Windmill Python client SDK. The example imports necessary components, creates an S3Object pointing to a file key, and uses 'wmill.load_s3_file' and 'wmill.load_s3_file_reader' to access file content. This approach facilitates handling files of varying sizes within Windmill scripts interfacing with configured object storage resources. Key prerequisites include the Windmill Python client installed and proper workspace S3 bucket setup.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/38_object_storage_in_windmill/index.mdx#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport wmill\nfrom wmill import S3Object\n\ndef main():\n\n\texample_file = S3Object(s3='path/to/file')\n\n\t# Load the entire file_content as a bytes array\n    file_content = wmill.load_s3_file(example_file)\n    print(file_content.decode('utf-8'))\n\n    # Or load the file lazily as a Buffered reader:\n    with wmill.load_s3_file_reader(example_file) as file_reader:\n        print(file_reader.read())\n```\n\n----------------------------------------\n\nTITLE: Using Video Tag for Embedded Media in MDX (JSX)\nDESCRIPTION: This snippet demonstrates embedding a video element within the documentation using JSX syntax inside MDX. The video is styled with tailwindcss classes for border, rounding, and object-fit behavior. Controls are enabled for user playback. The 'src' attribute points to a local video resource to visually explain features such as instant preview in editors. This pattern is repeated multiple times for different demonstration videos.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/23_instant_preview/index.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tcontrols\n\tsrc=\"/videos/auto_g_ui_landing.mp4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching User-Defined Variables in Go\nDESCRIPTION: Presents the Go code snippet produced by the '+ Variable' UI feature for retrieving a variable ('u/user/foo'). This code uses the `GetVariable` function from the `wmill` Go client.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/2_variables_and_secrets/index.mdx#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nwmill.GetVariable(\"u/user/foo\")\n```\n\n----------------------------------------\n\nTITLE: Defining oneOf type in TypeScript for Windmill UI\nDESCRIPTION: This snippet demonstrates how to define a `oneOf` type in TypeScript.  This allows a user to pick between two objects through the auto-generated UI in Windmill. The example shows two possible object structures with different attributes.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/13_json_schema_and_parsing/index.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexample_oneof: { label: \"Option 1\", attribute: string } | { label: \"Option 2\", other_attribute: string }\n```\n\n----------------------------------------\n\nTITLE: Importing PowerShell Modules in Windmill (PowerShell)\nDESCRIPTION: This PowerShell snippet shows how to load a required module inside a Windmill script. If the module is missing from the cache, Windmill automatically installs it. No manual module management or manifest is necessary; all requirements are parsed from the script's import statements. Input is a PowerShell script; output is a ready-to-execute environment with the specified module available.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/6_imports/index.mdx#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module -Name MyModule\n```\n\n----------------------------------------\n\nTITLE: Managing User-Defined Variables with windmill-client in TypeScript (Bun)\nDESCRIPTION: Shows how to use the `windmill-client` library in a TypeScript script running on Bun to retrieve (`getVariable`) and update (`setVariable`) user-defined variables. Requires importing `getVariable` and `setVariable` from 'windmill-client'. `getVariable` needs the variable path, and `setVariable` needs the path and the new value.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/2_variables_and_secrets/index.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { getVariable, setVariable } from 'windmill-client';\n\ngetVariable('u/user/foo');\nsetVariable('u/user/foo', value);\n```\n\n----------------------------------------\n\nTITLE: Enabling Backend Schema Validation in TypeScript for Windmill\nDESCRIPTION: This TypeScript snippet shows how to enable backend schema validation in Windmill by adding the `// schema_validation` annotation at the top of the script. When enabled, Windmill will check if the input payload matches the defined schema, failing the job if there are any discrepancies. The example shows validation for number, enum, default value inference, nested objects and OneOf types.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/13_json_schema_and_parsing/index.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// schema_validation\n\nexport async function main(\n  a: number,\n  b: \"my\" | \"enum\",\n  e = \"inferred type string from default arg\",\n  f = { nested: \"object\" },\n  g: {\n    label: \"Variant 1\",\n    foo: string\n  } | {\n    label: \"Variant 2\",\n    bar: number\n  }\n) {\n  return { foo: a };\n}\n```\n\n----------------------------------------\n\nTITLE: Training a Recurrent Neural Network for Time Series Prediction in Python with PyTorch\nDESCRIPTION: This Python script uses the PyTorch library to define, train, and utilize a simple RNN model for predicting future points in time series data. It requires PyTorch and Python's typing module. The RNNModel class encapsulates the neural network architecture with adjustable parameters for input size, hidden size, output size, and number of layers. The main function normalizes input float list data, trains the model over a specified number of epochs minimizing mean squared error loss, and returns predicted future values. The script demonstrates standard deep learning training processes including zeroing gradients, backpropagation, and optimizer steps, and provides periodic loss output for monitoring training progress.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Import necessary libraries\nimport torch\nimport torch.nn as nn\nfrom typing import List\n\n\n# Define a simple RNN model for time series prediction\nclass RNNModel(nn.Module):\n    def __init__(\n        self, input_size: int, hidden_size: int, output_size: int, num_layers: int\n    ):\n        super(RNNModel, self).__init__()\n        self.hidden_size = hidden_size\n        self.num_layers = num_layers\n        self.rnn = nn.RNN(input_size, hidden_size, num_layers, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        # Initialize hidden and cell states\n        h0 = torch.zeros(self.num_layers, x.size(0), self.hidden_size)\n        # Forward propagate RNN\n        out, _ = self.rnn(x, h0)\n        # Pass the output of the last time step to the classifier\n        out = self.fc(out[:, -1, :])\n        return out\n\n\ndef main(\n    data: List[float], num_epochs: int = 100, learning_rate: float = 0.01\n) -> List[float]:\n    \"\"\"\n    Perform time series prediction using an RNN model.\n\n    Parameters:\n    - data: List[float], the time series data for training.\n    - num_epochs: int, the number of epochs to train the model.\n    - learning_rate: float, the learning rate for the optimizer.\n\n    Returns:\n    - predictions: List[float], the predicted values for the time series.\n    \"\"\"\n    # Convert data to PyTorch tensors\n    data_normalized = torch.FloatTensor(data).view(-1)\n    # Define the model\n    input_size = 1\n    hidden_size = 64\n    output_size = 1\n    num_layers = 1\n    model = RNNModel(input_size, hidden_size, output_size, num_layers)\n    # Loss and optimizer\n    criterion = nn.MSELoss()\n    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n\n    # Train the model\n    for epoch in range(num_epochs):\n        for i in range(len(data_normalized) - 1):\n            # Prepare data\n            sequence = data_normalized[i : i + 1].view(-1, 1, 1)\n            target = data_normalized[i + 1].view(-1)\n            # Forward pass\n            output = model(sequence)\n            loss = criterion(output.view(-1), target)\n            # Backward and optimize\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n\n        if (epoch + 1) % 10 == 0:\n            print(f\"Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}\")\n\n    # Predict (Here we use the last part of the data as a simple example)\n    test_data = data_normalized[-1:].view(-1, 1, 1)\n    with torch.no_grad():\n        predictions = model(test_data).view(-1).tolist()\n\n    return predictions\n```\n\n----------------------------------------\n\nTITLE: Defining Static Resources and Variables\nDESCRIPTION: This YAML snippet shows how to statically define resources and variables within an Ansible script using the `extra_vars` section. The `windmill_variable` and `windmill_resource` types are used, and a specific resource or variable path is provided. The path defined here is static and the UI hides the input accordingly.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nextra_vars:\n  my_variable:\n    type: windmill_variable\n    variable: u/user/my_variable\n  my_resource:\n    type: windmill_resource\n    resource: u/user/my_resource\n```\n\n----------------------------------------\n\nTITLE: Big structured SQL data: Postgres (Supabase, Neon.tech)\nDESCRIPTION: The snippet describes using SQL databases like Postgres, with recommended providers such as Supabase and Neon.tech, for structured data storage where schema and relationships are defined. This is suited for critical service data requiring rigorous data integrity and complex queries.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/11_persistent_storage/index.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Big structured SQL data: Postgres (Supabase, Neon.tech)\"\n\t\tdescription=\"For Postgres databases (best for structured data storage and retrieval, where you can define schema and relationships between entities), we recommend using Supabase or Neon.tech.\"\n\t\thref=\"/docs/core_concepts/persistent_storage/structured_databases\"\n\t/>\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Python: Fetching a Resource Using Windmill Client API\nDESCRIPTION: This Python code demonstrates how to fetch a resource called 'u/user/foo' by calling Windmill's API via the `wmill` module, enabling scripts to access resources dynamically during runtime.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/code_editor/add_variables_resources.mdx#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nwmill.get_resource(\"u/user/foo\")\n```\n\n----------------------------------------\n\nTITLE: Reading Parquet from S3 using Polars\nDESCRIPTION: This code snippet demonstrates reading a Parquet file from S3 using the Polars library. It requires the `s3fs` library for S3 file system interaction. It constructs an S3 file system object using provided arguments for accessing a specific S3 bucket and file. The `pl.read_parquet` function is then used to read the parquet data from the opened file object. Prerequisites include having S3 credentials, the `s3fs` and `polars` libraries and the target Parquet file accessible.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/27_data_pipelines/index.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nargs = {\n    \"anon\": False,\n    \"endpoint_url\": \"http://minio:9000\",\n    \"key\": \"<ACCESS_KEY>\",\n    \"secret\": \"<SECRET_KEY>\",\n    \"use_ssl\": False,\n    \"cache_regions\": False,\n    \"client_kwargs\": {\n        \"region_name\": \"us-east-1\",\n    },\n}\ns3 = s3fs.S3FileSystem(**args)\nwith s3.open(\"s3://windmill_bucket/file.parquet\", mode=\"rb\") as f:\n    dataframe = pl.read_parquet(f)\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenoid Browsers Using JSON\nDESCRIPTION: This JSON snippet defines browser configurations for Selenoid, a Selenium hub replacement. It specifies the browsers to run in Docker containers, including Firefox and Chrome both at version 104.0, with image references, ports, paths, and environment variables like timezone settings. These configurations allow Selenoid to pull and run the correct Docker images for browser automation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-14-selenium-integration/index.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"firefox\": {\n\t\t\"default\": \"104.0\",\n\t\t\"versions\": {\n\t\t\t\"104.0\": {\n\t\t\t\t\"image\": \"selenoid/firefox:104.0\",\n\t\t\t\t\"port\": \"4444\",\n\t\t\t\t\"path\": \"/wd/hub\",\n\t\t\t\t\"env\": [\"TZ=Europe/Berlin\"]\n\t\t\t}\n\t\t}\n\t},\n\t\"chrome\": {\n\t\t\"default\": \"104.0\",\n\t\t\"versions\": {\n\t\t\t\"104.0\": {\n\t\t\t\t\"image\": \"selenoid/chrome:104.0\",\n\t\t\t\t\"port\": \"4444\",\n\t\t\t\t\"path\": \"/\",\n\t\t\t\t\"env\": [\"TZ=Europe/Berlin\"]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Windmill Webhooks Using cURL POST Requests - Bash\nDESCRIPTION: This snippet shows how to trigger synchronous Windmill webhook endpoints using cURL with POST requests. It covers passing the bearer token either as an Authorization header or as a query parameter named 'token'. The POST body is expected to be a JSON object, here exemplified as '{}'. Required dependencies: cURL command-line tool. Inputs are the webhook URL, authentication token, and optional payload in JSON format. Outputs the response from the Windmill server, which may include script execution results or job UUIDs depending on the webhook type.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n## Request with Header\ncurl -X POST \\\n    --data '{}'                            \\\n    -H \"Content-Type: application/json\"    \\\n    -H \"Authorization: Bearer supersecret\" \\\n    \".../w/demo/jobs/run_wait_result/p/u/bot/hello_world_deno\"\n```\n\n----------------------------------------\n\nTITLE: Pulling and Starting Windmill Services with Docker Compose Using Bash\nDESCRIPTION: This Bash snippet demonstrates how to download the required Docker Compose configuration files and environment variables for Windmill, then starts the Windmill services in detached mode with Docker Compose. It assumes Docker is installed and running. The commands fetch three files from the Windmill GitHub repository (`docker-compose.yml`, `Caddyfile`, and `.env`) and then execute `docker compose up -d` to launch the containers. This setup enables a local Windmill self-hosted instance with all necessary components configured.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/windmill-labs/windmill/main/docker-compose.yml -o docker-compose.yml\ncurl https://raw.githubusercontent.com/windmill-labs/windmill/main/Caddyfile -o Caddyfile\ncurl https://raw.githubusercontent.com/windmill-labs/windmill/main/.env -o .env\n\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: TypeScript Absolute Import and Main Function Invocation\nDESCRIPTION: This example demonstrates an absolute import in TypeScript within Windmill, importing exports from a script at '/f/common/my_script_path', and using them inside an exported async main function. Dependencies involve proper project path configuration and permissions. The main function calls foo() and util(), enabling structured orchestration. This pattern is typical when organizing shared logic across codebases or deployed bundles.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/5_sharing_common_logic/index.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { main as foo, util } from '/f/common/my_script_path';\n\nexport async function main() {\n\tawait foo();\n\tutil();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing External Packages and Windmill Client in Windmill (Go)\nDESCRIPTION: This Go block demonstrates importing both the standard 'rsc.io/quote' package and the Windmill Go client. In Windmill, dependencies are managed per script without extra configuration files. Inputs are Go import groupings; results are that all referenced modules are automatically resolved, cached, and versioned for reliable execution. Requires access to Go modules, no manual dependency files needed.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/6_imports/index.mdx#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"rsc.io/quote\"\n    wmill \"github.com/windmill-labs/windmill-go-client\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Step Workflow using @task Decorator in Python\nDESCRIPTION: Demonstrates defining a Windmill workflow in Python using the `@task` decorator from the `wmill` library. The `heavy_compute` function performs a sample calculation using pandas and numpy, while `send_result` simulates sending the result. The `main` function orchestrates the sequential execution of `heavy_compute` multiple times and passes the aggregated result to `send_result`. Dependencies include `wmill`, `pandas`, and `numpy`. The `@task` decorator ensures functions run as distinct Windmill jobs, allowing for individual logging and tracking.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/31_workflows_as_code/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wmill import task\n\nimport pandas as pd\nimport numpy as np\n\n@task()\n# You can specify tag to run the task on a specific type of worker, e.g. @task(tag=\"custom_tag\")\ndef heavy_compute(n: int):\n    df = pd.DataFrame(np.random.randn(100, 4), columns=list('ABCD'))\n    return df.sum().sum()\n\n\n@task\ndef send_result(res: int, email: str):\n    # logs of the subtask are available in the main task logs\n    print(f\"Sending result {res} to {email}\")\n    return \"OK\"\n\ndef main(n: int):\n    l = []\n\n    # to run things in parallel, simply use multiprocessing Pool map instead: https://docs.python.org/3/library/multiprocessing.html\n    for i in range(n):\n        l.append(heavy_compute(i))\n    print(l)\n    return send_result(sum(l), \"example@example.com\")\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Inputs for Hub Scripts in AI Flow Builder (Prompt Template)\nDESCRIPTION: This prompt template is used by the Windmill AI Flow Builder when integrating a Windmill Hub script. It asks the AI (GPT-4-turbo) to determine how to map available data (workflow inputs `flow_input` or the previous step's output `results.{prevId}`) to the inputs of the selected Hub script, based on the script's required inputs and the previous step's code for type inference. The AI is instructed to reply in a specific `input_name: expr` format.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-20-ai-flow-builder/index.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nI'm building a workflow which is a sequence of script steps.\nMy current step code has the following inputs: {inputs}.\nDetermine what to pass as inputs. You can only use the following:\n- `flow_input` (javascript object): general inputs that are passed to the workflow,\n\tyou can assume any object properties.\n- `results.{prevId}` (javascript object): previous output is the output of the previous step.\n\tInfer its type from the previous step code: ```{codeLang}\n{prevCode}\n```\n\nReply in the following format:\ninput_name: expr\n```\n\n----------------------------------------\n\nTITLE: Hello World Script in TypeScript for Windmill\nDESCRIPTION: A simple TypeScript Hello World script that takes a name parameter, logs a greeting message, and returns the name as part of an object. Demonstrates the basic structure of a Windmill TypeScript script with a main function.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/1_typescript_quickstart/index.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(name: string) {\n\tconsole.log(\"Hello world! Oh, it's you %s? Greetings!\", name);\n\treturn { name };\n}\n```\n\n----------------------------------------\n\nTITLE: Request Interactive Slack Approval\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `wmill.requestInteractiveSlackApproval` function to request an interactive approval on Slack. It specifies the Slack resource path, channel ID, message, approver, default arguments as JSON, and dynamic enums as JSON. This function sends a message to the specified Slack channel, prompting the approver to approve or reject the request. It depends on the `windmill-client` library.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait wmill.requestInteractiveSlackApproval({\n   slackResourcePath: \"/u/username/my_slack_resource\",\n   channelId: \"admins-slack-channel\",\n   message: \"Please approve this request\",\n   approver: \"approver123\",\n   defaultArgsJson: { key1: \"value1\", key2: 42 },\n   dynamicEnumsJson: { foo: [\"choice1\", \"choice2\"], bar: [\"optionA\", \"optionB\"] },\n });\n```\n\n----------------------------------------\n\nTITLE: Defining GPT-4 System Prompt for Code Generation\nDESCRIPTION: Specifies the system-level instructions for the GPT-4 model when generating code for Windmill. It instructs the AI to output only code, wrap it in markdown code blocks with the language specified, and include explanations as comments within the code.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou write code as queried by the user. Only output code. Wrap the code like that:\n\n```language\n\\{code\\}\n```\n\nPut explanations directly in the code as comments.\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Resource Type in Python Using TypedDict\nDESCRIPTION: This Python snippet defines a TypedDict class representing the schema of a PostgreSQL resource with connection parameters like host, port, user, database name, SSL mode, password, and root certificate. The main function accepts an instance of this typed dictionary, allowing static type checking and convenient access to resource data passed to Windmill scripts from the UI or runtime environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TypedDict\n\nclass postgresql(TypedDict):\n    host: str\n    port: int\n    user: str\n    dbname: str\n    sslmode: str\n    password: str\n    root_certificate_pem: str\n\ndef main(selected_postgres: postgresql):\n\t# Use Resource...\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from JSONPlaceholder (TypeScript/Bun Native)\nDESCRIPTION: This snippet provides a boilerplate for a Windmill 'Rest' script, which is a Bun TypeScript script optimized for fetch operations. It fetches a TODO item from the JSONPlaceholder API based on an input parameter 'example_input' with a default value of 3. It includes comments about the 'native' runtime and limitations (only fetch and stdlib allowed). This script type benefits from an efficient runtime.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/6_rest_grapqhql_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n//native\n//you can add proxy support using //proxy http(s)://host:port\n\n// native scripts are bun scripts that are executed on native workers and can be parallelized\n// only fetch is allowed, but imports will work as long as they also use only fetch and the standard lib\n\n//import * as wmill from \"windmill-client\"\n\nexport async function main(example_input: number = 3) {\n  // \"3\" is the default value of example_input, it can be overriden with code or using the UI\n  const res = await fetch(`https://jsonplaceholder.typicode.com/todos/${example_input}`, {\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n  return res.json();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Simple Transformer Script Extracting Data (JavaScript)\nDESCRIPTION: A basic JavaScript transformer script that takes the result object from a preceding runnable and returns only the nested `data` property. Transformers are used for lightweight data manipulation in the browser after a runnable executes.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn result.data;\n```\n\n----------------------------------------\n\nTITLE: Returning HTML - TypeScript\nDESCRIPTION: This snippet demonstrates how to return data as HTML. It expects a string value containing the HTML code, associated with the \"html\" key. The HTML will be rendered in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"html\": \"<div>...</div>\" }\n```\n\n----------------------------------------\n\nTITLE: Reading Parquet from S3 with Polars and Windmill\nDESCRIPTION: This snippet integrates Polars and S3 access within Windmill, using the `wmill` library to configure the S3 filesystem. The `wmill.polars_connection_settings` function is used to configure S3 access using resource settings. It then opens a Parquet file from S3 and reads it into a Polars dataframe. It shows an alternative approach using Windmill's configuration mechanism, simplifying connection setup compared to the direct S3 configuration.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/27_data_pipelines/index.mdx#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ns3_resource = wmill.get_resource(\"/path/to/resource\")\ns3 = s3fs.S3FileSystem(**wmill.polars_connection_settings(s3_resource))\nwith s3.open(\"s3://windmill_bucket/file.parquet\", mode=\"rb\") as f:\n    dataframe = pl.read_parquet(f)\n```\n\n----------------------------------------\n\nTITLE: Parsing Slack Command Input with Windmill Workflow JavaScript\nDESCRIPTION: Parses the Slack command's 'text' input into 'command' and 'input' variables in a Windmill workflow. Requires the input as a single string, splitting by space. Used as the first step in the workflow to route subsequent branch logic. Inputs: string from Slack ('text_input'). Outputs: an object with 'command' and 'input' fields.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-20-handler-slack-commands/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function main(text_input: string): Output {\n\tconst tokenized: string[] = text_input?.split(' ') || [];\n\tconst command = tokenized[0] || 'help';\n\tconst input = tokenized.slice(1).join(' ');\n\n\treturn { command, input };\n}\n\ninterface Output {\n\tcommand: string;\n\tinput: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Slack Message Script in TypeScript\nDESCRIPTION: A simple TypeScript script for sending messages to a Slack channel using the Slack Web API. It imports the WebClient from the Slack API package, defines a Slack type for authentication, and implements the main function to send a message to a specified channel.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/1_typescript_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebClient } from '@slack/web-api';\n\ntype Slack = {\n\ttoken: string;\n};\n\nexport async function main(slack: Slack, channel: string, message: string): Promise<void> {\n\t// Initialize the Slack WebClient with the token from the Slack resource\n\tconst web = new WebClient(slack.token);\n\n\t// Use the chat.postMessage method from the Slack WebClient to send a message\n\tawait web.chat.postMessage({\n\t\tchannel: channel,\n\t\ttext: message\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Services with Docker Compose\nDESCRIPTION: This command starts all services defined in the `docker-compose.yml` file in detached mode (`-d`). This is used to run the Windmill application, Selenoid, and any other related containers required for the setup described in the document.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-14-selenium-integration/index.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Aggregate user feedback from positive and negative responses using Python\nDESCRIPTION: This script defines a function that combines positive and negative feedback strings into a single summary. It handles cases where either or both inputs are provided and returns an appropriate concatenated string or an empty string if no input is given. It is useful for summarizing multi-part feedback collected from form components.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-28-dynamic-form/index.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional, TypedDict\n\n# Define the main function with optional parameters 'positive' and 'negative'\ndef main(positive: Optional[str] = None, negative: Optional[str] = None) -> str:\n    # Check if both 'positive' and 'negative' are provided\n    if positive and negative:\n        return f\"{positive}.{negative}\"\n    # Return 'positive' if only 'positive' is provided\n    elif positive:\n        return positive\n    # Return 'negative' if only 'negative' is provided\n    elif negative:\n        return negative\n    # Return an empty string if neither is provided\n    else:\n        return \"\"\n```\n\n----------------------------------------\n\nTITLE: Managing App State in Frontend Scripts\nDESCRIPTION: Shows how to access and update the client-side state store in frontend scripts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(state);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstate.foo = 'bar';\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB Atlas using TypeScript in Windmill\nDESCRIPTION: A TypeScript script for Windmill that connects to MongoDB Atlas using the Atlas SDK and performs a query on a specified collection. It takes authentication details, data source, database, collection name, and a filter object as parameters.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/mongodb.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MongoClient } from 'https://deno.land/x/atlas_sdk@v1.0.3/mod.ts';\n\ntype MongodbRest = {\n\tendpoint: string;\n\tapi_key: string;\n};\n\nexport async function main(\n\tauth: MongodbRest,\n\tdata_source: string,\n\tdatabase: string,\n\tcollection: string,\n\tfilter: Record<string, any>\n) {\n\tconst client = new MongoClient({\n\t\tendpoint: auth.endpoint,\n\t\tdataSource: data_source,\n\t\tauth: { apiKey: auth.api_key }\n\t});\n\tconst documents = client.database(database).collection(collection);\n\treturn await documents.find(filter);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Resource Type in TypeScript\nDESCRIPTION: This TypeScript example defines the shape of a PostgreSQL resource parameter passed to a script, either as an untyped object or with full static typing describing connection details such as host, port, user, database name, SSL mode, password, and the root certificate. This typing allows scripts to access and use resource connection information safely. It's intended to be used as a parameter in Windmill scripts utilizing auto-generated UI for resource selection.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Postgresql = object;\n// OR one can fully type it\ntype Postgresql = {\n\thost: string;\n\tport: number;\n\tuser: string;\n\tdbname: string;\n\tsslmode: string;\n\tpassword: string;\n\troot_certificate_pem: string;\n};\n\nexport async function main(postgres: Postgresql) {\n\t// Use Resource...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windmill Medium Setup Compute Units - YAML\nDESCRIPTION: This YAML snippet demonstrates a Windmill medium setup totaling 8 Compute Units. It includes configurations for standard workers (3 replicas, 2GB each), small workers (4 replicas, 1GB each), dedicated report workers (2 replicas, 2GB each), and a native worker (1 replica, 2GB, 8 subworkers), showing how different worker types and memory limits contribute to the total CU count.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/7_plans_details/index.mdx#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  windmill_worker:\n    deploy:\n      replicas: 3  # 3 workers × 1 CU each = 3 CUs\n      resources:\n        limits:\n          memory: 2048M # 2GB = 1 CU\n\n  windmill_small_worker:\n    deploy:\n      replicas: 4  # 4 workers with 1GB memory = 0.5 CUs each = 2 CUs\n      resources:\n        limits:\n          memory: 1024M # 1GB = 0.5 CU\n\n  windmill_worker_reports:\n    deploy:\n      replicas: 2  # 2 workers × 1 CU each = 2 CUs\n      resources:\n        limits:\n          memory: 2048M # 2GB = 1 CU\n    environment:\n      - WORKER_GROUP=reports\n\n  windmill_worker_native:\n    deploy:\n      replicas: 1  # 1 worker with NUM_WORKERS=8 = 1 CU\n      resources:\n        limits:\n          memory: 2048M\n    environment:\n      - WORKER_GROUP=native\n      - NUM_WORKERS=8\n```\n\n----------------------------------------\n\nTITLE: Setting Value via Frontend Script (setValue)\nDESCRIPTION: This function allows manually setting or forcing the value of a component from frontend scripts within Windmill. It requires an 'id' (string) to identify the component and a 'value' (any) to be set.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/rich_text_editor.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`setValue(id: 'a', value: 17)`\n```\n\n----------------------------------------\n\nTITLE: Writing a secret in Vault using Bash\nDESCRIPTION: This Bash snippet demonstrates how to create a new key-value secret at the path 'production/foo' in Vault's KV engine. It uses the 'vault kv put' CLI command with specified mount and key-value pair. Required parameters include the KV mount path, secret path, and the data to store. The output is a persisted secret version under the supplied path. Requires Vault CLI and appropriate authentication.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nvault kv put -mount=secret production/foo foo=world\n```\n\n----------------------------------------\n\nTITLE: Requesting User Resource Input with `askNewResource` in JavaScript\nDESCRIPTION: Details the `askNewResource` function, which prompts the user to select a resource via a specified `UserResourceComponent`. It takes the component's `id` as a string parameter. This function facilitates dynamic resource selection by app viewers.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\naskNewResource(id: string): void\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Defining a PostgreSQL Resource Type\nDESCRIPTION: This snippet demonstrates how to define a fully typed resource object for PostgreSQL in TypeScript. It includes an example main function that uses the resource as a parameter, enabling scripts to interact with a PostgreSQL resource using specified connection parameters.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/code_editor/add_variables_resources.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Postgresql = object;\n// OR one can fully type it\n type Postgresql = {\n\thost: string;\n\tport: number;\n\tuser: string;\n\tdbname: string;\n\tsslmode: string;\n\tpassword: string;\n\troot_certificate_pem: string;\n};\n\nexport async function main(postgres: Postgresql) {\n\t// Use Resource...\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Data with Polars from AWS S3\nDESCRIPTION: This code snippet demonstrates how to read a Parquet file from an AWS S3 bucket using Polars, perform a data transformation, and write the result back to S3. It utilizes `wmill` to retrieve S3 resource settings and configure Polars for S3 access. It assumes the existence of a `wmill` resource with S3 credentials.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/27_data_pipelines/index.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\nfrom wmill import S3Object\nimport polars as pl\nimport s3fs\n\n\ndef main(input_file: S3Object):\n    bucket = wmill.get_resource(\"<PATH_TO_S3_RESOURCE>\")[\"bucket\"]\n\n    # this will default to the workspace S3 resource\n    storage_options = wmill.polars_connection_settings().storage_options\n    # this will use the designated resource\n    # storage_options = wmill.polars_connection_settings(\"<PATH_TO_S3_RESOURCE>\").storage_options\n\n    # input is a parquet file, we use read_parquet in lazy mode.\n    # Polars can read various file types, see\n    # https://pola-rs.github.io/polars/py-polars/html/reference/io.html\n    input_uri = \"s3://{}/{}\".format(bucket, input_file[\"s3\"])\n    input_df = pl.read_parquet(input_uri, storage_options=storage_options).lazy()\n\n    # process the Polars dataframe. See Polars docs:\n    # for dataframe: https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/index.html\n    # for lazy dataframe: https://pola-rs.github.io/polars/py-polars/html/reference/lazyframe/index.html\n    output_df = input_df.collect()\n    print(output_df)\n\n    # To write back the result to S3\n    output_file = \"output/result.parquet\"\n    output_uri = \"s3://{}/{}\".format(bucket, output_file)\n    output_df.write_parquet(output_uri, storage_options=storage_options)\n\n    return S3Object(s3=output_file)\n```\n\n----------------------------------------\n\nTITLE: Accessing Vault secrets via OIDC/JWT authentication in Bash\nDESCRIPTION: This Bash example fetches an OIDC JWT from Windmill, performs a JWT login to Vault to get a Vault token, and then retrieves a secret from Vault's KV store. It uses curl to obtain the JWT, the Vault CLI to log in and extract the token, and finally fetches the secret. Required environment variables: VAULT_ADDR, $WM_TOKEN, $BASE_INTERNAL_URL, and $WM_WORKSPACE. Outputs the retrieved secret data. Requires Vault CLI and windmill token access.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nexport VAULT_ADDR='http://127.0.0.1:8200'\n\nexport VAULT_JWT=$(curl -s -X POST -H \"Authorization: Bearer $WM_TOKEN\" \"$BASE_INTERNAL_URL/api/w/$WM_WORKSPACE/oidc/token/MY_AUDIENCE\")\nexport VAULT_TOKEN=$(vault write -field=token auth/jwt/login role=myproject-production jwt=$VAULT_JWT)\n\nvault kv get -mount=secret production/foo\n```\n\n----------------------------------------\n\nTITLE: Updating Issue with Supabase Client - Deno/TypeScript\nDESCRIPTION: This Deno/TypeScript script updates an issue's 'status' and/or 'severity' fields in a Supabase-managed 'issues' table using the official Supabase JS client. It requires the Supabase project URL and service key, as well as an 'issue' object (typically from a selected table row) and optional new 'status' or 'severity'. The script checks for valid inputs, applies updates only when changes are provided, and triggers recomputation of linked data sources on completion. Returns an empty string on success or a message if no issue is selected or no updates are given.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-31-issue-tracker-p2/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\ntype Supabase = {\n\turl: string;\n\tkey: string;\n};\n\nexport async function main(auth: Supabase, issue: any, status?: string, severity?: string) {\n\tif (!(issue && (status || severity))) {\n\t\treturn 'Make sure that an issue is selected in the table';\n\t}\n\tconst client = createClient(auth.url, auth.key);\n\tawait client\n\t\t.from('issues')\n\t\t.update({\n\t\t\t...issue,\n\t\t\tstatus: status || issue.status,\n\t\t\tseverity: severity || issue.severity\n\t\t})\n\t\t.filter('id', 'eq', issue.id);\n\treturn '';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting AWS credentials with OIDC in Python\nDESCRIPTION: This Python function illustrates how to use Windmill and boto3 to assume an AWS role with a WebIdentity token acquired via Windmill OIDC. It gets an OIDC token using wmill.get_id_token, calls sts.assume_role_with_web_identity with the supplied RoleArn and session name, and prints the resulting credentials structure. Dependencies: wmill and boto3. Key parameters are the AWS role ARN, region, and OIDC target audience. Output is a dictionary containing the AWS keys and session token.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport wmill\nimport boto3\n\ndef main():\n\n    sts = boto3.client(\"sts\")\n    token = wmill.get_id_token(\"sts.amazonaws.com\")\n\n    credentials = sts.assume_role_with_web_identity(\n        RoleArn=\"arn:aws:iam::000000000000:role/my_aws_role\",\n        WebIdentityToken=token,\n        RoleSessionName=\"my_session\",\n    )\n\n    print(credentials)\n```\n\nLANGUAGE: Python\nCODE:\n```\ncredentials = credentials[\"Credentials\"]\n\naws_access_key_id=credentials[\"AccessKeyId\"]\naws_secret_access_key=credentials[\"SecretAccessKey\"]\naws_session_token=credentials[\"SessionToken\"]\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL query with TypeScript (Bun)\nDESCRIPTION: This script connects to a MySQL database using specified resource parameters, executes a query, and resolves with results. It utilizes the 'mysql' package's createConnection function, manages connection lifecycle, and handles errors during connection and query execution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createConnection } from 'mysql';\n\n// Define the Mysql resource type as specified\n type Mysql = {\n  ssl: boolean,\n  host: string,\n  port: number,\n  user: string,\n  database: string,\n  password: string\n}\n\n// The main function that will execute a query on a Mysql resource\nexport async function main(mysqlResource: Mysql, query: string): Promise<any> {\n  // Create a promise to handle the MySQL connection and query execution\n  return new Promise((resolve, reject) => {\n    // Create a connection to the MySQL database using the resource credentials\n    const connection = createConnection({\n      host: mysqlResource.host,\n      port: mysqlResource.port,\n      user: mysqlResource.user,\n      password: mysqlResource.password,\n      database: mysqlResource.database,\n      ssl: mysqlResource.ssl\n    });\n\n    // Connect to the MySQL database\n    connection.connect(err => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      // Execute the query provided as a parameter\n      connection.query(query, (error, results) => {\n        // Close the connection after the query execution\n        connection.end();\n\n        if (error) {\n          reject(error);\n        } else {\n          resolve(results);\n        }\n      });\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Canonical Windmill Data Pipeline with Polars and S3 in Python\nDESCRIPTION: Provides a complete example of a Windmill script function (`main`) that performs an ETL process. It takes an S3 object path as input, initializes connections using `wmill` utilities, reads a Parquet file from S3 using Polars (`pl.read_parquet` with storage options), applies transformations (filtering and aggregation based on TPC-H logic), writes the resulting DataFrame back to S3 as Parquet using `s3fs`, and returns the output file's S3 path. Requires `polars`, `s3fs`, `datetime`, and `wmill` libraries.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-24-data-pipeline-orchestrator/index.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#requirements:\n#polars==0.20.2\n#s3fs==2023.12.0\n#wmill>=1.229.0\n\nimport polars as pl\nimport s3fs\nimport datetime\nimport wmill\n\n\ndef main(input_dataset: S3Object):\n    # initialization: connect Polars to the workspace bucket\n    s3_resource = wmill.get_resource(\"/path/to/resource\")\n    storage_options = wmill.polars_connection_settings().storage_options\n\n    # reading data from s3:\n    bucket = s3_resource[\"bucket\"]\n    input_dataset_uri = \"s3://{}/{}\".format(bucket, input_dataset[\"s3\"])\n\tinput = pl.read_parquet(input_dataset_uri, storage_options=storage_options)\n\n\t# transforming the data\n\toutput = (\n\t\tinput.filter(pl.col(\"L_SHIPDATE\") >= datetime.datetime(1994, 1, 1))\n\t\t\t.filter(\n\t\t\t\tpl.col(\"L_SHIPDATE\")\n\t\t\t\t< datetime.datetime(1994, 1, 1) + datetime.timedelta(days=365)\n\t\t\t)\n\t\t\t.filter((pl.col(\"L_DISCOUNT\").is_between(0.06 - 0.01, 0.06 + 0.01)))\n\t\t\t.filter(pl.col(\"L_QUANTITY\") < 24)\n\t\t\t.select([(pl.col(\"L_EXTENDEDPRICE\") * pl.col(\"L_DISCOUNT\")).alias(\"REVENUE\")])\n\t\t\t.sum()\n\t\t\t.collect()\n\t)\n\n\t# writing the output back to S3\n    s3 = s3fs.S3FileSystem(**wmill.polars_connection_settings().s3fs_args)\n\toutput_dataset_filename = \"output.parquet\"\n    output_dataset_uri = \"s3://{}/{}\".format(bucket, output_dataset_filename)\n    with s3.open(output_dataset_uri, mode=\"wb\") as output_dataset: # Changed mode to 'wb' for writing binary parquet\n        output.write_parquet(output_dataset)\n\n    # returning the URI of the output for next steps to process it\n    # Assuming S3Object is a defined type or class in the Windmill context\n    # return S3Object(s3=output_dataset_filename) \n    return { \"s3\": output_dataset_filename } # Returning a dict as a common pattern\n```\n\n----------------------------------------\n\nTITLE: Dynamic Select Implementation in TypeScript for Windmill\nDESCRIPTION: This TypeScript snippet illustrates how to implement a dynamic select field in Windmill scripts.  It defines a type `DynSelect_foo` and a function `foo` that returns a list of options based on the input parameters `x` and `y`.  The `main` function then uses this dynamic select.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/13_json_schema_and_parsing/index.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type DynSelect_foo = string\n\nexport async function foo(x: string, y: number) {\n  if (x === \"bar\") {\n    return [{ value: \"barbar\", label: \"barbarbar\" }];\n  }\n  return [\n    { value: '1', label: 'Foo' + x + y },\n    { value: '2', label: 'Bar' },\n    { value: '3', label: 'Foobar' }\n  ]\n}\n\nexport async function main(y: number, x: string, xy: DynSelect_foo) {\n  console.log(xy)\n  return xy\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Windmill Variable Syntax (Bash)\nDESCRIPTION: Displays the command syntax for adding a new variable using `wmill add`. It requires a `remote_path` and `--value`, and supports optional flags like `--secret` (or `--plain-secrets`), `--description`, `--account`, and `--oauth` to define the variable's properties.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/variable.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill add <remote_path:string> --value=<value:string> [--secret] [--description=<description:string>] [--account=<account:number>] [--oauth]\n```\n\n----------------------------------------\n\nTITLE: Extending Windmill Base Image with Dockerfile\nDESCRIPTION: Basic template for extending the Windmill base image to install additional binaries. This approach requires building a custom Docker image that includes the desired tools.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/8_preinstall_binaries/index.mdx#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/windmill-labs/windmill:main\n# or FROM ghcr.io/windmill-labs/windmill-ee:main for extending the enterprise edition\n\nRUN apt-get update && apt install [...]\n\nCMD [\"windmill\"]\n```\n\n----------------------------------------\n\nTITLE: Within Windmill: not recommended\nDESCRIPTION: This section discusses the limitations of internal Windmill storage, emphasizing that Windmill is not optimized for heavy or long-term data storage, and recommends external storage providers for big data. It includes a link to detailed documentation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/11_persistent_storage/index.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Within Windmill: not recommended\"\n\t\tdescription=\"Windmill is not designed to store heavy data that extends beyond the execution of a script or flow. There are however internal methods to persist data between executions of jobs.\"\n\t\thref=\"/docs/core_concepts/persistent_storage/within_windmill\"\n\t/>\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Windmill Large Cloud Setup Compute Units - YAML\nDESCRIPTION: This YAML snippet outlines a large Windmill Enterprise Edition setup on a cloud plan, resulting in 16 Compute Units. It includes standard workers (2 replicas, 2GB each), large workers (4 replicas, 6GB each, utilizing linear scaling of CUs with memory on cloud), report workers (1 replica, 2GB), and a native worker (1 replica, 2GB, 8 subworkers).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/7_plans_details/index.mdx#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  windmill_worker_standard:\n    deploy:\n      replicas: 2  # 2 workers × 1 CU each = 2 CUs\n      resources:\n        limits:\n          memory: 2048M  # 2GB = 1 CU per worker\n\n  windmill_worker_large:\n    deploy:\n      replicas: 4  # 4 workers × 3 CUs each = 12 CUs\n      resources:\n        limits:\n          memory: 6144M  # 6GB = 3 CUs per worker\n\n  windmill_worker_reports:\n    deploy:\n      replicas: 1 # 1 worker × 1 CU = 1 CU\n      resources:\n        limits:\n          memory: 2048M # 2GB = 1 CU\n\n  windmill_worker_native:\n    deploy:\n      replicas: 1  # 1 worker with 8 subworkers (can't be changed) = 1 CU\n      resources:\n        limits:\n          memory: 2048M\n    environment:\n      - WORKER_GROUP=native\n      - NUM_WORKERS=8\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Object with Secondary Storage (TypeScript)\nDESCRIPTION: Shows how to define an S3 object reference that points to a specific file within a named secondary storage configured in the Windmill workspace. The object includes the `s3` path and the `storage` name.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/38_object_storage_in_windmill/index.mdx#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst file = {s3: 'folder/hello.txt', storage: 'storage_1'}\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with `downloadFile` in JavaScript\nDESCRIPTION: Explains the `downloadFile` helper function used to initiate a file download in the user's browser. The function accepts various input types: a URL, a base64 encoded string, a dataUrl, or an S3 object specification. An optional `fileName` can be provided.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndownloadFile(input: string | { s3: string; storage?: string; }, fileName?: string): void\n```\n\n----------------------------------------\n\nTITLE: Annotating Python version for script execution in Windmill using Python\nDESCRIPTION: This snippet shows how to specify the Python runtime version directly in the script by using a special annotation comment (e.g., '# py312'). This instructs Windmill to run the script with Python 3.12, overriding default or instance-level versions. The example defines a simple type alias 'Foo' as a string and a main function that returns a string value of 'Foo'. This requires Windmill's environment to support version annotations and affects dependency resolution and script caching accordingly.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/2_python_quickstart/index.mdx#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# py312\n\ntype Foo = str\n\ndef main():\n\tfoo: Foo = \"Foo\"\n\treturn foo\n```\n\n----------------------------------------\n\nTITLE: Pushing Windmill Variable Specification Syntax (Bash)\nDESCRIPTION: Shows the command syntax for `wmill push` to upload a local variable specification file (`file_path`) to a specified location (`remote_path`) in the remote workspace, overwriting any existing variable. The `--plain-secrets` option prevents encryption of secret values.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/variable.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwmill push <file_path:string> <remote_path:string> [--plain-secrets]\n```\n\n----------------------------------------\n\nTITLE: Handling Basic GCP Pub/Sub Messages in TypeScript\nDESCRIPTION: A basic Windmill TypeScript script demonstrating how to receive and process a GCP Pub/Sub message. The script decodes the base64-encoded 'payload' argument, attempts to parse it as JSON, and logs either the parsed object or the raw decoded string.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/50_gcp_triggers/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(payload: string) {\n  const decoded = new TextDecoder().decode(Uint8Array.from(atob(payload), c => c.charCodeAt(0)));\n\n  try {\n    const jsonData = JSON.parse(decoded);\n    console.log(\"Received JSON data:\", jsonData);\n    // Process structured data\n  } catch (e) {\n    console.log(\"Received plain text:\", decoded);\n    // Process raw text\n  }\n\n  return { processed: true };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Issue in Supabase - TypeScript\nDESCRIPTION: This TypeScript (Deno) script uses the Supabase client to insert a new issue into the 'issues' table. It takes authentication credentials and issue details (summary, description, status, severity, created_by, assigned_to) as input and returns the result of the insert operation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-25-issue-tracker/index.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\ntype Supabase = {\n\turl: string;\n\tkey: string;\n};\n\nexport async function main(\n\tauth: Supabase,\n\tsummary: string,\n\tdescription: string,\n\tcreated_by: string,\n\tassigned_to: string,\n\tstatus: string,\n\tseverity: string\n) {\n\tconst client = createClient(auth.url, auth.key);\n\treturn await client.from('issues').insert({\n\t\tsummary,\n\t\tdescription,\n\t\tstatus,\n\t\tseverity,\n\t\tcreated_by,\n\t\tassigned_to\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a WebSocket Preprocessor and Runnable in TypeScript\nDESCRIPTION: This snippet demonstrates the use of a preprocessor function alongside the main runnable for WebSocket triggers in Windmill. The `preprocessor` asynchronously receives the raw message string and the trigger metadata including the WebSocket URL, parses the message assuming JSON format, and returns an object with processed parameters. These parameters (`message_content` and `url`) are then received by the `main` function which contains the core processing logic. This pattern enables decoupling of message parsing and business logic. It requires the input message to be JSON-parseable and depends on Windmill's trigger metadata structure.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/40_websocket_triggers/index.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function preprocessor(\n  msg: string,\n  wm_trigger: {\n    kind: \"websocket\",\n    websocket: {\n      url: string // the WebSocket URL\n    }\n  },\n) {\n  // assuming the message is a JSON object\n  const msg = JSON.parse(msg); \n\n  // define args for the main function\n  // let's assume we want to use the message content and the url\n  return {\n    message_content: msg.content,\n    url: wm_trigger.websocket.url\n  };\n}\n\n\nexport async function main(message_content: string, url: string) {\n  // do something with the message content and url\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Bar Chart for 40 Lightweight Tasks (Excluding Airflow) in JSX\nDESCRIPTION: JSX component that displays a bar chart comparing the execution duration of 40 lightweight tasks across workflow engines excluding Airflow. The chart shows data for Kestra, Prefect, Temporal, and Windmill in both normal and dedicated worker modes.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_18\n\nLANGUAGE: JSX\nCODE:\n```\n<TaskDurationBarChart\n\ttitle=\"40 lightweight tasks (excluding Airflow)\"\n\txTitle=\"Duration (in seconds)\"\n\tlabels={[['Kestra'], ['Prefect'], ['Temporal'], ['Windmill', 'Normal'], ['Windmill', 'Dedicated Worker']]}\n\trawData={[\n\t\t[\n\t\t\t[\n\t\t\t\t0.931, 0.03, 0.034, 0.026, 0.06, 0.048, 0.042, 0.023, 0.06, 0.06, 0.018, 0.065, 0.049,\n\t\t\t\t0.06, 0.032, 0.052, 0.046, 0.039, 0.045, 0.048, 0.035, 0.049, 0.041, 0.044, 0.055, 0.051,\n\t\t\t\t0.066, 0.057, 0.066, 0.059, 0.027, 0.026, 0.042, 0.041, 0.037, 0.035, 0.05, 0.035, 0.057,\n\t\t\t\t0.04\n\t\t\t],\n\t\t\t[\n\t\t\t\t0.035, 0.037, 0.034, 0.04, 0.039, 0.037, 0.036, 0.038, 0.038, 0.034, 0.041, 0.037, 0.037,\n\t\t\t\t0.041, 0.043, 0.035, 0.035, 0.035, 0.035, 0.036, 0.035, 0.037, 0.035, 0.037, 0.041, 0.038,\n\t\t\t\t0.035, 0.037, 0.038, 0.034, 0.044, 0.036, 0.038, 0.038, 0.042, 0.041, 0.038, 0.039, 0.036,\n\t\t\t\t0.039\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t[\n\t\t\t\t1.213, 0.064, 0.061, 0.059, 0.054, 0.053, 0.053, 0.054, 0.055, 0.056, 0.057, 0.064, 0.052,\n\t\t\t\t0.056, 0.056, 0.058, 0.052, 0.051, 0.054, 0.053, 0.053, 0.055, 0.052, 0.054, 0.062, 0.051,\n\t\t\t\t0.051, 0.052, 0.051, 0.048, 0.055, 0.057, 0.049, 0.048, 0.055, 0.05, 0.051, 0.05, 0.053,\n\t\t\t\t0.054\n\t\t\t],\n\t\t\t[\n\t\t\t\t0.044, 0.041, 0.04, 0.036, 0.035, 0.038, 0.037, 0.061, 0.039, 0.038, 0.04, 0.038, 0.038,\n\t\t\t\t0.041, 0.039, 0.043, 0.035, 0.035, 0.035, 0.038, 0.037, 0.036, 0.036, 0.038, 0.039, 0.034,\n\t\t\t\t0.035, 0.037, 0.034, 0.083, 0.035, 0.034, 0.033, 0.034, 0.038, 0.034, 0.034, 0.035, 0.035,\n\t\t\t\t0.034\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t[\n\t\t\t\t0.009, 0.028, 0.027, 0.029, 0.029, 0.029, 0.03, 0.03, 0.032, 0.028, 0.028, 0.028, 0.029,\n\t\t\t\t0.041, 0.029, 0.029, 0.077, 0.09, 0.091, 0.093, 0.092, 0.09, 0.092, 0.091, 0.091, 0.091,\n\t\t\t\t0.091, 0.09, 0.091, 0.093, 0.09, 0.093, 0.092, 0.091, 0.09, 0.092, 0.091, 0.091, 0.091,\n\t\t\t\t0.092\n\t\t\t],\n\t\t\t[\n\t\t\t\t0.007, 0.008, 0.008, 0.008, 0.007, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008,\n\t\t\t\t0.008, 0.009, 0.009, 0.009, 0.009, 0.008, 0.008, 0.009, 0.008, 0.009, 0.009, 0.009, 0.009,\n\t\t\t\t0.009, 0.008, 0.009, 0.009, 0.008, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.008,\n\t\t\t\t0.008\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t[\n\t\t\t\t0.003, 0.046, 0.047, 0.045, 0.048, 0.047, 0.047, 0.047, 0.047, 0.048, 0.046, 0.046, 0.047,\n\t\t\t\t0.047, 0.047, 0.048, 0.047, 0.047, 0.047, 0.047, 0.048, 0.047, 0.047, 0.047, 0.047, 0.046,\n\t\t\t\t0.047, 0.047, 0.048, 0.047, 0.047, 0.047, 0.047, 0.049, 0.047, 0.047, 0.048, 0.047, 0.047,\n\t\t\t\t0.046\n\t\t\t],\n\t\t\t[\n\t\t\t\t0.056, 0.058, 0.054, 0.054, 0.055, 0.056, 0.056, 0.054, 0.053, 0.055, 0.058, 0.054, 0.055,\n\t\t\t\t0.054, 0.055, 0.055, 0.053, 0.052, 0.055, 0.056, 0.057, 0.056, 0.055, 0.054, 0.054, 0.055,\n\t\t\t\t0.053, 0.054, 0.055, 0.068, 0.057, 0.056, 0.054, 0.055, 0.053, 0.055, 0.055, 0.056, 0.056,\n\t\t\t\t0.059\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t[\n\t\t\t\t0.019, 0.044, 0.044, 0.044, 0.044, 0.045, 0.046, 0.045, 0.045, 0.046, 0.045, 0.046, 0.045,\n\t\t\t\t0.046, 0.045, 0.046, 0.046, 0.045, 0.045, 0.046, 0.045, 0.045, 0.046, 0.045, 0.046, 0.046,\n\t\t\t\t0.045, 0.045, 0.046, 0.045, 0.046, 0.045, 0.046, 0.047, 0.046, 0.046, 0.046, 0.045, 0.045,\n\t\t\t\t0.046\n\t\t\t],\n\t\t\t[\n\t\t\t\t0.003, 0.004, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.004,\n\t\t\t\t0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,\n\t\t\t\t0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,\n\t\t\t\t0.003\n\t\t\t]\n\t\t]\n\t]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC/JWT authentication in Hashicorp Vault (configuration script, Bash)\nDESCRIPTION: This Bash code block configures JWT (OIDC) authentication in Hashicorp Vault by enabling the jwt auth method, setting issuer and discovery URLs, and defining a role and policy for OIDC-based authentication. It writes a Vault policy with read permission to a secret path. Inputs include Vault's base URL, OIDC provider URL, audience, and allowed claims. Output is a Vault instance ready to accept OIDC login and enforce the associated policy. Requires Vault CLI installed and a configured Vault server.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nvault auth enable jwt\n\nvault write auth/jwt/config \\\n  bound_issuer=\"<base_url>/api/oidc/\" \\\n  oidc_discovery_url=\"<base_url>/api/oidc/\"\n\nvault write auth/jwt/role/myproject-production -<<EOF\n{\n  \"role_type\": \"jwt\",\n  \"bound_audiences\": [\"MY_AUDIENCE\"],\n  \"bound_claims\": { \"email\": \"admin@windmill.dev\"},\n  \"user_claim\": \"sub\",\n  \"policies\": [\"myproject-production\"],\n  \"ttl\": \"10m\"\n}\nEOF\n\n vault policy write myproject-production - <<EOF\n# Read-only permission on 'secret/data/production/*' path\n\npath \"secret/data/production/*\" {\n  capabilities = [ \"read\" ]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Launching and Using Chromium with Playwright in TypeScript (Bun)\nDESCRIPTION: This snippet demonstrates launching a Chromium browser using the Playwright library within a Bun runtime environment, specifically targeting a Chromium binary installed at '/usr/bin/chromium'. It disables the sandbox with appropriate flags to run inside Windmill workers, opens a new page, navigates to 'https://google.com', retrieves the page title, and closes the browser. Dependencies include the Playwright package. The main function returns the page title as a string.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/10_browser_automation/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { chromium } from \"playwright\"\n\nexport async function main() {\n  const browser = await chromium.launch({\n    executablePath: \"/usr/bin/chromium\",\n    args: ['--no-sandbox', '--single-process', '--no-zygote', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-gpu'],\n  });\n  \n  const page = await browser.newPage();\n  await page.goto(\"https://google.com\");\n\n  const title = await page.title();\n\n  await browser.close()\n  \n  return title\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initialize PostgreSQL Database as Superuser Using Bash and SQL\nDESCRIPTION: This Bash snippet shows how to fetch and execute a SQL script to initialize the Postgres database with superuser permissions required by Windmill when superuser access is not directly available. It downloads the `init-db-as-superuser.sql` file from the Windmill repository and runs it against the database specified by the `DATABASE_URL`. This ensures that the database user has the correct roles (`windmill_admin` and `windmill_user`) needed for Windmill functionality.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/windmill-labs/windmill/main/init-db-as-superuser.sql -o init-db-as-superuser.sql\npsql <DATABASE_URL> -f init-db-as-superuser.sql\n```\n\n----------------------------------------\n\nTITLE: NoSQL & Document databases (Mongodb, Key-Value Stores)\nDESCRIPTION: This snippet discusses NoSQL storage options like MongoDB, Redis, and Upstash, emphasizing their usefulness for managing non-structured, scalable data. It highlights the flexibility and wide applicability of key-value and document databases within Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/11_persistent_storage/index.mdx#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"NoSQL & Document databases (Mongodb, Key-Value Stores)\"\n\t\tdescription=\"Key-value stores are a popular choice for managing non-structured data, providing a flexible and scalable solution for various data types and use cases.\"\n\t\thref=\"/docs/core_concepts/persistent_storage/key_value_stores\"\n\t/>\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Bash: Fetching a Resource Using cURL with Windmill API\nDESCRIPTION: This Bash example fetches a resource called 'u/user/foo' via a cURL command, including an authorization token, to demonstrate how scripts can retrieve resources from Windmill's API under the job's permissions.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/code_editor/add_variables_resources.mdx#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -s -H \"Authorization: Bearer $WM_TOKEN\" \\\n  \"$BASE_INTERNAL_URL/api/w/$WM_WORKSPACE/resources/get/u/user/foo\" \\\n    | jq -r .value\n```\n\n----------------------------------------\n\nTITLE: Creating a Flow Preprocessor Function in Python\nDESCRIPTION: Provides a template for a Python function (`preprocessor`) used as a flow preprocessor step in Windmill, utilizing TypedDict for type hinting trigger metadata. This function takes trigger-specific arguments (commented out placeholder) and a `wm_trigger` dictionary containing typed metadata about the event source (e.g., HTTP, Kafka, SQS). It must return a dictionary where keys correspond to the flow's input parameter names, supplying the values for the subsequent flow execution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/43_preprocessors/index.mdx#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import TypedDict, Literal\nclass Http(TypedDict):\n    route: str # The route path, e.g. \"/users/:id\"\n    path: str  # The actual path called, e.g. \"/users/123\"\n    method: str\n    params: dict[str, str]\n    query: dict[str, str]\n    headers: dict[str, str]\n\nclass Websocket(TypedDict):\n    url: str # The websocket url\n\nclass Kafka(TypedDict):\n    topic: str\n    brokers: list[str]\n    group_id: str\n\nclass Nats(TypedDict):\n    servers: list[str]\n    subject: str\n    headers: dict[str, list[str]] | None\n    status: int | None\n    description: str | None\n    length: int\n\nclass MessageAttribute(TypedDict):\n    string_value: str | None\n    data_type: str\n\nclass Sqs(TypedDict):\n    queue_url: str\n    message_id: str | None\n    receipt_handle: str | None\n    attributes: dict[str, str]\n    message_attributes: dict[str, MessageAttribute] | None\n\nclass MqttV5Properties:\n    payload_format_indicator: int | None\n    topic_alias: int | None\n    response_topic: str | None\n    correlation_data: list[int] | None\n    user_properties: list[tuple[str, str]] | None\n    subscription_identifiers: list[int] | None\n    content_type: str | None\n\nclass Mqtt(TypedDict):\n    topic: str\n    retain: bool\n    pkid: int\n    qos: int\n    v5: MqttV5Properties | None\n\nclass Gcp(TypedDict):\n    message_id: str\n    subscription: str\n    ordering_key: str | None\n    attributes: dict[str, str] | None\n    delivery_type: Literal[\"push\", \"pull\"]\n    headers: dict[str, str] | None\n    publish_time: str | None\n\nclass WmTrigger(TypedDict):\n    kind: Literal[\"http\", \"email\", \"webhook\", \"websocket\", \"kafka\", \"nats\", \"postgres\", \"sqs\", \"mqtt\", \"gcp\"]\n    http: Http | None\n    websocket: Websocket | None\n    kafka: Kafka | None\n    nats: Nats | None\n    sqs: Sqs | None\n    mqtt: Mqtt | None\n    gcp: Gcp | None\n\ndef preprocessor(\n    # Replace this comment with the parameters received from the trigger.  \n    # Examples: `bodyKey1`, `bodyKey2` for Webhook/HTTP, `msg` for WebSocket, etc.  \n\n    # Trigger metadata\n    wm_trigger: WmTrigger,\n):\n    return {\n        # return the args to be passed to the runnable\n    }\n```\n\n----------------------------------------\n\nTITLE: Teams Command Handler Script\nDESCRIPTION: This TypeScript script demonstrates how to create a command handler for Microsoft Teams within Windmill. It receives parameters from the Teams command, executes a business logic, and optionally sends a message back to the Teams channel. It requires the `windmill-client` library to interact with Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/teams.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as wmill from \"windmill-client\"\n\nexport async function main(\n  activity_id: string,\n  command: string,\n  from_name: string,\n  team_id: string,\n  teams_message: any\n) {\n  // Your business logic\n  const res = \"task completed successfully!\"\n\n  // (optional) Send update to Teams channel about completion of job\n  await wmill.TeamsService.sendMessageToConversation(\n    {\n      requestBody: {\n        conversation_id: activity_id,\n        success: true,\n        text: `Hi, ${from_name}, command: ${command} ran successfully with the following result: ${res}`\n      }\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Example\nDESCRIPTION: This JSON Schema defines the structure for an object with properties 'your_name' and 'your_nickname', both of which are strings. It specifies the schema version and the type of the object as 'object'. It also includes descriptions for each property.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/13_json_schema_and_parsing/index.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"your_name\": {\n\t\t\t\"description\": \"The name to hello world to\",\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"your_nickname\": {\n\t\t\t\"description\": \"If you prefer a nickname, that's fine too\",\n\t\t\t\"type\": \"string\"\n\t\t}\n\t},\n\t\"required\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Launching and Using Chromium with Puppeteer in TypeScript (Bun)\nDESCRIPTION: This snippet illustrates launching a Chromium browser using the Puppeteer-core library in a Bun environment, targeting the Chromium binary located at '/usr/bin/chromium'. It runs Chromium in headless mode and disables the sandbox using multiple arguments to ensure compatibility within Windmill workers. A new page is created and navigated to 'https://google.com'; the page title is retrieved and returned after closing the browser. The code depends on the 'puppeteer-core' package.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/10_browser_automation/index.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport puppeteer from \"puppeteer-core\";\n\nexport async function main() {\n  const browser = await puppeteer.launch({\n    headless: true,\n    executablePath: \"/usr/bin/chromium\",\n    args: ['--no-sandbox', '--single-process', '--no-zygote', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-gpu'],\n  });\n\n  const page = await browser.newPage();\n  await page.goto(\"https://google.com\");\n\n  const title = await page.title();\n\n  await browser.close();\n\n  return title;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Global / Instance Error Handler in TypeScript\nDESCRIPTION: This snippet demonstrates a global error handler template to be used at the instance level, capturing error context for any script or flow occurrence. The script logs error details and returns the error object. It operates based on an environment variable defining the handler path.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/10_error_handling/index.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Global / workspace error handler template\n\nexport async function main(\n\tpath: string, // The path of the script or flow that errored\n\temail: string, // The email of the user who ran the script or flow that errored\n\terror: object, // The error details\n\tjob_id: string, // The job id\n\tis_flow: boolean, // Whether the error comes from a flow\n\tworkspace_id: string // The workspace id of the failed script or flow\n) {\n\tconst run_type = is_flow ? 'flow' : 'script';\n\tconsole.log(\n\t\t`An error occurred with ${run_type} ${path} run by ${email} in workspace ${workspace_id}`\n\t);\n\tconsole.log(error);\n\treturn error;\n}\n```\n\n----------------------------------------\n\nTITLE: Workspace Error Handler in Windmill\nDESCRIPTION: This snippet discusses automated error handling at the workspace level, allowing errors in any script or flow to trigger predefined scripts or flows. It includes integration with Slack and Teams, plus instructions to define custom handlers via workspace settings. No executable code provided.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/10_error_handling/index.mdx#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Querying gRPC Service Dynamically in Windmill with JavaScript (Bun) Using proto-loader\nDESCRIPTION: This JavaScript (Bun) script dynamically queries a gRPC service in Windmill by first writing the raw .proto definition from a Windmill variable to a local file, then loading the service definition using @grpc/proto-loader and grpc-js. It asynchronously creates a gRPC client, wraps callback-style RPC calls in Promises for idiomatic async/await use, and returns the response from the 'SayHello' method. Dependencies include 'windmill-client', '@grpc/grpc-js', '@grpc/proto-loader', and Bun's filesystem. The script handles service proto loading limitations gracefully and is designed for direct invocation within Windmill workflows.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-22-query-grcp-service/index.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as wmill from 'windmill-client';\nimport * as grpc from '@grpc/grpc-js';\nimport * as protoLoader from '@grpc/proto-loader';\n\nconst SERVICE_NAME = 'helloworld';\n\nexport async function main() {\n\tawait writeProto();\n\tlet service = await loadService();\n\n\tlet client = new service.Greeter('localhost:1353', grpc.credentials.createInsecure());\n\treturn await query(client, 'SayHello', { name: 'Windmill!' });\n}\n\nasync function query(client, method, args): Promise<string> {\n\treturn new Promise((resolve, reject) => {\n\t\tclient[method](args, function (err, resp) {\n\t\t\tif (resp) {\n\t\t\t\tresolve(resp);\n\t\t\t} else {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t});\n}\n\nasync function loadService() {\n\tvar serviceDefinition = protoLoader.loadSync('./service.proto', {\n\t\tkeepCase: true,\n\t\tlongs: String,\n\t\tenums: String,\n\t\tdefaults: true,\n\t\toneofs: true\n\t});\n\treturn grpc.loadPackageDefinition(serviceDefinition)[SERVICE_NAME];\n}\n\nasync function writeProto() {\n\tconst proto = await wmill.getVariable('u/admin/service_proto');\n\tawait Bun.write('./service.proto', proto);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Target for Jaeger (YAML)\nDESCRIPTION: A Prometheus configuration file (`prometheus-config.yaml`) setting global scrape intervals and defining a scrape job named `aggregated-trace-metrics`. This job targets the Jaeger service (specifically `jaeger:8889`) to collect metrics generated from traces.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/otel/index.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: aggregated-trace-metrics\n    static_configs:\n    - targets: ['jaeger:8889']\n```\n\n----------------------------------------\n\nTITLE: Rendering Task Duration Bar Charts with React\nDESCRIPTION: An implementation of React components utilizing 'TaskDurationBarChart' to visualize durations of 10 long-running and 40 lightweight sequential tasks. It configures chart titles, labels, and raw data arrays representing task durations, with 'maintainAspectRatio' set to false for flexible design. The snippets do not include full component definitions but demonstrate usage within a React application for performance metrics display.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"grid\">\n\t<TaskDurationBarChart\n\t\ttitle=\"10 long running tasks\"\n\t\txTitle=\"Duration (in seconds)\"\n\t\tlabels={['Prefect']}\n\t\trawData={[ ... ]}\n\t\tmaintainAspectRatio={false}\n\t/>\n</div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"grid\">\n\t<TaskDurationBarChart\n\t\ttitle=\"40 lightweight tasks\"\n\t\txTitle=\"Duration (in seconds)\"\n\t\tlabels={['Prefect']}\n\t\trawData={[ ... ]}\n\t\tmaintainAspectRatio={false}\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Controlling Date Select with setValue in Frontend Scripts (JavaScript)\nDESCRIPTION: Describes the `setValue` function used within Windmill Apps frontend scripts to programmatically set or force the value of a component, such as the Date select. It accepts the component's unique identifier (id) as a string and the desired value (any type, should be compatible with the Date select component) as arguments. It is noted that mixing dynamic default values and `setValue` is generally not recommended.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/date_select.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetValue(id: string, value: any)\n```\n\n----------------------------------------\n\nTITLE: Calculating Fibonacci in an AWS Lambda Python Function\nDESCRIPTION: Defines a recursive Python function `fibo` (N=33) identical to the Windmill version. The `lambda_handler` function serves as the entry point, calling `fibo` and returning the result in the standard AWS Lambda response format with a 200 status code and JSON-serialized body. Designed for Python 3.11 runtime.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/aws_lambda/index.mdx#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport json\n\nN_FIBO = 33\n\ndef fibo(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fibo(n - 1) + fibo(n - 2)\n\ndef lambda_handler(event, context):\n    result = fibo(N_FIBO)\n    return {\n        'statusCode': 200,\n        'body': json.dumps(result)\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Testing/Debugging Code to Python Script\nDESCRIPTION: This snippet shows how to add testing and debugging code to a Python script that is intended to run only when the script is executed directly, not imported as a module.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/run_locally.mdx#_snippet_4\n\nLANGUAGE: py\nCODE:\n```\nif __name__ == '__main__':\n    # Add your testing & debugging code here.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Returning File - TypeScript\nDESCRIPTION: This snippet shows how to return an option to download a file. It requires a nested object with \"content\" (encoded file data) and \"filename\". The UI will provide a download link.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"file\": { \"content\": encode(file), \"filename\": \"data.txt\" } }\n```\n\n----------------------------------------\n\nTITLE: Declaring Python and Ansible Galaxy Collection Dependencies for Windmill Ansible Playbooks Using YAML\nDESCRIPTION: This snippet details how to specify required dependencies for Ansible playbooks executed in Windmill. Dependencies include Ansible Galaxy collections listed under the 'galaxy' key and Python packages under the 'python' key. Windmill installs these dependencies locally before running the playbook, ensuring all required modules are available without containerization.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  galaxy:\n    collections:\n      - name: community.general\n      - name: community.vmware\n  python:\n    - jmespath\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Issues into Database in SQL\nDESCRIPTION: SQL script that populates the 'issues' table with mock data. It creates 4 sample issues with different severities and randomly assigns them to developers, demonstrating how to create related records between tables.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-25-issue-tracker/index.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n-- Insert issues\nINSERT INTO issues(created_by, summary, description, severity, assigned_to)\nVALUES\n  (\n    (SELECT id FROM users ORDER BY RANDOM() LIMIT 1),\n    'Update call-to-action button color',\n    'The color should be light blue',\n    'LOW',\n    (SELECT id FROM users WHERE EXISTS (\n      SELECT FROM unnest(roles) role WHERE role LIKE 'DEVELOPER'\n    ) ORDER BY RANDOM() LIMIT 1)\n  ),\n  (\n    (SELECT id FROM users ORDER BY RANDOM() LIMIT 1),\n    'Check for SQL injections',\n    'Make sure that SQL can not be injected with calls to the backend',\n    'HIGH',\n    (SELECT id FROM users WHERE EXISTS (\n      SELECT FROM unnest(roles) role WHERE role LIKE 'DEVELOPER'\n    ) ORDER BY RANDOM() LIMIT 1)\n  ),\n  (\n    (SELECT id FROM users ORDER BY RANDOM() LIMIT 1),\n    'Create search component',\n    'A new component should be created to allow searching in the application',\n    'MEDIUM',\n    (SELECT id FROM users WHERE EXISTS (\n      SELECT FROM unnest(roles) role WHERE role LIKE 'DEVELOPER'\n    ) ORDER BY RANDOM() LIMIT 1)\n  ),\n  (\n    (SELECT id FROM users ORDER BY RANDOM() LIMIT 1),\n    'Fix CORS error',\n    'A Cross Origin Resource Sharing error occurs when trying to load the \"kitty.png\" image',\n    'HIGH',\n    (SELECT id FROM users WHERE EXISTS (\n      SELECT FROM unnest(roles) role WHERE role LIKE 'DEVELOPER'\n    ) ORDER BY RANDOM() LIMIT 1)\n  );\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Changes\nDESCRIPTION: This Bash snippet shows the basic command syntax for `wmill sync push`. This command is used to upload local scripts, flows, and other configured Windmill objects from the local filesystem to the currently selected remote workspace. Options similar to `pull` are available to customize the push operation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/sync.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwmill sync push [options]\n```\n\n----------------------------------------\n\nTITLE: Email Trigger with Preprocessor in TypeScript\nDESCRIPTION: An advanced TypeScript implementation using a preprocessor to extract specific email information before passing it to the main function. This pattern allows for cleaner data handling by extracting only the needed components from the email.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/17_email_triggers/index.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function preprocessor(\n  raw_email: string,\n  parsed_email: any,\n  wm_trigger: {\n    kind: \"email\",\n  },\n) {\n  // return what you want to pass to the main function, for instance the sender email address and the email body\n  return {\n    sender_address: parsed_email.headers[\"From\"][0].address,\n    email_body: parsed_email.text_body\n  }\n}\n\nexport async function main(sender_address: string, email_body: string) {\n  // do something with the sender email address and the email body\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Using OIDC Token with AWS STS - TypeScript (Bun)\nDESCRIPTION: This snippet demonstrates OIDC integration in a TypeScript Bun environment. It imports the AWS SDK and Windmill client, retrieves an OIDC token using wmill.getIdToken with the AWS audience, and uses AssumeRoleWithWebIdentityCommand to request AWS credentials. It requires installing @aws-sdk/client-sts and windmill-client. Parameters include the AWS RoleArn, audience string, and role session name. The function outputs the assumed role credentials via console, and requires network connectivity and environment configuration.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { STSClient } from '@aws-sdk/client-sts';\nimport { AssumeRoleWithWebIdentityCommand } from '@aws-sdk/client-sts';\nimport * as wmill from 'windmill-client';\n\nexport async function main() {\n\tconst token = await wmill.getIdToken('sts.amazonaws.com');\n\n\tconst command = new AssumeRoleWithWebIdentityCommand({\n\t\tRoleArn: 'arn:aws:iam::000000000000:role/my_aws_role',\n\t\tWebIdentityToken: token,\n\t\tRoleSessionName: 'my_session'\n\t});\n\n\tconst client = new STSClient({ region: 'us-east-1' });\n\tconsole.log(await client.send(command));\n}\n```\n\n----------------------------------------\n\nTITLE: Managing User-Defined Variables with wmill in Python\nDESCRIPTION: Demonstrates using the `wmill` client library in Python to retrieve (`get_variable`) and update (`set_variable`) user-defined variables stored in Windmill. Requires the `wmill` library to be imported. `get_variable` takes the variable path (e.g., 'u/user/foo') and returns its value, while `set_variable` takes the path and the new value.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/2_variables_and_secrets/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\n\nwmill.get_variable(\"u/user/foo\")\nwmill.set_variable(\"u/user/foo\", value)\n```\n\n----------------------------------------\n\nTITLE: Safe Interpolation with Enum Validation in SQL\nDESCRIPTION: Demonstrates safe string interpolation using the `%%param%%` syntax, specifically when an enum list is provided (`value1/value2`). The parameter will be validated against the enum list at runtime. Also includes a standard prepared statement argument (`:name`).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n-- :daily_minimum_calories (int)\n-- %%table_name%% fruits/vegetables/cereals\n\nSELECT name, calories FROM %%table_name%% WHERE calories > daily_minimum_calories\n```\n\n----------------------------------------\n\nTITLE: Documentation for Accordion List Component Usage and Features\nDESCRIPTION: This snippet describes the purpose and key functionalities of the Accordion list component, including header setting, component management, and configuration options. It also details the control functions and output parameters for external scripting and data retrieval.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/accordion.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n\n# Accordion list\n\nThe Accordion list component enables duplication of cards or rows with consistent structure in an accordion, allowing for containment of other components. By default, editing or moving a component will apply changes to all cards or rows, while still allowing customization and exceptions for unique values per component.\n\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tautoPlay\n\tcontrols\n\tsrc=\"/videos/accordion_list.mp4\"\n\talt=\"accordion list component\"\n/>\n<br />\n\n## Accordion header\n\nTo set the header of an accordion, you can pass a `header` property of each of the items passed to the Accordion list component.\n\n![accordion header](../../assets/apps/4_app_component_library/accordion_header.png.webp)\n\nTo add a component to a card, you can either click on `Insert` while you select the container, or you can move an existing component by copy/pasting it.\n\nEditing or moving a component will apply changes to all cards or rows.\n\nTo customize the settings of all components within, you can use `iter.index` and `iter.value`.\n\n- `iter.index` will retrieve the index number of each card (0, 1, 2 etc.).\n\n- `iter.value.key` will retrieve the value of each key defined in the `items` section.\n\nList components also support having inputs set inside them. Retrieve the values of each in the `inputs` field of the List component in the [outputs](../2_outputs.mdx) menu.\n\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tautoPlay\n\tcontrols\n\tsrc=\"/videos/list_inputs.mp4\"\n\talt=\"List inputs\"\n/>\n<br />\n\nThe following section details Accordion list component's specific settings. For more details on the App editor, check the [dedicated documentation](../0_app_editor/index.mdx) or the App editor [Quickstart](../../getting_started/7_apps_quickstart/index.mdx):\n\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"App editor Documentation\"\n\t\tdescription=\"The app editor is a low-code builder to create custom User Interfaces with a mix of drag-and-drop and code.\"\n\t\thref=\"/docs/apps/app_editor\"\n\t/>\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"Apps quickstart\"\n\t\tdescription=\"Learn how to build your first app in a matter of minutes.\"\n\t\thref=\"/docs/getting_started/apps_quickstart\"\n\t/>\n</div>\n\n## Controls\n\nThis component can be controlled by [frontend scripts](../3_app-runnable-panel.mdx#frontend-scripts) using these functions:\n\n| Name   | Parameters | Description | Example |\n| ------ | :---------: | ------------- | --------- |\n| [recompute](../3_app-runnable-panel.mdx#recompute) | id: string | Recompute a component. | recompute('a'); |\n\n## Outputs\n\n| Name | Type | Description |\n| ------- | :-----: | ----------------------------------- |\n| result | any | The result of the list component. |\n| loading | boolean | The loading state of the component. |\n| inputs | any | The inputs of the component. |\n| activeIndex | number | The index of the active accordion. -1 if no accordion is active |\n```\n\n----------------------------------------\n\nTITLE: Workflow Definition with Windmill\nDESCRIPTION: Equivalent example of defining the same workflow in Windmill using the workflow-as-code approach. Shows how Windmill implements task dependency and execution with a cleaner syntax.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/compared_to/prefect.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom wmill import task\n\n@task\ndef my_first_task(msg):\n    print(f\"Hello, {msg}\")\n\n@task\ndef my_second_task(msg):\n    my_first_task(msg)\n\ndef main():\n   my_second_task(\"Trillian\")\n```\n\n----------------------------------------\n\nTITLE: Pulling Windmill Workspace Locally using CLI\nDESCRIPTION: Executes the `wmill sync pull` command using the Windmill CLI to download the current workspace contents to the local filesystem. This is a prerequisite step for initializing a Git repository with the workspace content before enabling Git sync.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/11_git_sync/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwmill sync pull\n```\n\n----------------------------------------\n\nTITLE: Dynamic Select Implementation in Python for Windmill\nDESCRIPTION: This Python snippet demonstrates the implementation of a dynamic select field within Windmill scripts.  It defines a type alias `DynSelect_foo` and a function `foo` that returns a list of options based on input parameters.  The `main` function utilizes this dynamic select to print and return the selected value.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/13_json_schema_and_parsing/index.mdx#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nDynSelect_foo = str\n\ndef foo(x: str, y: int):\n  if x == \"bar\":\n    return [{\"value\": \"barbar\", \"label\": \"barbarbar\"}]\n  return [\n    { \"value\": '1', \"label\": 'Foo' + x + str(y) },\n    { \"value\": '2', \"label\": 'Bar' },\n    { \"value\": '3', \"label\": 'Foobar' }\n  ]\n\ndef main(x: str, y: int, xy: DynSelect_foo):\n\tprint(xy)\n\treturn xy\n```\n\n----------------------------------------\n\nTITLE: Validating HTTP Request with HMAC Signature in TypeScript\nDESCRIPTION: This TypeScript function `main` handles an HTTP-triggered event to authenticate incoming requests via HMAC signature validation. It extracts signature and timestamp headers, validates the timestamp within a 5-minute window to prevent replay attacks, and verifies the signature using a secret key fetched from a variable store. Upon successful verification, it parses and returns the JSON payload from the raw request body. The helper function `verifySignature` constructs the expected HMAC signature using the SHA-256 algorithm and compares it securely to the provided signature using a timing-safe method. Dependencies include access to the `wmill.getVariable` function for secret retrieval and Node.js's `crypto` module for HMAC computation. Throws detailed errors for missing headers, invalid formats, or signature mismatches.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/39_http_routing/index.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst SECRET_KEY_VARIABLE_PATH = \"u/admin/well_backlit_variable\";\n\nexport async function main(\n  wm_trigger: {\n    kind: 'http',\n    http?: {\n      route: string;\n      path: string;\n      method: string;\n      params: Record<string, string>;\n      query: Record<string, string>;\n      headers: Record<string, string>;\n    };\n  },\n  raw_string: string\n) {\n  if (!wm_trigger.http) {\n    throw new Error('Missing HTTP context');\n  }\n\n  const signature = wm_trigger.http.headers['x-signature'] || wm_trigger.http.headers['signature'];\n  if (!signature) {\n    throw new Error('Missing signature in request headers.');\n  }\n\n  const timestamp = wm_trigger.http.headers['x-timestamp'] || wm_trigger.http.headers['timestamp'];\n  if (timestamp) {\n    const timestampValue = parseInt(timestamp, 10);\n    const currentTime = Math.floor(Date.now() / 1000);\n    const TIME_WINDOW_SECONDS = 5 * 60;\n\n    if (isNaN(timestampValue)) {\n      throw new Error('Invalid timestamp format.');\n    }\n\n    if (Math.abs(currentTime - timestampValue) > TIME_WINDOW_SECONDS) {\n      throw new Error('Request timestamp is outside the acceptable window.');\n    }\n  }\n\n  const isValid = await verifySignature(signature, raw_string, timestamp);\n  if (!isValid) {\n    throw new Error('Invalid signature.');\n  }\n\n  return JSON.parse(raw_string);\n}\n\nasync function verifySignature(signature: string, body: string, timestamp?: string): Promise<boolean> {\n  const dataToVerify = timestamp ? `${body}${timestamp}` : body;\n  const secretKey = await wmill.getVariable(SECRET_KEY_VARIABLE_PATH);\n  const expectedSignature = crypto\n    .createHmac('sha256', secretKey)\n    .update(dataToVerify)\n    .digest('hex');\n\n  try {\n    return crypto.timingSafeEqual(\n      Buffer.from(signature),\n      Buffer.from(expectedSignature)\n    );\n  } catch (error) {\n    console.error('Signature comparison error:', error);\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling NodeJS Compatibility Mode in Windmill\nDESCRIPTION: Adding the '//nodejs' comment as the first line in a TypeScript file instructs Windmill to use NodeJS compatibility mode with the Bun runtime. This allows running existing NodeJS code without modifications.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/1_typescript_quickstart/index.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//nodejs\n```\n\n----------------------------------------\n\nTITLE: Pushing Windmill App using wmill CLI\nDESCRIPTION: This command pushes a Windmill app to a Windmill instance using the `wmill app push` command. It requires the `wmill` CLI to be configured and connected to a Windmill instance. The `file_path` argument specifies the path to the app file that needs to be pushed.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/app.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill app push <file_path>\n```\n\n----------------------------------------\n\nTITLE: Returning PDF (Simplified) - TypeScript\nDESCRIPTION: This snippet demonstrates how to return a PDF file in a simplified way, assuming the PDF content is already base64 encoded. It expects the base64-encoded PDF data directly as the return value.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"pdf\": base64Pdf }\n```\n\n----------------------------------------\n\nTITLE: Large data: S3, R2, MinIO, Azure Blob Storage\nDESCRIPTION: This snippet covers the integration of cloud object storage services like S3, R2, MinIO, and Azure Blob Storage with Windmill, suitable for large and unstructured data. It highlights the native support for S3 and Azure Blob, providing scalable and durable storage options for files and binary data. Includes a link to detailed documentation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/11_persistent_storage/index.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Large data: S3, R2, MinIO, Azure Blob\"\n\t\tdescription=\"Windmill comes with a native integration with S3 and Azure Blob, making it the recommended storage for large objects like files and binary data.\"\n\t\thref=\"/docs/core_concepts/persistent_storage/large_data_files\"\n\t/>\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Throwing a Custom Error in a Script with Rich Display\nDESCRIPTION: This snippet shows how to throw a structured error object that includes name, message, and stack information for proper rendering within Windmill's rich display system. It enables custom error messages to be displayed with formatting supports.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/10_error_handling/index.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nreturn { \"error\": { \"name\": \"418\", \"message\": \"I'm a teapot\", \"stack\": \"Error: I'm a teapot\" }}\n\n```\n\n----------------------------------------\n\nTITLE: Syncing Resource Types with WindmillHub using TypeScript\nDESCRIPTION: Provides a TypeScript script designed to run in Bun for synchronizing resource types from WindmillHub to the local Windmill instance. It utilizes the `windmill-cli` library's `hubPull` function and requires the `WM_TOKEN` and `BASE_URL` environment variables. This script is typically executed from the Admins workspace to update resource types across the instance.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as wmill from \"windmill-cli@1.393.2\"\n\nexport async function main() {\n  await wmill.hubPull({ workspace: \"admins\", token: process.env[\"WM_TOKEN\"], baseUrl: globalThis.process.env[\"BASE_URL\"] });\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive getopts-based Argument Handling with Help - Bash\nDESCRIPTION: This script combines personalized greetings, a help flag, and robust option parsing via getopts. It defines the greet and help functions, supports '-n' for names, '-h' for usage info, and handles invalid flag errors. Requires Bash; errors trigger help display. Inputs are flags and arguments; outputs appropriate greeting or usage information.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-27-bash-script-arguments/index.mdx#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\n\ngreet() {\ntecho \"Hello, $1.\"\n}\n\nhelp() {\ntecho \"usage: ./hello_world.sh [-n <name>][-h]\"\n}\n\nwhile getopts n:h flag\n\ndo\n        case \"${flag}\" in\n                n) greet \"$OPTARG\";;\n                h) help ;;\n                *) echo \"Invalid option: -$flag.\" && help ;;\n        esac\ndone\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Reverse Proxy for Windmill Deployment - Caddyfile\nDESCRIPTION: This snippet defines a basic Caddyfile configuration for setting up a reverse proxy to route HTTP traffic on port 80 to Windmill services. It binds to a specified address, proxies websocket requests under /ws/ to the language server protocol (LSP) service on port 3001, and routes all other traffic to the Windmill server on port 8000. It serves as the default reverse proxy configuration and can be modified for HTTPS support by adding TLS directives and exposing port 443.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_3\n\nLANGUAGE: caddyfile\nCODE:\n```\n:80 {\\n        bind {$ADDRESS}\\n        reverse_proxy /ws/* http://lsp:3001\\n        reverse_proxy /* http://windmill_server:8000\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Selection List\nDESCRIPTION: This TypeScript function takes an array of user objects as input and returns an array of objects suitable for use in a select component's options.  Each object has `label` and `value` properties, formatted using the user's first and last names, and their ID. This function formats user data for display in a customer selection dropdown.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(users: any[]) {\n\treturn users.map((u) => ({\n\t\tlabel: `${u.first_name}  ${u.last_name}`,\n\t\tvalue: u.id\n\t}));\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Script for HTTP Route in TypeScript\nDESCRIPTION: This snippet provides a template for a script triggered by an HTTP route, showcasing an async main function where request data can be processed. Dependencies involve Windmill's runtime environment, and the key parameters are captured from the request payload. It functions as the core logic executed upon route invocation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/39_http_routing/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(/* args from the request body */) {\n  // your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Slack Approval Step with Windmill in TypeScript\nDESCRIPTION: This Windmill script implements a human approval step for a flow using Slack. It sends a message to a specified Slack channel containing buttons to \"Approve\" or \"Cancel\". These buttons are linked to the Windmill flow's resume and cancel endpoints, allowing human interaction in Slack to control the flow's execution. Requires a Windmill Slack resource and the target channel ID.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-06-05-discord-bot/index.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getResumeEndpoints, Resource } from 'https://deno.land/x/windmill@v1.85.0/mod.ts';\nimport { WebClient } from 'https://deno.land/x/slack_web_api@1.0.3/mod.ts';\n\nexport async function main(\n\tslack: Resource<'slack'>,\n\tchannel: string,\n\ttext = 'A flow is requesting an approval to be resumed'\n) {\n\tconst web = new WebClient(slack.token);\n\n\tconst { cancel, resume } = await getResumeEndpoints(`channel-${channel}`);\n\tawait web.chat.postMessage({\n\t\tchannel,\n\t\ttext: '',\n\t\tblocks: [\n\t\t\t{\n\t\t\t\ttype: 'section',\n\t\t\t\ttext: {\n\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\ttext: text\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'divider'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'actions',\n\t\t\t\telements: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\tstyle: 'danger',\n\t\t\t\t\t\ttext: {\n\t\t\t\t\t\t\ttype: 'plain_text',\n\t\t\t\t\t\t\ttext: 'Cancel',\n\t\t\t\t\t\t\temoji: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\turl: cancel\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\tstyle: 'primary',\n\t\t\t\t\t\ttext: {\n\t\t\t\t\t\t\ttype: 'plain_text',\n\t\t\t\t\t\t\ttext: 'Approve',\n\t\t\t\t\t\t\temoji: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\turl: resume\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in MDX (JavaScript)\nDESCRIPTION: This snippet imports the `DocCard` React component from a relative path within the documentation site's source structure (`@site/src/components/DocCard`). This component is used later in the MDX file to render styled cards that link to other relevant documentation pages, such as the App Editor documentation and the Apps quickstart guide. It utilizes standard JavaScript ES6 import syntax common in React/MDX environments.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/navbar.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Waiting for Job Completion with `waitJob` in JavaScript\nDESCRIPTION: Uses the `waitJob` helper function to asynchronously wait for a specific Windmill job to finish. It takes the `jobId` as input and returns a Promise that resolves once the job completes, allowing subsequent actions.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nwaitJob(jobId: string).then(() => {\n\t// do something\n})\n```\n\n----------------------------------------\n\nTITLE: Running Windmill script with oneOf via CLI (wmill)\nDESCRIPTION: This snippet shows how to run a Windmill script using the `wmill` CLI and passing a `oneOf` object as an argument. The `-d` flag specifies the data to be passed, which includes the label and the value of the chosen attribute.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/13_json_schema_and_parsing/index.mdx#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nwmill script run u/user/path -d '{\"example_oneof\":{\"label\":\"Option 2\",\"attribute\":\"Value that the user entered\"}}'\n```\n\n----------------------------------------\n\nTITLE: AgGrid Infinite Table SQL Query\nDESCRIPTION: This SQL query is designed to fetch data for an AgGrid table with infinite scrolling functionality. It includes parameters for pagination (`limit`, `offset`) and searching (`search`). The `$1`, `$2`, and `$3` are placeholders for these input parameters. The `ILIKE` operator is used for case-insensitive search.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/aggrid_table.mdx#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n-- $1 limit\n-- $2 offset\n-- $3 search\nSELECT * FROM products WHERE title ILIKE '%' || $3 || '%'LIMIT $1::INT OFFSET $2::INT;\n```\n\n----------------------------------------\n\nTITLE: Generating Windmill External Auth JWT using TypeScript\nDESCRIPTION: This TypeScript snippet provides a function to generate a JWT token formatted for Windmill's external authentication. It uses the `fast-jwt` library to sign a payload containing required user details, roles, workspace, permissions, and scopes with a private RSA key. The resulting token is automatically prefixed with `jwt_ext_`.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/16_external_auth_with_jwt/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSigner } from 'fast-jwt'\n\nconst YOUR_PRIVATE_KEY = `-----BEGIN RSA PRIVATE KEY-----...-----END RSA PRIVATE KEY-----`\n\nasync function generateJWT(\n  kid: string,\n  username: string,\n  email: string,\n  is_admin= false,\n  is_operator= false,\n  workspace_id: string,\n  folders: [string, boolean, boolean][] = [],\n  groups: string[] = [],\n  scopes: string[] = []\n) {\n  const signer = createSigner({\n    kid,\n    algorithm: 'RS256',\n    key: YOUR_PRIVATE_KEY,\n    expiresIn: '1h'\n  })\n\n  const token = await signer({\n    username,\n    email,\n    is_admin,\n    is_operator,\n    folders,\n    groups,\n    workspace_id,\n    scopes\n  })\n\n  return \"jwt_ext_\" + token\n}\n```\n\n----------------------------------------\n\nTITLE: React Component for Visualizing Lightweight Tasks in Normal Mode (JavaScript/React)\nDESCRIPTION: This React component displays the durations of 40 lightweight tasks in normal mode, visualized as a bar chart with detailed raw timing data for performance analysis of quick tasks.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"grid\">\n\t<TaskDurationBarChart\n\t\ttitle=\"40 lightweight tasks\"\n\t\txTitle=\"Duration (in seconds)\"\n\t\tlabels={[['Windmill', 'Normal']]}\n\t\trawData=[\n\t\t\t[\n\t\t\t\t[\n\t\t\t\t\t0.003, 0.046, 0.047, 0.045, 0.048, 0.047, 0.047, 0.047, 0.047, 0.048, 0.046, 0.046, 0.047,\n\t\t\t\t\t0.047, 0.047, 0.048, 0.047, 0.047, 0.047, 0.047, 0.048, 0.047, 0.047, 0.047, 0.047, 0.046,\n\t\t\t\t\t0.047, 0.047, 0.048, 0.047, 0.047, 0.047, 0.047, 0.049, 0.047, 0.047, 0.048, 0.047, 0.047,\n\t\t\t\t\t0.046\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.056, 0.058, 0.054, 0.054, 0.055, 0.056, 0.056, 0.054, 0.053, 0.055, 0.058, 0.054, 0.055,\n\t\t\t\t\t0.054, 0.055, 0.055, 0.053, 0.052, 0.055, 0.056, 0.057, 0.056, 0.055, 0.054, 0.054, 0.055,\n\t\t\t\t\t0.053, 0.054, 0.055, 0.068, 0.057, 0.056, 0.054, 0.055, 0.053, 0.055, 0.055, 0.056, 0.056,\n\t\t\t\t\t0.059\n\t\t\t\t]\n\t\t\t]\n\t\t]\n\t\tmaintainAspectRatio={false}\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Define Arguments and Insert Data using MS SQL\nDESCRIPTION: Defines script arguments using the MS SQL-specific `@PN` syntax (e.g., `@P1`), including optional names, types, and default values. Shows a sample `INSERT` statement using these named arguments. Also illustrates how to bind the script to a specific database resource using a comment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- @P1 name1 (varchar) = default arg\n-- @P2 name2 (int)\nINSERT INTO demo VALUES (@P1, @P2)\n```\n\n----------------------------------------\n\nTITLE: Returning PNG Image - TypeScript\nDESCRIPTION: This snippet shows how to return a PNG image. The image content must be base64 encoded. It uses the \"png\" key or provides the base64 string directly. The image is displayed in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"png\": { \"content\": base64Image } }\n```\n\n----------------------------------------\n\nTITLE: Displaying Toast Notifications\nDESCRIPTION: Shows how to display toast notifications from frontend scripts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nshowToast(message: string, error: boolean)\n```\n\n----------------------------------------\n\nTITLE: Pulling a Windmill Workspace While Skipping Sensitive Data with Bash\nDESCRIPTION: This bash snippet uses Windmill CLI to synchronize a workspace folder while omitting variables, secrets, and resources for safer integration with version control. It assumes Windmill CLI is installed and authenticated. The command is ideal for preparing workspace data for Git and other collaborative environments, producing only script, flow, and app files but no sensitive information.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwmill sync pull --skip-variables --skip-secrets --skip-resources\n```\n\n----------------------------------------\n\nTITLE: Setting Progress in Windmill (Python)\nDESCRIPTION: This Python snippet demonstrates how to use the `set_progress` function from the `wmill` library to report the progress of a long-running script. The function is called after completing distinct tasks, incrementing the reported percentage. Progress values are automatically clamped between 0 and 99 and can only increase.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/19_explicit_progress/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom wmill import set_progress\n\ndef main():\n\n\t# ... First heavy task\n\tset_progress(25)\n\n\t# ... Second heavy task\n\tset_progress(50)\n\n\t# ... Third heavy task\n\tset_progress(75)\n\n\t# ... Fourth heavy task\n\tset_progress(99)\n\n\n```\n\n----------------------------------------\n\nTITLE: Controlling Code Input Component with setValue\nDESCRIPTION: Example of using the setValue function in frontend scripts to programmatically set the value of a Code input component. This function takes a component ID and the new value as parameters.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/code_input.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetValue(id: 'a', value: 17)\n```\n\n----------------------------------------\n\nTITLE: Creating Flow Example - Bash\nDESCRIPTION: This is an example of creating a new flow using the `wmill flow bootstrap` command. The example creates a new flow at the path `f/flows/flashy_flow`. It requires `wmill` CLI tool to be installed. This command initializes a new flow file at the specified path.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/flow.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwmill flow bootstrap f/flows/flashy_flow\n```\n\n----------------------------------------\n\nTITLE: Receiving Supabase Webhook Payload in Windmill (TypeScript)\nDESCRIPTION: This TypeScript script in Windmill is designed to receive and process a webhook payload sent from Supabase Database Webhooks. It expects the standard Supabase event structure including table name, schema, event type, and the new/old record data, and simply returns this payload for inspection. It requires the script to be configured with a webhook endpoint and token in Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-14-supabase-integration/index.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(\n\ttable: string,\n\tschema: string,\n\ttype: string,\n\trecord: Record<string, any>,\n\told_record: Record<string, any>\n) {\n\treturn {\n\t\ttable,\n\t\tschema,\n\t\ttype,\n\t\trecord,\n\t\told_record\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: React DocCard Component Import\nDESCRIPTION: Import statement for the DocCard component from the site's components directory, which is used to create documentation cards in the page layout.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/code_input.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Pushing Flow Example - Bash\nDESCRIPTION: This is an example of pushing a local flow file to a remote path using the `wmill flow push` command. The example assumes that a local flow file is available at `path/to/local/flow.yaml` and the user wants to push it to the remote path `f/flows/test`. It utilizes the `wmill flow push` command followed by the local file path and the destination remote path.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/flow.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwmill flow push path/to/local/flow.yaml f/flows/test\n```\n\n----------------------------------------\n\nTITLE: Using recompute function with List component in JavaScript\nDESCRIPTION: Example of using the recompute function to trigger a recomputation of a List component. This function takes a component ID as a parameter and is used in frontend scripts to control component behavior.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/list.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrecompute('a');\n```\n\n----------------------------------------\n\nTITLE: Setting Windmill Worker Environment Variables in PowerShell\nDESCRIPTION: This snippet initializes required environment variables in PowerShell to configure the Windmill worker. Dependencies include PowerShell and the Windmill worker executable. Replace the placeholders with your actual Windmill server and PostgreSQL database parameters before execution. The snippet expects valid connection details and will configure the session for running Windmill as a Windows worker. No output is returned; variables are set in the current environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/17_windows_workers/index.mdx#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Replace these variables with your specific configuration\n$env:MODE=\"worker\"\n$env:DATABASE_URL=\"postgres://postgres:changeme@172.12.0.1:5432/windmill?sslmode=disable\"\n$env:SKIP_MIGRATION=\"true\"\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Vault secrets via OIDC/JWT authentication in Python\nDESCRIPTION: This Python function logs into Hashicorp Vault using an OIDC JWT acquired from Windmill, authenticates with hvac.Client, and reads a secret from the KV store. Key dependencies are wmill and hvac Python libraries. Input parameters are the Vault role and secret path, as well as the OIDC audience. Outputs include the Vault client token and the secret content at the specified path. Requires Vault server accessible at default address and valid OIDC configuration.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nimport wmill\nimport hvac\n\ndef main():\n\n    token = wmill.get_id_token(\"MY_AUDIENCE\")\n\n    client = hvac.Client()\n\n    response = client.auth.jwt.jwt_login(\n        role=\"myproject-production\",\n        jwt=token,\n    )\n    print('Client token returned: %s' % response['auth']['client_token'])\n    print(client.secrets.kv.read_secret_version(path='production/foo'))\n```\n\n----------------------------------------\n\nTITLE: Upgrading Windmill CLI to the latest version\nDESCRIPTION: Updates the Windmill CLI to the newest available version using the built-in upgrade command.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwmill upgrade\n```\n\n----------------------------------------\n\nTITLE: Managing User-Defined Variables with windmill-client in TypeScript (Deno)\nDESCRIPTION: Illustrates using the `windmill-client` library (imported from npm) in a TypeScript script running on Deno to get (`getVariable`) and set (`setVariable`) user-defined variables. Requires importing `getVariable` and `setVariable` from 'npm:windmill-client@1'. `getVariable` takes the variable path; `setVariable` takes the path and the new value.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/2_variables_and_secrets/index.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { getVariable, setVariable } from 'npm:windmill-client@1';\n\ngetVariable('u/user/foo');\nsetVariable('u/user/foo', value);\n```\n\n----------------------------------------\n\nTITLE: Returning JPEG Image (Simplified) - TypeScript\nDESCRIPTION: This snippet shows how to return a JPEG image. The image content must be base64 encoded, provided directly as the return value, without needing a nested object. The image is displayed in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"jpeg\": base64Image }\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCard Component for Documentation Link in React JSX\nDESCRIPTION: The snippet imports the DocCard React component from the local components directory and uses it within a grid layout to provide a clickable card linking to the app styling documentation. This shows how to highlight related topics and guide users to explore styling customizable components within the platform.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/5_components_groups.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n\n<div className=\"grid grid-cols-2 gap-2 my-4\">\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"Styling\"\n\t\tdescription=\"Give styling to your app & components.\"\n\t\thref=\"/docs/apps/app_configuration_settings/app_styling\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Gearman for Distributed Background Tasks in PHP\nDESCRIPTION: Demonstrates usage of Gearman for distributed job processing in PHP by defining a worker script that registers a background task function to add two numbers after simulating work with sleep, and a client script that submits a background job asynchronously. Requires the Gearman PHP extension and a running Gearman server. Inputs for the task are JSON encoded payloads containing x and y. Outputs are the result returned from the worker asynchronously. Gearman supports distributed multi-language job execution with scalability across machines.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Worker script\n$worker = new GearmanWorker();\n$worker->addServer();\n$worker->addFunction(\"background_task\", function($job) {\n    $workload = json_decode($job->workload(), true);\n    sleep(5);\n    return $workload['x'] + $workload['y'];\n});\n$worker->work();\n\n// Client script\n$client = new GearmanClient();\n$client->addServer();\n$result = $client->doBackground(\"background_task\", json_encode(['x' => 10, 'y' => 20]));\n```\n\n----------------------------------------\n\nTITLE: Multiple Slack Approval Requests\nDESCRIPTION: This Python snippet demonstrates sending multiple approval requests to different Slack channels using the `wmill.request_interactive_slack_approval` function. It shows sending one request to a 'customers' channel and another to an 'admins' channel, both using the same Slack resource.  It assumes the `wmill` module is available.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\n\ndef main():\n\t# Send approval request to customers\n    wmill.request_interactive_slack_approval(\n        'u/username/slack_resource', \n        'customers', \n    )\n\n\t# Send approval request to admins\n    wmill.request_interactive_slack_approval(\n        'u/username/slack_resource', \n        'admins', \n    )\n```\n\n----------------------------------------\n\nTITLE: Handling Slack /windmill Command with TypeScript\nDESCRIPTION: This script serves as a basic handler for the `/windmill` Slack command. It responds to Slack by posting a message to a provided `response_url` and logs the Windmill username associated with the Slack user who ran the command, leveraging the `WM_USERNAME` contextual variable.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/slack.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(response_url: string, text: string) {\n\tconst x = await fetch(response_url, {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({ text: `ROGER ${text}` })\n\t});\n\tconst username = await Deno.env.get('WM_USERNAME');\n\tconsole.log(`user = ${username}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windmill Postgres Resource (JSON)\nDESCRIPTION: This JSON object demonstrates how to parse a PostgreSQL connection string into the parameters required for configuring a Postgres resource within Windmill, specifically shown for a Neon.tech connection string. It specifies essential connection details like host, port, user, database name, SSL mode, and password.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/11_persistent_storage/structured_databases.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"host\": \"ep-restless-rice.us-east-2.aws.neon.tech\",\n\t\"port\": 5432,\n\t\"user\": \"daniel\",\n\t\"dbname\": \"neondb\",\n\t\"sslmode\": \"require\",\n\t\"password\": \"<password>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete docker-compose.yml Integrating Windmill, Selenoid, and UI in YAML\nDESCRIPTION: This full docker-compose.yml YAML file integrates all necessary services for running Windmill with Selenoid for Selenium-driven scraping. It includes the PostgreSQL database, Windmill server with increased workers and ports, the LSP server, the Selenoid browser automation container with config and output directories, and the Selenoid UI frontend. Environment variables, port mappings, volume mounts, healthchecks, and service dependencies are fully defined to enable robust, scalable, and observable web scraping infrastructure.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-14-selenium-integration/index.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3.7'\n\nservices:\n  db:\n    image: postgres:14\n    restart: unless-stopped\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    ports:\n      - 5432:5432\n      - 5433:5432\n    environment:\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n      POSTGRES_DB: windmill\n    healthcheck:\n      test: ['CMD-SHELL', 'pg_isready -U postgres']\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  windmill_server:\n    image: ghcr.io/windmill-labs/windmill:main\n    deploy:\n      replicas: 1\n    restart: unless-stopped\n    ports:\n      - '8000:8000'\n      - '9920-9930:9920-9930' # <- added this; only 10 ports are opened; if you want to open more ports increase the 2nd number respectively\n    environment:\n      - DATABASE_URL=postgres://postgres:${DB_PASSWORD}@db/windmill?sslmode=disable\n      - MODE=standalone\n      - NUM_WORKERS=10 # <- an increased number of workers is helpful when running a lot of scraping scripts in parallel\n\n    depends_on:\n      db:\n        condition: service_healthy\n\n  lsp:\n    image: ghcr.io/windmill-labs/windmill-lsp:latest\n    restart: unless-stopped\n    ports:\n      - 3001:3001\n\n  selenoid:\n    network_mode: bridge\n    image: aerokube/selenoid:latest-release\n    volumes:\n      - '/path/to/config:/etc/selenoid' # <- change this\n      - '/path/to/config/video:/opt/selenoid/video' # <- change this\n      - '/path/to/config/logs:/opt/selenoid/logs' # <- change this\n      - '/var/run/docker.sock:/var/run/docker.sock'\n    environment:\n      - OVERRIDE_VIDEO_OUTPUT_DIR=./config/video\n    command:\n      [\n        '-conf',\n        '/etc/selenoid/browsers.json',\n        '-video-output-dir',\n        '/opt/selenoid/video',\n        '-log-output-dir',\n        '/opt/selenoid/logs'\n      ]\n    ports:\n      - '4444:4444'\n\n  selenoid-ui:\n    image: 'aerokube/selenoid-ui'\n    network_mode: bridge\n    restart: always\n    links:\n      - selenoid\n    ports:\n      - '8080:8080'\n    command: ['--selenoid-uri', 'http://selenoid:4444']\n\nvolumes:\n  db_data: null\n```\n\n----------------------------------------\n\nTITLE: Fetching a Resource by Path Using Windmill Client in TypeScript\nDESCRIPTION: This single-line TypeScript snippet demonstrates fetching a resource in Windmill by its canonical path string 'u/user/foo' using the Windmill client method getResource. It requires the 'windmill-client' package and provides the means to dynamically access resource data within scripts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nwmill.getResource('u/user/foo');\n```\n\n----------------------------------------\n\nTITLE: Log display Component Configuration Documentation in Markdown/JSX\nDESCRIPTION: This snippet contains the Markdown and JSX formatted documentation that explains the purpose and usage of the Log display component, including visual example incorporation and configuration tables. It provides details of the 'Job Id' input property required to fetch logs for a runnable job, and the outputs named 'result', 'loading', and 'Job Id'. The snippet also integrates JSX-based DocCard components to reference related app editor documentation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/log_display.mdx#_snippet_1\n\nLANGUAGE: Markdown/JSX\nCODE:\n```\n# Log display\n\nThe Log display component allows you to display the logs of a Runnable by providing its [Job](../../core_concepts/20_jobs/index.mdx) id.\n\n![Log display](../../assets/apps/4_app_component_library/log_display.png)\n\nThe following section details Log display component's specific settings. For more details on the App editor, check the [dedicated documentation](../0_app_editor/index.mdx) or the App editor [Quickstart](../../getting_started/7_apps_quickstart/index.mdx):\n\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"App editor Documentation\"\n\t\tdescription=\"The app editor is a low-code builder to create custom User Interfaces with a mix of drag-and-drop and code.\"\n\t\thref=\"/docs/apps/app_editor\"\n\t/>\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"Apps quickstart\"\n\t\tdescription=\"Learn how to build your first app in a matter of minutes.\"\n\t\thref=\"/docs/getting_started/apps_quickstart\"\n\t/>\n</div>\n\n## Log display configuration\n\n| Name        | Type | Connectable | Templatable | Default | Description                 |\n| ----------- | :--: | :---------: | :---------: | :-----: | --------------------------- |\n| Job Id |  string  |    true     |      false       |         | The [job id](../../core_concepts/20_jobs/index.mdx) of the run to display logs. |\n\n## Outputs\n\n| Name    |  Type   | Description                         |\n| ------- | :-----: | ----------------------------------- |\n| result  |     string    | The result of the runnable.   |\n| loading | boolean | The loading state of the component. |\n| Job Id |  string  | The [job id](../../core_concepts/20_jobs/index.mdx) of the run to display logs. |\n```\n\n----------------------------------------\n\nTITLE: Rendering Task Duration Bar Chart in React/JSX\nDESCRIPTION: A JSX component that renders a bar chart visualization comparing task durations across different workflow engines (Airflow, Prefect, Temporal, and Windmill in different configurations). The component visualizes performance benchmark data with properly formatted props.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-22-why-is-windmill-the-fastest-workflow-engine/index.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid\">\n\t<TaskDurationBarChart\n\t\ttitle=\"40 lightweight tasks\"\n\t\txTitle=\"Duration (in seconds)\"\n\t\tlabels={[\n\t\t\t['Airflow'],\n\t\t\t['Prefect'],\n\t\t\t['Temporal'],\n\t\t\t['Windmill', 'Normal'],\n\t\t\t['Windmill', 'Dedicated Worker']\n\t\t]}\n\t\trawData={[\n\t\t\t[\n\t\t\t\t[\n\t\t\t\t\t4.335, 3.959, 2.194, 2.192, 1.68, 1.965, 2.377, 2.259, 2.39, 2.6, 2.401, 4.888, 5.118,\n\t\t\t\t\t1.64, 2.396, 2.196, 2.488, 1.853, 1.513, 2.575, 2.218, 2.316, 1.933, 2.176, 2.976, 5.192,\n\t\t\t\t\t1.684, 2.361, 2.218, 1.409, 2.591, 2.192, 2.328, 2.464, 2.88, 2.394, 2.046, 1.537, 4.988,\n\t\t\t\t\t2.784\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.417, 0.213, 0.203, 0.22, 0.209, 0.262, 0.205, 0.268, 0.209, 0.477, 0.322, 0.817, 0.207,\n\t\t\t\t\t0.253, 0.201, 0.226, 0.212, 0.199, 0.207, 0.435, 0.355, 0.408, 0.431, 0.247, 0.461, 0.717,\n\t\t\t\t\t0.237, 0.246, 0.194, 0.205, 0.421, 0.312, 0.421, 0.25, 0.251, 0.206, 0.352, 0.21, 0.604,\n\t\t\t\t\t0.223\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[\n\t\t\t\t\t1.213, 0.064, 0.061, 0.059, 0.054, 0.053, 0.053, 0.054, 0.055, 0.056, 0.057, 0.064, 0.052,\n\t\t\t\t\t0.056, 0.056, 0.058, 0.052, 0.051, 0.054, 0.053, 0.053, 0.055, 0.052, 0.054, 0.062, 0.051,\n\t\t\t\t\t0.051, 0.052, 0.051, 0.048, 0.055, 0.057, 0.049, 0.048, 0.055, 0.05, 0.051, 0.05, 0.053,\n\t\t\t\t\t0.054\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.044, 0.041, 0.04, 0.036, 0.035, 0.038, 0.037, 0.061, 0.039, 0.038, 0.04, 0.038, 0.038,\n\t\t\t\t\t0.041, 0.039, 0.043, 0.035, 0.035, 0.035, 0.038, 0.037, 0.036, 0.036, 0.038, 0.039, 0.034,\n\t\t\t\t\t0.035, 0.037, 0.034, 0.083, 0.035, 0.034, 0.033, 0.034, 0.038, 0.034, 0.034, 0.035, 0.035,\n\t\t\t\t\t0.034\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[\n\t\t\t\t\t0.009, 0.028, 0.027, 0.029, 0.029, 0.029, 0.03, 0.03, 0.032, 0.028, 0.028, 0.028, 0.029,\n\t\t\t\t\t0.041, 0.029, 0.029, 0.077, 0.09, 0.091, 0.093, 0.092, 0.09, 0.092, 0.091, 0.091, 0.091,\n\t\t\t\t\t0.091, 0.09, 0.091, 0.093, 0.09, 0.093, 0.092, 0.091, 0.09, 0.092, 0.091, 0.091, 0.091,\n\t\t\t\t\t0.092\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.007, 0.008, 0.008, 0.008, 0.007, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008,\n\t\t\t\t\t0.008, 0.009, 0.009, 0.009, 0.009, 0.008, 0.008, 0.009, 0.008, 0.009, 0.009, 0.009, 0.009,\n\t\t\t\t\t0.009, 0.008, 0.009, 0.009, 0.008, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.008,\n\t\t\t\t\t0.008\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[\n\t\t\t\t\t0.004, 0.063, 0.061, 0.062, 0.061, 0.061, 0.061, 0.061, 0.062, 0.062, 0.061, 0.061, 0.065,\n\t\t\t\t\t0.063, 0.06, 0.064, 0.062, 0.061, 0.062, 0.062, 0.06, 0.062, 0.06, 0.062, 0.06, 0.063,\n\t\t\t\t\t0.062, 0.061, 0.061, 0.06, 0.061, 0.06, 0.061, 0.061, 0.061, 0.062, 0.06, 0.062, 0.06,\n\t\t\t\t\t0.062\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.048, 0.048, 0.048, 0.048, 0.047, 0.047, 0.047, 0.046, 0.05, 0.049, 0.047, 0.047, 0.056,\n\t\t\t\t\t0.052, 0.047, 0.045, 0.046, 0.047, 0.047, 0.05, 0.05, 0.047, 0.046, 0.046, 0.046, 0.046,\n\t\t\t\t\t0.046, 0.047, 0.046, 0.046, 0.047, 0.046, 0.046, 0.046, 0.046, 0.048, 0.049, 0.049, 0.047,\n\t\t\t\t\t0.048\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[\n\t\t\t\t\t0.003, 0.06, 0.059, 0.06, 0.061, 0.061, 0.06, 0.059, 0.061, 0.061, 0.06, 0.06, 0.061,\n\t\t\t\t\t0.061, 0.062, 0.059, 0.06, 0.06, 0.06, 0.058, 0.06, 0.059, 0.06, 0.059, 0.06, 0.059,\n\t\t\t\t\t0.061, 0.061, 0.061, 0.06, 0.059, 0.061, 0.06, 0.06, 0.06, 0.06, 0.059, 0.061, 0.061,\n\t\t\t\t\t0.059\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002,\n\t\t\t\t\t0.002, 0.002, 0.002, 0.002, 0.002, 0.004, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002,\n\t\t\t\t\t0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.003, 0.002, 0.002, 0.002,\n\t\t\t\t\t0.002\n\t\t\t\t]\n\t\t\t]\n\t\t]}\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling SQS Messages in a Basic Script (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates a basic script to process messages received from an SQS queue within the Windmill environment. The script defines an `main` function that accepts the message content as a string input. The function's purpose is to perform some action with the message, although the specific action is not defined in the example. The snippet is designed to illustrate the simplest implementation for handling incoming SQS messages.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/48_sqs_triggers/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(msg: string) {\n  // do something with the message\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Log display Component Dependency in JavaScript\nDESCRIPTION: This snippet demonstrates the import statement for the DocCard React component, a dependency used within the Log display component's documentation UI. It is crucial for rendering related documentation cards with color, title, description, and linking properties. The import targets a local relative path to a components directory within the project structure.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/log_display.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Modal Control Functions Using JavaScript\nDESCRIPTION: Example JavaScript functions for controlling modal components from frontend scripts. Shows how to open and close modals by their ID.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/modal.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nopen('a')  // Open the modal with ID 'a'\nclose('a') // Close the modal with ID 'a'\n```\n\n----------------------------------------\n\nTITLE: Querying Parquet from S3 using DuckDB\nDESCRIPTION: This snippet queries a Parquet file located in S3 using DuckDB within the Windmill environment. It establishes a connection to DuckDB and uses the `read_parquet` function to select all data from the specified file.  The example assumes the file exists in an S3 bucket, and appropriate permissions are set up.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/27_data_pipelines/index.mdx#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconn.sql(\"SELECT * FROM read_parquet(s3://windmill_bucket/file.parquet)\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flow Module Structure and Variants in TypeScript\nDESCRIPTION: Defines the `FlowModule` type and its associated variant types (`RawScript`, `PathScript`, `ForloopFlow`, `BranchOne`, `BranchAll`) in TypeScript. A `FlowModule` represents a single unit of work or control flow structure within a larger flow. It includes properties for the module's core logic (`value`), metadata (`summary`), conditional execution controls (`stop_after_if`, `sleep`, `suspend`), and error handling (`retry`). Supporting types for input transformation (`StaticTransform`, `JavascriptTransform`) and retry strategies (`Retry`) are also defined.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/openflow/index.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype FlowModule = {\n\n  // a module can be one of many kinds, see below for more details\n  value: Identity | RawScript | PathScript | ForloopFlow | BranchOne | BranchAll ;\n\n  // an optional summary line\n  summary?: string;\n\n  // stop the flow at this step if condition is met\n  stop_after_if?: { expr: string; skip_if_stopped: boolean };\n\n  // sleep for a static or dynamic number of seconds\n  sleep?: StaticTransform | JavascriptTransform\n\n  // suspend the flow until it is resumed by receiving a certain number of events before a timeout\n  suspend?: { required_events?: integer, timeout: integer };\n\n  // number of times to retry this module before passing it to the error handler\n  retry?: Retry\n};\n\ntype RawScript = {\n  input_transforms: Record<string, StaticTransform | JavascriptTransform>;\n  content: string;\n  language: \"deno\" | \"python3\";\n  path?: string;\n};\n\ntype PathScript = {\n  input_transforms: Record<string, StaticTransform | JavascriptTransform>;\n  path: string;\n};\n\ntype ForloopFlow = {\n  modules: FlowModule[];\n  iterator: InputTransform;\n  skip_failures?: boolean;\n};\n\ntype BranchOne = {\n  default: FlowModule[];\n  branches: Array<{\n    summary?: string;\n    expr: string;\n    modules: FlowModule[];\n  }>;\n};\n\ntype BranchAll = {\n  default: FlowModule[];\n  branches: Array<{\n    summary?: string;\n    skip_failure: boolean;\n    modules: FlowModule[];\n  }>;\n};\n\ntype StaticTransform = {\n  value: any;\n};\n\ntype JavascriptTransform = {\n  expr: string;\n};\n\ntype Retry {\n  constant?: {\n    attempts: integer;\n    seconds: integer;\n  };\n  exponential?: {\n    attempts: integer;\n    multiplier: integer;\n    seconds: integer;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining main function signature with default argument in Python\nDESCRIPTION: This snippet demonstrates how to define a Python main function with a default argument value for the 'name' parameter. By setting a default, the UI generated from this signature will treat the 'name' field as optional and not required in the input form. This snippet requires Python 3.x and is used for customizing script argument behaviors in Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/2_python_quickstart/index.mdx#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef main(name: str = \"you\"):\n```\n\n----------------------------------------\n\nTITLE: Checking URL Existence with HTTP GET in Go\nDESCRIPTION: This Go function checks if a web page exists at the provided URL. It uses the `net/http` package to send a GET request and returns `true` if the HTTP status code is between 200 and 299 (inclusive), indicating success. It returns `false` otherwise, along with any potential error encountered during the request.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/3_go_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage inner\n\nimport (\n\t\"net/http\"\n)\n\nfunc main(url string) (bool, error) {\n\tresp, err := http.Get(url) // send a GET request to the provided URL\n\tif err != nil {\n\t\treturn false, err // if there is an error, return false and the error\n\t}\n\tdefer resp.Body.Close() // make sure to close the response body when the function returns\n\n\t// if the status code is between 200 and 299, the page exists\n\tif resp.StatusCode >= 200 && resp.StatusCode <= 299 {\n\t\treturn true, nil\n\t}\n\n\t// if the status code is not between 200 and 299, the page does not exist\n\treturn false, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Advanced SEO Analysis on Website URLs Using Python and BeautifulSoup\nDESCRIPTION: This Python script performs extensive SEO diagnostics on a website given its URL by using requests for HTTP, BeautifulSoup for HTML parsing, and standard modules for analysis. It measures title length, heading counts, meta tag presence, canonical links, text-to-HTML ratio, keyword density, as well as link breakdown (total, nofollow, internal/external). The input is a website URL as a string, with dependencies on requests and beautifulsoup4 packages. The function returns a dictionary summarizing the SEO status or an error message if something fails (e.g., unreachable site or missing modules).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom bs4 import BeautifulSoup\nfrom collections import Counter\nimport re\n\ndef main(url: str) -> dict:\n    \"\"\"\n    Perform advanced SEO analysis on the given website URL using Beautiful Soup.\n\n    Parameters:\n    - url (str): The URL of the website to analyze.\n\n    Returns:\n    - dict: A dictionary containing advanced SEO analysis results including title length,\n      number of headings, presence of meta description, meta tags, text-to-HTML ratio,\n      canonical link, keyword density, mobile friendliness, and link health.\n    \"\"\"\n    try:\n        # Send a GET request to the URL\n        response = requests.get(url)\n        # Parse the HTML content of the page\n        soup = BeautifulSoup(response.text, \"html.parser\")\n\n        # SEO analysis\n        seo_analysis = {}\n\n        # Get the title of the page and its length\n        title = soup.find(\"title\").text if soup.find(\"title\") else \"No title found\"\n        seo_analysis[\"title\"] = title\n        seo_analysis[\"title_length\"] = len(title)\n\n        # Count the number of headings (h1, h2, h3, h4, h5, h6)\n        headings = {f\"h{i}\": len(soup.find_all(f\"h{i}\")) for i in range(1, 7)}\n        seo_analysis[\"headings_count\"] = headings\n\n        # Check for meta description\n        meta_description = soup.find(\"meta\", attrs={\"name\": \"description\"})\n        seo_analysis[\"meta_description\"] = (\n            meta_description[\"content\"]\n            if meta_description\n            else \"No meta description found\"\n        )\n\n        # Additional meta tags\n        meta_robots = soup.find('meta', attrs={'name': 'robots'})\n        seo_analysis['meta_robots'] = meta_robots['content'] if meta_robots else 'No robots meta tag'\n\n        # Canonical link\n        canonical_link = soup.find('link', rel='canonical')\n        seo_analysis['canonical_link'] = canonical_link['href'] if canonical_link else 'No canonical link'\n\n        # Text to HTML Ratio\n        text_length = len(soup.get_text())\n        html_length = len(response.text)\n        seo_analysis['text_to_html_ratio'] = text_length / html_length if html_length > 0 else 0\n\n        # Keyword Density (Example: assuming 'example_keyword' is the keyword)\n        words = re.findall(r'\\w+', soup.get_text().lower())\n        word_count = Counter(words)\n        total_words = sum(word_count.values())\n        focus_keyword = 'example_keyword'\n        keyword_density = word_count[focus_keyword] / total_words if focus_keyword in word_count and total_words > 0 else 0\n        seo_analysis['keyword_density'] = keyword_density\n\n        # Mobile Friendliness\n        seo_analysis['mobile_friendly'] = 'yes' if 'viewport' in (meta_description[\"content\"].lower() if meta_description else '') else 'no'\n\n        # Link Analysis\n        links = soup.find_all('a', href=True)\n        seo_analysis['total_links'] = len(links)\n        seo_analysis['nofollow_links'] = sum(1 for link in links if 'nofollow' in link.get('rel', []))\n        seo_analysis['external_links'] = sum(1 for link in links if link['href'].startswith('http'))\n        seo_analysis['internal_links'] = seo_analysis['total_links'] - seo_analysis['external_links']\n\n        return seo_analysis\n    except Exception as e:\n        return {\"error\": str(e)}\n```\n\n----------------------------------------\n\nTITLE: Pushing Folders with Windmill CLI\nDESCRIPTION: The `wmill folder push` command uploads a local folder to a specified remote location. It overwrites any existing remote folder with the same path.  The command requires two string arguments: the local folder path and the remote path.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/folder.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill folder push <folder_path:string> <remote_path:string>\n```\n\n----------------------------------------\n\nTITLE: Setting CPU and Memory Resource Limits for Windmill Workers in Docker Compose - YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify CPU and memory resource consumption limits for Windmill worker containers within Docker Compose. Setting 'replicas' controls the number of worker instances, while 'resources.limits' restricts CPU cores and memory usage to avoid exceeding subscription limits, particularly relevant for the Enterprise Edition. This configuration helps to manage available resources and control container behavior in a deployed environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nwindmill_worker:\\n  image: ${WM_IMAGE}\\n  pull_policy: always\\n  deploy:\\n    replicas: 3\\n    resources:\\n      limits:\\n        cpus: \"1\"\\n        memory: 2048M\n```\n\n----------------------------------------\n\nTITLE: Using Windmill Hub CLI for Local Syncing\nDESCRIPTION: Commands for syncing between your Private Hub and local filesystem using the @windmill-labs/hub-cli package, requiring HUB_URL and TOKEN environment variables to be set.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/32_private_hub/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwmill-hub pull\nwmill-hub push\n```\n\n----------------------------------------\n\nTITLE: Mocked API Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the interface for the mocked API file.  It specifies how variables and resources are structured within the file, guiding the expected format for data used in local API simulations.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/index.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ninterface MockedApi {\n  variables: Record<string, string>;\n  resources: Record<string, any>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Mode for Lightweight TypeScript Execution\nDESCRIPTION: A code snippet demonstrating how to enable the native mode for TypeScript scripts in Windmill. Adding the '//native' comment at the top of a script enables a more lightweight runtime with direct bindings to v8.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/1_typescript_quickstart/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//native\n```\n\n----------------------------------------\n\nTITLE: Creating a Superadmin User with Full Details\nDESCRIPTION: Example command to create a superadmin user with specified email, password, company, and name information.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/user.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwmill user add example@example.com mypassword123 --superadmin --company \"Acme Inc.\" --name \"John Doe\"\n```\n\n----------------------------------------\n\nTITLE: Exporting GPG Public Key for GitHub\nDESCRIPTION: Exports the GPG public key associated with the specified `<key_id>` in ASCII-armored format using the `gpg` command. The output should be copied and added to the GitHub account settings ('SSH and GPG keys') to enable commit signature verification on GitHub. Replace `<key_id>` with the actual GPG key ID.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/11_git_sync/index.mdx#_snippet_3\n\nLANGUAGE: gpg\nCODE:\n```\ngpg --armor --export <key_id>\n```\n\n----------------------------------------\n\nTITLE: Getting a Windmill Resource in TypeScript (Bun)\nDESCRIPTION: Shows how to import the Windmill client and use the `getResource` function inside an async `main` function to fetch a resource identified by its path (`'u/user/name'`) within a Bun environment. Requires the `windmill-client` package to be installed.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/ts_client.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport * as wmill from 'windmill-client@1.147.3';\n\nexport async function main() {\n\tlet x = await wmill.getResource('u/user/name');\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Resume URLs for Approval Prompt (Python)\nDESCRIPTION: This Python code snippet demonstrates how to generate resume URLs using `wmill.get_resume_urls()` for implementing an approval prompt in Windmill. It returns a dictionary containing the resume URL and optional default arguments and enums.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\n\ndef main():\n    urls = wmill.get_resume_urls()\n    return {\n        \"resume\": urls[\"resume\"],\n        \"default_args\": {}, # optional\n        \"enums\": {} # optional\n    }\n```\n\n----------------------------------------\n\nTITLE: Styling with CSS\nDESCRIPTION: This CSS code snippet applies styles to the application's components: `App`, `list`, `card`, `header`, and `content`.  It defines properties like padding, borders, margins, box shadows, and background colors to enhance the visual appearance and layout of the React components.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  padding: 15px;\n}\n\n.list {\n  height: 100vh;\n  border: 3px solid #333;\n}\n\n.card {\n  margin: 10px;\n  border: 1px solid #e0e0e0;\n  border-radius: 10px;\n  width: 300px;\n  min-height: 150px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  background-color: #ffffff;\n}\n\n.card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);\n}\n\n.header {\n  border-bottom: 1px solid #e0e0e0;\n  border-radius: 10px 10px 0 0;\n  padding: 10px 15px;\n  background-color: #f0f8ff;\n  text-align: center;\n  font-weight: 600;\n  min-height: 30px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n  cursor: pointer;\n}\n\n.content {\n  padding: 5px 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueueing Background Jobs with RQ and Redis in Python\nDESCRIPTION: Provides an example of using RQ (Redis Queue) to enqueue and execute background tasks in Python. It connects to a Redis server, defines a simple background function that simulates work and adds two numbers, and enqueues it onto the Redis-backed queue. The example shows how to enqueue tasks asynchronously and check the job result. Dependencies include RQ and a running Redis instance. Inputs are the function parameters (x, y), outputs include the job result after completion, and limitations are simplicity and suitability for smaller workloads compared to Celery.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rq import Queue\nfrom redis import Redis\nfrom time import sleep\n\ndef background_task(x, y):\n    sleep(5)\n    return x + y\n\nredis_conn = Redis()\nq = Queue(connection=redis_conn)\n\n# Enqueue the task\njob = q.enqueue(background_task, 10, 20)\n\n# Wait for the result\nprint(job.result)  # None until the task is finished\n```\n\n----------------------------------------\n\nTITLE: Defining and Using TypeScript Resource Types in Windmill\nDESCRIPTION: Illustrates the definition of Windmill resource types using TypeScript interfaces/types and their usage as typed parameters in an async 'main' function. It shows accessing resource properties using dot notation, enabling type-safe access to configurations like AWS credentials.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Aws = {\n  region: string;\n  awsAccessKeyId: string;\n  awsSecretAccessKey: string;\n};\n\nasync function main(credentials: aws) {\n  ...\n  const region = credentials.region;\n  const accessKeyId = credentials.awsAccessKeyId;\n  const secretAccessKey = credentials.awsSecretAccessKey;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Resource with get_resource Method (Python)\nDESCRIPTION: Method signature for `get_resource`. This client method retrieves a Windmill resource located at the specified `path` string and returns it as a Python dictionary (`Dict[str, Any]`).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/python_client.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef get_resource(self, path: str) -> Dict[str, Any]\n```\n\n----------------------------------------\n\nTITLE: Write and Read S3 File from Secondary Storage (TypeScript)\nDESCRIPTION: Demonstrates writing data to and then reading data from an S3 file located in a named secondary storage. It uses `wmill.writeS3File` and `wmill.loadS3File` with an object specifying both the `s3` path and `storage` name. The read content is decoded and logged.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/38_object_storage_in_windmill/index.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport * as wmill from 'windmill-client';\n\nexport async function main() {\n  await wmill.writeS3File({ s3: \"data.csv\", storage: \"storage_1\" }, \"fooo\\n1\")\n\n  const res = await wmill.loadS3File({ s3: \"data.csv\", storage: \"storage_1\" })\n\n  const text = new TextDecoder().decode(res)\n\n  console.log(text)\n  return { s3: \"data.csv\", storage: \"storage_1\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Windmill Worker Executable in PowerShell\nDESCRIPTION: This snippet launches the Windmill worker executable from a PowerShell prompt, assuming the executable is located in the current working directory. The snippet requires prior configuration of environment variables and a valid Windmill installation. Outputs may appear in the console indicating the worker's runtime progress.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/17_windows_workers/index.mdx#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\Users\\Alex\\windmill> .\\windmill-ee.exe\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Ansible Inventories in Windmill Using YAML\nDESCRIPTION: This snippet demonstrates how to specify an Ansible inventory resource by defining the resource_type as 'ansible_inventory' in the 'inventory' section of a Windmill script YAML. It assumes the 'ansible_inventory' resource type is available after syncing resource types from the Windmill hub. This enables the UI to prompt for an 'inventory.ini' input resource when launching the script. It supports static inventories linked via resources or dynamic inventories with custom file names.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ninventory:\n  - resource_type: ansible_inventory\n```\n\n----------------------------------------\n\nTITLE: Preprocessor Function for HTTP Route in TypeScript\nDESCRIPTION: This code adds a preprocessor that extracts parameters from an HTTP trigger, returning user-specific data or throwing an error if the trigger is not HTTP. Dependencies include Windmill's request event data, and the main purpose is data extraction and validation before main execution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/39_http_routing/index.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function preprocessor(\n  name: string,\n  age: number,\n  wm_trigger: {\n    kind: 'http' | 'email' | 'webhook' | 'websocket' | 'kafka' | 'nats' | 'postgres' | 'sqs' | 'gcp',\n    http: {\n      route: string;\n      path: string;\n      method: string;\n      params: Record<string, string>;\n      query: Record<string, string>;\n      headers: Record<string, string>;\n    }\n  }\n) {\n  if (wm_trigger.kind === 'http' && wm_trigger.http) {\n    return {\n      user_id: wm_trigger.http.params.id,\n      name,\n      age\n    };\n  }\n\n  throw new Error(`Expected trigger of kind 'http', but received: ${wm_trigger.kind}`);\n}\n\nexport async function main(user_id: string, name: string, age: number) {\n  // Do something\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple S3 Files from a Windmill Script (TypeScript)\nDESCRIPTION: Shows how to return an array of S3Object references from a Windmill script in TypeScript, enabling the display or download of multiple files from S3 in Windmill's UI. This facilitates batch operations and results rendering directly referencing files inside configured buckets.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/38_object_storage_in_windmill/index.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main() {\n  return [{s3: \"path/to/file_1\"}, {s3: \"path/to/file_2\"}, {s3: \"path/to/file_3\"}];\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Help Message as Default Slackbot Branch in Windmill JavaScript\nDESCRIPTION: Responds to Slack using the provided 'response_url' with a help message if no command matches. Relies on a POST request using fetch and expects the 'response_url' variable to be pre-populated by Windmill. The 'getHelp' function provides basic supported commands text. Dependencies: none beyond fetch (native in modern runtimes). Inputs: 'response_url' (string). Outputs: None; side effect is HTTP POST to Slack.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-20-handler-slack-commands/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function main(response_url: string) {\n\tawait fetch(response_url, {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({ text: getHelp() })\n\t});\n}\n\nfunction getHelp() {\n\tconst help = `Supported commands\n  help - prints this command\n  echo - prints input\n  `;\n\treturn help;\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning a Specific Inventory Resource to a Windmill Script Using YAML\nDESCRIPTION: This YAML snippet illustrates how to bind a fixed inventory resource to a Windmill script by specifying the resource path directly without declaring the resource_type. This configuration disables UI prompts for inventory selection and ensures the specified resource is used as the inventory input on every script execution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ninventory:\n  - resource: u/user/my_ansible_inventory\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Custom Flow User States in Python\nDESCRIPTION: This Python code shows setting and getting a flow user state key-value pair using the Windmill client library version 1.297.0. The function sets the state 'foobar' with value 43 and retrieves it immediately. This facilitates sharing data across multiple steps in a flow with the state scoped to the flow job lifetime. The snippet assumes the 'wmill' package is installed and imported.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\n#extra_requirements:\n#wmill==1.297.0\n\ndef main(x: str):\n    wmill.set_flow_user_state(\"foobar\", 43)\n    return wmill.get_flow_user_state(\"foobar\")\n```\n\n----------------------------------------\n\nTITLE: Pushing Merged Changes to Windmill Workspace (YAML)\nDESCRIPTION: This GitHub Actions workflow is designed to sync the main branch of the repository to a specified Windmill workspace. It's triggered manually or by pushes to the `main` branch. It includes a check to skip the sync if the commit message starts with `[WM]` to avoid conflicts with pushes originating from Windmill itself. It uses `windmill-cli` to perform the push, requiring the `WMILL_TOKEN` secret and `WMILL_WORKSPACE`, `WMILL_URL` environment variables.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/9_deploy_gh_gl/index.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nname: \"Push main to Windmill workspace\"\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - \"main\"\n    # if the windmill workspace is persisted in a subfolder of this repos, you can add the following to avoid pushing to windmill when there's no change\n    # paths:\n    #   - wm/**\n\nenv:\n  WMILL_URL: https://app.windmill.dev/\n  WMILL_WORKSPACE: github-sync-example-prod\n\njobs:\n  sync:\n    environment: windmill\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n\n      # We check the commit to make sure it doesn't start with [WM] which commits coming from Windmill Git Sync do.\\\n      # If that's the case, then we stop the workflow as we want to avoid overwriting changes that are out-of-sync\n      # (for instance if one were to deploy in quick succession)\n      - name: Check commit message\n        id: check_message\n        run: |\n          COMMIT_MESSAGE=\"${{ github.event.head_commit.message }}\"\n          if [[ \"$COMMIT_MESSAGE\" =~ ^\\[WM\\] ]]; then\n            echo \"Commit message starts with '[WM]', skipping push to Windmill to avoid overwriting deploy that immediately follows it\"\n            echo \"skip=skip\" >> $GITHUB_OUTPUT\n          fi\n\n      # (push will pull first to detect conflicts and only push actual changes)\n      - name: Push changes\n        if: steps.check_message.outputs.skip != 'skip'\n        run: |\n          npm install -g windmill-cli@1.393.3\n          wmill sync push --yes --skip-variables --skip-secrets --skip-resources --workspace ${{ env.WMILL_WORKSPACE }} --token ${{ secrets.WMILL_TOKEN }} --base-url ${{ env.WMILL_URL }}\n\n```\n\n----------------------------------------\n\nTITLE: Multi-purpose Windmill Worker ECS Task Definition and Configuration\nDESCRIPTION: Defines the ECS task setup for deploying the Windmill multi-purpose worker container on EC2, including environment variables, resource allocation, logging, and volume mounts. It includes a bind volume for caching dependencies and a long stop timeout for graceful shutdowns.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/aws_ecs.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"containerDefinitions\": [\n\t\t{\n\t\t\t\"name\": \"windmill-worker\",\n\t\t\t\"image\": \"ghcr.io/windmill-labs/windmill-ee:<LATEST_RELEASE>\",\n\t\t\t\"stopTimeout\": 604800,\n\t\t\t\"cpu\": 2048,\n\t\t\t\"memory\": 3072,\n\t\t\t\"portMappings\": [],\n\t\t\t\"essential\": true,\n\t\t\t\"environment\": [\n\t\t\t\t{\"name\": \"DATABASE_URL\", \"value\": \"postgres://postgres:<DB_PASSWORD>@<DB_HOSTNAME>:5432/windmill?sslmode=disable\"},\n\t\t\t\t{\"name\": \"JSON_FMT\", \"value\": \"true\"},\n\t\t\t\t{\"name\": \"WORKER_GROUP\", \"value\": \"default\"},\n\t\t\t\t{\"name\": \"MODE\", \"value\": \"worker\"}\n\t\t\t],\n\t\t\t\"mountPoints\": [],\n\t\t\t\"volumesFrom\": [],\n\t\t\t\"logConfiguration\": {\n\t\t\t\t\"logDriver\": \"awslogs\",\n\t\t\t\t\"options\": {\n\t\t\t\t\t\"awslogs-group\": \"/ecs/windmill-worker\",\n\t\t\t\t\t\"awslogs-region\": \"us-east-2\",\n\t\t\t\t\t\"awslogs-stream-prefix\": \"ecs\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"family\": \"windmill-worker\",\n\t\"executionRoleArn\": \"<ECS_TASK_EXECUTION_ROLE_ARN>\",\n\t\"networkMode\": \"awsvpc\",\n\t\"volumes\": [\n\t\t{\n\t\t\t\"name\": \"worker_dependency_cache\",\n\t\t\t\"host\": {\n\t\t\t\t\"sourcePath\": \"/tmp/windmill/cache\"\n\t\t\t}\n\t\t}\n\t],\n\t\"placementConstraints\": [],\n\t\"requiresCompatibilities\": [\"EC2\"],\n\t\"cpu\": \"2048\",\n\t\"memory\": \"3072\",\n\t\"runtimePlatform\": {\n\t\t\"cpuArchitecture\": \"X86_64\",\n\t\t\"operatingSystemFamily\": \"LINUX\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Windmill Webhooks Using cURL with Token as Query Parameter - Bash\nDESCRIPTION: Demonstrates using cURL to issue a POST request to a synchronous Windmill webhook endpoint with the bearer token included as a URL query parameter 'token'. The payload is an empty JSON object '{}'. This method is less secure than passing the token via header and should be treated as secret. Inputs include the webhook URL appended with the token query parameter, and JSON payload. Outputs the webhook execution result or job UUID.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n## Query parameter\ncurl -X POST                               \\\n    --data '{}'                            \\\n    -H \"Content-Type: application/json\"    \\\n    \".../w/demo/jobs/run_wait_result/p/u/bot/hello_world_deno?token=supersecret\"\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Trust Policy for OIDC Provider - JSON\nDESCRIPTION: This JSON snippet is a template for an AWS IAM Role trust policy that enables authentication via Windmill OIDC tokens. The Statement grants sts:AssumeRoleWithWebIdentity permission to federated users from the configured OIDC provider, with required StringEquals or StringLike conditions matching audience, email, or subject. This should be adjusted to match your actual base_url and principal. Intended for use in AWS IAM Console or APIs to restrict access based on OIDC JWT claims. Do not expose secrets or hardcoded credentials.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n      {\n          \"Effect\": \"Allow\",\n          \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n          \"Principal\": {\n              \"Federated\": \"arn:aws:iam::976079455550:oidc-provider/<base_url>/api/oidc/\"\n          },\n          \"Condition\": {\n              \"StringEquals\": {\n                  \"<base_url>/api/oidc/:aud\": \"sts.amazonaws.com\",\n                  \"<base_url>/api/oidc/:email\": \"example@example.com\",\n                  ...\n              }\n          }\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Supabase Data for Table Component (JavaScript)\nDESCRIPTION: This JavaScript transformer takes the result from a Supabase fetch and extracts the `data` field. It then maps over the data array, creating a new object for each product that includes only the `id`, `title`, `description`, `price`, and `quantity` fields, removing the `image_url` field. This is used to format data for display in a Table component in Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn result.data?.map((product) => {\n\tconst { id, title, description, price, quantity } = product;\n\treturn { id, title, description, price, quantity };\n});\n```\n\n----------------------------------------\n\nTITLE: RBAC Role for Kubernetes Docker\nDESCRIPTION: This YAML snippet defines a Kubernetes Role and RoleBinding to grant the necessary permissions for the service account used by the script to manage pods, including getting, listing, creating, updating, patching, and deleting pods, as well as accessing pod logs and attaching to pods. This enables the script to run docker commands inside the K8s cluster.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/7_docker/index.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n--- \napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: windmill\n  name: pod-management\nrules:\n  - apiGroups: ['']\n    resources: ['pods']\n    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']\n  - apiGroups: ['']\n    resources: ['pods/log']\n    verbs: ['get', 'list', 'watch']\n  - apiGroups: ['']\n    resources: ['pods/attach']\n    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']\n  - apiGroups: ['']\n    resources: ['events']\n    verbs: ['get', 'list', 'watch']\n--- \napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: pod-management\n  namespace: windmill\nsubjects:\n  - kind: ServiceAccount\n    name: windmill-chart\n    namespace: windmill\nroleRef:\n  kind: Role\n  name: pod-management\n  apiGroup: rbac.authorization.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Pushing a Resource using wmill CLI (bash)\nDESCRIPTION: This bash snippet demonstrates pushing a local resource to the remote workspace, overriding any existing remote version.  It requires the `wmill` command-line tool and specifies the `file_path` of the local resource and the `remote_path` where it should be placed. The command uploads the specified resource file to the remote workspace.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/resource.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill resource push <file_path> <remote_path>\n```\n\n----------------------------------------\n\nTITLE: Updating Product in Supabase (TypeScript)\nDESCRIPTION: This TypeScript script updates a product's information in a Supabase database. It uses the Supabase client library to connect to the database and update the record with the given `id`. It requires a Supabase `auth` object containing the URL and key, as well as the `id`, `title`, `description`, `quantity`, and `price` of the product to be updated. The script exports an asynchronous function `main` that performs the update operation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\ntype Supabase = {\n\turl: string;\n\tkey: string;\n};\n\nexport async function main(\n\tauth: Supabase,\n\tid: string,\n\ttitle: string,\n\tdescription: string,\n\tquantity: number,\n\tprice: number\n) {\n\tconst client = createClient(auth.url, auth.key);\n\n\treturn await client.from('products').update({ title, description, quantity, price }).eq('id', id);\n}\n```\n\n----------------------------------------\n\nTITLE: Windmill Python Client Class Signature\nDESCRIPTION: Defines the `Client` class signature, the main entry point for the Windmill API. It accepts the `base_url` of the Windmill API (defaulting to localhost) and an authentication `token`.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/python_client.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass Client(base_url: str = 'http://localhost:8000/api', token: str = '')\n```\n\n----------------------------------------\n\nTITLE: Installing Windmill via Helm Chart\nDESCRIPTION: This snippet demonstrates how to add the Windmill Helm repository and install the Windmill chart with default values using Helm. It creates a new namespace for Windmill if it doesn't exist. The `--namespace` and `--create-namespace` flags are crucial for deploying Windmill into a dedicated namespace.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# add the Windmill helm repo\nhelm repo add windmill https://windmill-labs.github.io/windmill-helm-charts/\n# install chart with default values\nhelm install windmill-chart windmill/windmill  \\\n      --namespace=windmill             \\\n      --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Generating Resume URLs for Approval Prompt (Bun)\nDESCRIPTION: This TypeScript (Bun) code snippet demonstrates how to generate resume URLs using `wmill.getResumeUrls()` for creating an approval prompt in Windmill. It returns an object containing the resume URL and optional default arguments and enums, which will be used to automatically show a prompt to the operator when running the flow.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport * as wmill from \"windmill-client\"\n\nexport async function main() {\n    const resumeUrls = await wmill.getResumeUrls(\"approver1\")\n\n    return {\n        resume: resumeUrls['resume'],\n        default_args: {}, // optional\n        enums: {} // optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell 7 Executable Path Environment Variable in PowerShell\nDESCRIPTION: This snippet sets the 'POWERSHELL_PATH' environment variable to the location of PowerShell 7. Replace the example with your actual path. The environment variable allows Windmill to invoke the correct PowerShell executable for worker processes.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/17_windows_workers/index.mdx#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Replace these variables with your specific configuration\n$env:POWERSHELL_PATH=\"C:\\Program Files\\PowerShell\\7\\pwsh.exe\"\n\n```\n\n----------------------------------------\n\nTITLE: Implementing try/catch Error Handling in TypeScript Script\nDESCRIPTION: This snippet demonstrates how to handle errors within a Windmill script using a try/catch block in TypeScript. It captures fetch errors and returns a custom error object for consistent error reporting. Dependencies include standard fetch API; it requires a runtime environment that supports async/await.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/10_error_handling/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Define the main function which will handle errors using try/catch\nexport async function main() {\n\ttry {\n\t\t// Your code that might throw errors goes here\n\t\t// For example, let's simulate a fetch request\n\t\tconst response = await fetch('https://api.example.com/data');\n\t\tconst data = await response.json();\n\n\t\t// Return the result if everything goes well\n\t\treturn data;\n\t} catch (error) {\n\t\t// Handle errors that might occur during the fetch operation\n\t\tconsole.error('An error occurred:', error);\n\n\t\t// Return a custom error object or message\n\t\treturn { error: 'An error occurred while fetching data.' };\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Reopening Pull Request on Windmill Push (YAML)\nDESCRIPTION: This GitHub Actions workflow is triggered by pushes to branches created by Windmill Git Sync (following the `wm_deploy/` pattern). Its purpose is to automatically create or reopen a pull request from the sync branch to the main branch. It checks out the code and uses the GitHub CLI (`gh pr`) for PR management. It requires the `GITHUB_TOKEN` secret for authentication and write permissions for pull requests.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/9_deploy_gh_gl/index.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: Windmill Pull Request\non:\n  push:\n    branches:\n      - wm_deploy/github-sync-example-staging/**\n\nenv:\n  TARGET_BRANCH: main\n\njobs:\n  submit_pull_requests:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n      - uses: actions/checkout@v4\n      - name: Create pull request\n        run: |\n          gh pr view ${{ github.ref_name }} \\\n          && gh pr reopen ${{ github.ref_name }} \\\n          || gh pr create -B ${{ env.TARGET_BRANCH }} -H ${{ github.ref_name }} \\\n          --title \"${{github.event.head_commit.message }}\" \\\n          --body \"PR created by Github action '${{ github.workflow }}'\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```\n\n----------------------------------------\n\nTITLE: Parsing AI Input Mapping Response (Regex)\nDESCRIPTION: This regular expression is used by the Windmill AI Flow Builder to parse the AI's response when it determines input mappings for a Hub script. It is designed to match lines in the format `input_name: expr`, capturing the input name (alphanumeric characters and underscore) and the expression assigned to it.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-20-ai-flow-builder/index.mdx#_snippet_2\n\nLANGUAGE: Regex\nCODE:\n```\n([a-zA-Z_0-9]+): (.+)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Replication Slots in postgresql.conf for Trigger Limits\nDESCRIPTION: Sets the `max_replication_slots` parameter in `postgresql.conf` to control how many replication slots can be created simultaneously. Each replication slot corresponds to one logical replication subscription or Windmill trigger. Adjusting this allows more triggers to be created. Changes require Postgres restart.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/46_postgres_triggers/index.mdx#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n#max_replication_slots = 10  # max number of replication slots (change requires restart)\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL query with Python\nDESCRIPTION: This script uses the 'mysql-connector-python' library to connect to a MySQL database with provided credentials, execute a query, fetch one result, and close the connection. It converts the fetched result into a string for output, offering straightforward interaction with MySQL databases.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import TypedDict\nimport mysql.connector as mysql_connector\n\n# Define the MySQL resource type\n class mysql(TypedDict):\n  ssl: bool\n  host: str\n  port: float\n  user: str\n  database: str\n  password: str\n\ndef main(mysql_credentials: mysql, query; str) -> str:\n  # Connect to the MySQL database using the provided credentials\n  connection = mysql_connector.connect(\n    host=mysql_credentials[\"host\"],\n    user=mysql_credentials[\"user\"],\n    password=mysql_credentials[\"password\"],\n    database=mysql_credentials[\"database\"],\n    port=int(mysql_credentials[\"port\"]),\n    ssl_disabled=not mysql_credentials[\"ssl\"],\n  )\n\n  # Create a cursor object\n  cursor = connection.cursor()\n\n  # Execute the query\n  cursor.execute(query)\n\n  # Fetch one result\n  result = cursor.fetchone()\n\n  # Close the cursor and connection\n  cursor.close()\n  connection.close()\n\n  # Return the result\n  return str(result[0])\n\n```\n\n----------------------------------------\n\nTITLE: Defining Runnable Inputs with TypeScript\nDESCRIPTION: This TypeScript snippet defines an asynchronous function named 'main' which takes typed parameters. It demonstrates Windmill's capability to infer input types for a runnable component by analyzing the function's signature. The 'mode' parameter is a union type limited to 'editor' or 'preview', which Windmill interprets as a selectable input with these options. The 'name' parameter is a string input. The function returns the 'mode' value, showing basic runnable behavior. No external dependencies beyond TypeScript are required.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/3_app_component_configuration.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(mode: 'editor' | 'preview', name: string) {\\n\\treturn mode;\\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Slack Message using Resource in TypeScript\nDESCRIPTION: This script demonstrates how to use a Slack Resource connected via OAuth in Windmill to send a message to a specific Slack channel using the Slack Web API. It requires a pre-configured Slack resource passed as an input parameter.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/slack.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebClient } from 'https://deno.land/x/slack_web_api@1.0.0/mod.ts';\ntype Slack = {\n\ttoken: string;\n};\n\nexport async function main(text: string, channel: string, slack: Slack) {\n\tconst web = new WebClient(slack.token);\n\n\tawait web.chat.postMessage({\n\t\tchannel,\n\t\ttext\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service Protocol Buffers in proto3\nDESCRIPTION: This .proto file defines a simple gRPC 'Greeter' service with one RPC method 'SayHello' that accepts a HelloRequest containing a name string and returns a HelloReply with a message string. It follows proto3 syntax and sets a Go package option for code generation. This definition is the API schema needed to generate or dynamically load client code for querying the gRPC service.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-22-query-grcp-service/index.mdx#_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\noption go_package = \"github.com/gbouv/grpc-quickstart-service/protobuf\";\n\npackage helloworld;\n\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Resource by Path Using Windmill Client in Go\nDESCRIPTION: This Go code snippet illustrates fetching a resource from Windmill by calling GetResource with the full resource path string 'u/user/foo'. It requires the Windmill Go client setup and allows scripts or programs in Go to dynamically acquire resource data.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nwmill.GetResource(\"u/user/foo\")\n```\n\n----------------------------------------\n\nTITLE: Getting Job Status with get_job_status (Python)\nDESCRIPTION: Method signature for `get_job_status`. This client method retrieves the current status of a Windmill job identified by its `job_id`. It returns a value from the `JobStatus` enumeration (e.g., COMPLETED, RUNNING, WAITING).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/python_client.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef get_job_status(self, job_id: str) -> JobStatus\n```\n\n----------------------------------------\n\nTITLE: Adding a Workspace with Windmill CLI - Bash\nDESCRIPTION: This command registers a new workspace in the local CLI configuration. It requires the Windmill CLI to be installed. Arguments include workspace_name (local alias), workspace_id (remote identifier), and remote (remote instance URL). The workspace may be created remotely if not existing by specifying --create and related options. Input prompts are provided if arguments are omitted, and options allow specifying initial user details. Workspace is automatically switched upon addition.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/workspace-management.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace add [workspace_name] [workspace_id] [remote]\n```\n\n----------------------------------------\n\nTITLE: Python: Defining a PostgreSQL Resource Type with TypedDict\nDESCRIPTION: This snippet shows how to define a PostgreSQL resource schema using TypedDict in Python, providing type hints and structure for resource objects. The main function accepts the resource as a parameter for further usage within scripts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/code_editor/add_variables_resources.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import TypedDict\n\nclass postgresql(TypedDict):\n    host: str\n    port: int\n    user: str\n    dbname: str\n    sslmode: str\n    password: str\n    root_certificate_pem: str\n\ndef main(selected_postgres: postgresql):\n\t# Use Resource...\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Text from PDF using PyPDF2 (Python)\nDESCRIPTION: This Python script uses the PyPDF2 library to extract text from a PDF file. It takes a PDF file (represented as bytes) as input, reads through each page of the PDF, extracts the text content, concatenates all the extracted text, and then encodes the entire text content into a base64 encoded string.  The script outputs a dictionary that contains a file object representing the extracted text in a text format.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport io\nimport base64\nfrom PyPDF2 import PdfReader\n\ndef main(pdf: bytes) -> dict:\n    # Create a PdfReader instance\n    reader = PdfReader(io.BytesIO(pdf))\n    \n    # Initialize an empty string to collect all the text\n    full_text = \"\"\n    \n    # Iterate through all the pages and extract text\n    for page in reader.pages:\n        page_text = page.extract_text()\n        if page_text:\n            full_text += page_text + \"\\n\"  # Add a newline character to separate pages\n    \n    # Encode the full text to a byte stream\n    encoded_text = base64.b64encode(full_text.encode('utf-8')).decode('utf-8')\n    \n    # Return the file content and filename in the desired format\n    return {\n        \"file\": {\n            \"content\": encoded_text,\n            \"filename\": \"content.txt\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Bash / Powershell / Nu Windmill Script Quickstart\nDESCRIPTION: This snippet creates a DocCard component linking to the Bash, Powershell, and Nu scripts quickstart guide. It highlights support for shell scripting environments and provides visual cues via icons, encouraging users to explore shell scripting in Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { SiGnubash } from 'react-icons/si';\n\n// Card linking to Bash/Powershell/Nu scripting quickstart guide, supporting shell script integrations\n```\n\n----------------------------------------\n\nTITLE: Rendering Windmill App Preview Component in React\nDESCRIPTION: This snippet shows how to include the `AppPreview` component from the SDK within a React function component. You need to replace `YOUR_WORKSPACE` and `YOUR_APP_PATH` with actual values to preview a Windmill app inside a React application.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/15_react_sdk/index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { AppPreview } from 'windmill-react-sdk';\n\nfunction MyApp() {\n\treturn <AppPreview workspace={YOUR_WORKSPACE} appPath={YOUR_APP_PATH} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Windmill Apps with wmill CLI\nDESCRIPTION: This command lists all available apps in the remote Windmill workspace using the `wmill app` command. It requires the `wmill` CLI to be configured and connected to a Windmill instance. It returns a list of apps in the workspace.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/app.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwmill app\n```\n\n----------------------------------------\n\nTITLE: Switching to a Named Workspace Example - Windmill CLI - Bash\nDESCRIPTION: This example demonstrates how to switch the active CLI context to a workspace named 'MyWorkspace'. The workspace must exist in the local configuration. Only the name is provided as an argument.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/workspace-management.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace switch MyWorkspace\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Reverse Proxy for Windmill Indexer\nDESCRIPTION: This Caddyfile configuration demonstrates how to route specific requests to the Windmill indexer service when using Caddy as a reverse proxy. It directs requests with the prefix `/api/srch/*` to the `windmill_indexer` container listening on port 8001. Other requests, like WebSocket connections (`/ws/*`) and general traffic (`/*`), are routed to their respective backend services (`lsp` and `windmill_server`). This ensures that full-text search queries are handled by the dedicated indexer service.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/18_full_text_search/index.mdx#_snippet_1\n\nLANGUAGE: Caddyfile\nCODE:\n```\n{$BASE_URL} {\n        bind {$ADDRESS}\n        reverse_proxy /ws/* http://lsp:3001\n        # reverse_proxy /ws_mp/* http://multiplayer:3002\n        reverse_proxy /api/srch/* http://windmill_indexer:8001\n        reverse_proxy /* http://windmill_server:8000\n        # tls /certs/cert.pem /certs/key.pem\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with DuckDB from Azure Blob Storage\nDESCRIPTION: This code snippet demonstrates how to query a Parquet file in Azure Blob Storage using DuckDB. It retrieves Azure connection details and connects DuckDB to Azure using the provided settings. The snippet reads the data, performs a simple query, and writes the result back to Azure using Polars, as DuckDB doesn't natively support writing to Azure Blob Storage as of Jan 30 2025.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/27_data_pipelines/index.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\nfrom wmill import S3Object\nimport duckdb\n\n\ndef main(input_file: S3Object):\n    # this will default to the workspace S3 resource\n    connection_str = wmill.duckdb_connection_settings().connection_settings_str\n    root_path = wmill.duckdb_connection_settings().azure_container_path\n    print(root_path)\n\n    # this will use the designated resource\n    # args = wmill.duckdb_connection_settings(\"<PATH_TO_S3_RESOURCE>\").connection_settings_str\n\n    # create a DuckDB database in memory\n    # see https://duckdb.org/docs/api/python/dbapi\n    conn = duckdb.connect()\n    \n    # connect duck db to the S3 bucket - this will default to the workspace S3 resource\n    conn.execute(connection_str)\n\n    input_uri = \"{}/{}\".format(root_path, input_file[\"s3\"])\n    output_file = \"output/result.parquet\"\n    output_uri = \"{}/{}\".format(root_path, output_file)\n\n    # Run queries directly on the parquet file\n    query_result = conn.sql(\n        \"\"\"\n        SELECT * FROM read_parquet('{}')\n    \"\"\".format(input_uri)\n    )\n    query_result.show()\n\n    # NOTE: DuckDB doesn't support writing to Azure Blob Storage as of Jan 30 2025\n    # Write the result of a query to a different parquet file on Azure Blob Storage\n    # using Polars \n    storage_options = wmill.polars_connection_settings().storage_options\n    query_result.pl().write_parquet(output_uri, storage_options=storage_options)\n    conn.close()\n    return S3Object(s3=output_file)\n```\n\n----------------------------------------\n\nTITLE: Compiling gRPC .proto Files to JavaScript Using grpc_tools_node_protoc CLI\nDESCRIPTION: This bash command uses the grpc_tools_node_protoc compiler to generate JavaScript code with commonjs import style and grpc_js plugin output for gRPC service definitions from a .proto file. The resulting JS files can be packaged into an NPM package, published to a private registry such as Verdaccio, and then consumed by Windmill TypeScript or JavaScript scripts for static usage of gRPC clients. This method requires installation of grpc-tools and configured tooling.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-22-query-grcp-service/index.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngrpc_tools_node_protoc --js_out=import_style=commonjs,binary:./ --grpc_out=grpc_js:./ helloworld.proto\n```\n\n----------------------------------------\n\nTITLE: Storing Embeddings in Supabase using TypeScript\nDESCRIPTION: This TypeScript function stores document content, its vector embedding, and a source link into a Supabase table named 'documents'. It utilizes the 'refreshAndRetryIfExpired' helper from 'windmill_helpers' to handle potential token expiration, ensuring the Supabase client operation succeeds even with temporary authentication issues. The function requires Supabase credentials (URL and key), the embedding vector, the document text, and the source link as input.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-06-05-discord-bot/index.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { refreshAndRetryIfExpired } from 'https://deno.land/x/windmill_helpers@v1.1.1/mod.ts';\n\ntype Supabase = {\n\turl: string;\n\tkey: string;\n};\n\nexport async function main(\n\tauth: Supabase,\n\tembedding: any,\n\tdocument: string,\n\tlink: string,\n\ttoken?: {\n\t\taccess: string;\n\t\trefresh: string;\n\t\texpires_at?: number;\n\t}\n) {\n\treturn await refreshAndRetryIfExpired(auth, token, async (client) => {\n\t\tconst query: any = await client.from('documents').insert({\n\t\t\tcontent: document,\n\t\t\tembedding,\n\t\t\tlink\n\t\t});\n\n\t\treturn query;\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Accepting S3Object File as Input in Windmill Scripts (TypeScript and Python)\nDESCRIPTION: These snippets demonstrate how to define a Windmill script's main function to accept an input parameter typed as 'S3Object', representing files stored in connected S3 buckets. This enables the script to receive file references from the UI or flows and work seamlessly with object storage pointers. Dependencies include importing 'S3Object' from the Windmill client (TypeScript or Python). Input files are identified using JSON objects containing the 's3' key with the path. This pattern integrates well with Windmill's auto-generated UI features like file uploaders and bucket explorers.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/38_object_storage_in_windmill/index.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from 'windmill-client';\nimport { S3Object } from 'windmill-client';\n\nexport async function main(input_file: S3Object) {\n\n// rest of the code\n\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from 'npm:windmill-client@1.253.7';\nimport { S3Object } from 'npm:windmill-client@1.253.7';\n\nexport async function main(input_file: S3Object) {\n\n// rest of the code\n\n}\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport wmill\nfrom wmill import S3Object\n\ndef main(input_file: S3Object):\n\n# Rest of the code\n```\n\n----------------------------------------\n\nTITLE: Bash Script for Remote Docker Daemon\nDESCRIPTION: This bash script is designed to run docker commands against a remote docker daemon, specified by the DOCKER variable, which includes the Docker daemon address. The script uses the alpine image and the /bin/echo command. It showcases how to interact with a docker daemon running on a remote host.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/7_docker/index.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nset -ex\n\n# The Remote Docker daemon Address -> 100.64.2.97:8000\n# In the example, 100.64.2.97 is my pod address.\n\nDOCKER=\"docker -H 100.64.2.97:8000\"\n$DOCKER run --rm alpine /bin/echo \"Hello $msg\"\n```\n\n----------------------------------------\n\nTITLE: Greeting Multiple Arguments with a Loop - Bash\nDESCRIPTION: This script loops over all arguments passed to it using the \"$@\" array, echoing a personalized greeting for each. It showcases handling any number of arguments and iterating safely even when arguments contain spaces. Requires Bash shell; no extra dependencies. Inputs are all command-line arguments; outputs each greeting as a new line.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-27-bash-script-arguments/index.mdx#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\n\nfor var in \"$@\"\ndo\n    echo \"Hello, $var.\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Making a Basic Supabase API Call (TypeScript)\nDESCRIPTION: This snippet demonstrates a basic example of a Windmill script written in TypeScript/Bun making a fetch request to the Supabase API. It uses the native fetch function and includes headers for authorization and content type. The function is asynchronous and returns the JSON response from the API.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/6_rest_grapqhql_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main() {\n\tconst res = await fetch('https://api.supabase.com/v1/organizations', {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer <your_supabase_token>`,\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t});\n\treturn res.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Tutorial for S3 Integration\nDESCRIPTION: An HTML iframe embedding a YouTube video tutorial that demonstrates how to integrate S3 storage with Windmill, specifically showing how Supabase resources can be used in different ways from a script.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/cloudflare-r2.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\tstyle={{ aspectRatio: '16/9' }}\n\tsrc=\"https://www.youtube.com/embed/ggJQtzvqaqA\"\n\ttitle=\"YouTube video player\"\n\tframeBorder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\tallowFullScreen\n\tclassName=\"border-2 rounded-lg object-cover w-full dark:border-gray-800\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Dind template\nDESCRIPTION: This YAML snippet defines a Kubernetes Pod that runs a Docker-in-Docker (dind) container using the `docker:stable-dind` image. It configures the dind container with the `dockerd` command to expose a TCP socket and sets `privileged: true` to allow the Docker daemon to function within the container.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/7_docker/index.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dind\nspec:\n  containers:\n    - name: dind\n      image: 'docker:stable-dind'\n      command:\n        - dockerd\n        - --host=tcp://0.0.0.0:8000\n      securityContext:\n        privileged: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic User with Auto-generated Password\nDESCRIPTION: Example command to create a new standard user with an email address, letting the system auto-generate a password.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/user.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill user add example@example.com\n```\n\n----------------------------------------\n\nTITLE: Running Docker Image as Kubernetes Pod - Bash - Windmill\nDESCRIPTION: This Bash script runs a Docker image as a temporary Kubernetes pod using kubectl. It configures a kubeconfig using the mounted service account token and CA certificate to interact with the Kubernetes API server. The script creates a non-restarting pod that is automatically removed after completion. This approach is suitable when running Windmill workers within Kubernetes and requires specific RBAC permissions for the service account.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/7_docker_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# shellcheck shell=bash\n# Bash script that calls docker as a client to the host daemon\n# See documentation: https://www.windmill.dev/docs/advanced/docker\nmsg=\"${1:-world}\"\n\nIMAGE=\"docker/whalesay:latest\"\nCOMMAND=(sh -c \"cowsay $msg\")\n\nAPISERVER=https://kubernetes.default.svc\nSERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount\nNAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)\nTOKEN=$(cat ${SERVICEACCOUNT}/token)\nCACERT=${SERVICEACCOUNT}/ca.crt\n\nKUBECONFIG_TMP_DIR=\"$(mktemp -d)\"\nexport KUBECONFIG=\"${KUBECONFIG_TMP_DIR}/kubeconfig\"\n\ntrap \"rm -rfv ${KUBECONFIG_TMP_DIR}\" EXIT\n\nkubectl config set-cluster local --server=\"${APISERVER}\" --certificate-authority=\"${CACERT}\"\nkubectl config set-credentials local --token=\"${TOKEN}\"\nkubectl config set-context local --cluster=local --user=local --namespace=\"${NAMESPACE}\"\nkubectl config use-context local\n\nkubectl run task -it --rm --restart=Never --image=\"$IMAGE\" -- \"${COMMAND[@]}\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Named Flags with getopts - Bash\nDESCRIPTION: This advanced snippet introduces argument parsing with named flags using getopts, enabling more structured input handling. It defines the '-n' flag for the user's name and provides a case statement for additional validation. Bash is required, and the OPTARG environment variable supplies the flag's value. Improper flags trigger an invalid option message. Output is a personalized greeting based on the '-n' argument.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-27-bash-script-arguments/index.mdx#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\nwhile getopts n: flag\n\ndo\n        case \"${flag}\" in\n                n) name=${OPTARG}\n                         ;;\n                *) echo \"Invalid option: -$flag\" ;;\n        esac\ndone\n\necho \"Hello, $name.\"\n```\n\n----------------------------------------\n\nTITLE: Define Arguments and Execute Multi-statement Query using Oracle\nDESCRIPTION: Defines script arguments using the Oracle-specific `:name` syntax, including optional types and default values. Shows a sample multi-statement query combining `INSERT` and `UPDATE` using these named arguments. Explicitly includes the comment syntax (`-- database resource_path`) for binding to a database resource.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- database f/your/path\n-- :name1 (text) = default arg\n-- :name2 (int)\n-- :name3 (int)\nINSERT INTO demo VALUES (:name1, :name2);\nUPDATE demo SET col2 = :name3 WHERE col2 = :name2;\n```\n\n----------------------------------------\n\nTITLE: Example Amazon Redshift Endpoint String\nDESCRIPTION: This snippet shows an example endpoint string obtained from the AWS console for an Amazon Redshift cluster. It illustrates the format from which the host, port, and database name can be extracted for configuring a PostgreSQL resource in Windmill to connect to Redshift.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndefault-workgroup.475893240789.us-east-1.redshift-serverless.amazonaws.com:5439/dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger Service with Metrics Export in Docker Compose (YAML)\nDESCRIPTION: Updates the Jaeger service definition in `docker-compose.yml` to enable metrics export. It adds volume mounting for a Jaeger configuration file (`jaeger-config.yaml`), exposes the metrics endpoint on port 8889, and modifies the command to load the configuration.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/otel/index.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  jaeger:\n    image: jaegertracing/jaeger:latest\n    ports:\n      - \"16686:16686\"\n    expose:\n      - 4317\n      - 8889\n    volumes:\n      - ./jaeger-config.yaml:/etc/jaeger/config.yml\n    command: [\"--config\", \"/etc/jaeger/config.yml\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Structure (YAML)\nDESCRIPTION: This YAML snippet defines the structure of a resource file. It specifies keys such as `value`, `description`, `resource_type`, and `is_oauth`.  The `value` and `resource_type` fields are required. The file should be valid YAML and will be parsed by the `wmill` tool during resource upload.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/resource.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nvalue: <value>\ndescription: <description>\nresource_type: <resource_type>\nis_oauth: <is_oauth>\n```\n\n----------------------------------------\n\nTITLE: Defining Triage Script Output Type Go Struct\nDESCRIPTION: This Go struct defines the shape of the data that the triage script will return. It includes the repository full name, a slice of strings for the labels to apply, and the issue number. This structure is designed to be easily consumed by the subsequent script (for applying labels) in the Windmill Flow.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-06-flow-triage-bot/index.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype payload struct {\n\tRepo        string // a repo full name: owner/repo\n\tLabelWith   []string\n\tIssueNumber int\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Using OIDC Token with AWS STS - TypeScript (Deno)\nDESCRIPTION: This snippet shows how to generate an OIDC token using the Windmill client in a Deno TypeScript environment, and then use that token to authenticate against AWS STS. It imports the necessary AWS SDK modules and Windmill client from npm, retrieves a token with a specified audience, constructs an AssumeRoleWithWebIdentityCommand, and sends it via a configured STSClient. Input parameters include the AWS RoleArn, the audience string, and an optional role session name. Requires @aws-sdk/client-sts and windmill-client as dependencies, along with proper network access and credentials. The output is the AWS role credentials assumed using the token.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { STSClient } from 'npm:@aws-sdk/client-sts';\nimport { AssumeRoleWithWebIdentityCommand } from 'npm:@aws-sdk/client-sts';\nimport * as wmill from 'npm:windmill-client';\n\nexport async function main() {\n\tconst token = await wmill.getIdToken('sts.amazonaws.com');\n\n\tconst command = new AssumeRoleWithWebIdentityCommand({\n\t\tRoleArn: 'arn:aws:iam::000000000000:role/my_aws_role',\n\t\tWebIdentityToken: token,\n\t\tRoleSessionName: 'my_session'\n\t});\n\n\tconst client = new STSClient({ region: 'us-east-1' });\n\tconsole.log(await client.send(command));\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Script Preprocessor Template\nDESCRIPTION: This TypeScript code defines a template for a script preprocessor function. It receives a `wm_trigger` object containing trigger metadata and other trigger-specific arguments. The preprocessor returns an object whose keys define the parameters passed to the `main` function of the script. Dependencies: Requires TypeScript, specifically within a Windmill environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/43_preprocessors/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function preprocessor(  \n  /*  \n  * Replace this comment with the parameters received from the trigger.  \n  * Examples: `body_key_1`, `body_key_2` for Webhook/HTTP, `msg` for WebSocket, etc.  \n  */\n\n  // The trigger metadata\n  wm_trigger: {\n    kind: 'http' | 'email' | 'webhook' | 'websocket' | 'kafka' | 'nats' | 'postgres' | 'sqs' | 'mqtt' | 'gcp',\n    http?: {\n      route: string // The route path, e.g. \"/users/:id\"\n      path: string  // The actual path called, e.g. \"/users/123\"\n      method: string\n      params: Record<string, string> // path parameters\n      query: Record<string, string>  // query parameters\n      headers: Record<string, string>\n    },\n    websocket?: {\n      url: string // The websocket url\n    },\n    kafka?: {\n      brokers: string[]\n      topic: string\n      group_id: string\n    },\n    nats?: {\n      servers: string[]\n      subject: string\n      headers?: Record<string, string[]>\n      status?: number\n      description?: string\n      length: number\n    },\n    sqs?: {\n      queue_url: string,\n      message_id?: string,\n      receipt_handle?: string,\n      attributes: Record<string, string>,\n      message_attributes?: Record<string, {\n        string_value?: string,\n        data_type: string\n      }>\n    },\n    mqtt?: {\n      topic: string,\n      retain: boolean,\n      pkid: number,\n      qos: number,\n      v5?: {\n        payload_format_indicator?: number,\n        topic_alias?: number,\n        response_topic?: string,\n        correlation_data?: Array<number>,\n        user_properties?:  Array<[string, string]>,\n        subscription_identifiers?: Array<number>,\n        content_type?: string\n      }\n    },\n    gcp?: {\n      message_id: string,\n      subscription: string,\n      ordering_key?: string,\n      attributes?: Record<string, string>,\n      delivery_type: \"push\" | \"pull\",\n      headers?: Record<string, string>,\n      publish_time?: string,\n    }\n  }\n) {\n  return {\n    // return the args to be passed to the runnable\n  }\n}\n\nexport async function main(/* main args */) {\n  // your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Column Order in Table Display Using Python\nDESCRIPTION: This Python snippet demonstrates how to enforce column ordering in a rich table display by returning a list whose first element is a list of column names, followed by dictionaries representing the rows. This format ensures Windmill renders the table with columns in the specified order. The function takes no parameters and returns a list of mixed types (a list of strings and dictionaries).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Dict\n\ndef main() -> List[Dict[str, str]]:\n\n    pokemon_data = [\n        [\"Pokemon name\", \"Type\", \"Main strength\"],\n\n        {\"Pokemon name\": \"Pikachu\", \"Type\": \"Electric\", \"Main strength\": \"Speed\"},\n        {\"Pokemon name\": \"Charizard\", \"Type\": \"Fire/Flying\", \"Main strength\": \"Attack\"},\n        {\"Pokemon name\": \"Bulbasaur\", \"Type\": \"Grass/Poison\", \"Main strength\": \"Defense\"},\n        {\"Pokemon name\": \"Squirtle\", \"Type\": \"Water\", \"Main strength\": \"Defense\"},\n        {\"Pokemon name\": \"Jigglypuff\", \"Type\": \"Normal/Fairy\", \"Main strength\": \"HP\"},\n    ]\n\n    return pokemon_data\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Stack\nDESCRIPTION: This command starts the docker-compose stack in detached mode. It uses the `docker-compose.yml` file to define and run the services, including Kafka, Zookeeper, and Windmill workers.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-19-service-script-kafka/index.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation Links with DocCard in MDX/JSX\nDESCRIPTION: This snippet demonstrates the usage of the custom DocCard component within an MDX file to create a styled card linking to another document or section. It requires the DocCard component to be imported. The component takes `title`, `description`, and `href` props to define the card's content and link destination.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/7_plans_details/index.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Pricing page\"\n\t\tdescription=\"Explore our plans and estimate a cost.\"\n\t\thref=\"/pricing\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flow with wmill - Bash\nDESCRIPTION: This command creates a new flow locally using the `wmill flow bootstrap` command. It takes the desired path for the flow as a required argument and optional arguments for summary and description. The command generates a new flow file at the specified path.  Dependencies: `wmill` CLI tool.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/flow.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwmill flow bootstrap [--summary <summary>] [--description <description>] <path>\n```\n\n----------------------------------------\n\nTITLE: Authenticating to private npm registry with token URL\nDESCRIPTION: This URL format shows how to incorporate an authentication token into an npm registry URL for accessing private npm packages in scripts run within Windmill, compatible with Bun and other environments supporting registry URLs with tokens.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/14_dependencies_in_typescript/index.mdx#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://registry.npmjs.org/:_authToken=npm_bKZp1kOKzWsNPUvx2LpyUzIJqi2uaw23eqw\n```\n\n----------------------------------------\n\nTITLE: Extracting Question from Discord Interaction Payload using TypeScript\nDESCRIPTION: This concise TypeScript function extracts the user's question text from a Discord interaction payload object. It navigates the nested structure of the interaction data (`interaction.data.options[0].value`) to find the question. If the question value is not found at the expected path, it returns a default string 'No question asked'.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-06-05-discord-bot/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(interaction: any) {\n\treturn interaction?.data?.options?.[0]?.value ?? 'No question asked';\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Git Sync URL Format with Service Principal\nDESCRIPTION: Defines the URL structure for configuring Windmill Git sync with an Azure DevOps repository using token-based authentication via a Service Principal. Replace `<path_to_the_azure_resource>` with the path to the Windmill 'azure' resource containing the Service Principal credentials (client_id, client_secret, tenant_id). Replace `<organization>`, `<project>`, and `<repository>` with the specific Azure DevOps details. The `AZURE_DEVOPS_TOKEN()` function dynamically fetches the required token from the specified Windmill resource.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/11_git_sync/index.mdx#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhttps://AZURE_DEVOPS_TOKEN(<path_to_the_azure_resource>)@dev.azure.com/<organization>/<project>/_git/<repository>\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Elements for Component Grouping Demonstrations in React JSX\nDESCRIPTION: These JSX snippets insert video elements showcasing various features related to grouping components, such as defining component groups, saving groups, and combining groups with styling. The videos autoplay and include controls, styled with Tailwind CSS classes for borders, rounding, and dark mode compatibility. They serve as visual tutorials for users to understand grouping concepts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/5_components_groups.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tautoPlay\n\tcontrols\n\tid=\"main-video\"\n\tsrc=\"/videos/group_of_components.mp4\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tautoPlay\n\tcontrols\n\tsrc=\"/videos/save_component_group.mp4\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tautoPlay\n\tcontrols\n\tsrc=\"/videos/group_of_components_with_style.mp4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Downloading JSON Data as a File in Windmill Apps\nDESCRIPTION: This JavaScript function demonstrates how to download regular JSON data as a file in a browser by leveraging the same download mechanism but with a different filename. It creates a temporary link element to trigger the download.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/11_download_files.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to download the data as a file\nfunction downloadDataAsFile(dataUrl, fileName) {\n  // Create an anchor element\n  const anchor = document.createElement('a');\n\n  // Set the href to the data URL\n  anchor.href = dataUrl;\n\n  // Set the download attribute to the desired file name\n  anchor.download = fileName;\n\n  // Append the anchor to the body (required for Firefox)\n  document.body.appendChild(anchor);\n\n  // Trigger the download by simulating a click on the anchor\n  anchor.click();\n\n  // Remove the anchor from the body\n  document.body.removeChild(anchor);\n}\n\n// Call the function with your data URL and a file name\ndownloadDataAsFile(result, 'selected_row.md');\n```\n\n----------------------------------------\n\nTITLE: Ansible Windmill Script Quickstart\nDESCRIPTION: Provides a DocCard for writing Windmill scripts with Ansible, featuring the icon, description, and link to Ansible-specific tutorials to help users automate via Windmill using Ansible.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { SiAnsible } from 'react-icons/si';\n\n// Card linking to Ansible scripting tutorials using Windmill automation capabilities\n```\n\n----------------------------------------\n\nTITLE: Function to Add a New Card to Cards Array in React with JavaScript\nDESCRIPTION: Defines an addCard function in the List component scope that creates a copy of the existing cards array using the spread operator, constructs a new card object with a title from newCard state and a unique id based on current cards length, pushes the new card to the copied array, updates the cards state with the new array, and clears the newCard input state. This ensures a new card is appended and UI re-renders accordingly.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst addCard = () => {\n   const tempArr = [...cards];\n    const card = {title: newCard, id: cards.length};\n    tempArr.push(card);\n    setCards(tempArr);\n    setNewCard('');\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Queue State in Postgresql Using SKIP LOCKED - SQL\nDESCRIPTION: This SQL statement atomically updates a job in the queue by marking it as running, recording the start timestamp, updating the last ping time, and clearing any suspension. It utilizes a subquery with 'FOR UPDATE SKIP LOCKED' to safely select the next available non-running job according to priority, schedule, and tag, making it robust for distributed worker polling without race conditions. The snippet requires a properly indexed 'queue' table in Postgresql and expects client code to pass tag filters via $1 (an array). It returns all fields from the updated job for worker consumption. The query assumes certain schema fields (e.g., 'running', 'started_at', 'priority', 'scheduled_for', etc.) and may require adaptation if table structures differ.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-22-why-is-windmill-the-fastest-workflow-engine/index.mdx#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE queue\nSET running = true\n, started_at = coalesce(started_at, now())\n, last_ping = now()\n, suspend_until = null\nWHERE id = (\n    SELECT id\n    FROM queue\n    WHERE running = false AND scheduled_for <= now() AND tag = ANY($1)\n    ORDER BY priority DESC NULLS LAST, scheduled_for, created_at\n    FOR UPDATE SKIP LOCKED\n    LIMIT 1\n)\nRETURNING *\n```\n\n----------------------------------------\n\nTITLE: Accessing Vault secrets via OIDC/JWT authentication in TypeScript (Deno)\nDESCRIPTION: This TypeScript (Deno) async function demonstrates how to use Windmill to get an OIDC JWT, perform JWT login to Hashicorp Vault using fetch, and then fetch a secret from the Vault KV store. Dependencies are windmill-client and native fetch. Access parameters include the Vault API endpoint, JWT object from Windmill, Vault role, and secret path. Output is the parsed JSON value of the secret from Vault. Requires Vault server running locally, Vault JWT auth enabled, and Deno runtime.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from 'windmill-client';\n\nexport async function main() {\n\tconst jwt = await wmill.getIdToken('MY_AUDIENCE');\n\tconst res = await fetch('http://127.0.0.1:8200/v1/auth/jwt/login', {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({ jwt, role: 'myproject-production' })\n\t});\n\tconst token = (await res.json()).auth.client_token;\n\n\tconst password = await fetch('http://127.0.0.1:8200/v1/secret/data/production/foo', {\n\t\theaders: { 'X-Vault-Token': token }\n\t});\n\n\treturn password.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Bash Script for Docker Execution\nDESCRIPTION: This bash script demonstrates a basic usage of the docker run command to execute an alpine container and output \"Hello\" followed by a value assigned to the msg variable (defaults to \"world\"). It uses the `--rm` flag to automatically remove the container after it exits. The script serves as a fundamental example for running docker commands within a Windmill workflow.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/7_docker/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmsg=\"${1:-world}\"\n\ndocker run --rm alpine /bin/echo \"Hello $msg\"\n```\n\n----------------------------------------\n\nTITLE: Installing react-markdown package with Bash\nDESCRIPTION: Provides shell commands for setting up a new React project and installing the react-markdown package. It assumes Node.js is installed and demonstrates how to create-react-app and add the required dependency for Markdown rendering in React.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-11-27-using-markdown-in-react/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app markdown-app\ncd markdown-app\nnpm install react-markdown\n```\n\n----------------------------------------\n\nTITLE: Setting WM_STATE_PATH in Bun\nDESCRIPTION: This snippet sets the WM_STATE_PATH environment variable in Bun, used for the getState and setState functions. It constructs a path based on the script's URL.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/run_locally.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nlet fullUrl = import.meta.url;\nlet pathS = fullUrl.substring(8, fullUrl.length - 3).split('/');\nconst path = pathS.slice(pathS.length - 3, pathS.length).join('/');\nBun.env.set('WM_STATE_PATH', path);\n```\n\n----------------------------------------\n\nTITLE: Using the Standard Library in Nu Scripts (Python Syntax Shown)\nDESCRIPTION: This snippet demonstrates importing the standard library in a Nu script. Windmill recognizes the 'use std' statement, provisioning the required modules automatically. No external requirements file is necessary; standard libraries are available by default. Input is a Nu script; output is an environment with the standard modules imported. Code shown in Python syntax due to documentation representation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/6_imports/index.mdx#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nuse std\n```\n\n----------------------------------------\n\nTITLE: Testing STARTTLS with OpenSSL\nDESCRIPTION: This bash command uses `openssl s_client` to connect to an SMTP server on localhost at port 2525, initiate the STARTTLS handshake, and establish a TLS-encrypted connection. This enables testing of the STARTTLS implementation by allowing sending of commands after the connection has been upgraded to TLS.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-10-07-email-triggers/index.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_client -starttls smtp -connect localhost:2525\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt for Full Web Crawler Access\nDESCRIPTION: This configuration allows all web crawlers (User-agent: *) to access all parts of the website by not specifying any disallowed paths. The empty Disallow directive effectively grants permission for complete crawling.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/static/robots.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in JavaScript\nDESCRIPTION: Imports the 'DocCard' React component from the specified relative path for use within this documentation page or UI. This is required for rendering or referencing documentation cards in the Windmill docs site built with React framework.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/1_scheduling/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Adding Testing/Debugging Code to Deno/Bun Script\nDESCRIPTION: This snippet demonstrates how to add testing and debugging code to a Deno or Bun script, which will only be executed when the script is run directly (not imported as a module).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/run_locally.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nif (import.meta.main) {\n\t// Add your testing & debugging code here.\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Table Data - TypeScript\nDESCRIPTION: This snippet demonstrates how to return data in a table format where each row is an object, which is displayed as a table in Windmill.  It expects an array of objects with key-value pairs, and the first row can optionally be an array of strings to enforce column order. The output is displayed as a table in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nreturn [ { \"foo\": 42, \"bar\": 38 }, { \"foo\": 8, \"bar\": 12 } ]\n```\n\n----------------------------------------\n\nTITLE: Define Arguments and Insert Data using BigQuery\nDESCRIPTION: Defines script arguments using the BigQuery-specific `@name` syntax, including required types (e.g., `string`, `integer`, `string[]`) and optional default values. Shows a sample `INSERT` statement referencing a table using backticks and using these named arguments. Also illustrates how to bind the script to a specific database resource using a comment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- @name1 (string) = default arg\n-- @name2 (integer)\n-- @name3 (string[])\nINSERT INTO `demodb.demo` VALUES (@name1, @name2, @name3)\n```\n\n----------------------------------------\n\nTITLE: Expected Output for WAL Level Verification in Postgres\nDESCRIPTION: Displays the expected result of the SQL command `SHOW wal_level;`. Confirms that the current WAL level is `logical`, verifying correct replication configuration.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/46_postgres_triggers/index.mdx#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n wal_level\n-----------\n logical\n```\n\n----------------------------------------\n\nTITLE: Defining the Root OpenFlow Object Structure in TypeScript\nDESCRIPTION: Defines the top-level `OpenFlow` type in TypeScript. This structure includes optional metadata fields like `summary` and `description`, a `schema` (typically JSON Schema) to validate flow inputs, and the core `value` field of type `FlowValue` which encapsulates the actual flow logic.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/openflow/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype OpenFlow = {\n\t// an optional one-liner summary-line\n\tsummary?: string;\n\n\t// optional description\n\tdescription?: string;\n\n\t// the actual logic of the flow\n\tvalue: FlowValue;\n\n\t// the input spec of the flow as defined by a json schema\n\tschema?: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling STARTTLS Handshake in Rust\nDESCRIPTION: This Rust function `handle_starttls` handles the TLS handshake for SMTP. It uses the `native-tls` and `tokio-native-tls` crates. It first generates a self-signed certificate (ideally, this should be loaded and not generated on each call). It then creates a `TlsAcceptor` and uses it to accept the TLS connection on the provided `TcpStream`. Upon successful handshake, it calls `handle_session` to handle the now-encrypted SMTP session.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-10-07-email-triggers/index.mdx#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse native_tls::{Identity, TlsAcceptor};\nuse tokio_native_tls::{TlsAcceptor as TokioTlsAcceptor, TlsStream};\n\nasync fn handle_starttls(\n    stream: &mut TcpStream,\n) -> anyhow::Result<()> {\n    // ideally the certificate should only be loaded from here and not generated each time\n    let (pem_certificate, pem_private_key) = generate_certificate()?;\n    let identity = Identity::from_pkcs8(&pem_certificate, &pem_private_key)?;\n    let tls_acceptor = TlsAcceptor::builder(identity).build()?;\n    let tls_acceptor = TokioTlsAcceptor::from(tls_acceptor);\n\n    match tls_acceptor.accept(stream).await {\n        Ok(stream) => {\n            // we can now handle the normal SMTP session\n            handle_session(stream).await?;\n        }\n        Err(e) => {\n            tracing::error!(\"Error establishing SMTP TLS connection: {:?}\", e);\n        }\n    }; \n}\n```\n\n----------------------------------------\n\nTITLE: Starting Nushell in PowerShell\nDESCRIPTION: This snippet initiates Nushell by typing 'nu' in a PowerShell session. You must have Nushell successfully installed for this to work. The command opens a new Nushell session; there is no output unless Nushell fails to start.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/17_windows_workers/index.mdx#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nnu\n\n```\n\n----------------------------------------\n\nTITLE: Create Custom Button Cell Renderer (JavaScript)\nDESCRIPTION: This snippet defines a custom AgGrid cell renderer class (`BtnCellRenderer`) to display an interactive button in a column. The button's click handler demonstrates how to access row data (`this.params.data`) and interact with the Windmill application's state (`state.logs`) to store information when clicked.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/aggrid_table/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass BtnCellRenderer {\n\tconstructor() {}\n\tinit(params) {\n\t\tthis.params = params;\n\t\tthis.eGui = document.createElement('button');\n\t\tthis.eGui.innerHTML = 'Push me!';\n\t\tthis.btnClickedHandler = this.btnClickedHandler.bind(this);\n\t\tthis.eGui.addEventListener('click', this.btnClickedHandler);\n\t}\n\tgetGui() {\n\t\treturn this.eGui;\n\t}\n\tdestroy() {\n\t\tthis.eGui.removeEventListener('click', this.btnClickedHandler);\n\t}\n}\nBtnCellRenderer.prototype.btnClickedHandler = function () {\n\tif (!state.logs) {\n\t\tstate.logs = [];\n\t}\n\tstate.logs.push({\n\t\trowDataAfterChange: JSON.stringify(this.params.data)\n\t});\n};\n\nreturn [\n\t{ field: 'name' },\n\t{ field: 'age' },\n\t{\n\t\theaderName: 'Send row data to state',\n\t\tcellRenderer: BtnCellRenderer\n\t}\n];\n```\n\n----------------------------------------\n\nTITLE: Filtering Service Logs by Worker Group and Term (Query)\nDESCRIPTION: This snippet provides an example of a structured query for the Windmill service logs search feature. It utilizes Tantivy QueryParser syntax to filter logs from the 'default' worker group (`worker_group:default`) and then searches within those logs for the term 'ping'. This allows users to narrow down log results based on specific criteria.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/36_service_logs/index.mdx#_snippet_0\n\nLANGUAGE: Query\nCODE:\n```\nworker_group:default ping\n```\n\n----------------------------------------\n\nTITLE: Defining a Worker Group in Docker Compose (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define a worker group within a Docker Compose file. It specifies the worker's image, resource constraints, and the `WORKER_GROUP` environment variable to assign the worker to a specific group. The `replicas` setting defines the number of worker instances.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-21-workers-group/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwindmill_worker_highmem:\n  image: ghcr.io/windmill-labs/windmill-ee:main\n  pull_policy: always\n  deploy:\n    replicas: 2\n    resources:\n      limits:\n        cpus: '1'\n        memory: 4096M\n  restart: unless-stopped\n  environment:\n    - DATABASE_URL=${DATABASE_URL}\n    - MODE=worker\n    - WORKER_GROUP=highmem\n```\n\n----------------------------------------\n\nTITLE: Initializing Rich Table Display in Python\nDESCRIPTION: This snippet defines a Python function that returns a list of dictionaries containing Pokémon data, which Windmill automatically renders as an interactive rich table. It demonstrates the default behavior of returning an array of objects for automatic rich table rendering in Python. No external dependencies are explicitly required besides Python's standard typing module. The function expects no input parameters and outputs a list of dictionaries with string keys and values, representing Pokémon attributes.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Dict\n\ndef main() -> List[Dict[str, str]]:\n\n    pokemon_data = [\n        {\"Pokemon name\": \"Pikachu\", \"Type\": \"Electric\", \"Main strength\": \"Speed\"},\n        {\"Pokemon name\": \"Charizard\", \"Type\": \"Fire/Flying\", \"Main strength\": \"Attack\"},\n        {\"Pokemon name\": \"Bulbasaur\", \"Type\": \"Grass/Poison\", \"Main strength\": \"Defense\"},\n        {\"Pokemon name\": \"Squirtle\", \"Type\": \"Water\", \"Main strength\": \"Defense\"},\n        {\"Pokemon name\": \"Jigglypuff\", \"Type\": \"Normal/Fairy\", \"Main strength\": \"HP\"},\n    ]\n\n    return pokemon_data\n```\n\n----------------------------------------\n\nTITLE: Generating Resume URLs for Approval Prompt (Deno)\nDESCRIPTION: This TypeScript (Deno) code snippet shows how to generate resume URLs using `wmill.getResumeUrls()` for creating an approval prompt in Windmill. It imports the `windmill-client` library from npm and returns an object containing the resume URL, default arguments, and enums.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport * as wmill from \"npm:windmill-client@^1.158.2\"\n\nexport async function main() {\n    const resumeUrls = await wmill.getResumeUrls(\"approver1\")\n\n    return {\n        resume: resumeUrls['resume'],\n        default_args: {}, // optional\n        enums: {} // optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Windmill Worker ECS Task Definition and Configuration\nDESCRIPTION: Describes the ECS task configuration for deploying a native Windmill worker container on EC2, including environment variables for mode and worker group, resource allocations, and volume mount for cache. It uses specific environment variables to distinguish native workers.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/aws_ecs.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"containerDefinitions\": [\n\t\t{\n\t\t\t\"name\": \"windmill-native-worker\",\n\t\t\t\"image\": \"ghcr.io/windmill-labs/windmill-ee:<LATEST_RELEASE>\",\n\t\t\t\"cpu\": 2048,\n\t\t\t\"memory\": 3072,\n\t\t\t\"portMappings\": [],\n\t\t\t\"essential\": true,\n\t\t\t\"environment\": [\n\t\t\t\t{\"name\": \"DATABASE_URL\", \"value\": \"postgres://postgres:<DB_PASSWORD>@<DB_HOSTNAME>:5432/windmill?sslmode=disable\"},\n\t\t\t\t{\"name\": \"JSON_FMT\", \"value\": \"true\"},\n\t\t\t\t{\"name\": \"WORKER_GROUP\", \"value\": \"native\"},\n\t\t\t\t{\"name\": \"MODE\", \"value\": \"worker\"}\n\t\t\t],\n\t\t\t\"mountPoints\": [],\n\t\t\t\"volumesFrom\": [],\n\t\t\t\"logConfiguration\": {\n\t\t\t\t\"logDriver\": \"awslogs\",\n\t\t\t\t\"options\": {\n\t\t\t\t\t\"awslogs-group\": \"/ecs/windmill-native-worker\",\n\t\t\t\t\t\"awslogs-region\": \"us-east-2\",\n\t\t\t\t\t\"awslogs-stream-prefix\": \"ecs\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"family\": \"windmill-native-worker\",\n\t\"executionRoleArn\": \"<ECS_TASK_EXECUTION_ROLE_ARN>\",\n\t\"networkMode\": \"awsvpc\",\n\t\"volumes\": [\n\t\t{\n\t\t\t\"name\": \"worker_dependency_cache\",\n\t\t\t\"host\": {\n\t\t\t\t\"sourcePath\": \"/tmp/windmill/cache\"\n\t\t\t}\n\t\t}\n\t],\n\t\"placementConstraints\": [],\n\t\"requiresCompatibilities\": [\"EC2\"],\n\t\"cpu\": \"2048\",\n\t\"memory\": \"3072\",\n\t\"runtimePlatform\": {\n\t\t\"cpuArchitecture\": \"X86_64\",\n\t\t\"operatingSystemFamily\": \"LINUX\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fibonacci Function for Benchmark Testing in Python\nDESCRIPTION: A recursive implementation of the Fibonacci sequence calculator used for benchmarking the workflow engines. This function calculates the nth Fibonacci number using a naive recursive approach, serving as the workload for both lightweight (n=10) and long-running (n=33) tasks.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef fibo(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fibo(n - 1) + fibo(n - 2)\n```\n\n----------------------------------------\n\nTITLE: Python Code Editing Prompt Template\nDESCRIPTION: This template shows how to format a prompt for GPT-4 to edit existing Python code. It includes placeholders for the original code, resource types, and user instructions, providing context for the AI to make appropriate modifications.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nHere's my python3 code:\n```python\n\\{code\\}\n```\n\nAdditional information:\nWe have to export a \"main\" function and specify the parameter types but do not call it.\nYou have access to the following resource types.\nIf you need them, you have to define the TypedDict exactly as specified\n(class name has to be IN LOWERCASE) and add them as parameters: {resourceTypes}\nOnly use the ones you need. If the TypedDict name conflicts with the imported object,\nrename the imported object NOT THE TYPE.\n\nMy instructions: \\{description\\}\n```\n\n----------------------------------------\n\nTITLE: Syncing Local Projects with Windmill CLI\nDESCRIPTION: This command updates the local `wmill-lock.yaml` file automatically when pulling changes from Windmill. This optimization avoids re-triggering lockfile computations for files that have not changed since the last sync operation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/changelog/2024-06-10-track-relative-imports/index.md#_snippet_0\n\nLANGUAGE: Command Line\nCODE:\n```\nwmill sync pull\n```\n\n----------------------------------------\n\nTITLE: Setting Textarea Value via Frontend Script\nDESCRIPTION: This snippet shows how to programmatically set the value of a Textarea component using the `setValue` function within a Windmill App's frontend script. It takes the ID of the component and the desired value as input. The value must match the type of the component, in this case a string.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/textarea.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n`setValue(id: 'a', value: 17)`\n```\n\n----------------------------------------\n\nTITLE: Defining Supabase Resource Type in Windmill TypeScript Script\nDESCRIPTION: Defines the TypeScript type `Supabase` which represents a Windmill resource containing the Supabase URL and API key. It demonstrates how to type the `auth` input parameter in a Windmill script's `main` function to securely access Supabase credentials stored as a resource. Users should check the Windmill Deno package for the latest resource types.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/supabase.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// To get the latest supported resource types,\n// check for the latest version of the Windmill Deno\n// package at https://deno.land/x/windmill/mod.ts\ntype Supabase = {\n\turl: string;\n\tkey: string;\n};\n\nexport async function main(auth: Supabase) {\n\t// Function contents\n}\n```\n\n----------------------------------------\n\nTITLE: Redshift-compatible Insert Query\nDESCRIPTION: Provides a Redshift-compatible version of the PostgreSQL argument syntax (`$N`) and an `INSERT` statement. It highlights the removal of the `RETURNING *` clause, which is not supported in Redshift. Arguments still follow the `$N` format with optional names and defaults.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- $1 name1 = default arg\n-- $2 name2\nINSERT INTO demo VALUES ($1::TEXT, $2::INT)\n```\n\n----------------------------------------\n\nTITLE: Returning S3 File - TypeScript\nDESCRIPTION: This snippet shows how to return an S3 file. It requires a path to the file, which will then be displayed as a downloadable file and a bucket explorer in Windmill's UI. It relies on a connection to an S3 storage.  The Windmill backend provides a download and preview functionality.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"s3\": \"path/to/file\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Component Values\nDESCRIPTION: Demonstrates how to manually set values for components.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsetValue(id: string, value: any)\n```\n\n----------------------------------------\n\nTITLE: Defining Main Function in TypeScript\nDESCRIPTION: This snippet shows the required signature for the 'main' function entrypoint in a Windmill script written in TypeScript. The parameters are defined with type annotations, allowing Windmill to infer the script's input requirements and generate a corresponding UI. The function is defined as async, suitable for operations involving promises.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/script_editor/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function main(param1: string, param2: { nested: string }) {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Markdown (Alternative Key) - TypeScript\nDESCRIPTION: This snippet demonstrates how to return data as Markdown, using the \"md\" key, which is an alternative to \"markdown\". It expects a string value containing the Markdown content. The Markdown will be rendered in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"md\": \"## Hello World\\nNice to meet you\" }\n```\n\n----------------------------------------\n\nTITLE: Supabase Login (JavaScript)\nDESCRIPTION: This inline script handles user login using Supabase in a Windmill frontend. It initializes the Supabase client and saves the settings to the local state. Upon successful login, it creates a new Supabase client with the access token and saves it to the state; otherwise, it stores the error message.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-16-supabase-authentication/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Inline script: Login\nstate.supabase = {\n\t// You'll need to insert the URL and the public API key of your Supabase project here\n\turl: '',\n\tpublicKey: '',\n\tclient: state?.supabase?.client ?? undefined,\n\terror: undefined\n};\n\nconst sb = await import('https://esm.sh/@supabase/supabase-js@2.10.0');\nconst client = sb.createClient(state.supabase.url, state.supabase.publicKey);\nconst { data, error, error_description } = await client.auth.signInWithPassword({\n\t// In frontend scripts you can directly reference components by their IDs\n\temail: b.result,\n\tpassword: c.result\n});\nif (data?.session?.access_token) {\n\tstate.supabase.client = sb.createClient(state.supabase.url, state.supabase.publicKey, {\n\t\tglobal: { headers: { Authorization: `bearer ${data.session.access_token}` } }\n\t});\n} else {\n\tstate.supabase.client = undefined;\n\tstate.supabase.error = error_description ?? error?.message ?? error ?? undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Windmill with Docker Compose (Bash)\nDESCRIPTION: These two bash commands restart the Windmill application when managed by Docker Compose. `docker compose down` stops the services, and `docker compose up -d` starts them again in detached mode, applying changes made to the `.env` file.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/18_instance_settings/index.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Returning Table Data with Column Order - TypeScript\nDESCRIPTION: This snippet demonstrates how to return data in a table format, with an explicitly defined column order.  It expects an array where the first element is an array defining the column headers and the following elements are objects, each representing a row of data. The output is displayed as a table in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nreturn [ [\"foo\", \"bar\" ], { \"foo\": 42, \"bar\": 38 }, { \"foo\": 8, \"bar\": 12 } ]\n```\n\n----------------------------------------\n\nTITLE: Defining Snowflake Resource Configuration Table in Markdown\nDESCRIPTION: This markdown snippet outlines the required Snowflake resource properties for integration with Windmill. It specifies the property names, data types, descriptions, default values, required status, and locations in the Snowflake Console where each value can be found. This structured table documents all the credentials and configuration parameters needed to create a Snowflake resource within Windmill, facilitating seamless authentication and access for workflows.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/snowflake.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n| Property           | Type   | Description                           | Default | Required | Where to Find                                                   |\n| ------------------ | ------ | ------------------------------------- | ------- | -------- | --------------------------------------------------------------- |\n| account_identifier | string | Snowflake account identifier          |         | true     | Snowflake Console > Account > Account Info > Account Identifier |\n| private_key        | string | Snowflake private key                 |         | true     | Snowflake Console > Account > Security > RSA Key Pair           |\n| public_key         | string | Snowflake public key                  |         | true     | Snowflake Console > Account > Security > RSA Key Pair           |\n| warehouse          | string | Snowflake warehouse name              |         | true     | Snowflake Console > Warehouses                                  |\n| username           | string | Snowflake username for authentication |         | true     | Snowflake Console > Users and Security > Users                  |\n| database           | string | Snowflake database name               |         | true     | Snowflake Console > Databases                                   |\n| schema             | string | Snowflake schema name                 |         | true     | Snowflake Console > Databases > [Your Database] > Schemas       |\n| role               | string | Snowflake role for access control     |         | true     | Snowflake Console > Users and Security > Roles                  |\n```\n\n----------------------------------------\n\nTITLE: Styling Videos Demonstrating Component and Global Styling\nDESCRIPTION: A series of HTML <video> tags embedding videos that illustrate various styling techniques such as component-level styling, global styling, dynamic styling, and full height adjustments within the Windmill Labs platform. These videos serve as visual tutorials for users to understand styling workflows.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/4_app_styling.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tautoPlay\n\tcontrols\n\tsrc=\"/videos/app_styling.mp4\"\n></video>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tcontrols\n\tsrc=\"/videos/styling_component.mp4\"\n></video>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tcontrols\n\tsrc=\"/videos/dynamic_styling.mp4\"\n></video>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tcontrols\n\tsrc=\"/videos/global_styling.mp4\"\n></video>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tcontrols\n\tsrc=\"/videos/copy_style_global_css.mp4\"\n></video>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tcontrols\n\tsrc=\"/videos/full_height.mp4\"\n></video>\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Salesforce via Sequin using SQL in Windmill\nDESCRIPTION: This SQL INSERT statement demonstrates writing data back to an external API (Salesforce) through Sequin's proxy within a Windmill script. It inserts a new contact into the `salesforce.contact` table using parameterized values (`$1`, `$2`, `$3`) for `first_name`, `last_name`, and `email`. Sequin intercepts this database operation and applies it to the Salesforce API first before committing to the database.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/sequin/index.mdx#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into salesforce.contact (first_name, last_name, email)\nvalues ($1::TEXT, $2::TEXT, $3::TEXT);\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Analytics for Pie Chart (TypeScript)\nDESCRIPTION: This TypeScript script calculates the number of orders containing one item, two items, or more than two items, for use in a PieChart component. It takes an array of `orders` as input, iterates through each order to count the number of product IDs, and categorizes the orders accordingly. The function returns an object containing `data` (an array of counts) and `labels` for the PieChart.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(orders) {\n\tconst count = { one: 0, two: 0, more: 0 };\n\n\torders.forEach((o) => {\n\t\tconst { length } = o.product_ids;\n\t\tcount[length === 1 ? 'one' : length === 2 ? 'two' : 'more']++;\n\t});\n\n\treturn {\n\t\tdata: [count.one, count.two, count.more],\n\t\tlabels: ['1 item', '2 items', 'More than 2 items']\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Issues from Supabase in TypeScript (Deno)\nDESCRIPTION: A TypeScript script using Supabase client to query and return issues data. This background runnable connects to Supabase using authentication credentials and fetches all records from the issues table.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-25-issue-tracker/index.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\ntype Supabase = {\n\turl: string;\n\tkey: string;\n};\n\nexport async function main(auth: Supabase) {\n\tconst client = createClient(auth.url, auth.key);\n\tconst result = await client.from('issues').select();\n\treturn result.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Card Creation Form in React with JavaScript\nDESCRIPTION: This snippet adds a simple UI form to the List component, allowing users to input a new card title and submit it via a button. Initially, the form includes only an input and a button element without functionality. Styling to improve the button and input appearance is applied in CSS separately. The form container uses the \"add-card-form\" class. The snippet shows how to render the input and button elements in JSX within a React component.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"add-card-form\">\n  <input type=\"text\" /><button>Add card</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Returning Ordered Rows in TypeScript for Rich Table Display\nDESCRIPTION: This TypeScript asynchronous function returns an array combining a column order array and an array of Pokémon data objects. The first array element defines the column order for the rich table; subsequent elements represent rows with Pokémon attributes. Windmill uses this structure to render an ordered table. The function returns a promise resolving to an array containing string arrays and objects with typed string properties representing the Pokémon data.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(): Promise<Array<{ \"Pokemon name\": string, \"Type\": string, \"Main strength\": string } | string[]>> {\n  const pokemonData = [\n    { \"Pokemon name\": \"Pikachu\", \"Type\": \"Electric\", \"Main strength\": \"Speed\" },\n    { \"Pokemon name\": \"Charizard\", \"Type\": \"Fire/Flying\", \"Main strength\": \"Attack\" },\n    { \"Pokemon name\": \"Bulbasaur\", \"Type\": \"Grass/Poison\", \"Main strength\": \"Defense\" },\n    { \"Pokemon name\": \"Squirtle\", \"Type\": \"Water\", \"Main strength\": \"Defense\" },\n    { \"Pokemon name\": \"Jigglypuff\", \"Type\": \"Normal/Fairy\", \"Main strength\": \"HP\" }\n  ];\n\n  const columns: string[] = [\"Pokemon name\", \"Main strength\", \"Type\"];\n\n  return [columns, ...pokemonData];\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Markdown - TypeScript\nDESCRIPTION: This snippet demonstrates how to return data as Markdown. It expects a string value containing the Markdown content, associated with the \"markdown\" or \"md\" key. The Markdown will be rendered in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"markdown\": \"## Hello World\\nNice to meet you\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Inventory and Files for Ansible\nDESCRIPTION: This snippet shows how to define the inventory and file resources to be used by the Ansible script within the Windmill environment.  It uses specific resource types such as `ansible_inventory` and links to the file resources. These definitions are located within the Windmill specific first YAML document, which is not visible to Ansible itself.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ninventory:\n  - resource_type: ansible_inventory\n    # You can pin an inventory to this script:\n    # resource: u/user/your_resource\n\n# File resources will be written in the relative \\`target\\` location before\n# running the playbook\nfiles:\n  - resource: u/user/fabulous_jinja_template\n    target:  ./config_template.j2\n```\n\n----------------------------------------\n\nTITLE: Using DocCard Components for Documentation Links in JSX\nDESCRIPTION: This JSX snippet renders two DocCard components side-by-side within a responsive grid layout. Each DocCard displays a clickable card referencing a different section of the app editor documentation. Required props include color for styling, title for the card header, description text, and href for navigation. This snippet depends on React and a CSS grid system, assumed to be available in the project.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/select.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"App editor Documentation\"\n\t\tdescription=\"The app editor is a low-code builder to create custom User Interfaces with a mix of drag-and-drop and code.\"\n\t\thref=\"/docs/apps/app_editor\"\n\t/>\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"Apps quickstart\"\n\t\tdescription=\"Learn how to build your first app in a matter of minutes.\"\n\t\thref=\"/docs/getting_started/apps_quickstart\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Products in Cart\nDESCRIPTION: This inline script is designed to display the products currently in the cart. It accesses the cart from the application's state. It maps over the `state.cart` array, which contains product IDs. For each ID, it tries to find the corresponding product object within `j.result`. The `j.result` variable likely contains the product data. The output is an array of products to be displayed.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nreturn state.cart ? state.cart.map((id) => j.result.find((x) => x.id === id)) : [];\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in JSX\nDESCRIPTION: Imports the DocCard component from the site's components directory, which is used later in the document to display a card linking to a tutorial about service script patterns using Kafka.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/script_editor/perpetual_scripts.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Importing dependencies in TypeScript with Bun runtime\nDESCRIPTION: Example showing how to import dependencies in TypeScript using Bun runtime in Windmill. Demonstrates both unpinned imports and version-specific imports that Windmill will automatically resolve.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/14_dependencies_in_typescript/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// unpinned import\nimport { toWords } from 'number-to-words';\n\n// versioned import\nimport * as wmill from 'windmill-client@1.147.3';\n```\n\n----------------------------------------\n\nTITLE: Transforming Orders Data for Table Component (JavaScript)\nDESCRIPTION: This JavaScript transformer takes an array of order objects and transforms it for use in a Table component. It extracts the `total_price`, `country`, `city`, `address`, and `id` fields from each order object. It then returns a new array of objects, where each object contains the order's `id`, `total_price`, and a combined `address` string. This transformation simplifies the data displayed in the Table.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function main(orders: any[]) {\n\treturn orders?.map((order) => {\n\t\tconst { total_price, country, city, address, id } = order;\n\t\treturn { id, total_price, address: `${address}, ${city}, ${country}` };\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Python Documentation\nDESCRIPTION: This command uses `pdoc` to generate documentation from Python code, then uses `sed` to modify the title, and finally moves the generated Markdown file. It creates a new python.md file to the src/pages directory, using the contents of wmill python project.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/README.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\npdoc --template template --output-dir /tmp wmill --force\\\n && sed -i -e \"/^title: /s/title: .*/title: Python Client/\" /tmp/wmill/client.md\\\n && mv /tmp/wmill/client.md src/pages/python.md\n```\n\n----------------------------------------\n\nTITLE: Initializing and Pushing Local Workspace to Git Repository\nDESCRIPTION: A sequence of Git commands to initialize a new repository in the local workspace directory, link it to a remote repository (e.g., on GitHub), add all files, create an initial commit, and push the changes to the 'main' branch. Assumes Git is installed and the local directory contains the content pulled using `wmill sync pull`.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/11_git_sync/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit remote add origin https://github.com/username/reponame.git\ngit add .\ngit commit -m 'Initial commit'\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Generating a GPG Key Pair\nDESCRIPTION: Uses the `gpg` command-line tool to initiate the interactive process for generating a new GPG key pair (public and private keys). This key pair is required if you need to sign Git commits pushed by Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/11_git_sync/index.mdx#_snippet_2\n\nLANGUAGE: gpg\nCODE:\n```\ngpg --full-generate-key\n```\n\n----------------------------------------\n\nTITLE: Getting AWS credentials with OIDC in TypeScript (Bun)\nDESCRIPTION: This TypeScript function, adapted for Bun, shows how to use Windmill to fetch an OIDC token and assume an AWS role using the AWS SDK for JavaScript (Node.js version) and windmill-client. Required dependencies are @aws-sdk/client-sts and windmill-client. Key inputs are the AWS role ARN and region, and the OIDC audience. The function outputs AWS temporary credentials, which can be used with any AWS boto3-compatible API. Requires Bun runtime with Node.js-style imports.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { STSClient } from '@aws-sdk/client-sts';\nimport { AssumeRoleWithWebIdentityCommand } from '@aws-sdk/client-sts';\nimport * as wmill from 'windmill-client';\n\nexport async function main() {\n\tconst token = await wmill.getIdToken('sts.amazonaws.com');\n\n\tconst command = new AssumeRoleWithWebIdentityCommand({\n\t\tRoleArn: 'arn:aws:iam::000000000000:role/my_aws_role',\n\t\tWebIdentityToken: token,\n\t\tRoleSessionName: 'my_session'\n\t});\n\n\tconst client = new STSClient({ region: 'us-east-1' });\n\tconsole.log(await client.send(command));\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Supabase Resource Connection\nDESCRIPTION: Instructions for connecting to a Supabase PostgreSQL database using Windmill's wizard. The process involves selecting a Supabase organization, choosing a database, and providing the database password.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- database resource_path\n```\n\n----------------------------------------\n\nTITLE: Defining SMTP Configuration Environment Variables\nDESCRIPTION: This snippet lists the required environment variables (`SMTP_FROM`, `SMTP_HOST`, `SMTP_PORT`, `SMTP_USERNAME`, `SMTP_PASSWORD`) for configuring SMTP in the Windmill `.env` file. These settings enable email sending for user invitations and critical alerts in self-hosted instances.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/18_instance_settings/index.mdx#_snippet_0\n\nLANGUAGE: Environment Variables\nCODE:\n```\nSMTP_FROM=windmill@domain.com\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USERNAME=email@domain.com\nSMTP_PASSWORD=app_password\n```\n\n----------------------------------------\n\nTITLE: Returning PDF - TypeScript\nDESCRIPTION: This snippet demonstrates how to return a PDF file.  It expects the PDF content to be encoded in base64, associated with the \"pdf\" key or directly as the return value if only the PDF data is needed.  The file will be displayed in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"pdf\": { \"content\": base64Pdf } }\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Script for Docker Execution\nDESCRIPTION: This bash script demonstrates how to run Docker commands within a Kubernetes environment using the kubectl command. It retrieves the service account token and certificate, sets up a local kubeconfig, and then uses kubectl run to execute a container based on docker/whalesay:latest. The script will execute `cowsay $msg`. It assumes the necessary permissions and utilizes a local Kubernetes cluster.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/7_docker/index.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# shellcheck shell=bash\n# Bash script that calls docker as a client to the host daemon\n# See documentation: https://www.windmill.dev/docs/advanced/docker\nmsg=\"${1:-world}\"\n\nIMAGE=\"docker/whalesay:latest\"\nCOMMAND=(sh -c \"cowsay $msg\")\n\nAPISERVER=https://kubernetes.default.svc\nSERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount\nNAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)\nTOKEN=$(cat ${SERVICEACCOUNT}/token)\nCACERT=${SERVICEACCOUNT}/ca.crt\n\nKUBECONFIG_TMP_DIR=\"$(mktemp -d)\"\nexport KUBECONFIG=\"${KUBECONFIG_TMP_DIR}/kubeconfig\"\n\ntrap \"rm -rfv ${KUBECONFIG_TMP_DIR}\" EXIT\n\nkubectl config set-cluster local --server=\"${APISERVER}\" --certificate-authority=\"${CACERT}\"\nkubectl config set-credentials local --token=\"${TOKEN}\"\nkubectl config set-context local --cluster=local --user=local --namespace=\"${NAMESPACE}\"\nkubectl config use-context local\n\nkubectl run task -it --rm --restart=Never --image=\"$IMAGE\" -- \"${COMMAND[@]}\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with JSX\nDESCRIPTION: Embeds a YouTube video about Perpetual Scripts using an iframe with styling for responsive display and appropriate attributes for security and accessibility.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/script_editor/perpetual_scripts.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n\tstyle={{ aspectRatio: '16/9' }}\n\tsrc=\"https://www.youtube.com/embed/5uw3JWiIFp0\"\n\ttitle=\"Perpetual Scripts\"\n\tframeBorder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\tallowFullScreen\n\tclassName=\"border-2 rounded-lg object-cover w-full dark:border-gray-800\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Generating or updating script metadata with `wmill script generate-metadata`\nDESCRIPTION: Uses the `wmill script generate-metadata` command to read edited script files and update their schema and lockfile accordingly, inferring structure from content. It can target individual scripts and allows exclusion or inclusion through configuration. Dependencies can be sourced from `package.json` or `requirements.txt` for accuracy. This process helps maintain consistent schema and dependency locks.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/script.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwmill script generate-metadata [<path>] [--lock-only] [--schema-only]\n```\n\n----------------------------------------\n\nTITLE: Transforming Issue Data for Table Display in TypeScript (Deno)\nDESCRIPTION: A TypeScript function that processes issue data to be displayed in a table component. It maps the raw issues data to extract only the relevant properties needed for the table display.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-25-issue-tracker/index.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(issues: any[]) {\n\treturn issues?.map((issue) => {\n\t\treturn {\n\t\t\tid: issue.id,\n\t\t\tstatus: issue.status,\n\t\t\tseverity: issue.severity,\n\t\t\tcreated_at: issue.created_at,\n\t\t\tsummary: issue.summary,\n\t\t\tdescription: issue.description\n\t\t};\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slack App Manifest for OAuth Integration YAML\nDESCRIPTION: This YAML snippet defines the Slack app manifest for integrating a Slack bot with Windmill. It specifies app display information, enabled features such as app home and slash commands, OAuth redirect URLs and granted scopes for user and bot, and app settings including interactivity. Key parameters include setting the callback URLs, OAuth scopes needed for chat and commands, and UI features. This manifest must be customized by replacing placeholder instance URLs with actual Windmill URLs before creating the Slack app. It is a prerequisite for enabling Slack OAuth within Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/2_setup_oauth/index.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndisplay_information:\n  name: Windmill\n  description: windmill.dev slackbot and oauth integration\n  background_color: '#3b82f6'\n  long_description: The Windmill app allows to use command to run jobs inside Windmill as well as receiving message as the Windmill app. The Windmill app pairs a Slack workspace with a Windmill workspace. It must be installed from within the settings of a Windmill workspace.\nfeatures:\n  app_home:\n    home_tab_enabled: true\n    messages_tab_enabled: true\n    messages_tab_read_only_enabled: true\n  bot_user:\n    display_name: Windmill\n    always_online: true\n  slash_commands:\n    - command: /windmill\n      url: <YOUR INSTANCE URL>/api/oauth/slack_command\n      description: Trigger the script set in your workspace settings for Slack\n      usage_hint: the text that will be passed to the script\n      should_escape: false\noauth_config:\n  redirect_urls:\n    - <YOUR INSTANCE URL>\n  scopes:\n    user:\n      - chat:write\n      - admin\n      - channels:write\n    bot:\n      - chat:write\n      - chat:write.public\n      - channels:join\n      - files:write\n      - commands\nsettings:\n  interactivity:\n    is_enabled: true\n    request_url: <YOUR INSTANCE URL>/api/slack\n  org_deploy_enabled: false\n  socket_mode_enabled: false\n  token_rotation_enabled: false\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping, Editing, and Syncing Windmill Flows Locally with Bash\nDESCRIPTION: This bash snippet demonstrates the process of creating a new Windmill flow, editing its definition, and synchronizing it with a workspace using Windmill CLI. It requires Windmill CLI and may optionally use the VS Code extension for editing. Key parameters are flow directory paths. The input is typically a folder structure and flow definition (flow.yaml); the output is an updated flow in the remote workspace.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/index.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# optional - create a new script using the CLI (can be done manually)\nwmill flow bootstrap f/my_space/groundbreaking_flow\n\n# edit the flow definition manually, or using the VSCode extension\n\n# push your changes to the Windmill workspace\nwmill sync push\n```\n\n----------------------------------------\n\nTITLE: Specifying File Permissions for SSH Key Files in Windmill Ansible Scripts Using YAML\nDESCRIPTION: This YAML snippet expands on writing an SSH key variable to a file by adding a file mode property '0600' to ensure secure permissions. This avoids common SSH errors caused by insecure key file permissions during playbook SSH authentication.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nfiles:\n  - variable: u/user/my_ssh_key\n    target:  ./ssh_key\n    mode: '0600'\n```\n\n----------------------------------------\n\nTITLE: Compiling gRPC .proto Files to Python Code Using protoc CLI\nDESCRIPTION: This bash command uses the protocol buffer compiler 'protoc' to generate Python source code from a .proto file, enabling use of the gRPC service definitions in Python applications. The generated Python files can be packaged and published to a private PyPI repository for dependency management within Windmill Python scripts. The command requires 'protoc' and Python protobuf plugin installed.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-22-query-grcp-service/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --python_out=./ ./helloworld.proto\n```\n\n----------------------------------------\n\nTITLE: Applying Labels GitHub Go Script\nDESCRIPTION: This Go script function sends a POST request to the GitHub REST API to add a list of specified labels to a given issue in a repository. It requires a GitHub personal access token, which is retrieved from a Windmill variable named 'g/all/gh_token'. It includes helper functions for making the HTTP request and formatting the labels into a JSON payload. The main function takes the repository full name (owner/repo), issue number, and a slice of strings representing the labels to apply.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-06-flow-triage-bot/index.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage inner\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\n\twmill \"github.com/windmill-labs/windmill-go-client\"\n)\n\nfunc postRequest(gh_token string, url string, payload string) error {\n\tbearer := \"token \" + gh_token\n\treq, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer([]byte(payload)))\n\treq.Header.Add(\"Accept\", \"application/vnd.github+json\")\n\treq.Header.Add(\"Authorization\", bearer)\n\n\tres, err := http.DefaultClient.Do(req)\n\n\tif err != nil {\n\t\treturn errors.New(fmt.Sprintf(\"request failed %s\", err))\n\t}\n\tif !(res.StatusCode >= 200 && res.StatusCode < 300) {\n\t\treturn errors.New(fmt.Sprintf(\"request failed %s at %s\", res.Status, url))\n\t}\n\tdefer res.Body.Close()\n\treturn nil\n}\n\nfunc Map(l []string, f func(string) string) []string {\n    lmapped := make([]string, len(l))\n    for i, v := range l {\n        lmapped[i] = f(v)\n    }\n    return lmapped\n}\n\nfunc addQuotes(s string) string{\n  return fmt.Sprintf(\"%q\", s)\n}\n\nfunc main(repo_fullname string, issueNumber int, labels []string) (interface{}, error) {\n\tURL := \"https://api.github.com/repos/\" + repo_fullname + \"/issues/\" + strconv.Itoa(issueNumber)\n\t// We're using the Windmill client to get the GitHub access token\n\tgh_token, _ := wmill.GetVariable(\"g/all/gh_token\")\n\n  if len(labels) == 0{\n    return nil, errors.New(\"list of labels can't be empty\")\n  }\n\n\tvar labelJson = fmt.Sprintf(`{\"labels\":[%s]}`, strings.Join(Map(labels,addQuotes)[:], \",\"))\n\terr := postRequest(gh_token, URL+\"/labels\", labelJson)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"The issue was tagged with %s\", labels)\n\n\treturn nil, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card in React/JSX\nDESCRIPTION: A JSX component that creates a documentation card linking to the benchmarks documentation page. The component takes properties for title, description, and href to create a navigable card element.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-22-why-is-windmill-the-fastest-workflow-engine/index.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Benchmarks\"\n\t\tdescription=\"Comparing performance of Airflow, Prefect, Temporal, Kestra and Windmill for 2 representative use cases.\"\n\t\thref=\"/docs/misc/benchmarks/competitors\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example Input for a Transformer Script (JavaScript/JSON)\nDESCRIPTION: Illustrates the structure of the `result` object passed as input to a transformer script. This object contains the output data from the preceding runnable, which the transformer can then process.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tdata: {\n\t\tname: 'John',\n\t\tage: 20\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Groups in Docker Compose (Windmill) - YAML\nDESCRIPTION: This YAML snippet configures a Windmill worker group named 'windmill_worker_highmem' using Docker Compose. It specifies the container image, ensures automatic image pulling, sets resource constraints (1 CPU, 4096MB RAM), and defines environment variables for database connectivity, operational mode, and group membership. Key parameters include 'WORKER_GROUP', 'DATABASE_URL', and 'MODE'. No special dependencies beyond Docker Compose and the referenced Windmill image are required. The snippet must be placed in your docker-compose.yml to spawn and auto-register a worker group; the worker will be visible and manageable via the Windmill UI. It expects the external environment variable DATABASE_URL to be defined. No explicit output is generated by the code itself, but the worker's execution and group registration will be reflected in the Windmill dashboard.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/9_worker_groups/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwindmill_worker_highmem:\n  image: ghcr.io/windmill-labs/windmill-ee:main\n  pull_policy: always\n  deploy:\n    replicas: 2\n    resources:\n      limits:\n        cpus: '1'\n        memory: 4096M\n  restart: unless-stopped\n  environment:\n    - DATABASE_URL=${DATABASE_URL}\n    - MODE=worker\n    - WORKER_GROUP=highmem\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping, Editing, and Syncing Windmill Scripts Locally with Bash\nDESCRIPTION: This bash snippet outlines the canonical workflow for creating, editing, updating metadata, and pushing a script to a Windmill workspace using Windmill CLI. Dependencies include Windmill CLI and a suitable development environment for the script's language. The key parameters are script paths, languages, and CLI options. Inputs may include manual edits to script and metadata files; the expected output is a synchronized, up-to-date script in the remote Windmill workspace.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/index.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# optional - create a new script using the CLI (can be done manually)\nwmill script bootstrap f/my_space/example_script python3\n\n# edit the script content manually, writing your python code within your IDE\n\n# edit the script metadata (required if you made edits to the dependencies or the main signature method)\nwmill script generate-metadata\n\n# optional - specify the path to the script adding f/my_space/example_script.py\nwmill script generate-metadata f/my_space/example_script.py\n\n# push your changes to the Windmill workspace\nwmill sync push\n```\n\n----------------------------------------\n\nTITLE: React Component for Rendering Task Duration Bar Chart in Normal Mode (JavaScript/React)\nDESCRIPTION: This React component visualizes the duration of 10 long-running tasks in normal mode using a bar chart. It depends on a component named TaskDurationBarChart, and displays data with specific labels and raw timing data. The chart is configured to not maintain the aspect ratio for better responsiveness.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"grid\">\n\t<TaskDurationBarChart\n\t\ttitle=\"10 long running tasks\"\n\t\txTitle=\"Duration (in seconds)\"\n\t\tlabels={[['Windmill', 'Normal']]}\n\t\trawData=[\n\t\t\t[\n\t\t\t\t[0.002, 0.048, 0.046, 0.048, 0.047, 0.048, 0.048, 0.047, 0.047, 0.05],\n\t\t\t\t[0.844, 0.799, 0.778, 0.77, 0.785, 0.77, 0.768, 0.771, 0.779, 0.768]\n\t\t\t]\n\t\t]\n\t\tmaintainAspectRatio={false}\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Writing File to S3 using Windmill Client (TypeScript Deno)\nDESCRIPTION: Demonstrates how to write content to an S3 or object storage file path using the `writeS3File` function from the Windmill TypeScript client (Deno). It takes an S3 path string as input and returns the S3Object reference. The content can be a string or a ReadableStream. Note the 'npm:' prefix for Deno imports.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/38_object_storage_in_windmill/index.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport * as wmill from 'npm:windmill-client@1.253.7';\nimport { S3Object } from 'npm:windmill-client@1.253.7';\n\nexport async function main(s3_file_path: string) {\n\tconst s3_file_output: S3Object = {\n\t\ts3: s3_file_path\n\t};\n\n\tconst file_content = 'Hello Windmill!';\n\t// file_content can be either a string or ReadableStream<Uint8Array>\n\tawait wmill.writeS3File(s3_file_output, file_content);\n\treturn s3_file_output;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Discord Approval Step with Windmill in TypeScript\nDESCRIPTION: This Windmill script creates a human approval step integrated with Discord. It formats the generated answer and source links into a message, fetches Windmill's resume/cancel URLs for the current flow instance, creates a Discord button linking to the resume URL, and sends or edits a Discord interaction reply containing the message and the approval button. Requires a Discord bot token and interaction data.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-06-05-discord-bot/index.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from 'https://deno.land/x/windmill@v1.85.0/mod.ts';\nimport { REST } from 'npm:@discordjs/rest@1.7.1';\nimport { API, ButtonStyle, MessageFlags } from 'npm:@discordjs/core@0.6.0';\nimport { ActionRowBuilder, ButtonBuilder } from 'npm:@discordjs/builders@1.6.3';\n\nexport async function main(\n\tquestion: string,\n\tanswer: string,\n\tlinks: string[],\n\ttoken: string,\n\tinteraction: any\n) {\n\tconst rest = new REST({ version: '10' }).setToken(token);\n\tconst api = new API(rest);\n\tconst { resume, cancel } = await wmill.getResumeUrls('Faton');\n\n\tconst confirmButton = new ButtonBuilder()\n\t\t.setLabel('Confirm Message')\n\t\t.setURL(resume)\n\t\t.setStyle(ButtonStyle.Link);\n\n\tconst row = new ActionRowBuilder<ButtonBuilder>().addComponents(confirmButton);\n\n\tawait api.interactions.editReply(interaction.application_id, interaction.token, {\n\t\tcontent: `## ${question}\\n\\n${answer}\\n## Sources:\\n${links.map((l) => `${l}\\n`).join('')}`,\n\t\tcomponents: [row.toJSON()],\n\t\tflags: MessageFlags.Ephemeral\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Topic Listener Perpetual Script in Python\nDESCRIPTION: This Python script acts as a perpetual Kafka topic listener using the `confluent_kafka` library and the `wmill` library for interacting with Windmill. It subscribes to a Kafka topic, polls for messages, and triggers a Windmill job (`u/admin/consume_message`) asynchronously for each received message, passing the message payload as an argument. The script is designed to be a perpetual script managed by Windmill, restarting automatically after a certain number of messages or a timeout.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-19-service-script-kafka/index.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom confluent_kafka import Consumer\nimport wmill\n\nMSG_CONSUMING_JOB_PATH = \"u/admin/consume_message\"\n\ndef main(kafka_topic: str = \"windmill-events\"):\n    client = Consumer({\n        'bootstrap.servers': 'kafka:9092',\n        'group.id': 'windmill',\n        'auto.offset.reset': 'earliest'\n    })\n\n    client.subscribe([kafka_topic])\n\n    # The counter i is here to force the perpetual script to exit (and be auto-restarted by\n    # Windmill) after some time, no matter how many messages it has processed. It's a good\n    # practice time-bound jobs in general, and it this particular case it will avoid hitting\n    # the maximum logs size\n    i = 0\n    while i < 10000:\n        i += 1\n        msg = client.poll(timeout=30) # timeout of 60 seconds\n\n        if msg is None:\n            # print(\"No message after timeout. Looping\")\n            continue\n        if msg.error():\n            raise Exception(\"Consumer error: {}\".format(msg.error()))\n\n        payload = msg.value().decode('utf-8')\n        print('Message received ({}). Scheduling consuming job'.format(payload))\n        wmill.run_script_async(hash_or_path=MSG_CONSUMING_JOB_PATH, args={\"msg\": payload})\n\n    client.close()\n    return\n```\n\n----------------------------------------\n\nTITLE: Linking Script Templates in Resource Descriptions (Markdown)\nDESCRIPTION: Demonstrates how to embed a Markdown link within a Windmill Resource description field to direct users to a script template. This allows users to quickly start using the resource by pre-populating a script.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[example script with this resource](/scripts/add?template=script/template/path)\n```\n\n----------------------------------------\n\nTITLE: Extracting Location from Address Using Geocoder in Python\nDESCRIPTION: This snippet uses the geocoder library (with the OpenStreetMap provider) to convert a given address string into latitude and longitude coordinates. It constructs a Python function that returns a map configuration compatible with Windmill’s mapping widgets, including marker details. The script requires the geocoder Python package and expects a string address as input, producing a dictionary on success (with map details) or an error message when the geocoding fails. Ensure network connectivity and valid address formatting for best results.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport geocoder\n\ndef main(address: str) -> dict:\n    # Use geocoder to get the latitude and longitude of the given address\n    g = geocoder.osm(address)  # Using OpenStreetMap provider\n    if g.ok:\n        return { \"map\": { \"lat\": 40, \"lon\": 0, \"zoom\": 3, \"markers\": [{\"lat\": g.lat, \"lon\": g.lng, \"title\": \"Home\", \"radius\": 5, \"color\": \"yellow\", \"strokeWidth\": 3, \"strokeColor\": \"Black\"}]}}\n    else:\n        return {'error': 'Unable to find the location'}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Content Type in Windmill Webhook Response\nDESCRIPTION: Example showing how to specify a custom content type for the response by including the 'windmill_content_type' property. This example changes the content type to text/csv for the response.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"windmill_content_type\": \"text/csv\",\n\t\"result\": \"Hello;World\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Table Rows\nDESCRIPTION: Shows how to programmatically select rows in table components.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsetSelectedIndex(id: string, index: number)\n```\n\n----------------------------------------\n\nTITLE: Using globalRecompute in Frontend Scripts\nDESCRIPTION: The globalRecompute() function can be called within frontend scripts to trigger recomputation of all components in a Windmill app. This is useful for creating custom recompute triggers that affect the entire app state.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/changelog/2025-03-04-global-recompute-helper-function/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nglobalRecompute()\n```\n\n----------------------------------------\n\nTITLE: React Component for Visualizing Long Running Tasks in Dedicated Worker Mode (JavaScript/React)\nDESCRIPTION: This React component visualizes the durations of 10 long-running tasks in dedicated worker mode, using a bar chart component with different labels. It emphasizes task timing differences between normal and dedicated worker modes, crucial for performance tuning.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"grid\">\n\t<TaskDurationBarChart\n\t\ttitle=\"10 long running tasks\"\n\t\txTitle=\"Duration (in seconds)\"\n\t\tlabels={[['Windmill', 'Dedicated Worker']]}\n\t\trawData=[\n\t\t\t[\n\t\t\t\t[0.023, 0.021, 0.025, 0.042, 0.051, 0.015, 0.047, 0.048, 0.051, 0.049],\n\t\t\t\t[0.722, 0.721, 0.721, 0.717, 0.731, 0.719, 0.719, 0.718, 0.717, 0.72]\n\t\t\t]\n\t\t]\n\t\tmaintainAspectRatio={false}\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Pinning Columns with Initial State in Table Component (TSX)\nDESCRIPTION: This snippet demonstrates how to pin columns to the left and right sides of the Windmill Table component using the `columnPinning` property in the `Initial State`. The \"name\" column is pinned to the left, and the \"id\" column is pinned to the right. TanStack table logic is used.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/table/index.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  \"columnPinning\": {\n    \"left\": [\n      \"name\"\n    ],\n    \"right\": [\n      \"id\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Values from Ansible Playbooks\nDESCRIPTION: This code demonstrates how to return a value from an Ansible playbook within the Windmill environment. The key part is writing a JSON object to `result.json` using the `copy` module, which the Windmill infrastructure will use as the return value for the script. The `delegate_to: localhost` directive ensures the result file is written by the control node.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n--- \ntasks:\n\n  [...]\n\n  - name: Write variable my_result to result.json\n    delegate_to: localhost\n    copy:\n      content: \"{{ my_result | to_json }}\"\n      dest: result.json\n```\n\n----------------------------------------\n\nTITLE: Importing and using List Component in App\nDESCRIPTION: This JavaScript snippet imports the `List` component and replaces the contents of the main `div` in the `App.js` file with the `<List>` component. It also imports the `App.css` file, which enables to customize the appearance of the app.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport List from './components/List';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL query with TypeScript (Deno)\nDESCRIPTION: This script uses Deno's environment with 'mysql2/promise' to connect to a MySQL database, execute a provided query, and return the results. It creates a connection pool with optional SSL, performs the query, handles errors, and ensures proper pool cleanup.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createPool as createMysqlPool } from \"npm:mysql2/promise\";\n\n// Define the MySQL resource type as specified\n type Mysql = {\n  ssl: boolean,\n  host: string,\n  port: number,\n  user: string,\n  database: string,\n  password: string\n}\n\n// The main function that executes a query on a MySQL database\nexport async function main(\n  mysqlResource: Mysql,\n  query: string,\n): Promise<any> {\n  // Adjust the SSL configuration based on the mysqlResource.ssl value\n  const sslConfig = mysqlResource.ssl ? { rejectUnauthorized: true } : false;\n\n  // Create a new connection pool using the provided MySQL resource\n  const pool = createMysqlPool({\n    host: mysqlResource.host,\n    user: mysqlResource.user,\n    database: mysqlResource.database,\n    password: mysqlResource.password,\n    port: mysqlResource.port,\n    // Use the adjusted SSL configuration\n    ssl: sslConfig,\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n\n  try {\n    // Get a connection from the pool and execute the query\n    const [rows] = await pool.query(query);\n    return rows;\n  } catch (error) {\n    // If an error occurs, throw it to be handled by the caller\n    throw new Error(`Failed to execute query: ${error}`);\n  } finally {\n    // Always close the pool after the operation is complete\n    await pool.end();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Mocked API in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use a mocked API file to simulate API interactions locally within a Windmill environment. It defines an interface for the mocked API structure, showcasing variables and resources.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/index.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport * as wmill from \"windmill-client@1.450.0-beta.2\"\n\nexport async function main(x: string) {\n  await Bun.write(\"./foo.json\", '{}')\n  process.env[\"WM_MOCKED_API_FILE\"] = \"./foo.json\"\n  await wmill.setVariable(\"foo\", \"foobar\")\n  await wmill.setResource({ \"we\": 42}, \"foo\")\n  console.log(await wmill.getResource(\"foo\"))\n  return x\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Kafka Topic using Python\nDESCRIPTION: This Python script creates a Kafka topic using the `confluent_kafka` library. It takes the topic name as an argument, connects to the Kafka broker, and creates the topic. It handles potential exceptions during topic creation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-19-service-script-kafka/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom confluent_kafka.admin import AdminClient, NewTopic\n\ndef main(topic_name:str = \"windmill-events\" ):\n    admin_client = AdminClient({'bootstrap.servers': 'kafka:9092'})\n\n    new_topic = NewTopic(topic_name)\n    topic_created = admin_client.create_topics([new_topic])\n\n    for topic, response in topic_created.items():\n        try:\n            response.result()\n            print(\"Topic {} created\".format(topic))\n        except Exception as e:\n            raise Exception(\"Failed to create topic {}: {}\".format(topic, e))\n```\n\n----------------------------------------\n\nTITLE: Defining Job Labels with JavaScript in Windmill\nDESCRIPTION: This snippet demonstrates how to assign static or dynamic labels to jobs via a JavaScript async function returning an object with 'wm_labels'. These labels facilitate filtering and categorization of jobs in the Windmill interface.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/5_monitor_past_and_future_runs/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function main() {\n  return {\n    \"wm_labels\": [\"showcase_labels\", \"another_label\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing all scripts in remote workspace using `wmill script`\nDESCRIPTION: Uses the `wmill script` command to list all scripts present in the remote Windmill workspace. This CLI command provides an overview of scripts available for management or execution, with no additional dependencies. It outputs a list of scripts without modifying any data.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/script.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwmill script\n```\n\n----------------------------------------\n\nTITLE: Listing Windmill Variables (Bash)\nDESCRIPTION: Executes the `wmill variable` command to list all variables currently stored in the configured remote Windmill workspace.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/variable.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwmill variable\n```\n\n----------------------------------------\n\nTITLE: Selecting Products for an Order (TypeScript)\nDESCRIPTION: This TypeScript script retrieves a list of products associated with a specific order. It takes the `selectedOrderIndex`, an array of `orders`, and an array of `products` as inputs. The function finds the product IDs associated with the order at the given index, retrieves the corresponding product details, and returns an array of product objects containing `title`, `description`, and `price`, assuming a `quantity` of 1 for each product. It returns an empty array if `orders` is null.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(selectedOrderIndex: number, orders: any[], products: any[]) {\n\tif (!orders) {\n\t\treturn [];\n\t}\n\n\treturn orders[selectedOrderIndex].product_ids.map((id) => {\n\t\tconst product = products?.find((p) => p.id === id);\n\n\t\tif (!product) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst { title, description, price } = product;\n\n\t\treturn { title, description, price, quantity: 1 };\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Windmill Python Client in a Script\nDESCRIPTION: Shows the standard prelude for a Python script utilizing the Windmill client library. It involves importing the `wmill` package and defining a `main` function where the script logic resides.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/python_client.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport wmill\n\ndef main(...):\n    # Your script code\n```\n\n----------------------------------------\n\nTITLE: Creating Windmill Database\nDESCRIPTION: This SQL command creates a database named `windmill` and assigns ownership to a non-superuser account named `nonsuperuser`. This is a prerequisite for running Windmill without requiring superuser privileges for database operations.  The `OWNER` clause specifies which user will own the database.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE windmill OWNER nonsuperuser\n```\n\n----------------------------------------\n\nTITLE: Submit Form Component Control Methods Documentation JavaScript\nDESCRIPTION: This snippet documents the frontend script functions available to control the Submit form component dynamically. It includes setValue to set the value of a component, validate to mark a specific form field as valid, validateAll to validate all form fields, and invalidate to invalidate a specific field with an error message. These functions require the component id and field key where applicable and allow programmatic control of form validation and value setting.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/submit_form.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**setValue**  \nThe [setValue](../3_app-runnable-panel.mdx#setvalue) function is meant to set or force the value of a component. This can be convenient in cases where connection is not the easiest pattern. Note that it's a bad idea to mix dynamic default value and setValue together.  \n`setValue(id: string, value: any)`  \n\n**validate**  \nMake a specific field of a form in a Validate state.  \n`validate(id: string, key: string)`  \n\n**validateAll**  \nMake all fields of a form in a Validate state.  \n`validateAll(id: string, key: string)`  \n\n**invalidate**  \nInvalidate a specific field of a form  \n`invalidate(id: string, key: string, error: string)`\n```\n\n----------------------------------------\n\nTITLE: Pinning Go Module Versions with Go Mod Comment (Go)\nDESCRIPTION: This Go snippet illustrates pinning a specific dependency version using a special comment that acts as an annotation for the build system. The '//require' comment sets the exact version for the module in the lockfile and build process. No go.mod editing is needed; Windmill parses and locks the version during deployment. Inputs are Go comments within the script; outputs are strict dependency versions at execution time.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/6_imports/index.mdx#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// Pin dependencies partially in go.mod with a comment starting with \"//require\":\n//require rsc.io/quote v1.5.1\n```\n\n----------------------------------------\n\nTITLE: Task Duration Data Table for Normal Mode (Markdown)\nDESCRIPTION: This table presents detailed lifecycle timestamps for 10 tasks in normal mode, indicating creation, start, and completion times in seconds. It provides precise timing data for performance analysis.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n|  **Task**   | **Created at** | **Started at** | **Completed at** |\n| :---------: | -------------: | -------------: | ---------------: |\n| **task_00** |          0.000 |          0.002 |            0.846 |\n| **task_01** |          0.858 |          0.906 |            1.705 |\n| **task_02** |          1.715 |          1.761 |            2.539 |\n| **task_03** |          2.548 |          2.595 |            3.365 |\n| **task_04** |          3.375 |          3.421 |            4.206 |\n| **task_05** |          4.215 |          4.263 |            5.033 |\n| **task_06** |          5.042 |          5.089 |            5.857 |\n| **task_07** |          5.866 |          5.913 |            6.684 |\n| **task_08** |          6.693 |          6.740 |            7.519 |\n| **task_09** |          7.529 |          7.579 |            8.347 |\n```\n\n----------------------------------------\n\nTITLE: Parsing OpenAI Completion Response in JavaScript\nDESCRIPTION: This function extracts contact details such as first name, last name, profession, company, and company activities from the formatted string returned by OpenAI completion. It relies on regex matching and trims whitespace for each field, allowing structured data extraction from natural language output.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-29-automatically-populate-crm/index.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function main(completion: string) {\n\tconst regex =\n\t\t/1. First Name: (.+)\\n2. Last Name: (.+)\\n3. Profession: (.+)\\n4. Company: (.+)\\n5. What the Company Does: (.+)/;\n\tconst matches = completion.match(regex);\n\tif (!matches) {\n\t\tthrow new Error('Invalid completion string');\n\t}\n\n\tconst [, value1, value2, value3, value4, value5] = matches;\n\tconst first_name = value1.trim();\n\tconst last_name = value2.trim();\n\tconst profession = value3.trim();\n\tconst company = value4.trim();\n\tconst what_company_does = value5.trim();\n\n\treturn { first_name, last_name, profession, company, what_company_does };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Script Arguments in Windmill\nDESCRIPTION: Shows the convention for defining and using input arguments in PostgreSQL scripts within Windmill. Arguments are declared using comments (`-- $N name = default_value`) and referenced in the SQL statement using positional parameters (`$N`). This allows parameterization of SQL queries executed by Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- $1 firstName = John\n-- $2 lastName = Doe\ninsert into users (first_name, last_name) values ($1, $2);\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate and Empty Strings in TypeScript\nDESCRIPTION: This TypeScript function (step 'ak' in the workflow) takes up to four optional string inputs (presumably Google search result titles). It filters these inputs to remove any strings that are empty (after trimming whitespace) or are duplicates of earlier strings in the list. The function returns a new array containing only the unique, non-empty strings, intended to clean up the search results before further processing.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-29-automatically-populate-crm/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// import * as wmill from \"https://deno.land/x/windmill@v1.83.1/mod.ts\"\n\nexport async function main(r1?: string, r2?: string, r3?: string, r4?: string) {\n\t// Assign empty strings to undefined inputs\n\tconst inputs = [r1, r2, r3, r4].map((input) => input ?? '');\n\n\tconst results = inputs.filter((result, index, array) => {\n\t\t// Remove empty values\n\t\tif (result.trim() === '') {\n\t\t\treturn false;\n\t\t}\n\t\t// Remove duplicates\n\t\treturn array.indexOf(result) === index;\n\t});\n\n\treturn results;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Component Value with setValue - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `setValue` function within Windmill frontend scripts to programmatically update the value of a component. The function takes the component's unique ID as the first parameter and the new value as the second.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/text_input.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetValue(id: 'a', value: 17)\n```\n\n----------------------------------------\n\nTITLE: Loading S3 Files Using Windmill TypeScript Client (Deno Runtime)\nDESCRIPTION: Similar to the Bun example, this snippet shows how to load full and streamed S3 files within a Windmill script using the TypeScript client in the Deno runtime environment. It imports the 'windmill-client' via npm alias with versioning, constructs an S3Object, and demonstrates reading file content both fully and lazily as a Blob. This pattern supports efficient file handling in scripts connected to S3 buckets configured in Windmill's workspace, abstracting away credential management.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/38_object_storage_in_windmill/index.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from 'npm:windmill-client@1.253.7';\nimport { S3Object } from 'npm:windmill-client@1.253.7';\n\nexport async function main() {\n\n\tconst example_file: S3Object = {\n\t\ts3: 'path/to/file'\n\t};\n\n\t// Load the entire file_content as a Uint8Array\n\tconst file_content = await wmill.loadS3File(example_file);\n\n\tconst decoder = new TextDecoder();\n\tconst file_content_str = decoder.decode(file_content);\n\tconsole.log(file_content_str);\n\n\t// Or load the file lazily as a Blob\n\tlet fileContentBlob = await wmill.loadS3FileStream(example_file);\n\tconsole.log(await fileContentBlob.text());\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Resume Approval - TypeScript\nDESCRIPTION: This snippet shows how to return a 'resume' approval, used for pausing and resuming a step in a flow. It includes URLs for \"resume\", \"cancel\", and \"approvalPage\". The UI will display buttons and link to the approval page.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"resume\": \"https://example.com\", \"cancel\": \"https://example.com\", \"approvalPage\": \"https://example.com\" }\n```\n\n----------------------------------------\n\nTITLE: Querying Airtable Data via Sequin using SQL in Windmill\nDESCRIPTION: This SQL query retrieves the `product_name` from the `airtable.product_inventory` table, which is synced by Sequin. It filters results based on the `type` column, using a parameterized input (`$1`) cast to TEXT, with a default value of \"Bag\" suggested in the comments. This allows querying Airtable data directly with SQL within a Windmill script connected to the Sequin Postgres resource.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/sequin/index.mdx#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- $1 type = Bag\n/*Assumes the default value Bag but can be changed from the menu.*/\nSELECT product_name from airtable.product_inventory WHERE type = $1::TEXT\n```\n\n----------------------------------------\n\nTITLE: Writing File to S3 using Windmill Client (Python)\nDESCRIPTION: Demonstrates how to write content to an S3 or object storage file path using the `wmill.write_s3_file` function from the Windmill Python client. It takes an S3 path string as input and returns the S3Object reference. The content can be bytes or a BufferedReader.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/38_object_storage_in_windmill/index.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\nfrom wmill import S3Object\n\ndef main(s3_file_path: str):\n    s3_file_output = S3Object(s3=s3_file_path)\n\n    file_content = b\"Hello Windmill!\"\n\t# file_content can be either bytes or a BufferedReader\n    file_content = wmill.write_s3_file(s3_file_output, file_content)\n    return s3_file_output\n```\n\n----------------------------------------\n\nTITLE: Getting AWS credentials with OIDC in TypeScript (Deno)\nDESCRIPTION: This TypeScript (Deno) function demonstrates how to use Windmill's OIDC integration to obtain temporary AWS credentials. It imports STSClient and AssumeRoleWithWebIdentityCommand from AWS SDK for JavaScript via npm, and the windmill-client package. The function requests a web identity token from Windmill, assumes an AWS role using this token, and prints the resulting credentials. Dependencies: npm:@aws-sdk/client-sts and npm:windmill-client. The required parameters are the AWS role ARN, region, and session name. Outputs are printed credentials with access key, secret, and session token. Requires Deno runtime with npm imports supported.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { STSClient } from 'npm:@aws-sdk/client-sts';\nimport { AssumeRoleWithWebIdentityCommand } from 'npm:@aws-sdk/client-sts';\nimport * as wmill from 'npm:windmill-client';\n\nexport async function main() {\n\tconst token = await wmill.getIdToken('sts.amazonaws.com');\n\n\tconst command = new AssumeRoleWithWebIdentityCommand({\n\t\tRoleArn: 'arn:aws:iam::000000000000:role/my_aws_role',\n\t\tWebIdentityToken: token,\n\t\tRoleSessionName: 'my_session'\n\t});\n\n\tconst client = new STSClient({ region: 'us-east-1' });\n\tconsole.log(await client.send(command));\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Documentation Content from GitHub Repository in TypeScript\nDESCRIPTION: TypeScript function that uses Octokit to fetch documentation files from a GitHub repository. The script extracts content from markdown files, transforms file paths to match Docusaurus URL structure, and returns an array of file contents with links.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-06-05-discord-bot/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Octokit } from 'https://cdn.skypack.dev/@octokit/rest';\n\ntype FileContent = { content: string; link: string };\n\ntype GitHub = {\n\ttoken: string;\n};\n\nexport async function main(\n\tgh_auth: Github,\n\towner: string,\n\trepo: string,\n\tpath?: string,\n\tref?: string,\n\tresult_format: 'github_object' | 'json' = 'github_object'\n): Promise<FileContent[]> {\n\tconst octokit = new Octokit({ auth: gh_auth.token });\n\n\tconst response = await octokit.request(\n\t\t`GET /repos/{owner}/{repo}/contents/${path}${ref ? '?ref=' + ref : ''}`,\n\t\t{\n\t\t\towner,\n\t\t\trepo,\n\t\t\theaders: {\n\t\t\t\t'X-GitHub-Api-Version': '2022-11-28',\n\t\t\t\tAccept: `application/${result_format === 'json' ? 'vnd.github+json' : 'vnd.github.object'}`\n\t\t\t}\n\t\t}\n\t);\n\n\tconst entries = response.data.entries;\n\n\tconst fileContents: FileContent[] = [];\n\n\tfor (const entry of entries) {\n\t\tif (entry.type === 'file') {\n\t\t\tconst isMarkdown = entry.name.endsWith('.md');\n\t\t\tconst isMDX = entry.name.endsWith('.mdx');\n\n\t\t\tif (isMarkdown || isMDX) {\n\t\t\t\tconst link = getDocusaurusPathFromGithub(entry.path);\n\n\t\t\t\tconst contentResponse = await octokit.request('GET /repos/{owner}/{repo}/contents/{path}', {\n\t\t\t\t\towner,\n\t\t\t\t\trepo,\n\t\t\t\t\tpath: entry.path,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'X-GitHub-Api-Version': '2022-11-28',\n\t\t\t\t\t\tAccept: 'application/vnd.github.v3.raw' // Request raw content of the file\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconst content = contentResponse.data as string;\n\n\t\t\t\tfileContents.push({\n\t\t\t\t\tcontent,\n\t\t\t\t\tlink\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (entry.type === 'dir') {\n\t\t\t// Recursively process directories\n\t\t\tconst dirContents = await main(gh_auth, owner, repo, entry.path, ref, result_format);\n\t\t\tfileContents.push(...dirContents);\n\t\t}\n\t}\n\n\treturn fileContents;\n}\n\nfunction getDocusaurusPathFromGithub(githubUrl: string): string {\n\tconst match = githubUrl.match(/docs\\/(.+\\.(md|mdx))/);\n\tif (match) {\n\t\tlet filePath = match[1];\n\t\tfilePath = filePath.replace(/\\.(md|mdx)$/, '');\n\n\t\t// Split the path into segments\n\t\tlet pathSegments = filePath.split('/');\n\n\t\t// Remove numbers and underscores from the beginning of each segment\n\t\tpathSegments = pathSegments.map((segment) => segment.replace(/^[0-9]*_/, ''));\n\n\t\t// Reconstruct the path\n\t\tfilePath = pathSegments.join('/');\n\n\t\treturn '/docs/' + filePath;\n\t}\n\treturn githubUrl;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windmill Flow for Sequential Fibonacci Calculations\nDESCRIPTION: YAML configuration for a Windmill flow that executes the Fibonacci script multiple times in sequence. The flow uses a For-Loop to run the script either 10 times with n=33 (for long-running tasks) or 40 times with n=10 (for lightweight tasks).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Fibonacci benchmark flow\ndescription: Flow running 10 (resp. 40) times Fibonacci of 33 (resp. 10)\nvalue:\n  modules:\n    - id: a\n      value:\n        type: forloopflow\n        modules:\n          - id: b\n            value:\n              path: u/admin/fibo_script\n              type: script\n              input_transforms:\n                n:\n                  type: static\n                  value: 33 # respectively 10\n        iterator:\n          expr: Array(10) # respectively 40\n          type: javascript\n        parallel: false\n        skip_failures: true\nschema:\n  '$schema': https://json-schema.org/draft/2020-12/schema\n  properties: {}\n  required: []\n  type: object\n```\n\n----------------------------------------\n\nTITLE: Basic Kafka Message Handler in TypeScript\nDESCRIPTION: An example asynchronous function that processes incoming Kafka messages passed as a string argument. The function is intended to perform operations based on the received message content, with no external dependencies specified.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/41_kafka_triggers/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(msg: string) {\n  // do something with the message\n}\n```\n\n----------------------------------------\n\nTITLE: Returned CSV Response with Custom Content Type\nDESCRIPTION: How the server returns data when the content type is set to text/csv. The Content-Type header is set to text/csv, and the result is returned as CSV data.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_10\n\nLANGUAGE: csv\nCODE:\n```\n\"Hello;World\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Arguments in Approval Steps (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to set default arguments for form fields in an approval step using `wmill.getResumeUrls()`. It returns an object containing `default_args` which specifies the default values for form fields named \"foo\" and \"bar\". This assumes the Form tab has a string field named \"foo\" and a checkbox named \"bar\".\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n//this assumes the Form tab has a string field named \"foo\" and a checkbox named \"bar\"\n\nimport * as wmill from 'npm:windmill-client@^1.158.2';\n\nexport async function main() {\n\t// if no argument is passed, if user is logged in, it will use the user's username\n\tconst resumeUrls = await wmill.getResumeUrls('approver1');\n\n\t// send the resumeUrls to the recipient or see Prompt section above\n\n\treturn {\n\t\tdefault_args: {\n\t\t\tfoo: 'foo',\n\t\t\tbar: true\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Structure (JSON)\nDESCRIPTION: This JSON snippet defines the structure of a resource file. It specifies keys such as `value`, `description`, `resource_type`, and `is_oauth`.  The `value` and `resource_type` fields are required. The file should be valid JSON and will be parsed by the `wmill` tool during resource upload.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/resource.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"value\": \"<value>\",\n    \"description\": \"<description>\",\n    \"resource_type\": \"<resource_type>\",\n    \"is_oauth\": \"<is_oauth>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DocCard Components in JSX\nDESCRIPTION: This code shows how to implement DocCard components in a grid layout to provide navigation to related documentation pages. The cards include titles, descriptions, and links.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/statistic_card.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"App editor Documentation\"\n\t\tdescription=\"The app editor is a low-code builder to create custom User Interfaces with a mix of drag-and-drop and code.\"\n\t\thref=\"/docs/apps/app_editor\"\n\t/>\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"Apps quickstart\"\n\t\tdescription=\"Learn how to build your first app in a matter of minutes.\"\n\t\thref=\"/docs/getting_started/apps_quickstart\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Writing File to S3 using Windmill Client (TypeScript Bun)\nDESCRIPTION: Demonstrates how to write content to an S3 or object storage file path using the `writeS3File` function from the Windmill TypeScript client (Bun). It takes an S3 path string as input and returns the S3Object reference. The content can be a string or a ReadableStream.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/38_object_storage_in_windmill/index.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport * as wmill from 'windmill-client';\nimport { S3Object } from 'windmill-client';\n\nexport async function main(s3_file_path: string) {\n\tconst s3_file_output: S3Object = {\n\t\ts3: s3_file_path\n\t};\n\n\tconst file_content = 'Hello Windmill!';\n\t// file_content can be either a string or ReadableStream<Uint8Array>\n\tawait wmill.writeS3File(s3_file_output, file_content);\n\treturn s3_file_output;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Preprocessor for Advanced SQS Message Handling (TypeScript)\nDESCRIPTION: This TypeScript snippet presents a preprocessor implementation for handling SQS messages.  It demonstrates the use of a `preprocessor` function that receives an SQS message, parses its content as a JSON object, and extracts relevant data. The `main` function then processes the transformed message data.  The preprocessor modifies the message and attached metadata.  The `wm_trigger` object provides context about the SQS trigger.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/48_sqs_triggers/index.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function preprocessor(\n    msg: string,\n    wm_trigger: {\n        kind: \"sqs\",\n        sqs: {\n            queue_url: string,\n            message_id?: string,\n            receipt_handle?: string,\n            attributes: Record<string, string>,\n            message_attributes?: Record<string, {\n                string_value?: string,\n                data_type: string\n            }>\n        }\n    },\n) {\n    // assuming the message is a JSON object\n    const data = JSON.parse(msg);\n    \n    return {\n        content: data.content,\n        metadata: {\n            sentAt: wm_trigger.sqs.attributes.SentTimestamp,\n            messageId: wm_trigger.sqs.message_id\n        }\n    };\n}\n\nexport async function main(content: string, metadata: { sentAt: string, messageId: string }) {\n    // Process transformed message data\n    console.log(`Processing message ${metadata.messageId} sent at ${metadata.sentAt}`);\n    console.log(\"Content:\", content);\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Player in MDX Using iframe (JSX)\nDESCRIPTION: This snippet embeds a YouTube video player within the MDX documentation using an iframe element with specified style, source URL, and accessibility properties. The player is styled with tailwindcss classes for border and rounding and is configured to allow various browser permissions such as autoplay and picture-in-picture mode. This approach provides an interactive media experience inline in the documentation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/23_instant_preview/index.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<iframe\n\tstyle={{ aspectRatio: '16/9' }}\n\tsrc=\"https://www.youtube.com/embed/aSOF6AzyDr8\"\n\ttitle=\"YouTube video player\"\n\tframeBorder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\tallowFullScreen\n\tclassName=\"border-2 rounded-lg object-cover w-full dark:border-gray-800\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Sending Emails via SMTP with STARTTLS in Python\nDESCRIPTION: This Python script sends an email to a local SMTP server on port 2525. It uses the `smtplib` library to establish a connection, initiate STARTTLS for secure communication, and send a MIME multipart email with plain text and HTML bodies. The `MIMEMultipart`, `MIMEText` objects are used to construct the email.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-10-07-email-triggers/index.mdx#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsmtp_server = \"localhost\"\nsmtp_port = 2525\nfrom_email = \"you@example.com\"\nto_email = \"to@example.com\"\nsubject = \"Test Email\"\nbody = \"This is a test email sent to my local SMTP server on port 2525.\"\nhtml_body = \"<html><body>This is a HTML</body></html>\"\n\n# Create the email\nmessage = MIMEMultipart()\nmessage[\"From\"] = from_email\nmessage[\"To\"] = to_email\nmessage[\"Subject\"] = subject\n\nmessage.attach(MIMEText(body, \"plain\"))\nmessage.attach(MIMEText(html_body, \"html\"))\n\n# to add an attachment:\n# file_path = \"myfile.txt\"\n# with open(file_path, \"rb\") as attachment:\n#     part = MIMEBase(\"application\", \"octet-stream\")\n#     part.set_payload(attachment.read())\n#     encoders.encode_base64(part)\n#     part.add_header(\n#         \"Content-Disposition\",\n#         f\"attachment; filename= {file_path}\",\n#     )\n#     message.attach(part)\n\n# Send the email\ntry:\n    with smtplib.SMTP(smtp_server, smtp_port) as server:\n        server.starttls()\n        server.sendmail(from_email, to_email, message.as_string())\n    print(\"Email sent successfully\")\nexcept Exception as e:\n    print(f\"Failed to send email: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Checking for New MongoDB Documents using a Trigger Script (TypeScript)\nDESCRIPTION: This TypeScript script connects to a MongoDB collection using the Atlas SDK. It retrieves the timestamp of the last check from Windmill's state using `getState`, queries MongoDB for documents inserted after that time (`ObjectId.createFromTime`), updates the state with the current time using `setState`, and returns the newly found documents. Requires `windmill-client` and `atlas_sdk` dependencies and MongoDB connection details (`auth`, `data_source`, `database`, `collection`).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/10_flow_trigger.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getState, type Resource, setState } from 'npm:windmill-client';\nimport { MongoClient, ObjectId } from 'https://deno.land/x/atlas_sdk/mod.ts';\n\ntype MongodbRest = {\n\tendpoint: string;\n\tapi_key: string;\n};\n\nexport async function main(\n\tauth: MongodbRest,\n\tdata_source: string,\n\tdatabase: string,\n\tcollection: string\n) {\n\tconst client = new MongoClient({\n\t\tendpoint: auth.endpoint,\n\t\tdataSource: data_source,\n\t\tauth: { apiKey: auth.api_key }\n\t});\n\tconst documents = client.database(database).collection(collection);\n\tconst lastCheck = (await getState()) || 0;\n\tawait setState(Date.now() / 1000);\n\tconst id = ObjectId.createFromTime(lastCheck);\n\treturn await documents.find({ _id: { $gt: id } });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling GitHub Webhook Payload Go Function\nDESCRIPTION: This is the main function signature and initial logic for the triage script. It demonstrates how the script receives parsed JSON data from the incoming GitHub webhook payload as structured Go arguments. It checks the 'action' field of the webhook payload and, if the issue was 'opened', prepares the basic return struct (`payload`) containing the repository full name and issue number, leaving the labels slice potentially empty for further processing (not shown in this snippet).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-06-flow-triage-bot/index.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc main(\n\tissue struct {\n\t\tNumber int `json:\"number\"`\n\t},\n\taction string,\n\tsender interface{},\n\trepository struct {\n\t\tFull_name string `json:\"full_name\"`\n\t}) (interface{}, error) {\n\n\tlabels := []string{}\n\n\tif action == \"opened\" {\n\t\treturn payload{Repo: repository.Full_name, LabelWith: labels, IssueNumber: issue.Number}, nil\n\t} else {\n\t\treturn \"\", nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Windmill Workspace via CLI - Bash\nDESCRIPTION: This Bash command enables users to add a new Windmill workspace to their local Windmill CLI configuration by specifying a workspace name, workspace ID, and URL. Requires Windmill CLI (wmill) to be installed and authenticated. Parameters are <workspace-name>, <workspace-id>, and <url>; replacing angle-bracketed placeholders with appropriate values. No special prerequisites beyond CLI authentication. Output is confirmation of workspace addition. The operation does not sync scripts or data—further CLI commands are required for sync functionality.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/9_deploy_gh_gl/index.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nwmill workspace add <workspace-name> <workspace-id> <url>\n```\n\n----------------------------------------\n\nTITLE: Installing Windmill CLI with npm\nDESCRIPTION: Installs the Windmill command-line interface globally using npm. Requires Node.js version 20 or higher to function properly.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g windmill-cli\n```\n\n----------------------------------------\n\nTITLE: Python dependency cache process with S3\nDESCRIPTION: Details the process for caching Python dependencies in Windmill, including initial install from PyPI, creating snapshots ('piptar'), and retrieving from S3 to improve startup speed. It mentions dependency separation by Python version for Enterprise customers.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/13_s3_cache/index.mdx#_snippet_1\n\nLANGUAGE: Narrative\nCODE:\n```\nThe first time a dependency is seen by a worker, if it is not cached locally, the worker searches in the S3 bucket for a tarball matching the dependency's name and version. If not found, it installs from PyPI, creates a tarball ('piptar'), and uploads it to S3. If found, it pulls the tarball and extracts it, avoiding reinstallation. For Enterprise Edition, tarballs are organized by Python version to ensure compatibility.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Boilerplate in Windmill with Bun Runtime\nDESCRIPTION: Default boilerplate code provided by Windmill when creating a TypeScript script with the Bun runtime. Shows example imports, type annotations, and a main function structure with various parameter types and default values.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/1_typescript_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// import { toWords } from \"number-to-words@1\"\nimport * as wmill from 'windmill-client@1.147.3';\n\n// fill the type, or use the +Resource type to get a type-safe reference to a resource\n// type Postgresql = object\n\nexport async function main(\n\ta: number,\n\tb: 'my' | 'enum',\n\t//c: Postgresql,\n\td = 'inferred type string from default arg',\n\te = { nested: 'object' }\n) {\n\t// let x = await wmill.getVariable('u/user/foo')\n\treturn { foo: a };\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Script Asynchronously with run_script_async (Python)\nDESCRIPTION: Method signature for `run_script_async`. This client method initiates the asynchronous execution of a Windmill script identified by its `hash`. It accepts optional arguments (`args`) and a scheduling delay (`scheduled_in_secs`), returning the job ID string.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/python_client.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef run_script_async(self, hash: str, args: Dict[str, Any] = {}, scheduled_in_secs: Optional[None] = None) -> str\n```\n\n----------------------------------------\n\nTITLE: Processing Arbitrary Payloads and Wrapping Body in Windmill Scripts - Python\nDESCRIPTION: Shows a Python script example where the main handler accepts arbitrary payloads wrapped in a single 'body' parameter of type Any. This pattern supports payloads not known in advance by forcing the payload to be wrapped in a JSON object under the 'body' key via the 'wrap_body=true' query argument. The function simply prints the contents of 'body'. This facilitates dealing with flexible or dynamic input payloads in Windmill webhooks.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef main(body: Any):\n\tprint(body)\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query Structure in TypeScript\nDESCRIPTION: A basic GraphQL query structure that accepts string, integer, and array parameters and returns corresponding fields. This serves as a boilerplate for GraphQL scripts in Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/6_rest_grapqhql_quickstart/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nquery($name1: String, $name2: Int, $name3: [String]) {\n\tdemo(example_name_1: $name1, example_name_2: $name2, example_name_3: $name3) {\n\t\texample_name_1,\n\t\texample_name_2,\n\t\texample_name_3\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication Token with Windmill CLI\nDESCRIPTION: Command syntax for creating an authentication token that can be used for API access. Supports both credential-based and session-based authentication.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/user.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwmill user create-token [--email <email:string> --password <password:string>]\n```\n\n----------------------------------------\n\nTITLE: Tabs Output Parameters\nDESCRIPTION: Specifies the output data exposed by the Tabs component, notably `selectedTabIndex`, which indicates the currently active tab's index. This enables other components or scripts to react to tab changes, essential for dynamic interactions and state management within the app.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/tabs.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name             |  Type  | Description                 |\n| ---------------- | :----: | --------------------------- |\n| selectedTabIndex | number | Number of the selected tab. |\n```\n\n----------------------------------------\n\nTITLE: Example OIDC JWT Token Payload - JSON\nDESCRIPTION: This JSON block provides an example payload of a decoded OIDC JWT token generated by Windmill. It illustrates claim fields such as iss (issuer), aud (audience), exp (expiration), iat (issued at), sub (subject), email, job_id, path, flow_path, groups, username, and workspace. The exact values will differ based on the job/script and workspace context. This is for reference and debugging purpose only; actual tokens should never be committed or exposed. No code execution; serves as a data schema illustration.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iss\": \"https://mycompany.com/api/oidc/\",\n  \"aud\": [\n    \"sts.amazonaws.com\"\n  ],\n  \"exp\": 1705660955,\n  \"iat\": 1705488155,\n  \"sub\": \"admin@windmill.dev::u/admin/ambitious_script::no_flow::foobar\",\n  \"email\": \"admin@windmill.dev\",\n  \"email_verified\": true,\n  \"job_id\": \"018d1704-00c1-05bb-4183-e56a8edeb823\",\n  \"path\": \"u/admin/ambitious_script\",\n  \"flow_path\": null,\n  \"groups\": [\n    \"all\"\n  ],\n  \"username\": \"admin\",\n  \"workspace\": \"foobar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Flow States in Python\nDESCRIPTION: Uses the Windmill SDK to set and retrieve flow states within Python scripts. Suitable for workflows needing persistent data across steps, with dependency on 'wmill==1.297.0'.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/16_architecture.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport wmill\\n#extra_requirements:\\n#wmill==1.297.0\\ndef main(x: str):\\n    wmill.set_flow_user_state(\"foobar\", 43)\\n    return wmill.get_flow_user_state(\"foobar\")\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Product to Cart\nDESCRIPTION: This frontend script adds the ID of a selected product to a cart stored in the application's state.  It checks if a cart already exists and appends the product ID accordingly. The `ao` variable likely refers to a table component, and `selectedRow.id` retrieves the selected product's ID.  This is a frontend script executed in the browser to update the application's local state.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nif (state.cart) {\n\tstate.cart = [ao.selectedRow.id, ...state.cart];\n} else {\n\tstate.cart = [ao.selectedRow.id];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing shared logic in TypeScript with explicit path\nDESCRIPTION: This verbose import example shows how to import specific functions and utilities from an external TypeScript script using a relative path, facilitating code reuse across scripts. It is compatible with local editors, Bun, and Deno environments.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/14_dependencies_in_typescript/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { main as foo, util } from './my_script_path.ts';\n```\n\n----------------------------------------\n\nTITLE: Defining AWS ECS Task for Windmill Multiplayer (JSON)\nDESCRIPTION: This JSON object outlines an AWS ECS Task Definition for the `windmill-multiplayer` service. It configures the container using the `ghcr.io/windmill-labs/windmill-multiplayer:latest` image, assigns resources (1 vCPU, 1.5 GiB memory), maps port 3002, uses `awsvpc` network mode, sets the `JSON_FMT` environment variable, and configures AWS CloudWatch logging. It requires EC2 compatibility on Linux/x86_64, and the `ECS_TASK_EXECUTION_ROLE_ARN` must be manually specified.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/aws_ecs.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"containerDefinitions\": [\n\t\t{\n\t\t\t\"name\": \"windmill-multiplayer\",\n\t\t\t\"image\": \"ghcr.io/windmill-labs/windmill-multiplayer:latest\",\n\t\t\t\"cpu\": 1024,\n\t\t\t\"memory\": 1536,\n\t\t\t\"portMappings\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"http\",\n\t\t\t\t\t\"containerPort\": 3002,\n\t\t\t\t\t\"hostPort\": 3002,\n\t\t\t\t\t\"protocol\": \"tcp\",\n\t\t\t\t\t\"appProtocol\": \"http\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"essential\": true,\n\t\t\t\"environment\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"JSON_FMT\",\n\t\t\t\t\t\"value\": \"true\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"mountPoints\": [],\n\t\t\t\"volumesFrom\": [],\n\t\t\t\"logConfiguration\": {\n\t\t\t\t\"logDriver\": \"awslogs\",\n\t\t\t\t\"options\": {\n\t\t\t\t\t\"awslogs-group\": \"/ecs/windmill-multiplayer\",\n\t\t\t\t\t\"awslogs-region\": \"us-east-2\",\n\t\t\t\t\t\"awslogs-stream-prefix\": \"ecs\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"family\": \"windmill-multiplayer\",\n\t\"executionRoleArn\": \"<ECS_TASK_EXECUTION_ROLE_ARN>\",\n\t\"networkMode\": \"awsvpc\",\n\t\"volumes\": [],\n\t\"placementConstraints\": [],\n\t\"requiresCompatibilities\": [\"EC2\"],\n\t\"cpu\": \"1024\",\n\t\"memory\": \"1536\",\n\t\"runtimePlatform\": {\n\t\t\"cpuArchitecture\": \"X86_64\",\n\t\t\"operatingSystemFamily\": \"LINUX\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for Issue Tracker in SQL\nDESCRIPTION: SQL script that creates the database schema for an issue tracker application. It sets up two tables: 'users' with roles and 'issues' with relationships to the users table. The script also enables row level security for both tables.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-25-issue-tracker/index.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- Create tables\nDROP TABLE IF EXISTS issues;\nDROP TABLE IF EXISTS users;\n\nCREATE TABLE users(\n\tid UUID NOT NULL DEFAULT uuid_generate_v4(),\n\tname TEXT DEFAULT NULL,\n\troles TEXT[] DEFAULT NULL,\n\tPRIMARY KEY(id)\n);\nALTER TABLE users ENABLE ROW LEVEL SECURITY;\n\nCREATE TABLE issues(\n\tid UUID NOT NULL DEFAULT uuid_generate_v4(),\n\tcreated_at TIMESTAMPTZ DEFAULT (now() AT TIME ZONE 'utc'),\n\tcreated_by UUID NOT NULL,\n\tsummary TEXT DEFAULT NULL,\n\tdescription TEXT DEFAULT NULL,\n\tseverity TEXT DEFAULT NULL,\n\tstatus TEXT DEFAULT 'PENDING',\n\tassigned_to UUID DEFAULT NULL,\n\tPRIMARY KEY(id),\n\tCONSTRAINT fk_created_by\n\t\tFOREIGN KEY(created_by)\n\t\tREFERENCES users(id),\n\tCONSTRAINT fk_assigned_to\n\t\tFOREIGN KEY(assigned_to)\n\t\tREFERENCES users(id)\n);\nALTER TABLE issues ENABLE ROW LEVEL SECURITY;\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in React TypeScript\nDESCRIPTION: This snippet imports the DocCard React component from a local source, which is used to display documentation cards with links, titles, descriptions, and colors within the Submit form documentation page.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/submit_form.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Adding a User with Windmill CLI\nDESCRIPTION: Command syntax for adding a new user to the Windmill server with optional parameters for password, admin privileges, company, and name.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/user.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwmill user add <email:string> [password:string] [--superadmin] [--company <company:string>] [--name <name:string>]\n```\n\n----------------------------------------\n\nTITLE: Restricting React Draggable Drag Handle to Card Header in JavaScript\nDESCRIPTION: Adjusts the Draggable component to limit the drag activation region to the element with the CSS class 'header'. This prevents interference with other interactive card sections like text editing. The nodeRef prop is preserved to correctly reference the draggable element, maintaining react-draggable compatibility and suppressing findDOMNode usage.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Draggable nodeRef={nodeRef} handle=\".header\">\n```\n\n----------------------------------------\n\nTITLE: Defining GPT-4 User Prompt for Python with Resource Types\nDESCRIPTION: An enhanced user prompt template for Python code generation that includes instructions for using available Windmill resource types. It specifies how to define and include necessary TypedDicts (in lowercase) as parameters and provides rules for handling potential naming conflicts with imported libraries, ensuring the AI generates code compatible with Windmill's resource injection mechanism.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nWrite a function in python called \"main\". The function should \\{description\\}.\nSpecify the parameter types. Do not call the main function.\n\nYou have access to the following resource types.\nIf you need them, you have to define the TypedDict exactly as specified\n(class name has to be IN LOWERCASE) and add them as parameters:\n\nclass aws(TypedDict):\n    region: str\n    awsAccessKeyId: str\n    awsSecretAccessKey: str\n\nclass supabase(TypedDict):\n    key: str\n    url: str\n\nclass ...\n\n...\nOnly use the ones you need.\nIf the TypedDict name conflicts with the imported object,\nrename the imported object NOT THE TYPE.\n```\n\n----------------------------------------\n\nTITLE: Loading S3 Files Using Windmill TypeScript Client (Bun Runtime)\nDESCRIPTION: Demonstrates how to load a full S3 file as a Uint8Array and lazily load it as a Blob within a Windmill script using the TypeScript client running on the Bun runtime. The snippet imports necessary modules, defines an S3Object, and shows decoding file content to a string. This requires the 'windmill-client' package and assumes access to Windmill workspace object storage. Key functions used are 'loadS3File' for synchronous loading and 'loadS3FileStream' for streaming. This enables efficient handling of small and large files stored in S3 without directly managing credentials.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/38_object_storage_in_windmill/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from 'windmill-client';\nimport { S3Object } from 'windmill-client';\n\nexport async function main() {\n\n\tconst example_file: S3Object = {\n\t\ts3: 'path/to/file'\n\t};\n\n\t// Load the entire file_content as a Uint8Array\n\tconst file_content = await wmill.loadS3File(example_file);\n\n\tconst decoder = new TextDecoder();\n\tconst file_content_str = decoder.decode(file_content);\n\tconsole.log(file_content_str);\n\n\t// Or load the file lazily as a Blob\n\tlet fileContentBlob = await wmill.loadS3FileStream(example_file);\n\tconsole.log(await fileContentBlob.text());\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Passwords using Python Standard Library\nDESCRIPTION: This script generates a secure, random password of customizable length utilizing Python's standard libraries without external dependencies. It combines uppercase letters, lowercase letters, digits, and punctuation symbols to form the password. The main function requires an integer 'length' parameter and outputs a randomly constructed password string. Ensure the 'string' and 'random' modules are available. Inputs: 'length' (int); Outputs: password (str).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport string\nimport random\n\ndef main(length: int) -> str:\n    # Define the characters that can be used in the password\n    characters = string.ascii_letters + string.digits + string.punctuation\n\n    # Generate a random password of the specified length\n    password = \"\".join(random.choice(characters) for i in range(length))\n\n    return password\n```\n\n----------------------------------------\n\nTITLE: Fetching a Resource Using PowerShell Invoke-RestMethod\nDESCRIPTION: This PowerShell snippet fetches a Windmill resource by sending a GET request with an Authorization Bearer token header using Invoke-RestMethod. Environment variables WM_TOKEN, BASE_INTERNAL_URL, and WM_WORKSPACE are used to build the request and authorize access to retrieve the resource at 'u/user/foo'.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n$Headers = @{\n  \"Authorization\" = \"Bearer $Env:WM_TOKEN\"\n}\nInvoke-RestMethod -Headers $Headers -Uri \"$Env:BASE_INTERNAL_URL/api/w/$Env:WM_WORKSPACE/resources/get/u/user/foo\"\n```\n\n----------------------------------------\n\nTITLE: Pushing App Example using wmill CLI\nDESCRIPTION: This example demonstrates how to push a Windmill app located at `./my_app.json` using the `wmill app push` command. The command assumes that the file `my_app.json` exists in the current directory and contains a valid Windmill app definition.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/app.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwmill app push ./my_app.json\n```\n\n----------------------------------------\n\nTITLE: Adding a Workspace with Specific Parameters - Windmill CLI - Bash\nDESCRIPTION: This command adds a workspace by explicitly providing workspace name, ID, and remote URL as arguments. This approach avoids interactive prompts and is suitable for scripting or automated configuration. All parameters must be specified. Requires Windmill CLI installed and appropriately authenticated.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/workspace-management.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace add MyWorkspace workspace123 https://example.com/myworkspace\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in JavaScript\nDESCRIPTION: This code snippet imports the `DocCard` component from a specific location. This component is likely used for rendering documentation cards, possibly within a React or similar component-based framework. It's a necessary dependency for the document's structure.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/markdown.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Setting custom headers for networking configuration\nDESCRIPTION: Configures custom HTTP headers for the Windmill CLI to handle specific networking scenarios like Cloudflare Tunnel. Multiple headers can be defined with comma separation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport HEADERS=header_key:header_value,header_key2:header_value2\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentiment Analysis Script with NLTK in Python\nDESCRIPTION: This Python snippet demonstrates a simple script using the NLTK library to perform sentiment analysis by downloading the VADER lexicon and analyzing text sentiment polarity. It requires the nltk package and access to the internet for downloading the lexicon. The main function takes a string argument and returns a dictionary of sentiment scores. It serves as an example of integrating third-party PyPI packages in Windmill scripts and how to structure a minimal main function for execution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/2_python_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nnltk.download(\"vader_lexicon\")\n\ndef main(text: str = \"Wow, NLTK is really powerful!\"):\n    return SentimentIntensityAnalyzer().polarity_scores(text)\n```\n\n----------------------------------------\n\nTITLE: Prompted Workspace Addition using Windmill CLI - Bash\nDESCRIPTION: This variation of the add command launches interactive prompts for workspace name, ID, and remote URL. No arguments are required; the CLI guides the user through required information entry. Use this form when details are not already known at runtime. Prerequisites: Windmill CLI installed and authenticated.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/workspace-management.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace add\n```\n\n----------------------------------------\n\nTITLE: Listing All Files, Including Hidden Ones\nDESCRIPTION: This command lists all files and directories in the current directory, including hidden ones like the .git directory. It helps to verify the presence of the .git folder.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-12-fatal-git-repository-error/index.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nls -al\n```\n\n----------------------------------------\n\nTITLE: Safe String Interpolation in SQL\nDESCRIPTION: Demonstrates safe string interpolation using the `%%param%%` syntax without an explicit enum list. The parameter is validated against specific rules (alphanumeric, underscore, non-empty, not starting with number) to prevent SQL injection. Also includes a standard prepared statement argument (`:name`).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n-- :daily_minimum_calories (int)\n-- %%table_name%%\n\nSELECT name, calories FROM %%table_name%% WHERE calories > daily_minimum_calories\n```\n\n----------------------------------------\n\nTITLE: Listing Workspaces using Windmill CLI - Bash\nDESCRIPTION: This command lists all workspaces accessible by the user in the current CLI context. It requires the Windmill CLI to be installed and authenticated. The active workspace, which is currently selected, is visually indicated (typically underlined) in the output. No arguments are required, and the output lists both local and remote workspace configurations associated with the user.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/workspace-management.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace\n```\n\n----------------------------------------\n\nTITLE: Exporting GPG Public Key related to Windmill Setup\nDESCRIPTION: Exports the GPG public key identified by `<key_id>` in ASCII-armored format using the `gpg` command. The surrounding documentation indicates that the corresponding GPG *private* key (not the output of this specific command) should be obtained and added to the Windmill workspace 'Git Sync' settings, along with the associated email and passphrase, to enable Windmill to sign commits. Replace `<key_id>` with the actual GPG key ID.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/11_git_sync/index.mdx#_snippet_4\n\nLANGUAGE: gpg\nCODE:\n```\ngpg --armor --export-keys <key_id>\n```\n\n----------------------------------------\n\nTITLE: Installing the Windmill Python Client Library (Shell)\nDESCRIPTION: Installs the `wmill` package using pip. This package provides the necessary Python client library to interact with the Windmill platform.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/python_client.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install wmill\n```\n\n----------------------------------------\n\nTITLE: Parsing and Cleaning Email Addresses in TypeScript\nDESCRIPTION: This TypeScript function (step 'a' in the workflow) takes an email string, splits it into username and domain, removes numbers and dots from the username, creates a spaced version, and removes common domain names (like gmail.com, outlook.com). This prepares terms for subsequent Google searches by isolating potentially meaningful name parts and removing generic domain information. It returns an object containing processed username variations and the potentially cleaned domain.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-29-automatically-populate-crm/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function main(email: string) {\n\tlet [name, domain] = email.split('@');\n\tlet name_space = name.charAt(0) + ' ' + name.slice(1);\n\tname = name.replace(/[0-9]/g, ' ');\n\tname_space = name_space.replace(/[0-9]/g, ' ');\n\tconst nameWithoutDots = name.replace(/\\./g, ' ');\n\tconst commonDomains = [\n\t\t'gmail.com',\n\t\t'yahoo.com',\n\t\t'outlook.com',\n\t\t'hotmail.com',\n\t\t'aol.com',\n\t\t'icloud.com',\n\t\t'mail.ru',\n\t\t'yandex.ru',\n\t\t'live.com',\n\t\t'zoho.com',\n\t\t'protonmail.com',\n\t\t'gmx.com',\n\t\t'fastmail.com',\n\t\t'comcast.net',\n\t\t'verizon.net',\n\t\t'163.com',\n\t\t'qq.com',\n\t\t'sina.com',\n\t\t'naver.com',\n\t\t't-online.de'\n\t];\n\n\tconst isCommonDomain = commonDomains.includes(domain);\n\n\tif (isCommonDomain) {\n\t\treturn { name_space, name: nameWithoutDots, domain: '' };\n\t} else {\n\t\treturn { name_space, name: nameWithoutDots, domain };\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Using uv Package Manager\nDESCRIPTION: Dockerfile example demonstrating how to install Playwright using the uv package manager in a Windmill Enterprise Edition worker. This includes installing the Playwright tool and its browser dependencies.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/8_preinstall_binaries/index.mdx#_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/windmill-labs/windmill-ee:main\n\nRUN uv tool install playwright\nRUN playwright install\nRUN playwright install-deps\n\nCMD [\"windmill\"]\n```\n\n----------------------------------------\n\nTITLE: Using Windmill Resources as Types\nDESCRIPTION: This code snippet demonstrates how to define a Windmill resource as an argument type within an Ansible script.  It uses `windmill_resource` type to link a variable to a resource in the UI. The `resource_type` field helps the UI identify the available resources. \nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nextra_vars:\n  my_resource:\n    type: windmill_resource\n    resource_type: postgresql\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in JavaScript React\nDESCRIPTION: This snippet imports the DocCard React component from the local site source directory. It is a prerequisite for rendering documentation cards on the page. The import follows ES module syntax and expects the @site alias to be configured properly in the build environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/select.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Running a Flow with wmill - Bash\nDESCRIPTION: This command runs a flow by its remote path.  It requires the `wmill` CLI tool.  The remote path must be a valid path to a Windmill flow.  Optional arguments allow for specifying data inputs and suppressing output.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/flow.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwmill flow run <remote_path> [options]\n```\n\n----------------------------------------\n\nTITLE: S3 Resource Configuration for Cloudflare R2\nDESCRIPTION: A markdown table showing the configuration parameters needed to set up a Cloudflare R2 resource in Windmill, including bucket name, region, SSL settings, endpoint URL, and other S3 connection parameters.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/cloudflare-r2.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property  | Type    | Description                  | Default | Required | Where to Find                                                        | Additional Details                                                                       |\n| --------- | ------- | ---------------------------- | ------- | -------- | -------------------------------------------------------------------- | ---------------------------------------------------------------------------------------- |\n| bucket    | string  | S3 bucket name               |         | true     | R2 Dashboard                                                         | Name of the S3 bucket to access                                                          |\n| region    | string  | AWS region for the S3 bucket |         | true     | [R2 documentation](https://developers.cloudflare.com/r2/api/s3/api/) | The region is specific to R2 and is set when creating the bucket                         |\n| useSSL    | boolean | Use SSL for connections      | true    | false    | [R2 documentation](https://developers.cloudflare.com/r2/api/s3/api/) | SSL/TLS is required for Cloudflare R2                                                    |\n| endPoint  | string  | S3 endpoint                  |         | true     | [R2 documentation](https://developers.cloudflare.com/r2/api/s3/api/) | Endpoint URL will be in the format `https://[bucket-id].r2.storage.cloud.cloudflare.com` |\n| accessKey | string  | AWS access key               |         | false    | Not applicable for Cloudflare R2                                     | Access key ID is not required for R2                                                     |\n| pathStyle | boolean | Use path-style addressing    | false   | false    | Not applicable for Cloudflare R2                                     | Virtual-hosted-style URLs are always used in R2                                          |\n| secretKey | string  | AWS secret key               |         | false    | Not applicable for Cloudflare R2                                     | Secret access key is not required for R2                                                 |\n```\n\n----------------------------------------\n\nTITLE: Initializing s3fs and Reading Parquet from S3 with Polars in Python\nDESCRIPTION: Demonstrates initializing an s3fs.S3FileSystem instance using Windmill's connection settings (`wmill.polars_connection_settings`) and reading a Parquet file from a specified S3 bucket into a Polars DataFrame. This approach uses the s3fs library directly for file access. Requires `s3fs`, `polars`, and `wmill` libraries.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-24-data-pipeline-orchestrator/index.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# /path/to/resource arg is optional and by default the workspace S3 resource will be used\ns3 = s3fs.S3FileSystem(**wmill.polars_connection_settings(\"/path/to/resource\")[\"s3fs_args\"])\nwith s3.open(\"s3://windmill_bucket/file.parquet\", mode=\"rb\") as f:\n    dataframe = pl.read_parquet(f)\n```\n\n----------------------------------------\n\nTITLE: Query Snowflake Table Data\nDESCRIPTION: This parameterized SQL query retrieves all data from a specified table in Snowflake.  The `table_name` parameter is dynamically provided by the Select component, allowing users to choose which table's content to display. Requires a configured Snowflake resource and a table_name parameter.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/snowflake_app_with_user_roles/index.mdx#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- ? table_name (varchar) = default arg\nselect * from TABLE(?)\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate in Rust using OpenSSL\nDESCRIPTION: This Rust function `generate_certificate` generates a self-signed X.509 certificate and private key using the `openssl` crate. The certificate is valid for 10 years. It sets basic constraints, subject key identifier, and authority key identifier extensions. The function returns the certificate and private key as PEM-encoded strings.  Dependencies include the `openssl` crate.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-10-07-email-triggers/index.mdx#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse openssl::{\n    asn1::Asn1Time,\n    pkey::PKey,\n    rsa::Rsa,\n    x509::{\n        extension::{\n            AuthorityKeyIdentifier,\n            BasicConstraints,\n            SubjectKeyIdentifier,\n        },\n        X509NameBuilder, X509,\n    },\n};\nfn generate_certificate() -> anyhow::Result<(String, String)> {\n    let cert_result = {\n        let rsa = Rsa::generate(4096)?;\n        let pkey = PKey::from_rsa(rsa)?;\n        let mut name = X509NameBuilder::new()?;\n        name.append_entry_by_text(\"CN\", \"localhost\")?;\n        let name = name.build();\n        let mut builder = X509::builder()?;\n        builder.set_version(2)?;\n        builder.set_subject_name(&name)?;\n        builder.set_issuer_name(&name)?;\n        builder.set_pubkey(&pkey)?;\n        let now = Asn1Time::days_from_now(0)?;\n        let later = Asn1Time::days_from_now(3650)?;\n        builder.set_not_before(now.as_ref())?;\n        builder.set_not_after(later.as_ref())?;\n        builder.append_extension(BasicConstraints::new().critical().ca().build()?)?;\n        builder.append_extension(SubjectKeyIdentifier::new().build(&builder.x509v3_context(None, None))?)?;\n        builder.append_extension(AuthorityKeyIdentifier::new().keyid(true).issuer(true).build(&builder.x509v3_context(None, None))?)?;\n        builder.sign(&pkey, openssl::hash::MessageDigest::sha256())?;\n        let c = builder.build();\n        Ok((c.to_pem()?, pkey.private_key_to_pem_pkcs8()?))\n    };\n    let (pem_certificate, pem_private_key) = cert_result\n        .as_ref()\n        .map_err(|e| anyhow::anyhow!(\"Could not generate self-signed certificates: {}\", e))?;\n\n    Ok((pem_certificate, pem_private_key))\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Answer with OpenAI and Supabase in TypeScript\nDESCRIPTION: This script generates a conversational answer to a user query. It first creates an embedding of the query, retrieves relevant documents from Supabase using embedding similarity, builds a context string from these documents, and then uses OpenAI's GPT model (GPT-4 or GPT-3.5-turbo) with a specific prompt to generate the final answer based on the context. It requires Windmill Supabase and OpenAI resources.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-06-05-discord-bot/index.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from 'https://deno.land/x/windmill@v1.104.2/mod.ts';\n\nimport { refreshAndRetryIfExpired } from 'https://deno.land/x/windmill_helpers@v1.1.1/mod.ts';\nimport { Configuration, OpenAIApi } from 'npm:openai@3.2.1';\nimport { stripIndent } from 'https://esm.sh/common-tags@1.8.2';\nimport GPT3Tokenizer from 'https://esm.sh/gpt3-tokenizer@1.1.5';\n\nexport async function main(\n\tquery: string,\n\tsupabaseAuth: wmill.Resource<'supabase'>,\n\topenAiAuth: wmill.Resource<'openai'>,\n\ttoken?: {\n\t\taccess: string;\n\t\trefresh: string;\n\t\texpires_at?: number;\n\t},\n\tmaxToken: number = 5000\n) {\n\tlet answer = '';\n\tconst links: string[] = [];\n\n\tawait refreshAndRetryIfExpired(supabaseAuth, token, async (client) => {\n\t\t// OpenAI recommends replacing newlines with spaces for best results\n\t\tconst input = query.replace(/\\n/g, ' ');\n\n\t\tconst configuration = new Configuration({\n\t\t\tapiKey: openAiAuth.api_key,\n\t\t\torganization: openAiAuth.organization_id\n\t\t});\n\t\tconst openai = new OpenAIApi(configuration);\n\n\t\t// Generate a one-time embedding for the query itself\n\t\tconst embeddingResponse = await openai.createEmbedding({\n\t\t\tmodel: 'text-embedding-ada-002',\n\t\t\tinput\n\t\t});\n\n\t\tconst [{ embedding }] = embeddingResponse.data.data;\n\t\tconst { data: documents } = await client.rpc('match_documents', {\n\t\t\tquery_embedding: embedding,\n\t\t\tmatch_threshold: 0.5, // Choose an appropriate threshold for your data\n\t\t\tmatch_count: 5 // Choose the number of matches\n\t\t});\n\n\t\tconst tokenizer = new GPT3Tokenizer({ type: 'gpt3' });\n\t\tlet tokenCount = 0;\n\n\t\tlet contextText = '';\n\n\t\tfor (let i = 0; i < documents.length; i++) {\n\t\t\tconst document = documents[i];\n\t\t\tconst content = document.content;\n\n\t\t\tconst encoded = tokenizer.encode(content);\n\t\t\ttokenCount += encoded.text.length;\n\n\t\t\tif (tokenCount > maxToken) {\n\t\t\t\tcontextText += `${content.trim().substring(0, maxToken)}\n---\n`;\n\t\t\t\tlinks.push(document.link);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcontextText += `${content.trim()}\n---\n`;\n\t\t\tlinks.push(document.link);\n\t\t}\n\n\t\tconst prompt = stripIndent`\n\t\tYou are an AI assistant providing helpful advice. You are given the following extracted parts of a long document and a question. Provide a conversational answer based on the context provided.\n    If you can't find the answer in the context below, just say \"Sorry, I don't know\" Don't try to make up an answer.\n    Please note that images, figures, or any visual content will not be included in the provided context, so you must not try to include them in an answer.\n    \n    We will provide both the context and the question at the end.\n    Answer as markdown (including related code snippets if available).\n\n    Context:\n    ${contextText}\n    Question: \"\"\"\n    ${query}\n    \"\"\"\n  `;\n\n\t\ttry {\n\t\t\tconst completionResponse = await openai.createChatCompletion({\n\t\t\t\tmodel: 'gpt-4',\n\t\t\t\tmessages: [{ role: 'user', content: prompt }],\n\t\t\t\tmax_tokens: 512, // Choose the max allowed tokens in completion\n\t\t\t\ttemperature: 0 // Set to 0 for deterministic results\n\t\t\t});\n\t\t\tconst {\n\t\t\t\tid,\n\t\t\t\tchoices: [{ message }]\n\t\t\t} = completionResponse.data;\n\n\t\t\tanswer = message?.content ?? '';\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t});\n\n\treturn { answer, links };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GPT-4 User Prompt for PostgreSQL Code Generation\nDESCRIPTION: Provides the user prompt template specifically for generating PostgreSQL code compatible with Windmill. It instructs the AI on how to use positional parameters with type casting (`$N::{type}`) for arguments and how to define these parameters using specific comment formats (`-- $N name` or `-- $N name = default`) required by Windmill for argument parsing.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nWrite SQL code for PostgreSQL that should \\{description\\}.\nArguments can be obtained directly in the statement with `$1::{type}`, `$2::{type}`, etc...\nName the parameters by adding comments before the command like that:\n`-- $1 name1` or `-- $2 name = default` (one per row, do not include the type)\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Service in Docker Compose (YAML)\nDESCRIPTION: Defines a Prometheus service within a `docker-compose.yml` file for collecting metrics. It uses the latest Prometheus image, exposes port 9090 internally, mounts a custom configuration file (`prometheus-config.yaml`), and specifies the command to use this configuration.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/otel/index.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  prometheus:\n    image: prom/prometheus:latest\n    expose:\n      - 9090\n    volumes:\n      - ./prometheus-config.yaml:/etc/prometheus/prometheus.yml\n    command:\n      - \"--config.file=/etc/prometheus/prometheus.yml\"\n```\n\n----------------------------------------\n\nTITLE: Importing Windmill Client in TypeScript (Bun)\nDESCRIPTION: Imports the `windmill-client` package for use within a Bun TypeScript environment. Assumes the package is installed via the Bun package manager.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/ts_client.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport * as wmill from 'windmill-client';\n```\n\n----------------------------------------\n\nTITLE: VS Code Launch Configuration for Bun\nDESCRIPTION: This JSON snippet configures VS Code for debugging Bun scripts. It specifies the runtime executable, arguments, environment variables, and .env file for local Windmill development.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/run_locally.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Bun\",\n      \"type\": \"pwa-node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"runtimeExecutable\": \"bun\",\n      \"runtimeArgs\": [\"run\", \"${file}\"],\n      \"env\" {\n        \"BASE_INTERNAL_URL\": \"https://app.windmill.dev\",\n        \"WM_TOKEN\": \"ThisIsAToken\",\n        \"WM_WORKSPACE\": \"workspace_id\"\n      },\n      \"envFile\": \".env\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling a new SMTP connection and sending greeting in Rust\nDESCRIPTION: This snippet manages an individual TCP connection in the SMTP server, splitting it into read/write streams, and then sends the SMTP greeting line '220 My SMTP server', signaling readiness for SMTP commands. It uses Tokio's async I/O to asynchronously write to the client, foundational for SMTP protocol compliance and server initialization.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-10-07-email-triggers/index.mdx#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nasync fn handle_connection(stream: &mut TcpStream) {\n    let (reader, writer) = stream.split();\n    let mut reader = BufReader::new(reader);\n    let mut writer = BufWriter::new(writer);\n    writer.write_all(b\"220 My SMTP server\\r\\n\").await?;\n    writer.flush().await?;\n\n    // handle session \n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Neon.tech Connection String\nDESCRIPTION: This JSON snippet demonstrates how to parse a Neon.tech connection string to extract its individual components (host, port, user, dbname, sslmode, and password). This is required for using a Neon.tech connection string as a Postgres resource in Windmill. The example provided targets a specific connection string structure. The sslmode is set to \"require\", which is the recommended setting for Neon.tech.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/neon.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"host\": \"ep-restless-rice.us-east-2.aws.neon.tech\",\n\t\"port\": 5432,\n\t\"user\": \"daniel\",\n\t\"dbname\": \"neondb\",\n\t\"sslmode\": \"require\",\n\t\"password\": \"<password>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Default Argument Value with PowerShell\nDESCRIPTION: This snippet demonstrates setting a variable 'argument_name' in PowerShell to a static default value. No external dependencies are required. Input is not parameterized by default, but users may extend this by converting the variable assignment into a param-block. The output is the local variable assignment. This pattern is useful to provide fallback values for script arguments.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/4_bash_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$argument_name = \"Its default value\"\n```\n\n----------------------------------------\n\nTITLE: Interacting with App State and Components in Frontend Scripts (JavaScript)\nDESCRIPTION: Example of a JavaScript frontend script interacting with the Windmill app. It demonstrates reading context (`ctx`), managing global state (`state`), triggering navigation (`goto`), recomputing scripts (`recompute`), setting tabs (`setTab`), and updating component values (`setValue`). Note the requirement for reassignment for state reactivity.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// read outputs and ctx\nconsole.log(ctx.email);\n\n// access a global state store\nif (!state.foo) {\n\tstate.foo = 0;\n}\nstate.foo += 1;\n\n// for reactivity to work, you need to assign a value and not modify it in place\n// e.g: state.foo.push(1) will not work but 'state.foo = [...state.foo, 1]' will.\n// you may also just reassign as next statement 'state.foo = state.foo'\n\n// you can also navigate (goto), recompute a script (recompute), or set a tab (setTab)\n// Inputs and display components support settings their value directly\nsetValue('a', 'Bar');\n\n// Tables support setting their selected index (setSelectedIndex)\n\nreturn state.foo;\n```\n\n----------------------------------------\n\nTITLE: Setting Windmill Client Configuration in Deno\nDESCRIPTION: This snippet demonstrates how to set the Windmill client configuration in Deno using environment variables for the token and base URL. It defaults to 'no_token' and 'http://localhost:8000' if the environment variables are not set.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/run_locally.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nsetClient(\n\tDeno.env.get('WM_TOKEN') ?? 'no_token',\n\tDeno.env.get('BASE_INTERNAL_URL') ?? 'http://localhost:8000'\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Workflow using task() Function in TypeScript (Bun/Deno)\nDESCRIPTION: Shows how to define a Windmill workflow in TypeScript using the `task()` function imported from the `windmill-client` package. The `main` function calls the `hello` function twice, wrapping each asynchronous call with `task()` to execute it as a separate Windmill job. This demonstrates the basic structure for defining and invoking sub-tasks within a TypeScript script intended for execution in environments like Bun or Deno.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/31_workflows_as_code/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { task } from 'windmill-client';\n\nexport async function hello(name: string) {\n\treturn 'Hello:' + name;\n}\n\nexport async function main() {\n\t//It's the function itself that needs to be wrapped with task, and it's always a promise even\n\tawait task(hello)('BAR');\n\treturn await task(hello)('FOO');\n}\n\n```\n\n----------------------------------------\n\nTITLE: DocCard Component for Instance Storage Navigation\nDESCRIPTION: Implementation of the DocCard React component to create a navigation card linking to documentation about instance-level object storage features in Windmill Enterprise edition.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/cloudflare-r2.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Instance object storage\"\n\t\tdescription=\"Connect your Windmill instance to your S3 bucket or your Azure Blob storage to enable users to read and write from S3 without having to have access to the credentials.\"\n\t\thref=\"/docs/core_concepts/object_storage_in_windmill#instance-object-storage\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Bedrock API Key using AWS CLI\nDESCRIPTION: This Bash command uses the AWS CLI to create a new secret in AWS Secrets Manager. The secret is named 'BedrockProxyAPIKey' and stores a JSON string containing the actual API key ('my-custom-api-key') needed for authenticating requests to the Bedrock Access Gateway. This is required for securing access to the gateway.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/aws_bedrock/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n aws secretsmanager create-secret \\\n   --name BedrockProxyAPIKey \\\n   --description \"API key for Bedrock proxy access\" \\\n   --secret-string '{\"api_key\":\"my-custom-api-key\"}'\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer in Windmill Enterprise Edition\nDESCRIPTION: Dockerfile example showing how to install Puppeteer and its dependencies in a Windmill Enterprise Edition worker. This includes setting up Node.js and installing necessary system libraries for headless browser operation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/8_preinstall_binaries/index.mdx#_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/windmill-labs/windmill-ee:main\n\nRUN apt update\nRUN apt install npm -y\nRUN mkdir -p /etc/apt/keyrings\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key |  gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\nRUN echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main\" | tee /etc/apt/sources.list.d/nodesource.list\nRUN apt-get update -y\nRUN apt install nodejs libnss3-dev  libatk1.0-0 libatk-bridge2.0-0 libcups2-dev  libdrm-dev libxkbcommon-dev libxcomposite-dev libxdamage-dev libxrandr-dev\\\n  libgbm-dev libpango-1.0 libcairo-dev libasound-dev -y\nRUN npm install -g puppeteer -y\n\nCMD [\"windmill\"]\n```\n\n----------------------------------------\n\nTITLE: Removing Professional Website Mentions from Strings in TypeScript\nDESCRIPTION: This TypeScript function (step 'ad' in the workflow) takes a single string input, representing a search result. It iterates through a predefined list of common professional and job board website names (e.g., 'LinkedIn', 'Indeed', 'Glassdoor') and removes any occurrences of these names from the input string. This step aims to clean the search result text by removing potentially noisy mentions before passing it to OpenAI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-29-automatically-populate-crm/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// import * as wmill from \"https://deno.land/x/windmill@v1.82.0/mod.ts\"\n\nconst websites = [\n\t'Indeed',\n\t'Glassdoor',\n\t'AngelList',\n\t'Hired',\n\t'Monster',\n\t'CareerBuilder',\n\t'SimplyHired',\n\t'Dice',\n\t'Upwork',\n\t'BEAMSTART'\n];\n\nexport async function main(search_result: string) {\n\tfor (let website of websites) {\n\t\tif (search_result.includes(website)) {\n\t\t\tsearch_result = search_result.replace(website, '');\n\t\t}\n\t}\n\treturn search_result;\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Kubernetes Workers with a Custom Windmill Autoscaling Script (Bash)\nDESCRIPTION: A Bash script demonstrating how to handle Windmill autoscaling events using a custom script integration. It receives the worker group name, desired worker count, reason, and event type as arguments ($1, $2, $3, $4 respectively) and uses `kubectl scale` to adjust the replicas of the corresponding Kubernetes deployment (e.g., 'windmill-workers-$worker_group'). Requires `kubectl` to be configured and potentially authenticated to the target cluster within the script's execution environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/42_autoscaling/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nworker_group=\"$1\"\ndesired_workers=\"$2\"\nreason=\"$3\"\nevent_type=\"$4\"\nnamespace=\"mynamespace\"\n\necho \"Applying $event_type of $desired_workers to $worker_group bc $reason\"\n\n# authenticate to the cluster here if needed\nkubectl scale deployment windmill-workers-$worker_group --replicas=$desired_workers -n $namespace\n```\n\n----------------------------------------\n\nTITLE: Executing background tasks asynchronously using Python's asyncio library\nDESCRIPTION: Illustrates how to manage background operations asynchronously in Python using asyncio. The approach uses async functions to run a background task concurrently within an event loop, ensuring non-blocking execution. Suitable for I/O-bound or network operations where maintaining responsiveness is critical.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncio\n\nasync def background_task():\n    print(\"Background task started\")\n    await asyncio.sleep(5)\n    print(\"Background task finished\")\n\nasync def main():\n    print(\"Main function running...\")\n    # Run the background task\n    await background_task()\n    print(\"Main function finished\")\n\n# Run the asyncio event loop\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Progress in Windmill (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to use the `setProgress` function from the `windmill-client` library to report the execution progress of a script or flow. The function is invoked after completing significant steps, updating the progress indicator. The reported progress is clamped between 0 and 99 and only allows incremental updates.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/19_explicit_progress/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setProgress } from 'windmill-client';\n\nexport async function main() {\n\n\t// ... First heavy task\n\tsetProgress(25)\n\n\t// ... Second heavy task\n\tsetProgress(50)\n\n\t// ... Third heavy task\n\tsetProgress(75)\n\n\t// ... Fourth heavy task\n\tsetProgress(99)\n\t// ..\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Background Tasks Using ExecutorService in Java\nDESCRIPTION: Illustrates the use of Java's ExecutorService from the java.util.concurrent package to execute background tasks within a managed thread pool. The snippet creates a single-thread executor, submits a background job with task simulation, and handles orderly shutdown with awaitTermination and forced shutdown if tasks exceed time limits. This approach allows better control over thread lifecycle and resource management compared to raw threads. Dependencies include the standard Java concurrency utilities. Inputs include the submitted task lambda, outputs are console logs and controlled thread termination.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class BackgroundTaskExecutor {\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newSingleThreadExecutor(); // Create an executor with a single thread\n\n        executor.submit(() -> {\n            System.out.println(\"Background task started\");\n            try {\n                Thread.sleep(5000); // Simulate a long-running task\n            } catch (InterruptedException e) {\n                System.out.println(\"Background task interrupted\");\n            }\n            System.out.println(\"Background task finished\");\n        });\n\n        System.out.println(\"Main thread continues to run...\");\n\n        executor.shutdown(); // Initiate an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted\n\n        try {\n            if (!executor.awaitTermination(10, java.util.concurrent.TimeUnit.SECONDS)) {\n                executor.shutdownNow(); // Force shutdown if tasks take too long\n            }\n        } catch (InterruptedException e) {\n            executor.shutdownNow();\n        }\n\n        System.out.println(\"Main thread finished\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component - JavaScript\nDESCRIPTION: This snippet imports the `DocCard` component from a specific location within the project. The `DocCard` component is used to display documentation cards, likely providing a consistent style for linking to other documentation sections.  This import is a prerequisite for rendering `DocCard` components within the React-based environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/rich_result_by_job_id.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: System Message for Bug Fixing\nDESCRIPTION: This is a special system message template used to instruct GPT-4 on how to respond when fixing bugs. It specifies that the AI should output code with an explanation of the error and the fix in a specific format for easy extraction.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nYou fix the code shared by the user. Only output code. Wrap the code like that:\n```language\n\\{code\\}\n```\nExplain the error and the fix in the following format:\nexplanation: \"Here's the explanation\"\nAlso put the explanations in the code as comments.\n```\n\n----------------------------------------\n\nTITLE: Listing Folders with Windmill CLI\nDESCRIPTION: The `wmill folder` command is used to list all folders present in the remote workspace. It does not require any arguments. The command returns a list of folders.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/folder.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwmill folder\n```\n\n----------------------------------------\n\nTITLE: Preprocessing GCP Pub/Sub Messages in TypeScript\nDESCRIPTION: A Windmill preprocessor function written in TypeScript for GCP Pub/Sub triggers. It accepts the trigger metadata (`wm_trigger`) and the base64-encoded message payload, decodes the payload, checks message attributes for content type, parses JSON if applicable, and returns a structured object with decoded string, content type, parsed message, and attributes for the main function.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/50_gcp_triggers/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function preprocessor(\n  wm_trigger: {\n    kind: 'gcp',\n    gcp?: {\n      message_id: string,\n      subscription: string,\n      ordering_key?: string,\n      attributes?: Record<string, string>,\n      delivery_type: \"push\" | \"pull\",\n      headers?: Record<string, string>,\n      publish_time?: string,\n    }\n  },\n  payload: string,\n) {\n  if (wm_trigger.kind === 'gcp' && wm_trigger.gcp) {\n    const decodedString = new TextDecoder().decode(Uint8Array.from(atob(payload), c => c.charCodeAt(0)));\n\n    const attributes = wm_trigger.gcp.attributes || {};\n    const contentType = attributes['content-type'] || attributes['Content-Type'];\n    const isJson = contentType === 'application/json';\n\n    let parsedMessage: any = decodedString;\n    if (isJson) {\n      try {\n        parsedMessage = JSON.parse(decodedString);\n      } catch (err) {\n        throw new Error(`Invalid JSON payload: ${err}`);\n      }\n    }\n\n    return {\n      messageAsDecodedString: decodedString,\n      contentType,\n      parsedMessage,\n      attributes\n    };\n  }\n\n  throw new Error(`Expected gcp trigger kind got: ${wm_trigger.kind}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Remote Changes\nDESCRIPTION: This Bash snippet shows the basic command syntax for `wmill sync pull`. This command is used to download scripts, flows, and other configured Windmill objects from the currently selected remote workspace to the local filesystem. Various options can be appended to control the sync behavior, such as skipping items or changing output format.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/sync.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwmill sync pull [options]\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Integration in Snowflake Using SQL\nDESCRIPTION: This SQL snippet creates or replaces a security OAuth integration in Snowflake with specified parameters including integration name, OAuth client type, redirect URI, and enabling the integration. It is intended for administrators setting up Snowflake OAuth authentication to be used with Windmill, requiring a valid public Windmill instance URL as the redirect URI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/2_setup_oauth/index.mdx#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE OR REPLACE SECURITY INTEGRATION <enter a name for the OAuth integration>\nTYPE = OAUTH\nOAUTH_CLIENT = CUSTOM\nOAUTH_CLIENT_TYPE = 'CONFIDENTIAL'\nOAUTH_REDIRECT_URI = 'https://<public url of your Windmill instance>/oauth/callback/snowflake_oauth'\nOAUTH_USE_SECONDARY_ROLES = IMPLICIT\nENABLED = TRUE\nCOMMENT = '<enter a description of your security integration>'\n```\n\n----------------------------------------\n\nTITLE: Mapping Card Data to Card Components\nDESCRIPTION: This JavaScript snippet within `List.jsx` replaces a single `<Card>` instance with a `.map()` function to dynamically render multiple `<Card>` components based on the `cards` state.  Each card's title is passed as a prop.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n{cards.map((card) => <Card title={card.title} key={card.id} />)}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Custom Flow User States in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the Windmill client library to set and retrieve a custom flow user state. The function asynchronously sets a key-value pair ('FOO', 42) in the flow state storage and then retrieves the value using the same key. It requires the 'windmill-client' package at version 1.297.0 and works within the context of a flow job with lifetime scoped to that flow.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as wmill from 'windmill-client@1.297.0';\n\nexport async function main(x: string) {\n\tawait wmill.setFlowUserState('FOO', 42);\n\treturn await wmill.getFlowUserState('FOO');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Enqueuing Background Jobs with Sidekiq in Ruby\nDESCRIPTION: Demonstrates a basic Sidekiq background worker implementation in Ruby by including the Sidekiq::Worker module in a class and defining a perform method which takes arguments and performs a task asynchronously. The example sleeps for 5 seconds and outputs the sum of two numbers. Jobs are enqueued using perform_async. Required dependencies include Sidekiq and Redis. Inputs are the numeric parameters for the job, output is the performed task's console output. Sidekiq supports retries, scheduling, and monitoring making it efficient for production workloads.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass BackgroundJob\n  include Sidekiq::Worker\n\n  def perform(x, y)\n    sleep(5)\n    puts x + y\n  end\nend\n\n# To enqueue the job\nBackgroundJob.perform_async(10, 20)\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Workflow in Python for Fibonacci Computations\nDESCRIPTION: A Python script utilizing the Temporal SDK to define and execute a workflow that runs multiple Fibonacci computations sequentially. Uses 'activity.defn' to mark 'fibo_activity' for execution, and a workflow class 'BenchWorkflow' that triggers the activity iteratively. The setup connects to a Temporal server at localhost:7233, manages tasks via a specific task queue, and runs multiple iterations based on configurable constants. The script highlights asynchronous task orchestration and distributed execution in a Python environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nITER = 10     # respectively 40\nFIBO_N = 33   # respectively 10\n\n@activity.defn\nasync def fibo_activity(n: int) -> int:\n    return fibo(n)\n\n@workflow.defn\nclass BenchWorkflow:\n    @workflow.run\n    async def run(self) -> None:\n        for i in range(ITER):\n            await workflow.execute_activity(\n                fibo_activity,\n                FIBO_N,\n                activity_id=\"task_{}\".format(i),\n                start_to_close_timeout=timedelta(seconds=60),\n            )\n\nasync def main():\n    client = await Client.connect(\"localhost:7233\")\n    flow_name = \"bench-{}\".format(ITER)\n    async with Worker(\n        client,\n        task_queue=flow_name,\n        workflows=[BenchWorkflow],\n        activities=[fibo_activity],\n    ):\n        await client.execute_workflow(\n            BenchWorkflow.run,\n            id=flow_name,\n            task_queue=flow_name,\n        )\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Receiving NATS Message in Windmill Script (TypeScript)\nDESCRIPTION: Basic Windmill script demonstrating how a runnable receives a NATS message when triggered. The message payload is passed directly as a single string argument named `msg`. This is the default behavior when no preprocessor is configured for the trigger.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/45_nats_triggers/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(msg: string) {\n  // do something with the message\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in MDX/React\nDESCRIPTION: Imports the `DocCard` React component from a relative project path (`@site/src/components/DocCard`). This component is intended for use within the MDX file, likely to render structured documentation link cards.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/react_vue_svelte_apps/index.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific User Example\nDESCRIPTION: Example command demonstrating how to remove a user by their email address.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/user.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwmill user remove example@example.com\n```\n\n----------------------------------------\n\nTITLE: Getting Windmill Backend Version with get_version (Python)\nDESCRIPTION: Method signature for `get_version`. This client method queries the connected Windmill instance and returns the current version string of the Windmill backend.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/python_client.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef get_version(self) -> str\n```\n\n----------------------------------------\n\nTITLE: Template for Workspace Error Handler in TypeScript\nDESCRIPTION: Provides a skeleton template for creating a workspace error handler script in TypeScript. It captures error context such as path, email, error details, job ID, flow status, and workspace ID, logging the occurrence and returning the error object. Intended for deployment as an automated response to workspace errors.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/10_error_handling/index.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Workspace error handler template\n\nexport async function main(\n\tpath: string, // The path of the script or flow that errored\n\temail: string, // The email of the user who ran the script or flow that errored\n\terror: object, // The error details\n\tjob_id: string, // The job id\n\tis_flow: boolean, // Whether the error comes from a flow\n\tworkspace_id: string // The workspace id of the failed script or flow\n) {\n\tconst run_type = is_flow ? 'flow' : 'script';\n\tconsole.log(\n\t\t`An error occurred with ${run_type} ${path} run by ${email} in workspace ${workspace_id}`\n\t);\n\tconsole.log(error);\n\treturn error;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Flow States in Python\nDESCRIPTION: Example showing how to set and retrieve custom flow states in Python using the wmill client, which allows storing data across different steps in a flow.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/11_persistent_storage/within_windmill.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\n#extra_requirements:\n#wmill==1.297.0\n\ndef main(x: str):\n    wmill.set_flow_user_state(\"foobar\", 43)\n    return wmill.get_flow_user_state(\"foobar\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Windmill Large Self-hosted Setup Compute Units - YAML\nDESCRIPTION: This YAML snippet depicts a large Windmill Enterprise Edition setup for self-hosted instances, calculating 12 Compute Units. It features standard workers (2 replicas, 2GB each), large workers (4 replicas, 6GB each, demonstrating the 2 CU cap for workers > 2GB on self-hosted), report workers (1 replica, 2GB), and a native worker (1 replica, 2GB, 8 subworkers).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/7_plans_details/index.mdx#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  windmill_worker_standard:\n    deploy:\n      replicas: 2  # 2 workers × 1 CU each = 2 CUs\n      resources:\n        limits:\n          memory: 2048M  # 2GB = 1 CU per worker\n\n  windmill_worker_large:\n    deploy:\n      replicas: 4  # 4 workers × 2 CUs each = 8 CUs\n      resources:\n        limits:\n          memory: 6144M  # 6GB but capped at 2 CUs per worker\n\n  windmill_worker_reports:\n    deploy:\n      replicas: 1 # 1 worker × 1 CU = 1 CU\n      resources:\n        limits:\n          memory: 2048M # 2GB = 1 CU\n\n  windmill_worker_native:\n    deploy:\n      replicas: 1  # 1 worker with NUM_WORKERS=8 = 1 CU\n      resources:\n        limits:\n          memory: 2048M\n    environment:\n      - WORKER_GROUP=native\n      - NUM_WORKERS=8\n```\n\n----------------------------------------\n\nTITLE: Prometheus Monitoring Configuration (YAML)\nDESCRIPTION: Defines global scrape and evaluation intervals, and targets for Prometheus metrics collection including itself and Tempo. Facilitates metric scraping for system monitoring and observability.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/otel/index.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: [ 'localhost:9090' ]\n  - job_name: 'tempo'\n    static_configs:\n      - targets: [ 'tempo:3200' ]\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Specified Password\nDESCRIPTION: Example command to create a new user with both email address and a specific password.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/user.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwmill user add example@example.com mypassword123\n```\n\n----------------------------------------\n\nTITLE: Workflow Definition with Prefect\nDESCRIPTION: Example of defining a simple workflow in Prefect using tasks and flow decorators. The code demonstrates how to create dependent tasks and connect them in a flow.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/compared_to/prefect.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom prefect import flow, task\n\n@task\ndef my_first_task(msg):\n    print(f\"Hello, {msg}\")\n\n@task\ndef my_second_task(msg):\n    my_first_task.fn(msg)\n\n@flow\ndef my_flow():\n    my_second_task(\"Trillian\")\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Build Arguments\nDESCRIPTION: Example showing how to use build arguments in a Dockerfile, allowing environment variables from .env files to be passed into the Docker build process. This enables more flexible image configuration.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/8_preinstall_binaries/index.mdx#_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG WM_IMAGE\nFROM ${WM_IMAGE}\n\n[...]\n```\n\n----------------------------------------\n\nTITLE: Embedding a LinkedIn informational video with HTML\nDESCRIPTION: This snippet demonstrates embedding a demonstration video about adding LinkedIn resources into a webpage using an HTML <video> element, with styling and playback controls.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/linkedin.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<video\n    className=\"border-2 rounded-xl object-cover w-full h-full dark:border-gray-800\"\n    autoPlay\n    loop\n    controls\n    id=\"main-video\"\n    src=\"/videos/adding_linkedin_resource.mp4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Pulling Content from Public Hub and Pushing to Private Hub\nDESCRIPTION: Commands for syncing content from the public Windmill Hub to your Private Hub by first pulling to local storage, then pushing to your private instance.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/32_private_hub/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill-hub wm-pull\nwmill-hub push\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in JSX\nDESCRIPTION: Imports the DocCard component from the site's component library. This component is used to create documentation navigation cards in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/6_app_deployment.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Creating a Java Script with Windmill Main Method\nDESCRIPTION: This Java snippet demonstrates the required structure for a Windmill Java script, including a public Main class with a static main method that serves as the script entry point. It shows how to define input parameters of various types, instantiate internal classes, serialize objects to JSON using Gson, access Windmill resources, and use an external library (cowsay) to produce output. The snippet requires dependencies on Gson (2.8.9) and cowsay (1.1.0) managed via Coursier. Input parameters are annotated by type to enable Windmill to auto-generate the input UI and JSON schema. The method returns an Object that represents the script output. The snippet highlights handling default values for inputs and shows integration points for resources and libraries.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/13_java_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n//requirements:\\n//com.google.code.gson:gson:2.8.9\\n//com.github.ricksbrown:cowsay:1.1.0\\n//com.github.ricksbrown:cowsay:1.1.0\\n\\nimport com.google.gson.Gson;\\nimport com.google.gson.GsonBuilder;\\nimport com.github.ricksbrown.cowsay.Cowsay;\\nimport com.github.ricksbrown.cowsay.plugin.CowExecutor;\\n\\npublic class Main {\\n  public static class Person {\\n    private String name;\\n    private int age;\\n\\n    // Constructor\\n    public Person(String name, int age) {\\n        this.name = name;\\n        this.age = age;\\n    }\\n  }\\n\\n  public static Object main(\\n    // Primitive\\n    int a,\\n    float b,\\n    // Objects\\n    Integer age,\\n    Float d,\\n    Object e,\\n    String name,\\n    // Lists\\n    String[] f\\n    // No trailing commas!\\n    ){\\n    Gson gson = new Gson();\\n\\n    // Get resources\\n    var theme = Wmill.getResource(\"f/app_themes/theme_0\");\\n    System.out.println(\"Theme: \" + theme);\\n    \\n    // Create a Person object\\n    Person person = new Person( (name == \"\") ? \"Alice\" : name, (age == null) ? 30 : age);\\n\\n    // Serialize the Person object to JSON\\n    String json = gson.toJson(person);\\n    System.out.println(\"Serialized JSON: \" + json);\\n\\n    // Use cowsay\\n    String[] args = new String[]{\"-f\", \"dragon\", json };\\n    String result = Cowsay.say(args);\\n    return result;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Cancel URL for Approval Step - Windmill Client - TypeScript\nDESCRIPTION: This TypeScript script illustrates how to add a cancel button to a Windmill approval page by including a `cancel` key in the script's return object. The value for `cancel` is typically a URL fetched from the `windmill-client` (like `urls['cancel']`) that, when triggered, will cancel the current step or flow instance. This provides operators with a programmatic way to add cancellation options.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from \"windmill-client\"\n        \nexport async function main() {\n    const urls = await wmill.getResumeUrls(\"approver1\")\n\n    return {\n        resume: urls['resume'],\n        cancel: urls['cancel'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Python Sleep Job for Benchmarking\nDESCRIPTION: This Python snippet defines a simple `main` function that pauses execution for 100ms using `time.sleep(0.1)`. It was used as the sample job in the Windmill scaling benchmark described in the appendix to measure throughput (jobs per second) as the number of virtual workers increased. It depends on the standard Python `time` module.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nimport time\ndef main():\n\ttime.sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Verifying Discord Interaction Requests in TypeScript\nDESCRIPTION: This TypeScript function verifies incoming Discord interaction requests using signature headers (X-Signature-Ed25519, X-Signature-Timestamp) and the bot's public key stored in a Windmill resource ('c_discord_bot'). It leverages the 'discord-interactions' library. If the signature is invalid, it throws an error. It handles Discord's PING request by returning a PONG response and defers other interaction types by returning DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE, as required by Discord's API.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-06-05-discord-bot/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Resource } from 'https://deno.land/x/windmill@v1.108.0/mod.ts';\n\nimport {\n\tInteractionResponseType,\n\tInteractionType,\n\tverifyKey\n} from 'npm:discord-interactions@3.4.0';\n\ntype DiscordInteraction = {\n\tid: string;\n\ttoken: string;\n\ttype: InteractionType;\n};\n\nexport async function main(\n\tx_signature_ed25519: string,\n\tx_signature_timestamp: string,\n\traw_string: string,\n\ttoken: string,\n\tdiscord_config: Resource<'c_discord_bot'>\n) {\n\tconst interaction: DiscordInteraction = JSON.parse(raw_string);\n\n\t// We'll need the http request body as a string and the two headers to verify the request signature\n\t// https://discord.com/developers/docs/interactions/receiving-and-responding#security-and-authorization\n\tconst isVerified = verifyKey(\n\t\traw_string,\n\t\tx_signature_ed25519,\n\t\tx_signature_timestamp,\n\t\tdiscord_config.public_key\n\t);\n\n\tif (!isVerified) {\n\t\tthrow new Error('The request signature is not valid');\n\t}\n\n\t// If we get a PING, we need to respond with a PONG\n\tconst type = interaction.type as InteractionType;\n\tif (type === InteractionType.PING) {\n\t\treturn { type: InteractionResponseType.PONG };\n\t}\n\n\treturn { type: InteractionResponseType.DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Nushell Executable Path Environment Variable in PowerShell\nDESCRIPTION: This snippet sets the 'NU_PATH' environment variable in PowerShell, indicating the location of the Nushell executable for use by Windmill workers. Replace the placeholder with the correct file path. Upon execution, the environment variable is set for the current PowerShell session.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/17_windows_workers/index.mdx#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Replace these variables with your specific configuration\n$env:NU_PATH=\"C:\\..\\..\\nu.exe\"\n\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows CMD\nDESCRIPTION: This snippet demonstrates how to set environment variables in the Windows command prompt using the `set` command. This is necessary for providing Windmill context variables when running scripts locally on Windows.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/run_locally.mdx#_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\nset \"BASE_INTERNAL_URL=https://app.windmill.dev\"\nset \"WM_TOKEN=ThisIsAToken\"\nset \"WM_WORKSPACE=workspace_id\"\n```\n\n----------------------------------------\n\nTITLE: Basic Import Statement in Windmill (Python)\nDESCRIPTION: This Python snippet shows a basic import statement, illustrating how Windmill extracts and manages dependencies from in-code imports without manual requirements files. When deploying, Windmill analyzes imports like 'os' and automatically ensures the environment is provisioned accordingly. No additional setup is needed. Input is standard Python source code; output is dependency resolution and caching handled by Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/6_imports/index.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport os\n\n# etc.\n```\n\n----------------------------------------\n\nTITLE: Installing the Windmill React SDK as a dependency\nDESCRIPTION: This snippet shows how to add the Windmill React SDK to a project by specifying the local `.tgz` package file, as it is not available on NPM. The SDK provides tools for Windmill app integration within React projects.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/15_react_sdk/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n'windmill-react-sdk': 'file:windmill-react-sdk-X.XXX.X.tgz'\n```\n\n----------------------------------------\n\nTITLE: AgGrid Table Compute Input JavaScript Example\nDESCRIPTION: This JavaScript code demonstrates how to use a compute function to dynamically fetch data for the AgGrid table component. The `main` function uses the `fetch` API to retrieve data from a sample API endpoint and returns the parsed JSON response, which will then be used to populate the table.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/aggrid_table.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function main() {\n\tconst res = await fetch('https://api.sampleapis.com/recipes/recipes', {\n\t\theaders: { 'Content-Type': 'application/json' }\n\t});\n\treturn res.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Showing a remote script with `wmill script show`\nDESCRIPTION: Executes the `wmill script show` command to display the contents of a specified remote script file, allowing users to review the script directly from the server. It requires the remote script's path and outputs its content for inspection.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/script.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwmill script show <path>\n```\n\n----------------------------------------\n\nTITLE: Setting WAL Level to Logical for Postgres Logical Replication Using SQL\nDESCRIPTION: Sets the Write-Ahead Log (WAL) level to 'logical' in Postgres to enable logical replication, which is necessary for Windmill triggers. This requires executing an SQL command via ALTER SYSTEM and restarting the database for the change to take effect. Ensures that changes to tables can be streamed to subscribers.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/46_postgres_triggers/index.mdx#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER SYSTEM SET wal_level = 'logical';\n```\n\n----------------------------------------\n\nTITLE: Extracting Phone Numbers from Text Using Regular Expressions in Python\nDESCRIPTION: This snippet demonstrates Python’s re library to identify and extract phone numbers from provided text. It compiles a regular expression pattern for various phone number formats (with/without area codes, separators, and extensions) and returns a list of all matched numbers. The function expects a string of unstructured input and outputs a list of strings, with dependencies limited to the standard library. Ensure text values contain valid or expected phone number patterns for effective extraction.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom typing import List\n\n\ndef main(\n    text: str = \"Example of text with several numbers formats \\n Los Pollos Hermanos \\n 8500 Pan American Fwy NE, \\n Albuquerque, NM 87113, USA \\n 505-503-4455 \\n 234-455-9493 \") -> List[str]:\n    phoneRegex = re.compile(\n        r\"\"\"(\n        (\\d{3}|\\(\\d{3}\\))?                 # area code\n        (\\s|-|\\.)?                             # separator\n        (\\d{3})                               # first 3 digits\n        (\\s|-|\\.)                               # separator\n        (\\d{4})                               # last 4 digits\n        (\\s*(ext|x|ext.)\\s*(\\d{2,5}))?    # extension\n        )\"\"\",\n        re.VERBOSE,\n    )\n\n    matches = []\n    for numbers in phoneRegex.findall(text):\n        matches.append(numbers[0])\n\n    return matches\n```\n\n----------------------------------------\n\nTITLE: Returning PNG Image (Simplified) - TypeScript\nDESCRIPTION: This snippet shows how to return a PNG image. The image content must be base64 encoded, provided directly as the return value, without needing a nested object. The image is displayed in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"png\": base64Image }\n```\n\n----------------------------------------\n\nTITLE: Declaring Java Dependencies with Coursier in Windmill Script\nDESCRIPTION: This snippet demonstrates how to declare external Java library dependencies for a Windmill Java script using comments with the //requirements directive. The format follows groupId:artifactId:version syntax compatible with Maven and Ivy repositories. Declaring dependencies at the top of the script enables Windmill's integration with Coursier to automatically fetch and cache required libraries before execution. This example includes dependencies for Gson 2.8.9 and cowsay 1.1.0. Proper dependency management is essential for using third-party APIs within Windmill Java scripts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/13_java_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n//requirements: \\n//groupId:artifact:Id:version\\n//com.google.code.gson:gson:2.8.9\\n//com.github.ricksbrown:cowsay:1.1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring environment variables for custom certificates in Docker\nDESCRIPTION: This Docker configuration snippet demonstrates how to set environment variables such as DENO_CERT to point to custom CA certificates when using Deno with private npm registries exposing custom certificates, ensuring secure connections.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/14_dependencies_in_typescript/index.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nwindmill_worker:\n  ...\n  environment:\n    ...\n    - DENO_CERT=/custom-certs/root-ca.crt\n```\n\n----------------------------------------\n\nTITLE: Processing data with Polars and S3 in Windmill\nDESCRIPTION: Python script demonstrating how to read from S3, process data with Polars, and write results back to S3 using Windmill's S3 integration. This approach leverages lazy evaluation for efficient data processing and includes configuration for both default workspace S3 resources and designated resources.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/11_persistent_storage/large_data_files.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#requirements:\npolars==0.20.2\n#s3fs==2023.12.0\n#wmill>=1.229.0\n\nimport wmill\nfrom wmill import S3Object\nimport polars as pl\nimport s3fs\n\n\ndef main(input_file: S3Object):\n    bucket = wmill.get_resource(\"<PATH_TO_S3_RESOURCE>\")[\"bucket\"]\n\n    # this will default to the workspace S3 resource\n    storage_options = wmill.polars_connection_settings().storage_options\n    # this will use the designated resource\n    # storage_options = wmill.polars_connection_settings(\"<PATH_TO_S3_RESOURCE>\").storage_options\n\n    # input is a parquet file, we use read_parquet in lazy mode.\n    # Polars can read various file types, see\n    # https://pola-rs.github.io/polars/py-polars/html/reference/io.html\n    input_uri = \"s3://{}/{}\".format(bucket, input_file[\"s3\"])\n    input_df = pl.read_parquet(input_uri, storage_options=storage_options).lazy()\n\n    # process the Polars dataframe. See Polars docs:\n    # for dataframe: https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/index.html\n    # for lazy dataframe: https://pola-rs.github.io/polars/py-polars/html/reference/lazyframe/index.html\n    output_df = input_df.collect()\n    print(output_df)\n\n    # To write back the result to S3, Polars needs an s3fs connection\n    s3 = s3fs.S3FileSystem(**wmill.polars_connection_settings().s3fs_args)\n    output_file = \"output/result.parquet\"\n    output_uri = \"s3://{}/{}\".format(bucket, output_file)\n    with s3.open(output_uri, mode=\"wb\") as output_s3:\n        # persist the output dataframe back to S3 and return it\n        output_df.write_parquet(output_s3)\n\n    return S3Object(s3=output_file)\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Logic Functions in TypeScript/Deno/Bun by Relative Path\nDESCRIPTION: This TypeScript example demonstrates importing multiple exports (main as foo, util) from another TypeScript script using a relative path. This works for Deno and Bun runtimes as supported by Windmill, presuming both scripts exist at the specified locations and permissions permit access. The imported functions become available for use in the new script. The '.ts' extension is required for Deno, but optional for Bun.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/5_sharing_common_logic/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { main as foo, util } from '../my_script_path.ts';\n```\n\n----------------------------------------\n\nTITLE: Listing Resources using wmill CLI (bash)\nDESCRIPTION: This bash snippet demonstrates the command to list all resources in the remote workspace. It requires the `wmill` command-line tool to be installed and configured correctly.  The output will be a list of resources, typically displayed in a formatted manner by the CLI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/resource.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwmill resource\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads with Multipart FormData in Windmill Scripts - Python\nDESCRIPTION: Python example showing how to handle multipart/form-data payloads with text fields and file uploads in a Windmill webhook script. It leverages the 'wmill' library for the S3Object type and typing.List for a list of these objects. The 'main' function receives a string and a list of S3Objects representing files uploaded to workspace object storage, and returns the list. This snippet is useful for processing form submissions with file data in Python scripts running in Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\nfrom typing import List\n\ndef main(mytextfield: str, myfilefield: List[wmill.S3Object]):\n    return myfilefield\n```\n\n----------------------------------------\n\nTITLE: Remote Path Format - JavaScript\nDESCRIPTION: This snippet defines the format for remote paths used within the Windmill system.  The path is structured to represent locations within the platform, starting with a prefix indicating scope (user, group, or folder) followed by username/group/folder and further nested directories.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/flow.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n<u|g|f>/<username|group|folder>/...\n```\n\n----------------------------------------\n\nTITLE: Building the Custom React Component as IIFE - Bash\nDESCRIPTION: This command compiles the React component source code into an Immediately Invoked Function Expression (IIFE) JavaScript bundle suitable for integration with Windmill. It assumes the build script is set up in package.json and that the project's configuration files (including vite.config.ts) are properly customized. The output file is typically created as dist/cc.iife.js for uploading into Windmill's platform. Successful execution produces a distributable JavaScript file; build errors are reported in the console.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_react_components.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Stop Logic (`stop_after_if`) in TypeScript\nDESCRIPTION: Defines the `stop_after_if` type in TypeScript, used within a `FlowModule` to implement conditional halting or suspension of a flow. It includes a JavaScript expression (`expr`) evaluated against the module's result to determine if the flow should stop, a `skip_if_stopped` boolean flag relevant for frequently triggered monitoring flows, and an optional `suspend` integer specifying the number of external resume events required to continue execution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/openflow/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype stop_after_if = {\n\texpr: string;\n\tskip_if_stopped: boolean;\n\tsuspend?: integer;\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Database Initialization Script\nDESCRIPTION: This snippet uses `curl` to download an SQL initialization script from GitHub and then applies it to the PostgreSQL database specified by `$DATABASE_URL` using `psql`. This script creates the necessary roles and permissions for Windmill to function correctly without superuser privileges.  Ensure `$DATABASE_URL` is properly set before running this command.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/windmill-labs/windmill/main/init-db-as-superuser.sql -o init-db-as-superuser.sql\npsql <DATABASE_URL> -f init-db-as-superuser.sql\n```\n\n----------------------------------------\n\nTITLE: Triggering Windmill Webhooks Using cURL Synchronous GET Request with Payload - Bash\nDESCRIPTION: This snippet shows how to trigger a synchronous Windmill webhook via a GET request passing the payload as a URL-safe base64 encoded JSON string in the 'payload' query parameter. The bearer token is provided via the Authorization header. Required inputs are the webhook URL, the base64 encoded JSON payload, and the authorization token. The endpoint will execute the script synchronously and return its result. This method allows triggering scripts that accept GET requests with parameters.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n## Request with Header\".\ncurl -X GET \\\n    -H \"Content-Type: application/json\"    \\\n    -H \"Authorization: Bearer supersecret\" \\\n    \".../w/demo/jobs/run_wait_result/p/u/bot/hello_world_deno?payload=<URL_SAFE_BASE64_ENCODED_JSON>\"\n```\n\n----------------------------------------\n\nTITLE: Generating OIDC Token via REST API - Bash\nDESCRIPTION: This snippet demonstrates how to generate an OIDC token using a REST API call in Bash, leveraging the workspace bearer token and targeting a specific token audience. Required environment variables include WM_TOKEN (authentication bearer), BASE_INTERNAL_URL (Windmill instance base URL), and WM_WORKSPACE (the relevant workspace). The audience (MY_AUDIENCE) must be set precisely as required by the target API, otherwise the request will be rejected. The response is a JWT used for downstream authentication.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -X POST -H \"Authorization: Bearer $WM_TOKEN\" \"$BASE_INTERNAL_URL/api/w/$WM_WORKSPACE/oidc/token/MY_AUDIENCE\"\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in JSX\nDESCRIPTION: Imports the DocCard component from the site's component library for displaying documentation cards in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/script_editor/script_kinds.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Setting Component Tabs with setTab\nDESCRIPTION: Shows how to programmatically set the active tab for tabbed components.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsetTab(id: string, index: string)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsetTab('a', 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tabs Display Modes\nDESCRIPTION: Defines the `Tabs Kind` setting which determines how the tabs are visually rendered. The property specifies whether the tabs appear horizontally, vertically, as an accordion, or are hidden on view. The setting is not connectable or templatable, with 'Tabs' as the default mode. Essential for customizing the UI based on user preferences or design requirements.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/tabs.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name      |               Type               | Connectable | Templatable | Default | Description                   |\n| --------- | :------------------------------: | :---------: | :---------: | :-----: | ----------------------------- |\n| Tabs Kind | Tabs, Sidebar, Accordion, Invisible on view |    false    |    false    |  Tabs   | The display mode of the tabs. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger Service in Docker Compose (YAML)\nDESCRIPTION: Defines a basic Jaeger service within a `docker-compose.yml` file. It uses the latest Jaeger image, exposes the Jaeger UI on port 16686, and makes the OpenTelemetry collector endpoint available internally on port 4317.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/otel/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  jaeger:\n    image: jaegertracing/jaeger:latest\n    ports:\n      - \"16686:16686\"\n    expose:\n      - 4317\n```\n\n----------------------------------------\n\nTITLE: Fetching and Sourcing Bash Script for Logic Reuse\nDESCRIPTION: This Bash snippet illustrates how to fetch and source a raw bash script from a Windmill instance using curl. Dependencies are curl, a valid authorization token, and access to the target Windmill API endpoint and workspace. The fetched script is sourced to provide additional shell logic. Replace <Token>, <INSTANCE>, <workspace>, and <path> with relevant values. Input must be a valid shell script; incorrect input may result in errors or security issues.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/5_sharing_common_logic/index.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: Bearer <Token>\" <INSTANCE>/api/w/<workspace>/scripts/raw/p/<path>.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Windmill Client Configuration in Bun\nDESCRIPTION: This snippet demonstrates how to set the Windmill client configuration in Bun using environment variables for the token and base URL. It defaults to 'no_token' and 'http://localhost:8000' if the environment variables are not set.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/run_locally.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nsetClient(\n\tBun.env.get('WM_TOKEN') ?? 'no_token',\n\tBun.env.get('BASE_INTERNAL_URL') ?? 'http://localhost:8000'\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Bash for Windmill Setup\nDESCRIPTION: This bash snippet demonstrates how to create an .env file containing environment variables used in the Docker Compose configuration for Windmill. It sets the PostgreSQL database password and reserves space for the public base URL of the Windmill instance. These variables are essential for connecting services securely and for defining runtime parameters.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-14-selenium-integration/index.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nDB_PASSWORD=changeme\n#use your public base url here\n```\n\n----------------------------------------\n\nTITLE: Importing shared logic using TypeScript relative import syntax\nDESCRIPTION: This code example demonstrates how to import functions or utilities from other TypeScript scripts located within the same project, using relative import paths. It supports development with Bun and Deno environments, allowing seamless code sharing and modularization.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/14_dependencies_in_typescript/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { main as foo, util } from './my_script_path';\n```\n\n----------------------------------------\n\nTITLE: Switching Workspaces using Windmill CLI - Bash\nDESCRIPTION: This command switches the CLI's active workspace to the specified workspace_name. The workspace must already be registered locally. It updates the user's context for subsequent CLI operations. Only the workspace_name is required. Prerequisite: Windmill CLI installed and configured with the target workspace.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/workspace-management.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace switch <workspace_name>\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Background Threads in Java\nDESCRIPTION: Demonstrates how to use Java's built-in Thread class by implementing the Runnable interface to run a background task. The snippet shows defining the task in the run method, starting it with start(), and synchronizing with join() to wait for task completion. It requires no external dependencies other than the Java standard library. The input is the code executing in parallel, and output comprises console logs indicating task progress and completion. This basic approach is suitable for single background jobs but limited in managing multiple tasks or thread pools.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class BackgroundTask implements Runnable {\n    @Override\n    public void run() {\n        System.out.println(\"Background task started\");\n        try {\n            Thread.sleep(5000); // Simulate a long-running task\n        } catch (InterruptedException e) {\n            System.out.println(\"Background task interrupted\");\n        }\n        System.out.println(\"Background task finished\");\n    }\n\n    public static void main(String[] args) {\n        Thread thread = new Thread(new BackgroundTask());\n        thread.start(); // Start the background task\n\n        System.out.println(\"Main thread continues to run...\");\n\n        try {\n            thread.join(); // Wait for the background task to complete\n        } catch (InterruptedException e) {\n            System.out.println(\"Main thread interrupted\");\n        }\n\n        System.out.println(\"Main thread finished\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JavaScript Path to JSON Path in Rust\nDESCRIPTION: Rust code that converts JavaScript-style dot notation paths to PostgreSQL jsonb path arrays. This transformation enables direct jsonb path querying without needing to evaluate the full JavaScript expression.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-22-why-is-windmill-the-fastest-workflow-engine/index.mdx#_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\njson*path.map(|x| x.split(\".\").map(|x| x.to_string()).collect::<Vec<*>>())\n```\n\n----------------------------------------\n\nTITLE: Performing Sentiment Analysis using NLTK in Python\nDESCRIPTION: This script demonstrates how to carry out sentiment analysis on text using the Natural Language Toolkit (NLTK) and its SentimentIntensityAnalyzer. It automatically downloads the 'vader_lexicon' resource required for sentiment scoring. The main function accepts a text string as input and returns a dictionary of sentiment polarity scores. Dependencies include the 'nltk' package and internet access for downloading resources. Inputs: a 'text' string; Outputs: a dictionary with sentiment scores.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nnltk.download(\"vader_lexicon\")\n\ndef main(text: str = \"Wow, NLTK is really powerful!\"):\n    return SentimentIntensityAnalyzer().polarity_scores(text)\n```\n\n----------------------------------------\n\nTITLE: Setting Windmill Client Configuration in Deno/Bun\nDESCRIPTION: This snippet shows how to directly configure the Windmill client within Deno or Bun scripts, setting the token and API base URL. It allows for programmatic configuration of the client connection.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/run_locally.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nwmill.setClient(<TOKEN>, <API BASE URL>)\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating a Workspace Directory with Bash\nDESCRIPTION: This bash snippet demonstrates the creation of a new workspace folder and navigation into it, acting as the starting point for initializing a local Windmill workspace. It requires a Unix-like shell and user write permissions. The input is a folder name (myworkspace), and the output is an empty directory ready for workspace synchronization. No dependencies other than a shell are required.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir myworkspace\ncd myworkspace\n```\n\n----------------------------------------\n\nTITLE: validateAll Function Signature\nDESCRIPTION: This code snippet defines the signature of the `validateAll` function. The `validateAll` function is used to set all fields of a form in a Validate state. It takes the `id` of the form and a `key` parameter.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/modal_form.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n`validateAll(id: string, key: string)`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Result with get_result (Python)\nDESCRIPTION: Method signature for `get_result`. This client method fetches the result of a completed Windmill job specified by its `job_id`. The result is returned as a Python dictionary (`Dict[str, Any]`).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/python_client.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef get_result(self, job_id: str) -> Dict[str, Any]\n```\n\n----------------------------------------\n\nTITLE: Generating and Using OIDC Token with AWS STS - Python\nDESCRIPTION: This Python snippet illustrates generating an OIDC token using the Windmill SDK and calling AWS STS via boto3 to assume a role using that token. It requires the 'wmill' Python SDK and 'boto3' for AWS interaction. The main function initializes an STS client, requests an ID token for sts.amazonaws.com, and sends assume_role_with_web_identity to AWS. It prints out the temporary credentials received. Required parameters are AWS RoleArn, session name, and correct Windmill environment configuration. Outputs AWS credentials as a dictionary.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/29_oidc/index.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\nimport boto3\n\ndef main():\n\n    sts = boto3.client(\"sts\")\n    token = wmill.get_id_token(\"sts.amazonaws.com\")\n\n    credentials = sts.assume_role_with_web_identity(\n        RoleArn=\"arn:aws:iam::000000000000:role/my_aws_role\",\n        WebIdentityToken=token,\n        RoleSessionName=\"my_session\",\n    )\n\n    print(credentials)\n```\n\n----------------------------------------\n\nTITLE: Basic Ansible Playbook Example\nDESCRIPTION: This is a complete, minimal Ansible playbook example demonstrating a simple echo task and how to write to the `result.json` file for returning values.  It defines hosts, connection type, a variable, and a debug task. This is designed to be run within the Windmill platform using the YAML document before it.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n--- \n- name: Echo\n  hosts: 127.0.0.1\n  connection: local\n  vars:\n    my_result:\n      a: 2\n      b: true\n      c: \"Hello\"\n\n  tasks:\n  - name: Print debug message\n    debug:\n      msg: \"Hello, {{world_qualifier}} world!\"\n  - name: Write variable my_result to result.json\n    delegate_to: localhost\n    copy:\n      content: \"{{ my_result | to_json }}\"\n      dest: result.json\n```\n\n----------------------------------------\n\nTITLE: Importing setup commands for React components - Bash\nDESCRIPTION: Provides shell commands to clone a template project, install dependencies, start the development server, and build the component for use in Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-23-1-react-components/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Using absolute import in TypeScript with path\nDESCRIPTION: This snippet illustrates how to import modules using absolute paths in TypeScript, necessary for large projects with deep directory structures. Proper configuration in tsconfig.json enables this feature for Windmill scripts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/14_dependencies_in_typescript/index.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { main as foo, util } from '/f/<foldername>/script_name.ts';\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component\nDESCRIPTION: This code snippet imports the DocCard component from the specified location within the project. This component appears to be utilized to build structured documentation elements such as cards.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/chartjs.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Enabling Enterprise Edition in Helm Values\nDESCRIPTION: This snippet shows how to enable the Enterprise Edition of Windmill by setting the `enterprise.enable` flag to `true` in the `values.yaml` file used for Helm deployment.  It is necessary for unlocking EE features and requires a separate license.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nenterprise:\n\tenable: true\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers in Windmill Webhook Response\nDESCRIPTION: How to add custom HTTP headers to a webhook response by including the 'windmill_headers' property with key-value pairs. The specified headers will be added to the HTTP response.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"windmill_headers\": {\"X-Custom-Header\": \"foo\"},\n\t\"result\": {\n\t\t\"Hello\": \"World\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Tabs with Frontend Scripts\nDESCRIPTION: Details the `setTab` function accessible via frontend scripts, allowing programmatic control of the active tab by specifying an identifier and index. Facilitates dynamic UI updates based on user actions or application logic, improving interactivity.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/tabs.mdx#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name   |        Parameters        | Description          | Example       |\n| ------ | :----------------------: | -------------------- | ------------- |\n| [setTab](../3_app-runnable-panel.mdx#settab) | id: string, index:number | Set the current tab. | setTab('a',1) |\n```\n\n----------------------------------------\n\nTITLE: Example Crontab Entry for Weekly Script Execution\nDESCRIPTION: This crontab entry schedules the `/usr/bin/send-reminder.sh` script to run at 9:00 AM (0 minutes past 9) every Monday (day 1 of the week). The asterisks indicate it runs on any day of the month and in any month. Specifying the full path to the script is crucial for reliability.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-06-28-edit-crontab/index.mdx#_snippet_0\n\nLANGUAGE: Crontab\nCODE:\n```\n0 9 * * 1 /usr/bin/send-reminder.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Ansible Script Arguments\nDESCRIPTION: This YAML snippet demonstrates how to define the arguments that an Ansible script will accept.  It uses the `extra_vars` section and specifies the type for each argument (e.g., string, object, array). These arguments are exposed in the Windmill UI allowing users to input data. It supports standard OpenAPI data types.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nextra_vars:\n  world_qualifier:\n    type: string\n  nested_object:\n    type: object\n    properties:\n      a:\n        type: string\n      b:\n        type: number\n  some_arr:\n    type: array\n    objects:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Querying Data with DuckDB from AWS S3\nDESCRIPTION: This code demonstrates how to query a Parquet file stored in an AWS S3 bucket using DuckDB. It configures DuckDB to connect to S3 using `wmill` resource settings. The snippet reads the data, performs a simple count query, and writes the count back to S3 as a new Parquet file.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/27_data_pipelines/index.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport wmill\nfrom wmill import S3Object\nimport duckdb\n\n\ndef main(input_file: S3Object):\n    bucket = wmill.get_resource(\"u/admin/windmill-cloud-demo\")[\"bucket\"]\n\n    # create a DuckDB database in memory\n    # see https://duckdb.org/docs/api/python/dbapi\n    conn = duckdb.connect()\n\n    # this will default to the workspace S3 resource\n    args = wmill.duckdb_connection_settings().connection_settings_str\n    # this will use the designated resource\n    # args = wmill.duckdb_connection_settings(\"<PATH_TO_S3_RESOURCE>\").connection_settings_str\n\n    # connect duck db to the S3 bucket - this will default to the workspace S3 resource\n    conn.execute(args)\n\n    input_uri = \"s3://{}/{}\".format(bucket, input_file[\"s3\"])\n    output_file = \"output/result.parquet\"\n    output_uri = \"s3://{}/{}\".format(bucket, output_file)\n\n    # Run queries directly on the parquet file\n    query_result = conn.sql(\n        \"\"\"\n        SELECT * FROM read_parquet('{}')\n    \"\"\".format(\n            input_uri\n        )\n    )\n    query_result.show()\n\n    # Write the result of a query to a different parquet file on S3\n    conn.execute(\n        \"\"\"\n        COPY (\n            SELECT COUNT(*) FROM read_parquet('{input_uri}')\n        ) TO '{output_uri}' (FORMAT 'parquet');\n    \"\"\".format(\n            input_uri=input_uri, output_uri=output_uri\n        )\n    )\n\n    conn.close()\n    return S3Object(s3=output_file)\n```\n\n----------------------------------------\n\nTITLE: Converting Image to JPEG using Pillow (Python)\nDESCRIPTION: This script converts an image (received as a base64 encoded string) to JPEG format using the Pillow library.  The script first decodes the base64 encoded image data, then it opens the image, converts it to RGB format (if it's not already), and saves the image as a JPEG within a BytesIO object. Finally, it encodes the JPEG data back into a base64 string and returns it as a dictionary containing a file object. The output contains both the file and a separate JSON element representing the JPEG image.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport base64\nfrom PIL import Image, UnidentifiedImageError\nimport io\n\n\n# Define the main function with the specified parameter types\ndef main(image_base64: str):\n    try:\n        # Decode the base64 encoded image\n        image_data = base64.b64decode(image_base64)\n\n        # Convert the binary data to an image\n        image = Image.open(io.BytesIO(image_data))\n\n        # Convert the image to JPEG format\n        # Note: We use BytesIO to handle the conversion in memory\n        with io.BytesIO() as output:\n            image.convert(\"RGB\").save(output, format=\"JPEG\")\n            jpeg_data = output.getvalue()\n\n        # Encode the JPEG image to base64\n        jpeg_base64 = base64.b64encode(jpeg_data).decode(\"utf-8\")\n\n        # Return the base64 encoded JPEG image\n\n        return { \"render_all\": [ { \"file\": { \"content\": jpeg_base64, \"filename\": \"image.jpg\" } }, { \"jpeg\": jpeg_base64 } ]}\n\n    except UnidentifiedImageError:\n        # Handle the case where the image cannot be identified\n        return \"Error: The provided data does not represent a valid image.\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Approver List from Input - Windmill - TypeScript\nDESCRIPTION: This simple TypeScript script demonstrates how to access the list of users who approved a preceding approval step. It accepts an input parameter, named `list_of_approvers` in this example, which is intended to be connected to the `approvers` output key of the approval step. The script then simply returns this list, making the approver information available for subsequent steps.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(list_of_approvers) {\n  return list_of_approvers\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component (JSX)\nDESCRIPTION: This snippet imports the DocCard component from a specified path. This component likely handles the display of documentation cards with titles, descriptions, and links within the page. It's a dependency for rendering the documentation's navigational elements.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/form_input.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Enabling Bash shell completions for Windmill CLI\nDESCRIPTION: Configures Bash to provide command completion for the Windmill CLI by adding a source line to the Bash configuration file.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource <(wmill completions bash)\n```\n\n----------------------------------------\n\nTITLE: Simplified Hello World Script in TypeScript\nDESCRIPTION: A simplified TypeScript script that takes a name parameter and returns it. It demonstrates the clean, minimal structure of a functional Windmill script with console logging and proper return handling.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/1_typescript_quickstart/index.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(name: string) {\n\tconsole.log(\"Hello world! Oh, it's you %s? Greetings!\", name);\n\treturn { name };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Worker Tags with Environment Variables in Bash\nDESCRIPTION: Demonstrates how to assign tags to workers using the WORKER_TAGS environment variable when using Windmill Community Edition. This allows workers to listen for specific job types.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/9_worker_groups/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nWORKER_TAGS=tag1,tag2\n```\n\n----------------------------------------\n\nTITLE: Calculating Cart Total Price\nDESCRIPTION: This is a template string expression that calculates the total price of the items in the cart for display. It uses `ap.result`, likely the result set of a table showing cart contents.  It uses `reduce` to sum the `price` property of each product in the `ap.result` array, dividing it by 100 (likely to convert cents to CHF). The result is formatted as a string in CHF.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nTotal: ${ap.result.reduce((accu, curr) => accu + curr.price/100, 0)} CHF\n```\n\n----------------------------------------\n\nTITLE: Invoking Bash Script with a Positional Argument - Bash\nDESCRIPTION: This snippet demonstrates invoking a Bash script named 'hello_world.sh' with a single positional argument. It highlights how arguments are supplied after the script name and accessed in the script using numbered variables ($1, $2, etc.). No dependencies are required beyond a Unix-based shell environment. Input is the name provided via command line; output is not produced directly by this invocation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-27-bash-script-arguments/index.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./hello_world.sh Ruben\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Python Resource Types in Windmill\nDESCRIPTION: Demonstrates how Windmill resource types (like AWS credentials) are defined using Python's TypedDict and used as typed parameters within the 'main' function. The example shows accessing resource fields within the function body. This structure allows Windmill to manage and inject sensitive credentials or configurations.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass aws(TypedDict):\n    region: str\n    awsAccessKeyId: str\n    awsSecretAccessKey: str\n\ndef main(credentials: aws):\n    ...\n    region = credentials['region']\n    access_key_id = credentials['awsAccessKeyId']\n    secret_access_key = credentials['awsSecretAccessKey']\n    ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Client ID and Secret from Snowflake\nDESCRIPTION: This SQL snippet queries Snowflake to retrieve the client ID and client secret associated with a previously created OAuth integration by parsing JSON output from the SYSTEM$SHOW_OAUTH_CLIENT_SECRETS function. The user must replace the placeholder with the actual integration name. This is used to obtain credentials needed for Windmill OAuth configuration.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/2_setup_oauth/index.mdx#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n-- NOTE: replace <OAuth integration name> with the name of the OAuth integration you created above.\nWITH oauth_data AS (\n  SELECT PARSE_JSON(SYSTEM$SHOW_OAUTH_CLIENT_SECRETS('<OAuth integration name>')) AS oauth_json\n)\nSELECT\n    oauth_json:OAUTH_CLIENT_ID::string AS client_id,\n    oauth_json:OAUTH_CLIENT_SECRET::string AS client_secret\nFROM\n    oauth_data;\n```\n\n----------------------------------------\n\nTITLE: Locating Nushell Executable Path in PowerShell\nDESCRIPTION: This snippet uses PowerShell to find Nushell's executable location using 'where.exe'. It requires Nushell to be present in the system PATH. The output will show the absolute path to 'nu.exe'.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/17_windows_workers/index.mdx#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nwhere.exe nu.exe \n\n```\n\n----------------------------------------\n\nTITLE: Rendering Vertical Split Panes Example with React JSX\nDESCRIPTION: This snippet renders a video element demonstrating the vertical split panes functionality. It uses React JSX with className to style the video with borders, rounded corners, and object cover styling. The video auto-plays, includes controls, and sources a local MP4 file. This snippet relies on React and CSS styling conventions and serves as a visual aid for users to understand vertical splitting behavior.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/vertical_split_panes.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<video\\n\\tclassName=\\\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\\\"\\n\\tautoPlay\\n\\tcontrols\\n\\tsrc=\\\"/videos/vertical_split.mp4\\\"\\n\\talt=\\\"vertical split panes\\\"\\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Issue Count Time Series for Chart - Deno/TypeScript\nDESCRIPTION: This Deno/TypeScript script processes a list of issue records (with 'created_at' timestamps) and returns the count of issues created per day for the last N days, defaulting to 30. It produces an object containing 'data' (array of daily issue counts) and 'labels' (array of corresponding ISO date strings). The input 'issues' must be an array of issue objects with a 'created_at' string, and 'days' is a number representing how many days to include. Returns empty data and labels if the input is null or empty.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-31-issue-tracker-p2/index.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(issues: { created_at: string }[], days: number = 30) {\n\tif (!issues?.length) {\n\t\treturn { data: [], labels: [] };\n\t}\n\tconst dates = [...Array(days)]\n\t\t.map((_, i) => {\n\t\t\tconst d = new Date();\n\t\t\td.setDate(d.getDate() - i);\n\t\t\treturn d.toISOString().split('T')[0];\n\t\t})\n\t\t.reverse();\n\tconst issueNumbers = dates.map((date) => {\n\t\treturn issues.filter(({ created_at }) => created_at.startsWith(date)).length;\n\t});\n\treturn {\n\t\tdata: issueNumbers,\n\t\tlabels: dates\n\t};\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining SyncOptions Interface (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the `SyncOptions` interface, which specifies the available options for synchronizing Windmill resources. It lists various boolean flags, string arrays for includes/excludes, and a string for selecting the default TypeScript language ('bun' or 'deno').\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/sync.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SyncOptions {\n\traw?: boolean;\n\tyes?: boolean;\n\tskipPull?: boolean;\n\tfailConflicts?: boolean;\n\tplainSecrets?: boolean;\n\tjson?: boolean;\n\tskipVariables?: boolean;\n\tskipResources?: boolean;\n\tskipSecrets?: boolean;\n\tincludeSchedules?: boolean;\n\tincludeUsers?: boolean;\n\tincludeGroups?: boolean;\n\tincludeSettings?: boolean;\n\tmessage?: string;\n\tincludes?: string[];\n\textraIncludes?: string[];\n\texcludes?: string[];\n\tdefaultTs?: 'bun' | 'deno';\n\tcodebases?: Codebase[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Codebases in wmill.yaml\nDESCRIPTION: Defines the configuration for Windmill codebases within the `wmill.yaml` file. Specifies the `relative_path` to the codebase directory relative to the config file and uses `includes` and `excludes` patterns (glob syntax) to determine which files are included in the bundle built by `wmill sync push`. Windmill uses the hash of this configuration and the codebase files to decide when to rebuild the bundle.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/33_codebases_and_bundles/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncodebases:\n  - relative_path: ../codebase\n    includes:\n      - '**'\n    excludes: []\n```\n\n----------------------------------------\n\nTITLE: Listening for incoming TCP connections using Tokio in Rust\nDESCRIPTION: This snippet initializes a TCP listener on localhost port 2525, handling each incoming connection asynchronously with tokio::spawn. It employs Tokio's TcpListener to accept connections, spawning a new task for each, and logs connection successes or errors, following asynchronous programming patterns in Rust for scalable network service design.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-10-07-email-triggers/index.mdx#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse tokio::net::{TcpListener, TcpStream};\nuse tokio::io::{AsyncBufReadExt, AsyncWriteExt, BufReader, BufWriter};\nuse std::net::SocketAddr;\n\nasync fn listen() -> anyhow::Result<()> {\n    let addr = SocketAddr::from(([127, 0, 0, 1], 2525));\n    let listener = TcpListener::bind(addr).await?\n;\n    tracing::info!(\"SMTP server listening on {}\", addr);\n\n    loop {\n        match listener.accept().await {\n            Ok((stream, _)) => {\n                tokio::spawn(async move {\n                    if let Err(err) = handle_connection(stream).await {\n                        tracing::error!(\"Error handling SMTP connection: {:?}\", err);\n                    };\n                });\n            }\n            Err(err) => {\n                tracing::error!(\"Error establishing SMTP connection: {:?}\", err);\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Map Snowflake Table Names for Select Component\nDESCRIPTION: This JavaScript code transforms the result of the Snowflake query into a format suitable for a Windmill Select component. It maps the `TABLE_NAME` field to both the `label` and `value` properties, creating a dropdown list of table names.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/snowflake_app_with_user_roles/index.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbg_0.result.map(_ => ({ value: _.TABLE_NAME, label: _.TABLE_NAME }))\n```\n\n----------------------------------------\n\nTITLE: Installing uv for Python Executor Using PowerShell\nDESCRIPTION: This snippet installs the 'uv' package manager for Python by downloading and running the installation script directly from the source URL in PowerShell. It requires an internet connection and PowerShell with script execution rights. The command avoids typical execution policy restrictions and prepares the Python environment for use with Windmill workers.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/17_windows_workers/index.mdx#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n```\n\n----------------------------------------\n\nTITLE: VS Code Launch Configuration for Deno\nDESCRIPTION: This JSON snippet configures VS Code for debugging Deno scripts. It specifies the runtime executable, arguments, environment variables, and .env file for local Windmill development.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/run_locally.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Deno\",\n      \"type\": \"pwa-node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"runtimeExecutable\": \"deno\",\n      \"runtimeArgs\": [\"run\", \"--inspect-brk\", \"-A\", \"${file}\"],\n      \"env\" {\n        \"BASE_INTERNAL_URL\": \"https://app.windmill.dev\",\n        \"WM_TOKEN\": \"ThisIsAToken\",\n        \"WM_WORKSPACE\": \"workspace_id\"\n      },\n      \"envFile\": \".env\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Processing data with DuckDB and S3 in Windmill\nDESCRIPTION: Python script showing how to run SQL queries on Parquet files in S3 using DuckDB within Windmill. The code demonstrates setting up the connection, executing queries directly on S3 files, and writing results back to S3 in Parquet format.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/11_persistent_storage/large_data_files.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#requirements:\nwmill>=1.229.0\n#duckdb==0.9.1\n\nimport wmill\nfrom wmill import S3Object\nimport duckdb\n\n\ndef main(input_file: S3Object):\n    bucket = wmill.get_resource(\"u/admin/windmill-cloud-demo\")[\"bucket\"]\n\n    # create a DuckDB database in memory\n    # see https://duckdb.org/docs/api/python/dbapi\n    conn = duckdb.connect()\n\n    # this will default to the workspace S3 resource\n    args = wmill.duckdb_connection_settings().connection_settings_str\n    # this will use the designated resource\n    # args = wmill.duckdb_connection_settings(\"<PATH_TO_S3_RESOURCE>\").connection_settings_str\n\n    # connect duck db to the S3 bucket - this will default to the workspace S3 resource\n    conn.execute(args)\n\n    input_uri = \"s3://{}/{}\".format(bucket, input_file[\"s3\"])\n    output_file = \"output/result.parquet\"\n    output_uri = \"s3://{}/{}\".format(bucket, output_file)\n\n    # Run queries directly on the parquet file\n    query_result = conn.sql(\n        \"\"\"\n        SELECT * FROM read_parquet('{}')\n    \"\"\".format(\n            input_uri\n        )\n    )\n    query_result.show()\n\n    # Write the result of a query to a different parquet file on S3\n    conn.execute(\n        \"\"\"\n        COPY (\n            SELECT COUNT(*) FROM read_parquet('{input_uri}')\n        ) TO '{output_uri}' (FORMAT 'parquet');\n    \"\"\".format(\n            input_uri=input_uri, output_uri=output_uri\n        )\n    )\n\n    conn.close()\n    return S3Object(s3=output_file)\n```\n\n----------------------------------------\n\nTITLE: Initializing Windmill Documentation Cards in JSX\nDESCRIPTION: This snippet imports the DocCard component and renders multiple instances within grid layouts to represent Windmill's core concepts and features. Each DocCard is provided with props such as title, description, and href to specify the documentation topic and link. The layout uses CSS grid classes for responsive presentation. This approach modularizes documentation topics for accessibility and visual clarity in a React application. Dependencies include React and the DocCard component module from the project's source.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/index.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n\n# Core concepts\n\nOn top of its editors to build endpoints, flows and apps, Windmill comes with a set of features.\n\n## Triggers\n\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Schedules\"\n\t\tdescription=\"Scheduling allows you to define schedules for Scripts and Flows, automatically running them at set frequencies.\"\n\t\thref=\"/docs/core_concepts/scheduling\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Webhooks\"\n\t\tdescription=\"Trigger scripts and flows from webhooks.\"\n\t\thref=\"/docs/core_concepts/webhooks\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Emails\"\n\t\tdescription=\"Scripts and flows can be triggered by email messages sent to a specific email address.\"\n\t\thref=\"/docs/advanced/email_triggers\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Custom HTTP routes\"\n\t\tdescription=\"Trigger scripts and flows from custom HTTP routes.\"\n\t\thref=\"/docs/core_concepts/http_routing\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Websocket\"\n\t\tdescription=\"Trigger scripts and flows from WebSocket servers.\"\n\t\thref=\"/docs/core_concepts/websocket_triggers\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Postgres\"\n\t\tdescription=\"Trigger scripts and flows from postgres database servers.\"\n\t\thref=\"/docs/core_concepts/postgres_triggers\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Kafka\"\n\t\tdescription=\"Trigger scripts and flows from Kafka topics.\"\n\t\thref=\"/docs/core_concepts/kafka_triggers\"\n\t/>\n\t<DocCard\n\t\ttitle=\"NATS\"\n\t\tdescription=\"Trigger scripts and flows from NATS subjects.\"\n\t\thref=\"/docs/core_concepts/nats_triggers\"\n\t/>\n\t<DocCard\n\t\ttitle=\"SQS\"\n\t\tdescription=\"Trigger scripts and flows from Amazon SQS.\"\n\t\thref=\"/docs/core_concepts/sqs_triggers\"\n\t/>\n\t<DocCard\n\t\ttitle=\"MQTT\"\n\t\tdescription=\"Trigger scripts and flows from MQTT broker.\"\n\t\thref=\"/docs/core_concepts/mqtt_triggers\"\n\t/>\n\t<DocCard\n\t\ttitle=\"GCP\"\n\t\tdescription=\"Trigger scripts and flows from Google Cloud Pub/Sub messages.\"\n\t\thref=\"/docs/core_concepts/gcp_triggers\"\n\t/>\n</div>\n\n## Windmill features\n\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Architecture\"\n\t\tdescription=\"Schema of Windmill architecture\"\n\t\thref=\"/docs/misc/architecture\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Auto-generated UIs\"\n\t\tdescription=\"Windmill creates auto-generated user interfaces for scripts and flows based on their parameters.\"\n\t\thref=\"/docs/core_concepts/auto_generated_uis\"\n\t/>\n\t<DocCard\n\t\ttitle=\"JSON schema and parsing\"\n\t\tdescription=\"JSON Schemas are used for defining the input specification for scripts and flows, and specifying resource types.\"\n\t\thref=\"/docs/core_concepts/json_schema_and_parsing\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Instant preview & testing\"\n\t\tdescription=\"Windmill allows users to see and test what they are building directly from the editor, even before deployment.\"\n\t\thref=\"/docs/core_concepts/instant_preview\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Rich display rendering\"\n\t\tdescription=\"The result renderer in Windmill supports rich display rendering, allowing you to customize the display format of your results.\"\n\t\thref=\"/docs/core_concepts/rich_display_rendering\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Dependency management & imports\"\n\t\tdescription=\"Windmill's strength lies in its ability to run scripts without having to manage a package.json directly.\"\n\t\thref=\"/docs/advanced/imports\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Workflows as code\"\n\t\tdescription=\"Automate tasks and their flow with only code.\"\n\t\thref=\"/docs/core_concepts/workflows_as_code\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Draft and deploy\"\n\t\tdescription=\"Develop and cooperate in a structured way.\"\n\t\thref=\"/docs/core_concepts/draft_and_deploy\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Persistent storage & databases\"\n\t\tdescription=\"Ensure that your data is safely stored and easily accessible whenever required.\"\n\t\thref=\"/docs/core_concepts/persistent_storage\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Object storage in Windmill\"\n\t\tdescription=\"Windmill comes with native integrations with S3 and Azure Blob, making it the recommended storage for large objects like files and binary data.\"\n\t\thref=\"/docs/core_concepts/object_storage_in_windmill\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Data pipelines\"\n\t\tdescription=\"Windmill enables building fast, powerful, reliable, and easy-to-build data pipelines.\"\n\t\thref=\"/docs/core_concepts/data_pipelines\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Roles and permissions\"\n\t\tdescription=\"Control access and manage permissions within your instance and workspaces.\"\n\t\thref=\"/docs/core_concepts/roles_and_permissions\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Authentification\"\n\t\tdescription=\"Windmill provides flexible authentication options to ensure secure access to the platform.\"\n\t\thref=\"/docs/core_concepts/authentification\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Error handling\"\n\t\tdescription=\"There are 5 ways to do error handling in Windmill.\"\n\t\thref=\"/docs/core_concepts/error_handling\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Jobs\"\n\t\tdescription=\"A job represents a past, present or future `task` or `work` to be executed by a worker.\"\n\t\thref=\"/docs/core_concepts/jobs\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Jobs runs\"\n\t\tdescription=\"Get an aggregated view of past and future runs on your workspace.\"\n\t\thref=\"/docs/core_concepts/monitor_past_and_future_runs\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Resources and resource types\"\n\t\tdescription=\"Resources are structured configurations and connections to third-party systems, with Resource types defining the schema for each Resource.\"\n\t\thref=\"/docs/core_concepts/resources_and_types\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Variables and secrets\"\n\t\tdescription=\"Variables and secrets are encrypted, dynamic values used for reusing information and securely passing sensitive data within scripts.\"\n\t\thref=\"/docs/core_concepts/variables_and_secrets\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Environment variables\"\n\t\tdescription=\"Environment variables are used to configure the behavior of scripts and services, allowing for dynamic and flexible execution across different environments.\"\n\t\thref=\"/docs/core_concepts/environment_variables\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Groups and folders\"\n\t\tdescription=\"Groups and folders enable efficient permission management by grouping users with similar access levels.\"\n\t\thref=\"/docs/core_concepts/groups_and_folders\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Workers and worker groups\"\n\t\tdescription=\"Worker Groups allow users to run scripts and flows on different machines with varying specifications.\"\n\t\thref=\"/docs/core_concepts/worker_groups\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Workspace secret encryption\"\n\t\tdescription=\"When updating the encryption key of a workspace, all secrets will be re-encrypted with the new key and the previous key will be replaced by the new one.\"\n\t\thref=\"/docs/core_concepts/workspace_secret_encryption\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Caching\"\n\t\tdescription=\"Caching is used to cache the results of a script, flow, flow step or app inline scripts for a specified number of seconds.\"\n\t\thref=\"/docs/core_concepts/caching\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Handling files and binary data\"\n\t\tdescription=\"In Windmill, JSON is the primary data format used for representing information. When working with binary data, such as files, they are represented as Base64 encoded strings.\"\n\t\thref=\"/docs/core_concepts/files_binary_data\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Service logs\"\n\t\tdescription=\"View logs from any worker or servers directly within the service logs section of the search modal.\"\n\t\thref=\"/docs/core_concepts/service_logs\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Preprocessors\"\n\t\tdescription=\"Preprocessors are used to transform incoming requests before they are passed to the runnable.\"\n\t\thref=\"/docs/core_concepts/preprocessors\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Search bar\"\n\t\tdescription=\"Navigate through workspace pages & content.\"\n\t\thref=\"/docs/core_concepts/search_bar/\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Collaboration in Windmill\"\n\t\tdescription=\"Collaboration in Windmill is simplified through various features and workflows.\"\n\t\thref=\"/docs/core_concepts/collaboration\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Windmill AI\"\n\t\tdescription=\"Have AI complete code on Windmill.\"\n\t\thref=\"/docs/core_concepts/ai_generation\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Windmill Client in TypeScript (Deno)\nDESCRIPTION: Imports the `windmill-client` package for use within a Deno TypeScript environment. It leverages the `npm:` specifier to import the package directly.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/ts_client.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport * as wmill from 'npm:windmill-client@1.318.0';\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components and Hooks in JSX\nDESCRIPTION: This snippet imports the `DocCard` component from a local path (`@site/src/components/DocCard`) and the `useColorMode` hook from the Docusaurus theme common package. These imports are necessary for rendering documentation cards and potentially adjusting styles based on the current color mode (light/dark) within a Docusaurus page.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/7_apps_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { useColorMode } from '@docusaurus/theme-common';\n```\n\n----------------------------------------\n\nTITLE: Adding and Pulling a Windmill Workspace Using Windmill CLI in Bash\nDESCRIPTION: This bash snippet adds a Windmill workspace to the local machine and pulls its contents using the Windmill CLI. It requires Windmill CLI (wmill) to be installed and properly authenticated. The placeholder [workspace_id] and [remote] must be replaced by the actual workspace ID and remote URL. The output will be a local synchronized copy of the workspace, containing workspace files and folders.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace add myworkspace [workspace_id] [remote]\nwmill sync pull\n```\n\n----------------------------------------\n\nTITLE: Restricting Tags to Specific Workspaces\nDESCRIPTION: Shows how to limit a tag to specific workspaces using parentheses syntax. In this example, only 'workspace' and 'workspace2' will be able to use the 'gpu' tag.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/9_worker_groups/index.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngpu(workspace+workspace2)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Windmill Script Execution with Siege\nDESCRIPTION: Uses the `siege` command-line utility to send 500 sequential requests (`-r500 -c1`) to the Windmill script's webhook endpoint for synchronous execution and result retrieval. Requires the Windmill host address (`$WM_HOST`) and an authentication token (`$WM_TOKEN`) passed as a cookie.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/aws_lambda/index.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nsiege -r500 -c1 -v -H \"Cookie: token=$WM_TOKEN\" \"http://$WM_HOST/api/w/benchmarks/jobs/run_wait_result/p/u%2Fbenchmarksuser%2Ffibo_script\"\n```\n\n----------------------------------------\n\nTITLE: Embedding a YouTube video for LinkedIn integration overview with MDX\nDESCRIPTION: This snippet uses an MDX <iframe> component to embed a YouTube video explaining LinkedIn integration setup, with styling for aspect ratio and border, and permissions for playback features.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/linkedin.md#_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<iframe\n\tstyle={{ aspectRatio: '16/9' }}\n\t src=\"https://www.youtube.com/embed/ggJQtzvqaqA\"\n\t title=\"YouTube video player\"\n\t frameBorder=\"0\"\n\t allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\t allowFullScreen\n\t className=\"border-2 rounded-lg object-cover w-full dark:border-gray-800\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous SMTP Session Handler Using tokio-util and futures\nDESCRIPTION: This snippet defines an async function `handle_session` that manages an SMTP session over a TCP stream. It processes commands line-by-line, maintains internal state, and responds appropriately based on the SMTP protocol as per RFC 5321. It uses regex to parse email addresses and the `LinesCodec` for stream splitting. The function manages the SMTP states (`Command`, `Data`, `Quit`) and handles actions like MAIL FROM, RCPT TO, DATA, and QUIT, updating internal variables and responding with correct status codes.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-10-07-email-triggers/index.mdx#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nuse tokio_util::codec::{Framed, LinesCodec, LinesCodecError};\nuse futures::{stream::iter, SinkExt, StreamExt};\n\nasync fn handle_session(mut stream: TcpStream) -> anyhow::Result<()> {\n    let RE_SMTP_MAIL = regex::Regex::new(r\"(?i)from: ?\\<(.+?)\\>\").unwrap();\n    let RE_SMTP_RCPT = regex::Regex::new(r\"(?i)to: ?\\<(.+?)\\>\").unwrap();\n    let mut message = String::new();\n    let mut state = SmtpState::Command;\n    let mut mailfrom: Option<String> = None;\n    let mut rcpts: Vec<String> = Vec::new();\n    let mut framed = Framed::new(stream, LinesCodec::new());\n    while let Some(line_str) = framed.next().await {\n        let line = line_str?;\n        match state {\n            SmtpState::Command => {\n                let space_pos = line.find(\" \").unwrap_or(line.len());\n                let (command, arg) = line.split_at(space_pos);\n                let arg = arg.trim();\n                match &*command.trim().to_uppercase() {\n                    \"HELO\" | \"EHLO\" => {\n                        send_commands(&mut framed, vec![\"250 Hello\".to_string()]).await?;\n                    }\n                    \"MAIL\" => {\n                        if let Some(address) = RE_SMTP_MAIL.captures(arg).and_then(|cap| cap.get(1)) {\n                            mailfrom = Some(address.as_str().to_string());\n                            send_commands(&mut framed, vec![\"250 OK\".to_string()]).await?;\n                        } else {\n                            send_commands(&mut framed, vec![\"501 Syntax: MAIL From: <address>\".to_string()]).await?;\n                        }\n                    }\n                    \"RCPT\" => {\n                        if mailfrom.is_none() {\n                            send_commands(&mut framed, vec![\"503 Error: Send MAIL first\".to_string()]).await?;\n                        } else {\n                            if let Some(address) = RE_SMTP_RCPT.captures(arg).and_then(|cap| cap.get(1)) {\n                                rcpts.push(address.as_str().to_string());\n                                send_commands(&mut framed, vec![\"250 OK\".to_string()]).await?;\n                            } else {\n                                send_commands(&mut framed, vec![\"501 Syntax: RCPT TO: <address>\".to_string()]).await?;\n                            }\n                        }\n                    }\n                    \"DATA\" => {\n                        if rcpts.is_empty() {\n                            send_commands(&mut framed, vec![\"503 Error: MAIL FROM and RCPT TO must be set before sending DATA\".to_string()]).await?;\n                        } else {\n                            state = SmtpState::Data;\n                            send_commands(&mut framed, vec![\"354 End data with <CR><LF>.<CR><LF>\".to_string()]).await?;\n                        }\n                    }\n                    \"NOOP\" => {\n                        send_commands(&mut framed, vec![\"250 OK\".to_string()]).await?;\n                    }\n                    \"RSET\" => {\n                        mailfrom = None;\n                        rcpts = Vec::new();\n                        message = String::new();\n                        send_commands(&mut framed, vec![\"250 OK\".to_string()]).await?;\n                    }\n                    \"QUIT\" => {\n                        send_commands(&mut framed, vec![\"221 Bye\".to_string()]).await?;\n                        state = SmtpState::Quit;\n                    }\n                    _ => {\n                        send_commands(&mut framed, vec![\"500 Unknown command\".to_string()]).await?;\n                    }\n                }\n            }\n            SmtpState::Data => {\n                if line.trim() == \".\" {\n                    send_commands(&mut framed, vec![\"250 OK\".to_string()]).await?;\n                    mailfrom = None;\n                    rcpts = Vec::new();\n                    message = String::new();\n                    state = SmtpState::Command;\n                    handle_email(mailfrom, rcpts, message);\n                } else {\n                    message.push_str(&line);\n                    message.push_str(\"\\n\");\n                }\n            }\n            SmtpState::Quit => {\n                break;\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running a Script Synchronously with run_script_sync (Python)\nDESCRIPTION: Method signature for `run_script_sync`. This client method executes a Windmill script identified by its `hash` synchronously, waiting for completion. It accepts optional arguments (`args`) and a `verbose` flag, returning the script's result as a dictionary (`Dict[str, Any]`).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/2_clients/python_client.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef run_script_sync(self, hash: str, args: Dict[str, Any] = {}, verbose: bool = False) -> Dict[str, Any]\n```\n\n----------------------------------------\n\nTITLE: File Input Management\nDESCRIPTION: Demonstrates how to clear files from file input components.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclearFiles(id: string)\n```\n\n----------------------------------------\n\nTITLE: Locating PowerShell 7 Executable Path in PowerShell\nDESCRIPTION: This snippet identifies the installation path of 'pwsh.exe', the PowerShell 7 executable. PowerShell is required for execution. Replace any placeholders as needed; output will include the absolute path, allowing it to be used for configuration and environment variables.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/17_windows_workers/index.mdx#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nwhere.exe pwsh.exe # Note: previous versions used powershell.exe\n\n```\n\n----------------------------------------\n\nTITLE: Triggering Windmill Flow with CURL POST Request\nDESCRIPTION: This Bash snippet demonstrates how to trigger a Windmill flow using a cURL POST request. It sends a JSON payload to a specific capture endpoint, which Windmill interprets to trigger the flow and automatically configure its inputs based on the payload content. The example sets a flow input named 'foo' with an integer value of 42.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/3_editor_components.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://app.windmill.dev/api/w/windmill-labs/capture_u/u/test-user/my_flow \\\n   -H 'Content-Type: application/json' \\\n   -d '{\"foo\": 42}'\n```\n\n----------------------------------------\n\nTITLE: Sample tsconfig.json configuration for path mapping\nDESCRIPTION: This configuration snippet shows how to set up the TypeScript compiler options to support absolute import paths that map to project directories, ensuring compatibility with local editors and Windmill's environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/14_dependencies_in_typescript/index.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"compilerOptions\": {\n\t\t\"paths\": {\n\t\t\t\"/*\": [\"./*\"]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Error Message - TypeScript\nDESCRIPTION: This snippet shows how to return an error message. It expects an object associated with the \"error\" key. This object should contain \"name\", \"message\", and \"stack\" properties providing details about the error.  The error is displayed in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"error\": { \"name\": \"418\", \"message\": \"I'm a teapot\", \"stack\": \"Error: I'm a teapot\" }}\n```\n\n----------------------------------------\n\nTITLE: Fetching User-Defined Variables via API in PowerShell\nDESCRIPTION: Shows how to retrieve a Windmill variable ('u/user/foo') using `Invoke-RestMethod` in a PowerShell script. It requires the `WM_TOKEN` and `BASE_INTERNAL_URL` environment variables (accessed via `$Env:`) for authentication and API endpoint construction. The command sends an authorized GET request to the API.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/2_variables_and_secrets/index.mdx#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$Headers = @{\n  \"Authorization\" = \"Bearer $Env:WM_TOKEN\"\n}\nInvoke-RestMethod -Headers $Headers -Uri \"$Env:BASE_INTERNAL_URL/api/w/$Env:WM_WORKSPACE/variables/get/u/user/foo\"\n```\n\n----------------------------------------\n\nTITLE: Workspace object storage overview\nDESCRIPTION: This snippet explains the purpose of workspace object storage in Windmill, highlighting its exclusivity to the Enterprise edition and its role in simplifying access to S3 and Azure Blob storage without credential management.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/s3.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n![Workspace object storage Infographic](../core_concepts/11_persistent_storage/s3_infographics.png \"Workspace object storage Infographic\")\n\nThe workspace object storage is exclusive to the [Enterprise](/pricing) edition. It is meant to be a major convenience layer to enable users to read and write from S3 without having to have access to the credentials.\n```\n\n----------------------------------------\n\nTITLE: Converting Orders to Addresses\nDESCRIPTION: This TypeScript function takes an array of order objects as input. It transforms each order into a formatted address string by concatenating the address, city, and country properties. It returns an array of formatted address strings or an empty array if the input is null or undefined. This is used to prepare data for geocoding.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(orders: any[]) {\n\treturn orders?.map((order) => `${order.address} ${order.city} ${order.country}`) ?? [];\n}\n```\n\n----------------------------------------\n\nTITLE: Running background tasks using Python's multiprocessing module\nDESCRIPTION: Showcases process-based concurrency in Python by creating a separate process for executing a background job. It uses the multiprocessing module to spawn a new process, enabling true parallelism especially useful for CPU-bound tasks. The main process continues execution and waits for the background process to complete before terminating.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport multiprocessing\nimport time\n\ndef background_task():\n    print(\"Background task started\")\n    time.sleep(5)\n    print(\"Background task finished\")\n\n# Create a process and run the background task\nprocess = multiprocessing.Process(target=background_task)\nprocess.start()\n\nprint(\"Main process continues to run...\")\n\n# Wait for the background task to complete\nprocess.join()\nprint(\"Main process finished\")\n```\n\n----------------------------------------\n\nTITLE: Forcing Column Order Dynamically in TypeScript\nDESCRIPTION: This TypeScript snippet shows a function that receives an array of string values (`values`), declares a fixed column order in an array `columns`, and returns a combined array starting with the columns followed by the values. This allows the table to respect the specified column order when rendering in Windmill. The function is asynchronous and accepts a string array as an input parameter, returning an array of arrays of strings.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(values: string[]) {\n  let columns = [\"column1\",\"column2\",\"column3\"]\n  return [columns, ...values]\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Parsing of Quoted Slack Command Parameters in Windmill JavaScript\nDESCRIPTION: Parses Slack command inputs where parameters may be enclosed in double quotes, enabling multi-word parameters. Iterates the text_input character by character, toggling state inside quotes, and splits at spaces accordingly. The resulting output supports a command, one input, and two additional parameters. Inputs: 'text_input' (string). Outputs: object with 'command', 'input', 'parameters1', and 'parameters2'. No external dependencies. Useful when handling Slack commands with complex parameterization.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-20-handler-slack-commands/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function main(text_input: string): Output {\n\tlet tokenized: string[] = [];\n\tif (text_input) {\n\t\tlet start = 0;\n\t\tlet inString = false;\n\t\tfor (let i = 0; i < text_input.length; i++) {\n\t\t\tif (text_input[i] === '\"') {\n\t\t\t\tinString = !inString;\n\t\t\t}\n\t\t\tif (text_input[i] === ' ' && !inString) {\n\t\t\t\ttokenized.push(text_input.slice(start, i).replace(/\"/g, ''));\n\t\t\t\tstart = i + 1;\n\t\t\t}\n\t\t}\n\t\ttokenized.push(text_input.slice(start).replace(/\"/g, ''));\n\t}\n\tconst command = tokenized[0] || 'help';\n\tconst input = tokenized[1];\n\tconst parameters1 = tokenized[2];\n\tconst parameters2 = tokenized[3];\n\n\treturn { command, input, parameters1, parameters2 };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding syntax highlighting to react-markdown with react-syntax-highlighter in JavaScript\nDESCRIPTION: Integrates react-syntax-highlighter to provide syntax highlighting for code blocks within Markdown rendered by react-markdown. It uses the Prism syntax highlighter with a dark theme, detects language classes in code fences, and applies relevant highlighting. The snippet overrides the code element rendering to distinguish inline from block code, enhancing code readability and developer experience. Dependencies include React, react-markdown, and react-syntax-highlighter.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-11-27-using-markdown-in-react/index.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport {dark} from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nexport default function App() {\n  const markdown = `\\`\\`\\`javascript\nconst hello = 'world';\nconsole.log(hello);\n\\`\\`\\``\n\n  return (\n    <ReactMarkdown\n      components={{\n        code({node, inline, className, children, ...props}) {\n          const match = /language-(\\w+)/.exec(className || '')\n          return !inline && match ? (\n            <SyntaxHighlighter\n              style={dark}\n              language={match[1]}\n              PreTag=\"div\"\n              {...props}\n            >\n              {String(children).replace(/\\n$/, '')}\n            </SyntaxHighlighter>\n          ) : (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          )\n        }\n      }}\n    >\n      {markdown}\n    </ReactMarkdown>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Tabs Programmatically (JavaScript)\nDESCRIPTION: This background runnable uses the `setTab` utility function to change the selected tab in a Windmill application. It checks for an error in the `f?.result` object before attempting to switch to the tab with index 1 on the component with ID 'a'.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-16-supabase-authentication/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Background runnable: Open Data tab\nif (!f?.result?.error) {\n\tsetTab('a', 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Final Answer to Discord in TypeScript\nDESCRIPTION: This script sends the final answer and source links back to the user in Discord as a follow-up message. It uses the provided Discord interaction data and bot token to send the message via the Discord API's `followUp` endpoint. Requires the Discord interaction context, bot token, question, answer, and links.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-06-05-discord-bot/index.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { REST } from 'npm:@discordjs/rest@1.7.1';\nimport { API } from 'npm:@discordjs/core@0.6.0';\n\ntype DiscordInteraction = {\n\tapplication_id: string;\n\ttoken: string;\n};\n\nexport async function main(\n\tinteraction: DiscordInteraction,\n\tquestion: string,\n\tanswer: string,\n\tlinks: string[],\n\ttoken: string\n) {\n\tconst rest = new REST({\n\t\tversion: '10'\n\t}).setToken(token);\n\tconst api = new API(rest);\n\n\tawait api.interactions.followUp(interaction.application_id, interaction.token, {\n\t\tcontent: `## ${question}\\n\\n${answer}\\n## Sources:\\n${links.map((l) => `${l}\\n`).join('')}`\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: invalidate Function Signature\nDESCRIPTION: This code snippet defines the signature of the `invalidate` function. The `invalidate` function invalidates a specific field of a form. It takes the `id` of the form, the `key` of the field, and an `error` string.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/modal_form.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n`invalidate(id: string, key: string, error: string)`\n```\n\n----------------------------------------\n\nTITLE: Plotly Options Configuration\nDESCRIPTION: The configuration object for Plotly chart options that follows ChartJs options format, shown as an empty object by default.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/plotly.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Removing Product from Cart\nDESCRIPTION: This frontend script removes a product from the cart based on its index in the selected row.  It accesses and modifies the cart in the application's state using the `splice` method of the array. The `ap` variable probably represents a table component, and `selectedRowIndex` is the index of the selected row. This script operates in the browser to modify the application's local state.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nif (state.cart) {\n\tstate.cart.splice(ap.selectedRowIndex, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Status Chart Data - TypeScript\nDESCRIPTION: This TypeScript (Deno) script processes an array of issue objects and aggregates the number of issues for each status. It returns an object formatted for ChartJs, containing labels (status types) and a dataset with the corresponding counts and background colors.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-25-issue-tracker/index.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(issues: any[]) {\n   if (!issues) {\n      return {\n         labels: [],\n         datasets: [],\n      };\n   }\n   const values: Record<string, number> = {};\n   issues.forEach(({ status }) => {\n      if (!values[status]) {\n         values[status] = 0;\n      }\n      values[status]++;\n   });\n   return {\n      labels: Object.keys(values),\n      datasets: [\n         {\n            data: Object.values(values),\n            backgroundColor: [\n               \"#FF8384\",\n               \"#48C0C0\",\n               \"#FFCE56\",\n            ]\n         },\n      ],\n   };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Card Component\nDESCRIPTION: This JavaScript snippet defines a basic React component named `Card`. It renders a `div` element with two child `div` elements, one for the header and one for the content. Placeholder text is used for both header and content.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst Card = () => {\n  return (\n    <div className=\"card\">\n      <div className=\"header\">Header</div>\n      <div className=\"content\">Content</div>\n    </div>\n  )\n}\n\nexport default Card;\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple WebSocket Runnable in TypeScript\nDESCRIPTION: This TypeScript snippet defines an asynchronous runnable function meant to be triggered upon receiving a WebSocket message in Windmill. The function receives the incoming message as a string parameter `msg` and is intended to contain logic to process this message. It serves as the basic template for WebSocket-triggered runnables, requiring no external dependencies and expecting a string input from the WebSocket trigger event.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/40_websocket_triggers/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(msg: string) {\n  // do something with the message\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a User with Windmill CLI\nDESCRIPTION: Command syntax for removing an existing user from the Windmill server using their email address.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/user.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwmill user remove <email:string>\n```\n\n----------------------------------------\n\nTITLE: Returning JPEG Image - TypeScript\nDESCRIPTION: This snippet shows how to return a JPEG image. The image content must be base64 encoded. It uses the \"jpeg\" key or provides the base64 string directly. The image is displayed in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"jpeg\": { \"content\": base64Image } }\n```\n\n----------------------------------------\n\nTITLE: Verifying Windmill CLI installation\nDESCRIPTION: Checks if the Windmill CLI was installed correctly by displaying the installed version number.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwmill --version\n```\n\n----------------------------------------\n\nTITLE: Form Validation Control\nDESCRIPTION: Shows how to validate, invalidate, and manage form fields.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvalidate(id: string, key: string)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninvalidate(id: string, key: string, error: string)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvalidateAll(id: string, key: string)\n```\n\n----------------------------------------\n\nTITLE: Adding Rich Description to Approval Step - Windmill Client - TypeScript\nDESCRIPTION: This TypeScript script demonstrates how to add a custom, rich description to a Windmill approval step. It returns an object that includes a `description` key. The value for `description` can utilize the `render_all` format to display multiple types of content (markdown, maps, simple strings) on the approval page, providing detailed instructions or context to the approver.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from \"windmill-client@^1.158.2\"\n\nexport async function main(approver?: string) {\n  const urls = await wmill.getResumeUrls(approver)\n  // send the urls to their intended recipients\n\n\n  // if the resumeUrls are part of the response, they will be available to any persons having access\n  // to the run page and allowed to be approved from there, even from non owners of the flow\n  // self-approval is disablable in the suspend options\n  return {\n        ...urls,\n        default_args: {},\n        enums: {},\n        description: {\n      render_all: [\n        {\n          markdown: \"# We have located the secret vault with thousands of H100\"\n        },\n        {\n          map: { lat: -30, lon: 10, markers: [{lat: -30, lon: 0, title: \"It's here\"}]}\n        },\n        \"Just kidding\"\n      ]\n    }\n        // supports all formats from rich display rendering such as simple strings,\n        // but also markdown, html, images, tables, maps, render_all, etc...\n        // https://www.windmill.dev/docs/core_concepts/rich_display_rendering\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returned Response with Custom Status Code\nDESCRIPTION: How the server formats the response after processing a payload with a custom status code. The 'windmill_status_code' property is stripped from the response, and the specified status code (201) is used in the HTTP response.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Hello\": \"World\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Component Value using setValue Function\nDESCRIPTION: This snippet demonstrates how to use the `setValue` function to manually set or force the value of a component from frontend scripts within Windmill Apps. The `setValue` function takes two parameters: `id` (the component's identifier) and `value` (the desired value for the component). This allows programmatic control of component values within the application.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/date_slider.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n`setValue(id: 'a', value: 17)`\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in JSX\nDESCRIPTION: This snippet imports the DocCard component from a specified file path. The DocCard component is likely used for displaying documentation cards within the application, enhancing user interface for better documentation organization and navigation. This import is a prerequisite to using the DocCard component in the JSX structure of the page.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/gitlab.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Enhanced MongoDB Query Script with ObjectId Support\nDESCRIPTION: An improved version of the MongoDB query script that adds support for querying by MongoDB's ObjectId type. It automatically converts string IDs to ObjectId when the _id field is present in the filter.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/mongodb.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MongoClient, ObjectId } from 'https://deno.land/x/atlas_sdk@v1.0.3/mod.ts';\n\ntype MongodbRest = {\n\tendpoint: string;\n\tapi_key: string;\n};\n\nexport async function main(\n\tauth: MongodbRest,\n\tdata_source: string,\n\tdatabase: string,\n\tcollection: string,\n\tfilter: Record<string, any>\n) {\n\tconst client = new MongoClient({\n\t\tendpoint: auth.endpoint,\n\t\tdataSource: data_source,\n\t\tauth: { apiKey: auth.api_key }\n\t});\n\tconst documents = client.database(database).collection(collection);\n\tif ('_id' in filter) {\n\t\tfilter['_id'] = new ObjectId(filter['_id']);\n\t}\n\treturn await documents.find(filter);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing SMTP server connection with Netcat\nDESCRIPTION: This bash command establishes a connection to an SMTP server on localhost at port 2525 using `nc` (netcat). It allows for manually sending SMTP commands and observing the server's responses for basic connectivity testing.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-10-07-email-triggers/index.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnc localhost 2525\n```\n\n----------------------------------------\n\nTITLE: Parsing Slack Command Input with Username Context in Windmill JavaScript\nDESCRIPTION: Extends command parsing by adding the Slack username using the Windmill contextual variable 'WM_USERNAME'. Fetches the username via Deno.env.get and parses the command string as before. Inputs: 'text_input' (string); Windmill environment variable 'WM_USERNAME'. Outputs: object containing 'username', 'command', and 'input' fields. Requires Windmill context and JavaScript Deno runtime compatibility.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-20-handler-slack-commands/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function main(text_input: string): Output {\n  const username = await Deno.env.get('WM_USERNAME')\n  const tokenized: string[] = text_input?.split(' ') || [];\n  const command = tokenized[0] || 'help';\n  const input = tokenized.slice(1,).join(' ');\n\n  return { username,command, input };\n}\n\ninterface Output {\n  \n  username: string;\n  command: string;\n  input: string;\n}\n```\n\n----------------------------------------\n\nTITLE: DocCard JSX Implementation for Apps Quickstart\nDESCRIPTION: JSX implementation of the DocCard component to create a linked documentation card about the Apps quickstart guide in the page layout.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/code_input.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCard\n\tcolor=\"orange\"\n\ttitle=\"Apps quickstart\"\n\tdescription=\"Learn how to build your first app in a matter of minutes.\"\n\thref=\"/docs/getting_started/apps_quickstart\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes RBAC for Pod Management - YAML - Windmill\nDESCRIPTION: This YAML defines a Kubernetes Role and RoleBinding necessary for a Windmill service account (windmill-chart) to manage pods and related resources in the 'windmill' namespace. These permissions are required for the Bash script that uses kubectl to run Docker images as Kubernetes pods. The Role grants extensive permissions on pods, logs, attach, and events.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/7_docker_quickstart/index.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: windmill\n  name: pod-management\nrules:\n  - apiGroups: ['']\n    resources: ['pods']\n    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']\n  - apiGroups: ['']\n    resources: ['pods/log']\n    verbs: ['get', 'list', 'watch']\n  - apiGroups: ['']\n    resources: ['pods/attach']\n    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch', 'delete']\n  - apiGroups: ['']\n    resources: ['events']\n    verbs: ['get', 'list', 'watch']\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: pod-management\n  namespace: windmill\nsubjects:\n  - kind: ServiceAccount\n    name: windmill-chart\n    namespace: windmill\nroleRef:\n  kind: Role\n  name: pod-management\n  apiGroup: rbac.authorization.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Fetching and Filtering Hacker News Items - Typescript\nDESCRIPTION: This TypeScript code defines a Windmill script to fetch and filter new items from Hacker News based on specified mentions. It utilizes `wmill.getState()` to track the last processed item and avoid redundant checks. It iterates through new items, fetches their details, and filters based on whether their text contains any of the provided mentions. Finally, it updates the state with `wmill.setState()` for the next execution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/src/components/denoScript.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as wmill from 'https://deno.land/x/windmill@v1.89.0/mod.ts';\n\nconst MAX_LOOKBACK = 20;\n\nexport async function main(mentions: string[]) {\n\tlet lastState = await wmill.getState();\n\n\tlet maxItem = await getMaxItem();\n\n\tif (!lastState) {\n\t\tconsole.log(`First run of trigger, looking back to MAX_LOOKBACK (20) elements`);\n\t\tlastState = maxItem - MAX_LOOKBACK;\n\t}\n\n\tmaxItem = Math.min(maxItem, lastState + MAX_LOOKBACK);\n\n\tconst items = [];\n\tfor (let i = lastState; i < maxItem; i++) {\n\t\tconsole.log(`fetching id: ${i}`);\n\t\tconst item = await getItem(i);\n\t\tif (mentions.find((mention) => item.text?.includes(mention))) {\n\t\t\titems.push(item);\n\t\t}\n\t}\n\tawait wmill.setState(maxItem);\n\n\treturn items;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component - MDX\nDESCRIPTION: This code snippet imports the `DocCard` component from a specified location. This component is likely used to render cards with documentation links and information. The component is a dependency for displaying formatted documentation cards within the Markdown content.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/13_version_control/index.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Evaluating Dynamic JavaScript Expressions at Runtime in Windmill - JavaScript\nDESCRIPTION: This snippet shows the use of a JavaScript array reduction to sum elements in an array at runtime. Using the 'reduce' function, it accumulates the sum starting from zero across the provided array [1, 2, 3, 4]. This pattern demonstrates how to execute arbitrary JavaScript expressions dynamically within a Windmill step. It requires no additional dependencies beyond standard JavaScript and outputs the sum as a single numeric value. Inputs, such as the array to sum, should be defined as variables or literals within the script.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/3_editor_components.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n[1, 2, 3, 4].reduce((acc, val) => acc + val, 0);\n```\n\n----------------------------------------\n\nTITLE: Controlling Select Tab with Frontend Scripts\nDESCRIPTION: Examples of frontend script methods for controlling the Select tab component. Shows how to setValue and setTab functions to manipulate the component's behavior programmatically.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/select_tab.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nsetValue(id: 'a', value: 17)\n```\n\nLANGUAGE: jsx\nCODE:\n```\nsetTab('a',1)\n```\n\n----------------------------------------\n\nTITLE: Adding Default Parameter Value in TypeScript\nDESCRIPTION: Modifying the function signature to include a default value for the name parameter, which makes the field optional in the generated UI. This demonstrates how changing the function signature affects the UI behavior.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/1_typescript_quickstart/index.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nmain(name: string = \"you\")\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Custom Worker Image\nDESCRIPTION: Example showing how to modify a docker-compose.yml file to use a custom Dockerfile for the Windmill worker instead of the standard image. This allows for customized worker environments.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/8_preinstall_binaries/index.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  windmill_worker:\n    build:\n      context: ./path/to/dockerfile\n      args:\n        WM_IMAGE: ${WM_IMAGE}\n```\n\n----------------------------------------\n\nTITLE: Embedding Snowflake Integration Documentation and UI Using MDX/JSX\nDESCRIPTION: This mixed JSX/MDX snippet provides markup for a grid layout displaying DocCard components that link to various Snowflake integration guides, including SQL quickstarts and OAuth app setup. It also includes an embedded YouTube video iframe demonstrating Snowflake integration, accompanied by explanatory text and tip blocks. This snippet is designed for rendering the documentation page with interactive and instructive content in a React-based static site generator environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/snowflake.mdx#_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"SQL (PostgreSQL, MySQL, MS SQL, BigQuery, Snowflake) quickstart\"\n\t\tdescription=\"Learn how to build your first script in PostgreSQL, MySQL, BigQuery, Snowflake.\"\n\t\thref=\"/docs/getting_started/scripts_quickstart/sql\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Build a sample Snowflake app using OAuth\"\n\t\tdescription=\"Learn how to build a sample Windmill App using Snowflake OAuth\"\n\t\thref=\"/docs/misc/guides/snowflake_app_with_user_roles#sample-app-setup\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Configure Snowflake OAuth\"\n\t\tdescription=\"How to configure a Snowflake OAuth connection\"\n\t\thref=\"/docs/misc/setup_oauth#snowflake\"\n\t/>\n</div>\n\n<iframe\n\tstyle={{ aspectRatio: '16/9' }}\n\tsrc=\"https://www.youtube.com/embed/ggJQtzvqaqA\"\n\ttitle=\"YouTube video player\"\n\tframeBorder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\tallowFullScreen\n\tclassName=\"border-2 rounded-lg object-cover w-full dark:border-gray-800\"\n></iframe>\n\n:::tip\n\nFind some pre-set interactions with Snowflake on the [Hub](https://hub.windmill.dev/integrations/snowflake).\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Handling Unsecured SMTP Session with STARTTLS Support in Rust\nDESCRIPTION: This Rust function `handle_unsecured_session` handles an initial unsecured SMTP session, checking for the `STARTTLS` command to upgrade to a TLS connection. It reads lines from the input stream, parses SMTP commands, and responds accordingly. If `STARTTLS` is received, it calls `handle_starttls` to perform the TLS handshake. It uses `BufReader` and `BufWriter` for buffered I/O and async operations.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-10-07-email-triggers/index.mdx#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nasync fn handle_unsecured_session(\n    reader: &mut BufReader<TcpStream>,\n    writer: &mut BufWriter<TcpStream>,\n) -> anyhow::Result<()> {\n    let mut is_tls = false;\n    let mut line = String::new();\n    while reader.read_line(&mut line).await? != 0 {\n        let space_pos = line.find(\" \").unwrap_or(line.len());\n        let (command, _) = line.split_at(space_pos);\n\n        match command.trim().to_uppercase().as_ref() {\n            \"EHLO\" | \"HELO\" => {\n                writer.write_all(b\"250-windmill Hello\\r\\n\").await?;\n                writer.write_all(b\"250-STARTTLS\\r\\n\").await?;\n                writer.write_all(b\"250 What you've got?\\r\\n\").await?;\n                writer.flush().await?;\n            }\n            \"STARTTLS\" => {\n                writer.write_all(b\"220 GO ON\\r\\n\").await?;\n                writer.flush().await?;\n                is_tls = true;\n                break;\n            }\n            \"QUIT\" => {\n                writer.write_all(b\"221 Have a nice day!\\r\\n\").await?;\n                writer.flush().await?;\n                break;\n            }\n            \"NOOP\" => {\n                writer.write_all(b\"250 OK\\r\\n\").await?;\n                writer.flush().await?;\n            }\n            \"MAIL\" | \"RCPT\" | \"DATA\" | \"RSET\" => {\n                writer\n                    .write_all(b\"530 Must issue a STARTTLS command first\\r\\n\")\n                    .await?;\n                writer.flush().await?;\n            }\n            _ => {\n                writer.write_all(b\"500 Unknown command\\r\\n\").await?;\n                writer.flush().await?;\n            }\n        }\n\n        line.clear();\n    }\n\n    if is_tls {\n        handle_starttls(stream).await?;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Rust Script with Dependencies and Struct Return Type\nDESCRIPTION: This Rust code defines a basic Windmill script. It includes dependency definitions (`anyhow`, `rand`) within a special comment block recognized by Windmill, defines a serializable return struct `Ret`, and implements a `main` function that takes `String` and `Vec<i8>` as input. The function prints the inputs, constructs a greeting message, randomly selects a number from the input vector, and returns the results wrapped in the `Ret` struct.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/9_rust_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n//! Add dependencies in the following partial Cargo.toml manifest\n//! \n//! ```cargo\n//! [dependencies]\n//! anyhow = \"1.0.86\"\n//! rand = \"0.7.2\"\n//! ```\n//! \n//! Note that serde is used by default with the `derive` feature.\n//! You can still reimport it if you need additional features.\n\nuse anyhow::anyhow;\nuse rand::seq::SliceRandom;\nuse serde::Serialize;\n\n#[derive(Serialize, Debug)]\nstruct Ret {\n    msg: String,\n    number: i8,\n}\n\nfn main(who_to_greet: String, numbers: Vec<i8>) -> anyhow::Result<Ret> {\n    println!(\n        \"Person to greet: {} -  numbers to choose: {:?}\",\n        who_to_greet, numbers\n    );\n    Ok(Ret {\n        msg: format!(\"Greetings {}!\", who_to_greet),\n        number: *numbers\n            .choose(&mut rand::thread_rng())\n            .ok_or(anyhow!(\"There should be some numbers to choose from\"))?,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Date Input Value via Frontend Script (setValue)\nDESCRIPTION: This code snippet demonstrates how to manually set or force the value of a Date Input component using the `setValue` function within a frontend script in the Windmill app builder. The `setValue` function takes the component's ID as a string and the desired value as arguments.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/date_input.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n`setValue(id: 'a', value: 17)`\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in MDX (Docusaurus)\nDESCRIPTION: This JavaScript/JSX code imports the `DocCard` React component from a relative path within a Docusaurus project structure (`@site` alias). This component is subsequently used within the MDX page for rendering styled documentation cards.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/2_connecting_components/index.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding a Workspace with Username - Windmill CLI - Bash\nDESCRIPTION: This command both creates a new workspace on the remote instance (if it doesn't exist) and registers it locally under the name 'MyWorkspace2'. The '--create' option triggers creation, '--create-workspace-name' specifies the workspace's name, and '--create-username' sets the initial user to 'john.doe'. Requires Windmill CLI, remote access, and appropriate permissions for workspace creation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/workspace-management.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace add --create --create-workspace-name MyWorkspace2 --create-username john.doe\n```\n\n----------------------------------------\n\nTITLE: TypeScript Windmill Script Quickstart\nDESCRIPTION: Provides an introduction to writing Windmill scripts in TypeScript, covering environments like Deno, Bun, and Node.js. The snippet defines a DocCard component with the title, description, link to documentation, and TypeScript icon, enabling users to easily access the tutorial.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { SiTypescript } from 'react-icons/si';\n\n// Documentation card for TypeScript Windmill scripts\n// Usage: Render a card linking to TypeScript script quickstart\n// Includes icon, title, description, and link to detailed docs\n```\n\n----------------------------------------\n\nTITLE: setValue Function Signature\nDESCRIPTION: This code snippet defines the signature of the `setValue` function. The `setValue` function is used to set or force the value of a component. It accepts an `id` (string) and a `value` (any) as parameters.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/modal_form.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n`setValue(id: string, value: any)`\n```\n\n----------------------------------------\n\nTITLE: Tab Change Event Handler\nDESCRIPTION: Explains the `onTabChange` event handler, which triggers runnable logic when the user alters the active tab. Supports multiple runnables per event, enabling complex behaviors like updating content or triggering analytics based on tab navigation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/tabs.mdx#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- `onTabChange`: Trigger a runnable when the user changes the tab.\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Cards Grid with Multiple Cards in JSX\nDESCRIPTION: Demonstrates how to create a grid of documentation cards using the DocCard component and Tailwind CSS for layout. This grid contains two cards with links to different documentation sections.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/compared_to/kestra.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Languages\"\n\t\tdescription=\"Windmill supports TypeScript, Python, Go, PHP, Bash, C#, SQL and Rust or launch docker containers.\"\n\t\thref=\"/docs/getting_started/scripts_quickstart\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Dependencies in Windmill\"\n\t\tdescription=\"Learn how Windmill handles dependencies automatically.\"\n\t\thref=\"/docs/advanced/imports\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Tabs Component Description and Usage\nDESCRIPTION: Provides an overview of the Tabs component, its display modes, integration methods, and visual examples including a video demonstration. Details how to add components to tabs and references related documentation. The snippet explains the core functionality of hosting other components within a tabbed interface.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/tabs.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nimport DocCard from @site/src/components/DocCard; # Tabs\n\nTabs components allow you to host other components in several tabs. Each tab is a container.\nTabs have three display modes:\n\n- `Tabs`: the tabs are displayed horizontally.\n- `Sidebar`: the tabs are displayed vertically.\n- `Accordion`: the tabs are displayed in an accordion.\n- `Invisible on view`: The tabs are not displayed when the app is viewed. They are only displayed in the app editor. This is useful to make multi-page apps, where each page is a tab.\n\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tautoPlay\n\tcontrols\n\tsrc=\"/videos/tabs.mp4\"\n\talt=\"tabs component\"\n/>\n<br />\n\nTo add a component to a tabs component, you can either click on `Insert` while you selected the tabs component, or you can move an existing component by cutting it and pasting it in the tabs component.\n\nThe following section details Tabs component's specific settings. For more details on the App editor, check the [dedicated documentation](../0_app_editor/index.mdx) or the App editor [Quickstart](../../getting_started/7_apps_quickstart/index.mdx):\n\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"App editor Documentation\"\n\t\tdescription=\"The app editor is a low-code builder to create custom User Interfaces with a mix of drag-and-drop and code.\"\n\t\thref=\"/docs/apps/app_editor\"\n\t/>\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"Apps quickstart\"\n\t\tdescription=\"Learn how to build your first app in a matter of minutes.\"\n\t\thref=\"/docs/getting_started/apps_quickstart\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript paths for absolute imports in Windmill\nDESCRIPTION: This configuration snippet provides the tsconfig.json setup to support absolute imports in TypeScript scripts within Windmill projects by mapping root paths to workspace directories. It ensures that absolute import paths resolve correctly in local editors and Windmill's runtime environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/14_dependencies_in_typescript/index.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"compilerOptions\": {\n\t\t\"paths\": {\n\t\t\t\"/*\": [\"./*\"]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Set Component Value with setValue (Frontend Scripting)\nDESCRIPTION: Documents the signature of the `setValue` function used in frontend scripts to programmatically set the value of any App component. It requires the component's unique identifier (`id`) and the new `value` to be assigned. Mixing this function with dynamic default values is discouraged.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/datetime_input.mdx#_snippet_0\n\nLANGUAGE: Frontend Scripting\nCODE:\n```\nsetValue(id: string, value: any)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Event Listener for postMessage\nDESCRIPTION: This JavaScript snippet adds an event listener to the window to listen for messages sent from the HTML component. When a message is received, it checks if the data is 'hello' and then displays an alert. It is used to react to events triggered in HTML component.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/html.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\n\t'message',\n\t(event) => {\n\t\tif (event.data === 'hello') {\n\t\t\talert('hello');\n\t\t\t// You also interact with the app state here for example\n\t\t}\n\t},\n\tfalse\n);\n```\n\n----------------------------------------\n\nTITLE: Prefect Flow and Task Definition\nDESCRIPTION: This Python code defines a Prefect flow and a task to benchmark task execution.  The `fibo` function recursively calculates Fibonacci numbers.  The `@task` decorator transforms the `fibo_task` function into a Prefect task, and `@flow` transforms the `benchmark_flow` function into a Prefect flow.  The `benchmark_flow` iterates `ITER` times, calling the `fibo_task` in each iteration.  Finally, it uses `benchmark_flow.serve()` to serve the flow. The dependencies are the Prefect library, and the code will calculate the Fibonacci sequence a number of times.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom prefect import flow, task\n\nITER = 10     # respectively 40\nFIBO_N = 33   # respectively 10\n\ndef fibo(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fibo(n - 1) + fibo(n - 2)\n\n@task\ndef fibo_task():\n    return fibo(FIBO_N)\n\n@flow(name=\"bench_{}\".format(ITER))\ndef benchmark_flow():\n    for i in range(ITER):\n        fibo_task()\n\nif __name__ == \"__main__\":\n    benchmark_flow.serve(name=\"bench_{}\".format(ITER))\n```\n\n----------------------------------------\n\nTITLE: Extracting Forwarded Email Details with Regex - Python\nDESCRIPTION: This Python script extracts specific fields (From, Subject, Date, To, Content) from the raw text of a forwarded email using regular expressions. It takes the full email text as input and returns a dictionary containing the extracted information. This is useful for processing forwarded emails where Mandrill's standard parsing might not capture the original sender and details correctly.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/mailchimp_mandrill.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\ndef main(input_email):\n  from_pattern = re.compile(r'From: .+ <(.+)>')\n  subject_pattern = re.compile(r'Subject: (.+)')\n  date_pattern = re.compile(r'Date: (.+)')\n  to_pattern = re.compile(r'To: <(.+)>')\n  content_pattern = re.compile(r'\\n\\n(.*)\\n', re.DOTALL)\n\n  from_field = re.search(from_pattern, input_email)\n  date_field = re.search(date_pattern, input_email)\n  subject_field = re.search(subject_pattern, input_email)\n  to_field = re.search(to_pattern, input_email)\n  content_field = re.search(content_pattern, input_email)\n\n  return {\n      'from': from_field.group(1) if from_field else None,\n      'date': date_field.group(1) if date_field else None,\n      'subject': subject_field.group(1) if subject_field else None,\n      'to': to_field.group(1) if to_field else None,\n      'content': content_field.group(1).strip() if content_field else None\n  }\n```\n\n----------------------------------------\n\nTITLE: Example teams_message payload (JSON)\nDESCRIPTION: This is a JSON example of the payload that is provided by the Microsoft Teams backend to the Windmill script when a command is triggered. It contains information about the user, the command, the conversation, and other relevant details. This payload can be used to extract more information from teams messages.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/teams.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"id\": \"1739549535827\",\n  \"from\": {\n    \"id\": \"29:152-adq1512TRGdQmxTqdgnfTA\",\n    \"name\": \"Alexander Petric\"\n  },\n  \"text\": \"<at>WindmillHelperBot</at>. /windmill echo Hello World!\",\n  \"type\": \"message\",\n  \"locale\": \"en-US\",\n  \"entities\": [\n    {\n      \"text\": \"<at>WindmillHelperBot</at>\",\n      \"type\": \"mention\",\n      \"mentioned\": {\n        \"id\": \"28:0eba9472-83d1-429e-ba2c-1c2993dda84d\",\n        \"name\": \"WindmillHelperBot\"\n      }\n    },\n    {\n      \"type\": \"clientInfo\",\n      \"locale\": \"en-US\",\n      \"country\": \"US\",\n      \"platform\": \"Mac\",\n      \"timezone\": \"America/New_York\"\n    }\n  ],\n  \"recipient\": {\n    \"id\": \"28:0eba9472-83d1-429e-ba2c-1c2993dda84d\",\n    \"name\": \"WindmillHelperBot\"\n  },\n  \"timestamp\": \"2025-02-14T16:12:15.857639Z\",\n  \"serviceUrl\": \"https://smba.trafficmanager.net/amer/508f04d5-b0de-4661-b035-b90bb6911ce7/\",\n  \"attachments\": [\n    {\n      \"content\": \"<p><span itemtype=\\\"http://schema.skype.com/Mention\\\" itemscope=\\\"\\\" itemid=\\\"0\\\">WindmillHelperBot</span>. /windmill echo Hello World!</p>\"\n    }\n  ],\n  \"channelData\": {\n    \"team\": {\n      \"id\": \"19:4SkiS4RJt1gOqqwRUeYdKJvB0XoklVFX4bL9-mhPLbs1@thread.tacv2\"\n    },\n    \"tenant\": {\n      \"id\": \"508f04d5-b0de-4661-b035-b90bb6911ce7\"\n    },\n    \"channel\": {\n      \"id\": \"19:4SkiS4RJt1gOqqwRUeXdKJvB0XoklVFX4bL9-mhPLbs1@thread.tacv2\"\n    },\n    \"teamsTeamId\": \"19:4SkiS4RJt1gOqqwRUeXdKJvB0XoklVFX4bL9-mhPLbs1@thread.tacv2\"\n  },\n  \"conversation\": {\n    \"id\": \"19:4SkiS4RJt1gOqqwRUeXdKJvB0XoklVFX4bL9-mhPLbs1@thread.tacv2;messageid=1737565847488\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Workflow Step Script with AI (Prompt Template)\nDESCRIPTION: This prompt template is used by the Windmill AI Flow Builder to instruct GPT-4-turbo to generate the code for a workflow step from scratch. It requests the script in a specified language ({codeLang}) to perform a described task ({description}). It explicitly tells the AI to include a parameter \"prev_output\" for the previous step's result and to infer its type from the provided previous step's code ({prevCode}).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-20-ai-flow-builder/index.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nI'm building a workflow which is a sequence of script steps. Write a script in {codeLang} which should {description}.\nIt should take a parameter called \"prev_output\" which contains the output of the previous script.\nInfer the type of \"prev_output\" from the previous's step code: ```{codeLang}\n{prevCode}\n```\nReturn the script's output.\n\n<contextual_information>\n...some contextual information (check the previous blog post or the code for more details)...\n</contextual_information>\n```\n\n----------------------------------------\n\nTITLE: Defining Keyword-to-Label Mapping Go Variable\nDESCRIPTION: This Go map defines the mapping between keywords found in an issue's title or body and the corresponding labels that should be applied to that issue. It's used within the triage script to determine the appropriate labels based on the issue content.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-06-flow-triage-bot/index.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Issues will be mapped to team(s) or label(s) based on keywords\nvar keyWordToLabel = map[string]string{\n\t\"backend\": \"team/backend\",\n\t\"logs\":    \"team/backend\",\n\t\"editor\":  \"team/frontend\",\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Bar Chart for 10 Long Running Tasks in JSX\nDESCRIPTION: JSX component that displays a bar chart comparing the execution duration of 10 long running tasks across workflow engines including Airflow, Kestra, Prefect, Temporal, and Windmill in both normal and dedicated worker modes.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_16\n\nLANGUAGE: JSX\nCODE:\n```\n<TaskDurationBarChart\n\ttitle=\"10 long running tasks\"\n\txTitle=\"Duration (in seconds)\"\n\tlabels={[\n\t\t['Airflow'],\n\t\t['Kestra'],\n\t\t['Prefect'],\n\t\t['Temporal'],\n\t\t['Windmill', 'Normal'],\n\t\t['Windmill', 'Dedicated Worker']\n\t]}\n\trawData={[\n\t\t[\n\t\t\t[4.347, 2.78, 1.975, 1.708, 1.832, 2.202, 2.641, 2.44, 2.179, 4.292],\n\t\t\t[2.564, 6.696, 1.715, 1.702, 2.144, 2.689, 2.503, 1.815, 1.954, 4.489]\n\t\t],\n\t\t[\n\t\t\t[0.849, 0.049, 0.067, 0.053, 0.049, 0.062, 0.068, 0.056, 0.067, 0.046],\n\t\t\t[1.429, 1.391, 1.401, 1.392, 1.378, 1.401, 1.405, 1.443, 1.391, 1.396]\n\t\t],\n\t\t[\n\t\t\t[1.27, 0.074, 0.062, 0.059, 0.063, 0.064, 0.058, 0.06, 0.062, 0.059],\n\t\t\t[1.359, 1.356, 1.354, 1.382, 1.358, 1.415, 1.379, 1.362, 1.333, 1.36]\n\t\t],\n\t\t[\n\t\t\t[0.012, 0.031, 0.032, 0.031, 0.032, 0.031, 0.033, 0.032, 0.034, 0.034],\n\t\t\t[1.345, 1.309, 1.305, 1.306, 1.307, 1.308, 1.305, 1.319, 1.313, 1.314]\n\t\t],\n\t\t[\n\t\t\t[0.002, 0.048, 0.046, 0.048, 0.047, 0.048, 0.048, 0.047, 0.047, 0.05],\n\t\t\t[0.844, 0.799, 0.778, 0.77, 0.785, 0.77, 0.768, 0.771, 0.779, 0.768]\n\t\t],\n\t\t[\n\t\t\t[0.023, 0.021, 0.025, 0.042, 0.051, 0.015, 0.047, 0.048, 0.051, 0.049],\n\t\t\t[0.722, 0.721, 0.721, 0.717, 0.731, 0.719, 0.719, 0.718, 0.717, 0.72]\n\t\t]\n\t]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Combining Templatable Strings with Static Values in Windmill - JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a templatable string by embedding a context variable within a static string using ES6 template literals. The `${context.var}` syntax injects the value of 'var' from the execution context, which is then concatenated with the static value 'static value'. This approach is useful for dynamic text construction in Windmill steps and requires that 'context' be an available object containing variables in the current script's scope. The resulting value will be a single string combining runtime-resolved variables and fixed content.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/3_editor_components.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n`${context.var} static value`;\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Cards with JSX\nDESCRIPTION: Renders a grid of documentation cards for related resources using the DocCard component. Each card includes a title, description, and link to detailed documentation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/script_editor/script_kinds.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Scripts quickstart\"\n\t\tdescription=\"Start writing scripts in Python, TypeScript, Go, PHP, Bash and Sql.\"\n\t\thref=\"/docs/getting_started/scripts_quickstart\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Flows quickstart\"\n\t\tdescription=\"Learn how to build flows.\"\n\t\thref=\"/docs/getting_started/flows_quickstart\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Returning Map - TypeScript\nDESCRIPTION: This snippet shows how to return a map. It expects a nested object with \"lat\", \"lon\", \"zoom\", and an array of \"markers\" for location details. The markers have lat/lon coordinates and optional properties for title, radius, color and stroke attributes.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"map\": { lat: 40, lon: 0, zoom: 3, markers: [{lat: 50.6, lon: 3.1, title: \"Home\", radius: 5, color: \"yellow\", strokeWidth: 3, strokeColor: \"Black\"}]}}\n```\n\n----------------------------------------\n\nTITLE: Referencing Component Output via Eval in Windmill\nDESCRIPTION: This JavaScript expression demonstrates referencing the 'result' property of a component identified as 'a' within Windmill's `eval` context. This approach allows direct programmatic access to component outputs, often used for connecting component inputs to outputs as an alternative to the graphical connection interface.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/2_connecting_components/index.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\na.result\n```\n\n----------------------------------------\n\nTITLE: Updating flow inline scripts lockfile - Bash\nDESCRIPTION: This command updates flow inline scripts lockfile using `wmill flow generate-locks` command. It is similar to  `wmill script generate-metadata --lock-only` for script metadata generation. The command reads and updates flow's inline scripts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/flow.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwmill flow generate-locks\n```\n\n----------------------------------------\n\nTITLE: Configuring Windmill Sync Scope\nDESCRIPTION: This YAML snippet shows the default configuration options in the `wmill.yaml` file generated by `wmill init`. It specifies the default script runtime, file inclusion/exclusion patterns, and boolean flags to skip or include syncing various Windmill object types like variables, resources, secrets, schedules, and triggers.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/sync.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultTs: bun\nincludes:\n  - f/**\nexcludes: []\ncodebases: []\nskipVariables: true\nskipResources: true\nskipSecrets: true\nincludeSchedules: false\nincludeTriggers: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync with wmill.yaml (YAML)\nDESCRIPTION: This snippet demonstrates how to configure sync options using a `wmill.yaml` file.  It shows how to include and exclude files based on patterns, and how to set the default TypeScript language to either 'deno' or 'bun'.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/sync.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nincludes: ['f/**'] # uses \\\"*\\\" or uncomment this line to include everything. Note that wmill will only consider files with valid path (u/ or f/, with the right extension)\nexcludes: [] # excludes patterns here\n\ndefaultTs: 'deno' # bun is the default, set it to deno if you primarily use deno to avoid needing the .deno.ts extension\n```\n\n----------------------------------------\n\nTITLE: Retrieving Snowflake Account Identifier Using SQL\nDESCRIPTION: This SQL snippet fetches the combined organization and account name for the Snowflake account in use by concatenating CURRENT_ORGANIZATION_NAME() and CURRENT_ACCOUNT_NAME(). This identifier is required as part of the OAuth setup within Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/2_setup_oauth/index.mdx#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CURRENT_ORGANIZATION_NAME() || '-' || CURRENT_ACCOUNT_NAME() AS org_account_formatted;\n```\n\n----------------------------------------\n\nTITLE: Bash Script with Arguments and Default Values for Windmill - Bash\nDESCRIPTION: This snippet illustrates a Windmill-compatible Bash script that uses positional parameters and assigns a default value to the second argument with the syntax '${2:-default value}'. It demonstrates outputting a customized message based on user-provided input or a fallback default. No dependencies beyond Bash; intended for Windmill workflows. Input: arguments supplied at execution; Output: greeting message string. The last line's output is considered the 'return' in Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-27-bash-script-arguments/index.mdx#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\nmsg=\"$1\"\ndflt=\"${2:-default value}\"\necho \"Hello $msg\"\n```\n\n----------------------------------------\n\nTITLE: Using DocCard Component for Navigation in JSX/Markdown\nDESCRIPTION: Example of how the DocCard component is used to create navigational cards with titles, descriptions, and links to other documentation pages. This pattern is repeated throughout the document to create organized navigation sections.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/3_editor_components.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Roles and permissions\"\n\t\tdescription=\"Control access and manage permissions within your instance and workspaces.\"\n\t\thref=\"/docs/core_concepts/roles_and_permissions\"\n\t\tcolor=\"teal\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Groups and folders\"\n\t\tdescription=\"Groups and folders enable efficient permission management by grouping users with similar access levels.\"\n\t\thref=\"/docs/core_concepts/groups_and_folders\"\n\t\tcolor=\"teal\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component for React\nDESCRIPTION: Imports the DocCard component from the site's component library to be used for creating documentation cards on the page.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/modal.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Setting Component Value using setValue (JavaScript)\nDESCRIPTION: Demonstrates programmatically setting the value of a UI component using the `setValue` function within Windmill App frontend scripts. This example specifically sets the value of the component identified by 'a' to 17, although the Toggle component typically expects a boolean value. This function is essential for dynamically updating component states based on script logic.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/toggle.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetValue(id: 'a', value: 17)\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Jobs Using Resque with Redis in Ruby\nDESCRIPTION: Shows how to implement and enqueue background jobs with Resque in Ruby which manages job queues backed by Redis. The snippet defines a job class with a class method perform that processes the task by sleeping and printing the sum of two arguments. The queue name is specified via @queue. Jobs are enqueued via Resque.enqueue. Resque forks new processes for jobs providing memory isolation. Dependencies include Resque and Redis servers. Inputs are parameters passed to perform, output is console output after job completion.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass BackgroundJob\n  @queue = :default\n\n  def self.perform(x, y)\n    sleep(5)\n    puts x + y\n  end\nend\n\n# To enqueue the job\nResque.enqueue(BackgroundJob, 10, 20)\n```\n\n----------------------------------------\n\nTITLE: Python Bug Fixing Prompt Template\nDESCRIPTION: This template provides a format for prompting GPT-4 to fix bugs in Python code. It includes the complete code, context about resource types, and the error message, instructing the AI to provide a fix with an explanation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nHere's my python3 code:\n```python\n\\{code\\}\n```\nAdditional information:\nWe have to export a \"main\" function and specify the parameter types but do not call it.\nYou have access to the following resource types.\nIf you need them, you have to define the TypedDict exactly as specified\n(class name has to be IN LOWERCASE) and add them as parameters: {resourceTypes}\nOnly use the ones you need. If the TypedDict name conflicts with the imported object,\nrename the imported object NOT THE TYPE.\n\nI get the following error: {error}\nFix my code.\n```\n\n----------------------------------------\n\nTITLE: Listing Current User's Crontab Entries (Shell)\nDESCRIPTION: The `crontab -l` command is used in a Unix-like shell to display the scheduled tasks (crontab entries) for the currently logged-in user. This allows viewing the existing cron jobs without opening an editor.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-06-28-edit-crontab/index.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncrontab -l\n```\n\n----------------------------------------\n\nTITLE: Implementing multi-threading in Node.js using worker_threads\nDESCRIPTION: Demonstrates how to use the worker_threads module in Node.js to run background tasks in parallel threads. It creates a worker thread that performs a simulated background task and communicates with the main thread through message passing. This approach is ideal for CPU-intensive operations to prevent blocking the primary event loop.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Worker, isMainThread, parentPort } = require('worker_threads');\n\nif (isMainThread) {\n    // This code is executed in the main thread\n\n    console.log(\"Main thread running...\");\n\n    // Create a new worker thread\n    const worker = new Worker(__filename);\n\n    // Listen for messages from the worker\n    worker.on('message', message => {\n        console.log(message);\n    });\n\n    // Listen for errors\n    worker.on('error', error => {\n        console.error(`Worker error: ${error}`);\n    });\n\n    // Listen for exit event\n    worker.on('exit', code => {\n        console.log(`Worker exited with code ${code}`);\n    });\n\n    console.log(\"Main thread continues to run...\");\n\n} else {\n    // This code is executed in the worker thread\n\n    // Simulate a background task\n    console.log(\"Background task started\");\n    setTimeout(() => {\n        console.log(\"Background task finished\");\n        parentPort.postMessage(\"Background task completed!\");\n    }, 5000);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Processing NATS Message with Preprocessor in Windmill Script (TypeScript)\nDESCRIPTION: Example demonstrating the use of a Windmill preprocessor to handle incoming NATS messages. The preprocessor receives the message string (`msg`) and detailed trigger metadata (`wm_trigger`). It parses the message (assuming JSON) and uses data from both `msg` and `wm_trigger` to construct the arguments passed to the `main` function, allowing for custom inputs based on the message content and trigger details.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/45_nats_triggers/index.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function preprocessor(\n  msg: string,\n  wm_trigger: {\n    kind: \"nats\",\n    nats: {\n      servers: string[];\n      subject: string; // the specific subject the message was received from\n      length: number;\n      headers?: Record<string, string[]>;\n      status?: number;\n      description?: string;\n    }\n  },\n) {\n  // assuming the message is a JSON object\n  const msg = JSON.parse(msg); \n\n  // define args for the main function\n  // let's assume we want to use the message content and the subject\n  return {\n    message_content: msg.content,\n    subject: wm_trigger.nats.subject\n  };\n}\n\n\nexport async function main(message_content: string, subject: string) {\n  // do something with the message content and subject\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Agent Workers with Environment Variables - Windmill - Shell\nDESCRIPTION: This snippet demonstrates the necessary environment variables to launch a Windmill agent worker. It requires Windmill's agent-mode binary or container, a valid agent JWT token (AGENT_TOKEN) generated by a superadmin, and the BASE_INTERNAL_URL for HTTP API access. Optionally, INIT_SCRIPT can be provided for startup customization. Inputs are exported variables; expected behavior is for the worker to connect via HTTP and process jobs tagged according to its JWT. Constraints include accurate URL formatting and JWT validity.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/28_agent_workers/index.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nMODE=agent\nAGENT_TOKEN=\"<token above>\"\nBASE_INTERNAL_URL=\"<base internal url>\"\n```\n\n----------------------------------------\n\nTITLE: PHP Script with Dependency Comments\nDESCRIPTION: This PHP script demonstrates the basic structure of a Windmill script with comments indicating where Composer dependencies can be specified. It defines a `main` function with type-hinted parameters that are used to generate the script's UI and input specification. Dependencies are managed by Windmill automatically based on the uncommented `require` statements.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/8_php_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// remove the first // of the following lines to specify packages to install using composer\n// // require:\n// // monolog/monolog@3.6.0\n// // stripe/stripe-php\n\nfunction main(\n\t// Postgresql $a,\n  // array $b,\n  // object $c,\n\tint $d = 123,\n\tstring $e = \"default value\",\n\tfloat $f = 3.5,\n  bool $g = true,\n) {\n\treturn $d;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing PostgreSQL query with TypeScript (Deno)\nDESCRIPTION: This script uses Deno's environment with the 'deno.land' postgres client to connect to a PostgreSQL database, execute a query (default 'SELECT * FROM demo;'), and return the resulting rows. It constructs a client with TLS disabled and handles errors if query is empty.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  type Sql,\n} from \"https://deno.land/x/windmill@v1.88.1/mod.ts\";\n\nimport { Client } from \"https://deno.land/x/postgres@v0.17.0/mod.ts\"\n\n// Define the resource type\n type Postgresql = {\n  host: string;\n  port: number;\n  user: string;\n  dbname: string;\n  sslmode: string;\n  password: string;\n};\n// Main function executing a query\nexport async function main(db: Postgresql, query: Sql = \"SELECT * FROM demo;\") {\n  if (!query) {\n    throw Error(\"Query must not be empty.\");\n  }\n  const { rows } = await pgClient(db).queryObject(query);\n  return rows;\n}\n// Helper to create a database client with TLS disabled\nexport function pgClient(db: any) {\n  let db2 = {\n    ...db,\n    hostname: db.host,\n    database: db.dbname,\n    tls: {\n        enabled: false,\n    },\n  }\n  return new Client(db2)\n}\n```\n\n----------------------------------------\n\nTITLE: Prompt Template for Windmill Trigger Initial Script\nDESCRIPTION: This template guides the AI in generating the first script for a Windmill trigger flow. It includes placeholders for the desired language, the item description to check for, and instructions on using Windmill's state management functions `getState` and `setState` for persistence across runs.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-20-ai-flow-builder/index.mdx#_snippet_3\n\nLANGUAGE: Prompt\nCODE:\n```\nI'm building a workflow which is a sequence of script steps.\nWrite the first script in {codeLang} which should check for {description} and return an array.\nTo maintain state across runs, you can use \"const {state_name}: {state_type} = await getState()\"\nand \"await setState(value: any)\" which you have to import like this: import { getState, setState } from \"windmill-client@1\"\n\n<contextual_information>\n...some contextual information (check the previous blog post or the code for more details)...\n</contextual_information>\n```\n\n----------------------------------------\n\nTITLE: Defining Main Function in Go\nDESCRIPTION: This snippet provides the signature for the 'main' function entrypoint in a Go Windmill script. Parameters are defined with their types, allowing Windmill to infer inputs for UI generation and JSON Schema. The function is expected to return a tuple of (interface{}, error), where the interface{} can be any result value and error indicates failure.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/script_editor/index.mdx#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc main(x string, nested struct{ Foo string \\`json:\\\"foo\\\"\\` }) (interface{}, error) {\n\t...\n  }\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Tag with React JSX in JavaScript\nDESCRIPTION: Renders an HTML5 video element within a React component or markdown with JSX support. The video element has styling classes for border and rounded corners, autoPlay and controls enabled, a unique ID 'main-video', and sources the video from '/videos/schedule-cron-menu.mp4'. This snippet demonstrates integrating multimedia in Windmill docs to illustrate scheduling UI interactions.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/1_scheduling/index.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<video\\n\\tclassName=\\\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\\\"\\n\\tautoPlay\\n\\tcontrols\\n\\tid=\\\"main-video\\\"\\n\\tsrc=\\\"/videos/schedule-cron-menu.mp4\\\"\\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Bar Chart for 40 Lightweight Tasks in JSX\nDESCRIPTION: JSX component that displays a bar chart comparing the execution duration of 40 lightweight tasks across various workflow engines including Airflow, Kestra, Prefect, Temporal, and Windmill in both normal and dedicated worker modes.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_17\n\nLANGUAGE: JSX\nCODE:\n```\n<TaskDurationBarChart\n\ttitle=\"40 lightweight tasks\"\n\txTitle=\"Duration (in seconds)\"\n\tlabels={[\n\t\t['Airflow'],\n\t\t['Kestra'],\n\t\t['Prefect'],\n\t\t['Temporal'],\n\t\t['Windmill', 'Normal'],\n\t\t['Windmill', 'Dedicated Worker']\n\t]}\n\trawData={[\n\t\t[\n\t\t\t[\n\t\t\t\t4.335, 3.959, 2.194, 2.192, 1.68, 1.965, 2.377, 2.259, 2.39, 2.6, 2.401, 4.888, 5.118,\n\t\t\t\t1.64, 2.396, 2.196, 2.488, 1.853, 1.513, 2.575, 2.218, 2.316, 1.933, 2.176, 2.976, 5.192,\n\t\t\t\t1.684, 2.361, 2.218, 1.409, 2.591, 2.192, 2.328, 2.464, 2.88, 2.394, 2.046, 1.537, 4.988,\n\t\t\t\t2.784\n\t\t\t],\n\t\t\t[\n\t\t\t\t0.417, 0.213, 0.203, 0.22, 0.209, 0.262, 0.205, 0.268, 0.209, 0.477, 0.322, 0.817, 0.207,\n\t\t\t\t0.253, 0.201, 0.226, 0.212, 0.199, 0.207, 0.435, 0.355, 0.408, 0.431, 0.247, 0.461, 0.717,\n\t\t\t\t0.237, 0.246, 0.194, 0.205, 0.421, 0.312, 0.421, 0.25, 0.251, 0.206, 0.352, 0.21, 0.604,\n\t\t\t\t0.223\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t[\n\t\t\t\t0.931, 0.03, 0.034, 0.026, 0.06, 0.048, 0.042, 0.023, 0.06, 0.06, 0.018, 0.065, 0.049,\n\t\t\t\t0.06, 0.032, 0.052, 0.046, 0.039, 0.045, 0.048, 0.035, 0.049, 0.041, 0.044, 0.055, 0.051,\n\t\t\t\t0.066, 0.057, 0.066, 0.059, 0.027, 0.026, 0.042, 0.041, 0.037, 0.035, 0.05, 0.035, 0.057,\n\t\t\t\t0.04\n\t\t\t],\n\t\t\t[\n\t\t\t\t0.035, 0.037, 0.034, 0.04, 0.039, 0.037, 0.036, 0.038, 0.038, 0.034, 0.041, 0.037, 0.037,\n\t\t\t\t0.041, 0.043, 0.035, 0.035, 0.035, 0.035, 0.036, 0.035, 0.037, 0.035, 0.037, 0.041, 0.038,\n\t\t\t\t0.035, 0.037, 0.038, 0.034, 0.044, 0.036, 0.038, 0.038, 0.042, 0.041, 0.038, 0.039, 0.036,\n\t\t\t\t0.039\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t[\n\t\t\t\t1.213, 0.064, 0.061, 0.059, 0.054, 0.053, 0.053, 0.054, 0.055, 0.056, 0.057, 0.064, 0.052,\n\t\t\t\t0.056, 0.056, 0.058, 0.052, 0.051, 0.054, 0.053, 0.053, 0.055, 0.052, 0.054, 0.062, 0.051,\n\t\t\t\t0.051, 0.052, 0.051, 0.048, 0.055, 0.057, 0.049, 0.048, 0.055, 0.05, 0.051, 0.05, 0.053,\n\t\t\t\t0.054\n\t\t\t],\n\t\t\t[\n\t\t\t\t0.044, 0.041, 0.04, 0.036, 0.035, 0.038, 0.037, 0.061, 0.039, 0.038, 0.04, 0.038, 0.038,\n\t\t\t\t0.041, 0.039, 0.043, 0.035, 0.035, 0.035, 0.038, 0.037, 0.036, 0.036, 0.038, 0.039, 0.034,\n\t\t\t\t0.035, 0.037, 0.034, 0.083, 0.035, 0.034, 0.033, 0.034, 0.038, 0.034, 0.034, 0.035, 0.035,\n\t\t\t\t0.034\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t[\n\t\t\t\t0.009, 0.028, 0.027, 0.029, 0.029, 0.029, 0.03, 0.03, 0.032, 0.028, 0.028, 0.028, 0.029,\n\t\t\t\t0.041, 0.029, 0.029, 0.077, 0.09, 0.091, 0.093, 0.092, 0.09, 0.092, 0.091, 0.091, 0.091,\n\t\t\t\t0.091, 0.09, 0.091, 0.093, 0.09, 0.093, 0.092, 0.091, 0.09, 0.092, 0.091, 0.091, 0.091,\n\t\t\t\t0.092\n\t\t\t],\n\t\t\t[\n\t\t\t\t0.007, 0.008, 0.008, 0.008, 0.007, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008, 0.008,\n\t\t\t\t0.008, 0.009, 0.009, 0.009, 0.009, 0.008, 0.008, 0.009, 0.008, 0.009, 0.009, 0.009, 0.009,\n\t\t\t\t0.009, 0.008, 0.009, 0.009, 0.008, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.009, 0.008,\n\t\t\t\t0.008\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t[\n\t\t\t\t0.003, 0.046, 0.047, 0.045, 0.048, 0.047, 0.047, 0.047, 0.047, 0.048, 0.046, 0.046, 0.047,\n\t\t\t\t0.047, 0.047, 0.048, 0.047, 0.047, 0.047, 0.047, 0.048, 0.047, 0.047, 0.047, 0.047, 0.046,\n\t\t\t\t0.047, 0.047, 0.048, 0.047, 0.047, 0.047, 0.047, 0.049, 0.047, 0.047, 0.048, 0.047, 0.047,\n\t\t\t\t0.046\n\t\t\t],\n\t\t\t[\n\t\t\t\t0.056, 0.058, 0.054, 0.054, 0.055, 0.056, 0.056, 0.054, 0.053, 0.055, 0.058, 0.054, 0.055,\n\t\t\t\t0.054, 0.055, 0.055, 0.053, 0.052, 0.055, 0.056, 0.057, 0.056, 0.055, 0.054, 0.054, 0.055,\n\t\t\t\t0.053, 0.054, 0.055, 0.068, 0.057, 0.056, 0.054, 0.055, 0.053, 0.055, 0.055, 0.056, 0.056,\n\t\t\t\t0.059\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t[\n\t\t\t\t0.019, 0.044, 0.044, 0.044, 0.044, 0.045, 0.046, 0.045, 0.045, 0.046, 0.045, 0.046, 0.045,\n\t\t\t\t0.046, 0.045, 0.046, 0.046, 0.045, 0.045, 0.046, 0.045, 0.045, 0.046, 0.045, 0.046, 0.046,\n\t\t\t\t0.045, 0.045, 0.046, 0.045, 0.046, 0.045, 0.046, 0.047, 0.046, 0.046, 0.046, 0.045, 0.045,\n\t\t\t\t0.046\n\t\t\t],\n\t\t\t[\n\t\t\t\t0.003, 0.004, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.004,\n\t\t\t\t0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,\n\t\t\t\t0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,\n\t\t\t\t0.003\n\t\t\t]\n\t\t]\n\t]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Returning SVG - TypeScript\nDESCRIPTION: This snippet demonstrates how to return an SVG image. It expects a string value containing the SVG code, associated with the \"svg\" key. The SVG will be rendered in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"svg\": \"<svg>...</svg>\" }\n```\n\n----------------------------------------\n\nTITLE: User Authentication with Windmill React SDK\nDESCRIPTION: This snippet illustrates how to perform user login by calling `UserService.login` with email and password in the request body. It handles the promise to process success or error scenarios, enabling authentication within React applications.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/15_react_sdk/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { UserService } from 'windmill-client';\n\nUserService.login({\n\trequestBody: { email: YOUR_EMAIL, password: YOUR_PASSWORD }\n})\n\t.then(() => {\n\t\t// Handle successful login\n\t})\n\t.catch((error) => {\n\t\t// Handle login errors\n\t});\n```\n\n----------------------------------------\n\nTITLE: PHP Script with String Parameter\nDESCRIPTION: This snippet demonstrates a simple PHP script with a `main` function taking a string parameter with a default value. Setting a default value for the parameter will result in the UI not considering this field as required. This highlights the auto-generated UI capabilities based on the signature of the `main` function within Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/8_php_quickstart/index.mdx#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction main(string $e = \"default value\")\n```\n\n----------------------------------------\n\nTITLE: Generating Severity Chart Data - TypeScript\nDESCRIPTION: This TypeScript (Deno) script is very similar to the status chart generation, but it aggregates the number of issues for each severity level instead of status. It also returns an object formatted for ChartJs, containing labels (severity types) and a dataset with the corresponding counts and background colors.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-25-issue-tracker/index.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(issues: any[]) {\n   if (!issues) {\n      return {\n         labels: [],\n         datasets: [],\n      };\n   }\n   const values: Record<string, number> = {};\n   issues.forEach(({ severity }) => {\n      if (!values[severity]) {\n         values[severity] = 0;\n      }\n      values[severity]++;\n   });\n   return {\n      labels: Object.keys(values),\n      datasets: [\n         {\n            data: Object.values(values),\n            backgroundColor: [\n               \"#FF8384\",\n               \"#48C0C0\",\n               \"#FFCE56\",\n            ]\n         },\n      ],\n   };\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Default Column Properties (JavaScript)\nDESCRIPTION: This snippet demonstrates how to dynamically generate AgGrid column definitions by applying a set of default properties to an array of base column configurations. It uses the spread syntax (`...`) to merge default properties with individual column definitions before returning the final array.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/aggrid_table/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst columnDef = [\n  {\n    field: 'name',\n    headerName: 'Full name'\n  },\n  {\n    field: 'age',\n    sortable: false\n  }\n];\n\nconst defaultColumnProperties = {\n  sortable: true\n};\n\nreturn columnDef.map((col) => ({ ...defaultColumnProperties, ...col }));\n```\n\n----------------------------------------\n\nTITLE: Enabling NPM Dependency Installation in Windmill\nDESCRIPTION: Adding the '//npm' comment as the first line in a TypeScript file enables using npm package installation instead of Bun's default package manager. This serves as an escape hatch for cases not supported by Bun.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/1_typescript_quickstart/index.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n//npm\n```\n\n----------------------------------------\n\nTITLE: Styling Editable Textarea in React Card with CSS\nDESCRIPTION: Defines CSS styles for the textarea used in the editable card content. Padding, margin, font size, fixed width, minimum height, and disabling resizing are specified to ensure consistent appearance and user experience while editing card text.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_19\n\nLANGUAGE: CSS\nCODE:\n```\n.text-input {\n  padding: 5px;\n  margin: 11px 0;\n  font-size: 1em;\n  width: 270px;\n  min-height: 80px;\n  resize: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Task Details in Collapsible Sections in React\nDESCRIPTION: A React snippet presenting task start, creation, and completion timestamps in a collapsible <details> element. It lists multiple tasks with rendered timestamps, providing insight into task durations and statuses during performance testing. The code illustrates HTML table inclusion and is intended for performance monitoring dashboards.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<details>\n\n|  **Task**   | **Created at** | **Started at** | **Completed at** |\n| :---------: | -------------: | -------------: | ---------------: |\n| **task_00** | 0.000 | 1.270 | 2.629 |\n| ... |\n</details>\n```\n\n----------------------------------------\n\nTITLE: Defining GPT-4 User Prompt for Python Code Generation\nDESCRIPTION: Provides the basic user-level prompt template for generating Python code in Windmill. It instructs the AI to create a 'main' function based on the user's '{description}', specify parameter types, and avoid calling the 'main' function, aligning with Windmill's execution model.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nWrite a function in python called \"main\". The function should \\{description\\}.\nSpecify the parameter types. Do not call the main function.\n```\n\n----------------------------------------\n\nTITLE: Parsing Mailchimp Mandrill JSON Payload - JavaScript\nDESCRIPTION: This JavaScript snippet parses the incoming JSON payload received from Mailchimp Mandrill into a structured JavaScript object. It expects a single string input (`x`) which contains the stringified JSON array of parsed email events from Mandrill. The script returns the parsed object, making the email details accessible for subsequent steps in a Windmill flow.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/mailchimp_mandrill.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function main(x) {\n\treturn JSON.parse(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Using DocCard Component Instances in MDX (JSX)\nDESCRIPTION: This snippet shows rendering multiple instances of the DocCard React component inside a CSS grid layout to provide links and descriptions for different documentation topics such as Script editor, VS Code extension, Flow editor, and App editor. Each DocCard instance includes props for title, description, hyperlink reference, and optionally color. This provides a reusable pattern to display linked content within the documentation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/23_instant_preview/index.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Script editor\"\n\t\tdescription=\"Scripts are the basic building blocks that can be written in TypeScript, Python, Go, PHP, Bash, C#, SQL and Rust or launch docker containers.\"\n\t\thref=\"/docs/script_editor\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Insert row into Supabase using TypeScript\nDESCRIPTION: This script initializes a Supabase client and defines an async function to insert a row of data into a specified table. It requires the Supabase URL and key, and handles errors by throwing exceptions. The function parameters include the database credentials, table name, and data object, enabling programmatic data storage from form responses or other sources.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-28-dynamic-form/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createClient } from \"npm:@supabase/supabase-js\";\n\n// Define the Supabase resource type as specified\n type Supabase = {\n  key: string;\n  url: string;\n};\n\nexport async function main(\n  supabaseResource: Supabase,\n  tableName: string,\n  rowData: Record<string, any>,\n) {\n  // Initialize the Supabase client\n  const supabase = createClient(supabaseResource.url, supabaseResource.key);\n\n  // Insert a row into the specified table\n  const { data, error } = await supabase\n    .from(tableName)\n    .insert([rowData]);\n\n  // Return the result or throw an error if the operation failed\n  if (error) {\n    throw error;\n  }\n\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Task Duration Data Table for Lightweight Tasks in Normal Mode (Markdown)\nDESCRIPTION: This table details timestamp data for 40 lightweight tasks executed sequentially, highlighting the quick completion times crucial for assessing high-frequency task performance.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n|  **Task**   | **Created at** | **Started at** | **Completed at** |\n| :---------: | -------------: | -------------: | ---------------: |\n| **task_00** |          0.000 |          0.019 |            0.022 |\n| **task_01** |          0.029 |          0.073 |            0.077 |\n| **task_02** |          0.081 |          0.125 |            0.128 |\n| **task_03** |          0.134 |          0.179 |            0.182 |\n| **task_04** |          0.187 |          0.231 |            0.234 |\n| **task_05** |          0.239 |          0.284 |            0.287 |\n| **task_06** |          0.292 |          0.338 |            0.341 |\n| **task_07** |          0.345 |          0.391 |            0.394 |\n| **task_08** |          0.398 |          0.444 |            0.447 |\n| **task_09** |          0.451 |          0.497 |            0.500 |\n| **task_10** |          0.505 |          0.549 |            0.552 |\n| **task_11** |          0.557 |          0.603 |            0.606 |\n| **task_12** |          0.610 |          0.655 |            0.659 |\n| **task_13** |          0.663 |          0.709 |            0.712 |\n| **task_14** |          0.716 |          0.761 |            0.764 |\n| **task_15** |          0.768 |          0.814 |            0.817 |\n| **task_16** |          0.821 |          0.867 |            0.870 |\n| **task_17** |          0.876 |          0.921 |            0.924 |\n| **task_18** |          0.929 |          0.973 |            0.976 |\n| **task_19** |          0.981 |          1.027 |            1.030 |\n| **task_20** |          1.035 |          1.080 |            1.083 |\n| **task_21** |          1.087 |          1.132 |            1.135 |\n| **task_22** |          1.139 |          1.186 |            1.189 |\n| **task_23** |          1.193 |          1.238 |            1.241 |\n| **task_24** |          1.246 |          1.292 |            1.295 |\n| **task_25** |          1.299 |          1.345 |            1.348 |\n| **task_26** |          1.352 |          1.398 |            1.401 |\n| **task_27** |          1.405 |          1.451 |            1.454 |\n| **task_28** |          1.458 |          1.504 |            1.507 |\n| **task_29** |          1.512 |          1.557 |            1.560 |\n| **task_30** |          1.564 |          1.611 |            1.614 |\n| **task_31** |          1.618 |          1.664 |            1.667 |\n| **task_32** |          1.671 |          1.717 |            1.720 |\n| **task_33** |          1.724 |          1.770 |            1.773 |\n| **task_34** |          1.777 |          1.823 |            1.826 |\n| **task_35** |          1.830 |          1.876 |            1.879 |\n```\n\n----------------------------------------\n\nTITLE: Using Persistent States in Python Scripts\nDESCRIPTION: Illustrates a Python script that uses Windmill's state management functions (`get_state`, `set_state`) to persist data between runs. The script retrieves the last known temperature, fetches the current temperature, compares the two, and updates the state with the new temperature. It requires the `requests` library for HTTP calls and the `wmill` library for state operations.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom wmill import set_state, get_state\n\ndef main():\n\t# Get temperature from last execution\n    last_temperature = get_state()\n\n    # Fetch the temperature in Paris from wttr.in\n    response = requests.get(\"http://wttr.in/Paris?format=%t\")\n\n    new_temperature = response.text.strip(\"°F\")\n\n\t# Set current temperature to state\n    set_state(new_temperature)\n\n    # Compare last_temperature and new_temperature\n    if last_temperature < new_temperature:\n        return \"The temperature has increased.\"\n    elif last_temperature > new_temperature:\n        return \"The temperature has decreased.\"\n    else:\n        return \"The temperature has remained the same.\"\n```\n\n----------------------------------------\n\nTITLE: Consuming Message Script in Python\nDESCRIPTION: This Python script is intended to be triggered by the Kafka topic listener script. It receives a message payload as input (`msg`) and prints the received message to the console. This script demonstrates a simple consumer that processes the data received from the Kafka topic.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-19-service-script-kafka/index.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef main(\n    msg: str\n):\n    print(\"A message has been received: {}\".format(msg))\n```\n\n----------------------------------------\n\nTITLE: DocCard Component Implementation for Navigation\nDESCRIPTION: Usage of the DocCard React component to create navigational cards that link to related documentation about workspace object storage, including title, description, and hyperlink reference.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/cloudflare-r2.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Workspace object storage\"\n\t\tdescription=\"Connect your Windmill workspace to your S3 bucket or your Azure Blob storage to enable users to read and write from S3 without having to have access to the credentials.\"\n\t\thref=\"/docs/core_concepts/object_storage_in_windmill#workspace-object-storage\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Plotly X-axis Default Configuration\nDESCRIPTION: The default configuration for X-axis data in the Plotly component, represented as a JSON array of integer values.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/plotly.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Card Text with Conditional Rendering in React JavaScript\nDESCRIPTION: This snippet enhances the Card component with text editing functionality by introducing two state variables: one for the card text and another Boolean for editing mode. It uses a ternary expression to conditionally render either a <textarea> with live binding to the text state and a 'Save' button to exit editing mode, or a <p> element displaying the text that can be clicked to enter editing mode. The textarea can be double-clicked to clear content. This approach enables inline editing directly within the draggable card content area.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n{isEditing ? <div><textarea className=\"text-input\" value={text} onChange={(e) => \nsetText(e.target.value)} onDoubleClick={() => setText('')} /><button onClick={() => \nsetIsEditing(false)}>Save</button></div> : <p onClick={() => setIsEditing(true)}>{text}</p>}\n```\n\n----------------------------------------\n\nTITLE: Importing Static Assets and Components in TypeScript\nDESCRIPTION: This snippet demonstrates importing a static SVG asset and a React component written in TypeScript from relative paths. These imports are used in a React-based documentation or frontend project to include visual assets and UI components for rendering comparative GitHub star tables and illustrations.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-07-12-airflow-alternatives/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport UseCasesSvg from '../../static/use_cases.svg';\nimport GithubStarTable from '../../src/components/CompareGithub.tsx';\n```\n\n----------------------------------------\n\nTITLE: PHP Windmill Script Quickstart\nDESCRIPTION: Creates a DocCard with PHP icon, title, description, and link to PHP scripting documentation in Windmill. It serves as an entry point for users interested in PHP scripting within the Windmill environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { SiPhp } from 'react-icons/si';\n\n// Card directing to PHP script tutorials in Windmill, including icon, title, description, and link\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in MDX (JavaScript/JSX)\nDESCRIPTION: This snippet imports the DocCard React component from the local site components directory to be used within the MDX documentation page. DocCard components are utilized to visually structure linked documentation topics with titles, descriptions, and hrefs. There are no explicit inputs or outputs, and the snippet requires React and MDX environment to function properly.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/23_instant_preview/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Running and Managing Windmill Containers with Docker Compose - Bash\nDESCRIPTION: This bash snippet includes commands to start Windmill Docker containers either attached or detached, update Windmill services by stopping workers and pulling new server images, and reset the Windmill instance by removing database volumes before restarting containers. It assumes Docker Compose is installed and configured. Using detached mode allows containers to continue running in the background after the terminal disconnects, while reset procedures clear all persisted PostgreSQL state, effectively resetting the instance.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose stop windmill_worker\\ndocker compose pull windmill_server\\ndocker compose up -d\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down --volumes\\ndocker volume rm -f windmill_db_data\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Task Duration Data Table for Long Running Tasks in Dedicated Worker Mode (Markdown)\nDESCRIPTION: This table provides timestamp data for 10 tasks executed with dedicated workers, allowing comparison with normal mode performance. It is critical for understanding the impact of worker mode on task durations.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n|  **Task**   | **Created at** | **Started at** | **Completed at** |\n| :---------: | -------------: | -------------: | ---------------: |\n| **task_00** |          0.000 |          0.023 |            0.745 |\n| **task_01** |          0.776 |          0.797 |            1.518 |\n| **task_02** |          1.546 |          1.571 |            2.292 |\n| **task_03** |          2.298 |          2.340 |            3.057 |\n| **task_04** |          3.063 |          3.114 |            3.845 |\n| **task_05** |          3.874 |          3.889 |            4.608 |\n| **task_06** |          4.614 |          4.661 |            5.380 |\n| **task_07** |          5.385 |          5.433 |            6.151 |\n| **task_08** |          6.158 |          6.208 |            6.925 |\n| **task_09** |          6.933 |          6.981 |            7.701 |\n```\n\n----------------------------------------\n\nTITLE: Windmill Server ECS Task Definition and Configuration\nDESCRIPTION: Defines the ECS task setup for deploying the Windmill server container on EC2, including environment variables, health checks, logging, and resource allocations. It specifies dependencies and configuration placeholders for dynamic values like version tags and database credentials.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/aws_ecs.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"containerDefinitions\": [\n\t\t{\n\t\t\t\"name\": \"windmill-server\",\n\t\t\t\"image\": \"ghcr.io/windmill-labs/windmill-ee:<LATEST_RELEASE>\",\n\t\t\t\"cpu\": 1024,\n\t\t\t\"memory\": 1536,\n\t\t\t\"portMappings\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"http\",\n\t\t\t\t\t\"containerPort\": 8000,\n\t\t\t\t\t\"hostPort\": 8000,\n\t\t\t\t\t\"protocol\": \"tcp\",\n\t\t\t\t\t\"appProtocol\": \"http\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"essential\": true,\n\t\t\t\"environment\": [\n\t\t\t\t{\"name\": \"JSON_FMT\", \"value\": \"true\"},\n\t\t\t\t{\"name\": \"DATABASE_URL\", \"value\": \"postgres://postgres:<DB_PASSWORD>@<DB_HOSTNAME>:5432/windmill?sslmode=disable\"},\n\t\t\t\t{\"name\": \"MODE\", \"value\": \"server\"}\n\t\t\t],\n\t\t\t\"logConfiguration\": {\n\t\t\t\t\"logDriver\": \"awslogs\",\n\t\t\t\t\"options\": {\n\t\t\t\t\t\"awslogs-group\": \"/ecs/windmill-server\",\n\t\t\t\t\t\"awslogs-region\": \"us-east-2\",\n\t\t\t\t\t\"awslogs-stream-prefix\": \"ecs\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"healthCheck\": {\n\t\t\t\t\"command\": [\"CMD-SHELL\", \"curl -f http://localhost:8000/api/version || exit 1\"],\n\t\t\t\t\"interval\": 10,\n\t\t\t\t\"timeout\": 5,\n\t\t\t\t\"retries\": 5\n\t\t\t}\n\t\t}\n\t],\n\t\"family\": \"windmill-server-json\",\n\t\"executionRoleArn\": \"<ECS_TASK_EXECUTION_ROLE_ARN>\",\n\t\"networkMode\": \"awsvpc\",\n\t\"volumes\": [],\n\t\"placementConstraints\": [],\n\t\"requiresCompatibilities\": [\"EC2\"],\n\t\"cpu\": \"1024\",\n\t\"memory\": \"1536\",\n\t\"runtimePlatform\": {\n\t\t\"cpuArchitecture\": \"X86_64\",\n\t\t\"operatingSystemFamily\": \"LINUX\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using DocCard Component within a Grid Layout (MDX/JSX)\nDESCRIPTION: This JSX snippet demonstrates embedding a custom `DocCard` React component within a `div` container styled using Tailwind CSS classes. The `div` creates a two-column grid layout (`grid`, `grid-cols-2`) with spacing (`gap-6`, `mb-4`). The `DocCard` component renders a link card with a title, description, and hyperlink (`href`) pointing to documentation about importing React apps.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/react_vue_svelte_apps/index.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"React app import\"\n\t\tdescription=\"Import your own Apps in React.\"\n\t\thref=\"/docs/react_vue_svelte_apps/react\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in JSX\nDESCRIPTION: This snippet shows how to import the DocCard component from the site's components directory, which is used for displaying documentation cards on the page.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/statistic_card.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Load Data with Frontend Supabase Client (JavaScript)\nDESCRIPTION: This background runnable fetches data from a Supabase database using the Supabase client stored in the application state. It handles potential errors during the data fetching process and updates both the `state.data` and `state.supabase.error` accordingly.  If the client doesn't exist or an error occurs, it sets `state.data` to an empty array.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-16-supabase-authentication/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Background runnable: Load data\nif (!state.supabase.error) {\n\ttry {\n\t\tconst { data, error, error_description } = await state.supabase.client\n\t\t\t.from('my_table')\n\t\t\t.select();\n\t\tconst err = error_description ?? error ?? undefined;\n\t\tif (err) {\n\t\t\tthrow Error(err);\n\t\t}\n\t\tstate.data = data;\n\t\tsetTab('a', 1);\n\t} catch (err) {\n\t\tstate.supabase.error = err;\n\t\tstate.data = [];\n\t}\n} else {\n\tstate.data = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Instance object storage features overview\nDESCRIPTION: This snippet describes the advanced features of instance object storage available in Windmill's Enterprise Edition, focusing on high scalability, large-scale log management, and distributed dependency caching for improved performance.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/s3.mdx#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n![S3/Azure for Python/Go cache & large logs](../core_concepts/20_jobs/s3_azure_cache.png \"S3/Azure for Python/Go cache & large logs\")\n\nUnder [Enterprise Edition](/pricing), instance object storage offers advanced features to enhance performance and scalability at the [instance](../advanced/18_instance_settings/index.mdx) level. This integration is separate from the [Workspace object storage](#workspace-object-storage) and provides solutions for large-scale log management and distributed dependency caching.\n```\n\n----------------------------------------\n\nTITLE: Sending Responses to SMTP Commands with Tokio Framed Stream\nDESCRIPTION: This snippet defines an asynchronous helper function `send_commands` that sends multiple response messages to an SMTP client over a framed TCP stream. It formats each message with a carriage return at the end, converts them into a stream, and sends all messages asynchronously via `send_all`. It ensures proper framing and line termination according to SMTP protocol requirements.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-10-07-email-triggers/index.mdx#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nasync fn send_commands(\n    framed: &mut Framed<TlsStream<TcpStream>, LinesCodec>,\n    commands: Vec<String>,\n) -> anyhow::Result<()> {\n    let messages = iter(commands.into_iter().map(|x| format!(\"{}\\r\", x)));\n    framed.send_all(&mut messages.map(Ok)).await?;\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration for Traces and Logs (YAML)\nDESCRIPTION: Defines the OpenTelemetry collector setup responsible for receiving traces and logs via OTLP protocol, processing them in batch mode, and exporting to Tempo and Loki respectively. Includes configuration for services, receivers, processors, and exporters.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/otel/index.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nprocessors:\n  batch:\n    timeout: 5s\n\nexporters:\n  otlphttp/loki:\n    endpoint: http://loki:3100/otlp\n    tls:\n      insecure: true\n  otlp/tempo:\n    endpoint: http://tempo:4317\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/tempo]\n    logs:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlphttp/loki]\n```\n\n----------------------------------------\n\nTITLE: Searching Wikipedia for Pages Using the Wikipedia Python Package\nDESCRIPTION: This script utilizes the 'wikipedia' Python package to search Wikipedia for pages matching a given keyword. The main function performs a search for the term 'windmill' and returns a list of matching page titles. The only prerequisite is the installation of the 'wikipedia' package. Inputs: none (the search term is hardcoded); Outputs: List of Wikipedia page titles related to 'windmill'.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport wikipedia\n\ndef main():\n    search_pages = wikipedia.search(\"windmill\")\n    \n    return(search_pages)\n```\n\n----------------------------------------\n\nTITLE: Email Input Component Configuration Table in Markdown\nDESCRIPTION: Defines configuration options for the Email input component using a markdown table format. It lists each property name, type, whether it is connectable or templatable, its default value, and a detailed description. This table informs users how to customize the email input component, including placeholder text, default values, icons, and disabled status.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/email_input.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name          |  Type   | Connectable | Templatable |  Default  | Description                                |\\n| ------------- | :-----: | :---------: | :---------: | :-------: | ------------------------------------------ |\\n| Placeholder   | string  |    false    |    false    |   Email   | The email input placeholder.               |\\n| Default value | string  |    true     |    false    |   Email   | The email input default value.             |\\n| Before Icon   | string  |    false    |    false    | Undefined | The icon to display before the label.      |\\n| After Icon    | string  |    false    |    false    | Undefined | The icon to display after the label.       |\\n| Disabled      | boolean |    false    |    false    |   false   | Whether the text input should be disabled. |\n```\n\n----------------------------------------\n\nTITLE: Returning Input Value Unchanged in TypeScript\nDESCRIPTION: This minimal TypeScript function (used in steps 'ag' and 'ah') simply accepts a single string argument `x` and returns it without any modification. Within the described workflow's conditional logic (branch 'af'), it acts as a pass-through step, returning either a cleaned search result (step 'ag' after 'ad') or potentially an empty string to discard irrelevant results (step 'ah').\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-29-automatically-populate-crm/index.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// import * as wmill from \"https://deno.land/x/windmill@v1.82.0/mod.ts\"\n\nexport async function main(x: string) {\n\treturn x;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server for React Component - Bash\nDESCRIPTION: This snippet launches the development server defined in the project's configuration using npm. It enables live reloading and previewing changes to your custom React component within a local development environment. Prerequisites include successful dependency installation, and the script must be defined in package.json as 'dev'. Executing this command opens the app at a local URL for immediate editing and testing; errors occur if dependencies are missing or the script is undefined.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_react_components.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Windmill Basic Setup Compute Units - YAML\nDESCRIPTION: This YAML snippet configures Windmill workers for a basic setup with a total of 3 Compute Units. It defines two standard workers (2 replicas, 2GB memory each) contributing 2 CUs and one native worker (1 replica, 2GB memory, 8 subworkers) contributing 1 CU.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/7_plans_details/index.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  # Other services (db, server, caddy, etc.) don't count towards CUs\n  \n  windmill_worker_custom_name:\n    deploy:\n      replicas: 2  # 2 workers × 1 CU each = 2 CUs\n      resources:\n        limits:\n          memory: 2048M  # 2GB = 1 CU per worker\n  \n  windmill_worker_native:\n    deploy:\n      replicas: 1  # 1 worker with subworkers NUM_WORKERS=8 = 1 CU\n      resources:\n        limits:\n          memory: 2048M\n    environment:\n      - WORKER_GROUP=native\n      - NUM_WORKERS=8\n```\n\n----------------------------------------\n\nTITLE: Hiding Columns with Initial State in Table Component (TSX)\nDESCRIPTION: This snippet demonstrates how to hide a specific column in the Windmill Table component by configuring the `columnVisibility` property within the `Initial State` of the table.  The `id` column is set to `false`, making it hidden by default. This configuration uses the TanStack Table library's API.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/table/index.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  \"columnVisibility\": {\n    \"id\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in React for Windmill Documentation\nDESCRIPTION: This code snippet imports the DocCard component from the site's components directory. This component is used for displaying documentation cards in the Windmill documentation.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/2_setup_oauth/index.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Importing Certificate to Java Truststore\nDESCRIPTION: This command uses the `keytool` utility to import a CA certificate into a Java truststore.  This is required for Java-based workers to trust connections secured by the specified certificate.  Replace the placeholder paths and alias with actual values.  The default password is `12345678`.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -import -alias \"your.corp.com\" -file path/to/cert.crt -keystore path/to/created/dir/with/certs/truststore.jks -storepass '12345678' -noprompt\n```\n\n----------------------------------------\n\nTITLE: Customizing images and links rendering with react-markdown in JavaScript\nDESCRIPTION: Demonstrates advanced customization of img and a elements in Markdown by defining custom renderers via react-markdown's components prop. The example applies styling, hover effects, lazy loading, fallback handling for images, and secure external link behavior with mouse interactions and click logging. This allows fine control over UX and accessibility of Markdown-rendered assets and links. Requires React and react-markdown.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-11-27-using-markdown-in-react/index.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nexport default function App() {\n  return (\n    <ReactMarkdown\n      components={{\n        img: ({node, ...props}) => (\n          <div style={{ textAlign: 'center', margin: '20px 0' }}>\n            <img\n              {...props}\n              style={{\n                maxWidth: '70%',\n                borderRadius: '8px',\n                boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n                transition: 'transform 0.2s',\n                cursor: 'pointer',\n              }}\n              onMouseOver={(e) => e.target.style.transform = 'scale(1.05)'}\n              onMouseOut={(e) => e.target.style.transform = 'scale(1)'}\n              loading=\"lazy\"\n              onError={(e) => {\n                e.target.src = 'fallback-image-url.jpg'\n                e.target.alt = 'Failed to load image'\n              }}\n            />\n          </div>\n        ),\n        a: ({node, children, href, ...props}) => (\n          <a\n            href={href}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{\n              color: '#0066cc',\n              textDecoration: 'none',\n              borderBottom: '1px solid transparent',\n              transition: 'border-bottom-color 0.2s',\n            }}\n            onMouseOver={(e) => e.target.style.borderBottomColor = '#0066cc'}\n            onMouseOut={(e) => e.target.style.borderBottomColor = 'transparent'}\n            onClick={() => console.log(`Link clicked: ${href}`)}\n            {...props}\n          >\n            {children} ↗\n          </a>\n        )\n      }}\n    >\n      # Handling images and links\n      \n      ![Example Image](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTXrLXCq_Qrr9X9Yavf8jF3AonwSqLgHmAIKA&s)\n      \n      [Visit Windmill](https://www.windmill.dev/)\n    </ReactMarkdown>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Representing an S3 Object Pointer in Windmill - JSON\nDESCRIPTION: This snippet demonstrates the JSON structure used by Windmill to represent an S3 object pointer. The \"s3\" key contains the object's key or path within the assigned S3 bucket. This format is leveraged by scripts to reference both input and output files, supporting integration with the Windmill bucket explorer UI. The S3 object pointer must reference a valid, accessible key in the workspace's configured bucket, and only the key/path string is required as input and output.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/27_data_pipelines/index.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"s3\": \"path/to/file\"\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming User List for Selection - TypeScript\nDESCRIPTION: This TypeScript (Deno) script transforms an array of user objects into a format suitable for a `Select` component. It maps each user object to an object with `value` and `label` properties, using the user's `id` as the value and `name` as the label.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-25-issue-tracker/index.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(users: undefined | any[]) {\n\tif (!Array.isArray(users)) return [];\n\treturn users.map(({ id, name }) => ({ value: id, label: name }));\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Workspace using Windmill CLI - Bash\nDESCRIPTION: This command removes the specified workspace from the local CLI configuration. It does not delete the workspace from the remote server, only locally unregisters it. The workspace_name is mandatory as a positional argument. Requires Windmill CLI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/workspace-management.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace remove <workspace_name>\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Fetching a Resource Using Windmill Client API\nDESCRIPTION: This example illustrates how to programmatically retrieve a resource named 'u/user/foo' within a TypeScript script using Windmill's client API, facilitating dynamic resource access during script execution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/code_editor/add_variables_resources.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nwmill.getResource('u/user/foo');\n```\n\n----------------------------------------\n\nTITLE: Resolving React Draggable findDOMNode Warning in JavaScript\nDESCRIPTION: This snippet modifies a React component using react-draggable to eliminate the deprecated findDOMNode warning triggered in React StrictMode. It uses the useRef hook to create a nodeRef passed to Draggable and attached as a ref to the draggable element. This approach targets the DOM node directly instead of relying on findDOMNode under the hood. The snippet assumes react-draggable is installed and imported. It defines a Card component receiving props for dynamic titles, rendering a draggable card wrapper.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Draggable from 'react-draggable';\nimport { useRef } from 'react';\n\nconst Card = (props) => {\n\n  const nodeRef = useRef(null);\n\n  return (\n    <Draggable nodeRef={nodeRef}>\n      <div ref={nodeRef} className=\"card\">\n        <div className=\"header\">{props.title}</div>\n        <div className=\"content\">Content</div>\n      </div>\n    </Draggable>\n  )\n}\n\nexport default Card;\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Setup for Docker Socket\nDESCRIPTION: This snippet provides instructions on how to configure the Docker socket for the Windmill worker within a docker-compose environment.  It describes how to uncomment the volume mount to allow Docker containers to be run from within the workers.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/7_docker/index.mdx#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n      # mount the docker socket to allow to run docker containers from within the workers\n      # - /var/run/docker.sock:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Running background tasks using Python's threading module\nDESCRIPTION: Demonstrates how to initiate a background task in Python using the threading module. It creates and starts a thread to run a background job concurrently, enabling the main thread to continue execution without waiting for the background task to finish. Suitable for I/O-bound tasks and lightweight concurrent execution with dependencies on the threading module.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport threading\nimport time\n\ndef background_task():\n    print(\"Background task started\")\n    time.sleep(5)\n    print(\"Background task finished\")\n\n# Create a thread and run the background task\nthread = threading.Thread(target=background_task)\nthread.start()\n\nprint(\"Main thread continues to run...\")\n\n# Wait for the background task to complete\nthread.join()\nprint(\"Main thread finished\")\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component for Documentation Layout in TSX\nDESCRIPTION: Imports the DocCard React component from the specified path for rendering documentation cards within the page layout. This snippet sets up the UI structure used to link to additional documentation resources related to the app editor and app quickstart guides.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/email_input.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Clearing the Cart\nDESCRIPTION: This frontend script clears the cart by setting the `state.cart` to an empty array. This removes all items from the cart.  It is designed to be triggered by a 'Delete cart' button to empty the contents of the shopping cart in the browser's state.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/7_app_e-commerce.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nstate.cart = [];\n```\n\n----------------------------------------\n\nTITLE: Configuring WAL Level to Logical in postgresql.conf for Logical Replication\nDESCRIPTION: Enables logical replication by setting the `wal_level` parameter to `logical` within the Postgres configuration file `postgresql.conf`. This method requires locating and editing the config file, adding or modifying the `wal_level` line, saving the file, and restarting the Postgres instance. This configures the server to support logical replication needed for Windmill triggers.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/46_postgres_triggers/index.mdx#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nwal_level = logical\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in React JSX\nDESCRIPTION: This snippet imports the 'DocCard' React component from the '@site/src/components/DocCard' module. This component is later used to render documentation cards within a grid layout on the page. The import assumes the component is pre-defined and available in the specified path.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/8_public_apps.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Extracting Code Block Content using Regex\nDESCRIPTION: A regular expression designed to extract the code content from a markdown code block generated by the AI. It matches the opening backticks and language identifier, captures the code content (including newlines), and matches the closing backticks.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n/```[a-zA-Z]+\\n([\\s\\S]*?)\\n```/\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Logic Function in Python Script\nDESCRIPTION: This Python snippet defines a reusable function within a script (e.g., u/user/common_logic) intended for import across other scripts. Dependencies include Python 3.x, Windmill's script execution context, and appropriate access rights to the script. The function does not require any parameters and, when invoked, prints 'Common logic!'. No explicit output is returned from this function—its effect is through side effect (console output).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/5_sharing_common_logic/index.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# u/user/common_logic\ndef foo():\n  print('Common logic!')\n```\n\n----------------------------------------\n\nTITLE: Opening .env File with Nano (Bash)\nDESCRIPTION: This bash command uses the `nano` text editor to open the Windmill `.env` configuration file. It is used when following the deprecated manual setup method to modify environment variables directly in the file.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/18_instance_settings/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnano .env\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Kafka Topic in Python\nDESCRIPTION: This Python script publishes messages to a Kafka topic using the `confluent_kafka` library. It sends a specified number of messages with random sleep intervals between each message. It utilizes a delivery callback to handle the success or failure of message publishing.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-19-service-script-kafka/index.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom confluent_kafka import Producer\nimport wmill\nimport random\nimport time\n\nNUMBER_OR_MSGS = 10\nMAX_SLEEP_SECS = 10\n\ndef main(kafka_topic: str = \"windmill-events\", msg: str = \"Hello World!\"):\n    for i in range(NUMBER_OR_MSGS):\n        sleep_secs = random.randint(0, MAX_SLEEP_SECS)\n        print(\"Sleeping for {}s\".format(sleep_secs))\n        time.sleep(sleep_secs)\n\n        client = Producer({\n            'bootstrap.servers': 'kafka:9092',\n        })\n\n        client.poll(0)\n        client.produce(kafka_topic, msg.encode('utf-8'), callback=delivery_callback)\n        client.flush()\n    return\n\ndef delivery_callback(err, msg):\n    if err is not None:\n        raise Exception('Publishing message failed: {}'.format(err))\n    else:\n        print('Message delivered')\n```\n\n----------------------------------------\n\nTITLE: Creating Slack Interaction Endpoint with Windmill and Slack Web API\nDESCRIPTION: This code defines an asynchronous function to send ephemeral messages to users on Slack using the Slack Web API, and then trigger a Windmill flow for further processing. It depends on the Slack Web API client and Windmill's JobService, requiring appropriate tokens and flow paths as parameters.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-06-05-discord-bot/index.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Resource } from 'https://deno.land/x/windmill@v1.108.0/mod.ts';\nimport { JobService } from 'https://deno.land/x/windmill@v1.104.2/mod.ts';\nimport { WebClient } from 'https://deno.land/x/slack_web_api@1.0.3/mod.ts';\n\nexport async function main(\n\ttext: string,\n\tslack: Resource<'slack'>,\n\tchannel_id: string,\n\tuser_id: string,\n\tworkspace: string,\n\tpath: string\n) {\n\tconst client = new WebClient(slack.token);\n\n\tawait client.chat.postEphemeral({\n\t\ttext: 'Bot is thinking...',\n\t\tchannel: channel_id,\n\t\tuser: user_id\n\t});\n\n\tawait JobService.runFlowByPath({\n\t\tworkspace,\n\t\tpath,\n\t\trequestBody: {\n\t\t\ttext,\n\t\t\tchannel_id\n\t\t}\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Bun Executable Path Environment Variable in PowerShell\nDESCRIPTION: This snippet assigns the Bun executable path to the 'BUN_PATH' environment variable in PowerShell, which is required for Windmill to recognize the Bun executor. Replace the path with the correct location from your system. No output is returned on success; the variable is set for the current environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/17_windows_workers/index.mdx#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Replace these variables with your specific configuration\n$env:BUN_PATH=\"C:\\Users\\Alex\\.bun\\bin\\bun.exe\"\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Tutorial in JSX/Markdown\nDESCRIPTION: Code for embedding a video tutorial demonstrating how to edit flows in YAML within the flow editor. The video includes controls and styling with border and rounded corners.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/3_editor_components.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<video\n\tclassName=\"border-2 rounded-lg object-cover w-full h-full dark:border-gray-800\"\n\tcontrols\n\tsrc=\"/videos/edit_flow_yaml.mp4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Logic Functions in TypeScript/Bun Without File Extension\nDESCRIPTION: For the Bun runtime, this TypeScript snippet imports main as foo and util from a peer script using a relative import, omitting the .ts extension. This is more compatible with local development environments. Both the source and target scripts must exist and be readable, and invocations use the exact relative paths as in the filesystem.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/5_sharing_common_logic/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { main as foo, util } from '../my_script_path';\n```\n\n----------------------------------------\n\nTITLE: Define Arguments and Insert Data using MySQL\nDESCRIPTION: Defines script arguments using the MySQL-specific `:name` syntax, including optional types and default values. Shows a sample `INSERT` statement using these named arguments. Also illustrates how to bind the script to a specific database resource using a comment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- :name1 (text) = default arg\n-- :name2 (int)\nINSERT INTO demo VALUES (:name1, :name2)\n```\n\n----------------------------------------\n\nTITLE: Returning GIF - TypeScript\nDESCRIPTION: This snippet shows how to return a GIF image. The GIF content must be base64 encoded.  It uses the \"gif\" key or provides the base64 string directly.  The GIF is displayed in the UI.  There is a constraint that the gif must be encoded in base64.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"gif\": { \"content\": base64Image } }\n```\n\n----------------------------------------\n\nTITLE: Request Interactive Slack Approval\nDESCRIPTION: This Python snippet demonstrates how to use the `wmill.request_interactive_slack_approval` function to request an interactive approval on Slack.  It specifies the Slack resource path, channel ID, message, approver, default arguments as JSON, and dynamic enums as JSON. This function sends a message to the specified Slack channel, prompting the approver to approve or reject the request. It depends on the `wmill` module.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwmill.request_interactive_slack_approval(\n    slack_resource_path=\"/u/username/my_slack_resource\",\n    channel_id=\"admins-slack-channel\",\n    message=\"Please approve this request\",\n    approver=\"approver123\",\n    default_args_json={\"key1\": \"value1\", \"key2\": 42},\n\tdynamic_enums_json={\"foo\": [\"choice1\", \"choice2\"], \"bar\": [\"optionA\", \"optionB\"]},\n)\n```\n\n----------------------------------------\n\nTITLE: Windmill Go Script Boilerplate Example\nDESCRIPTION: Illustrates the default Go boilerplate code generated by Windmill. It defines a `main` function accepting string and nested struct parameters, demonstrates printing output using `fmt`, includes an example external dependency (`rsc.io/quote`), and shows a commented-out import for the Windmill Go client. The function must return `(interface{}, error)` as per Windmill requirements.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/3_go_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage inner\n\nimport (\n\t\"fmt\"\n\t\"rsc.io/quote\"\n\t// wmill \"github.com/windmill-labs/windmill-go-client\"\n)\n\n// the main must return (interface{}, error)\n\nfunc main(x string, nested struct {\n\tFoo string `json:\"foo\"`\n}) (interface{}, error) {\n\tfmt.Println(\"Hello, World\")\n\tfmt.Println(nested.Foo)\n\tfmt.Println(quote.Opt())\n\t// v, _ := wmill.GetVariable(\"f/examples/secret\")\n\treturn x, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Add-Card Form Input and Button to React State and Handlers in JavaScript\nDESCRIPTION: This snippet shows the completed form JSX that connects the value of the input element to the newCard state variable and updates it on every keystroke using the onChange handler. When the 'Add card' button is clicked, it triggers the addCard function that appends the new card to the cards array. The input field additionally applies a CSS class name for styling.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"add-card-form\">\n  <input type=\"text\" value={newCard} className=\"new-card-input\" onChange={(e) => setNewCard(e.target.value)}/><button onClick={addCard}>Add card</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: recompute Function Syntax for List Component\nDESCRIPTION: The syntax definition for the recompute function used to control List components. It takes a single parameter 'id' which is the string identifier of the component to be recomputed.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/list.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrecompute(id: string)\n```\n\n----------------------------------------\n\nTITLE: Custom Flow States in TypeScript\nDESCRIPTION: Example showing how to set and retrieve custom flow states in TypeScript using the Windmill client, which allows storing data across different steps in a flow.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/11_persistent_storage/within_windmill.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as wmill from \"windmill-client@1.297.0\"\n\nexport async function main(x: string) {\n  await wmill.setFlowUserState(\"FOO\", 42)\n  return await wmill.getFlowUserState(\"FOO\")\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining List Component\nDESCRIPTION: This JavaScript snippet defines a React component named `List`. It imports and renders a `Card` component within a `div` element. The component serves as a container for the cards.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport Card from './Card';\n\nconst List = () => {\n  return (\n    <div className=\"list\">\n      <Card />\n    </div>\n  )\n}\n\nexport default List;\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium Wire Driver for Selenoid in Python\nDESCRIPTION: This Python script defines a function `initiateDriver` to create a remote Selenium WebDriver instance connected to a Selenoid hub running in Docker (`host.docker.internal:4444`). It uses `seleniumwire` to capture network requests and dynamically assigns a port for the proxy within a specified range (9920-9930). The function includes conditional logic to handle specific Chrome capabilities for Mac M1 (requiring browser version 91.0) versus Windows (using the latest version). The `main` function demonstrates using this driver to navigate to GitHub and print captured network requests.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-14-selenium-integration/index.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport selenium\nfrom seleniumwire import webdriver\nfrom webdriver_manager.chrome import ChromeDriverManager\n\ndef initiateDriver(macM1=False):\n    print(\"initiating driver\")\n    from seleniumwire import webdriver  # Import from seleniumwire\n    if macM1: #if we are on mac m1 -> custom image by selecting the browser version 91.0\n        i = 9919\n        while True:\n            try:\n                i += 1\n                HOST = 'host.docker.internal'\n                options = {\n                    'auto_config': False,\n                    # the addr and the port where the proxy should start: -> starts it in the windmill container\n                    'addr': '0.0.0.0',\n                    'port': i,\n                }\n\n                chrome_capabilities = {\n                    \"browserName\": \"chrome\",\n                    \"browserVersion\": \"91.0\",\n                    \"selenoid:options\": {\n                        \"enableVNC\": True\n                    },\n                    'goog:chromeOptions': {'extensions': [],\n                                        'args': [f'--proxy-server=host.docker.internal:{i}',\n                                                    '--ignore-certificate-errors']\n                                        }\n                }\n\n                driver = webdriver.Remote(command_executor='http://{}:4444/wd/hub'.format(HOST),\n                                            desired_capabilities=chrome_capabilities,seleniumwire_options=options)\n\n                print(f\"initiated successfully with port:{i}\")\n                break\n            except:\n                print(f\"initiating driver with port:{i}\")\n                if i > 9930:\n                    print(\"port limit exceeded\")\n                    break\n\n    else: #windows image\n        i = 9919\n        while True:\n            try:\n                i += 1\n                HOST = 'host.docker.internal'\n                options = {\n                    'auto_config': False,\n                    # the addr and the port where the proxy should start: -> starts it in the windmill container\n                    'addr': '0.0.0.0',\n                    'port': i,\n                }\n\n                chrome_capabilities = {\n                    \"browserName\": \"chrome\",\n                    #\"browserVersion\": \"91.0\", #on Windows we can use the latest version by not specifying the version number\n                    \"selenoid:options\": {\n                        \"enableVNC\": True\n                    },\n                    'goog:chromeOptions': {'extensions': [],\n                                        'args': [f'--proxy-server=host.docker.internal:{i}',\n                                                    '--ignore-certificate-errors']\n                                        }\n                }\n\n                driver = webdriver.Remote(command_executor='http://{}:4444/wd/hub'.format(HOST),\n                                            desired_capabilities=chrome_capabilities,seleniumwire_options=options)\n\n                print(f\"initiated successfully with port:{i}\")\n                break\n            except:\n                print(f\"initiating driver with port:{i}\")\n                if i > 9930:\n                    print(\"port limit exceeded\")\n                    break\n\n    return driver\n\ndef main():\n  driver = initiateDriver(macM1=False)\n  driver.get('https://www.github.com')\n\n  # Test whether Seleniumwire is working\n  for request in driver.requests:\n      if request.response:\n          print(\n              request.url,\n              request.response.status_code,\n              request.response.headers['Content-Type']\n          )\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh shell completions for Windmill CLI\nDESCRIPTION: Configures Zsh to provide command completion for the Windmill CLI by adding a source line to the Zsh configuration file.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource <(wmill completions zsh)\n```\n\n----------------------------------------\n\nTITLE: AI System Prompt for Code Completion Assistant\nDESCRIPTION: This system prompt provides global instructions to the AI model performing code completion. It directs the AI to return only the code needed for the `<completion></completion>` tags, handle indentation correctly for line breaks, and optionally return nothing if no completion is suggested.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-20-ai-flow-builder/index.mdx#_snippet_5\n\nLANGUAGE: Prompt\nCODE:\n```\nYou are a code completion assistant, return the code that should go\ninside the <completion></completion> tags.\nIf you add a line break, take into account the indentation of the code.\nYou can also not return anything if you think the code is already complete.\n```\n\n----------------------------------------\n\nTITLE: Display Error Message (JavaScript)\nDESCRIPTION: This script displays the Supabase error message stored in the `state`, if available. It retrieves the error message from `state?.supabase?.error` and displays it, or displays an empty string if no error is present.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-16-supabase-authentication/index.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n${state?.supabase?.error ?? ' '}\n```\n\n----------------------------------------\n\nTITLE: Setting WM_STATE_PATH in Deno\nDESCRIPTION: This snippet sets the WM_STATE_PATH environment variable in Deno, which is used for the getState and setState functions. It constructs a path based on the script's URL.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/4_local_development/run_locally.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nlet fullUrl = import.meta.url;\nlet pathS = fullUrl.substring(8, fullUrl.length - 3).split('/');\nconst path = pathS.slice(pathS.length - 3, pathS.length).join('/');\nDeno.env.set('WM_STATE_PATH', path);\n```\n\n----------------------------------------\n\nTITLE: Spawning background processes in Node.js using child_process module\nDESCRIPTION: Provides an example of running a background job in Node.js by spawning a separate process using the child_process module's exec function. It executes a shell command asynchronously, capturing output or errors via callback functions. This method is useful for running external scripts or commands without blocking the main event loop.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { exec } = require('child_process');\n\n// Run a background task using the exec function\nexec('node -e \"console.log(\\'Background task started\\'); setTimeout(() => { console.log(\\'Background task finished\\'); }, 5000);\"', \n  (error, stdout, stderr) => {\n    if (error) {\n        console.error(`Error: ${error.message}`);\n        return;\n    }\n    if (stderr) {\n        console.error(`Stderr: ${stderr}`);\n        return;\n    }\n    console.log(`Stdout: ${stdout}`);\n});\n\nconsole.log(\"Main thread continues to run...\")\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Inventory Variables Configuration for SSH Access (INI Format)\nDESCRIPTION: This snippet provides example lines from an Ansible inventory file configuring the SSH connection. It sets the remote host, SSH user, the private key file path, and skips host key checking to avoid common SSH handshake issues. This complements the Windmill file and variable setup by ensuring the Ansible inventory correctly references the SSH key file written at runtime.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n...\n[your_host:vars]\nansible_host=your_host\nansible_user=john # The SSH user\nansible_ssh_private_key_file=ssh_key # The file we declared where the SSH key can be found.\nansible_ssh_common_args='-o StrictHostKeyChecking=no' # This skips host key verification, avoiding the error. Alternatively, you can add the host to known_hosts, either as an init script or a task in your playbook\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL Roles for External Database Compatibility Using SQL\nDESCRIPTION: This SQL snippet illustrates how to grant the roles `windmill_admin` and `windmill_user` to a database user, which is required when using an external database with Windmill that does not provide superuser access (e.g., managed Azure or GCP PostgreSQL). This role assignment ensures that Windmill has the necessary privileges to operate correctly. This step should be executed on the external Postgres database before connecting Windmill to it.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGRANT windmill_admin TO <user used in database_url>;\nGRANT windmill_user TO <user used in database_url>;\n```\n\n----------------------------------------\n\nTITLE: Fetching Content from a Specific Wikipedia Page in Python\nDESCRIPTION: This script retrieves the full textual content of a given Wikipedia page using the 'wikipedia' Python package. The main function receives an optional 'page' string parameter, defaulting to 'Nicolas Bourbaki', and fetches its content. Dependency is the 'wikipedia' package. Inputs: 'page' (str, optional); Outputs: Wikipedia page content (str). Note: The page must exist, otherwise an error may occur.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport wikipedia\n\ndef main(page: str = \"Nicolas Bourbaki\"):\n    page_content = wikipedia.page(page).content\n    return(page_content)\n```\n\n----------------------------------------\n\nTITLE: Processing Arbitrary Payloads and Wrapping Body in Windmill Scripts - TypeScript\nDESCRIPTION: Equivalent TypeScript example illustrating how to accept arbitrary payloads wrapped inside a 'body' parameter by using the 'wrap_body=true' query argument. The asynchronous 'main' function receives the dynamic payload as 'body' typed as any and logs it. This approach is practical for handling varying input payloads without prior schema assumptions when receiving webhook requests in Windmill scripts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(body: any) {\n\tconsole.log(body);\n}\n```\n\n----------------------------------------\n\nTITLE: Add an S3 resource configuration properties description\nDESCRIPTION: This section details the properties required to configure an S3 resource in Windmill, including essential parameters such as bucket name, region, SSL usage, endpoint, and optional AWS credentials. It serves as a reference for users to correctly set up S3 connections.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/s3.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Property  | Type    | Description               | Default | Required |\n| --------- | ------- | ------------------------- | ------- | -------- |\n| bucket    | string  | S3 bucket name            |         | true     |\n| region    | string  | S3 region for the bucket  |         | true     |\n| useSSL    | boolean | Use SSL for connections   | true    | true     |\n| endPoint  | string  | S3 endpoint               |         | true     |\n| accessKey | string  | AWS access key            |         | false    |\n| pathStyle | boolean | Use path-style addressing | false   | true     |\n| secretKey | string  | AWS secret key            |         | false    |\n```\n\n----------------------------------------\n\nTITLE: Creating and Dispatching Laravel Queue Jobs in PHP\nDESCRIPTION: This snippet demonstrates how to create a background job as a class in Laravel by implementing the ShouldQueue interface and using queue-related traits. The BackgroundJob class accepts parameters via its constructor and defines the handle() method where background logic (in this case, a simple sleep and addition operation) is performed. Dispatching the job is done via the static dispatch() method, adding it to the queue for asynchronous execution. To use this, Laravel and its queue system must be properly configured; supported queue drivers include Redis, Beanstalkd, and others. Inputs are the parameters for the job (x, y), and the output is their sum echoed after a brief pause. The snippet is limited to demonstration purposes and assumes queue workers are running to process dispatched jobs.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n// Job class\nnamespace App\\Jobs;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Bus\\Dispatchable;\n\nclass BackgroundJob implements ShouldQueue\n{\n    use Dispatchable, Queueable;\n\n    protected $x, $y;\n\n    public function __construct($x, $y)\n    {\n        $this->x = $x;\n        $this->y = $y;\n    }\n\n    public function handle()\n    {\n        sleep(5);\n        echo $this->x + $this->y;\n    }\n}\n\n// To dispatch the job\nBackgroundJob::dispatch(10, 20);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Argument in Nu Script Main Function\nDESCRIPTION: This Nu snippet defines a main function with an optional argument 'argument_name', defaulted to 'Its default value' if not provided by the user. No external dependencies are required. Input is passed as a function argument; if omitted, the default is used. Output would be any expression within the function body (currently empty). This facilitates user-friendly and robust script interface design in Nu.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/4_bash_quickstart/index.mdx#_snippet_2\n\nLANGUAGE: nu\nCODE:\n```\ndef main [ argument_name = \"Its default value\" ] { }\n```\n\n----------------------------------------\n\nTITLE: Importing useState Hook\nDESCRIPTION: This JavaScript snippet imports the `useState` hook from the React library.  `useState` is used for managing the state of functional components.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\n```\n\n----------------------------------------\n\nTITLE: Defining the Flow Logic Container (FlowValue) in TypeScript\nDESCRIPTION: Defines the `FlowValue` type in TypeScript, representing the core logic structure within an OpenFlow object. It contains an array of `modules` (representing individual steps or control structures), an optional `failure_module` for centralized error handling (akin to a catch block), and a `same_worker` boolean flag to enforce execution on a single worker for resource sharing.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/openflow/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype FlowValue = {\n\t// a sequence of modules, some of which are containers\n\t// for other modules, like a for-loop or a branch\n\tmodules: FlowModule[];\n\n\t// the error handler to call in case of an unrecoverable error\n\tfailure_module?: FlowModule;\n\n\t// force this flow to be executed entirely on the same worker\n\t// and share a mounted folder to pass heavy data\n\tsame_worker: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Invoking Bash Script with Named Flag - Bash\nDESCRIPTION: This command runs the script with the '-n' flag to specify the name parameter, demonstrating usage of flag-based argument passing patterns. No dependencies besides Bash. Outputs greeting to the specified name.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-27-bash-script-arguments/index.mdx#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n./hello_world.sh -n Ruben\n```\n\n----------------------------------------\n\nTITLE: Checking Email Subject for Substring - JavaScript\nDESCRIPTION: This JavaScript script checks if a given input string, typically an email subject line, contains a specified substring. It takes the input string and an optional substring (defaulting to 'Fwd') and returns an object with a boolean property indicating whether the substring was found. This script is designed to be used in Windmill flows for creating conditional branches based on email subject content.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/mailchimp_mandrill.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function main(input: string, substring: string = 'Fwd'): Promise<Output> {\n\tconst containsSubstring = input.includes(substring);\n\treturn { containsSubstring };\n}\n\ninterface Output {\n\tcontainsSubstring: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CRM Record in Airtable via JavaScript\nDESCRIPTION: This function constructs and sends a request to Airtable's API to create a new contact record with parsed data. It sets up the Airtable client, prepares the data object with fields like first name, last name, email, company, role, and company description, and executes the creation. It returns a confirmation message upon success.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-29-automatically-populate-crm/index.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Airtable } from 'https://deno.land/x/airtable/mod.ts';\n\ntype Airtable = object;\ntype AirtableTable = object;\n\nexport async function main(\n\tat_con: Airtable,\n\tat_table: AirtableTable,\n\tfirst_name: string,\n\tlast_name: string,\n\temail: string,\n\tcompany: string,\n\trole: string,\n\twhat_company_does: string,\n\tautomatic: boolean = true\n) {\n\tconst airtable = new Airtable({ ...at_con, ...at_table });\n\n\tconst new_record = {\n\t\t'First name': first_name,\n\t\t'Last name': last_name,\n\t\tEmail': email,\n\t\tCompany': company,\n\t\tRole': role,\n\t\t'What company does': what_company_does,\n\t\t'Generated automatically': automatic\n\t};\n\n\tconst createOne = await airtable.create(new_record);\n\n\treturn { message: 'Created record in table' };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Resource Schema in JavaScript\nDESCRIPTION: JSON schema definition for a GraphQL resource in Windmill. It specifies required properties like base_url and optional properties like bearer_token and custom_headers for authenticating with a GraphQL API.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/6_rest_grapqhql_quickstart/index.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"required\": [\n        \"base_url\"\n    ],\n    \"properties\": {\n        \"base_url\": {\n            \"type\": \"string\",\n            \"format\": \"uri\",\n            \"default\": \"\",\n            \"description\": \"\"\n        },\n        \"bearer_token\": {\n            \"type\": \"string\",\n            \"default\": \"\",\n            \"description\": \"\"\n        },\n        \"custom_headers\": {\n            \"type\": \"object\",\n            \"description\": \"\",\n            \"properties\": {},\n            \"required\": []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing heading rendering with react-markdown in JavaScript\nDESCRIPTION: Shows how to customize rendering of specific Markdown elements using the components prop of react-markdown. The example defines a CustomH1 component that styles h1 tags with blue color, replacing default behavior. This enables UI customization and theming for Markdown content by overriding rendering components. Requires React and react-markdown.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-11-27-using-markdown-in-react/index.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nconst CustomH1 = ({node, ...props}) => (\n  <h1 style={{color: 'blue'}} {...props} />\n)\n\nexport default function App() {\n  return (\n    <div>\n      <ReactMarkdown\n        components={{\n          h1: CustomH1\n        }}\n      >\n        # This heading will be blue\n      </ReactMarkdown>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright with Init Scripts\nDESCRIPTION: Bash script example for installing Playwright using the init scripts feature in Windmill. This approach allows installing binaries without modifying the base Docker image, executed when workers start up.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/8_preinstall_binaries/index.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install playwright\nplaywright install\nplaywright install-deps\n```\n\n----------------------------------------\n\nTITLE: SQL Generation Prompt Template with Database Schema\nDESCRIPTION: This template demonstrates how to construct a prompt for GPT-4 to generate SQL code based on database schema information. It includes instructions for parameter naming, schema format, and describes how the AI should format its response.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-08-04-windmill-ai/index.mdx#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nWrite SQL code for PostgreSQL that should \\{description\\}.\nArguments can be obtained directly in the statement with `$1::{type}`, `$2::{type}`, etc...\nName the parameters by adding comments before the command like that:\n`-- $1 name1` or `-- $2 name = default` (one per row, do not include the type)\n\nHere's the database schema, each column is in the format [name, type, required, default?]:\n{\n  \"public\": {\n    \"usr\": [\n      [\"username\", \"varchar\", true],\n      [\"email\", \"varchar\", true],\n      ...\n    ],\n    \"completed_job\": [\n      [\"id\", \"uuid\", true],\n      [\"created_by\", \"varchar\", true],\n      ...\n    ],\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Ansible Inventories with Custom Names in Windmill Using YAML\nDESCRIPTION: The snippet shows how to declare multiple inventories passed to an Ansible playbook within Windmill by listing inventory entries in a YAML array. Each entry may specify either a static resource with a custom filename via the 'name' property or a resource_type such as 'ansible_inventory' or 'c_dynamic_ansible_inventory'. This setup allows passing multiple inventories with distinct names to the 'ansible-playbook' command.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Declaring three different inventories to be passed to the playbook\ninventory:\n  - resource: u/user/my_base_inventory\n    name: base.ini\n  - resource_type: ansible_inventory\n  - resource_type: c_dynamic_ansible_inventory\n    name: hcloud.yml\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm - Bash\nDESCRIPTION: This snippet installs all the required dependencies listed in the project's package.json using npm. It ensures that the node_modules folder is populated and the project is ready for development or building. Run this command from the root directory of the cloned React custom component template; a working Node.js and npm installation is required. No parameters are needed; output comprises downloaded and installed packages or error messages upon failure.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_react_components.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining Card List with useState\nDESCRIPTION: This JavaScript snippet demonstrates using `useState` in `List.jsx` to define and initialize a state variable named `cards`.  The state variable holds an array of card data, each having a `title` and `id`.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst [cards, setCards] = useState([{title: \"Foo\", id: 0}, {title: \"Bar\", id: 1}, {title: \"Foobar\", id: 3}]);\n```\n\n----------------------------------------\n\nTITLE: Benchmarking AWS Lambda Function Execution with Siege\nDESCRIPTION: Uses the `siege` command-line utility to send 500 sequential requests (`-r500 -c1`) to the AWS Lambda function's API Gateway endpoint. Requires the Lambda API Gateway host address (`$AWS_LAMBDA_HOST`) and an API key (`$AWS_API_KEY`) passed via the `x-api-key` header.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/aws_lambda/index.mdx#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nsiege -r500 -c1 -v -H \"x-api-key: $AWS_API_KEY\" \"https://$AWS_LAMBDA_HOST/default/fibo_lambda\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Git Repository\nDESCRIPTION: This command initializes a new Git repository in the current directory. It creates a .git subdirectory where Git stores all the necessary repository data.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-12-fatal-git-repository-error/index.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Windmill Polars Integration for S3 Data Access\nDESCRIPTION: This code snippet shows how to use Polars with Windmill for reading a Parquet file directly from S3, utilizing Windmill's helper functions to connect to the storage. It simplifies data loading tasks by managing S3 credentials and connection details internally.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-24-data-pipeline-orchestrator/index.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nargs = {\n    \"anon\": False,\n    \"endpoint_url\": \"http://minio:9000\",\n    \"key\": \"<ACCESS_KEY>\",\n    \"secret\": \"<SECRET_KEY>\",\n    \"use_ssl\": False,\n    \"cache_regions\": False,\n    \"client_kwargs\": {\n        \"region_name\": \"us-east-1\",\n    },\n}\n s3 = s3fs.S3FileSystem(**args)\n with s3.open(\"s3://windmill_bucket/file.parquet\", mode=\"rb\") as f:\n     dataframe = pl.read_parquet(f)\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with iframe in MDX/JSX\nDESCRIPTION: This snippet shows how to embed a YouTube video directly into the documentation using an HTML iframe element within MDX/JSX. It includes attributes to control the appearance, behavior (autoplay, fullscreen), and accessibility features of the embedded player. It is typically used to provide visual guides or tutorials.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/7_plans_details/index.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<iframe\n\tstyle={{ aspectRatio: '16/9' }}\n\tsrc=\"https://www.youtube.com/embed/YAoLXwayjT8\"\n\ttitle=\"YouTube video player\"\n\tframeBorder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\tallowFullScreen\n\tclassName=\"border-2 rounded-lg object-cover w-full dark:border-gray-800\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Deleting Supabase Records using TypeScript (Deno) in Windmill\nDESCRIPTION: This TypeScript (Deno) inline script deletes a record from the 'issues' table in a Supabase database. It utilizes the '@supabase/supabase-js' library, requires Supabase URL and key via the 'auth' object, and takes the 'id' of the record to delete as input. The script is designed to be triggered by a Windmill table action.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-25-issue-tracker/index.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\ntype Supabase = {\n\turl: string;\n\tkey: string;\n};\n\nexport async function main(auth: Supabase, id: string) {\n\tconst client = createClient(auth.url, auth.key);\n\treturn await client.from('issues').delete().filter('id', 'eq', id);\n}\n```\n\n----------------------------------------\n\nTITLE: validate Function Signature\nDESCRIPTION: This code snippet defines the signature of the `validate` function. The `validate` function is used to set a specific field of a form in a Validate state. It takes the `id` of the form, and `key` as a string parameter.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/modal_form.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n`validate(id: string, key: string)`\n```\n\n----------------------------------------\n\nTITLE: Allowing Direnv Shell Integration\nDESCRIPTION: This command uses `direnv allow` to automatically enable the shell environment when entering the repository. This command uses `nix-direnv`. Prerequisites are nix and direnv installed.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ direnv allow\n```\n\n----------------------------------------\n\nTITLE: Converting CSV to Excel with pandas and openpyxl (Python)\nDESCRIPTION: This Python script converts a CSV file (represented as bytes) into an Excel file using the pandas and openpyxl libraries. The script receives CSV data as bytes, converts them to a string, uses StringIO to convert the string to a file-like object, reads CSV data into a Pandas DataFrame, then converts the DataFrame to an Excel file, saves it to a BytesIO object, and encodes the Excel file into a base64 string for output.  The script returns a dictionary that contains a file object that represents the Excel file.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport base64\nfrom io import BytesIO\nimport pandas as pd\nfrom io import StringIO\nimport openpyxl\n\ndef main(csv_bytes: bytes) -> str:\n    # Convert bytes to string\n    csv_string = csv_bytes.decode('utf-8')\n    \n    # Use StringIO to convert string to a file-like object for reading into DataFrame\n    csv_file = StringIO(csv_string)\n    \n    # Read CSV data into DataFrame\n    df = pd.read_csv(csv_file)\n    \n    # Convert DataFrame to Excel and save to a BytesIO object\n    excel_buffer = BytesIO()\n    df.to_excel(excel_buffer, index=False)\n    excel_buffer.seek(0)  # Rewind the buffer to the beginning\n    \n    # Encode the Excel file into a base64 string\n    base64_excel = base64.b64encode(excel_buffer.read()).decode('utf-8')\n\n    return { \"file\": { \"content\": base64_excel, \"filename\": \"data.xlsx\" } }\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Prefect\nDESCRIPTION: This YAML snippet defines a Docker Compose configuration for setting up a Prefect server, including PostgreSQL for database storage. The configuration includes services for PostgreSQL and Prefect server. The Postgres service is configured with an image, restart policy, volumes, exposed port, and environment variables for password and database name. The Prefect server is configured to connect to the Postgres database and is exposed on port 4200. It depends on the Postgres service being started. The configuration also uses volumes for data persistence and environment variables for database connection and logging level. This setup allows running Prefect workflows, storing metadata, and interacting with the Prefect UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  postgres:\n    image: postgres:14\n    restart: unless-stopped\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    expose:\n      - 5432\n    environment:\n      POSTGRES_PASSWORD: changeme\n      POSTGRES_DB: prefect\n    healthcheck:\n      test: ['CMD-SHELL', 'pg_isready -U postgres']\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  prefect-server:\n    image: prefecthq/prefect:2-latest\n    command:\n      - prefect\n      - server\n      - start\n    ports:\n      - 4200:4200\n    depends_on:\n      postgres:\n        condition: service_started\n    volumes:\n      - ${PWD}/prefect:/root/.prefect\n      - ${PWD}/flows:/flows\n    environment:\n      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://postgres:changeme@postgres:5432/prefect\n      PREFECT_LOGGING_SERVER_LEVEL: INFO\n      PREFECT_API_URL: http://localhost:4200/api\nvolumes:\n  db_data: null\n```\n\n----------------------------------------\n\nTITLE: AI Prompt Template for Code Completion\nDESCRIPTION: This template is used to request code completion from the AI model. It wraps the user's existing code, placing `<completion></completion>` tags at the cursor position. The AI is instructed to fill in the code only between these tags.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-20-ai-flow-builder/index.mdx#_snippet_4\n\nLANGUAGE: Prompt\nCODE:\n```\ncomplete the following code:\n```{language}\n{before}<completion></completion>{after}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a new script with `wmill script bootstrap`\nDESCRIPTION: Invokes the `wmill script bootstrap` command to generate a new script file locally with specified language and optional metadata such as summary and description. Parameters include the target path and script language, which must be supported (e.g., deno, python3, bash). This facilitates initial script setup with optional descriptive metadata.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/script.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwmill script bootstrap [--summary <summary>] [--description <description>] <path> <language>\n```\n\n----------------------------------------\n\nTITLE: Adding Selenoid and Selenoid-UI Services to Docker Compose in YAML\nDESCRIPTION: This YAML snippet adds Selenoid and Selenoid-UI services to the existing Docker Compose configuration. It configures Selenoid with volume mounts for browser configs, video, and logs, sets the environment variable to override video output directory, and specifies command arguments for configuration files and output directories. Ports and network mode are set for container communication. The Selenoid-UI service links to the Selenoid container and exposes a UI on port 8080. This setup enables monitored browser automation containers accessible via a UI and integrated into the Windmill environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-14-selenium-integration/index.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nselenoid:\n  network_mode: bridge\n  image: aerokube/selenoid:latest-release\n  volumes:\n    - '/path/to/config:/etc/selenoid' # <- change this\n    - '/path/to/config/video:/opt/selenoid/video' # <- change this\n    - '/path/to/config/logs:/opt/selenoid/logs' # <- change this\n    - '/var/run/docker.sock:/var/run/docker.sock'\n  environment:\n    - OVERRIDE_VIDEO_OUTPUT_DIR=./config/video\n  command:\n    [\n      '-conf',\n      '/etc/selenoid/browsers.json',\n      '-video-output-dir',\n      '/opt/selenoid/video',\n      '-log-output-dir',\n      '/opt/selenoid/logs'\n    ]\n  ports:\n    - '4444:4444'\n\nselenoid-ui:\n  image: 'aerokube/selenoid-ui'\n  network_mode: bridge\n  restart: always\n  links:\n    - selenoid\n  ports:\n    - '8080:8080'\n  command: ['--selenoid-uri', 'http://selenoid:4444']\n```\n\n----------------------------------------\n\nTITLE: Setting TypeScript Path Mapping in tsconfig.json\nDESCRIPTION: This JSON snippet shows a minimal tsconfig.json path configuration that allows absolute imports to resolve correctly in local editors. The paths block maps any root-relative import ('/*') to the corresponding local path ('./*'), ensuring import statements in TypeScript can use absolute form conveniently. Dependencies: TypeScript, compatible editor, and local project structure matching the mapping.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/5_sharing_common_logic/index.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"compilerOptions\": {\n\t\t\"paths\": {\n\t\t\t\"/*\": [\"./*\"]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Required Selenoid Browser Docker Images Using Bash\nDESCRIPTION: This bash snippet lists Docker pull commands required to fetch the Selenoid browser images needed for the Selenium environment, including Chrome and Firefox with and without VNC support. The commands ensure that the necessary images are available locally for containerized browser automation. It also notes the consideration for Mac M1/M2 chip images.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-14-selenium-integration/index.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ndocker pull selenoid/chrome:104.0\ndocker pull selenoid/vnc_chrome:104.0\ndocker pull selenoid/firefox:104.0\ndocker pull selenoid/vnc_firefox:104.0\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in React\nDESCRIPTION: An import statement for the DocCard component from the site's components directory, used to create documentation cards on the page for navigation to related content.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/cloudflare-r2.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Generating Inline Flow Lockfiles with Windmill CLI\nDESCRIPTION: This command is used to locally update the lockfiles for inline scripts embedded within Windmill flows. It provides functionality similar to `wmill script generate-metadata --lock-only` but is specifically designed for flows' inline script dependencies.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/changelog/2024-06-10-track-relative-imports/index.md#_snippet_1\n\nLANGUAGE: Command Line\nCODE:\n```\nwmill flow generate-locks\n```\n\n----------------------------------------\n\nTITLE: Kestra Benchmark Flow Configuration\nDESCRIPTION: A Kestra workflow definition that executes a recursive Fibonacci calculation as a benchmark test. It accepts parameters for the Fibonacci number to calculate and the number of iterations to run, with tasks executing sequentially using Python.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nid: benchmark\nnamespace: company.team\ninputs:\n  - id: n\n    type: INT\n  - id: iters\n    type: INT\ntasks:\n  - id: processIterations\n    type: io.kestra.plugin.core.flow.ForEach\n    values: '{{ range(0, inputs.iters - 1) }}'\n    concurrencyLimit: 1\n    tasks:\n      - id: python\n        type: io.kestra.plugin.scripts.python.Script\n        containerImage: python:slim\n        taskRunner:\n          type: io.kestra.plugin.core.runner.Process\n        script: |\n\n          def fibo(n: int):\n            if n <= 1:\n                return n\n            else:\n                return fibo(n - 1) + fibo(n - 2)\n\n          print(str(fibo({{ inputs.n }})))\n```\n\n----------------------------------------\n\nTITLE: Managing Modals and Drawers\nDESCRIPTION: Examples of opening and closing modal or drawer components.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nopen(id: string)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nopen('a');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclose(id: string)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclose('a');\n```\n\n----------------------------------------\n\nTITLE: Plotly Dataset Configuration Example\nDESCRIPTION: This JSON example shows the default configuration for a dataset in the Plotly component, including name and data values.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/plotly.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"Dataset 1\",\n  \"Data\": [25, 25, 50]\n}\n```\n\n----------------------------------------\n\nTITLE: Visual Explanation of Crontab Syntax Fields\nDESCRIPTION: This commented representation illustrates the structure of a crontab line. It breaks down the five time/date fields (Minute, Hour, Day of Month, Month, Day of Week) followed by the command to be executed, explaining the range of accepted values for each field.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-06-28-edit-crontab/index.mdx#_snippet_1\n\nLANGUAGE: Crontab\nCODE:\n```\n# * * * * * command to be executed\n# | | | | |\n# | | | | |\n# | | | | |\n# | | | | |_______________ Day of the Week (0 - 6)(Sunday to Saturday)\n# | | | |\n# | | | |_______________ Month of the Year (1 - 12)\n# | | |   \n# | | |_______________ Day of the Month (1 - 31)\n# | |\n# | |_______________ Hour (0 - 23)\n# | \n# |_______________ Minute (0 - 59)\n```\n\n----------------------------------------\n\nTITLE: Creating a Documentation Card Grid with JSX\nDESCRIPTION: Creates a responsive grid layout with a DocCard component that links to a tutorial about implementing service scripts with Kafka. The grid is styled with Tailwind CSS classes.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/script_editor/perpetual_scripts.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Service script pattern in Windmill using Kafka\"\n\t\tdescription=\"This example shows how to use a perpetual script to implement a service in Windmill leveraging Kafka.\"\n\t\thref=\"/blog/service-script-kafka\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with JavaScript Transformer in Windmill Apps\nDESCRIPTION: This JavaScript function allows downloading data as a file in a browser by creating an anchor element, setting its properties to the data URL and filename, triggering a click event, and then cleaning up the element. It can be used as a transformer in Windmill apps.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/11_download_files.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Assuming `result` is your data URL scheme with a Base64 encoded string\n\n// Function to download the data as a file\nfunction downloadDataAsFile(dataUrl, fileName) {\n  // Create an anchor element\n  const anchor = document.createElement('a');\n\n  // Set the href to the data URL\n  anchor.href = dataUrl;\n\n  // Set the download attribute to the desired file name\n  anchor.download = fileName;\n\n  // Append the anchor to the body (required for Firefox)\n  document.body.appendChild(anchor);\n\n  // Trigger the download by simulating a click on the anchor\n  anchor.click();\n\n  // Remove the anchor from the body\n  document.body.removeChild(anchor);\n}\n\n// Call the function with your data URL and a file name\ndownloadDataAsFile(result, 'name.file');\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with npm\nDESCRIPTION: This command, `npm start`, starts a local development server for the website. It enables live reloading, which means that most changes are reflected in the browser without needing to restart the server. The browser window will open automatically. The output is the website running in development mode.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Running a script via `wmill script run`\nDESCRIPTION: Runs a specified script located at its remote path using the `wmill script run` command. Supports additional options such as passing JSON data (`-d` or `--data`) and silent execution (`-s` or `--silent`). Data inputs can be provided inline or from files, and resources or variables can be injected with special syntax for dynamic resource management.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/script.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwmill script run <remote_path> [options]\n```\n\n----------------------------------------\n\nTITLE: Loki Log Storage System Configuration (YAML)\nDESCRIPTION: Sets up Loki with in-memory storage backend, disables authentication, and specifies server listen port and storage paths. Configures schema version, index, and chunk directories for log storage and retrieval within Grafana environments.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/otel/index.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nauth_enabled: false\n\nserver:\n  http_listen_port: 3100\n\ncommon:\n  ring:\n    instance_addr: 0.0.0.0\n    kvstore:\n      store: inmemory\n  replication_factor: 1\n  path_prefix: /tmp/loki\n\nschema_config:\n  configs:\n  - from: 2020-05-15\n    store: tsdb\n    object_store: filesystem\n    schema: v13\n    index:\n      prefix: index_\n      period: 24h\n\nstorage_config:\n  filesystem:\n    directory: /tmp/loki/chunks\n\nlimits_config:\n  allow_structured_metadata: true\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCard Component in JSX for Documentation Link\nDESCRIPTION: This code snippet shows the usage of the 'DocCard' component within a JSX 'div' container styled with CSS classes. The DocCard renders a clickable card with a title, description, and hyperlink pointing to roles and permissions documentation. It demonstrates how to organize UI components in a grid layout using JSX syntax.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/8_public_apps.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Roles and permissions\"\n\t\tdescription=\"Find out about the roles within a Windmill instance and their respective permissions.\"\n\t\thref=\"/docs/core_concepts/roles_and_permissions\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Granting Roles to Non-Superuser\nDESCRIPTION: These SQL commands grant the `windmill_admin` and `windmill_user` roles to the `nonsuperuser` account.  This allows the non-superuser account to perform necessary database operations within Windmill. These roles must be created prior to granting them.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nGRANT windmill_admin TO nonsuperuser;\nGRANT windmill_user TO nonsuperuser;\n```\n\n----------------------------------------\n\nTITLE: Implementing Fibonacci Function in Python for Windmill Benchmarking\nDESCRIPTION: A Python script that calculates Fibonacci numbers recursively. This script is used as a workload for benchmark testing in Windmill, with the main function accepting a parameter 'n' that determines the size of the Fibonacci number to calculate.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# WIMDMILL script: `u/benchmarkuser/fibo_script`\ndef fibo(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fibo(n - 1) + fibo(n - 2)\n\ndef main(\n    n: int,\n):\n    return fibo(n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Windmill Indexer Service via Docker Compose\nDESCRIPTION: This YAML snippet defines the `windmill_indexer` service within a Docker Compose configuration file (`docker-compose.yml`). To enable full-text search, the `replicas` count under `deploy` must be set to exactly 1. The service uses the Windmill image specified by `${WM_IMAGE}`, exposes port 8001, requires the `${DATABASE_URL}` environment variable, runs in `indexer` mode, depends on the `db` service being healthy, and mounts a volume named `windmill_index` to `/tmp/windmill/search` for index persistence.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/18_full_text_search/index.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  # The indexer powers full-text job and log search, an EE feature.\n  windmill_indexer:\n    image: ${WM_IMAGE}\n    pull_policy: always\n    deploy:\n      replicas: 1 # set to 1 to enable full-text job and log search\n    restart: unless-stopped\n    expose:\n      - 8001\n    environment:\n      - PORT=8001\n      - DATABASE_URL=${DATABASE_URL}\n      - MODE=indexer\n    depends_on:\n      db:\n        condition: service_healthy\n    volumes:\n      - windmill_index:/tmp/windmill/search\n```\n\n----------------------------------------\n\nTITLE: Tempo Metrics and Trace Storage Configuration (YAML)\nDESCRIPTION: Configures Tempo to enable the metrics pipeline, set storage paths, and define resource labels. Includes settings for query frontend, distributor, ingester, compactor, and storage backend. Designed to integrate metrics with Prometheus and facilitate trace querying in Grafana.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/otel/index.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nstream_over_http_enabled: true\nserver:\n  http_listen_port: 3200\n  log_level: info\n\nquery_frontend:\n  search:\n    duration_slo: 5s\n    throughput_bytes_slo: 1.073741824e+09\n    metadata_slo:\n        duration_slo: 5s\n        throughput_bytes_slo: 1.073741824e+09\n  trace_by_id:\n    duration_slo: 5s\n\ndistributor:\n  receivers:\n    otlp:\n      protocols:\n        grpc:\n          endpoint: \"tempo:4317\"\n\ningester:\n  max_block_duration: 5m\n\ncompactor:\n  compaction:\n    block_retention: 1h\n\nmetrics_generator:\n  registry:\n    external_labels:\n      source: tempo\n      cluster: windmill\n  storage:\n    path: /var/tempo/generator/wal\n    remote_write:\n      - url: http://prometheus:9090/api/v1/write\n        send_exemplars: true\n  traces_storage:\n    path: /var/tempo/generator/traces\n\nstorage:\n  trace:\n    backend: local\n    wal:\n      path: /var/tempo/wal\n    local:\n      path: /var/tempo/blocks\n\noverrides:\n  defaults:\n    metrics_generator:\n      processors: [service-graphs, span-metrics, local-blocks]\n      generate_native_histograms: both\n```\n\n----------------------------------------\n\nTITLE: Removing Current User's Crontab File (Shell)\nDESCRIPTION: The `crontab -r` command permanently removes all scheduled tasks by deleting the current user's crontab file. Use this command with caution as the action is typically irreversible without backups.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-06-28-edit-crontab/index.mdx#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncrontab -r\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum WAL Senders in postgresql.conf for Replication Slots\nDESCRIPTION: Sets the `max_wal_senders` parameter in `postgresql.conf` which controls how many concurrent WAL sender processes Postgres can run. This limits the number of active logical replication subscriptions, such as Windmill triggers. Increasing this value allows more simultaneous active triggers. Requires restart after change.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/46_postgres_triggers/index.mdx#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n#max_wal_senders = 10  # max number of walsender processes (change requires restart)\n```\n\n----------------------------------------\n\nTITLE: AgGrid Table Static Input JSON Example\nDESCRIPTION: This JSON snippet shows an example of how to provide static data as input for the AgGrid table component. The data is structured as an array of objects, where each object represents a row in the table. Each object contains key-value pairs representing the data for a specific row.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/aggrid_table.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n\t{\n\t\t\"id\": 1,\n\t\t\"name\": \"John Doe\",\n\t\t\"age\": 25\n\t},\n\t{\n\t\t\"id\": 2,\n\t\t\"name\": \"Jane Doe\",\n\t\t\"age\": 30\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Python Script for Dynamic Cell Style and Editability Configuration in AgGrid\nDESCRIPTION: This Python function returns an array of column definitions for AgGrid, setting styles and editability dynamically. The first column applies specific cell styles, while the second is marked editable. It demonstrates how scripts can manipulate grid appearance and behavior at runtime.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/agcharts.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    return [\n        {\n            \"field\": \"id\",\n            \"flex\": 1,\n            \"cellStyle\": {\"color\": \"blue\", \"background-color\": \"lightblue\"},\n        },\n        {\"field\": \"name\", \"editable\": True, \"flex\": 1},\n        {\"field\": \"age\", \"flex\": 1},\n    ]\n```\n\n----------------------------------------\n\nTITLE: S3 Object Reference Format in Windmill (JSON)\nDESCRIPTION: Defines the JSON structure used within Windmill to represent references to files stored in S3 or other object storage. This simple format includes a key 's3' whose value is the file path within the bucket. It acts as a pointer rather than including file data, allowing scripts and UI components to interact with files by referencing their keys.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/38_object_storage_in_windmill/index.mdx#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"s3\": \"path/to/file\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Resume URLs for Approval Prompt (Go)\nDESCRIPTION: This Go code snippet demonstrates how to generate resume URLs using `wmill.GetResumeUrls()` for creating an approval prompt in Windmill. It returns a map containing the resume URL and optional default arguments and enums. It includes error handling for the `GetResumeUrls` function.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage inner\n\nimport (\n\twmill \"github.com/windmill-labs/windmill-go-client\"\n)\n\nfunc main() (map[string]interface{}, error) {\n\turls, err := wmill.GetResumeUrls(\"approver1\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn map[string]interface{}{\n\t\t\"resume\":      urls.Resume,\n\t\t\"default_args\": make(map[string]interface{}), // optional\n\t\t\"enums\":       make(map[string]interface{}), // optional\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling Background Tasks Using Celery in Python\nDESCRIPTION: Shows how to define a distributed background task using the Celery library with Redis as the message broker. The example defines a simple task that adds two numbers asynchronously, demonstrating the use of the @app.task decorator and delayed execution via task.delay(). The code requires Celery and a running Redis instance. Inputs are the numeric arguments to the task; output is the asynchronous result obtained by calling get() on the task result. Celery supports retries, scheduling, and monitoring, suitable for scalable distributed systems.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom celery import Celery\n\napp = Celery('tasks', broker='redis://localhost:6379/0')\n\n@app.task\ndef background_task(x, y):\n    return x + y\n\n# To call the task\nresult = background_task.delay(10, 20)\nprint(result.get())  # This will print 30 after the task completes\n```\n\n----------------------------------------\n\nTITLE: Performing Google Searches and Extracting Titles in Python\nDESCRIPTION: This Python function (step 'c' in the workflow) performs two Google searches using variations of the name and domain extracted from an email. It utilizes the `requests` library to fetch search results and `BeautifulSoup` with `lxml` to parse the HTML, extracting the text from the first two 'h3' tags (typically result titles) for each search. It requires `requests`, `bs4`, `lxml`, and `html5lib` libraries. Inputs are the processed name, domain, and spaced name; output is a tuple containing two lists of result titles.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-29-automatically-populate-crm/index.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom bs4 import BeautifulSoup\nimport requests\nfrom lxml.html import html5parser\nimport html5lib\n\n\ndef main(name: str, domain: str, name_space: str):\n  def search(query):\n      url = \"https://www.google.com/search?q={}\".format(query)\n      r = requests.get(url)\n      data = r.text\n      soup = BeautifulSoup(data, \"lxml\")\n      titles = soup.find_all(\"h3\")\n      res = []\n      for title in titles[:2]:\n          h = html5parser.fromstring(str(title)).getchildren()[0].text\n          res.append(h)\n      return res\n\n  infos = [name, domain]\n  query = \"+\".join(map(lambda x: x.replace(\" \", \"+\"), infos))\n  try:\n      res1 = search(query)\n  except:\n      res1 = []\n\n  infos = [name_space, domain]\n  query = \"+\".join(map(lambda x: x.replace(\" \", \"+\"), infos))\n  try:\n      res2 = search(query)\n  except:\n      res2 = []\n\n  return res1, res2\n```\n\n----------------------------------------\n\nTITLE: Windmill Remote Path Format\nDESCRIPTION: This snippet illustrates the format of a remote path within the Windmill system. The path structure determines the location of resources. The prefix indicates if the resource belongs to a user (`u`), group (`g`), or folder (`f`).\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/app.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<u|g|f>/<username|group|folder>/...\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase Data (Deno)\nDESCRIPTION: This background runnable fetches data from a Supabase database using the Supabase client. It requires the Supabase URL, API key, and a valid access token passed as arguments. The function returns the fetched data or an empty array if no access token is provided.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-03-16-supabase-authentication/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Background runnable: Load data\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.10.0';\n\ntype Supabase = {\n\turl: string;\n\tkey: string;\n};\n\nexport async function main(auth: Supabase, access_token: string) {\n\tif (!access_token) {\n\t\treturn [];\n\t}\n\tconst client = createClient(auth.url, auth.key, {\n\t\tglobal: { headers: { Authorization: `bearer ${access_token}` } }\n\t});\n\tconst { data } = await client.from('my_table').select();\n\treturn data;\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Usage on Schema\nDESCRIPTION: These SQL commands grant `USAGE` privilege on the `public` schema to the `windmill_admin` and `windmill_user` roles.  This allows those roles to access and use objects within the specified schema.  Replace `public` with the correct schema name if a different schema is in use.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/1_self_host/index.mdx#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nGRANT USAGE ON SCHEMA public TO windmill_admin;\nGRANT USAGE ON SCHEMA public TO windmill_user;\n```\n\n----------------------------------------\n\nTITLE: Configuring Airflow DAG for Benchmark Testing in Python\nDESCRIPTION: An Airflow DAG configuration that creates a chain of sequential Fibonacci calculation tasks. The implementation allows for configuring the number of tasks (ITER) and the Fibonacci number to calculate (FIBO_N), creating either 40 lightweight tasks or 10 long-running tasks for benchmarking.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/competitors/index.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nITER = 10     # respectively 40\nFIBO_N = 33   # respectively 10\n\nwith DAG(\n    dag_id=\"bench_{}\".format(ITER),\n    schedule=None,\n    start_date=datetime(2023, 1, 1),\n    catchup=False,\n    tags=[\"benchmark\"],\n) as dag:\n    for i in range(ITER):\n        @task(task_id=f\"task_{i}\")\n        def task_module():\n            return fibo(FIBO_N)\n        fibo_task = task_module()\n\n        if i > 0:\n            previous_task >> fibo_task\n        previous_task = fibo_task\n```\n\n----------------------------------------\n\nTITLE: Getting Max Item ID from Hacker News - Typescript\nDESCRIPTION: This TypeScript code defines an asynchronous function to retrieve the maximum item ID from the Hacker News API. It performs an HTTP GET request to the `maxitem.json` endpoint and parses the response as text, then converts it to a number. This maximum ID represents the latest item added to Hacker News.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/src/components/denoScript.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getMaxItem() {\n\tconst res = await fetch('https://hacker-news.firebaseio.com/v0/maxitem.json');\n\treturn Number(await res.text());\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Card with Draggable\nDESCRIPTION: This JavaScript snippet wraps the primary `<div>` of the `Card` component within a `<Draggable>` wrapper. This effectively enables drag-and-drop capabilities for the card component, allowing it to be moved freely on the screen.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport Draggable from 'react-draggable';\n\nconst Card = (props) => {\n  return (\n    <Draggable>\n      <div className=\"card\">\n        <div className=\"header\">{props.title}</div>\n        <div className=\"content\">Content</div>\n      </div>\n    </Draggable>\n  )\n}\nexport default Card;\n```\n\n----------------------------------------\n\nTITLE: Setting Accordion Tab with JavaScript\nDESCRIPTION: Example demonstrating how to use the `setTab` function within a frontend script to programmatically change the currently active tab of the Accordion tabs component. The function requires the component's unique ID and the zero-based index of the tab to be set.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/accordion_tabs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetTab('a',1)\n```\n\n----------------------------------------\n\nTITLE: Building Website with npm\nDESCRIPTION: This command uses `npm run build` to generate static content for the website into the `build` directory. This command generates the files needed for deployment and can be served using a static content hosting service.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Create Select Cell Editor (JavaScript)\nDESCRIPTION: This snippet shows how to define a column that uses `agSelectCellEditor` to allow users to select a value from a dropdown list within the cell. It demonstrates how to dynamically generate the list of possible values using the `cellEditorParams` function, which receives the row data.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/aggrid_table/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn [\n\t{\n\t\tfield: 'name',\n\t\theaderName: 'Full name'\n\t},\n\t{\n\t\tfield: 'age',\n\t\tcellEditorParams: function (params) {\n\t\t\treturn { values: [1, params.data.age, 100] };\n\t\t},\n\t\tcellEditor: 'agSelectCellEditor',\n\t\teditable: true,\n\t\tuseFormatter: true\n\t}\n];\n```\n\n----------------------------------------\n\nTITLE: Image Component Configuration Table and Documentation in Markdown\nDESCRIPTION: This markdown snippet details the Image component's configuration options including the source of the image, source kind (url, base64, s3), image fit modes, and alt text. It lists each property's type, connectability, templating support, default values, and descriptions, providing developers with a reference for how to set up and customize the Image component within the app editor environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/image.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name      |             Type             | Connectable | Templatable |  Default  | Description                                                        |\\n| --------- | :--------------------------: | :---------: | :---------: | :-------: | ------------------------------------------------------------------ |\\n| Source    |            string, S3Object          |    true     |    false    | /logo.svg | The image.                                                         |\\n| Source Kind   | string: url, base64, s3  |    true     |    false    | url       | Source kind, one of bas64 (jpg,png,svg), url, or s3 url (workspace storage) |\\n| Image Fit | string: contain, cover, fill |    false    |    false    |  contain  | How the image will fit the component box.                          |\\n| Alt text  |            string            |    false    |    false    |     /     | This text will appear if the image can't be loaded for any reason. |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    |  Type   | Description                               |\\n| ------- | :-----: | ----------------------------------------- |\\n| loading | boolean | The loading state of the Image component. |\n```\n\n----------------------------------------\n\nTITLE: Basic Email Trigger Handler in TypeScript\nDESCRIPTION: A simple TypeScript function that receives and processes email data. The function accepts two parameters: the raw email string and a parsed email object containing headers, body content, and attachments.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/17_email_triggers/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function main(raw_email: string, parsed_email: any) {\n  // do something with the email\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windmill Docker Compose Setup in YAML\nDESCRIPTION: This snippet provides an updated docker-compose.yml configuration for Windmill services. It specifies the PostgreSQL database service with health checks and volume management, configures the Windmill server service with increased worker ports and a long timeout setting to accommodate scraping tasks, and includes the language server protocol (LSP) service. It removes the caddy and worker-only services to allow all workers to run inside the Windmill server. Key parameters include increased open ports (9920-9930) for inter-service communication and environment variables like DATABASE_URL and MODE.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-02-14-selenium-integration/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3.7'\n\nservices:\n  db:\n    image: postgres:14\n    restart: unless-stopped\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    ports:\n      - 5432:5432\n      - 5433:5432\n    environment:\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n      POSTGRES_DB: windmill\n    healthcheck:\n      test: ['CMD-SHELL', 'pg_isready -U postgres']\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  windmill_server:\n    image: ghcr.io/windmill-labs/windmill:main\n    deploy:\n      replicas: 1\n    restart: unless-stopped\n    ports:\n      - '8000:8000'\n      - '9920-9930:9920-9930' # <- added this; only 10 ports are opened; if you want to open more ports increase the 2nd number respectively\n    environment:\n      - DATABASE_URL=postgres://postgres:${DB_PASSWORD}@db/windmill?sslmode=disable\n      - MODE=standalone\n      - TIMEOUT=99999 # <- add this; This is important: Scraping websites usually outlasts normal scripts. To prevent a timeout we should increase this value.\n\n    depends_on:\n      db:\n        condition: service_healthy\n\n  lsp:\n    image: ghcr.io/windmill-labs/windmill-lsp:latest\n    restart: unless-stopped\n    ports:\n      - 3001:3001\n\nvolumes:\n  db_data: null\n```\n\n----------------------------------------\n\nTITLE: Setting Column Sizing with Initial State in Table Component (TSX)\nDESCRIPTION: This snippet illustrates how to customize column widths in the Windmill Table component using the `columnSizing` property within the `Initial State`. The code sets the width of the \"id\" column to 10, the \"name\" column to 750, and the \"age\" column to 150.  The rest of the sizing will be done by the TanStack table logic.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/table/index.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  \"columnSizing\": {\n    \"id\": 10,\n    \"name\": 750,\n    \"age\": 150\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining basic Markdown syntax with Markdown language\nDESCRIPTION: Demonstrates standard Markdown syntax for headings, ordered and unordered lists, links, images, and text styling. These snippets serve as foundational examples showing how plain text formatting translates into HTML structure or styled text in a Markdown environment. Inputs are simple Markdown-formatted strings and outputs represent rendered HTML or styled text.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-11-27-using-markdown-in-react/index.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Big Boss Heading\n## Slightly Smaller Boss\n### Middle Management\n#### Team Lead\n##### Senior Dev\n###### Junior Dev\n```\n\nLANGUAGE: markdown\nCODE:\n```\n1. Banana\n2. Kiwi\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Banana\n- Kiwi\n\n* Banana\n* Kiwi\n\n+ Banana\n+ Kiwi\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[Windmill](https://www.windmill.dev/)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n![Windmill logo](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTXrLXCq_Qrr9X9Yavf8jF3AonwSqLgHmAIKA&s)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n**Bold move**\n*Italic flair*\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container via Host Daemon - Bash - Windmill\nDESCRIPTION: This Bash script demonstrates how to run a Docker container directly via the host Docker daemon from within a Windmill script. It pulls the specified image, runs a command within a new container, and removes the container upon completion. It requires the host Docker socket to be mounted into the worker container.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/7_docker_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# shellcheck shell=bash\n# Bash script that calls docker as a client to the host daemon\n# See documentation: https://www.windmill.dev/docs/advanced/docker\nmsg=\"${1:-world}\"\n\nIMAGE=\"alpine:latest\"\nCOMMAND=\"/bin/echo Hello $msg\"\n\n# ensure that the image is up-to-date\ndocker pull $IMAGE\ndocker run --rm $IMAGE $COMMAND\n```\n\n----------------------------------------\n\nTITLE: Define Arguments and Insert Data using Snowflake\nDESCRIPTION: Defines script arguments using the Snowflake-specific `?` syntax for positional arguments, including optional names, types (e.g., `varchar`, `int`), and default values. Shows a sample `INSERT` statement using positional placeholders (`?`). Also illustrates how to bind the script to a specific database resource using a comment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- ? name1 (varchar) = default arg\n-- ? name2 (int)\nINSERT INTO demo VALUES (?, ?)\n```\n\n----------------------------------------\n\nTITLE: Pushing a Flow with wmill - Bash\nDESCRIPTION: This command pushes a flow to a Windmill instance. It requires the path to the local flow file and the remote path where the flow should be pushed. It assumes the user has the necessary permissions to push flows to the specified remote location. The command uploads the flow file to the remote server.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/flow.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill flow push <file_path> <remote_path>\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository\nDESCRIPTION: This command clones a remote Git repository to the local machine. It downloads all the files and history from the remote repository and creates a local copy.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-12-fatal-git-repository-error/index.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone <url>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This command uses npm to install all the project's dependencies. It includes the `--legacy-peer-deps` flag to handle potential peer dependency issues. This is a preliminary step required to build the site.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm i --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Defining Custom OAuth Configuration Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for custom OAuth configurations used within the Windmill Enterprise edition. It specifies required OAuth endpoints, optional user info URL, scopes, extra parameters, callback parameters, and a boolean indicating whether request body authorization is used. The interface supports configuring both resource-based OAuth and Single Sign-On (SSO) scenarios.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/2_setup_oauth/index.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface OAuthConfig {\n    auth_url: string,\n    token_url: string,\n    userinfo_url?: string,\n    scopes?: string[],\n    extra_params?: Record<string, string>,\n    extra_params_callback?: Record<string, string>,\n    req_body_auth?: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Managing New Card State in React using JavaScript useState Hook\nDESCRIPTION: This snippet creates a React state variable named newCard to hold the current text input for a new card title. Initialized to an empty string, it enables capturing user input in real-time. This variable is intended to be updated on input changes and ultimately used to add new cards to the cards list within the parent component.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [newCard, setNewCard] = useState('');\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCard Component in JavaScript\nDESCRIPTION: This snippet renders a DocCard component. It takes 'title', 'description', and 'href' as props to display a card-like element. The purpose of this component is to provide quick access to related documentation within the Windmill platform.  It requires the DocCard component, which is imported from a relative path within the project structure.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/17_ai_flows.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Windmill AI\"\n\t\tdescription=\"Have AI complete code on Windmill.\"\n\t\thref=\"/docs/core_concepts/ai_generation\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Add-Card Button and Input Field in CSS\nDESCRIPTION: CSS styles are defined to enhance the appearance and interactivity of the add-card button and input field. The button is styled with green background, padding, border radius, font styling, and a smooth hover transition. The input field receives margin and padding adjustments. These styles improve the user experience by making controls visually appealing and responsive.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\nbutton {\n  background-color: #bdf0ad;\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1em;\n  font-weight: bold;\n  transition: background-color 0.2s, box-shadow 0.2s;\n}\n\nbutton:hover {\n  background-color: #b3e3a5;\n}\n\n.new-card-input {\n  margin: 8px 15px;\n  padding: 5px;\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Kafka from Terminal\nDESCRIPTION: This bash command allows publishing messages to a Kafka topic using the `kafka-console-producer.sh` script. It requires the Kafka container ID to execute the command within the container. It specifies the topic name and the bootstrap server.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-19-service-script-kafka/index.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it $KAFKA_CONTAINER_ID kafka-console-producer.sh --topic windmill-events --bootstrap-server localhost:9092\n```\n\n----------------------------------------\n\nTITLE: Defining Rust Dependencies in Windmill Script Comments\nDESCRIPTION: This snippet demonstrates how to specify Rust package dependencies within a special comment block (`//! ```cargo ... ````) in a Windmill script. Windmill parses this partial `Cargo.toml` manifest to automatically manage and install the required crates (`anyhow`, `rand` in this example) for the script execution environment.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/9_rust_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n//! ```cargo\n//! [dependencies]\n//! anyhow = \"1.0.86\"\n//! rand = \"0.7.2\"\n//! ```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Boilerplate in Deno Runtime\nDESCRIPTION: Default boilerplate generated by Windmill for TypeScript using Deno runtime. It demonstrates argument types, default values, imports, and the main function structure that serves as the script's entrypoint.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/1_typescript_quickstart/index.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Ctrl/CMD+. to cache dependencies on imports hover.\n\n// Deno uses \"npm:\" prefix to import from npm (https://deno.land/manual@v1.36.3/node/npm_specifiers)\n// import * as wmill from \"npm:windmill-client@1.335.0\"\n\n// fill the type, or use the +Resource type to get a type-safe reference to a resource\n// type Postgresql = object\n\nexport async function main(\n\ta: number,\n\tb: 'my' | 'enum',\n\t//c: Postgresql,\n\td = 'inferred type string from default arg',\n\te = { nested: 'object' }\n\t//e: wmill.Base64\n) {\n\t// let x = await wmill.getVariable('u/user/foo')\n\treturn { foo: a };\n}\n```\n\n----------------------------------------\n\nTITLE: Windmill DuckDB Connection with S3 Storage\nDESCRIPTION: This code snippet initializes a DuckDB connection configured to access data stored in an S3-compatible storage, with parameters set for endpoint, credentials, and optional resource path. It simplifies pulling data from S3 for large-scale ETL operations within Windmill scripts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-24-data-pipeline-orchestrator/index.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nconn = duckdb.connect()\n# path/to/resource arg is optional and by default the workspace S3 resource will be used\nconn.execute(wmill.duckdb_connection_settings(\"/path/to/resource\")[\"connection_settings_str\"])\n\nconn.sql(\"SELECT * FROM read_parquet(s3://windmill_bucket/file.parquet)\")\n```\n\n----------------------------------------\n\nTITLE: Writing Variable Content to a File Before Ansible Playbook Execution in Windmill Using YAML\nDESCRIPTION: The snippet shows how to create a file from the contents of a variable or secret stored in Windmill by declaring a 'files' entry with a 'variable' property and a relative 'target' path. This method is commonly used to write SSH keys or sensitive data to a file accessible during playbook execution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nfiles:\n  - variable: u/user/my_ssh_key\n    target:  ./id_rsa\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in JSX\nDESCRIPTION: Import statement for the DocCard component that is used throughout the page to create navigational cards linking to other documentation pages.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/3_editor_components.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in JSX for Documentation\nDESCRIPTION: Demonstrates how to import React components (DocCard and TaskDurationBarChart) from a site directory for use in a Markdown documentation page.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/compared_to/kestra.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport TaskDurationBarChart from '@site/src/components/TaskDurationBarChart';\n```\n\n----------------------------------------\n\nTITLE: Calculating Fibonacci in a Windmill Python Script\nDESCRIPTION: Defines a recursive Python function `fibo` to calculate the Nth Fibonacci number (N=33). The `main` function calls `fibo` and returns the result. This script (`u/benchmarkuser/fibo_script`) is intended for execution within the Windmill platform and is triggered via its webhook.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/3_benchmarks/aws_lambda/index.mdx#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nN_FIBO = 33\n\n# WIMDMILL script: `u/benchmarkuser/fibo_script`\ndef fibo(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fibo(n - 1) + fibo(n - 2)\n\ndef main():\n    return fibo(N_FIBO)\n```\n\n----------------------------------------\n\nTITLE: Pushing a local script to remote server with `wmill script push`\nDESCRIPTION: Utilizes the `wmill script push` command to upload or overwrite a local script file on the remote server, supporting various script file formats (.ts, .js, .py, .go, .sh). It requires specifying the local file's path and ensures synchronization of scripts across environments. This command depends on local script existence and correct file paths.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/script.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill script push <path>\n```\n\n----------------------------------------\n\nTITLE: Declaring Plain Text File Resources for Ansible Playbook Dependencies in Windmill Using YAML\nDESCRIPTION: This snippet demonstrates how to link a plain text file resource to a Windmill Ansible playbook by specifying the resource and its target file path relative to the playbook directory. Windmill will create this file from the specified resource before running the playbook, enabling modular separation of templates or configuration files.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfiles:\n  - resource: u/user/fabulous_jinja_template\n    target:  ./config_template.j2\n```\n\n----------------------------------------\n\nTITLE: Responsive YouTube Video Embedding with HTML/JSX\nDESCRIPTION: This code snippet implements a responsive YouTube video iframe that explains Google SSO setup for Windmill. It uses aspect ratio styling and proper security attributes including frameBorder, allow, and allowFullScreen.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/2_setup_oauth/index.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n\tstyle={{ aspectRatio: '16/9' }}\n\tsrc=\"https://www.youtube.com/embed/jSpuBsRv0yM\"\n\ttitle=\"YouTube video player\"\n\tframeBorder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\tallowFullScreen\n\tclassName=\"border-2 rounded-lg object-cover w-full dark:border-gray-800\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Retrieving Step Results in Windmill\nDESCRIPTION: SQL query used by Windmill to efficiently retrieve job results from previous steps. It uses jsonb path expressions to directly extract the needed data from the result column in the completed_job table.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-11-22-why-is-windmill-the-fastest-workflow-engine/index.mdx#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT result #> $3 as result FROM completed_job WHERE id = $1 AND workspace_id = $2\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Form Enums - Windmill Client - TypeScript\nDESCRIPTION: This TypeScript script demonstrates how to set dynamic options for a form argument within a Windmill approval step. It uses the `windmill-client` to potentially fetch data (though the example uses a hardcoded array for `enums`). The script returns an object with an `enums` key, where the value is an object mapping form field names (like \"foo\") to arrays of possible choices.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n//this assumes the Form tab has a string field named \"foo\"\n\nimport * as wmill from 'npm:windmill-client@^1.158.2';\n\nexport async function main() {\n\t// if no argument is passed, if user is logged in, it will use the user's username\n\tconst resumeUrls = await wmill.getResumeUrls('approver1');\n\n\t// send the resumeUrls to the recipient or see Prompt section above\n\n\treturn {\n\t\tenums: {\n\t\t\tfoo: ['choice1', 'choice2']\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Passing title prop to Card\nDESCRIPTION: This JavaScript snippet updates the `Card` component in `Card.jsx` to receive props and display the `title` prop within the header. It passes the props to the `Card` function, ensuring the title from the parent component is displayed.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst Card = (props) => {\n  return (\n    <div className=\"card\">\n      <div className=\"header\">{props.title}</div>\n      <div className=\"content\">Content</div>\n    </div>\n  )\n}\n\nexport default Card;\n```\n\n----------------------------------------\n\nTITLE: Updating the HEAD File\nDESCRIPTION: This command updates the .git/HEAD file with the correct branch name. It's used to fix a corrupted HEAD file that might be causing the \"fatal: not a git repository\" error.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-12-fatal-git-repository-error/index.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho 'ref: refs/heads/<branch_name>' > .git/HEAD\n```\n\n----------------------------------------\n\nTITLE: SQL & Query Languages Windmill Script Quickstart\nDESCRIPTION: Displays a DocCard for SQL and query language scripting support, including PostgreSQL, MySQL, MS SQL, BigQuery, and Snowflake SQL. The card features an icon, title, description, and link to relevant tutorials, assisting users in integrating SQL queries with Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { SiPostgresql } from 'react-icons/si';\n\n// Card linking to SQL and query language scripting documentation, covering popular SQL variants\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy for Custom Webhook URL\nDESCRIPTION: Example configuration for Caddy server to expose a custom webhook URL. This uses handle_path and rewrite directives to map a custom path to a Windmill API endpoint, optionally including authentication.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n{$BASE_URL} {\n\tbind {$ADDRESS}\n\n\thandle_path /mywebhook {\n\t\trewrite * /api/w/demo/jobs/run_wait_result/p/u/bot/hello_world_deno\"\n\t\t## You can optionally inject the token in Caddy to have the endpoint exposed publicly\n\t\t## request_header Authorization \"Bearer <WINDMILL_GENERATED_TOKEN>\"\n\t}\n\n\t...\n\treverse_proxy /* http://windmill_server:8000\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Item from Hacker News by ID - Typescript\nDESCRIPTION: This TypeScript code defines an asynchronous function to retrieve a specific item from the Hacker News API by its ID. It performs an HTTP GET request to the `item/{id}.json` endpoint, where `{id}` is the item's ID. The function returns a promise that resolves to a JSON object representing the Hacker News item.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/src/components/denoScript.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getItem(id: number) {\n\tconst res = await fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`);\n\treturn res.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Error Handler Step\nDESCRIPTION: This snippet explains the use of a dedicated flow step called 'Error handler' that executes custom scripts when a flow step fails. It requires defining a script or flow that processes error details, and it provides a link to detailed documentation. No code snippet provided, only description.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/10_error_handling/index.mdx#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Executing PostgreSQL query with TypeScript (Bun)\nDESCRIPTION: This script connects to a PostgreSQL database using specified resource parameters, executes a query ('SELECT * FROM demo' by default), and returns the resulting rows. It uses the 'pg' Client for database connection and handles errors appropriately.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/5_sql_quickstart/index.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from 'windmill-client';\nimport { Client } from 'pg';\n\n// Define the resource type as specified\ntype Postgresql = {\n  host: string,\n  port: number,\n  user: string,\n  dbname: string,\n  sslmode: string,\n  password: string,\n  root_certificate_pem: string\n}\n\n// The main function that will execute a query on a Postgresql database\nexport async function main(query = 'SELECT * FROM demo', pg_resource: Postgresql) {\n  // Initialize the PostgreSQL client with SSL configuration disabled for strict certificate validation\n  const client = new Client({\n    host: pg_resource.host,\n    port: pg_resource.port,\n    user: pg_resource.user,\n    password: pg_resource.password,\n    database: pg_resource.dbname,\n    ssl: pg_resource.ssl,\n  });\n\n  try {\n    // Connect to the database\n    await client.connect();\n\n    // Execute the query\n    const res = await client.query(query);\n\n    // Close the connection\n    await client.end();\n\n    // Return the query result\n    return res.rows;\n  } catch (error) {\n    console.error('Database query failed:', error);\n    // Rethrow the error to handle it outside or log it appropriately\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Help Function for Usage Documentation - Bash\nDESCRIPTION: This function named 'help' displays usage information for users, showing how to invoke the script with allowed flags. It is intended to be called when the user requests help or misuses the script. No dependencies required. Takes no parameters; outputs usage instructions.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-27-bash-script-arguments/index.mdx#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nhelp() {\ntecho \"usage: ./hello_world.sh [-n <name>][-h]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Documentation Cards Using React JSX Components\nDESCRIPTION: This snippet uses the imported DocCard React component to display two linked cards related to app editor documentation and quickstart guides. Each DocCard receives color, title, description, and href props to configure its appearance and navigation target. This relies on the DocCard component imported from the project and supports a grid layout for presenting documentation resources within the app editor interface.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/vertical_split_panes.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\\\"grid grid-cols-2 gap-6 mb-4\\\">\\n\\t<DocCard\\n\\t\\tcolor=\\\"orange\\\"\\n\\t\\ttitle=\\\"App editor Documentation\\\"\\n\\t\\tdescription=\\\"The app editor is a low-code builder to create custom User Interfaces with a mix of drag-and-drop and code.\\\"\\n\\t\\thref=\\\"/docs/apps/app_editor\\\"\\n\\t/>\\n\\t<DocCard\\n\\t\\tcolor=\\\"orange\\\"\\n\\t\\ttitle=\\\"Apps quickstart\\\"\\n\\t\\tdescription=\\\"Learn how to build your first app in a matter of minutes.\\\"\\n\\t\\thref=\\\"/docs/getting_started/apps_quickstart\\\"\\n\\t/>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack 5 for Svelte in Next.js with Windmill React SDK\nDESCRIPTION: This snippet shows how to extend Next.js's Webpack configuration to support `.svelte` files using `svelte-loader`. It adds `svelte-loader` to Webpack's module rules, enabling Svelte components within a React project.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/15_react_sdk/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst nextConfig = {\n\twebpack: (config) => {\n\t\tconfig.module.rules.push({\n\t\t\ttest: /\\.(svelte)$/, \n\t\t\tuse: [{\n\t\t\t\tloader: 'svelte-loader',\n\t\t\t\toptions: {\n\t\t\t\t\temitCss: true,\n\t\t\t\t\thotReload: true\n\t\t\t\t}\n\t\t\t}]\n\t\t});\n\n\t\treturn config;\n\t}\n};\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple S3 Files - TypeScript\nDESCRIPTION: This snippet illustrates how to return multiple S3 files using an array of S3 objects. Each object in the array should have the \"s3\" key with the path to the file.  This allows the user to display and download multiple S3 files in Windmill's UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport async function main() {\n  return [{s3: \"path/to/file_1\"}, {s3: \"path/to/file_2\", {s3: \"path/to/file_3\"}}];\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Tasks with Cron Syntax on Unix-like Systems\nDESCRIPTION: This snippet illustrates how to use cron syntax in a crontab file to schedule background tasks on Unix-like systems using the cron daemon. The example schedules a shell script to run daily at midnight, where '0 0 * * *' represents the time and frequency, and '/path/to/backup_script.sh' is the executable script's path. Cron is built-in to Linux and macOS and requires the user to have appropriate system permissions to edit their crontab via 'crontab -e'. The input is the cron expression and the shell script; output is determined by the script's actions. Constraints include shell environment differences and ensuring the script has executable permissions.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-29-run-background-jobs/index.mdx#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n0 0 * * * /path/to/backup_script.sh\n```\n\n----------------------------------------\n\nTITLE: Displaying PowerShell Version Table\nDESCRIPTION: This snippet outputs the version information of PowerShell in the current session. It's used to verify that PowerShell 7 or newer is installed and in use. The result is a table containing the PowerShell version and related build information.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/17_windows_workers/index.mdx#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$PSVersionTable\nPSVersion 7.4.5\n\n```\n\n----------------------------------------\n\nTITLE: Getting AG Grid Instances\nDESCRIPTION: Shows how to access the AG Grid instance of a table component.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngetAgGrid(id: string)\n```\n\n----------------------------------------\n\nTITLE: Deploying Website to GitHub Pages with npm\nDESCRIPTION: This command builds the website and pushes it to the `gh-pages` branch, suitable for hosting on GitHub Pages. The  `GIT_USER` environment variable should be set to the GitHub username.  `USE_SSH` should be set to true if using SSH. The deployment will occur to a GitHub Pages repository.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> USE_SSH=true npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Editing Another User's Crontab File (Shell)\nDESCRIPTION: The `crontab -u <username>` command allows editing the crontab file belonging to the specified user. This command requires administrative (root) privileges. Replace `<username>` with the actual target username.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-06-28-edit-crontab/index.mdx#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncrontab -u <username>\n```\n\n----------------------------------------\n\nTITLE: Printing First Positional Argument in Bash Script - Bash\nDESCRIPTION: This Bash script responds to the provided positional argument by greeting the user with their name. It utilizes the built-in $1 variable, which is automatically populated with the first argument at execution. No external dependencies are needed. The output is a greeting to the supplied name, e.g., 'Hello, Ruben.'.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-27-bash-script-arguments/index.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\necho \"Hello, $1.\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Responsive Styling in JSX\nDESCRIPTION: Shows how to embed a YouTube video with responsive styling using an iframe. The component uses CSS for aspect ratio maintenance and Tailwind classes for styling the container.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/compared_to/kestra.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<iframe\n\tstyle={{ aspectRatio: '16/9' }}\n\tsrc=\"https://www.youtube.com/embed/ajzxuK0zT2I\"\n\ttitle=\"Flow creation, Kestra vs Windmill\"\n\tframeBorder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\tallowFullScreen\n\tclassName=\"border-2 rounded-lg object-cover w-full dark:border-gray-800\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in React JSX\nDESCRIPTION: Imports the DocCard React component from a specific path in the Windmill project. This snippet is part of the UI setup to display informational cards and supports the documentation's visual layout. No external dependencies outside of the local component are required.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/25_dedicated_workers/index.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Player for S3 Integration Overview\nDESCRIPTION: This snippet contains an HTML iframe embedding a YouTube video that provides an overview of S3 integration within Windmill. It offers visual aid and additional context for understanding the integration process.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/s3.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n\tstyle={{ aspectRatio: '16/9' }}\n\t src=\"https://www.youtube.com/embed/ggJQtzvqaqA\"\n\t title=\"YouTube video player\"\n\t frameBorder=\"0\"\n\t allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\t allowFullScreen\n\t className=\"border-2 rounded-lg object-cover w-full dark:border-gray-800\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Reordering Columns with Initial State in Table Component (TSX)\nDESCRIPTION: This snippet shows how to rearrange the column order in the Windmill Table component using the `columnOrder` property within the `Initial State`. The code explicitly defines the order of columns as \"name\", \"age\", and \"id\". This relies on the underlying TanStack Table library.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/table/index.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  \"columnOrder\": [\n    \"name\",\n    \"age\",\n    \"id\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Markdown rendering in JavaScript\nDESCRIPTION: A minimal React component example that imports react-markdown and renders a Markdown string to JSX. It illustrates the core usage of react-markdown without customization, turning Markdown text (# Hello, *world*!) into corresponding React HTML elements. Requires React and react-markdown to be installed.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-11-27-using-markdown-in-react/index.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nexport default function App() {\n  return (\n    <div>\n      <ReactMarkdown>\n        # Hello, *world*!\n      </ReactMarkdown>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Preprocessed GCP Pub/Sub Data in TypeScript\nDESCRIPTION: A Windmill main function in TypeScript designed to consume the output of the GCP Pub/Sub preprocessor example. It accepts the preprocessed arguments (decoded string, content type, parsed message, attributes) and logs them.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/50_gcp_triggers/index.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main(\n  messageAsDecodedString: string,\n  contentType?: string,\n  parsedMessage?: any,\n  attributes?: Record<string, string>,\n) {\n  console.log(\"Decoded String:\", messageAsDecodedString);\n  console.log(\"Content-Type:\", contentType);\n  console.log(\"Parsed Message:\", parsedMessage);\n  console.log(\"Attributes:\", attributes);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB with S3 Credentials\nDESCRIPTION: This code shows the DuckDB configuration required to interact with S3, including setting the home directory, installing and loading the httpfs extension, and setting the S3 endpoint, region, access key, and secret key. This configuration would traditionally be needed in each script.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/27_data_pipelines/index.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconn = duckdb.connect()\nconn.execute(\n    \"\"\"\n    SET home_directory='./';\n    INSTALL 'httpfs';\n    LOAD 'httpfs';\n    SET s3_url_style='path';\n    SET s3_region='us-east-1';\n    SET s3_endpoint='http://minio:9000'; # using MinIo in Docker works perfectly fine if you don't have access to an AWS S3 bucket!\n    SET s3_use_ssl=0;\n    SET s3_access_key_id='<ACCESS_KEY>';\n    SET s3_secret_access_key='<SECRET_KEY>';\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Bi-directional Sync with Workspace Switching\nDESCRIPTION: This Bash snippet demonstrates how to use the `wmill` CLI to synchronize between two different Windmill workspaces or instances. It involves switching to the source workspace, pulling changes locally, switching to the target workspace, and then pushing the local changes to the target.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/sync.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace switch <source_workspace_id>\nwmill sync pull\nwmill workspace switch <target_workspace_id>\nwmill sync push\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Status Code in Windmill Webhook Response\nDESCRIPTION: Example of how to set a custom HTTP status code in a webhook response by including the 'windmill_status_code' property in the JSON response. This will make the synchronous endpoint return the specified status code with the result.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"windmill_status_code\": 201,\n\t\"result\": {\n\t\t\"Hello\": \"World\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering a Custom Webhook URL with cURL\nDESCRIPTION: Command-line example for triggering a custom webhook endpoint using cURL. This shows how to send a POST request with JSON data and a URL-safe base64 encoded payload parameter.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/4_webhooks/index.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST                               \\\n    --data '{}'                            \\\n    -H \"Content-Type: application/json\"    \\\n    \".../mywebhook?payload=<URL_SAFE_BASE64_ENCODED_JSON>\"\n```\n\n----------------------------------------\n\nTITLE: Email Input Component Outputs Table in Markdown\nDESCRIPTION: Specifies the output properties of the Email input component with a markdown table. It includes the name, type, and a description, clarifying what value the component produces upon user interaction. The key output is the 'Result', which returns the user's entered email as a string.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/email_input.mdx#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name   |  Type  | Description            |\\n| ------ | :----: | ---------------------- |\\n| Result | string | The email input value. |\n```\n\n----------------------------------------\n\nTITLE: Representing S3 File Pointer in JSON\nDESCRIPTION: Shows the JSON structure used by Windmill to represent a pointer to an object in S3 or Azure Blob storage. This format is used when passing object storage files as inputs or outputs in scripts, flows, or apps. It consists of a single key, \"s3\", whose value is the key/path of the object within the configured bucket/container.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/18_files_binary_data/index.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"s3\": \"path/to/file\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Argument Defaults in YAML\nDESCRIPTION: This code shows how to define a default value for a string argument in a Windmill Ansible script. It demonstrates how to use the `default:` field within the `extra_vars` section to set a default value.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/10_ansible_quickstart/index.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nextra_vars:\n  my_string:\n    type: string\n    default: 'Fascinating String of Words'\n```\n\n----------------------------------------\n\nTITLE: Disabling Pre-bundling in Windmill TypeScript Scripts\nDESCRIPTION: A code snippet showing how to disable Windmill's pre-bundling feature for TypeScript scripts. By adding a '//nobundling' comment at the top of the script, users can opt out of the Bun bundler optimization process.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/1_typescript_quickstart/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//nobundling\n```\n\n----------------------------------------\n\nTITLE: Windmill Variable Specification Structure (TypeScript)\nDESCRIPTION: Defines the structure of a Windmill variable specification object using TypeScript syntax. It outlines the expected fields: `value`, `is_secret`, `description`, `extra_perms`, `account`, `is_oauth`, and `is_expired` along with their data types.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/variable.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  value: string,\n  is_secret: boolean,\n  description: string,\n  extra_perms: object,\n  account: number,\n  is_oauth: boolean,\n  is_expired: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Python Windmill Script Quickstart\nDESCRIPTION: Provides instructions for writing Windmill scripts in Python, showing how to create a DocCard with the Python icon, title, description, and link to the Python script documentation. It facilitates quick access to Python scripting tutorials within the Windmill ecosystem.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { SiPython } from 'react-icons/si';\n\n// Usage: Render a link card for Python Windmill scripts, including icon, title, description, and link\n```\n\n----------------------------------------\n\nTITLE: Editing Current User's Crontab File (Shell)\nDESCRIPTION: Executing `crontab -e` in the shell opens the current user's crontab file using the system's default editor (e.g., vi, nano). This command is the standard and recommended method for editing crontabs as it includes syntax checking upon saving.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-06-28-edit-crontab/index.mdx#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Setting Time Input Value with setValue - JavaScript\nDESCRIPTION: The `setValue` function is utilized to programmatically set or force the value of a time input component. It accepts an id to identify the component and a value of any type, allowing dynamic control.  It's important to avoid combining dynamic default values and `setValue` for best results.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/time_input.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n`setValue(id: string, value: any)`\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Users into Database in SQL\nDESCRIPTION: SQL script that populates the 'users' table with sample user data. It inserts 8 users with names and roles (either MANAGER or DEVELOPER) to be used in the issue tracker application.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-01-25-issue-tracker/index.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n-- Insert users\nINSERT INTO users(name, roles)\nVALUES\n  ('Theresa Hurley', '{MANAGER}'),\n  ('Taliyah Gardner', '{MANAGER}'),\n  ('Ezekiel Ortega', '{MANAGER}'),\n  ('Gia Keller', '{MANAGER}'),\n  ('Jefferson Pratt', '{DEVELOPER}'),\n  ('Carlo Flores', '{DEVELOPER}'),\n  ('Arielle Shepherd', '{DEVELOPER}'),\n  ('Caitlin Lucas', '{DEVELOPER}');\n```\n\n----------------------------------------\n\nTITLE: Schedule Error Handler Configuration\nDESCRIPTION: This describes how to set up a script or flow to handle errors in scheduled scripts or flows, emphasizing that this feature is available in the Enterprise Edition. It includes a link to scheduling concepts and a video overview. No code snippet provided.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/10_error_handling/index.mdx#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Docker Support in Windmill Scripts\nDESCRIPTION: Provides a DocCard linking to the Docker scripting support documentation, emphasizing Windmill's ability to run any Docker container through its shell scripting support. The card includes iconography, a brief description, and navigation link.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { SiDocker } from 'react-icons/si';\n\n// Link to Docker script support documentation, highlighting container execution capabilities\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependencies Using Nix\nDESCRIPTION: This command uses `nix develop` to bring all the project's dependencies and helper tools into scope. It is a prerequisite for building and developing the website using Nix. The output includes the dependencies and tools available for the project.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ nix develop\n```\n\n----------------------------------------\n\nTITLE: Fetching a Resource Using Bash and Curl\nDESCRIPTION: This Bash snippet uses curl to issue an authenticated HTTP GET request to the internal Windmill API to fetch the resource at 'u/user/foo'. It passes the Bearer token for authentication and parses the JSON response using jq to extract the 'value' field. Requires the environment variables WM_TOKEN, BASE_INTERNAL_URL, and WM_WORKSPACE to be set.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -H \"Authorization: Bearer $WM_TOKEN\" \\\n  \"$BASE_INTERNAL_URL/api/w/$WM_WORKSPACE/resources/get/u/user/foo\" \\\n    | jq -r .value\n```\n\n----------------------------------------\n\nTITLE: Importing Windmill Client in TypeScript Script\nDESCRIPTION: This snippet shows how to import the Windmill client library within a TypeScript script to access the full Windmill API. This import method is used for standard Bun TypeScript scripts, including those performing fetch operations without the 'native' header.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/6_rest_grapqhql_quickstart/index.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as wmill from './windmill.ts'\n```\n\n----------------------------------------\n\nTITLE: Setting up pgvector Database Schema in Supabase\nDESCRIPTION: SQL commands to set up Supabase database for storing document embeddings using the pgvector extension. Creates the necessary table structure and a function to perform similarity searches against the stored vector embeddings.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-06-05-discord-bot/index.mdx#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension vector;\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE documents (\n  id bigserial PRIMARY KEY,\n  content text,\n  link text,\n  embedding vector(1536)\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function match_documents (\n  query_embedding vector(1536),\n  match_threshold float,\n  match_count int\n)\nreturns table (\n  id bigint,\n  content text,\n  link text,\n  similarity float\n)\nlanguage sql stable\nas $$\n  select\n    documents.id,\n    documents.content,\n    link varchar,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where 1 - (documents.embedding <=> query_embedding) > match_threshold\n  order by similarity desc\n  limit match_count;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Returning GIF (Simplified) - TypeScript\nDESCRIPTION: This snippet shows how to return a GIF image. The GIF content must be base64 encoded and provided directly as the return value. The GIF is displayed in the UI. There is a constraint that the gif must be encoded in base64.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/19_rich_display_rendering/index.mdx#_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nreturn { \"gif\": base64Image }\n```\n\n----------------------------------------\n\nTITLE: Query Available Snowflake Tables\nDESCRIPTION: This SQL query retrieves the names of all tables within the 'PUBLIC' schema in the connected Snowflake database. It's used in a Background Runnable to populate a dropdown list of available tables based on the user's role.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/snowflake_app_with_user_roles/index.mdx#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'PUBLIC';\n```\n\n----------------------------------------\n\nTITLE: Setting up with Nix\nDESCRIPTION: This command runs `wm-setup`, which is a command that is project specific and is related to setting up a development environment using Nix. It is a prerequisite for building and developing the website using Nix. The function of this command depends on the project's specific configuration.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ wm-setup\n```\n\n----------------------------------------\n\nTITLE: Verifying WAL Level Configuration with SQL Query\nDESCRIPTION: Verifies that the WAL level is set to `logical` by running an SQL SHOW command. This confirms that the database is configured correctly to support logical replication before using Windmill triggers.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/46_postgres_triggers/index.mdx#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW wal_level;\n```\n\n----------------------------------------\n\nTITLE: Creating React App with Create React App\nDESCRIPTION: This snippet demonstrates the use of the Create React App tool to bootstrap a new React application. It sets up the basic project structure and dependencies required for React development, including navigating into the created directory.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app draggable-tuto\ncd draggable-tuto\n```\n\n----------------------------------------\n\nTITLE: Fetching User-Defined Variables in Nu\nDESCRIPTION: Illustrates fetching a Windmill variable ('u/user/foo') in a Nushell script using the `get_variable` command. This command relies on the Windmill integration for Nu. Note: The source markdown tags this snippet as Python, but the code is Nu.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/2_variables_and_secrets/index.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nget_variable u/user/foo\n```\n\n----------------------------------------\n\nTITLE: Rust Windmill Script Quickstart\nDESCRIPTION: Creates a DocCard with support for scripting in Rust using Windmill, including icon, descriptive text, and navigation link to the Rust scripting tutorial, helping Rust developers get started.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { SiRust } from 'react-icons/si';\n\n// Rust scripting quickstart card, facilitating access to Rust Windmill tutorials\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in MDX\nDESCRIPTION: This snippet imports the 'DocCard' component from a local path within the documentation site's source files. This component is likely used to render styled cards linking to other documentation pages.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/0_integrations_on_windmill.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component\nDESCRIPTION: This code snippet imports the `DocCard` component. The `DocCard` component is imported from a specific location within the project structure. This import is essential for using the `DocCard` component in the current document.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/modal_form.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Go Windmill Script Quickstart\nDESCRIPTION: Facilitates access to Windmill scripting in Go by creating a DocCard with the Go icon, title, description, and URL pointing to Go scripting documentation. This enables users to quickly navigate for Go scripting tutorials.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { SiGo } from 'react-icons/si';\n\n// Card component linking to Go language scripting quickstart documentation\n```\n\n----------------------------------------\n\nTITLE: Windmill Variable Specification Example (JSON)\nDESCRIPTION: Provides a concrete JSON example of a variable specification object. This example shows a non-secret variable with a specific value and description, illustrating the structure defined previously.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/variable.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"value\": \"finland does not actually exist\",\n\"is_secret\": false,\n\"description\": \"This item is not secret\",\n\"extra_perms\": {},\n\"account\": null,\n\"is_oauth\": false,\n\"is_expired\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kafka Topic using Bash\nDESCRIPTION: This bash command creates a Kafka topic using the `kafka-topics.sh` script.  It requires the Kafka container ID to execute the command within the container. It specifies the topic name and bootstrap server.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2023-12-19-service-script-kafka/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it $KAFKA_CONTAINER_ID kafka-topics.sh --create --topic windmill-events --bootstrap-server localhost:9092\n```\n\n----------------------------------------\n\nTITLE: Reading the Contents of the HEAD File\nDESCRIPTION: This command reads and prints the contents of the .git/HEAD file, which contains the reference to the current branch. This is used to diagnose potential corruption of the HEAD file.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-12-fatal-git-repository-error/index.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncat .git/HEAD\n```\n\n----------------------------------------\n\nTITLE: Displaying Active User and Workspace with Windmill CLI - Bash\nDESCRIPTION: This command outputs the current authenticated user and the active workspace as recognized by the CLI. No arguments are required. Useful for quickly verifying session and workspace context. Windmill CLI must be installed and configured.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/workspace-management.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace whoami\n```\n\n----------------------------------------\n\nTITLE: C# Windmill Script Quickstart\nDESCRIPTION: Adds a DocCard for C# scripting support, displaying icon, title, description, and link to C# scripting guides to assist users in utilizing Windmill with C#.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { SiCplusplus } from 'react-icons/si';\n\n// Card directing to C# scripting tutorials within Windmill, including icon, title, and link\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Selection using Frontend Script in Sidebar Tabs Component\nDESCRIPTION: This snippet demonstrates how to control the Sidebar tabs component using the setTab frontend script function. The function takes a tab ID and an index number to set the current active tab.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/sidebar_tabs.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetTab('a',1)\n```\n\n----------------------------------------\n\nTITLE: Installing React Draggable with npm\nDESCRIPTION: This snippet shows the installation of the react-draggable library using npm. It adds the library as a project dependency, making the draggable functionality available for use within the application.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-draggable\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Appending SMTP Configuration to .env File (Environment Variables)\nDESCRIPTION: This snippet provides example lines for adding SMTP configuration to the `.env` file. It includes placeholders for host, port, username, password, and sender address, demonstrating how to integrate SMTP settings for email functionality.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/18_instance_settings/index.mdx#_snippet_2\n\nLANGUAGE: Environment Variables\nCODE:\n```\nSMTP_FROM=windmill@domain.com\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USERNAME=your_email@gmail.com\nSMTP_PASSWORD=your_app_password\n```\n\n----------------------------------------\n\nTITLE: Java Windmill Script Quickstart\nDESCRIPTION: Creates a DocCard for Java scripting in Windmill, with icon, descriptive text, and link to Java scripting tutorials, supporting Java developers in using Windmill effectively.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { LiaJava } from 'react-icons/lia';\n\n// Card linking to Java scripting documentation and tutorials for Windmill\n```\n\n----------------------------------------\n\nTITLE: Adding a Specific Windmill Variable (Bash)\nDESCRIPTION: Demonstrates adding a variable named `my_variable` with the value `12345`. The variable is marked as a secret, includes a description, and is associated with account ID 1.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/variable.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwmill add my_variable --value=12345 --secret --description=\"My secret variable\" --account=1\n```\n\n----------------------------------------\n\nTITLE: Fetching User-Defined Variables via API in Bash\nDESCRIPTION: Demonstrates fetching a Windmill variable ('u/user/foo') directly from the API within a Bash script using `curl`. It relies on environment variables `WM_TOKEN` (for authentication) and `BASE_INTERNAL_URL` (for the API endpoint), and uses `jq` to parse the JSON response and extract the value.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/2_variables_and_secrets/index.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -H \"Authorization: Bearer $WM_TOKEN\" \\\n  \"$BASE_INTERNAL_URL/api/w/$WM_WORKSPACE/variables/get/u/user/foo\" \\\n    | jq -r .value\n```\n\n----------------------------------------\n\nTITLE: Listing Flows with wmill - Bash\nDESCRIPTION: This command lists all flows in the remote workspace. It requires the `wmill` CLI tool to be installed and configured to connect to the Windmill instance. The output displays a list of available flows.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/flow.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwmill flow\n```\n\n----------------------------------------\n\nTITLE: Disabling pre-bundling for TypeScript Bun scripts\nDESCRIPTION: For scripts that are incompatible with bundling (rare cases), you can add a special comment directive at the top of the script to disable the pre-bundling feature.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/changelog/2024-07-26-pre-bundle-bun-scripts/index.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n//nobundling\n```\n\n----------------------------------------\n\nTITLE: Remove Workspace Example - Windmill CLI - Bash\nDESCRIPTION: This example unregisters the 'MyWorkspace' workspace from the local CLI configuration. The change is local to the computer and does not affect the remote instance or data.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/workspace-management.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace remove MyWorkspace\n```\n\n----------------------------------------\n\nTITLE: HTML Button with postMessage\nDESCRIPTION: This HTML snippet creates a button that sends a message to the parent window using `postMessage`. This is used to communicate with frontend runnables in Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/html.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button onclick=\"window.parent.postMessage('Hello');\">Say Hello</button>\n```\n\n----------------------------------------\n\nTITLE: Fetching User-Defined Variables in Python\nDESCRIPTION: Displays the Python code generated by the '+ Variable' feature in the Windmill UI for fetching a variable ('u/user/foo'). It utilizes the `wmill` client's `get_variable` function.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/2_variables_and_secrets/index.mdx#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwmill.get_variable(\"u/user/foo\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Fish shell completions for Windmill CLI\nDESCRIPTION: Configures Fish shell to provide command completion for the Windmill CLI by adding a source line to the Fish configuration file using process substitution.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/advanced/3_cli/installation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsource (wmill completions fish | psub)\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component\nDESCRIPTION: This snippet imports the DocCard component from the specified path. The DocCard component is likely used to render cards with documentation links.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/12_support_and_sla/index.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: DocCard JSX Implementation for App Editor Documentation\nDESCRIPTION: JSX implementation of the DocCard component to create a linked documentation card about the App editor in the page layout.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/code_input.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCard\n\tcolor=\"orange\"\n\ttitle=\"App editor Documentation\"\n\tdescription=\"The app editor is a low-code builder to create custom User Interfaces with a mix of drag-and-drop and code.\"\n\thref=\"/docs/apps/app_editor\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Changing Current Directory in Shell\nDESCRIPTION: This command changes the current directory in the shell to the specified directory name. It's used to navigate to the Git repository.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-12-fatal-git-repository-error/index.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd <directory_name>\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component in JSX\nDESCRIPTION: Imports the DocCard component from the site's components directory. This component is used to create linked documentation cards in the UI.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/carousel.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Pages with goto\nDESCRIPTION: Examples of using the goto function to navigate to different URLs from frontend scripts.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngoto(path: string, newTab?: boolean)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngoto('/apps/1');\ngoto('https://www.windmill.dev/', true);\n```\n\n----------------------------------------\n\nTITLE: Accessing App Context in Frontend Scripts\nDESCRIPTION: Demonstrates how to access the context object in a frontend script using the global 'ctx' variable.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(ctx.email);\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Argument with Default Value in Bash\nDESCRIPTION: This snippet demonstrates declaring a shell variable from the first positional script argument, with a fallback default value if the argument is not provided. No external dependencies are required. Input is given via command-line arguments; if none is provided, the variable 'argument_name' is set to 'Its default value'. Output is accessible via shell variable substitution within the script. This pattern is used for making script parameters optional.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/4_bash_quickstart/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nargument_name=\"${1:-Its default value}\"\n```\n\n----------------------------------------\n\nTITLE: Compressing PNG Images with Pillow in Python\nDESCRIPTION: This script compresses PNG images by decoding a base64 encoded input image, using the Pillow library to optimize and reduce the file size without degrading image quality, then re-encoding the compressed image back to base64. It requires the Pillow package and Python's base64 and io modules. The function accepts a base64 string representing the image and returns a dictionary containing the base64 compressed image and filename. If the input is not a valid image, it returns an error message. The optimize flag in Pillow's save method is leveraged specifically for compression of PNG format images.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-04-18-useful-python-scripts/index.mdx#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport base64\nfrom PIL import Image, UnidentifiedImageError\nimport io\n\ndef main(image_base64: str):\n    try:\n        # Decode the base64 encoded image\n        image_data = base64.b64decode(image_base64)\n\n        # Convert the binary data to an image\n        image = Image.open(io.BytesIO(image_data))\n\n        # Compress the image\n    \n        # The \"optimize\" flag can be used to reduce the file size without losing any quality.\n        with io.BytesIO() as output:\n            image.save(\n                output, format=\"PNG\", optimize=True\n            )  # Using optimize flag for PNG compression\n            compressed_data = output.getvalue()\n\n        # Encode the compressed image to base64\n        compressed_base64 = base64.b64encode(compressed_data).decode(\"utf-8\")\n\n        # Return the base64 encoded compressed image\n        return {\n                    \"file\": {\n                        \"content\": compressed_base64,\n                        \"filename\": \"compressed_image.png\",\n                    }\n                }\n\n    except UnidentifiedImageError:\n        # Handle the case where the image cannot be identified\n        return \"Error: The provided data does not represent a valid image.\"\n```\n\n----------------------------------------\n\nTITLE: Recomputing Components\nDESCRIPTION: Demonstrates how to trigger recomputation of specific components or all components.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/3_app-runnable-panel.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrecompute(id: string)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrecompute('a');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nglobalRecompute()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nglobalRecompute()\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with Nix\nDESCRIPTION: This command, `wm-dev`, starts a local development server for the website within a Nix environment.  It typically provides live reloading and other development features. The browser window will open automatically. The output is the website running in development mode.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ wm-dev\n```\n\n----------------------------------------\n\nTITLE: Multiple Slack Approval Requests\nDESCRIPTION: This TypeScript snippet demonstrates sending multiple approval requests to different Slack channels using the `wmill.requestInteractiveSlackApproval` function. It sends one request to a 'customers' channel and another to an 'admins' channel, both using the same Slack resource. It imports `windmill-client` as the `wmill` namespace.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/flows/11_flow_approval.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as wmill from \"windmill-client\"\n\nexport async function main() {\n  await wmill.requestInteractiveSlackApproval({\n    slackResourcePath: \"/u/username/slack_resource\",\n   channelId: \"customers\"\n  })\n  await wmill.requestInteractiveSlackApproval({\n    slackResourcePath: \"/u/username/slack_resource\",\n    channelId: \"admins\"\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Windmill Flows\nDESCRIPTION: This entry describes the concept of setting up error handlers within Windmill flows to respond to errors during flow execution. It references additional documentation for multiple error handling methods. No code snippet is included, only descriptive text and links.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/10_error_handling/index.mdx#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Configuring Svelte in Vite for Windmill React SDK\nDESCRIPTION: This snippet demonstrates how to modify `vite.config.js` to include the Svelte plugin alongside React when using Vite as the build tool. It enables Svelte components within a React project utilizing the SDK, which is built with Svelte.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/15_react_sdk/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport react from '@vitejs/plugin-react';\nimport { svelte } from '@sveltejs/vite-plugin-svelte';\n\nexport default defineConfig({\n\tplugins: [svelte(), react()]\n});\n```\n\n----------------------------------------\n\nTITLE: No code snippets present\nDESCRIPTION: \nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/number_input.mdx#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Configuring Jaeger for Metrics Export to Prometheus (YAML)\nDESCRIPTION: Jaeger configuration file (`jaeger-config.yaml`) defining the OpenTelemetry pipeline. It sets up receivers (OTLP), processors (batch), exporters (jaeger_storage_exporter, spanmetrics), and connectors (spanmetrics). Crucially, it configures Jaeger storage backends and metrics backends, directing span metrics to a Prometheus exporter listening on `0.0.0.0:8889` and configured to send data to `http://prometheus:9090`.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/9_guides/otel/index.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  extensions: [jaeger_storage, jaeger_query]\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [jaeger_storage_exporter, spanmetrics]\n    metrics/spanmetrics:\n      receivers: [spanmetrics]\n      exporters: [prometheus]\n  telemetry:\n    resource:\n      service.name: jaeger\n    metrics:\n      level: detailed\n      address: 0.0.0.0:8888\n    logs:\n      level: DEBUG\n\nextensions:\n  jaeger_query:\n    storage:\n      traces: some_storage\n      metrics: some_metrics_storage\n  jaeger_storage:\n    backends:\n      some_storage:\n        memory:\n          max_traces: 100000\n    metric_backends:\n      some_metrics_storage:\n        prometheus:\n          endpoint: http://prometheus:9090\n          normalize_calls: true\n          normalize_duration: true\n\nconnectors:\n  spanmetrics:\n\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: \"0.0.0.0:4317\"\n\nprocessors:\n  batch:\n\nexporters:\n  jaeger_storage_exporter:\n    trace_storage: some_storage\n  prometheus:\n    endpoint: \"0.0.0.0:8889\"\n```\n\n----------------------------------------\n\nTITLE: Defining Unique State Paths in Rust\nDESCRIPTION: This Rust snippet dynamically constructs a unique state path string used to isolate script states within Windmill flows or schedules. It determines the trigger based on the presence of a schedule path and constructs the full path differently depending on whether it is part of a flow, a standalone script, or a temporary user state. Key variables include username, flow_path, script_path, schedule_path, step_id, and trigger. The output is a string representing the path where states are stored, ensuring data separation per execution context.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/core_concepts/3_resources_and_types/index.mdx#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n    let state_path = {\n        let trigger = if schedule_path.is_some() {\n            username.to_string()\n        } else {\n            \"user\".to_string()\n        };\n\n        if let Some(flow_path) = flow_path.clone() {\n            format!(\n                \"{flow_path}/{}_{trigger}\",\n                step_id.clone().unwrap_or_else(|| \"nostep\".to_string())\n            )\n        } else if let Some(script_path) = path.clone() {\n            let script_path = if script_path.ends_with(\"/\") {\n                \"noname\".to_string()\n            } else {\n                script_path\n            };\n            format!(\"{script_path}/{trigger}\")\n        } else {\n            format!(\"u/{username}/tmp_state\")\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Locating Bun Executable Path in PowerShell\nDESCRIPTION: This snippet uses PowerShell to find the installation path of the Bun JavaScript runtime by invoking 'where.exe'. Accurate path discovery is essential for environment configuration. There are no dependencies other than a valid Bun installation and PowerShell. The output will be the full path to 'bun.exe'.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/17_windows_workers/index.mdx#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nwhere.exe bun\n\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons in React JavaScript\nDESCRIPTION: Imports the custom DocCard component from the local project directory and the Timer icon from the lucide-react library to use in rendering documentation links and UI cards within React functional components. These imports must resolve correctly to allow referenced custom or third-party React components to be rendered in the UI. This snippet underpins the use of modular, component-based design in the rest of the file.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/0_app_editor/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { Timer } from 'lucide-react';\n```\n\n----------------------------------------\n\nTITLE: Using DocCard Component for Navigation in JSX/Markdown\nDESCRIPTION: Implementation of two DocCard components within a grid layout to provide navigation to related documentation. Links to the App editor documentation and Apps quickstart guide.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/carousel.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"App editor Documentation\"\n\t\tdescription=\"The app editor is a low-code builder to create custom User Interfaces with a mix of drag-and-drop and code.\"\n\t\thref=\"/docs/apps/app_editor\"\n\t/>\n\t<DocCard\n\t\tcolor=\"orange\"\n\t\ttitle=\"Apps quickstart\"\n\t\tdescription=\"Learn how to build your first app in a matter of minutes.\"\n\t\thref=\"/docs/getting_started/apps_quickstart\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Draggable Component\nDESCRIPTION: This JavaScript snippet imports the `Draggable` component from the `react-draggable` library into the `Card.jsx` file. This import is essential to enable drag-and-drop functionality.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/blog/2024-08-13-react-draggable-component/index.mdx#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport Draggable from 'react-draggable';\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Cards in JSX\nDESCRIPTION: Creates a responsive grid layout with two DocCard components that link to additional documentation resources. Each card includes a title, description, link, and color property.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/6_app_deployment.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Draft and deploy\"\n\t\tdescription=\"Learn how to draft and deploy apps.\"\n\t\thref=\"/docs/core_concepts/draft_and_deploy\"\n\t\tcolor=\"orange\"\n\t/>\n\t<DocCard\n\t\ttitle=\"Public apps\"\n\t\tdescription=\"Apps can be accessed as a standalone app by anyone who has the secret URL\"\n\t\thref=\"/docs/apps/public_apps\"\n\t\tcolor=\"orange\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout with DocCard Components in JSX\nDESCRIPTION: Shows how to create a responsive grid layout with DocCard components for documentation navigation. The grid uses Tailwind CSS classes for styling and layout control.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/compared_to/kestra.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Self-host Windmill\"\n\t\tdescription=\"Self host Windmill in 2 minutes.\"\n\t\thref=\"/docs/advanced/self_host/\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing DocCard Component for Documentation UI in JavaScript\nDESCRIPTION: This snippet demonstrates the import of a reusable DocCard React component from the Windmill documentation site source directory. The DocCard component is used to render documentation cards linking to related guides. This import is a prerequisite for rendering UI elements but does not itself provide functional integration logic.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/integrations/snowflake.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: Rest / GraphQL Windmill Script Quickstart\nDESCRIPTION: Adds a DocCard for REST and GraphQL scripting support, with icon, title, description, and link to relevant tutorials, facilitating users' ability to write APIs-driven scripts using Windmill.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/getting_started/0_scripts_quickstart/index.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\nimport { SiGraphql } from 'react-icons/si';\n\n// Card linking to REST and GraphQL scripting guidance within Windmill ecosystem\n```\n\n----------------------------------------\n\nTITLE: Importing Document Card Component in JavaScript\nDESCRIPTION: This JavaScript snippet imports the DocCard React component from the local site components directory to be used within the document for displaying documentation cards. This import is required to render the linked references to App editor documentation and Apps quickstart guides in the usage examples.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/apps/4_app_configuration_settings/image.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@site/src/components/DocCard';\n```\n\n----------------------------------------\n\nTITLE: DocCard Component Implementation for Self-Host Navigation\nDESCRIPTION: This JSX code implements the DocCard component to create a navigation card for the 'Self-host Windmill' documentation section. It defines the title, description, and href properties for the component.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/2_setup_oauth/index.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-6 mb-4\">\n\t<DocCard\n\t\ttitle=\"Self-host Windmill\"\n\t\tdescription=\"Self host Windmill in 2 minutes.\"\n\t\thref=\"/docs/advanced/self_host/\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Instance object storage connection overview\nDESCRIPTION: Describes how Windmill's instance object storage connects to S3 to facilitate large-scale log management and distributed dependency caching, extending across all worker nodes with optional configuration for binary bundle storage.\nSOURCE: https://github.com/windmill-labs/windmilldocs/blob/main/docs/misc/13_s3_cache/index.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Instance object storage\nConnect instance to S3 for large-scale log management and distributed dependency caching.\n```"
  }
]